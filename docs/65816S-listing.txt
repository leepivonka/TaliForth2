
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Fri Jul 05 17:38:43 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	28 cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	66 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	70 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	69 cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   To align the last char of name.
=127					wh_NameLastChar	= *-1		; |		  |   Last char of name.
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask		=	    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask	=	    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			Name0:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 fa b4	jsr $b4fa			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 fc a1	jsr $a1fc			jsr BlockInit
.806b	20 7c ab	jsr $ab7c			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 c6 b7	jsr $b7c6			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 c6 b7	jsr $b7c6			jsr PushYA
.807c	20 16 b0	jsr $b016			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c ac b4	jmp $b4ac			jmp Abort_Core2	;Quit
=80					CodeLen	.var *-XtPtr1
=$809c					Here1 = *	; remember here
>8049	50					.byte CodeLen	;patch wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			Name0:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CodeLen	.var *-XtPtr1
=$8178					Here1 = *	; remember here
>8174	01					.byte CodeLen	;patch wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			Name0:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	03					.byte 3	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement	; offset to previous nt
>8180	28 f1					  .word platform_CCAT		; pointer to xt
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			Name0:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	03					.byte 3	;wh_CodeLength
>8188	09					  .byte LinkDisplacement	; offset to previous nt
>8189	27 f1					  .word platform_bye		; pointer to xt
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		Name0:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=10					NameLength = *-Name0
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement	; offset to previous nt
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 15 b8	jsr $b815	TypeSymbol:	jsr Two
.819c	20 b0 c4	jsr $c4b0			jsr Spaces
.819f	a9 28		lda #$28			lda #'('
.81a1	20 dd cd	jsr $cddd			jsr Emit_A
.81a4	20 e9 cd	jsr $cde9			jsr Space
.81a7	20 73 cf	jsr $cf73			jsr Dup
.81aa	a9 24		lda #$24			lda #'$'
.81ac	20 dd cd	jsr $cddd			jsr Emit_A
.81af	20 1c a9	jsr $a91c			jsr Dot_Hex
.81b2	20 e9 cd	jsr $cde9			jsr Space
.81b5	20 dc 81	jsr $81dc			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b8	20 03 be	jsr $be03			jsr Name_To_String	; Change nt into the name
.81bb	20 f5 cd	jsr $cdf5			jsr Type		; print it.
.81be	20 e9 cd	jsr $cde9			jsr Space
.81c1	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c3	15 25		ora $25,x			ora DStack+1,x
.81c5	f0 0b		beq $81d2			beq +
.81c7	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c9	20 dd cd	jsr $cddd			jsr Emit_A
.81cc	20 73 cf	jsr $cf73			jsr Dup
.81cf	20 1d cc	jsr $cc1d			jsr U_Dot
.81d2	e8		inx		+		inx
.81d3	e8		inx				inx
.81d4	a9 29		lda #$29			lda #')'
.81d6	20 dd cd	jsr $cddd			jsr Emit_A
.81d9	4c e9 cd	jmp $cde9			jmp Space
=67					CodeLen	.var *-XtPtr1
=$81dc					Here1 = *	; remember here
>8197	43					.byte CodeLen	;patch wh_CodeLength
.81dc					DictSearchXt:
.81dc	ca		dex				dex
.81dd	ca		dex				dex
.81de	20 4c cf	jsr $cf4c			jsr Over
.81e1	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e3	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e5	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e7	48		pha				pha
.81e8	68		pla		_ListNext:	pla
.81e9	18		clc				clc
.81ea	69 02		adc #$02			adc #2			; to next wordlist
.81ec	c9 18		cmp #$18			cmp #max_wordlists*2
.81ee	b0 10		bcs $8200			bcs _ListDone
.81f0	48		pha				pha
.81f1	a8		tay				tay
.81f2	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f5	85 14		sta $14				sta tmp1+0
.81f7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fa	85 15		sta $15				sta tmp1+1
.81fc	d0 0a		bne $8208			bne _WordTest
.81fe	f0 e8		beq $81e8			beq _ListNext		;   empty list
.8200	e8		inx		_ListDone:	inx			; Drop pattern xt
.8201	e8		inx				inx			; ( offset nt )
.8202	60		rts				rts
.8203	20 9b 82	jsr $829b	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8206	f0 e0		beq $81e8			beq _ListNext		; end of Dictionary?
.8208	20 c7 bd	jsr $bdc7	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.820b	38		sec				sec			; tmp3 = xt offset for this word
.820c	b5 24		lda $24,x			lda DStack+0,x
.820e	e5 16		sbc $16				sbc tmp2+0
.8210	85 18		sta $18				sta tmp3+0
.8212	b5 25		lda $25,x			lda DStack+1,x
.8214	e5 17		sbc $17				sbc tmp2+1
.8216	85 19		sta $19				sta tmp3+1
.8218	20 80 82	jsr $8280			jsr _test
.821b	a0 00		ldy #$00			ldy #0			; is this word a constant?
.821d	b1 16		lda ($16),y			lda (tmp2),y
.821f	c9 a0		cmp #$a0			cmp #$a0
.8221	f0 2a		beq $824d			beq _PushYA
.8223	c9 a9		cmp #$a9			cmp #$a9
.8225	f0 02		beq $8229			beq _PushZA
.8227	d0 da		bne $8203			bne _WordNext
.8229	c8		iny		_PushZA:	iny			; get lda # operand
.822a	b5 24		lda $24,x			lda DStack+0,x
.822c	f1 16		sbc ($16),y			sbc (tmp2),y
.822e	85 18		sta $18				sta tmp3+0
.8230	b5 25		lda $25,x			lda DStack+1,x
.8232	e9 00		sbc #$00			sbc #0
.8234	85 19		sta $19				sta tmp3+1
.8236	c8		iny				iny			; check jmp opcode
.8237	b1 16		lda ($16),y			lda (tmp2),y
.8239	c9 4c		cmp #$4c			cmp #$4c
.823b	d0 c6		bne $8203			bne _WordNext
.823d	c8		iny				iny			; check jmp operand lo
.823e	b1 16		lda ($16),y			lda (tmp2),y
.8240	c9 f5		cmp #$f5			cmp #<PushZA
.8242	d0 bf		bne $8203			bne _WordNext
.8244	c8		iny				iny			; check jmp operand hi
.8245	b1 16		lda ($16),y			lda (tmp2),y
.8247	c9 b7		cmp #$b7			cmp #>PushZA
.8249	f0 2f		beq $827a			beq _KTest
.824b	d0 b6		bne $8203			bne _WordNext
.824d	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824f	b1 16		lda ($16),y			lda (tmp2),y
.8251	c9 a9		cmp #$a9			cmp #$a9
.8253	d0 ae		bne $8203			bne _WordNext
.8255	c8		iny				iny			; get lda # operand
.8256	b5 24		lda $24,x			lda DStack+0,x
.8258	f1 16		sbc ($16),y			sbc (tmp2),y
.825a	85 18		sta $18				sta tmp3+0
.825c	a0 01		ldy #$01			ldy #1			; get LDY # operand
.825e	b5 25		lda $25,x			lda DStack+1,x
.8260	f1 16		sbc ($16),y			sbc (tmp2),y
.8262	85 19		sta $19				sta tmp3+1
.8264	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8266	b1 16		lda ($16),y			lda (tmp2),y
.8268	c9 4c		cmp #$4c			cmp #$4c
.826a	d0 97		bne $8203			bne _WordNext
.826c	c8		iny				iny			; check JMP operand lo
.826d	b1 16		lda ($16),y			lda (tmp2),y
.826f	c9 c6		cmp #$c6			cmp #<PushYA
.8271	d0 0a		bne $827d			bne _WordNext3
.8273	c8		iny				iny			; check JMP operand hi
.8274	b1 16		lda ($16),y			lda (tmp2),y
.8276	c9 b7		cmp #$b7			cmp #>PushYA
.8278	d0 03		bne $827d			bne _WordNext3
.827a	20 80 82	jsr $8280	_KTest:		jsr _test
.827d	4c 03 82	jmp $8203	_WordNext3:	jmp _WordNext
.8280					_test:
.8280	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.8282	d5 28		cmp $28,x			cmp DStack+4,x
.8284	a5 19		lda $19				lda tmp3+1
.8286	f5 29		sbc $29,x			sbc DStack+5,x
.8288	b0 10		bcs $829a			bcs _trts
.828a	a5 18		lda $18				lda tmp3+0		;   save this better offset
.828c	a4 19		ldy $19				ldy tmp3+1
.828e	95 28		sta $28,x			sta DStack+4,x
.8290	94 29		sty $29,x			sty DStack+5,x
.8292	a5 14		lda $14				lda tmp1+0		;   save this better nt
.8294	a4 15		ldy $15				ldy tmp1+1
.8296	95 26		sta $26,x			sta DStack+2,x
.8298	94 27		sty $27,x			sty DStack+3,x
.829a	60		rts		_trts:		rts
.829b					LinkNext:
.829b	a0 81		ldy #$81			ldy #wh_Flags
.829d	b1 14		lda ($14),y			lda (tmp1),y
.829f	29 01		and #$01			and #FP
.82a1	f0 0e		beq $82b1			beq _LinkShort
.82a3	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a5	b1 14		lda ($14),y			lda (tmp1),y
.82a7	48		pha				pha
.82a8	88		dey				dey
.82a9	b1 14		lda ($14),y			lda (tmp1),y
.82ab	85 14		sta $14				sta tmp1+0
.82ad	68		pla				pla
.82ae	85 15		sta $15				sta tmp1+1
.82b0	60		rts				rts
.82b1	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82b3	38		sec				sec
.82b4	a5 14		lda $14				lda tmp1+0
.82b6	f1 14		sbc ($14),y			sbc (tmp1),y
.82b8	85 14		sta $14				sta tmp1+0
.82ba	a5 15		lda $15				lda tmp1+1
.82bc	e9 00		sbc #$00			sbc #0
.82be	85 15		sta $15				sta tmp1+1
.82c0	60		rts				rts
>82c1	44 53 74 61 63 6b		Name0:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c7	66					.byte (("DStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=306					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c8	11					.byte WordFlags	;wh_Flags
>82c9	03					.byte 3	;wh_CodeLength
>82ca	15 81					  .word WordListLink
=$82cc					XtPtr1 ::= *
=33351					WordListLink ::= Nt0 ; remember the nt of this word for later
.82cc	a9 24		lda #$24			lda #DStack
.82ce	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$82d1					Here1 = *	; remember here
>82c9	05					.byte CodeLen	;patch wh_CodeLength
>82d1	52 53 74 61 63 6b		Name0:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d7	66					.byte (("RStack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d8	10					.byte WordFlags	;wh_Flags
>82d9	03					.byte 3	;wh_CodeLength
>82da	10					  .byte LinkDisplacement	; offset to previous nt
=$82db					XtPtr1 ::= *
=33367					WordListLink ::= Nt0 ; remember the nt of this word for later
.82db	a0 01		ldy #$01			ldy #>RStack
.82dd	a9 00		lda #$00			lda #<RStack
.82df	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82e2					Here1 = *	; remember here
>82d9	07					.byte CodeLen	;patch wh_CodeLength
>82e2	52 6e 64 53 74 61 74 65		Name0:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33386					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82ea	a8					.byte (("RndState"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82eb	10					.byte WordFlags	;wh_Flags
>82ec	03					.byte 3	;wh_CodeLength
>82ed	13					  .byte LinkDisplacement	; offset to previous nt
=$82ee					XtPtr1 ::= *
=33386					WordListLink ::= Nt0 ; remember the nt of this word for later
.82ee	a0 03		ldy #$03			ldy #>RndState
.82f0	a9 35		lda #$35			lda #<RndState
.82f2	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$82f5					Here1 = *	; remember here
>82ec	07					.byte CodeLen	;patch wh_CodeLength
>82f5	52 61 6e 64			Name0:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33401					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f9	84					.byte (("Rand"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82fa	00					.byte WordFlags	;wh_Flags
>82fb	03					.byte 3	;wh_CodeLength
>82fc	0f					  .byte LinkDisplacement	; offset to previous nt
=$82fd					XtPtr1 ::= *
=33401					WordListLink ::= Nt0 ; remember the nt of this word for later
.82fd					Rand:
.82fd	4e 36 03	lsr $0336			lsr RndState+1
.8300	6e 35 03	ror $0335			ror RndState+0
.8303	6e 38 03	ror $0338			ror RndState+3
.8306	6e 37 03	ror $0337			ror RndState+2
.8309	90 10		bcc $831b			bcc _19			;  IfCs,
.830b	ad 36 03	lda $0336			lda RndState+1
.830e	49 d0		eor #$d0			eor #$d0
.8310	8d 36 03	sta $0336			sta RndState+1
.8313	ad 37 03	lda $0337			lda RndState+2
.8316	49 01		eor #$01			eor #$01
.8318	8d 37 03	sta $0337			sta RndState+2
.831b					_19:
.831b	ad 37 03	lda $0337			lda RndState+2
.831e	ac 38 03	ldy $0338			ldy RndState+3
=36					CodeLen	.var *-XtPtr1
=$8321					Here1 = *	; remember here
>82fb	24					.byte CodeLen	;patch wh_CodeLength
.8321	60		rts				rts
>8322	52 61 6e 64 4d			Name0:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8327	a5					.byte (("RandM"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8328	10					.byte WordFlags	;wh_Flags
>8329	03					.byte 3	;wh_CodeLength
>832a	2e					  .byte LinkDisplacement	; offset to previous nt
=$832b					XtPtr1 ::= *
=33447					WordListLink ::= Nt0 ; remember the nt of this word for later
.832b	20 73 cf	jsr $cf73	RandM:		jsr Dup		; ( umod umod )
.832e	20 fd 82	jsr $82fd			jsr Rand
.8331	4a		lsr a				lsr a		; make positive
.8332	95 27		sta $27,x			sta DStack+3,x
.8334	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8336	4c 8c af	jmp $af8c			jmp Mod
=14					CodeLen	.var *-XtPtr1
=$8339					Here1 = *	; remember here
>8329	0e					.byte CodeLen	;patch wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8339	46 49 6e 64 65 78		Name0:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833f	06					.byte (("FIndex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8340	10					.byte WordFlags	;wh_Flags
>8341	03					.byte 3	;wh_CodeLength
>8342	18					  .byte LinkDisplacement	; offset to previous nt
=$8343					XtPtr1 ::= *
=33471					WordListLink ::= Nt0 ; remember the nt of this word for later
.8343	a9 4c		lda #$4c			lda #FIndex
.8345	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8348					Here1 = *	; remember here
>8341	05					.byte CodeLen	;patch wh_CodeLength
>8348	46 44 69 6d			Name0:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>834c	a4					.byte (("FDim"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>834d	10					.byte WordFlags	;wh_Flags
>834e	03					.byte 3	;wh_CodeLength
>834f	0d					  .byte LinkDisplacement	; offset to previous nt
=$8350					XtPtr1 ::= *
=33484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8350	a9 0a		lda #$0a			lda #FDim
.8352	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8355					Here1 = *	; remember here
>834e	05					.byte CodeLen	;patch wh_CodeLength
>8355	46 53 45 78 70			Name0:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>835a	05					.byte (("FSExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>835b	10					.byte WordFlags	;wh_Flags
>835c	03					.byte 3	;wh_CodeLength
>835d	0e					  .byte LinkDisplacement	; offset to previous nt
=$835e					XtPtr1 ::= *
=33498					WordListLink ::= Nt0 ; remember the nt of this word for later
.835e	a9 4d		lda #$4d			lda #FSExp
.8360	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8363					Here1 = *	; remember here
>835c	05					.byte CodeLen	;patch wh_CodeLength
>8363	46 53 4d 61 6e 74 30		Name0:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>836a	07					.byte (("FSMant0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>836b	10					.byte WordFlags	;wh_Flags
>836c	03					.byte 3	;wh_CodeLength
>836d	10					  .byte LinkDisplacement	; offset to previous nt
=$836e					XtPtr1 ::= *
=33514					WordListLink ::= Nt0 ; remember the nt of this word for later
.836e	a9 57		lda #$57			lda #FSMant0
.8370	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8373					Here1 = *	; remember here
>836c	05					.byte CodeLen	;patch wh_CodeLength
>8373	46 53 4d 61 6e 74 31		Name0:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>837a	27					.byte (("FSMant1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>837b	10					.byte WordFlags	;wh_Flags
>837c	03					.byte 3	;wh_CodeLength
>837d	10					  .byte LinkDisplacement	; offset to previous nt
=$837e					XtPtr1 ::= *
=33530					WordListLink ::= Nt0 ; remember the nt of this word for later
.837e	a9 61		lda #$61			lda #FSMant1
.8380	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8383					Here1 = *	; remember here
>837c	05					.byte CodeLen	;patch wh_CodeLength
>8383	46 53 4d 61 6e 74 32		Name0:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33546					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>838a	47					.byte (("FSMant2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>838b	10					.byte WordFlags	;wh_Flags
>838c	03					.byte 3	;wh_CodeLength
>838d	10					  .byte LinkDisplacement	; offset to previous nt
=$838e					XtPtr1 ::= *
=33546					WordListLink ::= Nt0 ; remember the nt of this word for later
.838e	a9 6b		lda #$6b			lda #FSMant2
.8390	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$8393					Here1 = *	; remember here
>838c	05					.byte CodeLen	;patch wh_CodeLength
>8393	46 53 4d 61 6e 74 33		Name0:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>839a	67					.byte (("FSMant3"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>839b	10					.byte WordFlags	;wh_Flags
>839c	03					.byte 3	;wh_CodeLength
>839d	10					  .byte LinkDisplacement	; offset to previous nt
=$839e					XtPtr1 ::= *
=33562					WordListLink ::= Nt0 ; remember the nt of this word for later
.839e	a9 75		lda #$75			lda #FSMant3
.83a0	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$83a3					Here1 = *	; remember here
>839c	05					.byte CodeLen	;patch wh_CodeLength
>83a3	46 6c 6f 61 74 2b		Name0:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a9	66					.byte (("Float+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83aa	10					.byte WordFlags	;wh_Flags
>83ab	03					.byte 3	;wh_CodeLength
>83ac	0f					  .byte LinkDisplacement	; offset to previous nt
=$83ad					XtPtr1 ::= *
=33577					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ad	a9 05		lda #$05	FloatPlus:	lda #5
.83af	4c 29 ca	jmp $ca29			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$83b2					Here1 = *	; remember here
>83ab	05					.byte CodeLen	;patch wh_CodeLength
>83b2	46 6c 6f 61 74 73		Name0:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33592					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b8	66					.byte (("Floats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b9	10					.byte WordFlags	;wh_Flags
>83ba	03					.byte 3	;wh_CodeLength
>83bb	0f					  .byte LinkDisplacement	; offset to previous nt
=$83bc					XtPtr1 ::= *
=33592					WordListLink ::= Nt0 ; remember the nt of this word for later
.83bc	a9 05		lda #$05	Floats:		lda #5
.83be	20 f5 b7	jsr $b7f5			jsr PushZA
.83c1	4c a2 ae	jmp $aea2			jmp Star
=8					CodeLen	.var *-XtPtr1
=$83c4					Here1 = *	; remember here
>83ba	08					.byte CodeLen	;patch wh_CodeLength
>83c4	46 41 6c 69 67 6e		Name0:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33610					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83ca	c6					.byte (("FAlign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83cb	00					.byte WordFlags	;wh_Flags
>83cc	03					.byte 3	;wh_CodeLength
>83cd	12					  .byte LinkDisplacement	; offset to previous nt
=$83ce					XtPtr1 ::= *
=33610					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ce					FAlign:
=0					CodeLen	.var *-XtPtr1
=$83ce					Here1 = *	; remember here
>83cc	00					.byte CodeLen	;patch wh_CodeLength
.83ce	60		rts				rts
>83cf	46 41 6c 69 67 6e 65 64		Name0:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=33623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d7	88					.byte (("FAligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d8	00					.byte WordFlags	;wh_Flags
>83d9	03					.byte 3	;wh_CodeLength
>83da	0d					  .byte LinkDisplacement	; offset to previous nt
=$83db					XtPtr1 ::= *
=33623					WordListLink ::= Nt0 ; remember the nt of this word for later
.83db					FAligned:
=0					CodeLen	.var *-XtPtr1
=$83db					Here1 = *	; remember here
>83d9	00					.byte CodeLen	;patch wh_CodeLength
.83db	60		rts				rts
>83dc	48 65 78 3e 46			Name0:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83e1	c5					.byte (("Hex>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83e2	10					.byte WordFlags	;wh_Flags
>83e3	03					.byte 3	;wh_CodeLength
>83e4	0a					  .byte LinkDisplacement	; offset to previous nt
=$83e5					XtPtr1 ::= *
=33633					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e5	20 c2 84	jsr $84c2	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83ea	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83ec	20 ec b3	jsr $b3ec			jsr PopA		; pop n_exp
.83ef	99 4d 00	sta $004d,y			sta FSExp,y
.83f2	b5 25		lda $25,x			lda DStack+1,x
.83f4	99 57 00	sta $0057,y			sta FSMant0,y
.83f7	b5 24		lda $24,x			lda DStack+0,x
.83f9	99 61 00	sta $0061,y			sta FSMant1,y
.83fc	b5 27		lda $27,x			lda DStack+3,x
.83fe	99 6b 00	sta $006b,y			sta FSMant2,y
.8401	b5 26		lda $26,x			lda DStack+2,x
.8403	99 75 00	sta $0075,y			sta FSMant3,y
.8406	4c 53 c5	jmp $c553			jmp Two_Drop
=36					CodeLen	.var *-XtPtr1
=$8409					Here1 = *	; remember here
>83e3	24					.byte CodeLen	;patch wh_CodeLength
>8409	46 3e 48 65 78			Name0:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>840e	05					.byte (("F>Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840f	10					.byte WordFlags	;wh_Flags
>8410	03					.byte 3	;wh_CodeLength
>8411	2d					  .byte LinkDisplacement	; offset to previous nt
=$8412					XtPtr1 ::= *
=33678					WordListLink ::= Nt0 ; remember the nt of this word for later
.8412	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.8414	ca		dex				dex
.8415	ca		dex				dex
.8416	ca		dex				dex
.8417	ca		dex				dex
.8418	ca		dex				dex
.8419	ca		dex				dex
.841a	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.841d	95 27		sta $27,x			sta DStack+3,x
.841f	b9 61 00	lda $0061,y			lda FSMant1,y
.8422	95 26		sta $26,x			sta DStack+2,x
.8424	b9 6b 00	lda $006b,y			lda FSMant2,y
.8427	95 29		sta $29,x			sta DStack+5,x
.8429	b9 75 00	lda $0075,y			lda FSMant3,y
.842c	95 28		sta $28,x			sta DStack+4,x
.842e	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8431	95 24		sta $24,x			sta DStack+0,x
.8433	29 80		and #$80			and #$80	;   sign extend
.8435	f0 02		beq $8439			beq +
.8437	a9 ff		lda #$ff			lda #$ff
.8439	95 25		sta $25,x	+		sta DStack+1,x
.843b	e6 4c		inc $4c				inc FIndex	; FDrop
.843d	60		rts				rts
=44					CodeLen	.var *-XtPtr1
=$843e					Here1 = *	; remember here
>8410	2c					.byte CodeLen	;patch wh_CodeLength
>843e	46 2e 48 65 78			Name0:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8443	05					.byte (("F.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>8444	10					.byte WordFlags	;wh_Flags
>8445	03					.byte 3	;wh_CodeLength
>8446	35					  .byte LinkDisplacement	; offset to previous nt
=$8447					XtPtr1 ::= *
=33731					WordListLink ::= Nt0 ; remember the nt of this word for later
.8447	20 12 84	jsr $8412	FDotHex:	jsr FToHex	; get parts of r
.844a	20 93 ce	jsr $ce93			jsr Not_Rot
.844d	20 1c a9	jsr $a91c			jsr Dot_Hex	; do mantissa
.8450	20 1c a9	jsr $a91c			jsr Dot_Hex
.8453	a9 3a		lda #$3a			lda #':'
.8455	20 dd cd	jsr $cddd			jsr Emit_A
.8458	4c fb a8	jmp $a8fb			jmp C_Dot_Hex	; do exponent
=20					CodeLen	.var *-XtPtr1
=$845b					Here1 = *	; remember here
>8445	14					.byte CodeLen	;patch wh_CodeLength
>845b	46 43 6d 70 41			Name0:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8460	25					.byte (("FCmpA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8461	10					.byte WordFlags	;wh_Flags
>8462	03					.byte 3	;wh_CodeLength
>8463	1d					  .byte LinkDisplacement	; offset to previous nt
=$8464					XtPtr1 ::= *
=33760					WordListLink ::= Nt0 ; remember the nt of this word for later
.8464	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8466	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8468	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.846a	f0 35		beq $84a1			beq _r2Zero
.846c	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.846e	f0 2b		beq $849b			beq _r1Zero
.8470	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8472	30 3d		bmi $84b1			bmi _MantissaSignDifferent
.8474	38		sec				sec			; compare exponent
.8475	b5 4e		lda $4e,x			lda FSExp+1,x
.8477	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8479	d0 2b		bne $84a6			bne _ExponentDifferent
.847b	98		tya				tya			; compare mantissa MSB
.847c	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.847e	d0 17		bne $8497			bne _13
.8480	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8482	f5 61		sbc $61,x			sbc FSMant1+0,x
.8484	d0 0c		bne $8492			bne _12
.8486	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8488	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.848a	d0 06		bne $8492			bne _12
.848c	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.848e	f5 75		sbc $75,x			sbc FSMant3+0,x
.8490	f0 05		beq $8497			beq _13
.8492	6a		ror a		_12:		ror a
.8493	49 80		eor #$80	_14:		eor #$80
.8495	09 01		ora #$01			ora #1
.8497	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8499	a8		tay				tay			; set CPU flags
.849a	60		rts				rts
.849b	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.849d	d0 f4		bne $8493			bne _14
.849f	f0 f6		beq $8497			beq _13
.84a1	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.84a3	4c 97 84	jmp $8497			jmp _13
.84a6					_ExponentDifferent:
.84a6	50 02		bvc $84aa			bvc +
.84a8	49 80		eor #$80			eor #$80
.84aa					+
.84aa	55 57		eor $57,x			eor FSMant0+0,x
.84ac	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84ae	09 01		ora #$01			ora #1			; set CPU flags
.84b0	60		rts				rts
.84b1					_MantissaSignDifferent:
.84b1	98		tya				tya
.84b2	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84b4	09 01		ora #$01			ora #1
.84b6	60		rts				rts
=83					CodeLen	.var *-XtPtr1
=$84b7					Here1 = *	; remember here
>8462	53					.byte CodeLen	;patch wh_CodeLength
>84b7	46 41 6c 6c 6f 63 58		Name0:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=33854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84be	07					.byte (("FAllocX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84bf	10					.byte WordFlags	;wh_Flags
>84c0	03					.byte 3	;wh_CodeLength
>84c1	5e					  .byte LinkDisplacement	; offset to previous nt
=$84c2					XtPtr1 ::= *
=33854					WordListLink ::= Nt0 ; remember the nt of this word for later
.84c2	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84c4	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c6	ca		dex				dex		; alloc FP stack entry
.84c7	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c9	b0 03		bcs $84ce			bcs _err
.84cb	86 4c		stx $4c				stx FIndex
.84cd	60		rts				rts		; return X= FP stack index
.84ce	08		php		_err:		php		; save sign bit
.84cf	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84d1	28		plp				plp		; restore sign bit
.84d2	4c 5d b4	jmp $b45d			jmp Throw_FPStack
=19					CodeLen	.var *-XtPtr1
=$84d5					Here1 = *	; remember here
>84c0	13					.byte CodeLen	;patch wh_CodeLength
>84d5	46 4d 61 78			Name0:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d9	04					.byte (("FMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84da	10					.byte WordFlags	;wh_Flags
>84db	03					.byte 3	;wh_CodeLength
>84dc	1b					  .byte LinkDisplacement	; offset to previous nt
=$84dd					XtPtr1 ::= *
=33881					WordListLink ::= Nt0 ; remember the nt of this word for later
.84dd	20 64 84	jsr $8464	FMax:		jsr FCmpA
.84e0	10 2c		bpl $850e			bpl FDrop
.84e2	30 44		bmi $8528			bmi FNip
=7					CodeLen	.var *-XtPtr1
=$84e4					Here1 = *	; remember here
>84db	07					.byte CodeLen	;patch wh_CodeLength
>84e4	46 4d 69 6e			Name0:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e8	c4					.byte (("FMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e9	10					.byte WordFlags	;wh_Flags
>84ea	03					.byte 3	;wh_CodeLength
>84eb	0f					  .byte LinkDisplacement	; offset to previous nt
=$84ec					XtPtr1 ::= *
=33896					WordListLink ::= Nt0 ; remember the nt of this word for later
.84ec	20 64 84	jsr $8464	FMin:		jsr FCmpA
.84ef	30 1d		bmi $850e			bmi FDrop
.84f1	10 35		bpl $8528			bpl FNip
=7					CodeLen	.var *-XtPtr1
=$84f3					Here1 = *	; remember here
>84ea	07					.byte CodeLen	;patch wh_CodeLength
>84f3	46 44 65 70 74 68		Name0:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33913					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f9	06					.byte (("FDepth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84fa	10					.byte WordFlags	;wh_Flags
>84fb	03					.byte 3	;wh_CodeLength
>84fc	11					  .byte LinkDisplacement	; offset to previous nt
=$84fd					XtPtr1 ::= *
=33913					WordListLink ::= Nt0 ; remember the nt of this word for later
.84fd	a9 0a		lda #$0a	FDepth:		lda #FDim
.84ff	38		sec				sec
.8500	e5 4c		sbc $4c				sbc FIndex
.8502	4c f5 b7	jmp $b7f5			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$8505					Here1 = *	; remember here
>84fb	08					.byte CodeLen	;patch wh_CodeLength
>8505	46 44 72 6f 70			Name0:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=33930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>850a	05					.byte (("FDrop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>850b	00					.byte WordFlags	;wh_Flags
>850c	03					.byte 3	;wh_CodeLength
>850d	11					  .byte LinkDisplacement	; offset to previous nt
=$850e					XtPtr1 ::= *
=33930					WordListLink ::= Nt0 ; remember the nt of this word for later
.850e	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CodeLen	.var *-XtPtr1
=$8510					Here1 = *	; remember here
>850c	02					.byte CodeLen	;patch wh_CodeLength
.8510	60		rts				rts
>8511	46 32 44 72 6f 70		Name0:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=33943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8517	06					.byte (("F2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8518	00					.byte WordFlags	;wh_Flags
>8519	03					.byte 3	;wh_CodeLength
>851a	0d					  .byte LinkDisplacement	; offset to previous nt
=$851b					XtPtr1 ::= *
=33943					WordListLink ::= Nt0 ; remember the nt of this word for later
.851b	e6 4c		inc $4c		F2Drop:		inc FIndex
.851d	e6 4c		inc $4c				inc FIndex
=4					CodeLen	.var *-XtPtr1
=$851f					Here1 = *	; remember here
>8519	04					.byte CodeLen	;patch wh_CodeLength
.851f	60		rts				rts
>8520	46 4e 69 70			Name0:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8524	04					.byte (("FNip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8525	00					.byte WordFlags	;wh_Flags
>8526	03					.byte 3	;wh_CodeLength
>8527	0d					  .byte LinkDisplacement	; offset to previous nt
=$8528					XtPtr1 ::= *
=33956					WordListLink ::= Nt0 ; remember the nt of this word for later
.8528	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.852a	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.852c	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.852e	95 4e		sta $4e,x			sta FSExp+1,x
.8530	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8532	95 58		sta $58,x			sta FSMant0+1,x
.8534	b5 61		lda $61,x			lda FSMant1+0,x
.8536	95 62		sta $62,x			sta FSMant1+1,x
.8538	b5 6b		lda $6b,x			lda FSMant2+0,x
.853a	95 6c		sta $6c,x			sta FSMant2+1,x
.853c	b5 75		lda $75,x			lda FSMant3+0,x
.853e	95 76		sta $76,x			sta FSMant3+1,x
.8540	e6 4c		inc $4c				inc FIndex		; FDrop
.8542	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CodeLen	.var *-XtPtr1
=$8544					Here1 = *	; remember here
>8526	1c					.byte CodeLen	;patch wh_CodeLength
.8544	60		rts				rts
>8545	46 44 75 70			Name0:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=33993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8549	04					.byte (("FDup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>854a	00					.byte WordFlags	;wh_Flags
>854b	03					.byte 3	;wh_CodeLength
>854c	25					  .byte LinkDisplacement	; offset to previous nt
=$854d					XtPtr1 ::= *
=33993					WordListLink ::= Nt0 ; remember the nt of this word for later
.854d	20 c2 84	jsr $84c2	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8550	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8552	95 4d		sta $4d,x			sta FSExp+0,x
.8554	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8556	95 57		sta $57,x			sta FSMant0+0,x
.8558	b5 62		lda $62,x			lda FSMant1+1,x
.855a	95 61		sta $61,x			sta FSMant1+0,x
.855c	b5 6c		lda $6c,x			lda FSMant2+1,x
.855e	95 6b		sta $6b,x			sta FSMant2+0,x
.8560	b5 76		lda $76,x			lda FSMant3+1,x
.8562	95 75		sta $75,x			sta FSMant3+0,x
.8564	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8566					Here1 = *	; remember here
>854b	19					.byte CodeLen	;patch wh_CodeLength
.8566	60		rts				rts
>8567	46 4f 76 65 72			Name0:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>856c	45					.byte (("FOver"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>856d	00					.byte WordFlags	;wh_Flags
>856e	03					.byte 3	;wh_CodeLength
>856f	23					  .byte LinkDisplacement	; offset to previous nt
=$8570					XtPtr1 ::= *
=34028					WordListLink ::= Nt0 ; remember the nt of this word for later
.8570	20 c2 84	jsr $84c2	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8573	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8575	95 4d		sta $4d,x			sta FSExp+0,x
.8577	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8579	95 57		sta $57,x			sta FSMant0+0,x
.857b	b5 63		lda $63,x			lda FSMant1+2,x
.857d	95 61		sta $61,x			sta FSMant1+0,x
.857f	b5 6d		lda $6d,x			lda FSMant2+2,x
.8581	95 6b		sta $6b,x			sta FSMant2+0,x
.8583	b5 77		lda $77,x			lda FSMant3+2,x
.8585	95 75		sta $75,x			sta FSMant3+0,x
.8587	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CodeLen	.var *-XtPtr1
=$8589					Here1 = *	; remember here
>856e	19					.byte CodeLen	;patch wh_CodeLength
.8589	60		rts				rts
>858a	46 50 69 63 6b			Name0:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858f	65					.byte (("FPick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8590	00					.byte WordFlags	;wh_Flags
>8591	03					.byte 3	;wh_CodeLength
>8592	23					  .byte LinkDisplacement	; offset to previous nt
=$8593					XtPtr1 ::= *
=34063					WordListLink ::= Nt0 ; remember the nt of this word for later
.8593	20 ec b3	jsr $b3ec	FPick:		jsr PopA		; pop u (desired entry #)
.8596	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8597	65 4c		adc $4c				adc FIndex
.8599	a8		tay		FPick3:		tay
.859a	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.859d	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.85a0	95 4d		sta $4d,x			sta FSExp,x
.85a2	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a5	95 57		sta $57,x			sta FSMant0,x
.85a7	b9 61 00	lda $0061,y			lda FSMant1,y
.85aa	95 61		sta $61,x			sta FSMant1,x
.85ac	b9 6b 00	lda $006b,y			lda FSMant2,y
.85af	95 6b		sta $6b,x			sta FSMant2,x
.85b1	b9 75 00	lda $0075,y			lda FSMant3,y
.85b4	95 75		sta $75,x			sta FSMant3,x
.85b6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CodeLen	.var *-XtPtr1
=$85b8					Here1 = *	; remember here
>8591	25					.byte CodeLen	;patch wh_CodeLength
.85b8	60		rts				rts
>85b9	46 32 44 75 70			Name0:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85be	05					.byte (("F2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85bf	10					.byte WordFlags	;wh_Flags
>85c0	03					.byte 3	;wh_CodeLength
>85c1	2f					  .byte LinkDisplacement	; offset to previous nt
=$85c2					XtPtr1 ::= *
=34110					WordListLink ::= Nt0 ; remember the nt of this word for later
.85c2	20 70 85	jsr $8570	F2Dup:		jsr FOver
.85c5	4c 70 85	jmp $8570			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$85c8					Here1 = *	; remember here
>85c0	06					.byte CodeLen	;patch wh_CodeLength
>85c8	46 53 77 61 70			Name0:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34125					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85cd	05					.byte (("FSwap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85ce	00					.byte WordFlags	;wh_Flags
>85cf	03					.byte 3	;wh_CodeLength
>85d0	0f					  .byte LinkDisplacement	; offset to previous nt
=$85d1					XtPtr1 ::= *
=34125					WordListLink ::= Nt0 ; remember the nt of this word for later
.85d1	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85d3	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d5	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d7	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d9	95 4e		sta $4e,x			sta FSExp+1,x
.85db	94 4d		sty $4d,x			sty FSExp+0,x
.85dd	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85df	b4 58		ldy $58,x			ldy FSMant0+1,x
.85e1	95 58		sta $58,x			sta FSMant0+1,x
.85e3	94 57		sty $57,x			sty FSMant0+0,x
.85e5	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e7	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e9	95 62		sta $62,x			sta FSMant1+1,x
.85eb	94 61		sty $61,x			sty FSMant1+0,x
.85ed	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ef	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85f1	95 6c		sta $6c,x			sta FSMant2+1,x
.85f3	94 6b		sty $6b,x			sty FSMant2+0,x
.85f5	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f7	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f9	95 76		sta $76,x			sta FSMant3+1,x
.85fb	94 75		sty $75,x			sty FSMant3+0,x
.85fd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CodeLen	.var *-XtPtr1
=$85ff					Here1 = *	; remember here
>85cf	2e					.byte CodeLen	;patch wh_CodeLength
.85ff	60		rts				rts
>8600	46 54 75 63 6b			Name0:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8605	65					.byte (("FTuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8606	10					.byte WordFlags	;wh_Flags
>8607	03					.byte 3	;wh_CodeLength
>8608	38					  .byte LinkDisplacement	; offset to previous nt
=$8609					XtPtr1 ::= *
=34181					WordListLink ::= Nt0 ; remember the nt of this word for later
.8609	20 d1 85	jsr $85d1	FTuck:		jsr FSwap
.860c	4c 70 85	jmp $8570			jmp FOver
=6					CodeLen	.var *-XtPtr1
=$860f					Here1 = *	; remember here
>8607	06					.byte CodeLen	;patch wh_CodeLength
>860f	46 52 6f 74			Name0:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8613	84					.byte (("FRot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8614	00					.byte WordFlags	;wh_Flags
>8615	03					.byte 3	;wh_CodeLength
>8616	0e					  .byte LinkDisplacement	; offset to previous nt
=$8617					XtPtr1 ::= *
=34195					WordListLink ::= Nt0 ; remember the nt of this word for later
.8617	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8619	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.861b	18		clc				clc
.861c	69 28		adc #$28			adc #4*FDim
.861e	d0 03		bne $8623			bne _3
.8620	8a		txa		_2:		txa			;    next byte
.8621	e9 0a		sbc #$0a			sbc #FDim
.8623	aa		tax		_3:		tax
.8624	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8626	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8628	94 4f		sty $4f,x			sty FSExp+2,x
.862a	b4 4d		ldy $4d,x			ldy FSExp+0,x
.862c	94 4e		sty $4e,x			sty FSExp+1,x
.862e	95 4d		sta $4d,x			sta FSExp+0,x
.8630	e4 4c		cpx $4c				cpx FIndex		; done?
.8632	d0 ec		bne $8620			bne _2
.8634	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CodeLen	.var *-XtPtr1
=$8636					Here1 = *	; remember here
>8615	1f					.byte CodeLen	;patch wh_CodeLength
.8636	60		rts				rts
>8637	46 2d 52 6f 74			Name0:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>863c	85					.byte (("F-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>863d	10					.byte WordFlags	;wh_Flags
>863e	03					.byte 3	;wh_CodeLength
>863f	29					  .byte LinkDisplacement	; offset to previous nt
=$8640					XtPtr1 ::= *
=34236					WordListLink ::= Nt0 ; remember the nt of this word for later
.8640	20 17 86	jsr $8617	FMRot:		jsr FRot
.8643	4c 17 86	jmp $8617			jmp FRot
=6					CodeLen	.var *-XtPtr1
=$8646					Here1 = *	; remember here
>863e	06					.byte CodeLen	;patch wh_CodeLength
>8646	46 40				Name0:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8648	02					.byte (("F@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8649	00					.byte WordFlags	;wh_Flags
>864a	03					.byte 3	;wh_CodeLength
>864b	0c					  .byte LinkDisplacement	; offset to previous nt
=$864c					XtPtr1 ::= *
=34248					WordListLink ::= Nt0 ; remember the nt of this word for later
.864c	20 07 b4	jsr $b407	FAt:		jsr PopYA		; pop addr
.864f	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8651	84 17		sty $17				sty tmp2+1
.8653	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8655	20 c2 84	jsr $84c2	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8658	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.865a	95 75		sta $75,x			sta FSMant3,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 6b		sta $6b,x			sta FSMant2,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 61		sta $61,x			sta FSMant1,x
.8666	c8		iny				iny
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 57		sta $57,x			sta FSMant0,x
.866b	c8		iny				iny			; copy exponent
.866c	b1 16		lda ($16),y			lda (tmp2),y
.866e	95 4d		sta $4d,x			sta FSExp,x
.8670	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CodeLen	.var *-XtPtr1
=$8672					Here1 = *	; remember here
>864a	26					.byte CodeLen	;patch wh_CodeLength
.8672	60		rts				rts
>8673	46 21				Name0:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8675	22					.byte (("F!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8676	00					.byte WordFlags	;wh_Flags
>8677	03					.byte 3	;wh_CodeLength
>8678	2d					  .byte LinkDisplacement	; offset to previous nt
=$8679					XtPtr1 ::= *
=34293					WordListLink ::= Nt0 ; remember the nt of this word for later
.8679	20 07 b4	jsr $b407	FStore:		jsr PopYA		; pop addr
.867c	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867e	84 15		sty $15				sty tmp1+1
.8680	a0 00		ldy #$00			ldy #0
.8682	86 16		stx $16				stx tmp2		; save data stack index
.8684	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8686	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 6b		lda $6b,x			lda FSMant2,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 61		lda $61,x			lda FSMant1,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 57		lda $57,x			lda FSMant0,x
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869b	c8		iny				iny
.869c	91 14		sta ($14),y			sta (tmp1),y
.869e	e6 4c		inc $4c				inc FIndex		; FDrop
.86a0	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CodeLen	.var *-XtPtr1
=$86a2					Here1 = *	; remember here
>8677	29					.byte CodeLen	;patch wh_CodeLength
.86a2	60		rts				rts
>86a3	46 2c				Name0:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34341					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a5	82					.byte (("F,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a6	10					.byte WordFlags	;wh_Flags
>86a7	03					.byte 3	;wh_CodeLength
>86a8	30					  .byte LinkDisplacement	; offset to previous nt
=$86a9					XtPtr1 ::= *
=34341					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7c 86	jsr $867c			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 f5 b7	jsr $b7f5			jsr PushZA
.86b5	4c bf c0	jmp $c0bf			jmp Allot
=15					CodeLen	.var *-XtPtr1
=$86b8					Here1 = *	; remember here
>86a7	0f					.byte CodeLen	;patch wh_CodeLength
>86b8	46 30 21			Name0:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34363					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86bb	23					.byte (("F0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86bc	10					.byte WordFlags	;wh_Flags
>86bd	03					.byte 3	;wh_CodeLength
>86be	16					  .byte LinkDisplacement	; offset to previous nt
=$86bf					XtPtr1 ::= *
=34363					WordListLink ::= Nt0 ; remember the nt of this word for later
.86bf	20 ab 88	jsr $88ab	FZStore:	jsr F0
.86c2	4c 79 86	jmp $8679			jmp FStore
=6					CodeLen	.var *-XtPtr1
=$86c5					Here1 = *	; remember here
>86bd	06					.byte CodeLen	;patch wh_CodeLength
>86c5	46 30 3d			Name0:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c8	a3					.byte (("F0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c9	10					.byte WordFlags	;wh_Flags
>86ca	03					.byte 3	;wh_CodeLength
>86cb	0d					  .byte LinkDisplacement	; offset to previous nt
=$86cc					XtPtr1 ::= *
=34376					WordListLink ::= Nt0 ; remember the nt of this word for later
.86cc	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86ce	b9 57 00	lda $0057,y			lda FSMant0,y
.86d1	d0 24		bne $86f7			bne FFalse1
.86d3					FTrue1:
.86d3	e6 4c		inc $4c				inc FIndex	; FDrop
.86d5	4c d5 b7	jmp $b7d5			jmp True	; return true
=12					CodeLen	.var *-XtPtr1
=$86d8					Here1 = *	; remember here
>86ca	0c					.byte CodeLen	;patch wh_CodeLength
>86d8	46 30 3c 3e			Name0:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86dc	c4					.byte (("F0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86dd	10					.byte WordFlags	;wh_Flags
>86de	03					.byte 3	;wh_CodeLength
>86df	14					  .byte LinkDisplacement	; offset to previous nt
=$86e0					XtPtr1 ::= *
=34396					WordListLink ::= Nt0 ; remember the nt of this word for later
.86e0	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86e2	b9 57 00	lda $0057,y			lda FSMant0,y
.86e5	d0 ec		bne $86d3			bne FTrue1
.86e7	f0 0e		beq $86f7			beq FFalse1
=9					CodeLen	.var *-XtPtr1
=$86e9					Here1 = *	; remember here
>86de	09					.byte CodeLen	;patch wh_CodeLength
>86e9	46 30 3c			Name0:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86ec	83					.byte (("F0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86ed	10					.byte WordFlags	;wh_Flags
>86ee	03					.byte 3	;wh_CodeLength
>86ef	10					  .byte LinkDisplacement	; offset to previous nt
=$86f0					XtPtr1 ::= *
=34412					WordListLink ::= Nt0 ; remember the nt of this word for later
.86f0	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86f2	b9 57 00	lda $0057,y			lda FSMant0,y
.86f5	30 dc		bmi $86d3			bmi FTrue1
.86f7					FFalse1:
.86f7	e6 4c		inc $4c				inc FIndex	; FDrop
.86f9	4c e7 b7	jmp $b7e7			jmp False	; return false
=12					CodeLen	.var *-XtPtr1
=$86fc					Here1 = *	; remember here
>86ee	0c					.byte CodeLen	;patch wh_CodeLength
>86fc	46 30 3e 3d			Name0:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34432					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8700	a4					.byte (("F0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>8701	10					.byte WordFlags	;wh_Flags
>8702	03					.byte 3	;wh_CodeLength
>8703	14					  .byte LinkDisplacement	; offset to previous nt
=$8704					XtPtr1 ::= *
=34432					WordListLink ::= Nt0 ; remember the nt of this word for later
.8704	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8706	b9 57 00	lda $0057,y			lda FSMant0,y
.8709	10 c8		bpl $86d3			bpl FTrue1
.870b	30 ea		bmi $86f7			bmi FFalse1
=9					CodeLen	.var *-XtPtr1
=$870d					Here1 = *	; remember here
>8702	09					.byte CodeLen	;patch wh_CodeLength
>870d	46 30 3e			Name0:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34448					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8710	c3					.byte (("F0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8711	10					.byte WordFlags	;wh_Flags
>8712	03					.byte 3	;wh_CodeLength
>8713	10					  .byte LinkDisplacement	; offset to previous nt
=$8714					XtPtr1 ::= *
=34448					WordListLink ::= Nt0 ; remember the nt of this word for later
.8714	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8716	b9 57 00	lda $0057,y			lda FSMant0,y
.8719	30 dc		bmi $86f7			bmi FFalse1
.871b	d0 b6		bne $86d3			bne FTrue1
.871d	f0 d8		beq $86f7			beq FFalse1
=11					CodeLen	.var *-XtPtr1
=$871f					Here1 = *	; remember here
>8712	0b					.byte CodeLen	;patch wh_CodeLength
>871f	46 30 3c 3d			Name0:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8723	a4					.byte (("F0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8724	10					.byte WordFlags	;wh_Flags
>8725	03					.byte 3	;wh_CodeLength
>8726	13					  .byte LinkDisplacement	; offset to previous nt
=$8727					XtPtr1 ::= *
=34467					WordListLink ::= Nt0 ; remember the nt of this word for later
.8727	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8729	b9 57 00	lda $0057,y			lda FSMant0,y
.872c	30 a5		bmi $86d3			bmi FTrue1
.872e	d0 c7		bne $86f7			bne FFalse1
.8730	f0 a1		beq $86d3			beq FTrue1
=11					CodeLen	.var *-XtPtr1
=$8732					Here1 = *	; remember here
>8725	0b					.byte CodeLen	;patch wh_CodeLength
>8732	46 3c				Name0:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8734	82					.byte (("F<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8735	10					.byte WordFlags	;wh_Flags
>8736	03					.byte 3	;wh_CodeLength
>8737	11					  .byte LinkDisplacement	; offset to previous nt
=$8738					XtPtr1 ::= *
=34484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8738	20 64 84	jsr $8464	FLt:		jsr FCmpA
.873b	30 32		bmi $876f			bmi FTrue2
.873d					FFalse2:
.873d	e6 4c		inc $4c				inc FIndex	; FDrop
.873f	e6 4c		inc $4c				inc FIndex	; FDrop
.8741	4c e7 b7	jmp $b7e7			jmp False	; return False
=12					CodeLen	.var *-XtPtr1
=$8744					Here1 = *	; remember here
>8736	0c					.byte CodeLen	;patch wh_CodeLength
>8744	46 3e 3d			Name0:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34503					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8747	a3					.byte (("F>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8748	10					.byte WordFlags	;wh_Flags
>8749	03					.byte 3	;wh_CodeLength
>874a	13					  .byte LinkDisplacement	; offset to previous nt
=$874b					XtPtr1 ::= *
=34503					WordListLink ::= Nt0 ; remember the nt of this word for later
.874b	20 64 84	jsr $8464	FGe:		jsr FCmpA
.874e	10 1f		bpl $876f			bpl FTrue2
.8750	30 eb		bmi $873d			bmi FFalse2
=7					CodeLen	.var *-XtPtr1
=$8752					Here1 = *	; remember here
>8749	07					.byte CodeLen	;patch wh_CodeLength
>8752	46 3e				Name0:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8754	c2					.byte (("F>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8755	10					.byte WordFlags	;wh_Flags
>8756	03					.byte 3	;wh_CodeLength
>8757	0d					  .byte LinkDisplacement	; offset to previous nt
=$8758					XtPtr1 ::= *
=34516					WordListLink ::= Nt0 ; remember the nt of this word for later
.8758	20 64 84	jsr $8464	FGt:		jsr FCmpA
.875b	30 e0		bmi $873d			bmi FFalse2
.875d	d0 10		bne $876f			bne FTrue2
.875f	f0 dc		beq $873d			beq FFalse2
=9					CodeLen	.var *-XtPtr1
=$8761					Here1 = *	; remember here
>8756	09					.byte CodeLen	;patch wh_CodeLength
>8761	46 3c 3d			Name0:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8764	a3					.byte (("F<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8765	10					.byte WordFlags	;wh_Flags
>8766	03					.byte 3	;wh_CodeLength
>8767	10					  .byte LinkDisplacement	; offset to previous nt
=$8768					XtPtr1 ::= *
=34532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8768	20 64 84	jsr $8464	FLe:		jsr FCmpA
.876b	30 02		bmi $876f			bmi FTrue2
.876d	d0 ce		bne $873d			bne FFalse2
.876f					FTrue2:
.876f	e6 4c		inc $4c				inc FIndex	; FDrop
.8771	e6 4c		inc $4c				inc FIndex	; FDrop
.8773	4c d5 b7	jmp $b7d5			jmp True	; return True
=14					CodeLen	.var *-XtPtr1
=$8776					Here1 = *	; remember here
>8766	0e					.byte CodeLen	;patch wh_CodeLength
>8776	46 3c 3e			Name0:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8779	c3					.byte (("F<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>877a	10					.byte WordFlags	;wh_Flags
>877b	03					.byte 3	;wh_CodeLength
>877c	15					  .byte LinkDisplacement	; offset to previous nt
=$877d					XtPtr1 ::= *
=34553					WordListLink ::= Nt0 ; remember the nt of this word for later
.877d	20 64 84	jsr $8464	FNe:		jsr FCmpA
.8780	d0 ed		bne $876f			bne FTrue2
.8782	f0 b9		beq $873d			beq FFalse2
=7					CodeLen	.var *-XtPtr1
=$8784					Here1 = *	; remember here
>877b	07					.byte CodeLen	;patch wh_CodeLength
>8784	46 3d				Name0:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8786	a2					.byte (("F="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8787	10					.byte WordFlags	;wh_Flags
>8788	03					.byte 3	;wh_CodeLength
>8789	0d					  .byte LinkDisplacement	; offset to previous nt
=$878a					XtPtr1 ::= *
=34566					WordListLink ::= Nt0 ; remember the nt of this word for later
.878a	20 64 84	jsr $8464	FEq:		jsr FCmpA
.878d	d0 ae		bne $873d			bne FFalse2
.878f	f0 de		beq $876f			beq FTrue2
=7					CodeLen	.var *-XtPtr1
=$8791					Here1 = *	; remember here
>8788	07					.byte CodeLen	;patch wh_CodeLength
>8791	46 7e 41 62 73			Name0:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8796	65					.byte (("F~Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8797	10					.byte WordFlags	;wh_Flags
>8798	03					.byte 3	;wh_CodeLength
>8799	10					  .byte LinkDisplacement	; offset to previous nt
=$879a					XtPtr1 ::= *
=34582					WordListLink ::= Nt0 ; remember the nt of this word for later
.879a	20 40 86	jsr $8640	FTAbs:		jsr FMRot
.879d	20 55 8b	jsr $8b55			jsr FMinus
.87a0	20 b0 8b	jsr $8bb0			jsr FAbs
.87a3	4c 58 87	jmp $8758			jmp FGt
=12					CodeLen	.var *-XtPtr1
=$87a6					Here1 = *	; remember here
>8798	0c					.byte CodeLen	;patch wh_CodeLength
>87a6	46 7e 52 65 6c			Name0:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=34603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ab	85					.byte (("F~Rel"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87ac	10					.byte WordFlags	;wh_Flags
>87ad	03					.byte 3	;wh_CodeLength
>87ae	15					  .byte LinkDisplacement	; offset to previous nt
=$87af					XtPtr1 ::= *
=34603					WordListLink ::= Nt0 ; remember the nt of this word for later
.87af	20 70 85	jsr $8570	FTRel:		jsr FOver
.87b2	a9 03		lda #$03			lda #3
.87b4	20 96 85	jsr $8596			jsr FPickA
.87b7	20 15 8b	jsr $8b15			jsr FPlus
.87ba	20 b0 8b	jsr $8bb0			jsr FAbs
.87bd	20 e3 8b	jsr $8be3			jsr FStar		; r1 r2 r3*|r1+r2|
.87c0	20 40 86	jsr $8640			jsr FMRot		; r3*|r1+r2| r1 r2
.87c3	20 55 8b	jsr $8b55			jsr FMinus
.87c6	20 b0 8b	jsr $8bb0			jsr FAbs
.87c9	4c 58 87	jmp $8758			jmp FGt
=29					CodeLen	.var *-XtPtr1
=$87cc					Here1 = *	; remember here
>87ad	1d					.byte CodeLen	;patch wh_CodeLength
>87cc	46 7e				Name0:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34638					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ce	c2					.byte (("F~"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87cf	10					.byte WordFlags	;wh_Flags
>87d0	03					.byte 3	;wh_CodeLength
>87d1	23					  .byte LinkDisplacement	; offset to previous nt
=$87d2					XtPtr1 ::= *
=34638					WordListLink ::= Nt0 ; remember the nt of this word for later
.87d2	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87d4	b9 57 00	lda $0057,y			lda FSMant0,y
.87d7	30 06		bmi $87df			bmi _10			; r3<0
.87d9	d0 bf		bne $879a			bne FTAbs		; r3>0
.87db	e6 4c		inc $4c				inc FIndex		; r3=0
.87dd	d0 ab		bne $878a			bne FEq
.87df	20 8a 8b	jsr $8b8a	_10:		jsr FNegate
.87e2	4c af 87	jmp $87af			jmp FTRel
=19					CodeLen	.var *-XtPtr1
=$87e5					Here1 = *	; remember here
>87d0	13					.byte CodeLen	;patch wh_CodeLength
>87e5	46 56 61 72 69 61 62 6c		Name0:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87ed	65
=9					NameLength = *-Name0
=34670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ee	a9					.byte (("FVariable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ef	18					.byte WordFlags	;wh_Flags
>87f0	03					.byte 3	;wh_CodeLength
>87f1	20					  .byte LinkDisplacement	; offset to previous nt
=$87f2					XtPtr1 ::= *
=34670					WordListLink ::= Nt0 ; remember the nt of this word for later
.87f2	20 c6 c1	jsr $c1c6	FVariable:	jsr Create		; compile word header & push PFA adr
.87f5	20 e3 bb	jsr $bbe3			jsr adjust_z		; fix word code length
.87f8	20 ab 88	jsr $88ab			jsr F0			; alloc & init data
.87fb	4c a9 86	jmp $86a9			jmp FComma
=12					CodeLen	.var *-XtPtr1
=$87fe					Here1 = *	; remember here
>87f0	0c					.byte CodeLen	;patch wh_CodeLength
>87fe	46 4c 69 74 65 72 61 6c		Name0:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=34694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8806	88					.byte (("FLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8807	18					.byte WordFlags	;wh_Flags
>8808	03					.byte 3	;wh_CodeLength
>8809	18					  .byte LinkDisplacement	; offset to previous nt
=$880a					XtPtr1 ::= *
=34694					WordListLink ::= Nt0 ; remember the nt of this word for later
.880a	20 1f 88	jsr $881f	FLiteral:	jsr FLitTest
.880d	f0 0a		beq $8819			beq _Short
.880f	a9 48		lda #$48			lda #<FLitI		; compile JSR FLitI
.8811	a0 88		ldy #$88			ldy #>FLitI
.8813	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.8816	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.8819	20 2b 88	jsr $882b	_Short:		jsr FLitShort
.881c	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CodeLen	.var *-XtPtr1
=$881f					Here1 = *	; remember here
>8808	15					.byte CodeLen	;patch wh_CodeLength
.881f					FLitTest:
.881f	a4 4c		ldy $4c				ldy FIndex
.8821	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8824	19 6b 00	ora $006b,y			ora FSMant2,y
.8827	19 75 00	ora $0075,y			ora FSMant3,y
.882a	60		rts				rts
.882b					FLitShort:
.882b	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.882d	20 04 cd	jsr $cd04			jsr C_Comma_A
.8830	b9 57 00	lda $0057,y			lda FSMant0,y
.8833	20 04 cd	jsr $cd04			jsr C_Comma_A
.8836	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8838	20 04 cd	jsr $cd04			jsr C_Comma_A
.883b	b9 4d 00	lda $004d,y			lda FSExp,y
.883e	20 04 cd	jsr $cd04			jsr C_Comma_A
.8841	e6 4c		inc $4c				inc FIndex		; FDrop
.8843	a9 92		lda #$92			lda #<FLitYA		; point at FLitYA
.8845	a0 88		ldy #$88			ldy #>FLitYA
.8847	60		rts				rts
.8848					FLitI:
.8848	68		pla				pla			; tmp2= RTS addr
.8849	85 16		sta $16				sta tmp2+0
.884b	18		clc				clc			; bump RTS addr over inline float data
.884c	69 05		adc #$05			adc #5
.884e	a8		tay				tay
.884f	68		pla				pla
.8850	85 17		sta $17				sta tmp2+1
.8852	69 00		adc #$00			adc #0
.8854	48		pha				pha
.8855	98		tya				tya
.8856	48		pha				pha
.8857	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8859	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
>885c	46 43 6f 6e 73 74 61 6e		Name0:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8864	74
=9					NameLength = *-Name0
=34789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8865	89					.byte (("FConstant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8866	10					.byte WordFlags	;wh_Flags
>8867	03					.byte 3	;wh_CodeLength
>8868	5f					  .byte LinkDisplacement	; offset to previous nt
=$8869					XtPtr1 ::= *
=34789					WordListLink ::= Nt0 ; remember the nt of this word for later
.8869	20 18 c1	jsr $c118	FConstant:	jsr Header_Comma	; compile word header
.886c	20 1f 88	jsr $881f			jsr FLitTest		; will short work?
.886f	f0 0d		beq $887e			beq _Short
.8871	a9 87		lda #$87			lda #<FConstantRun	; compile call
.8873	a0 88		ldy #$88			ldy #>FConstantRun
.8875	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.8878	20 e3 bb	jsr $bbe3			jsr adjust_z
.887b	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.887e					_Short:
.887e	20 2b 88	jsr $882b			jsr FLitShort		; compile load value
.8881	20 54 cd	jsr $cd54			jsr Jmp_Comma_YA	; compile JMP
.8884	4c e3 bb	jmp $bbe3			jmp adjust_z
=30					CodeLen	.var *-XtPtr1
=$8887					Here1 = *	; remember here
>8867	1e					.byte CodeLen	;patch wh_CodeLength
.8887					FConstantRun:
.8887	68		pla				pla			; tmp2= pop RTS addr
.8888	85 16		sta $16				sta tmp2+0
.888a	68		pla				pla
.888b	85 17		sta $17				sta tmp2+1
.888d	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888f	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
.8892					FLitYA:
.8892	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8895	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8897	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8899	a9 00		lda #$00			lda #0
.889b	95 61		sta $61,x			sta FSMant1,x
.889d	95 6b		sta $6b,x			sta FSMant2,x
.889f	95 75		sta $75,x			sta FSMant3,x
.88a1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88a3	60		rts				rts
>88a4	30 2e 65			Name0:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34855					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a7	a3					.byte (("0.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a8	10					.byte WordFlags	;wh_Flags
>88a9	03					.byte 3	;wh_CodeLength
>88aa	42					  .byte LinkDisplacement	; offset to previous nt
=$88ab					XtPtr1 ::= *
=34855					WordListLink ::= Nt0 ; remember the nt of this word for later
.88ab	a9 00		lda #$00	F0:		lda #0
.88ad	a0 80		ldy #$80			ldy #$80
.88af	d0 e1		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88b1					Here1 = *	; remember here
>88a9	06					.byte CodeLen	;patch wh_CodeLength
>88b1	31 30 30 30 2e 65		Name0:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=34871					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b7	a6					.byte (("1000.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b8	10					.byte WordFlags	;wh_Flags
>88b9	03					.byte 3	;wh_CodeLength
>88ba	10					  .byte LinkDisplacement	; offset to previous nt
=$88bb					XtPtr1 ::= *
=34871					WordListLink ::= Nt0 ; remember the nt of this word for later
.88bb	a9 7d		lda #$7d	F1000:		lda #$7d
.88bd	a0 0a		ldy #$0a			ldy #10
.88bf	d0 d1		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88c1					Here1 = *	; remember here
>88b9	06					.byte CodeLen	;patch wh_CodeLength
>88c1	31 30 2e 65			Name0:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c5	a4					.byte (("10.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c6	10					.byte WordFlags	;wh_Flags
>88c7	03					.byte 3	;wh_CodeLength
>88c8	0e					  .byte LinkDisplacement	; offset to previous nt
=$88c9					XtPtr1 ::= *
=34885					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c9	a9 50		lda #$50	F10:		lda #$50
.88cb	a0 04		ldy #$04			ldy #4
.88cd	d0 c3		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88cf					Here1 = *	; remember here
>88c7	06					.byte CodeLen	;patch wh_CodeLength
>88cf	32 2e 65			Name0:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88d2	a3					.byte (("2.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88d3	10					.byte WordFlags	;wh_Flags
>88d4	03					.byte 3	;wh_CodeLength
>88d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$88d6					XtPtr1 ::= *
=34898					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d6	a9 40		lda #$40	F2:		lda #$40
.88d8	a0 02		ldy #$02			ldy #2
.88da	d0 b6		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88dc					Here1 = *	; remember here
>88d4	06					.byte CodeLen	;patch wh_CodeLength
>88dc	31 2e 65			Name0:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88df	a3					.byte (("1.e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e0	10					.byte WordFlags	;wh_Flags
>88e1	03					.byte 3	;wh_CodeLength
>88e2	0d					  .byte LinkDisplacement	; offset to previous nt
=$88e3					XtPtr1 ::= *
=34911					WordListLink ::= Nt0 ; remember the nt of this word for later
.88e3	a9 40		lda #$40	F1:		lda #$40
.88e5	a0 01		ldy #$01			ldy #1
.88e7	d0 a9		bne $8892			bne FLitYA
=6					CodeLen	.var *-XtPtr1
=$88e9					Here1 = *	; remember here
>88e1	06					.byte CodeLen	;patch wh_CodeLength
>88e9	2e 31 65			Name0:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88ec	a3					.byte ((".1e"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ed	10					.byte WordFlags	;wh_Flags
>88ee	03					.byte 3	;wh_CodeLength
>88ef	0d					  .byte LinkDisplacement	; offset to previous nt
=$88f0					XtPtr1 ::= *
=34924					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f0	20 87 88	jsr $8887	F10th:		jsr FConstantRun
>88f3	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$88f8					Here1 = *	; remember here
>88ee	08					.byte CodeLen	;patch wh_CodeLength
>88f8	50 69				Name0:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=34938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88fa	22					.byte (("Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88fb	10					.byte WordFlags	;wh_Flags
>88fc	03					.byte 3	;wh_CodeLength
>88fd	0e					  .byte LinkDisplacement	; offset to previous nt
=$88fe					XtPtr1 ::= *
=34938					WordListLink ::= Nt0 ; remember the nt of this word for later
.88fe	20 87 88	jsr $8887	FPi:		jsr FConstantRun
>8901	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8905	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8906					Here1 = *	; remember here
>88fc	08					.byte CodeLen	;patch wh_CodeLength
>8906	50 69 2f 32			Name0:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>890a	44					.byte (("Pi/2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>890b	10					.byte WordFlags	;wh_Flags
>890c	03					.byte 3	;wh_CodeLength
>890d	10					  .byte LinkDisplacement	; offset to previous nt
=$890e					XtPtr1 ::= *
=34954					WordListLink ::= Nt0 ; remember the nt of this word for later
.890e	20 87 88	jsr $8887	FPiH:		jsr FConstantRun
>8911	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8915	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8916					Here1 = *	; remember here
>890c	08					.byte CodeLen	;patch wh_CodeLength
>8916	50 69 2f 34			Name0:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=34970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>891a	84					.byte (("Pi/4"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>891b	10					.byte WordFlags	;wh_Flags
>891c	03					.byte 3	;wh_CodeLength
>891d	10					  .byte LinkDisplacement	; offset to previous nt
=$891e					XtPtr1 ::= *
=34970					WordListLink ::= Nt0 ; remember the nt of this word for later
.891e	20 87 88	jsr $8887	FPiQ:		jsr FConstantRun
>8921	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8925	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8926					Here1 = *	; remember here
>891c	08					.byte CodeLen	;patch wh_CodeLength
>8926	32 50 69			Name0:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=34985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8929	23					.byte (("2Pi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>892a	10					.byte WordFlags	;wh_Flags
>892b	03					.byte 3	;wh_CodeLength
>892c	0f					  .byte LinkDisplacement	; offset to previous nt
=$892d					XtPtr1 ::= *
=34985					WordListLink ::= Nt0 ; remember the nt of this word for later
.892d	20 87 88	jsr $8887	F2Pi:		jsr FConstantRun
>8930	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8934	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8935					Here1 = *	; remember here
>892b	08					.byte CodeLen	;patch wh_CodeLength
>8935	46 2e 45			Name0:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8938	a3					.byte (("F.E"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8939	10					.byte WordFlags	;wh_Flags
>893a	03					.byte 3	;wh_CodeLength
>893b	0f					  .byte LinkDisplacement	; offset to previous nt
=$893c					XtPtr1 ::= *
=35000					WordListLink ::= Nt0 ; remember the nt of this word for later
.893c	20 87 88	jsr $8887	FE:		jsr FConstantRun
>893f	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8943	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CodeLen	.var *-XtPtr1
=$8944					Here1 = *	; remember here
>893a	08					.byte CodeLen	;patch wh_CodeLength
>8944	46 56 61 6c 75 65		Name0:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>894a	a6					.byte (("FValue"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>894b	18					.byte WordFlags	;wh_Flags
>894c	03					.byte 3	;wh_CodeLength
>894d	12					  .byte LinkDisplacement	; offset to previous nt
=$894e					XtPtr1 ::= *
=35018					WordListLink ::= Nt0 ; remember the nt of this word for later
.894e	20 18 c1	jsr $c118	FValue:		jsr Header_Comma	; compile word header
.8951	a9 5e		lda #$5e			lda #<FValue_runtime	; compile JSR FValue_runtime
.8953	a0 89		ldy #$89			ldy #>FValue_runtime
.8955	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.8958	20 e3 bb	jsr $bbe3			jsr adjust_z		; fix word length
.895b	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CodeLen	.var *-XtPtr1
=$895e					Here1 = *	; remember here
>894c	10					.byte CodeLen	;patch wh_CodeLength
.895e					FValue_runtime:
.895e	4c 87 88	jmp $8887			jmp FConstantRun
>8961	46 53 63 61 6c 65		Name0:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8967	a6					.byte (("FScale"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8968	10					.byte WordFlags	;wh_Flags
>8969	03					.byte 3	;wh_CodeLength
>896a	1d					  .byte LinkDisplacement	; offset to previous nt
=$896b					XtPtr1 ::= *
=35047					WordListLink ::= Nt0 ; remember the nt of this word for later
.896b	20 ec b3	jsr $b3ec	FScale:		jsr PopA		; pop n
.896e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8970	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8972	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8974	f0 07		beq $897d			beq _8
.8976	18		clc				clc
.8977	75 4d		adc $4d,x			adc FSExp,x
.8979	95 4d		sta $4d,x			sta FSExp,x
.897b	70 03		bvs $8980			bvs _overflow		; overflow or underflow?
.897d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897f	60		rts				rts
.8980					_overflow:
.8980	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8982	20 67 b4	jsr $b467			jsr Throw_FpOutOfRange
=26					CodeLen	.var *-XtPtr1
=$8985					Here1 = *	; remember here
>8969	1a					.byte CodeLen	;patch wh_CodeLength
>8985	46 32 2a			Name0:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8988	43					.byte (("F2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8989	10					.byte WordFlags	;wh_Flags
>898a	03					.byte 3	;wh_CodeLength
>898b	21					  .byte LinkDisplacement	; offset to previous nt
=$898c					XtPtr1 ::= *
=35080					WordListLink ::= Nt0 ; remember the nt of this word for later
.898c	a9 01		lda #$01	F2Star:		lda #1
.898e	d0 de		bne $896e			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$8990					Here1 = *	; remember here
>898a	04					.byte CodeLen	;patch wh_CodeLength
>8990	46 32 2f			Name0:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35091					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8993	e3					.byte (("F2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>8994	10					.byte WordFlags	;wh_Flags
>8995	03					.byte 3	;wh_CodeLength
>8996	0b					  .byte LinkDisplacement	; offset to previous nt
=$8997					XtPtr1 ::= *
=35091					WordListLink ::= Nt0 ; remember the nt of this word for later
.8997	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8999	d0 d3		bne $896e			bne FScaleA
=4					CodeLen	.var *-XtPtr1
=$899b					Here1 = *	; remember here
>8995	04					.byte CodeLen	;patch wh_CodeLength
>899b	46 6c 6f 6f 72			Name0:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>89a0	45					.byte (("Floor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>89a1	10					.byte WordFlags	;wh_Flags
>89a2	03					.byte 3	;wh_CodeLength
>89a3	0d					  .byte LinkDisplacement	; offset to previous nt
=$89a4					XtPtr1 ::= *
=35104					WordListLink ::= Nt0 ; remember the nt of this word for later
.89a4	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a6	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a9	10 19		bpl $89c4			bpl _a
.89ab	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89ae	10 14		bpl $89c4			bpl _a
.89b0	a9 80		lda #$80			lda #$80		; return -1
.89b2	99 57 00	sta $0057,y			sta FSMant0,y
.89b5	a9 00		lda #$00			lda #0
.89b7	99 4d 00	sta $004d,y			sta FSExp,y
.89ba	99 61 00	sta $0061,y			sta FSMant1,y
.89bd	99 6b 00	sta $006b,y			sta FSMant2,y
.89c0	99 75 00	sta $0075,y			sta FSMant3,y
.89c3	60		rts				rts
.89c4	a9 1f		lda #$1f	_a:		lda #31
.89c6	20 cc 89	jsr $89cc			jsr FShiftA
.89c9	4c 8f 8a	jmp $8a8f			jmp FNormX
=40					CodeLen	.var *-XtPtr1
=$89cc					Here1 = *	; remember here
>89a2	28					.byte CodeLen	;patch wh_CodeLength
.89cc	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89ce	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89d0	a8		tay		FShiftAX:	tay			; save desired alignment
.89d1	38		sec				sec			; calc bit shift count
.89d2	f5 4d		sbc $4d,x			sbc FSExp,x
.89d4	f0 2e		beq $8a04			beq _leave
.89d6	70 1e		bvs $89f6			bvs _overflow
.89d8	30 2a		bmi $8a04			bmi _leave
.89da	c9 20		cmp #$20			cmp #32
.89dc	b0 1a		bcs $89f8			bcs _zero
.89de	94 4d		sty $4d,x			sty FSExp,x
.89e0	a8		tay				tay
.89e1	b5 57		lda $57,x			lda FSMant0,x
.89e3	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e5	6a		ror a				ror a
.89e6	76 61		ror $61,x			ror FSMant1,x
.89e8	76 6b		ror $6b,x			ror FSMant2,x
.89ea	76 75		ror $75,x			ror FSMant3,x
.89ec	88		dey				dey
.89ed	d0 f4		bne $89e3			bne _12
.89ef	95 57		sta $57,x			sta FSMant0,x
.89f1	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89f3	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f5	60		rts				rts
.89f6	10 0c		bpl $8a04	_overflow:	bpl _leave
.89f8	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89fa	a9 00		lda #$00			lda #0
.89fc	95 57		sta $57,x			sta FSMant0,x
.89fe	95 61		sta $61,x			sta FSMant1,x
.8a00	95 6b		sta $6b,x			sta FSMant2,x
.8a02	95 75		sta $75,x			sta FSMant3,x
.8a04	18		clc		_leave:		clc
.8a05	90 ea		bcc $89f1			bcc _30
>8a07	46 54 72 75 6e 63		Name0:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a0d	66					.byte (("FTrunc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a0e	10					.byte WordFlags	;wh_Flags
>8a0f	03					.byte 3	;wh_CodeLength
>8a10	6d					  .byte LinkDisplacement	; offset to previous nt
=$8a11					XtPtr1 ::= *
=35213					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a11	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a13	b9 57 00	lda $0057,y			lda FSMant0,y
.8a16	10 8c		bpl $89a4			bpl Floor
.8a18	20 8a 8b	jsr $8b8a			jsr FNegate
.8a1b	20 a4 89	jsr $89a4			jsr Floor
.8a1e	4c 8a 8b	jmp $8b8a			jmp FNegate
>8a21	46 52 6f 75 6e 64		Name0:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=35239					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a27	86					.byte (("FRound"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a28	10					.byte WordFlags	;wh_Flags
>8a29	03					.byte 3	;wh_CodeLength
>8a2a	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a2b					XtPtr1 ::= *
=35239					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a2b	a9 1f		lda #$1f	FRound:		lda #31
.8a2d	20 cc 89	jsr $89cc			jsr FShiftA
.8a30	90 05		bcc $8a37			bcc _15
.8a32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a34	4c 49 8b	jmp $8b49			jmp F1Plus
.8a37	4c 8f 8a	jmp $8a8f	_15:		jmp FNormX
=15					CodeLen	.var *-XtPtr1
=$8a3a					Here1 = *	; remember here
>8a29	0f					.byte CodeLen	;patch wh_CodeLength
>8a3a	46 49 6e 74 46 72 63		Name0:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a41	67					.byte (("FIntFrc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a42	10					.byte WordFlags	;wh_Flags
>8a43	03					.byte 3	;wh_CodeLength
>8a44	1a					  .byte LinkDisplacement	; offset to previous nt
=$8a45					XtPtr1 ::= *
=35265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a45	20 4d 85	jsr $854d	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a48	20 a4 89	jsr $89a4			jsr Floor	; ( r1 rint )
.8a4b	20 09 86	jsr $8609			jsr FTuck	; ( rint r1 rint )
.8a4e	20 55 8b	jsr $8b55			jsr FMinus	; ( rint rfrac )
.8a51	4c d1 85	jmp $85d1			jmp FSwap	; ( rfrac rint )
=15					CodeLen	.var *-XtPtr1
=$8a54					Here1 = *	; remember here
>8a43	0f					.byte CodeLen	;patch wh_CodeLength
>8a54	46 4d 41 6c 69 67 6e 58		Name0:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=35292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a5c	08					.byte (("FMAlignX"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a5d	10					.byte WordFlags	;wh_Flags
>8a5e	03					.byte 3	;wh_CodeLength
>8a5f	1b					  .byte LinkDisplacement	; offset to previous nt
=$8a60					XtPtr1 ::= *
=35292					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a60	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a62	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a64	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a66	b0 19		bcs $8a81			bcs Throw_FPStack_3
.8a68	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a6a	38		sec				sec
.8a6b	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a6d	30 03		bmi $8a72			bmi _1		; r1 smaller?
.8a6f	d0 08		bne $8a79			bne _2		; r2 smaller?
.8a71	60		rts				rts
.8a72					_1:
.8a72	70 07		bvs $8a7b			bvs _2b		; was this a big positive #?
.8a74	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a76	4c d0 89	jmp $89d0			jmp FShiftAX
.8a79					_2:
.8a79	70 f7		bvs $8a72			bvs _1		; was this a big negative #?
.8a7b	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a7d	e8		inx				inx
.8a7e	4c d0 89	jmp $89d0			jmp FShiftAX
=33					CodeLen	.var *-XtPtr1
=$8a81					Here1 = *	; remember here
>8a5e	21					.byte CodeLen	;patch wh_CodeLength
.8a81	20 5d b4	jsr $b45d	Throw_FPStack_3: jsr Throw_FPStack
>8a84	46 4e 6f 72 6d			Name0:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=35337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a89	a5					.byte (("FNorm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a8a	10					.byte WordFlags	;wh_Flags
>8a8b	03					.byte 3	;wh_CodeLength
>8a8c	2d					  .byte LinkDisplacement	; offset to previous nt
=$8a8d					XtPtr1 ::= *
=35337					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a8d	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8f	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a91	b4 4d		ldy $4d,x			ldy FSExp,x
.8a93	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a95	30 2d		bmi $8ac4			bmi _Neg
.8a97	d0 0f		bne $8aa8			bne _Pos2		; do byte shift
.8a99	20 f7 8a	jsr $8af7			jsr _ShiftB
.8a9c	d0 0a		bne $8aa8			bne _Pos2
.8a9e	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa1	d0 05		bne $8aa8			bne _Pos2
.8aa3	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa6	f0 43		beq $8aeb			beq _zero		; no significant bits left?
.8aa8	18		clc		_Pos2:		clc
.8aa9	30 0a		bmi $8ab5			bmi _RShft
.8aab	88		dey		_Pos3:		dey			; do bit shift
.8aac	16 75		asl $75,x			asl FSMant3,x
.8aae	36 6b		rol $6b,x			rol FSMant2,x
.8ab0	36 61		rol $61,x			rol FSMant1,x
.8ab2	2a		rol a				rol a
.8ab3	10 f6		bpl $8aab			bpl _Pos3
.8ab5					_RShft:
.8ab5	c8		iny				iny
.8ab6	6a		ror a				ror a
.8ab7	76 61		ror $61,x			ror FSMant1,x
.8ab9	76 6b		ror $6b,x			ror FSMant2,x
.8abb	76 75		ror $75,x			ror FSMant3,x
.8abd					_28:
.8abd	95 57		sta $57,x			sta FSMant0,x
.8abf	94 4d		sty $4d,x			sty FSExp,x
.8ac1	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ac3	60		rts				rts
.8ac4					_Neg:
.8ac4	c9 ff		cmp #$ff			cmp #$ff
.8ac6	d0 11		bne $8ad9			bne _Neg2	; do byte shift
.8ac8	20 f7 8a	jsr $8af7			jsr _ShiftB
.8acb	c9 ff		cmp #$ff			cmp #$ff
.8acd	d0 0a		bne $8ad9			bne _Neg2
.8acf	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad2	c9 ff		cmp #$ff			cmp #$ff
.8ad4	d0 03		bne $8ad9			bne _Neg2
.8ad6	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad9	c9 00		cmp #$00	_Neg2:		cmp #0
.8adb	10 d8		bpl $8ab5			bpl _RShft
.8add	88		dey		_Neg3:		dey
.8ade	16 75		asl $75,x			asl FSMant3,x
.8ae0	36 6b		rol $6b,x			rol FSMant2,x
.8ae2	36 61		rol $61,x			rol FSMant1,x
.8ae4	2a		rol a				rol a
.8ae5	30 f6		bmi $8add			bmi _Neg3
.8ae7	10 cc		bpl $8ab5			bpl _RShft
.8ae9	68		pla		_Zerop:		pla
.8aea	68		pla				pla		; pop rts addr from _ShiftB
.8aeb	a9 00		lda #$00	_zero:		lda #0
.8aed	95 75		sta $75,x			sta FSMant3,x
.8aef	95 6b		sta $6b,x			sta FSMant2,x
.8af1	95 61		sta $61,x			sta FSMant1,x
.8af3	a0 80		ldy #$80			ldy #$80
.8af5	d0 c6		bne $8abd			bne _28
.8af7					_ShiftB:
.8af7	98		tya				tya		; exponent -= 8
.8af8	38		sec				sec
.8af9	e9 08		sbc #$08			sbc #8
.8afb	a8		tay				tay
.8afc	70 eb		bvs $8ae9			bvs _zerop	;is this useful? do we need more of them?
.8afe	b5 61		lda $61,x			lda FSMant1,x
.8b00	48		pha				pha
.8b01	b5 6b		lda $6b,x			lda FSMant2,x
.8b03	95 61		sta $61,x			sta FSMant1,x
.8b05	b5 75		lda $75,x			lda FSMant3,x
.8b07	95 6b		sta $6b,x			sta FSMant2,x
.8b09	a9 00		lda #$00			lda #0
.8b0b	95 75		sta $75,x			sta FSMant3,x
.8b0d	68		pla				pla
.8b0e	60		rts				rts
=130					CodeLen	.var *-XtPtr1
=$8b0f					Here1 = *	; remember here
>8a8b	82					.byte CodeLen	;patch wh_CodeLength
>8b0f	46 2b				Name0:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b11	62					.byte (("F+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b12	10					.byte WordFlags	;wh_Flags
>8b13	03					.byte 3	;wh_CodeLength
>8b14	88					  .byte LinkDisplacement	; offset to previous nt
=$8b15					XtPtr1 ::= *
=35473					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b15	20 60 8a	jsr $8a60	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b18	18		clc				clc		; add mantissas
.8b19	b5 76		lda $76,x			lda FSMant3+1,x
.8b1b	75 75		adc $75,x			adc FSMant3+0,x
.8b1d	95 76		sta $76,x			sta FSMant3+1,x
.8b1f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b21	75 6b		adc $6b,x			adc FSMant2+0,x
.8b23	95 6c		sta $6c,x			sta FSMant2+1,x
.8b25	b5 62		lda $62,x			lda FSMant1+1,x
.8b27	75 61		adc $61,x			adc FSMant1+0,x
.8b29	95 62		sta $62,x			sta FSMant1+1,x
.8b2b	b5 58		lda $58,x			lda FSMant0+1,x
.8b2d	75 57		adc $57,x			adc FSMant0+0,x
.8b2f					FPlusFin:
.8b2f	e8		inx				inx		; FDrop r2
.8b30	86 4c		stx $4c				stx FIndex
.8b32	50 09		bvc $8b3d	FPlusFin3:	bvc _19		; if overflow
.8b34	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b35	76 61		ror $61,x			ror FSMant1,x
.8b37	76 6b		ror $6b,x			ror FSMant2,x
.8b39	76 75		ror $75,x			ror FSMant3,x
.8b3b	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b3d					_19:
.8b3d	95 57		sta $57,x			sta FSMant0,x
.8b3f	4c 8f 8a	jmp $8a8f			jmp FNormX	; normalize, return
=45					CodeLen	.var *-XtPtr1
=$8b42					Here1 = *	; remember here
>8b13	2d					.byte CodeLen	;patch wh_CodeLength
>8b42	46 31 2b			Name0:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b45	63					.byte (("F1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b46	10					.byte WordFlags	;wh_Flags
>8b47	03					.byte 3	;wh_CodeLength
>8b48	34					  .byte LinkDisplacement	; offset to previous nt
=$8b49					XtPtr1 ::= *
=35525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b49	20 e3 88	jsr $88e3	F1Plus:		jsr F1
.8b4c	4c 15 8b	jmp $8b15			jmp FPlus
=6					CodeLen	.var *-XtPtr1
=$8b4f					Here1 = *	; remember here
>8b47	06					.byte CodeLen	;patch wh_CodeLength
>8b4f	46 2d				Name0:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b51	a2					.byte (("F-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b52	10					.byte WordFlags	;wh_Flags
>8b53	03					.byte 3	;wh_CodeLength
>8b54	0c					  .byte LinkDisplacement	; offset to previous nt
=$8b55					XtPtr1 ::= *
=35537					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b55	20 60 8a	jsr $8a60	FMinus:		jsr FMAlignX	; align mantissas
.8b58	38		sec				sec		; subtract mantissas
.8b59	b5 76		lda $76,x			lda FSMant3+1,x
.8b5b	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b5d	95 76		sta $76,x			sta FSMant3+1,x
.8b5f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b61	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b63	95 6c		sta $6c,x			sta FSMant2+1,x
.8b65	b5 62		lda $62,x			lda FSMant1+1,x
.8b67	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b69	95 62		sta $62,x			sta FSMant1+1,x
.8b6b	b5 58		lda $58,x			lda FSMant0+1,x
.8b6d	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6f	4c 2f 8b	jmp $8b2f			jmp FPlusFin
=29					CodeLen	.var *-XtPtr1
=$8b72					Here1 = *	; remember here
>8b53	1d					.byte CodeLen	;patch wh_CodeLength
>8b72	46 31 2d			Name0:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=35573					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b75	a3					.byte (("F1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b76	10					.byte WordFlags	;wh_Flags
>8b77	03					.byte 3	;wh_CodeLength
>8b78	24					  .byte LinkDisplacement	; offset to previous nt
=$8b79					XtPtr1 ::= *
=35573					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b79	20 e3 88	jsr $88e3	F1Minus:	jsr F1
.8b7c	4c 55 8b	jmp $8b55			jmp FMinus
=6					CodeLen	.var *-XtPtr1
=$8b7f					Here1 = *	; remember here
>8b77	06					.byte CodeLen	;patch wh_CodeLength
>8b7f	46 4e 65 67 61 74 65		Name0:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=35590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b86	a7					.byte (("FNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b87	10					.byte WordFlags	;wh_Flags
>8b88	03					.byte 3	;wh_CodeLength
>8b89	11					  .byte LinkDisplacement	; offset to previous nt
=$8b8a					XtPtr1 ::= *
=35590					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b8a	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b8c	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b8e	38		sec				sec		; mantissa = 0 - mantissa
.8b8f	a9 00		lda #$00			lda #0
.8b91	f5 75		sbc $75,x			sbc FSMant3,x
.8b93	95 75		sta $75,x			sta FSMant3,x
.8b95	a9 00		lda #$00			lda #0
.8b97	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b99	95 6b		sta $6b,x			sta FSMant2,x
.8b9b	a9 00		lda #$00			lda #0
.8b9d	f5 61		sbc $61,x			sbc FSMant1,x
.8b9f	95 61		sta $61,x			sta FSMant1,x
.8ba1	a9 00		lda #$00			lda #0
.8ba3	f5 57		sbc $57,x			sbc FSMant0,x
.8ba5	4c 32 8b	jmp $8b32			jmp FPlusFin3	; finish up, return
=30					CodeLen	.var *-XtPtr1
=$8ba8					Here1 = *	; remember here
>8b88	1e					.byte CodeLen	;patch wh_CodeLength
>8ba8	46 41 62 73			Name0:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bac	64					.byte (("FAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8bad	10					.byte WordFlags	;wh_Flags
>8bae	03					.byte 3	;wh_CodeLength
>8baf	26					  .byte LinkDisplacement	; offset to previous nt
=$8bb0					XtPtr1 ::= *
=35628					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bb0	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bb2	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb5	30 d3		bmi $8b8a			bmi FNegate
.8bb7	60		rts				rts
=8					CodeLen	.var *-XtPtr1
=$8bb8					Here1 = *	; remember here
>8bae	08					.byte CodeLen	;patch wh_CodeLength
.8bb8	4c 5d b4	jmp $b45d	Throw_FPStack_4: jmp Throw_FPStack
.8bbb	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bbd	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bbf	b0 f7		bcs $8bb8			bcs Throw_FPStack_4
.8bc1	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bc4	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc7	08		php				php
.8bc8	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bcb	10 07		bpl $8bd4			bpl +
.8bcd	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bcf	20 8a 8b	jsr $8b8a			jsr FNegate		;   negate NOS
.8bd2	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bd4					+
.8bd4	20 b0 8b	jsr $8bb0			jsr FAbs		; abs TOS
.8bd7	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd9	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bdb	28		plp				plp			; restore sign flag
.8bdc	60		rts				rts
>8bdd	46 2a				Name0:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bdf	42					.byte (("F*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8be0	10					.byte WordFlags	;wh_Flags
>8be1	03					.byte 3	;wh_CodeLength
>8be2	33					  .byte LinkDisplacement	; offset to previous nt
=$8be3					XtPtr1 ::= *
=35679					WordListLink ::= Nt0 ; remember the nt of this word for later
.8be3					FStar:
.8be3	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive,
.8be6	08		php				php			;   save r3 sign
.8be7	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be9	38		sec				sec
.8bea	75 4e		adc $4e,x			adc FSExp+1,x
.8bec	95 4e		sta $4e,x			sta FSExp+1,x
.8bee	50 12		bvc $8c02			bvc _49			; IfVs,
.8bf0	b0 06		bcs $8bf8			bcs _zero		;   underflow?
.8bf2	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bf4	28		plp				plp			; RDrop sign flag
.8bf5	20 67 b4	jsr $b467			jsr Throw_FpOutOfRange
.8bf8	e8		inx		_zero:		inx			; F2Drop r1 & r2
.8bf9	e8		inx				inx
.8bfa	86 4c		stx $4c				stx FIndex
.8bfc	28		plp				plp			; RDrop saved result sign
.8bfd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bff	4c ab 88	jmp $88ab			jmp F0			; return zero
.8c02					_49:
.8c02	a9 00		lda #$00			lda #0			; tmp32= 0
.8c04	85 16		sta $16				sta tmp2+0
.8c06	85 17		sta $17				sta tmp2+1
.8c08	85 18		sta $18				sta tmp3+0
.8c0a	85 19		sta $19				sta tmp3+1
.8c0c	b5 76		lda $76,x			lda FSMant3+1,x
.8c0e	20 3d 8c	jsr $8c3d			jsr _Byte		; do bytes of r1 mantissa
.8c11	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c13	20 3d 8c	jsr $8c3d			jsr _Byte
.8c16	b5 62		lda $62,x			lda FSMant1+1,x
.8c18	20 3d 8c	jsr $8c3d			jsr _Byte
.8c1b	b5 58		lda $58,x			lda FSMant0+1,x
.8c1d	20 3d 8c	jsr $8c3d			jsr _Byte
.8c20	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c22	95 76		sta $76,x			sta FSMant3+1,x
.8c24	a5 17		lda $17				lda tmp2+1
.8c26	95 6c		sta $6c,x			sta FSMant2+1,x
.8c28	a5 18		lda $18				lda tmp3+0
.8c2a	95 62		sta $62,x			sta FSMant1+1,x
.8c2c	a5 19		lda $19				lda tmp3+1
.8c2e	95 58		sta $58,x			sta FSMant0+1,x
.8c30	e6 4c		inc $4c				inc FIndex		; FDrop
.8c32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c34	28		plp				plp			; fix result sign
.8c35	10 03		bpl $8c3a			bpl +
.8c37	4c 8a 8b	jmp $8b8a			jmp FNegate
.8c3a					+
.8c3a	4c 8d 8a	jmp $8a8d			jmp FNorm
.8c3d					_Byte:
.8c3d	49 ff		eor #$ff			eor #$ff
.8c3f	85 15		sta $15				sta tmp1+1
.8c41	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c43	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c45	b0 18		bcs $8c5f			bcs _b3
.8c47	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c49	75 75		adc $75,x			adc FSMant3+0,x
.8c4b	85 16		sta $16				sta tmp2+0
.8c4d	a5 17		lda $17				lda tmp2+1
.8c4f	75 6b		adc $6b,x			adc FSMant2+0,x
.8c51	85 17		sta $17				sta tmp2+1
.8c53	a5 18		lda $18				lda tmp3+0
.8c55	75 61		adc $61,x			adc FSMant1+0,x
.8c57	85 18		sta $18				sta tmp3+0
.8c59	a5 19		lda $19				lda tmp3+1
.8c5b	75 57		adc $57,x			adc FSMant0+0,x
.8c5d	85 19		sta $19				sta tmp3+1
.8c5f	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c61	66 18		ror $18				ror tmp3+0
.8c63	66 17		ror $17				ror tmp2+1
.8c65	66 16		ror $16				ror tmp2+0
.8c67	88		dey				dey			;  next bit
.8c68	d0 d9		bne $8c43			bne _b1
.8c6a	60		rts				rts
=136					CodeLen	.var *-XtPtr1
=$8c6b					Here1 = *	; remember here
>8be1	88					.byte CodeLen	;patch wh_CodeLength
>8c6b	46 53 71 72			Name0:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6f	44					.byte (("FSqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c70	10					.byte WordFlags	;wh_Flags
>8c71	03					.byte 3	;wh_CodeLength
>8c72	90					  .byte LinkDisplacement	; offset to previous nt
=$8c73					XtPtr1 ::= *
=35823					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c73	20 4d 85	jsr $854d	FSqr:		jsr FDup
.8c76	4c e3 8b	jmp $8be3			jmp FStar
=6					CodeLen	.var *-XtPtr1
=$8c79					Here1 = *	; remember here
>8c71	06					.byte CodeLen	;patch wh_CodeLength
>8c79	46 31 30 2a			Name0:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=35837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c7d	44					.byte (("F10*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c7e	10					.byte WordFlags	;wh_Flags
>8c7f	03					.byte 3	;wh_CodeLength
>8c80	0e					  .byte LinkDisplacement	; offset to previous nt
=$8c81					XtPtr1 ::= *
=35837					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c81	20 4d 85	jsr $854d	F10Star:	jsr FDup
.8c84	a4 4c		ldy $4c				ldy FIndex
.8c86	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c89	18		clc				clc
.8c8a	69 01		adc #$01			adc #1
.8c8c	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8f	18		clc				clc
.8c90	69 02		adc #$02			adc #2
.8c92	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c95	4c 15 8b	jmp $8b15			jmp FPlus
=23					CodeLen	.var *-XtPtr1
=$8c98					Here1 = *	; remember here
>8c7f	17					.byte CodeLen	;patch wh_CodeLength
>8c98	46 2f				Name0:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=35866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c9a	e2					.byte (("F/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c9b	10					.byte WordFlags	;wh_Flags
>8c9c	03					.byte 3	;wh_CodeLength
>8c9d	1d					  .byte LinkDisplacement	; offset to previous nt
=$8c9e					XtPtr1 ::= *
=35866					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c9e	20 bb 8b	jsr $8bbb	FSlash:		jsr FPos		; make r1 & r2 positive
.8ca1	08		php				php			;   save result sign
.8ca2	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8ca4	18		clc				clc
.8ca5	69 01		adc #$01			adc #1
.8ca7	38		sec				sec
.8ca8	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8caa	95 4e		sta $4e,x			sta FSExp+1,x
.8cac	50 12		bvc $8cc0			bvc _49			;  IfVs
.8cae	b0 06		bcs $8cb6			bcs _Zero		; underflow?
.8cb0	28		plp				plp			; drop saved result sign
.8cb1	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cb3	20 67 b4	jsr $b467			jsr Throw_FpOutOfRange	; overflow
.8cb6	e8		inx		_Zero:		inx			; F2Drop
.8cb7	e8		inx				inx
.8cb8	86 4c		stx $4c				stx FIndex
.8cba	28		plp				plp			; drop saved result sign
.8cbb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cbd	4c ab 88	jmp $88ab			jmp F0			; return 0
.8cc0					_49:
.8cc0	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cc2	85 16		sta $16				sta tmp2+0
.8cc4	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc6	85 17		sta $17				sta tmp2+1
.8cc8	b5 62		lda $62,x			lda FSMant1+1,x
.8cca	85 18		sta $18				sta tmp3+0
.8ccc	b5 58		lda $58,x			lda FSMant0+1,x
.8cce	85 19		sta $19				sta tmp3+1
.8cd0	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd3	95 58		sta $58,x			sta FSMant0+1,x
.8cd5	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd8	95 62		sta $62,x			sta FSMant1+1,x
.8cda	20 f9 8c	jsr $8cf9			jsr _Byte
.8cdd	95 6c		sta $6c,x			sta FSMant2+1,x
.8cdf	20 f9 8c	jsr $8cf9			jsr _Byte
.8ce2	95 76		sta $76,x			sta FSMant3+1,x
.8ce4	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce6	76 62		ror $62,x			ror FSMant1+1,x
.8ce8	76 6c		ror $6c,x			ror FSMant2+1,x
.8cea	76 76		ror $76,x			ror FSMant3+1,x
.8cec	e6 4c		inc $4c				inc FIndex		; FDrop
.8cee	a6 14		ldx $14				ldx tmp1+0		; restore X
.8cf0	28		plp				plp			; fix sign
.8cf1	10 03		bpl $8cf6			bpl +
.8cf3	20 8a 8b	jsr $8b8a			jsr FNegate
.8cf6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
.8cf9					_Byte:
.8cf9	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cfb					_1:
.8cfb	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cfd	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cff	d0 10		bne $8d11			bne _4
.8d01	a5 18		lda $18				lda tmp3+0
.8d03	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d05	d0 0a		bne $8d11			bne _4
.8d07	a5 17		lda $17				lda tmp2+1
.8d09	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d0b	d0 04		bne $8d11			bne _4
.8d0d	a5 16		lda $16				lda tmp2+0
.8d0f	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d11	90 18		bcc $8d2b	_4:		bcc _2
.8d13	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d15	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d17	85 16		sta $16				sta tmp2+0
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d1d	85 17		sta $17				sta tmp2+1
.8d1f	a5 18		lda $18				lda tmp3+0
.8d21	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d23	85 18		sta $18				sta tmp3+0
.8d25	a5 19		lda $19				lda tmp3+1
.8d27	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d29	85 19		sta $19				sta tmp3+1
.8d2b	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d2d	06 16		asl $16				asl tmp2+0
.8d2f	26 17		rol $17				rol tmp2+1
.8d31	26 18		rol $18				rol tmp3+0
.8d33	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d35	88		dey				dey			;  next
.8d36	d0 c3		bne $8cfb			bne _1
.8d38	a5 15		lda $15				lda tmp1+1		; return bits
.8d3a	60		rts				rts
=157					CodeLen	.var *-XtPtr1
=$8d3b					Here1 = *	; remember here
>8c9c	9d					.byte CodeLen	;patch wh_CodeLength
>8d3b	46 31 2f			Name0:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36030					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d3e	e3					.byte (("F1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3f	10					.byte WordFlags	;wh_Flags
>8d40	03					.byte 3	;wh_CodeLength
>8d41	a4					  .byte LinkDisplacement	; offset to previous nt
=$8d42					XtPtr1 ::= *
=36030					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d42	20 e3 88	jsr $88e3	F1Slash:	jsr F1
.8d45	20 d1 85	jsr $85d1			jsr FSwap
.8d48	4c 9e 8c	jmp $8c9e			jmp FSlash
=9					CodeLen	.var *-XtPtr1
=$8d4b					Here1 = *	; remember here
>8d40	09					.byte CodeLen	;patch wh_CodeLength
>8d4b	45 2a				Name0:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d4d	42					.byte (("E*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d4e	10					.byte WordFlags	;wh_Flags
>8d4f	03					.byte 3	;wh_CodeLength
>8d50	0f					  .byte LinkDisplacement	; offset to previous nt
=$8d51					XtPtr1 ::= *
=36045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d51					EStar:
.8d51	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive
.8d54	08		php				php			;   remember result sign
.8d55	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d57	38		sec				sec
.8d58	75 4e		adc $4e,x			adc FSExp+1,x
.8d5a	95 4e		sta $4e,x			sta FSExp+1,x
.8d5c	70 1b		bvs $8d79			bvs _ExpOvfl
.8d5e	a0 00		ldy #$00			ldy #0
.8d60	84 16		sty $16				sty tmp2+0
.8d62	84 17		sty $17				sty tmp2+1		; zero result
.8d64	b5 62		lda $62,x			lda FSMant1+1,x
.8d66	20 88 8d	jsr $8d88			jsr _Byte		; do FSMant1+1 byte
.8d69	b5 58		lda $58,x			lda FSMant0+1,x
.8d6b	20 88 8d	jsr $8d88			jsr _Byte		; do FSMant0+1 byte
.8d6e	a5 16		lda $16				lda tmp2+0		; r3 = tmp2
.8d70	95 62		sta $62,x			sta FSMant1+1,x
.8d72	a5 17		lda $17				lda tmp2+1
.8d74	95 58		sta $58,x			sta FSMant0+1,x
.8d76	4c a6 8d	jmp $8da6			jmp EFix3		; finish
.8d79					_ExpOvfl:
.8d79	b0 05		bcs $8d80			bcs _Zero		;underflow?
.8d7b	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d7d	20 67 b4	jsr $b467			jsr Throw_FpOutOfRange	;overflow
.8d80	a9 00		lda #$00	_Zero:		lda #0
.8d82	95 62		sta $62,x			sta FSMant1+1,x
.8d84	95 58		sta $58,x			sta FSMant0+1,x
.8d86	f0 1e		beq $8da6			beq EFix3
.8d88					_Byte:
.8d88	49 ff		eor #$ff			eor #$ff
.8d8a	85 15		sta $15				sta tmp1+1
.8d8c	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d8e	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d90	b0 0c		bcs $8d9e			bcs _b5
.8d92	a5 16		lda $16				lda tmp2+0		;     tmp2 += r2
.8d94	75 61		adc $61,x			adc FSMant1+0,x
.8d96	85 16		sta $16				sta tmp2+0
.8d98	a5 17		lda $17				lda tmp2+1
.8d9a	75 57		adc $57,x			adc FSMant0+0,x
.8d9c	85 17		sta $17				sta tmp2+1
.8d9e	46 17		lsr $17		_b5:		lsr tmp2+1		;   tmp2 <<= 1
.8da0	66 16		ror $16				ror tmp2+0
.8da2	88		dey				dey			;  next bit
.8da3	d0 e9		bne $8d8e			bne _b1
.8da5	60		rts				rts
=85					CodeLen	.var *-XtPtr1
=$8da6					Here1 = *	; remember here
>8d4f	55					.byte CodeLen	;patch wh_CodeLength
.8da6					EFix3:
.8da6	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da8	95 6c		sta $6c,x			sta FSMant2+1,x
.8daa	95 76		sta $76,x			sta FSMant3+1,x
.8dac	e6 4c		inc $4c				inc FIndex		; FDrop
.8dae	a6 14		ldx $14				ldx tmp1+0		; restore X
.8db0	28		plp				plp			;fix result sign
.8db1	10 03		bpl $8db6			bpl +
.8db3	4c 8a 8b	jmp $8b8a			jmp FNegate
.8db6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
>8db9	45 53 71 72			Name0:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36157					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dbd	44					.byte (("ESqr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=112					LinkDisplacement = Nt0-WordListLink
>8dbe	10					.byte WordFlags	;wh_Flags
>8dbf	03					.byte 3	;wh_CodeLength
>8dc0	70					  .byte LinkDisplacement	; offset to previous nt
=$8dc1					XtPtr1 ::= *
=36157					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc1	20 4d 85	jsr $854d	ESqr:		jsr FDup
.8dc4	4c 51 8d	jmp $8d51			jmp EStar
=6					CodeLen	.var *-XtPtr1
=$8dc7					Here1 = *	; remember here
>8dbf	06					.byte CodeLen	;patch wh_CodeLength
>8dc7	45 2f				Name0:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36169					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc9	e2					.byte (("E/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dca	10					.byte WordFlags	;wh_Flags
>8dcb	03					.byte 3	;wh_CodeLength
>8dcc	0c					  .byte LinkDisplacement	; offset to previous nt
=$8dcd					XtPtr1 ::= *
=36169					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dcd	20 bb 8b	jsr $8bbb	ESlash:		jsr FPos	; make r1 & r2 positive
.8dd0	08		php				php		; remember result sign
.8dd1	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dd3	38		sec				sec
.8dd4	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dd6	70 17		bvs $8def			bvs _ExpOvfl
.8dd8	18		clc				clc
.8dd9	69 01		adc #$01			adc #1
.8ddb	95 4e		sta $4e,x			sta FSExp+1,x
.8ddd	20 f5 8d	jsr $8df5			jsr _Byte		; gen quotient hi byte
.8de0	48		pha				pha
.8de1	20 f5 8d	jsr $8df5			jsr _Byte		; gen quotient lo byte
.8de4	95 62		sta $62,x			sta FSMant1+1,x
.8de6	68		pla				pla
.8de7	4a		lsr a				lsr a
.8de8	95 58		sta $58,x			sta FSMant0+1,x
.8dea	76 62		ror $62,x			ror FSMant1+1,x
.8dec	4c a6 8d	jmp $8da6			jmp EFix3
.8def					_ExpOvfl:
.8def	28		plp				plp			; rdrop saved result sign
.8df0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8df2	20 67 b4	jsr $b467			jsr Throw_FpOutOfRange	; overflow
.8df5					_Byte:
.8df5	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df7	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df9	d5 61		cmp $61,x			cmp FSMant1+0,x
.8dfb	b5 58		lda $58,x			lda FSMant0+1,x
.8dfd	f5 57		sbc $57,x			sbc FSMant0+0,x
.8dff	90 09		bcc $8e0a			bcc _b5
.8e01	95 58		sta $58,x			sta FSMant0+1,x
.8e03	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e05	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e07	95 62		sta $62,x			sta FSMant1+1,x
.8e09	38		sec				sec
.8e0a					_b5:
.8e0a	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e0c	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e0e	36 58		rol $58,x			rol FSMant0+1,x
.8e10	88		dey				dey			;  next bit
.8e11	d0 e4		bne $8df7			bne _b1
.8e13	a5 15		lda $15				lda tmp1+1		; return bits
.8e15	60		rts				rts
=73					CodeLen	.var *-XtPtr1
=$8e16					Here1 = *	; remember here
>8dcb	49					.byte CodeLen	;patch wh_CodeLength
>8e16	45 31 2f			Name0:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e19	e3					.byte (("E1/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e1a	10					.byte WordFlags	;wh_Flags
>8e1b	03					.byte 3	;wh_CodeLength
>8e1c	50					  .byte LinkDisplacement	; offset to previous nt
=$8e1d					XtPtr1 ::= *
=36249					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e1d	20 e3 88	jsr $88e3	E1Slash:	jsr F1
.8e20	20 d1 85	jsr $85d1			jsr FSwap
.8e23	4c cd 8d	jmp $8dcd			jmp ESlash
=9					CodeLen	.var *-XtPtr1
=$8e26					Here1 = *	; remember here
>8e1b	09					.byte CodeLen	;patch wh_CodeLength
>8e26	53 3e 46			Name0:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e29	c3					.byte (("S>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e2a	10					.byte WordFlags	;wh_Flags
>8e2b	03					.byte 3	;wh_CodeLength
>8e2c	10					  .byte LinkDisplacement	; offset to previous nt
=$8e2d					XtPtr1 ::= *
=36265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e2d	20 07 b4	jsr $b407	SToF:		jsr PopYA		; pop n
.8e30	20 c2 84	jsr $84c2	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e33	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e35	95 61		sta $61,x			sta FSMant1,x
.8e37	a9 00		lda #$00			lda #0			; pad mantissa
.8e39	95 6b		sta $6b,x			sta FSMant2,x
.8e3b	95 75		sta $75,x			sta FSMant3,x
.8e3d	a9 0f		lda #$0f			lda #15			; set exponent
.8e3f	95 4d		sta $4d,x			sta FSExp,x
.8e41	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=23					CodeLen	.var *-XtPtr1
=$8e44					Here1 = *	; remember here
>8e2b	17					.byte CodeLen	;patch wh_CodeLength
>8e44	44 3e 46			Name0:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e47	c3					.byte (("D>F"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e48	10					.byte WordFlags	;wh_Flags
>8e49	03					.byte 3	;wh_CodeLength
>8e4a	1e					  .byte LinkDisplacement	; offset to previous nt
=$8e4b					XtPtr1 ::= *
=36295					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e4b	20 c2 84	jsr $84c2	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e4e	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e50	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e52	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e54	99 75 00	sta $0075,y			sta FSMant3,y
.8e57	b5 27		lda $27,x			lda DStack+3,x
.8e59	99 6b 00	sta $006b,y			sta FSMant2,y
.8e5c	b5 24		lda $24,x			lda DStack+0,x
.8e5e	99 61 00	sta $0061,y			sta FSMant1,y
.8e61	b5 25		lda $25,x			lda DStack+1,x
.8e63	99 57 00	sta $0057,y			sta FSMant0,y
.8e66	a9 1f		lda #$1f			lda #31			; set exponent
.8e68	99 4d 00	sta $004d,y			sta FSExp,y
.8e6b	20 53 c5	jsr $c553			jsr Two_Drop
.8e6e	4c 8d 8a	jmp $8a8d			jmp FNorm		; normalize, return
=38					CodeLen	.var *-XtPtr1
=$8e71					Here1 = *	; remember here
>8e49	26					.byte CodeLen	;patch wh_CodeLength
>8e71	46 3e 53			Name0:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36340					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e74	63					.byte (("F>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e75	10					.byte WordFlags	;wh_Flags
>8e76	03					.byte 3	;wh_CodeLength
>8e77	2d					  .byte LinkDisplacement	; offset to previous nt
=$8e78					XtPtr1 ::= *
=36340					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e78	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e7a	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e7d	08		php				php
.8e7e	10 03		bpl $8e83			bpl +
.8e80	20 8a 8b	jsr $8b8a			jsr FNegate
.8e83					+
.8e83	a9 0f		lda #$0f			lda #15
.8e85	20 cc 89	jsr $89cc			jsr FShiftA
.8e88	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e8a	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e8c	b0 17		bcs $8ea5			bcs _overflow
.8e8e	a4 4c		ldy $4c				ldy FIndex
.8e90	ca		dex				dex
.8e91	ca		dex				dex
.8e92	b9 57 00	lda $0057,y			lda FSMant0,y
.8e95	95 25		sta $25,x			sta DStack+1,x
.8e97	b9 61 00	lda $0061,y			lda FSMant1,y
.8e9a	95 24		sta $24,x			sta DStack+0,x
.8e9c	e6 4c		inc $4c				inc FIndex		; FDrop
.8e9e	28		plp				plp			; apply saved sign
.8e9f	30 01		bmi $8ea2			bmi +
.8ea1	60		rts				rts
.8ea2	4c c7 c6	jmp $c6c7	+		jmp Negate
.8ea5	28		plp		_overflow:	plp			; RDrop saved sign
.8ea6	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea8	20 8c b4	jsr $b48c			jsr ThrowA
=51					CodeLen	.var *-XtPtr1
=$8eab					Here1 = *	; remember here
>8e76	33					.byte CodeLen	;patch wh_CodeLength
>8eab	46 3e 44			Name0:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36398					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8eae	83					.byte (("F>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8eaf	10					.byte WordFlags	;wh_Flags
>8eb0	03					.byte 3	;wh_CodeLength
>8eb1	3a					  .byte LinkDisplacement	; offset to previous nt
=$8eb2					XtPtr1 ::= *
=36398					WordListLink ::= Nt0 ; remember the nt of this word for later
.8eb2	a4 4c		ldy $4c		FToD:		ldy FIndex
.8eb4	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb7	08		php				php
.8eb8	10 03		bpl $8ebd			bpl +
.8eba	20 8a 8b	jsr $8b8a			jsr FNegate
.8ebd					+
.8ebd	a9 1f		lda #$1f			lda #31
.8ebf	20 cc 89	jsr $89cc			jsr FShiftA
.8ec2	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ec4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ec6	b0 23		bcs $8eeb			bcs _overflow
.8ec8	a4 4c		ldy $4c				ldy FIndex
.8eca	ca		dex				dex			; d= mantissa
.8ecb	ca		dex				dex
.8ecc	ca		dex				dex
.8ecd	ca		dex				dex
.8ece	b9 57 00	lda $0057,y			lda FSMant0,y
.8ed1	95 25		sta $25,x			sta DStack+1,x
.8ed3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ed6	95 24		sta $24,x			sta DStack+0,x
.8ed8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8edb	95 27		sta $27,x			sta DStack+3,x
.8edd	b9 75 00	lda $0075,y			lda FSMant3,y
.8ee0	95 26		sta $26,x			sta DStack+2,x
.8ee2	e6 4c		inc $4c				inc FIndex		; FDrop
.8ee4	28		plp				plp			; apply saved sign
.8ee5	30 01		bmi $8ee8			bmi +
.8ee7	60		rts				rts
.8ee8	4c f6 c6	jmp $c6f6	+		jmp DNegate
.8eeb	28		plp		_overflow:	plp			; RDrop sign
.8eec	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eee	20 8c b4	jsr $b48c			jsr ThrowA
=63					CodeLen	.var *-XtPtr1
=$8ef1					Here1 = *	; remember here
>8eb0	3f					.byte CodeLen	;patch wh_CodeLength
>8ef1	46 52 6e 64			Name0:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36469					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ef5	84					.byte (("FRnd"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8ef6	10					.byte WordFlags	;wh_Flags
>8ef7	03					.byte 3	;wh_CodeLength
>8ef8	47					  .byte LinkDisplacement	; offset to previous nt
=$8ef9					XtPtr1 ::= *
=36469					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef9	20 fd 82	jsr $82fd	FRnd:		jsr Rand		; generate next RndState
.8efc	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.8eff	4a		lsr a				lsr a			;   make positive
.8f00	95 57		sta $57,x			sta FSMant0,x
.8f02	94 61		sty $61,x			sty FSMant1,x
.8f04	ad 35 03	lda $0335			lda RndState+0
.8f07	95 6b		sta $6b,x			sta FSMant2,x
.8f09	ad 36 03	lda $0336			lda RndState+1
.8f0c	95 75		sta $75,x			sta FSMant3,x
.8f0e	a9 00		lda #$00			lda #0			; exponent=0
.8f10	95 4d		sta $4d,x			sta FSExp,x
.8f12	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=28					CodeLen	.var *-XtPtr1
=$8f15					Here1 = *	; remember here
>8ef7	1c					.byte CodeLen	;patch wh_CodeLength
>8f15	46 53 71 72 74			Name0:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f1a	85					.byte (("FSqrt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f1b	10					.byte WordFlags	;wh_Flags
>8f1c	03					.byte 3	;wh_CodeLength
>8f1d	25					  .byte LinkDisplacement	; offset to previous nt
=$8f1e					XtPtr1 ::= *
=36506					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f1e	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f20	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f23	d0 01		bne $8f26			bne +
.8f25	60		rts				rts			;   just return the zero
.8f26					+
.8f26	20 4d 85	jsr $854d			jsr FDup		; get trial value
.8f29	a4 4c		ldy $4c				ldy FIndex
.8f2b	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f2e	c9 80		cmp #$80			cmp #$80
.8f30	6a		ror a				ror a
.8f31	99 4d 00	sta $004d,y			sta FSExp,y
.8f34	a9 09		lda #$09			lda #9			; for 9 iterations
.8f36	48		pha		_3:		pha
.8f37	20 c2 85	jsr $85c2			jsr F2Dup		;   calc new trial value
.8f3a	20 9e 8c	jsr $8c9e			jsr FSlash
.8f3d	20 15 8b	jsr $8b15			jsr FPlus
.8f40	20 97 89	jsr $8997			jsr F2Slash
.8f43	68		pla				pla			;  next
.8f44	38		sec				sec
.8f45	e9 01		sbc #$01			sbc #1
.8f47	d0 ed		bne $8f36			bne _3
.8f49	4c 28 85	jmp $8528			jmp FNip		; return trial value
=46					CodeLen	.var *-XtPtr1
=$8f4c					Here1 = *	; remember here
>8f1c	2e					.byte CodeLen	;patch wh_CodeLength
>8f4c	50 72 65 63 69 73 69 6f		Name0:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f54	6e
=9					NameLength = *-Name0
=36565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f55	c9					.byte (("Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f56	10					.byte WordFlags	;wh_Flags
>8f57	03					.byte 3	;wh_CodeLength
>8f58	3b					  .byte LinkDisplacement	; offset to previous nt
=$8f59					XtPtr1 ::= *
=36565					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f59	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f5c	4c f5 b7	jmp $b7f5			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$8f5f					Here1 = *	; remember here
>8f57	06					.byte CodeLen	;patch wh_CodeLength
.8f5f	60		rts				rts
>8f60	53 65 74 2d 50 72 65 63		Name0:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f68	69 73 69 6f 6e
=13					NameLength = *-Name0
=36589					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f6d	cd					.byte (("Set-Precision"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f6e	10					.byte WordFlags	;wh_Flags
>8f6f	03					.byte 3	;wh_CodeLength
>8f70	18					  .byte LinkDisplacement	; offset to previous nt
=$8f71					XtPtr1 ::= *
=36589					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f71	20 ec b3	jsr $b3ec			jsr PopA
.8f74	8d ff 02	sta $02ff			sta PrecisionV
=6					CodeLen	.var *-XtPtr1
=$8f77					Here1 = *	; remember here
>8f6f	06					.byte CodeLen	;patch wh_CodeLength
.8f77	60		rts				rts
>8f78	28 46 2e 29			Name0:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=36604					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f7c	24					.byte (("(F.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f7d	10					.byte WordFlags	;wh_Flags
>8f7e	03					.byte 3	;wh_CodeLength
>8f7f	0f					  .byte LinkDisplacement	; offset to previous nt
=$8f80					XtPtr1 ::= *
=36604					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f80	20 fd 8f	jsr $8ffd	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f83	20 89 8f	jsr $8f89			jsr PFDotSub
.8f86	4c 1b 90	jmp $901b			jmp pfcen
.8f89					PFDotSub:
.8f89	20 59 8f	jsr $8f59			jsr Precision	;alloc & init work area
.8f8c	20 0c b8	jsr $b80c			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f8f	20 dd 8f	jsr $8fdd			jsr FLt10		; scale down to <10, counting exponent
.8f92					_c:
.8f92	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f94	d0 05		bne $8f9b			bne _c2
.8f96	a9 2e		lda #$2e			lda #'.'
.8f98	20 12 90	jsr $9012			jsr pfch
.8f9b	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f9d	20 4d 85	jsr $854d			jsr FDup		;  do a digit
.8fa0	20 78 8e	jsr $8e78			jsr FToS		; ( work n )
.8fa3	b5 24		lda $24,x			lda DStack+0,x
.8fa5	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa7	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa9	f0 08		beq $8fb3			beq _c7
.8fab	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fad	10 04		bpl $8fb3			bpl +
.8faf	e8		inx				inx			;    drop integer
.8fb0	e8		inx				inx
.8fb1	d0 17		bne $8fca			bne _d
.8fb3					+
.8fb3	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fb5	09 30		ora #$30			ora #'0'
.8fb7	20 12 90	jsr $9012			jsr pfch
.8fba	20 2d 8e	jsr $8e2d			jsr SToF		; ( work )
.8fbd	20 55 8b	jsr $8b55			jsr FMinus
.8fc0	20 81 8c	jsr $8c81			jsr F10Star
.8fc3	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fc5	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc8	d0 c8		bne $8f92			bne _c
.8fca	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fcc	30 08		bmi $8fd6			bmi _d9
.8fce	a9 30		lda #$30			lda #'0'
.8fd0	20 12 90	jsr $9012			jsr pfch
.8fd3	4c ca 8f	jmp $8fca			jmp _d
.8fd6					_d9:
.8fd6	e8		inx				inx			; drop work area
.8fd7	e8		inx				inx
.8fd8	e8		inx				inx
.8fd9	e8		inx				inx
.8fda	e6 4c		inc $4c				inc FIndex		; FDrop
.8fdc	60		rts				rts
=93					CodeLen	.var *-XtPtr1
=$8fdd					Here1 = *	; remember here
>8f7e	5d					.byte CodeLen	;patch wh_CodeLength
.8fdd					FLt10:
.8fdd	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fdf	b9 4d 00	lda $004d,y			lda FSExp,y
.8fe2	30 18		bmi $8ffc			bmi _9			;   exponent negative?
.8fe4	c9 04		cmp #$04			cmp #4
.8fe6	90 14		bcc $8ffc			bcc _9			;   < 4 ?
.8fe8	d0 07		bne $8ff1			bne _2			;   > 4 ?
.8fea	b9 57 00	lda $0057,y			lda FSMant0,y
.8fed	c9 50		cmp #$50			cmp #$50
.8fef	90 0b		bcc $8ffc			bcc _9
.8ff1	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8ff3	20 c9 88	jsr $88c9			jsr F10			;   r /= 10
.8ff6	20 9e 8c	jsr $8c9e			jsr FSlash
.8ff9	4c dd 8f	jmp $8fdd			jmp _1
.8ffc	60		rts		_9:		rts
.8ffd					pfcst:
.8ffd	a9 01		lda #$01			lda #1
.8fff	8d 34 03	sta $0334			sta ToHold
.9002	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.9004	b9 57 00	lda $0057,y			lda FSMant0,y
.9007	10 08		bpl $9011			bpl _19
.9009	a9 2d		lda #$2d			lda #'-'		;   append sign
.900b	20 12 90	jsr $9012			jsr pfch
.900e	4c 8a 8b	jmp $8b8a			jmp FNegate		;   make positive, return
.9011	60		rts		_19:		rts
.9012					pfch:
.9012	ac 34 03	ldy $0334			ldy ToHold
.9015	91 00		sta ($00),y			sta (cp),y
.9017	ee 34 03	inc $0334			inc ToHold
.901a	60		rts				rts
.901b					pfcen:
.901b	ad 34 03	lda $0334			lda ToHold
.901e	38		sec				sec
.901f	e9 01		sbc #$01			sbc #1
.9021	a0 00		ldy #$00			ldy #0
.9023	91 00		sta ($00),y			sta (cp),y		; fill in length
.9025	4c 45 ca	jmp $ca45			jmp Here		; push start addr
.9028					pfciA:
.9028	a8		tay				tay
.9029	10 0a		bpl $9035			bpl _15			; IfMi,
.902b	49 ff		eor #$ff			eor #$ff
.902d	18		clc				clc
.902e	69 01		adc #$01			adc #1
.9030	48		pha				pha
.9031	a9 2d		lda #$2d			lda #'-'
.9033	d0 03		bne $9038			bne _19
.9035	48		pha		_15:		pha
.9036	a9 2b		lda #$2b			lda #'+'
.9038					_19:
.9038	20 12 90	jsr $9012			jsr pfch
.903b	68		pla				pla
.903c	a0 2f		ldy #$2f			ldy #'0'-1
.903e	c8		iny		_20:		iny
.903f	38		sec				sec
.9040	e9 0a		sbc #$0a			sbc #10
.9042	b0 fa		bcs $903e			bcs _20
.9044	69 0a		adc #$0a			adc #10
.9046	48		pha				pha
.9047	98		tya				tya
.9048	20 12 90	jsr $9012			jsr pfch
.904b	68		pla				pla
.904c	09 30		ora #$30			ora #'0'
.904e	d0 c2		bne $9012			bne pfch
>9050	46 2e				Name0:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=36818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9052	c2					.byte (("F."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>9053	10					.byte WordFlags	;wh_Flags
>9054	03					.byte 3	;wh_CodeLength
>9055	d6					  .byte LinkDisplacement	; offset to previous nt
=$9056					XtPtr1 ::= *
=36818					WordListLink ::= Nt0 ; remember the nt of this word for later
.9056	20 80 8f	jsr $8f80	FDot:		jsr PFDot
.9059	20 ff b1	jsr $b1ff	FDot2:		jsr Count
.905c	20 f5 cd	jsr $cdf5			jsr Type
.905f	4c e9 cd	jmp $cde9			jmp Space
=12					CodeLen	.var *-XtPtr1
=$9062					Here1 = *	; remember here
>9054	0c					.byte CodeLen	;patch wh_CodeLength
>9062	46 2e 53			Name0:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9065	63					.byte (("F.S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>9066	10					.byte WordFlags	;wh_Flags
>9067	03					.byte 3	;wh_CodeLength
>9068	13					  .byte LinkDisplacement	; offset to previous nt
=$9069					XtPtr1 ::= *
=36837					WordListLink ::= Nt0 ; remember the nt of this word for later
.9069	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.906b	d0 0b		bne $9078			bne _8
.906d	48		pha		_2:		pha
.906e	20 99 85	jsr $8599			jsr FPick3	;   print it
.9071	20 56 90	jsr $9056			jsr FDot
.9074	68		pla				pla		;  next
.9075	38		sec				sec
.9076	e9 01		sbc #$01			sbc #1
.9078	c5 4c		cmp $4c		_8:		cmp FIndex
.907a	b0 f1		bcs $906d			bcs _2
=19					CodeLen	.var *-XtPtr1
=$907c					Here1 = *	; remember here
>9067	13					.byte CodeLen	;patch wh_CodeLength
.907c	60		rts				rts
>907d	28 46 53 2e 29			Name0:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9082	25					.byte (("(FS.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>9083	10					.byte WordFlags	;wh_Flags
>9084	03					.byte 3	;wh_CodeLength
>9085	1d					  .byte LinkDisplacement	; offset to previous nt
=$9086					XtPtr1 ::= *
=36866					WordListLink ::= Nt0 ; remember the nt of this word for later
.9086	20 03 b8	jsr $b803	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9089	20 fd 8f	jsr $8ffd			jsr pfcst		; start collecting chars, make r positive
.908c	20 dd 8f	jsr $8fdd			jsr FLt10		; scale down to <10
.908f	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.9091	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9094	f0 0f		beq $90a5			beq _c9
.9096	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9099	f0 02		beq $909d			beq _c2
.909b	10 08		bpl $90a5			bpl _c9
.909d	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.909f	20 81 8c	jsr $8c81			jsr F10Star		;  r *= 10
.90a2	4c 8f 90	jmp $908f			jmp _c1
.90a5					_c9:
.90a5	20 89 8f	jsr $8f89	PFSDotM:	jsr PFDotSub		; do mantissa
.90a8	a9 45		lda #$45			lda #'E'
.90aa	20 12 90	jsr $9012			jsr pfch		; do exponent
.90ad	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90af	20 28 90	jsr $9028			jsr pfciA
.90b2	e8		inx				inx			; Drop work area
.90b3	e8		inx				inx
.90b4	4c 1b 90	jmp $901b			jmp pfcen		; finish string
=49					CodeLen	.var *-XtPtr1
=$90b7					Here1 = *	; remember here
>9084	31					.byte CodeLen	;patch wh_CodeLength
>90b7	46 53 2e			Name0:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=36922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90ba	c3					.byte (("FS."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90bb	10					.byte WordFlags	;wh_Flags
>90bc	03					.byte 3	;wh_CodeLength
>90bd	38					  .byte LinkDisplacement	; offset to previous nt
=$90be					XtPtr1 ::= *
=36922					WordListLink ::= Nt0 ; remember the nt of this word for later
.90be	20 86 90	jsr $9086	FSDot:		jsr PFSDot
.90c1	4c 59 90	jmp $9059			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$90c4					Here1 = *	; remember here
>90bc	06					.byte CodeLen	;patch wh_CodeLength
>90c4	28 46 45 2e 29			Name0:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=36937					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c9	25					.byte (("(FE.)"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90ca	10					.byte WordFlags	;wh_Flags
>90cb	03					.byte 3	;wh_CodeLength
>90cc	0f					  .byte LinkDisplacement	; offset to previous nt
=$90cd					XtPtr1 ::= *
=36937					WordListLink ::= Nt0 ; remember the nt of this word for later
.90cd	20 03 b8	jsr $b803	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90d0	20 fd 8f	jsr $8ffd			jsr pfcst		; start collecting chars, make r positive
.90d3	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90d5	b9 57 00	lda $0057,y			lda FSMant0,y
.90d8	f0 16		beq $90f0			beq _39
.90da	b9 4d 00	lda $004d,y			lda FSExp,y
.90dd	f0 02		beq $90e1			beq _31
.90df	10 0f		bpl $90f0			bpl _39
.90e1	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90e3	d6 24		dec $24,x			dec _exp,x
.90e5	d6 24		dec $24,x			dec _exp,x
.90e7	20 bb 88	jsr $88bb			jsr F1000		;  r *= 1000
.90ea	20 e3 8b	jsr $8be3			jsr FStar
.90ed	4c d3 90	jmp $90d3			jmp _30
.90f0					_39:
.90f0	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90f2	b9 4d 00	lda $004d,y			lda FSExp,y
.90f5	30 1c		bmi $9113			bmi _a9			; exponent negative?
.90f7	c9 0a		cmp #$0a			cmp #10
.90f9	90 18		bcc $9113			bcc _a9			;   < 10 ?
.90fb	d0 07		bne $9104			bne _a2			;   > 10 ?
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y
.9100	c9 7d		cmp #$7d			cmp #$7d
.9102	90 0f		bcc $9113			bcc _a9
.9104	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9106	f6 24		inc $24,x			inc _exp,x
.9108	f6 24		inc $24,x			inc _exp,x
.910a	20 bb 88	jsr $88bb			jsr F1000		;   r /= 1000
.910d	20 9e 8c	jsr $8c9e			jsr FSlash
.9110	4c f0 90	jmp $90f0			jmp _a
.9113					_a9:
.9113	4c a5 90	jmp $90a5			jmp PFSDotM
=73					CodeLen	.var *-XtPtr1
=$9116					Here1 = *	; remember here
>90cb	49					.byte CodeLen	;patch wh_CodeLength
>9116	46 45 2e			Name0:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37017					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9119	c3					.byte (("FE."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>911a	10					.byte WordFlags	;wh_Flags
>911b	03					.byte 3	;wh_CodeLength
>911c	50					  .byte LinkDisplacement	; offset to previous nt
=$911d					XtPtr1 ::= *
=37017					WordListLink ::= Nt0 ; remember the nt of this word for later
.911d	20 cd 90	jsr $90cd	FEDot:		jsr PFEDot
.9120	4c 59 90	jmp $9059			jmp FDot2
=6					CodeLen	.var *-XtPtr1
=$9123					Here1 = *	; remember here
>911b	06					.byte CodeLen	;patch wh_CodeLength
>9123	46 22				Name0:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=37029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9125	42					.byte (('F"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9126	18					.byte WordFlags	;wh_Flags
>9127	03					.byte 3	;wh_CodeLength
>9128	0c					  .byte LinkDisplacement	; offset to previous nt
=$9129					XtPtr1 ::= *
=37029					WordListLink ::= Nt0 ; remember the nt of this word for later
.9129	20 85 ba	jsr $ba85	FQuote:		jsr Parse_Name		; get string
.912c	20 4c 91	jsr $914c			jsr ToFloat		; convert
.912f	b5 24		lda $24,x			lda DStack+0,x		; error?
.9131	f0 0a		beq $913d			beq _Err
.9133	e8		inx				inx
.9134	e8		inx				inx
.9135	a5 0a		lda $0a				lda State		; compiling?
.9137	d0 01		bne $913a			bne _compile
.9139	60		rts				rts
.913a	4c 0a 88	jmp $880a	_compile:	jmp FLiteral		; compile a FP literal
.913d	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.913f	20 8c b4	jsr $b48c			jsr ThrowA
=25					CodeLen	.var *-XtPtr1
=$9142					Here1 = *	; remember here
>9127	19					.byte CodeLen	;patch wh_CodeLength
>9142	3e 46 6c 6f 61 74		Name0:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37064					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9148	86					.byte ((">Float"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9149	10					.byte WordFlags	;wh_Flags
>914a	03					.byte 3	;wh_CodeLength
>914b	23					  .byte LinkDisplacement	; offset to previous nt
=$914c					XtPtr1 ::= *
=37064					WordListLink ::= Nt0 ; remember the nt of this word for later
.914c					ToFloat:
.914c	20 03 b8	jsr $b803			jsr Zero	; alloc & init workspace
.914f	20 03 b8	jsr $b803			jsr Zero
.9152	20 03 b8	jsr $b803			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.9155	20 ab 88	jsr $88ab			jsr F0			; init result
.9158	20 2a 92	jsr $922a	_11:		jsr _GetChar		; get mantissa prefix
.915b	b0 57		bcs $91b4			bcs _trueb ;_finishb
.915d	c9 20		cmp #$20			cmp #' '
.915f	f0 f7		beq $9158			beq _11
.9161	c9 2b		cmp #$2b			cmp #'+'
.9163	f0 06		beq $916b			beq _20
.9165	c9 2d		cmp #$2d			cmp #'-'
.9167	d0 07		bne $9170			bne _21
.9169	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.916b	20 2a 92	jsr $922a	_20:		jsr _GetChar		; do next mantissa digits
.916e	b0 47		bcs $91b7			bcs _finishb
.9170	c9 2e		cmp #$2e	_21:		cmp #'.'
.9172	f0 31		beq $91a5			beq _27
.9174	c9 45		cmp #$45			cmp #'E'
.9176	f0 42		beq $91ba			beq _30
.9178	c9 65		cmp #$65			cmp #'e'
.917a	f0 3e		beq $91ba			beq _30
.917c	c9 44		cmp #$44			cmp #'D'
.917e	f0 3a		beq $91ba			beq _30
.9180	c9 64		cmp #$64			cmp #'d'
.9182	f0 36		beq $91ba			beq _30
.9184	38		sec				sec			;   a digit?
.9185	e9 30		sbc #$30			sbc #'0'
.9187	90 24		bcc $91ad			bcc _fail
.9189	c9 0a		cmp #$0a			cmp #9+1
.918b	b0 20		bcs $91ad			bcs _fail
.918d	48		pha				pha			; append digit to mantissa
.918e	20 81 8c	jsr $8c81			jsr F10Star
.9191	68		pla				pla
.9192	a0 00		ldy #$00			ldy #0
.9194	20 30 8e	jsr $8e30			jsr SToFYA
.9197	20 15 8b	jsr $8b15			jsr FPlus
.919a	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.919c	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.919e	f0 02		beq $91a2			beq +
.91a0	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.91a2					+
.91a2	4c 6b 91	jmp $916b			jmp _20
.91a5					_27:
.91a5	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a7	d0 04		bne $91ad			bne _fail
.91a9	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91ab	f0 be		beq $916b			beq _20
.91ad					_fail:
.91ad	20 0e 85	jsr $850e			jsr FDrop
.91b0	a9 00		lda #$00			lda #0			;return false
.91b2	f0 69		beq $921d			beq _return
.91b4	4c 1b 92	jmp $921b	_trueb:		jmp _true
.91b7	4c e8 91	jmp $91e8	_finishb:	jmp _finish
.91ba					_30:
.91ba	20 2a 92	jsr $922a			jsr _GetChar
.91bd	b0 29		bcs $91e8			bcs _finish
.91bf	c9 2b		cmp #$2b			cmp #'+'
.91c1	f0 06		beq $91c9			beq _40
.91c3	c9 2d		cmp #$2d			cmp #'-'
.91c5	d0 07		bne $91ce			bne _41
.91c7	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c9	20 2a 92	jsr $922a	_40:		jsr _GetChar		;get exponent digits
.91cc	b0 1a		bcs $91e8			bcs _finish
.91ce	38		sec		_41:		sec			;  digit?
.91cf	e9 30		sbc #$30			sbc #'0'
.91d1	90 da		bcc $91ad			bcc _fail
.91d3	c9 0a		cmp #$0a			cmp #9+1
.91d5	b0 d6		bcs $91ad			bcs _fail
.91d7	85 14		sta $14				sta tmp1
.91d9	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91db	b5 28		lda $28,x			lda _exponent,x
.91dd	0a		asl a				asl a
.91de	0a		asl a				asl a
.91df	75 28		adc $28,x			adc _exponent,x
.91e1	65 14		adc $14				adc tmp1		;  + digit
.91e3	95 28		sta $28,x			sta _exponent,x
.91e5	4c c9 91	jmp $91c9			jmp _40
.91e8					_finish:
.91e8	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91ea	f0 c1		beq $91ad			beq _fail
.91ec	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91ee	f0 07		beq $91f7			beq +
.91f0	a9 00		lda #$00			lda #0
.91f2	38		sec				sec
.91f3	f5 28		sbc $28,x			sbc _exponent,x
.91f5	95 28		sta $28,x			sta _exponent,x
.91f7					+
.91f7	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f9	18		clc				clc
.91fa	75 27		adc $27,x			adc _decimalPos,x
.91fc	95 28		sta $28,x			sta _exponent,x
.91fe	4c 06 92	jmp $9206			jmp _93
.9201	20 81 8c	jsr $8c81	_93b:		jsr F10Star		;apply exponent to mantissa
.9204	d6 28		dec $28,x			dec _exponent,x
.9206	f0 0a		beq $9212	_93:		beq _94
.9208	10 f7		bpl $9201			bpl _93b
.920a	20 c9 88	jsr $88c9	_94b:		jsr F10
.920d	20 9e 8c	jsr $8c9e			jsr FSlash
.9210	f6 28		inc $28,x			inc _exponent,x
.9212	30 f6		bmi $920a	_94:		bmi _94b
.9214					_95:
.9214	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9216	f0 03		beq $921b			beq +
.9218	20 8a 8b	jsr $8b8a			jsr FNegate
.921b					+
.921b	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.921d					_return:
.921d	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.921f	95 2d		sta $2d,x			sta _addr+1,x
.9221	e8		inx				inx			; Drop work
.9222	e8		inx				inx
.9223	e8		inx				inx			; 2Drop work
.9224	e8		inx				inx
.9225	e8		inx				inx
.9226	e8		inx				inx
.9227	e8		inx				inx			; Drop len
.9228	e8		inx				inx
.9229	60		rts				rts
.922a					_GetChar:
.922a	38		sec				sec
.922b	b5 2a		lda $2a,x			lda _len,x
.922d	f0 0b		beq $923a			beq _gc_rts		; if end, return C=1
.922f	d6 2a		dec $2a,x			dec _len,x
.9231	a1 2c		lda ($2c,x)			lda (_addr,x)
.9233	f6 2c		inc $2c,x			inc _addr+0,x
.9235	d0 02		bne $9239			bne +
.9237	f6 2d		inc $2d,x			inc _addr+1,x
.9239					+
.9239	18		clc				clc			; get char, return C=0
.923a	60		rts		_gc_rts:	rts
>923b	46 4b 65 79			Name0:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37311					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>923f	24					.byte (("FKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>9240	10					.byte WordFlags	;wh_Flags
>9241	03					.byte 3	;wh_CodeLength
>9242	f7					  .byte LinkDisplacement	; offset to previous nt
=$9243					XtPtr1 ::= *
=37311					WordListLink ::= Nt0 ; remember the nt of this word for later
.9243					FKey:
.9243	20 45 ca	jsr $ca45			jsr Here		; ( addr )
.9246	20 45 ca	jsr $ca45			jsr Here		; ( addr addr )
.9249	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.924b	20 f5 b7	jsr $b7f5			jsr PushZA
.924e	20 c7 c2	jsr $c2c7			jsr Accept		; ( addr len )
.9251	20 4c 91	jsr $914c			jsr ToFloat		; ( true | false)
.9254	e8		inx				inx			; err?
.9255	e8		inx				inx
.9256	b5 22		lda $22,x			lda DStack-2,x
.9258	f0 01		beq $925b			beq _err
.925a	60		rts				rts
.925b	20 ba b8	jsr $b8ba	_err:		jsr SLiteral_runtime
.925e	4c 64 92	jmp $9264			  jmp +
>9261	20 3f 20					  .text " ? "
.9264	20 f5 cd	jsr $cdf5	+		jsr Type
.9267	4c 43 92	jmp $9243			jmp FKey
>926a	53 46 40			Name0:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37357					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>926d	03					.byte (("SF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>926e	10					.byte WordFlags	;wh_Flags
>926f	03					.byte 3	;wh_CodeLength
>9270	2e					  .byte LinkDisplacement	; offset to previous nt
=$9271					XtPtr1 ::= *
=37357					WordListLink ::= Nt0 ; remember the nt of this word for later
.9271	20 07 b4	jsr $b407	SFAt:		jsr PopYA		; pop sf_addr
.9274	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.9276	84 17		sty $17				sty tmp2+1
.9278	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.927b	a0 01		ldy #$01			ldy #1			; copy exponent
.927d	b1 16		lda ($16),y			lda (tmp2),y
.927f	0a		asl a				asl a
.9280	88		dey				dey
.9281	b1 16		lda ($16),y			lda (tmp2),y
.9283	2a		rol a				rol a
.9284	38		sec				sec
.9285	e9 7e		sbc #$7e			sbc #126
.9287	95 4d		sta $4d,x			sta FSExp,x
.9289	a0 01		ldy #$01			ldy #1			; copy mantissa
.928b	b1 16		lda ($16),y			lda (tmp2),y
.928d	09 80		ora #$80			ora #$80
.928f	4a		lsr a				lsr a
.9290	95 57		sta $57,x			sta FSMant0,x
.9292	c8		iny				iny
.9293	b1 16		lda ($16),y			lda (tmp2),y
.9295	6a		ror a				ror a
.9296	95 61		sta $61,x			sta FSMant1,x
.9298	c8		iny				iny
.9299	b1 16		lda ($16),y			lda (tmp2),y
.929b	6a		ror a				ror a
.929c	95 6b		sta $6b,x			sta FSMant2,x
.929e	a9 00		lda #$00			lda #0
.92a0	6a		ror a				ror a
.92a1	95 75		sta $75,x			sta FSMant3,x
.92a3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92a5	a0 00		ldy #$00			ldy #0			; get sign
.92a7	b1 16		lda ($16),y			lda (tmp2),y
.92a9	10 03		bpl $92ae			bpl +
.92ab	20 8a 8b	jsr $8b8a			jsr FNegate
.92ae					+
=61					CodeLen	.var *-XtPtr1
=$92ae					Here1 = *	; remember here
>926f	3d					.byte CodeLen	;patch wh_CodeLength
.92ae	60		rts				rts
>92af	53 46 21			Name0:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92b2	23					.byte (("SF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92b3	10					.byte WordFlags	;wh_Flags
>92b4	03					.byte 3	;wh_CodeLength
>92b5	45					  .byte LinkDisplacement	; offset to previous nt
=$92b6					XtPtr1 ::= *
=37426					WordListLink ::= Nt0 ; remember the nt of this word for later
.92b6	20 07 b4	jsr $b407	SFStore:	jsr PopYA		; pop sf_addr
.92b9	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92bb	84 17		sty $17				sty tmp2+1
.92bd	a4 4c		ldy $4c				ldy FIndex		; negative?
.92bf	b9 57 00	lda $0057,y			lda FSMant0,y
.92c2	29 80		and #$80			and #$80		;  save sign
.92c4	85 19		sta $19				sta tmp3+1
.92c6	10 03		bpl $92cb			bpl +
.92c8	20 8a 8b	jsr $8b8a			jsr FNegate
.92cb					+
.92cb	86 14		stx $14				stx tmp1+0		; save data stack index
.92cd	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92cf	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92d1	18		clc				clc
.92d2	69 7e		adc #$7e			adc #126
.92d4	95 4d		sta $4d,x			sta FSExp,x
.92d6	16 75		asl $75,x			asl FSMant3,x
.92d8	b5 6b		lda $6b,x			lda FSMant2,x
.92da	2a		rol a				rol a
.92db	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92dd	91 16		sta ($16),y			sta (tmp2),y
.92df	b5 61		lda $61,x			lda FSMant1,x
.92e1	2a		rol a				rol a
.92e2	88		dey				dey			; +2 IEEE
.92e3	91 16		sta ($16),y			sta (tmp2),y
.92e5	b5 57		lda $57,x			lda FSMant0,x
.92e7	2a		rol a				rol a
.92e8	2a		rol a				rol a
.92e9	56 4d		lsr $4d,x			lsr FSExp,x
.92eb	6a		ror a				ror a
.92ec	88		dey				dey			; +1 IEEE
.92ed	91 16		sta ($16),y			sta (tmp2),y
.92ef	b5 4d		lda $4d,x			lda FSExp,x
.92f1	05 19		ora $19				ora tmp3+1		;  insert sign
.92f3	88		dey				dey			; +0 IEEE
.92f4	91 16		sta ($16),y			sta (tmp2),y
.92f6	e6 4c		inc $4c				inc FIndex		; FDrop
.92f8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CodeLen	.var *-XtPtr1
=$92fa					Here1 = *	; remember here
>92b4	44					.byte CodeLen	;patch wh_CodeLength
.92fa	60		rts				rts
>92fb	53 46 6c 6f 61 74 2b		Name0:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9302	67					.byte (("SFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9303	10					.byte WordFlags	;wh_Flags
>9304	03					.byte 3	;wh_CodeLength
>9305	50					  .byte LinkDisplacement	; offset to previous nt
=$9306					XtPtr1 ::= *
=37506					WordListLink ::= Nt0 ; remember the nt of this word for later
.9306	a9 04		lda #$04	SFloatPlus:	lda #4
.9308	4c 29 ca	jmp $ca29			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$930b					Here1 = *	; remember here
>9304	05					.byte CodeLen	;patch wh_CodeLength
>930b	53 46 6c 6f 61 74 73		Name0:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37522					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9312	67					.byte (("SFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9313	10					.byte WordFlags	;wh_Flags
>9314	03					.byte 3	;wh_CodeLength
>9315	10					  .byte LinkDisplacement	; offset to previous nt
=$9316					XtPtr1 ::= *
=37522					WordListLink ::= Nt0 ; remember the nt of this word for later
.9316	a9 02		lda #$02	SFloats:	lda #2
.9318	4c 5f cb	jmp $cb5f			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$931b					Here1 = *	; remember here
>9314	05					.byte CodeLen	;patch wh_CodeLength
>931b	44 46 21			Name0:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>931e	23					.byte (("DF!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>931f	10					.byte WordFlags	;wh_Flags
>9320	03					.byte 3	;wh_CodeLength
>9321	0c					  .byte LinkDisplacement	; offset to previous nt
=$9322					XtPtr1 ::= *
=37534					WordListLink ::= Nt0 ; remember the nt of this word for later
.9322	20 07 b4	jsr $b407	DFStore:	jsr PopYA		; pop df_addr
.9325	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9327	84 17		sty $17				sty tmp2+1
.9329	a4 4c		ldy $4c				ldy FIndex		; negative?
.932b	b9 57 00	lda $0057,y			lda FSMant0,y
.932e	29 80		and #$80			and #$80		; remember sign
.9330	85 19		sta $19				sta tmp3+1
.9332	10 03		bpl $9337			bpl +			; make positive
.9334	20 8a 8b	jsr $8b8a			jsr FNegate
.9337					+
.9337	86 14		stx $14				stx tmp1+0		; save data stack index
.9339	a6 4c		ldx $4c				ldx FIndex
.933b	a9 00		lda #$00			lda #0
.933d	a0 07		ldy #$07			ldy #7			; +7 IEEE
.933f	91 16		sta ($16),y			sta (tmp2),y
.9341	88		dey				dey			; +6 IEEE
.9342	91 16		sta ($16),y			sta (tmp2),y
.9344	20 8c 93	jsr $938c			jsr _shift		; shift mantissa
.9347	20 8c 93	jsr $938c			jsr _shift
.934a	88		dey				dey			; +5 IEEE
.934b	91 16		sta ($16),y			sta (tmp2),y
.934d	b5 75		lda $75,x			lda FSMant3,x
.934f	88		dey				dey			; +4 IEEE
.9350	91 16		sta ($16),y			sta (tmp2),y
.9352	b5 6b		lda $6b,x			lda FSMant2,x
.9354	88		dey				dey			; +3 IEEE
.9355	91 16		sta ($16),y			sta (tmp2),y
.9357	b5 61		lda $61,x			lda FSMant1,x
.9359	88		dey				dey			; +2 IEEE
.935a	91 16		sta ($16),y			sta (tmp2),y
.935c	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.935e	29 0f		and #$0f			and #$f
.9360	95 57		sta $57,x			sta FSMant0,x
.9362	b5 4d		lda $4d,x			lda FSExp,x
.9364	38		sec				sec
.9365	e9 02		sbc #$02			sbc #2
.9367	95 4d		sta $4d,x			sta FSExp,x
.9369	0a		asl a				asl a
.936a	0a		asl a				asl a
.936b	0a		asl a				asl a
.936c	0a		asl a				asl a
.936d	15 57		ora $57,x			ora FSMant0,x
.936f	88		dey				dey			; +1 IEEE
.9370	91 16		sta ($16),y			sta (tmp2),y
.9372	b5 4d		lda $4d,x			lda FSExp,x
.9374	08		php				php
.9375	4a		lsr a				lsr a
.9376	4a		lsr a				lsr a
.9377	4a		lsr a				lsr a
.9378	4a		lsr a				lsr a
.9379	18		clc				clc
.937a	69 30		adc #$30			adc #$30
.937c	28		plp				plp
.937d	30 03		bmi $9382			bmi +
.937f	18		clc				clc
.9380	69 10		adc #$10			adc #$10
.9382	05 19		ora $19		+		ora tmp3+1		; add sign bit
.9384	88		dey				dey			; +0 IEEE
.9385	91 16		sta ($16),y			sta (tmp2),y
.9387	e6 4c		inc $4c				inc FIndex		; FDrop
.9389	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.938b	60		rts				rts
.938c	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.938e	76 61		ror $61,x			ror FSMant1,x
.9390	76 6b		ror $6b,x			ror FSMant2,x
.9392	76 75		ror $75,x			ror FSMant3,x
.9394	6a		ror a				ror a
=115					CodeLen	.var *-XtPtr1
=$9395					Here1 = *	; remember here
>9320	73					.byte CodeLen	;patch wh_CodeLength
.9395	60		rts				rts
>9396	44 46 40			Name0:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9399	03					.byte (("DF@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>939a	10					.byte WordFlags	;wh_Flags
>939b	03					.byte 3	;wh_CodeLength
>939c	7b					  .byte LinkDisplacement	; offset to previous nt
=$939d					XtPtr1 ::= *
=37657					WordListLink ::= Nt0 ; remember the nt of this word for later
.939d	20 07 b4	jsr $b407	DFAt:		jsr PopYA		; pop df_addr
.93a0	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93a2	84 17		sty $17				sty tmp2+1
.93a4	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.93a7	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a9	b1 16		lda ($16),y			lda (tmp2),y
.93ab	95 4d		sta $4d,x			sta FSExp,x
.93ad	c8		iny				iny			; +1 IEEE byte
.93ae	b1 16		lda ($16),y			lda (tmp2),y
.93b0	95 57		sta $57,x			sta FSMant0,x
.93b2	c8		iny				iny			; +2 IEEE byte
.93b3	b1 16		lda ($16),y			lda (tmp2),y
.93b5	95 61		sta $61,x			sta FSMant1,x
.93b7	c8		iny				iny			; +3 IEEE byte
.93b8	b1 16		lda ($16),y			lda (tmp2),y
.93ba	95 6b		sta $6b,x			sta FSMant2,x
.93bc	c8		iny				iny			; +4 IEEE byte
.93bd	b1 16		lda ($16),y			lda (tmp2),y
.93bf	95 75		sta $75,x			sta FSMant3,x
.93c1	c8		iny				iny			; +5 IEEE byte
.93c2	b1 16		lda ($16),y			lda (tmp2),y
.93c4	20 ed 93	jsr $93ed			jsr _shifta		; shift exponent & mantissa bits into place
.93c7	20 ed 93	jsr $93ed			jsr _shifta
.93ca	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93cc	0a		asl a				asl a
.93cd	36 4d		rol $4d,x			rol FSExp,x
.93cf	0a		asl a				asl a
.93d0	36 4d		rol $4d,x			rol FSExp,x
.93d2	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93d4	18		clc				clc
.93d5	69 02		adc #$02			adc #2
.93d7	95 4d		sta $4d,x			sta FSExp,x
.93d9	b5 57		lda $57,x			lda FSMant0,x
.93db	29 7f		and #$7f			and #$7f
.93dd	09 40		ora #$40			ora #$40		;   insert implied 1
.93df	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93e1	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93e3	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93e5	b1 16		lda ($16),y			lda (tmp2),y
.93e7	10 03		bpl $93ec			bpl +
.93e9	20 8a 8b	jsr $8b8a			jsr FNegate
.93ec					+
.93ec	60		rts				rts
.93ed	0a		asl a		_shifta:	asl a
.93ee	36 75		rol $75,x			rol FSMant3,x
.93f0	36 6b		rol $6b,x			rol FSMant2,x
.93f2	36 61		rol $61,x			rol FSMant1,x
.93f4	36 57		rol $57,x			rol FSMant0,x
.93f6	36 4d		rol $4d,x			rol FSExp,x
.93f8	60		rts				rts
=92					CodeLen	.var *-XtPtr1
=$93f9					Here1 = *	; remember here
>939b	5c					.byte CodeLen	;patch wh_CodeLength
>93f9	44 46 6c 6f 61 74 2b		Name0:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9400	67					.byte (("DFloat+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>9401	10					.byte WordFlags	;wh_Flags
>9402	03					.byte 3	;wh_CodeLength
>9403	67					  .byte LinkDisplacement	; offset to previous nt
=$9404					XtPtr1 ::= *
=37760					WordListLink ::= Nt0 ; remember the nt of this word for later
.9404	a9 08		lda #$08	DFloatPlus:	lda #8
.9406	4c 29 ca	jmp $ca29			jmp Plus_A
=5					CodeLen	.var *-XtPtr1
=$9409					Here1 = *	; remember here
>9402	05					.byte CodeLen	;patch wh_CodeLength
>9409	44 46 6c 6f 61 74 73		Name0:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=37776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9410	67					.byte (("DFloats"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9411	10					.byte WordFlags	;wh_Flags
>9412	03					.byte 3	;wh_CodeLength
>9413	10					  .byte LinkDisplacement	; offset to previous nt
=$9414					XtPtr1 ::= *
=37776					WordListLink ::= Nt0 ; remember the nt of this word for later
.9414	a9 03		lda #$03	DFloats:	lda #3
.9416	4c 5f cb	jmp $cb5f			jmp LShift_A
=5					CodeLen	.var *-XtPtr1
=$9419					Here1 = *	; remember here
>9412	05					.byte CodeLen	;patch wh_CodeLength
>9419	46 4d 50 6f 6c 79		Name0:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=37791					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>941f	26					.byte (("FMPoly"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9420	10					.byte WordFlags	;wh_Flags
>9421	03					.byte 3	;wh_CodeLength
>9422	0f					  .byte LinkDisplacement	; offset to previous nt
=$9423					XtPtr1 ::= *
=37791					WordListLink ::= Nt0 ; remember the nt of this word for later
.9423	20 07 b4	jsr $b407	FMPoly:		jsr PopYA
.9426	20 c6 b7	jsr $b7c6	FMPolyYA:	jsr PushYA		; push coefficent addr
.9429	20 4f 86	jsr $864f			jsr FAt_YA		; fetch 1st coefficent
.942c	4c 3f 94	jmp $943f			jmp _4
.942f	20 70 85	jsr $8570	_2:		jsr FOver
.9432	20 e3 8b	jsr $8be3			jsr FStar
.9435	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9437	b4 25		ldy $25,x			ldy DStack+1,x
.9439	20 4f 86	jsr $864f			jsr FAt_YA
.943c	20 15 8b	jsr $8b15			jsr FPlus
.943f	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.9441	20 29 ca	jsr $ca29			jsr Plus_A
.9444	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.9446	d0 e7		bne $942f			bne _2
.9448	e8		inx				inx			; Drop coefficent ptr
.9449	e8		inx				inx
=39					CodeLen	.var *-XtPtr1
=$944a					Here1 = *	; remember here
>9421	27					.byte CodeLen	;patch wh_CodeLength
.944a	60		rts				rts
>944b	46 4c 6f 67 32 4d 31 4d		Name0:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=37843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9453	a8					.byte (("FLog2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>9454	10					.byte WordFlags	;wh_Flags
>9455	03					.byte 3	;wh_CodeLength
>9456	34					  .byte LinkDisplacement	; offset to previous nt
=$9457					XtPtr1 ::= *
=37843					WordListLink ::= Nt0 ; remember the nt of this word for later
.9457	a9 61		lda #$61	FLog2M1M:	lda #<_c
.9459	a0 94		ldy #$94			ldy #>_c
.945b	20 26 94	jsr $9426			jsr FMPolyYA
.945e	4c e3 8b	jmp $8be3			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9461					Here1 = *	; remember here
>9455	0a					.byte CodeLen	;patch wh_CodeLength
.9461					_c:
>9461	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9465	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9466	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946a	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>946b	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9470	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9474	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9475	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9479	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>947a	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>947f	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9483	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9484	00 00						.word 0
>9486	46 4c 6f 67 32			Name0:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37899					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>948b	45					.byte (("FLog2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>948c	10					.byte WordFlags	;wh_Flags
>948d	03					.byte 3	;wh_CodeLength
>948e	38					  .byte LinkDisplacement	; offset to previous nt
=$948f					XtPtr1 ::= *
=37899					WordListLink ::= Nt0 ; remember the nt of this word for later
.948f	a4 4c		ldy $4c		FLog2:		ldy FIndex
.9491	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9494	30 20		bmi $94b6			bmi _OutOfRange
.9496	f0 1e		beq $94b6			beq _OutOfRange
.9498	b9 4d 00	lda $004d,y			lda FSExp,y
.949b	48		pha				pha		; remember orig exponent
.949c	a9 01		lda #$01			lda #1
.949e	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.94a1	20 79 8b	jsr $8b79			jsr F1Minus
.94a4	20 57 94	jsr $9457			jsr FLog2M1M
.94a7	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a9	68		pla				pla
.94aa	38		sec				sec
.94ab	e9 01		sbc #$01			sbc #1
.94ad	10 01		bpl $94b0			bpl +
.94af	88		dey				dey
.94b0					+
.94b0	20 30 8e	jsr $8e30			jsr SToFYA
.94b3	4c 15 8b	jmp $8b15			jmp FPlus
.94b6	4c 67 b4	jmp $b467	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CodeLen	.var *-XtPtr1
=$94b9					Here1 = *	; remember here
>948d	2a					.byte CodeLen	;patch wh_CodeLength
>94b9	46 4c 6e			Name0:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=37948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94bc	c3					.byte (("FLn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94bd	10					.byte WordFlags	;wh_Flags
>94be	03					.byte 3	;wh_CodeLength
>94bf	31					  .byte LinkDisplacement	; offset to previous nt
=$94c0					XtPtr1 ::= *
=37948					WordListLink ::= Nt0 ; remember the nt of this word for later
.94c0	20 8f 94	jsr $948f	FLn:		jsr FLog2
.94c3	20 48 88	jsr $8848			jsr FLitI
>94c6	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ca	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94cb	4c e3 8b	jmp $8be3			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94ce					Here1 = *	; remember here
>94be	0e					.byte CodeLen	;patch wh_CodeLength
>94ce	46 4c 6e 50 31			Name0:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=37971					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94d3	25					.byte (("FLnP1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94d4	10					.byte WordFlags	;wh_Flags
>94d5	03					.byte 3	;wh_CodeLength
>94d6	17					  .byte LinkDisplacement	; offset to previous nt
=$94d7					XtPtr1 ::= *
=37971					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d7	20 49 8b	jsr $8b49	FlnP1:		jsr F1Plus
.94da	4c c0 94	jmp $94c0			jmp FLn
=6					CodeLen	.var *-XtPtr1
=$94dd					Here1 = *	; remember here
>94d5	06					.byte CodeLen	;patch wh_CodeLength
>94dd	46 4c 6f 67			Name0:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=37985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94e1	e4					.byte (("FLog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94e2	10					.byte WordFlags	;wh_Flags
>94e3	03					.byte 3	;wh_CodeLength
>94e4	0e					  .byte LinkDisplacement	; offset to previous nt
=$94e5					XtPtr1 ::= *
=37985					WordListLink ::= Nt0 ; remember the nt of this word for later
.94e5	20 8f 94	jsr $948f	FLog:		jsr FLog2
.94e8	20 48 88	jsr $8848			jsr FLitI
>94eb	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ef	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94f0	4c e3 8b	jmp $8be3			jmp FStar
=14					CodeLen	.var *-XtPtr1
=$94f3					Here1 = *	; remember here
>94e3	0e					.byte CodeLen	;patch wh_CodeLength
>94f3	46 45 78 70 32 4d 31 4d		Name0:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94fb	a8					.byte (("FExp2M1M"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94fc	10					.byte WordFlags	;wh_Flags
>94fd	03					.byte 3	;wh_CodeLength
>94fe	1a					  .byte LinkDisplacement	; offset to previous nt
=$94ff					XtPtr1 ::= *
=38011					WordListLink ::= Nt0 ; remember the nt of this word for later
.94ff	a9 09		lda #$09	FExp2M1M:	lda #<_c
.9501	a0 95		ldy #$95			ldy #>_c
.9503	20 26 94	jsr $9426			jsr FMPolyYA
.9506	4c e3 8b	jmp $8be3			jmp FStar
=10					CodeLen	.var *-XtPtr1
=$9509					Here1 = *	; remember here
>94fd	0a					.byte CodeLen	;patch wh_CodeLength
.9509					_c:
>9509	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950d	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>950e	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9512	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9513	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9517	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9518	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>951d	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9521	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9522	00						.byte 0
>9523	46 45 78 70 32			Name0:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38056					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9528	45					.byte (("FExp2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9529	10					.byte WordFlags	;wh_Flags
>952a	03					.byte 3	;wh_CodeLength
>952b	2d					  .byte LinkDisplacement	; offset to previous nt
=$952c					XtPtr1 ::= *
=38056					WordListLink ::= Nt0 ; remember the nt of this word for later
.952c	20 45 8a	jsr $8a45	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.952f	20 78 8e	jsr $8e78			jsr FToS
.9532	20 ff 94	jsr $94ff			jsr FExp2M1M
.9535	20 49 8b	jsr $8b49			jsr F1Plus
.9538	20 ec b3	jsr $b3ec			jsr PopA
.953b	a4 4c		ldy $4c				ldy FIndex
.953d	18		clc				clc
.953e	79 4d 00	adc $004d,y			adc FSExp,y
.9541	99 4d 00	sta $004d,y			sta FSExp,y
=24					CodeLen	.var *-XtPtr1
=$9544					Here1 = *	; remember here
>952a	18					.byte CodeLen	;patch wh_CodeLength
.9544	60		rts				rts
>9545	46 45 78 70			Name0:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38089					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9549	04					.byte (("FExp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>954a	10					.byte WordFlags	;wh_Flags
>954b	03					.byte 3	;wh_CodeLength
>954c	21					  .byte LinkDisplacement	; offset to previous nt
=$954d					XtPtr1 ::= *
=38089					WordListLink ::= Nt0 ; remember the nt of this word for later
.954d					FExp:
.954d	20 48 88	jsr $8848			jsr FLitI
>9550	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9554	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.9555	20 e3 8b	jsr $8be3			jsr FStar
.9558	4c 2c 95	jmp $952c			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$955b					Here1 = *	; remember here
>954b	0e					.byte CodeLen	;patch wh_CodeLength
>955b	46 45 78 70 4d 31		Name0:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38113					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9561	26					.byte (("FExpM1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>9562	10					.byte WordFlags	;wh_Flags
>9563	03					.byte 3	;wh_CodeLength
>9564	18					  .byte LinkDisplacement	; offset to previous nt
=$9565					XtPtr1 ::= *
=38113					WordListLink ::= Nt0 ; remember the nt of this word for later
.9565	20 4d 95	jsr $954d	FExpM1:		jsr FExp
.9568	4c 79 8b	jmp $8b79			jmp F1Minus
=6					CodeLen	.var *-XtPtr1
=$956b					Here1 = *	; remember here
>9563	06					.byte CodeLen	;patch wh_CodeLength
>956b	46 41 4c 6f 67			Name0:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9570	e5					.byte (("FALog"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9571	10					.byte WordFlags	;wh_Flags
>9572	03					.byte 3	;wh_CodeLength
>9573	0f					  .byte LinkDisplacement	; offset to previous nt
=$9574					XtPtr1 ::= *
=38128					WordListLink ::= Nt0 ; remember the nt of this word for later
.9574					FALog:
.9574	20 48 88	jsr $8848			jsr FLitI
>9577	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>957b	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.957c	20 e3 8b	jsr $8be3			jsr FStar
.957f	4c 2c 95	jmp $952c			jmp FExp2
=14					CodeLen	.var *-XtPtr1
=$9582					Here1 = *	; remember here
>9572	0e					.byte CodeLen	;patch wh_CodeLength
>9582	46 2a 2a			Name0:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=38149					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9585	43					.byte (("F**"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>9586	10					.byte WordFlags	;wh_Flags
>9587	03					.byte 3	;wh_CodeLength
>9588	15					  .byte LinkDisplacement	; offset to previous nt
=$9589					XtPtr1 ::= *
=38149					WordListLink ::= Nt0 ; remember the nt of this word for later
.9589	20 d1 85	jsr $85d1	FPower:		jsr FSwap
.958c	20 8f 94	jsr $948f			jsr FLog2
.958f	20 e3 8b	jsr $8be3			jsr FStar
.9592	4c 2c 95	jmp $952c			jmp FExp2
=12					CodeLen	.var *-XtPtr1
=$9595					Here1 = *	; remember here
>9587	0c					.byte CodeLen	;patch wh_CodeLength
>9595	44 65 67 32 52 61 64		Name0:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38172					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>959c	87					.byte (("Deg2Rad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>959d	10					.byte WordFlags	;wh_Flags
>959e	03					.byte 3	;wh_CodeLength
>959f	17					  .byte LinkDisplacement	; offset to previous nt
=$95a0					XtPtr1 ::= *
=38172					WordListLink ::= Nt0 ; remember the nt of this word for later
.95a0					Deg2Rad:
.95a0	20 48 88	jsr $8848			jsr FLitI
>95a3	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a7	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a8	4c e3 8b	jmp $8be3			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95ab					Here1 = *	; remember here
>959e	0b					.byte CodeLen	;patch wh_CodeLength
>95ab	52 61 64 32 44 65 67		Name0:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95b2	e7					.byte (("Rad2Deg"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95b3	10					.byte WordFlags	;wh_Flags
>95b4	03					.byte 3	;wh_CodeLength
>95b5	16					  .byte LinkDisplacement	; offset to previous nt
=$95b6					XtPtr1 ::= *
=38194					WordListLink ::= Nt0 ; remember the nt of this word for later
.95b6					Rad2Deg:
.95b6	20 48 88	jsr $8848			jsr FLitI
>95b9	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95bd	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95be	4c e3 8b	jmp $8be3			jmp FStar
=11					CodeLen	.var *-XtPtr1
=$95c1					Here1 = *	; remember here
>95b4	0b					.byte CodeLen	;patch wh_CodeLength
>95c1	46 41 52 65 64 75 63 65		Name0:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=38217					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c9	a8					.byte (("FAReduce"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95ca	10					.byte WordFlags	;wh_Flags
>95cb	03					.byte 3	;wh_CodeLength
>95cc	17					  .byte LinkDisplacement	; offset to previous nt
=$95cd					XtPtr1 ::= *
=38217					WordListLink ::= Nt0 ; remember the nt of this word for later
.95cd	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95cf	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95d2	f0 2f		beq $9603			beq _ok
.95d4	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d7	30 2a		bmi $9603			bmi _ok			; small?
.95d9	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95db	30 26		bmi $9603			bmi _ok			;if exponent <=0
.95dd	f0 24		beq $9603			beq _ok
.95df	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95e1	b0 22		bcs $9605			bcs _exp2
.95e3	b9 57 00	lda $0057,y			lda FSMant0,y
.95e6	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e8	90 19		bcc $9603			bcc _ok
.95ea	c9 9b		cmp #$9b			cmp #$100-$65
.95ec	b0 15		bcs $9603			bcs _ok
.95ee					_mir:
.95ee	20 fe 88	jsr $88fe			jsr FPi
.95f1	a4 4c		ldy $4c				ldy FIndex
.95f3	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95f6	10 03		bpl $95fb			bpl _3
.95f8	20 8a 8b	jsr $8b8a			jsr FNegate
.95fb	20 d1 85	jsr $85d1	_3:		jsr FSwap
.95fe	20 55 8b	jsr $8b55			jsr FMinus
.9601	38		sec				sec		; mirrored
.9602	60		rts				rts
.9603	18		clc		_ok:		clc		; not mirrored
.9604	60		rts				rts
.9605	d0 0b		bne $9612	_exp2:		bne _rot	;if exp>2 then fix
.9607	b9 57 00	lda $0057,y			lda FSMant0,y
.960a	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.960c	90 e0		bcc $95ee			bcc _mir
.960e	c9 9b		cmp #$9b			cmp #$100-$65
.9610	b0 dc		bcs $95ee			bcs _mir
.9612	20 2d 89	jsr $892d	_rot:		jsr F2Pi
.9615	20 9e 8c	jsr $8c9e			jsr FSlash
.9618	20 45 8a	jsr $8a45			jsr FIntFrc
.961b	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.961d	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.961f	b9 4d 00	lda $004d,y			lda FSExp,y
.9622	a8		tay				tay
.9623	30 03		bmi $9628			bmi _rot4
.9625	20 79 8b	jsr $8b79			jsr F1Minus	;  subtract 1
.9628	20 2d 89	jsr $892d	_rot4:		jsr F2Pi
.962b	20 e3 8b	jsr $8be3			jsr FStar
.962e	4c cd 95	jmp $95cd			jmp FAReduce	; rotate done, look again
=100					CodeLen	.var *-XtPtr1
=$9631					Here1 = *	; remember here
>95cb	64					.byte CodeLen	;patch wh_CodeLength
>9631	46 53 69 6e			Name0:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38325					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9635	c4					.byte (("FSin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>9636	10					.byte WordFlags	;wh_Flags
>9637	03					.byte 3	;wh_CodeLength
>9638	6c					  .byte LinkDisplacement	; offset to previous nt
=$9639					XtPtr1 ::= *
=38325					WordListLink ::= Nt0 ; remember the nt of this word for later
.9639	20 cd 95	jsr $95cd	FSin:		jsr FAReduce
.963c	4c 3f 96	jmp $963f			jmp FSinM
=6					CodeLen	.var *-XtPtr1
=$963f					Here1 = *	; remember here
>9637	06					.byte CodeLen	;patch wh_CodeLength
.963f	20 4d 85	jsr $854d	FSinM:		jsr FDup
.9642	20 73 8c	jsr $8c73			jsr FSqr	; x x^2
.9645	a9 55		lda #$55			lda #<_c
.9647	a0 96		ldy #$96			ldy #>_c
.9649	20 26 94	jsr $9426			jsr FMPolyYA
.964c	20 e3 8b	jsr $8be3			jsr FStar
.964f	20 49 8b	jsr $8b49			jsr F1Plus	; C0 +1.0
.9652	4c e3 8b	jmp $8be3			jmp FStar
.9655					_c:
>9655	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9659	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>965a	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965e	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>965f	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9663	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9664	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9668	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9669	00						.byte 0
>966a	46 43 73 63			Name0:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38382					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>966e	64					.byte (("FCsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>966f	10					.byte WordFlags	;wh_Flags
>9670	03					.byte 3	;wh_CodeLength
>9671	39					  .byte LinkDisplacement	; offset to previous nt
=$9672					XtPtr1 ::= *
=38382					WordListLink ::= Nt0 ; remember the nt of this word for later
.9672	20 39 96	jsr $9639	FCsc:		jsr FSin
.9675	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/SIN(r1)
=6					CodeLen	.var *-XtPtr1
=$9678					Here1 = *	; remember here
>9670	06					.byte CodeLen	;patch wh_CodeLength
>9678	46 43 6f 73			Name0:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>967c	64					.byte (("FCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>967d	10					.byte WordFlags	;wh_Flags
>967e	03					.byte 3	;wh_CodeLength
>967f	0e					  .byte LinkDisplacement	; offset to previous nt
=$9680					XtPtr1 ::= *
=38396					WordListLink ::= Nt0 ; remember the nt of this word for later
.9680	20 0e 89	jsr $890e	FCos:		jsr FPiH
.9683	20 15 8b	jsr $8b15			jsr FPlus
.9686	4c 39 96	jmp $9639			jmp FSin
=9					CodeLen	.var *-XtPtr1
=$9689					Here1 = *	; remember here
>967e	09					.byte CodeLen	;patch wh_CodeLength
>9689	46 53 65 63			Name0:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38413					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>968d	64					.byte (("FSec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>968e	10					.byte WordFlags	;wh_Flags
>968f	03					.byte 3	;wh_CodeLength
>9690	11					  .byte LinkDisplacement	; offset to previous nt
=$9691					XtPtr1 ::= *
=38413					WordListLink ::= Nt0 ; remember the nt of this word for later
.9691	20 80 96	jsr $9680	FSec:		jsr FCos
.9694	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/COS(r1)
=6					CodeLen	.var *-XtPtr1
=$9697					Here1 = *	; remember here
>968f	06					.byte CodeLen	;patch wh_CodeLength
>9697	46 53 69 6e 43 6f 73		Name0:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=38430					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>969e	67					.byte (("FSinCos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>969f	10					.byte WordFlags	;wh_Flags
>96a0	03					.byte 3	;wh_CodeLength
>96a1	11					  .byte LinkDisplacement	; offset to previous nt
=$96a2					XtPtr1 ::= *
=38430					WordListLink ::= Nt0 ; remember the nt of this word for later
.96a2	20 4d 85	jsr $854d	FSinCos:	jsr FDup
.96a5	20 39 96	jsr $9639			jsr FSin
.96a8	20 d1 85	jsr $85d1			jsr FSwap
.96ab	4c 80 96	jmp $9680			jmp FCos
=12					CodeLen	.var *-XtPtr1
=$96ae					Here1 = *	; remember here
>96a0	0c					.byte CodeLen	;patch wh_CodeLength
>96ae	46 54 61 6e			Name0:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38450					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96b2	c4					.byte (("FTan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96b3	10					.byte WordFlags	;wh_Flags
>96b4	03					.byte 3	;wh_CodeLength
>96b5	14					  .byte LinkDisplacement	; offset to previous nt
=$96b6					XtPtr1 ::= *
=38450					WordListLink ::= Nt0 ; remember the nt of this word for later
.96b6	20 cd 95	jsr $95cd	FTan:		jsr FAReduce
.96b9	90 06		bcc $96c1			bcc _30
.96bb	20 c1 96	jsr $96c1			jsr _30
.96be	4c 8a 8b	jmp $8b8a			jmp FNegate
.96c1					_30:
.96c1	20 4d 85	jsr $854d			jsr FDup
.96c4	20 b0 8b	jsr $8bb0			jsr FAbs
.96c7	20 1e 89	jsr $891e			jsr FPiQ
.96ca	20 68 87	jsr $8768			jsr FLe
.96cd	e8		inx				inx			; pop f
.96ce	e8		inx				inx
.96cf	b5 24		lda $24,x			lda DStack+0,x
.96d1	d0 19		bne $96ec			bne FTanM
.96d3	20 0e 89	jsr $890e			jsr FPiH
.96d6	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d8	b9 57 00	lda $0057,y			lda FSMant0,y
.96db	10 03		bpl $96e0			bpl +
.96dd	20 8a 8b	jsr $8b8a			jsr FNegate
.96e0					+
.96e0	20 d1 85	jsr $85d1			jsr FSwap
.96e3	20 55 8b	jsr $8b55			jsr FMinus
.96e6	20 ec 96	jsr $96ec			jsr FTanM
.96e9	4c 42 8d	jmp $8d42			jmp F1Slash
=54					CodeLen	.var *-XtPtr1
=$96ec					Here1 = *	; remember here
>96b4	36					.byte CodeLen	;patch wh_CodeLength
.96ec	20 4d 85	jsr $854d	FTanM:		jsr FDup
.96ef	20 73 8c	jsr $8c73			jsr FSqr		; x x^2
.96f2	a9 02		lda #$02			lda #<_c
.96f4	a0 97		ldy #$97			ldy #>_c
.96f6	20 26 94	jsr $9426			jsr FMPolyYA
.96f9	20 e3 8b	jsr $8be3			jsr FStar
.96fc	20 49 8b	jsr $8b49			jsr F1Plus		; c0 1.0
.96ff	4c e3 8b	jmp $8be3			jmp FStar
.9702					_c:
>9702	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9706	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9707	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970b	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>970c	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9710	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9711	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9715	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9716	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>971a	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>971b	00						.byte 0
>971c	46 43 6f 74			Name0:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9720	84					.byte (("FCot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>9721	10					.byte WordFlags	;wh_Flags
>9722	03					.byte 3	;wh_CodeLength
>9723	6e					  .byte LinkDisplacement	; offset to previous nt
=$9724					XtPtr1 ::= *
=38560					WordListLink ::= Nt0 ; remember the nt of this word for later
.9724	20 b6 96	jsr $96b6	FCot:		jsr FTan
.9727	4c 42 8d	jmp $8d42			jmp F1Slash	; =1/TAN(r1)
=6					CodeLen	.var *-XtPtr1
=$972a					Here1 = *	; remember here
>9722	06					.byte CodeLen	;patch wh_CodeLength
>972a	46 41 43 6f 73			Name0:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>972f	65					.byte (("FACos"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9730	10					.byte WordFlags	;wh_Flags
>9731	03					.byte 3	;wh_CodeLength
>9732	0f					  .byte LinkDisplacement	; offset to previous nt
=$9733					XtPtr1 ::= *
=38575					WordListLink ::= Nt0 ; remember the nt of this word for later
.9733	a4 4c		ldy $4c		FACos:		ldy FIndex
.9735	b9 57 00	lda $0057,y			lda FSMant0,y
.9738	08		php				php			; save sign
.9739	20 b0 8b	jsr $8bb0			jsr FAbs
.973c	a9 5f		lda #$5f			lda #<_c
.973e	a0 97		ldy #$97			ldy #>_c
.9740	20 26 94	jsr $9426			jsr FMPolyYA
.9743	20 d1 85	jsr $85d1			jsr FSwap
.9746	20 8a 8b	jsr $8b8a			jsr FNegate
.9749	20 49 8b	jsr $8b49			jsr F1Plus
.974c	20 1e 8f	jsr $8f1e			jsr FSqrt
.974f	20 e3 8b	jsr $8be3			jsr FStar
.9752	28		plp				plp			; was r1 negative?
.9753	10 09		bpl $975e			bpl +
.9755	20 fe 88	jsr $88fe			jsr FPi
.9758	20 d1 85	jsr $85d1			jsr FSwap
.975b	20 55 8b	jsr $8b55			jsr FMinus
.975e					+
=43					CodeLen	.var *-XtPtr1
=$975e					Here1 = *	; remember here
>9731	2b					.byte CodeLen	;patch wh_CodeLength
.975e	60		rts				rts
.975f					_c:
>975f	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9763	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>9764	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9768	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9769	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976d	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>976e	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9772	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9773	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9777	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9778	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977c	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>977d	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9781	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9782	00						.byte 0
>9783	46 41 53 65 63			Name0:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38664					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9788	65					.byte (("FASec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9789	10					.byte WordFlags	;wh_Flags
>978a	03					.byte 3	;wh_CodeLength
>978b	59					  .byte LinkDisplacement	; offset to previous nt
=$978c					XtPtr1 ::= *
=38664					WordListLink ::= Nt0 ; remember the nt of this word for later
.978c	20 42 8d	jsr $8d42	FASec:		jsr F1Slash
.978f	4c 33 97	jmp $9733			jmp FACos
=6					CodeLen	.var *-XtPtr1
=$9792					Here1 = *	; remember here
>978a	06					.byte CodeLen	;patch wh_CodeLength
>9792	46 41 53 69 6e			Name0:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9797	c5					.byte (("FASin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9798	10					.byte WordFlags	;wh_Flags
>9799	03					.byte 3	;wh_CodeLength
>979a	0f					  .byte LinkDisplacement	; offset to previous nt
=$979b					XtPtr1 ::= *
=38679					WordListLink ::= Nt0 ; remember the nt of this word for later
.979b	20 33 97	jsr $9733	FASin:		jsr FACos
.979e	20 8a 8b	jsr $8b8a			jsr FNegate
.97a1	20 0e 89	jsr $890e			jsr FPiH
.97a4	4c 15 8b	jmp $8b15			jmp FPlus
=12					CodeLen	.var *-XtPtr1
=$97a7					Here1 = *	; remember here
>9799	0c					.byte CodeLen	;patch wh_CodeLength
>97a7	46 41 43 73 63			Name0:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38700					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97ac	65					.byte (("FACsc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97ad	10					.byte WordFlags	;wh_Flags
>97ae	03					.byte 3	;wh_CodeLength
>97af	15					  .byte LinkDisplacement	; offset to previous nt
=$97b0					XtPtr1 ::= *
=38700					WordListLink ::= Nt0 ; remember the nt of this word for later
.97b0	20 42 8d	jsr $8d42	FACsc:		jsr F1Slash
.97b3	4c 9b 97	jmp $979b			jmp FASin
=6					CodeLen	.var *-XtPtr1
=$97b6					Here1 = *	; remember here
>97ae	06					.byte CodeLen	;patch wh_CodeLength
>97b6	46 41 54 61 6e			Name0:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97bb	c5					.byte (("FATan"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97bc	10					.byte WordFlags	;wh_Flags
>97bd	03					.byte 3	;wh_CodeLength
>97be	0f					  .byte LinkDisplacement	; offset to previous nt
=$97bf					XtPtr1 ::= *
=38715					WordListLink ::= Nt0 ; remember the nt of this word for later
.97bf					FATan:
.97bf	a4 4c		ldy $4c				ldy FIndex
.97c1	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97c4	30 1b		bmi $97e1			bmi FATanM
.97c6	f0 19		beq $97e1			beq FATanM
.97c8	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97cb	08		php				php
.97cc	20 42 8d	jsr $8d42			jsr F1Slash
.97cf	20 e1 97	jsr $97e1			jsr FATanM
.97d2	20 8a 8b	jsr $8b8a			jsr FNegate
.97d5	20 0e 89	jsr $890e			jsr FPiH
.97d8	28		plp				plp
.97d9	10 03		bpl $97de			bpl _18
.97db	20 8a 8b	jsr $8b8a			jsr FNegate
.97de	4c 15 8b	jmp $8b15	_18:		jmp FPlus
.97e1	20 4d 85	jsr $854d	FATanM:		jsr FDup		; x x
.97e4	20 73 8c	jsr $8c73			jsr FSqr		; x xsqr
.97e7	a9 f7		lda #$f7			lda #<_c
.97e9	a0 97		ldy #$97			ldy #>_c
.97eb	20 26 94	jsr $9426			jsr FMPolyYA
.97ee	20 e3 8b	jsr $8be3			jsr FStar		; x poly
.97f1	20 49 8b	jsr $8b49			jsr F1Plus		; x poly
.97f4	4c e3 8b	jmp $8be3			jmp FStar
.97f7					_c:
>97f7	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fb	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97fc	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9800	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9801	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9805	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9806	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>980b	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980f	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9810	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9814	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9815	00						.byte 0
>9816	46 41 43 6f 74			Name0:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>981b	85					.byte (("FACot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>981c	10					.byte WordFlags	;wh_Flags
>981d	03					.byte 3	;wh_CodeLength
>981e	60					  .byte LinkDisplacement	; offset to previous nt
=$981f					XtPtr1 ::= *
=38811					WordListLink ::= Nt0 ; remember the nt of this word for later
.981f	20 42 8d	jsr $8d42	FACot:		jsr F1Slash
.9822	4c bf 97	jmp $97bf			jmp FATan
=6					CodeLen	.var *-XtPtr1
=$9825					Here1 = *	; remember here
>981d	06					.byte CodeLen	;patch wh_CodeLength
>9825	46 41 54 61 6e 32		Name0:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=38827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>982b	46					.byte (("FATan2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>982c	10					.byte WordFlags	;wh_Flags
>982d	03					.byte 3	;wh_CodeLength
>982e	10					  .byte LinkDisplacement	; offset to previous nt
=$982f					XtPtr1 ::= *
=38827					WordListLink ::= Nt0 ; remember the nt of this word for later
.982f	a4 4c		ldy $4c		FATan2:		ldy FIndex
.9831	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.9834	f0 1c		beq $9852			beq _rxzero
.9836	0a		asl a				asl a		;   C=rx sign
.9837	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.983a	08		php				php		; save signs
.983b	20 9e 8c	jsr $8c9e			jsr FSlash
.983e	20 bf 97	jsr $97bf			jsr FATan
.9841	28		plp				plp		; pop signs
.9842	b0 01		bcs $9845			bcs _rxneg
.9844	60		rts		_rts:		rts
.9845	08		php		_rxneg:		php
.9846	20 fe 88	jsr $88fe			jsr FPi
.9849	28		plp				plp
.984a	10 03		bpl $984f			bpl +
.984c	20 8a 8b	jsr $8b8a			jsr FNegate
.984f	4c 15 8b	jmp $8b15	+		jmp FPlus
.9852	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.9854	b9 57 00	lda $0057,y			lda FSMant0,y
.9857	08		php				php
.9858	e6 4c		inc $4c				inc FIndex	; FDrop ry
.985a	20 0e 89	jsr $890e			jsr FPiH
.985d	28		plp				plp
.985e	10 e4		bpl $9844			bpl _rts
.9860	4c 8a 8b	jmp $8b8a			jmp FNegate
=52					CodeLen	.var *-XtPtr1
=$9863					Here1 = *	; remember here
>982d	34					.byte CodeLen	;patch wh_CodeLength
>9863	46 53 67 6e			Name0:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=38887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9867	c4					.byte (("FSgn"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9868	10					.byte WordFlags	;wh_Flags
>9869	03					.byte 3	;wh_CodeLength
>986a	3c					  .byte LinkDisplacement	; offset to previous nt
=$986b					XtPtr1 ::= *
=38887					WordListLink ::= Nt0 ; remember the nt of this word for later
.986b	a4 4c		ldy $4c		FSgn:		ldy FIndex
.986d	b9 57 00	lda $0057,y			lda FSMant0,y
.9870	f0 0a		beq $987c			beq _zero
.9872	e6 4c		inc $4c				inc FIndex
.9874	b9 57 00	lda $0057,y			lda FSMant0,y
.9877	30 04		bmi $987d			bmi FM1
.9879	4c e3 88	jmp $88e3			jmp F1
.987c	60		rts		_zero:		rts
=18					CodeLen	.var *-XtPtr1
=$987d					Here1 = *	; remember here
>9869	12					.byte CodeLen	;patch wh_CodeLength
.987d	a9 80		lda #$80	FM1:		lda #$80
.987f	a0 00		ldy #$00			ldy #0
.9881	4c 92 88	jmp $8892			jmp FLitYA
>9884	46 53 69 6e 48			Name0:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9889	05					.byte (("FSinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>988a	10					.byte WordFlags	;wh_Flags
>988b	03					.byte 3	;wh_CodeLength
>988c	22					  .byte LinkDisplacement	; offset to previous nt
=$988d					XtPtr1 ::= *
=38921					WordListLink ::= Nt0 ; remember the nt of this word for later
.988d	20 4d 85	jsr $854d	FSinH:		jsr FDup
.9890	20 4d 95	jsr $954d			jsr FExp
.9893	20 d1 85	jsr $85d1			jsr FSwap
.9896	20 8a 8b	jsr $8b8a			jsr FNegate
.9899	20 4d 95	jsr $954d			jsr FExp
.989c	20 55 8b	jsr $8b55			jsr FMinus
.989f	4c 97 89	jmp $8997			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98a2					Here1 = *	; remember here
>988b	15					.byte CodeLen	;patch wh_CodeLength
>98a2	46 43 73 63 48			Name0:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a7	05					.byte (("FCscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a8	10					.byte WordFlags	;wh_Flags
>98a9	03					.byte 3	;wh_CodeLength
>98aa	1e					  .byte LinkDisplacement	; offset to previous nt
=$98ab					XtPtr1 ::= *
=38951					WordListLink ::= Nt0 ; remember the nt of this word for later
.98ab	20 8d 98	jsr $988d	FCscH:		jsr FSinH
.98ae	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98b1					Here1 = *	; remember here
>98a9	06					.byte CodeLen	;patch wh_CodeLength
>98b1	46 43 6f 73 48			Name0:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98b6	05					.byte (("FCosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b7	10					.byte WordFlags	;wh_Flags
>98b8	03					.byte 3	;wh_CodeLength
>98b9	0f					  .byte LinkDisplacement	; offset to previous nt
=$98ba					XtPtr1 ::= *
=38966					WordListLink ::= Nt0 ; remember the nt of this word for later
.98ba	20 4d 85	jsr $854d	FCosH:		jsr FDup
.98bd	20 4d 95	jsr $954d			jsr FExp
.98c0	20 d1 85	jsr $85d1			jsr FSwap
.98c3	20 8a 8b	jsr $8b8a			jsr FNegate
.98c6	20 4d 95	jsr $954d			jsr FExp
.98c9	20 15 8b	jsr $8b15			jsr FPlus
.98cc	4c 97 89	jmp $8997			jmp F2Slash
=21					CodeLen	.var *-XtPtr1
=$98cf					Here1 = *	; remember here
>98b8	15					.byte CodeLen	;patch wh_CodeLength
>98cf	46 53 65 63 48			Name0:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=38996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98d4	05					.byte (("FSecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98d5	10					.byte WordFlags	;wh_Flags
>98d6	03					.byte 3	;wh_CodeLength
>98d7	1e					  .byte LinkDisplacement	; offset to previous nt
=$98d8					XtPtr1 ::= *
=38996					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d8	20 ba 98	jsr $98ba	FSecH:		jsr FCosH
.98db	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$98de					Here1 = *	; remember here
>98d6	06					.byte CodeLen	;patch wh_CodeLength
>98de	46 54 61 6e 48			Name0:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39011					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98e3	05					.byte (("FTanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98e4	10					.byte WordFlags	;wh_Flags
>98e5	03					.byte 3	;wh_CodeLength
>98e6	0f					  .byte LinkDisplacement	; offset to previous nt
=$98e7					XtPtr1 ::= *
=39011					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e7	20 4d 85	jsr $854d	FTanH:		jsr FDup
.98ea	20 8a 8b	jsr $8b8a			jsr FNegate	; X -X
.98ed	20 4d 95	jsr $954d			jsr FExp	; X Exp(-X)
.98f0	20 d1 85	jsr $85d1			jsr FSwap	; Exp(-X) X
.98f3	20 4d 95	jsr $954d			jsr FExp	; Exp(-X) Exp(X)
.98f6	20 70 85	jsr $8570			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f9	20 15 8b	jsr $8b15			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98fc	20 9e 8c	jsr $8c9e			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98ff	20 8c 89	jsr $898c			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.9902	20 8a 8b	jsr $8b8a			jsr FNegate
.9905	4c 49 8b	jmp $8b49			jmp F1Plus
=33					CodeLen	.var *-XtPtr1
=$9908					Here1 = *	; remember here
>98e5	21					.byte CodeLen	;patch wh_CodeLength
>9908	46 43 6f 74 48			Name0:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=39053					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>990d	05					.byte (("FCotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>990e	10					.byte WordFlags	;wh_Flags
>990f	03					.byte 3	;wh_CodeLength
>9910	2a					  .byte LinkDisplacement	; offset to previous nt
=$9911					XtPtr1 ::= *
=39053					WordListLink ::= Nt0 ; remember the nt of this word for later
.9911	20 e7 98	jsr $98e7	FCotH:		jsr FTanH
.9914	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CodeLen	.var *-XtPtr1
=$9917					Here1 = *	; remember here
>990f	06					.byte CodeLen	;patch wh_CodeLength
>9917	46 41 53 69 6e 48		Name0:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>991d	06					.byte (("FASinH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>991e	10					.byte WordFlags	;wh_Flags
>991f	03					.byte 3	;wh_CodeLength
>9920	10					  .byte LinkDisplacement	; offset to previous nt
=$9921					XtPtr1 ::= *
=39069					WordListLink ::= Nt0 ; remember the nt of this word for later
.9921	20 4d 85	jsr $854d	FASinH:		jsr FDup	; X X
.9924	20 73 8c	jsr $8c73			jsr FSqr	; X X*X
.9927	20 49 8b	jsr $8b49			jsr F1Plus	; X X*X+1
.992a	20 1e 8f	jsr $8f1e			jsr FSqrt	; X sqrt(X*X+1)
.992d	20 15 8b	jsr $8b15			jsr FPlus	;
.9930	4c c0 94	jmp $94c0			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$9933					Here1 = *	; remember here
>991f	12					.byte CodeLen	;patch wh_CodeLength
>9933	46 41 43 73 63 48		Name0:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9939	06					.byte (("FACscH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>993a	10					.byte WordFlags	;wh_Flags
>993b	03					.byte 3	;wh_CodeLength
>993c	1c					  .byte LinkDisplacement	; offset to previous nt
=$993d					XtPtr1 ::= *
=39097					WordListLink ::= Nt0 ; remember the nt of this word for later
.993d	20 42 8d	jsr $8d42	FACscH:		jsr F1Slash
.9940	4c 21 99	jmp $9921			jmp FASinH
=6					CodeLen	.var *-XtPtr1
=$9943					Here1 = *	; remember here
>993b	06					.byte CodeLen	;patch wh_CodeLength
>9943	46 41 43 6f 73 48		Name0:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39113					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9949	06					.byte (("FACosH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>994a	10					.byte WordFlags	;wh_Flags
>994b	03					.byte 3	;wh_CodeLength
>994c	10					  .byte LinkDisplacement	; offset to previous nt
=$994d					XtPtr1 ::= *
=39113					WordListLink ::= Nt0 ; remember the nt of this word for later
.994d	20 4d 85	jsr $854d	FACosH:		jsr FDup
.9950	20 73 8c	jsr $8c73			jsr FSqr
.9953	20 79 8b	jsr $8b79			jsr F1Minus
.9956	20 1e 8f	jsr $8f1e			jsr FSqrt
.9959	20 15 8b	jsr $8b15			jsr FPlus
.995c	4c c0 94	jmp $94c0			jmp FLn
=18					CodeLen	.var *-XtPtr1
=$995f					Here1 = *	; remember here
>994b	12					.byte CodeLen	;patch wh_CodeLength
>995f	46 41 53 65 63 48		Name0:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39141					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9965	06					.byte (("FASecH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9966	10					.byte WordFlags	;wh_Flags
>9967	03					.byte 3	;wh_CodeLength
>9968	1c					  .byte LinkDisplacement	; offset to previous nt
=$9969					XtPtr1 ::= *
=39141					WordListLink ::= Nt0 ; remember the nt of this word for later
.9969	20 42 8d	jsr $8d42	FASecH:		jsr F1Slash
.996c	4c 4d 99	jmp $994d			jmp FACosH
=6					CodeLen	.var *-XtPtr1
=$996f					Here1 = *	; remember here
>9967	06					.byte CodeLen	;patch wh_CodeLength
>996f	46 41 54 61 6e 48		Name0:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39157					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9975	06					.byte (("FATanH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9976	10					.byte WordFlags	;wh_Flags
>9977	03					.byte 3	;wh_CodeLength
>9978	10					  .byte LinkDisplacement	; offset to previous nt
=$9979					XtPtr1 ::= *
=39157					WordListLink ::= Nt0 ; remember the nt of this word for later
.9979	20 4d 85	jsr $854d	FAtanH:		jsr FDup	; x x
.997c	20 49 8b	jsr $8b49			jsr F1Plus	; x x+1
.997f	20 d1 85	jsr $85d1			jsr FSwap	; 1+x x
.9982	20 e3 88	jsr $88e3			jsr F1
.9985	20 d1 85	jsr $85d1			jsr FSwap
.9988	20 55 8b	jsr $8b55			jsr FMinus	; 1+x 1-x
.998b	20 9e 8c	jsr $8c9e			jsr FSlash	; (1+x)/(1-x)
.998e	20 c0 94	jsr $94c0			jsr FLn
.9991	4c 97 89	jmp $8997			jmp F2Slash
=27					CodeLen	.var *-XtPtr1
=$9994					Here1 = *	; remember here
>9977	1b					.byte CodeLen	;patch wh_CodeLength
>9994	46 41 43 6f 74 48		Name0:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=39194					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>999a	06					.byte (("FACotH"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>999b	10					.byte WordFlags	;wh_Flags
>999c	03					.byte 3	;wh_CodeLength
>999d	25					  .byte LinkDisplacement	; offset to previous nt
=$999e					XtPtr1 ::= *
=39194					WordListLink ::= Nt0 ; remember the nt of this word for later
.999e	20 42 8d	jsr $8d42	FACotH: 	jsr F1Slash
.99a1	4c 79 99	jmp $9979			jmp FATanH
=6					CodeLen	.var *-XtPtr1
=$99a4					Here1 = *	; remember here
>999c	06					.byte CodeLen	;patch wh_CodeLength
>99a4	45 64				Name0:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=39206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>99a6	82					.byte (("Ed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a7	10					.byte WordFlags	;wh_Flags
>99a8	03					.byte 3	;wh_CodeLength
>99a9	0c					  .byte LinkDisplacement	; offset to previous nt
=$99aa					XtPtr1 ::= *
=39206					WordListLink ::= Nt0 ; remember the nt of this word for later
.99aa	4c ad 99	jmp $99ad	Ed:		jmp ed6502
=3					CodeLen	.var *-XtPtr1
=$99ad					Here1 = *	; remember here
>99a8	03					.byte CodeLen	;patch wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99ad					ed6502:
.99ad	ad 00 03	lda $0300			lda base
.99b0	85 23		sta $23				sta editor3+1
.99b2	20 dc b1	jsr $b1dc			jsr Decimal
.99b5	a9 00		lda #$00			lda #0
.99b7	85 1e		sta $1e				sta ed_head
.99b9	85 1f		sta $1f				sta ed_head+1
.99bb	85 20		sta $20				sta ed_cur
.99bd	85 21		sta $21				sta ed_cur+1
.99bf	85 22		sta $22				sta ed_flags
.99c1	20 03 b8	jsr $b803			jsr Zero
.99c4	20 03 b8	jsr $b803			jsr Zero		; ( addr-t u-t )
.99c7	20 7c ab	jsr $ab7c			jsr CR
.99ca					ed_input_loop:
.99ca	a9 7e		lda #$7e			lda #$ff-%10000001
.99cc	25 22		and $22				and ed_flags
.99ce	85 22		sta $22				sta ed_flags
.99d0	20 72 9e	jsr $9e72			jsr ed_get_input
.99d3	a5 06		lda $06				lda ciblen+0
.99d5	d0 1e		bne $99f5			bne _command_mode
.99d7	a5 20		lda $20				lda ed_cur+0
.99d9	a4 21		ldy $21				ldy ed_cur+1
.99db	20 c6 b7	jsr $b7c6			jsr PushYA		; ( addr-t u-t u )
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	20 77 ca	jsr $ca77			jsr One_Plus		; ( addr-t u-t u+1 )
.99e7	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line
.99ea	b0 03		bcs $99ef			bcs +
.99ec	4c 62 9e	jmp $9e62			jmp ed_error_1drop	; New line number is not legal, abort
.99ef					+
.99ef	20 03 b8	jsr $b803			jsr Zero		; ( addr-t u-t u+1 0 )
.99f2	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.99f5					_command_mode:
.99f5	20 03 b8	jsr $b803			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f8	20 03 b8	jsr $b803			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99fb	a0 00		ldy #$00			ldy #0			; get char
.99fd	b1 04		lda ($04),y			lda (cib),y
.99ff	c9 2e		cmp #$2e			cmp #'.'
.9a01	d0 31		bne $9a34			bne _prefix_dollar
.9a03	20 81 9e	jsr $9e81			jsr ed_have_text
.9a06	a5 20		lda $20				lda ed_cur
.9a08	95 26		sta $26,x			sta DStack+2,x
.9a0a	a5 21		lda $21				lda ed_cur+1
.9a0c	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a0e	a9 80		lda #$80			lda #%10000000
.9a10	05 22		ora $22				ora ed_flags
.9a12	85 22		sta $22				sta ed_flags
.9a14	a5 06		lda $06				lda ciblen
.9a16	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a18	d0 03		bne $9a1d			bne +
.9a1a	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.9a1d					+
.9a1d	a5 04		lda $04				lda cib+0
.9a1f	a4 05		ldy $05				ldy cib+1
.9a21	20 c6 b7	jsr $b7c6			jsr PushYA
.9a24	a5 06		lda $06				lda ciblen+0
.9a26	a4 07		ldy $07				ldy ciblen+1
.9a28	20 c6 b7	jsr $b7c6			jsr PushYA
.9a2b	20 52 ca	jsr $ca52			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a2e	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a31	4c 06 9b	jmp $9b06			jmp _check_for_para2
.9a34					_prefix_dollar:
.9a34	c9 24		cmp #$24			cmp #'$'
.9a36	d0 1f		bne $9a57			bne _prefix_percent
.9a38	20 81 9e	jsr $9e81			jsr ed_have_text
.9a3b	e8		inx				inx
.9a3c	e8		inx				inx			; ( addr-t u-t 0 )
.9a3d	20 ae 9e	jsr $9eae			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a40	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t para1 0 )
.9a43	a9 80		lda #$80			lda #%10000000
.9a45	05 22		ora $22				ora ed_flags
.9a47	85 22		sta $22				sta ed_flags
.9a49	a5 06		lda $06				lda ciblen
.9a4b	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a4d	d0 03		bne $9a52			bne +
.9a4f	4c b4 9a	jmp $9ab4			jmp _line_number_only_from_external
.9a52					+
.9a52	a0 01		ldy #$01			ldy #1
.9a54	4c 7c 9b	jmp $9b7c			jmp _check_command
.9a57					_prefix_percent:
.9a57	c9 25		cmp #$25			cmp #'%'
.9a59	f0 04		beq $9a5f			beq _whole_text
.9a5b	c9 2c		cmp #$2c			cmp #','
.9a5d	d0 1b		bne $9a7a			bne _prefix_semicolon
.9a5f					_whole_text:
.9a5f	20 81 9e	jsr $9e81			jsr ed_have_text
.9a62	a9 01		lda #$01			lda #1
.9a64	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a66	a9 00		lda #$00			lda #0
.9a68	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a6a					_semicolon_entry:
.9a6a	e8		inx				inx
.9a6b	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a6c	20 ae 9e	jsr $9eae			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a6f	a9 80		lda #$80			lda #%10000000
.9a71	05 22		ora $22				ora ed_flags
.9a73	85 22		sta $22				sta ed_flags
.9a75	a0 01		ldy #$01			ldy #1
.9a77	4c 7c 9b	jmp $9b7c			jmp _check_command
.9a7a					_prefix_semicolon:
.9a7a	c9 3b		cmp #$3b			cmp #';'
.9a7c	d0 0e		bne $9a8c			bne _prefix_number
.9a7e	20 81 9e	jsr $9e81			jsr ed_have_text
.9a81	a5 20		lda $20				lda ed_cur
.9a83	95 26		sta $26,x			sta DStack+2,x
.9a85	a5 21		lda $21				lda ed_cur+1
.9a87	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a89	4c 6a 9a	jmp $9a6a			jmp _semicolon_entry
.9a8c					_prefix_number:
.9a8c	20 03 b8	jsr $b803			jsr Zero
.9a8f	20 03 b8	jsr $b803			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a92	a5 04		lda $04				lda cib+0
.9a94	a4 05		ldy $05				ldy cib+1
.9a96	20 c6 b7	jsr $b7c6			jsr PushYA
.9a99	a5 06		lda $06				lda ciblen+0
.9a9b	a4 07		ldy $07				ldy ciblen+1
.9a9d	20 c6 b7	jsr $b7c6			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9aa0	20 60 b0	jsr $b060			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9aa3	b5 24		lda $24,x			lda DStack+0,x
.9aa5	15 25		ora $25,x			ora DStack+1,x
.9aa7	d0 25		bne $9ace			bne _have_unconverted_chars
.9aa9	20 53 c5	jsr $c553			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aac	20 2a c0	jsr $c02a			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aaf	20 93 ce	jsr $ce93			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9ab2	e8		inx				inx
.9ab3	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9ab4					_line_number_only_from_external:
.9ab4	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t 0 u )
.9ab7	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line
.9aba	b0 03		bcs $9abf			bcs +
.9abc	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9abf					+
.9abf	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t u 0 )
.9ac2	20 ed 9e	jsr $9eed			jsr ed_para1_to_cur
.9ac5	a9 80		lda #$80			lda #%10000000
.9ac7	05 22		ora $22				ora ed_flags
.9ac9	85 22		sta $22				sta ed_flags
.9acb	4c 4b 9d	jmp $9d4b			jmp ed_cmd_p_from_external
.9ace					_have_unconverted_chars:
.9ace	a5 06		lda $06				lda ciblen+0
.9ad0	d5 24		cmp $24,x			cmp DStack+0,x
.9ad2	d0 16		bne $9aea			bne _no_command_yet
.9ad4	a5 07		lda $07				lda ciblen+1
.9ad6	d5 25		cmp $25,x			cmp DStack+1,x
.9ad8	d0 10		bne $9aea			bne _no_command_yet
.9ada	8a		txa				txa
.9adb	18		clc				clc
.9adc	69 08		adc #$08			adc #8
.9ade	aa		tax				tax			; ( addr-t u-t 0 0 )
.9adf	a9 7f		lda #$7f			lda #$ff-%10000000
.9ae1	25 22		and $22				and ed_flags
.9ae3	85 22		sta $22				sta ed_flags
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	4c 7c 9b	jmp $9b7c			jmp _check_command
.9aea					_no_command_yet:
.9aea	20 fd ce	jsr $cefd			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9aed	20 93 ce	jsr $ce93			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9af0	20 2a c0	jsr $c02a			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9af3	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9af5	95 2a		sta $2a,x			sta DStack+6,x
.9af7	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af9	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9afb	e8		inx				inx
.9afc	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9afd	20 1b cf	jsr $cf1b			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9b00	a9 80		lda #$80			lda #%10000000
.9b02	05 22		ora $22				ora ed_flags
.9b04	85 22		sta $22				sta ed_flags
.9b06					_check_for_para2:
.9b06	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b08	c9 2c		cmp #$2c			cmp #','
.9b0a	f0 0c		beq $9b18			beq _got_comma
.9b0c	38		sec				sec
.9b0d	a5 06		lda $06				lda ciblen
.9b0f	f5 24		sbc $24,x			sbc DStack+0,x
.9b11	a8		tay				tay
.9b12	20 53 c5	jsr $c553			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b15	4c 7c 9b	jmp $9b7c			jmp _check_command
.9b18					_got_comma:
.9b18	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b1b	20 52 ca	jsr $ca52			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b1e	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b20	c9 24		cmp #$24			cmp #'$'
.9b22	d0 16		bne $9b3a			bne _para2_not_dollar
.9b24	38		sec				sec
.9b25	a5 06		lda $06				lda ciblen
.9b27	f5 26		sbc $26,x			sbc DStack+2,x
.9b29	a8		tay				tay
.9b2a	c8		iny				iny
.9b2b	98		tya				tya
.9b2c	48		pha				pha
.9b2d	8a		txa				txa
.9b2e	18		clc				clc
.9b2f	69 06		adc #$06			adc #6
.9b31	aa		tax				tax			; ( addr-t u-t para1 )
.9b32	20 ae 9e	jsr $9eae			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b35	68		pla				pla
.9b36	a8		tay				tay
.9b37	4c 7c 9b	jmp $9b7c			jmp _check_command
.9b3a					_para2_not_dollar:
.9b3a	20 fd ce	jsr $cefd			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b3d	20 03 b8	jsr $b803			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b40	20 03 b8	jsr $b803			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b43	20 6e ce	jsr $ce6e			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b46	20 1b cf	jsr $cf1b			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b49	20 73 cf	jsr $cf73			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b4c	20 fd ce	jsr $cefd			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b4f	20 60 b0	jsr $b060			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b52	20 73 cf	jsr $cf73			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b55	20 1b cf	jsr $cf1b			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b58	20 5b c8	jsr $c85b			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b5b	b5 24		lda $24,x			lda DStack+0,x
.9b5d	15 25		ora $25,x			ora DStack+1,x
.9b5f	f0 08		beq $9b69			beq _second_number
.9b61	8a		txa				txa
.9b62	18		clc				clc
.9b63	69 0c		adc #$0c			adc #12
.9b65	aa		tax				tax			; back to ( addr-t u-t )
.9b66	4c 64 9e	jmp $9e64			jmp ed_error
.9b69					_second_number:
.9b69	e8		inx				inx
.9b6a	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b6b	38		sec				sec
.9b6c	a5 06		lda $06				lda ciblen
.9b6e	f5 24		sbc $24,x			sbc DStack+0,x
.9b70	48		pha				pha
.9b71	20 53 c5	jsr $c553			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b74	20 2a c0	jsr $c02a			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b77	20 ad c9	jsr $c9ad			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b7a	68		pla				pla
.9b7b	a8		tay				tay
.9b7c					_check_command:
.9b7c	24 22		bit $22				bit ed_flags
.9b7e	30 08		bmi $9b88			bmi _check_command_have_arg
.9b80	a5 20		lda $20				lda ed_cur+0
.9b82	95 26		sta $26,x			sta DStack+2,x
.9b84	a5 21		lda $21				lda ed_cur+1
.9b86	95 27		sta $27,x			sta DStack+3,x
.9b88					_check_command_have_arg:
.9b88	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b8a	85 14		sta $14				sta tmp1+0
.9b8c	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b8e	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b90	e8		inx		_cmd_loop:	inx			;   next char
.9b91	bd 11 9f	lda $9f11,x			lda ed_cmd_list,x
.9b94	f0 13		beq $9ba9			beq _illegal_command	;   end of list?
.9b96	c5 14		cmp $14				cmp tmp1+0
.9b98	d0 f6		bne $9b90			bne _cmd_loop		;   not found?
.9b9a	8a		txa				txa
.9b9b	0a		asl a				asl
.9b9c	aa		tax				tax			; X * 2 for table
.9b9d	bd 1d 9f	lda $9f1d,x			lda ed_cmd_table+1,x
.9ba0	48		pha				pha
.9ba1	bd 1c 9f	lda $9f1c,x			lda ed_Cmd_table+0,x
.9ba4	48		pha				pha
.9ba5	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba7	08		php				php
.9ba8	40		rti				rti			; jump to command routine
.9ba9					_illegal_command:
.9ba9	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9bac					ed_next_command:
.9bac	20 53 c5	jsr $c553			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9baf					_next_command_empty:
.9baf	4c ca 99	jmp $99ca			jmp ed_input_loop
.9bb2					ed_all_done:
.9bb2	a9 00		lda #$00			lda #0
.9bb4	85 06		sta $06				sta ciblen
.9bb6	85 07		sta $07				sta ciblen+1
.9bb8	20 53 c5	jsr $c553			jsr Two_drop			; ( addr-t u-t )
.9bbb	a5 23		lda $23				lda editor3+1
.9bbd	8d 00 03	sta $0300			sta base
.9bc0	60		rts				rts
.9bc1					ed_cmd_a:
.9bc1	e8		inx				inx
.9bc2	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bc3					ed_entry_cmd_i:
.9bc3					ed_cmd_a_have_para:
.9bc3	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bc6	20 7c ab	jsr $ab7c			jsr CR
.9bc9					_next_string_loop:
.9bc9	20 72 9e	jsr $9e72			jsr ed_get_input
.9bcc	a0 00		ldy #$00			ldy #0
.9bce	b1 04		lda ($04),y			lda (cib),y
.9bd0	c9 2e		cmp #$2e			cmp #'.'
.9bd2	d0 18		bne $9bec			bne _add_line
.9bd4	a4 06		ldy $06				ldy ciblen
.9bd6	c0 01		cpy #$01			cpy #1
.9bd8	d0 12		bne $9bec			bne _add_line
.9bda	a4 07		ldy $07				ldy ciblen+1
.9bdc	d0 0e		bne $9bec			bne _add_line
.9bde	e8		inx				inx
.9bdf	e8		inx				inx
.9be0	a9 40		lda #$40			lda #%01000000
.9be2	05 22		ora $22				ora ed_flags
.9be4	85 22		sta $22				sta ed_flags
.9be6	20 7c ab	jsr $ab7c			jsr CR
.9be9	4c ca 99	jmp $99ca			jmp ed_input_loop
.9bec					_add_line:
.9bec	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9bef	20 45 ca	jsr $ca45			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9bf2	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bf5	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf8	20 18 cd	jsr $cd18			jsr Comma		; ( addr-t u-t addr1 here )
.9bfb	20 e1 cc	jsr $cce1			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bfe	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t here here addr1 )
.9c01	20 ce ce	jsr $cece			jsr Store		; ( addr-t u-t here )
.9c04	20 45 ca	jsr $ca45			jsr Here		; HERE ( addr-t u-t here here2)
.9c07	a9 04		lda #$04			lda #4
.9c09	20 f5 b7	jsr $b7f5			jsr PushZA
.9c0c	20 bf c0	jsr $c0bf			jsr Allot
.9c0f	e6 20		inc $20				inc ed_cur
.9c11	d0 02		bne $9c15			bne +
.9c13	e6 21		inc $21				inc ed_cur+1
.9c15					+
.9c15	20 45 ca	jsr $ca45			jsr Here	; ( addr-t u-t here here2 here3 )
.9c18	a5 04		lda $04				lda cib+0
.9c1a	a4 05		ldy $05				ldy cib+1
.9c1c	20 c6 b7	jsr $b7c6			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c1f	20 4c cf	jsr $cf4c			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c22	a5 06		lda $06				lda ciblen+0
.9c24	a4 07		ldy $07				ldy ciblen+1
.9c26	20 c6 b7	jsr $b7c6			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c29	20 90 ad	jsr $ad90			jsr Move	; ( addr-t u-t here here2 here3 )
.9c2c	18		clc				clc
.9c2d	a5 00		lda $00				lda cp
.9c2f	65 06		adc $06				adc ciblen
.9c31	85 00		sta $00				sta cp
.9c33	90 06		bcc $9c3b			bcc +
.9c35	a5 01		lda $01				lda cp+1
.9c37	65 07		adc $07				adc ciblen+1
.9c39	85 01		sta $01				sta cp+1
.9c3b					+
.9c3b	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c3e	20 ce ce	jsr $cece			jsr Store		; ( addr-t u-t here here2 )
.9c41	20 27 ca	jsr $ca27			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c44	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c47	a5 06		lda $06				lda ciblen
.9c49	95 26		sta $26,x			sta DStack+2,x
.9c4b	a5 07		lda $07				lda ciblen+1
.9c4d	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c4f	20 ce ce	jsr $cece			jsr Store		; ( addr-t u-t here )
.9c52	20 7c ab	jsr $ab7c			jsr CR			; Add a line feed for visuals
.9c55	4c c9 9b	jmp $9bc9			jmp _next_string_loop
.9c58					ed_cmd_d:
.9c58	20 81 9e	jsr $9e81			jsr ed_have_text
.9c5b	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9c5e	b5 24		lda $24,x			lda DStack+0,x
.9c60	15 25		ora $25,x			ora DStack+1,x
.9c62	d0 09		bne $9c6d			bne +
.9c64	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c67	20 a2 9c	jsr $9ca2			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c6a	4c 96 9c	jmp $9c96			jmp _cmd_d_done
.9c6d					+
.9c6d	20 8d 9e	jsr $9e8d			jsr ed_is_valid_line	  ; result is in C flag
.9c70	b0 03		bcs $9c75			bcs _cmd_d_loop
.9c72	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9c75					_cmd_d_loop:
.9c75	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c77	d5 26		cmp $26,x			cmp DStack+2,x
.9c79	b5 25		lda $25,x			lda DStack+1,x
.9c7b	f5 27		sbc $27,x			sbc DStack+3,x
.9c7d	90 0c		bcc $9c8b			bcc _cmd_d_done_with_flag
.9c7f	20 73 cf	jsr $cf73			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c82	20 a2 9c	jsr $9ca2			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c85	20 52 ca	jsr $ca52			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c88	4c 75 9c	jmp $9c75			jmp _cmd_d_loop
.9c8b					_cmd_d_done_with_flag:
.9c8b	20 5e ca	jsr $ca5e			jsr NOS_One_Minus
.9c8e	b5 26		lda $26,x			lda DStack+2,x
.9c90	85 20		sta $20				sta ed_cur
.9c92	b5 27		lda $27,x			lda DStack+3,x
.9c94	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c96					_cmd_d_done:
.9c96	a9 40		lda #$40			lda #%01000000
.9c98	05 22		ora $22				ora ed_flags
.9c9a	85 22		sta $22				sta ed_flags
.9c9c	20 7c ab	jsr $ab7c			jsr CR
.9c9f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9ca2					_cmd_d_common:
.9ca2	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u-t u u )
.9ca5	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca8	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr-t u-t u addr1 )
.9cab	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t addr1 u )
.9cae	20 52 ca	jsr $ca52			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9cb1	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9cb4	4c ce ce	jmp $cece			jmp Store		; ( addr-t u-t )
.9cb7					ed_cmd_equ:
.9cb7	a5 1e		lda $1e				lda ed_head
.9cb9	05 1f		ora $1f				ora ed_head+1
.9cbb	d0 06		bne $9cc3			bne _cmd_equ_have_text
.9cbd	20 03 b8	jsr $b803			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cc0	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done
.9cc3					_cmd_equ_have_text:
.9cc3	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9cc6	24 22		bit $22				bit ed_flags
.9cc8	30 0a		bmi $9cd4			bmi _cmd_equ_have_para
.9cca	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9ccc	a4 21		ldy $21				ldy ed_cur+1
.9cce	20 c6 b7	jsr $b7c6			jsr PushYA
.9cd1	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9cd4					_cmd_equ_have_para:
.9cd4	b5 24		lda $24,x			lda DStack+0,x
.9cd6	15 25		ora $25,x			ora DStack+1,x
.9cd8	d0 06		bne $9ce0			bne _cmd_equ_two_paras
.9cda	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cdd	4c e3 9c	jmp $9ce3			jmp _cmd_equ_done
.9ce0					_cmd_equ_two_paras:
.9ce0	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9ce3					_cmd_equ_done:
.9ce3	20 7c ab	jsr $ab7c			jsr CR			; number goes on new line
.9ce6	20 1d cc	jsr $cc1d			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce9	20 7c ab	jsr $ab7c			jsr CR
.9cec	4c ac 9b	jmp $9bac			jmp ed_next_command
.9cef					ed_cmd_f:
.9cef	24 22		bit $22				bit ed_flags
.9cf1	30 18		bmi $9d0b			bmi _cmd_f_have_para
.9cf3	20 7c ab	jsr $ab7c			jsr CR
.9cf6	20 fd ce	jsr $cefd			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf9	20 6e ce	jsr $ce6e			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cfc	20 73 cf	jsr $cf73			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cff	20 1d cc	jsr $cc1d			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9d02	20 93 ce	jsr $ce93			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9d05	20 1b cf	jsr $cf1b			jsr R_From		; ( addr-t u-t 0 0 )
.9d08	4c 1c 9d	jmp $9d1c			jmp _cmd_f_done
.9d0b					_cmd_f_have_para:
.9d0b	20 4c cf	jsr $cf4c			jsr Over
.9d0e	20 7c ab	jsr $ab7c			jsr CR
.9d11	20 1d cc	jsr $cc1d			jsr U_Dot
.9d14	b5 26		lda $26,x			lda DStack+2,x
.9d16	95 2a		sta $2a,x			sta DStack+6,x
.9d18	b5 27		lda $27,x			lda DStack+3,x
.9d1a	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d1c					_cmd_f_done:
.9d1c	20 7c ab	jsr $ab7c			jsr CR
.9d1f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9d22					ed_cmd_i:
.9d22	e8		inx				inx
.9d23	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d24	24 22		bit $22				bit ed_flags
.9d26	30 08		bmi $9d30			bmi _cmd_i_have_para
.9d28	a5 20		lda $20				lda ed_cur
.9d2a	95 24		sta $24,x			sta DStack+0,x
.9d2c	a5 21		lda $21				lda ed_cur+1
.9d2e	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d30					_cmd_i_have_para:
.9d30	b5 24		lda $24,x			lda DStack+0,x
.9d32	15 25		ora $25,x			ora DStack+1,x
.9d34	f0 09		beq $9d3f			beq _cmd_i_done
.9d36	20 52 ca	jsr $ca52			jsr One_minus		; ( addr-t u-t para1-1 )
.9d39	20 03 b8	jsr $b803			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d3c	20 93 c9	jsr $c993			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d3f					_cmd_i_done:
.9d3f	4c c3 9b	jmp $9bc3			jmp ed_entry_cmd_i
.9d42					ed_cmd_n:
.9d42	a9 01		lda #$01			lda #%00000001
.9d44	05 22		ora $22				ora ed_flags
.9d46	85 22		sta $22				sta ed_flags
.9d48	4c 51 9d	jmp $9d51			jmp ed_cmd_p_entry_for_cmd_n
.9d4b					ed_cmd_p:
.9d4b					ed_cmd_p_from_external:
.9d4b	a9 fe		lda #$fe			lda #$ff-%00000001
.9d4d	25 22		and $22				and ed_flags
.9d4f	85 22		sta $22				sta ed_flags
.9d51					ed_cmd_p_entry_for_cmd_n:
.9d51	20 81 9e	jsr $9e81			jsr ed_have_text
.9d54	20 c4 9e	jsr $9ec4			jsr ed_no_line_zero
.9d57	20 7c ab	jsr $ab7c			jsr CR
.9d5a	b5 24		lda $24,x			lda DStack+0,x
.9d5c	15 25		ora $25,x			ora DStack+1,x
.9d5e	d0 11		bne $9d71			bne _cmd_p_loop
.9d60	b5 26		lda $26,x			lda DStack+2,x
.9d62	85 20		sta $20				sta ed_cur
.9d64	b5 27		lda $27,x			lda DStack+3,x
.9d66	85 21		sta $21				sta ed_cur+1
.9d68	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d6b	20 92 9d	jsr $9d92			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d6e	4c 8f 9d	jmp $9d8f			jmp _cmd_p_all_done
.9d71					_cmd_p_loop:
.9d71	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d73	d5 26		cmp $26,x			cmp DStack+2,x
.9d75	b5 25		lda $25,x			lda DStack+1,x
.9d77	f5 27		sbc $27,x			sbc DStack+3,x
.9d79	90 0c		bcc $9d87			bcc _cmd_p_done
.9d7b	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d7e	20 92 9d	jsr $9d92			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d81	20 81 ca	jsr $ca81			jsr NOS_One_Plus
.9d84	4c 71 9d	jmp $9d71			jmp _cmd_p_loop
.9d87					_cmd_p_done:
.9d87	b5 24		lda $24,x			lda DStack+0,x
.9d89	85 20		sta $20				sta ed_cur
.9d8b	b5 25		lda $25,x			lda DStack+1,x
.9d8d	85 21		sta $21				sta ed_cur+1
.9d8f					_cmd_p_all_done:
.9d8f	4c ac 9b	jmp $9bac			jmp ed_next_command
.9d92					_cmd_p_common:
.9d92	a5 22		lda $22				lda ed_flags
.9d94	4a		lsr a				lsr			; bit 0 now in carry
.9d95	90 0b		bcc $9da2			bcc _cmd_p_common_no_num
.9d97	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u-t para1 para1 )
.9d9a	20 1d cc	jsr $cc1d			jsr U_Dot		; ( addr-t u-t para1 )
.9d9d	a9 09		lda #$09			lda #AscHT
.9d9f	20 dd cd	jsr $cddd			jsr Emit_A
.9da2					_cmd_p_common_no_num:
.9da2	20 d2 9e	jsr $9ed2			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9da5	4c f6 9e	jmp $9ef6			jmp ed_print_addr
.9da8					ed_cmd_q:
.9da8	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9daa	50 03		bvc $9daf			bvc +
.9dac	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9daf					+
.9daf	4c b2 9b	jmp $9bb2			jmp ed_all_done		   ; can't fall thru because of PLX
.9db2					ed_cmd_qq:
.9db2	4c b2 9b	jmp $9bb2			jmp ed_all_done
.9db5					ed_cmd_w:
.9db5	20 81 9e	jsr $9e81			jsr ed_have_text
.9db8	24 22		bit $22				bit ed_flags		; parameter given?
.9dba	30 12		bmi $9dce			bmi _cmd_w_have_para
.9dbc	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9dbe	d0 03		bne $9dc3			bne +
.9dc0	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9dc3					+
.9dc3	b5 2a		lda $2a,x			lda DStack+6,x
.9dc5	95 26		sta $26,x			sta DStack+2,x
.9dc7	b5 2b		lda $2b,x			lda DStack+7,x
.9dc9	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dcb	4c d6 9d	jmp $9dd6			jmp _cmd_w_para_ready
.9dce					_cmd_w_have_para:
.9dce	b5 26		lda $26,x			lda DStack+2,x
.9dd0	95 2a		sta $2a,x			sta DStack+6,x
.9dd2	b5 27		lda $27,x			lda DStack+3,x
.9dd4	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dd6					_cmd_w_para_ready:
.9dd6	a9 1e		lda #$1e			lda #<ed_head
.9dd8	95 24		sta $24,x			sta DStack+0,x
.9dda	a9 00		lda #$00			lda #>ed_head
.9ddc	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dde	20 4c cf	jsr $cf4c			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9de1	20 fd ce	jsr $cefd			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9de4					_cmd_w_loop:
.9de4	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de7	b5 24		lda $24,x			lda DStack+0,x
.9de9	15 25		ora $25,x			ora DStack+1,x
.9deb	f0 4d		beq $9e3a			beq _cmd_w_eol
.9ded	20 c1 cc	jsr $ccc1			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9df0	20 83 c6	jsr $c683			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9df3	20 27 ca	jsr $ca27			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9df6	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df9	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9dfc	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9dff	20 27 ca	jsr $ca27			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9e02	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9e05	20 93 ce	jsr $ce93			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e08	20 90 cf	jsr $cf90			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e0b	20 6e ce	jsr $ce6e			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e0e	20 73 cf	jsr $cf73			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e11	20 fd ce	jsr $cefd			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e14	20 90 ad	jsr $ad90			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e17	20 1b cf	jsr $cf1b			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e1a	20 5f c6	jsr $c65f			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e1d	20 93 ce	jsr $ce93			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e20	20 bc cb	jsr $cbbc			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e23	20 73 cf	jsr $cf73			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e26	a9 0a		lda #$0a			lda #AscLF
.9e28	20 f5 b7	jsr $b7f5			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e2b	20 90 cf	jsr $cf90			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e2e	20 ce ce	jsr $cece			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e31	20 77 ca	jsr $ca77			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e34	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e37	4c e4 9d	jmp $9de4			jmp _cmd_w_loop
.9e3a					_cmd_w_eol:
.9e3a	20 90 cf	jsr $cf90			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e3d	20 1b cf	jsr $cf1b			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e40	20 d4 cb	jsr $cbd4			jsr Minus		; ( addr-t u-t addr-n u )
.9e43	b5 24		lda $24,x			lda DStack+0,x
.9e45	95 28		sta $28,x			sta DStack+4,x
.9e47	b5 25		lda $25,x			lda DStack+1,x
.9e49	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e4b	20 7c ab	jsr $ab7c			jsr CR
.9e4e	20 73 cf	jsr $cf73			jsr Dup			; ( addr-t u addr-n u u )
.9e51	20 1d cc	jsr $cc1d			jsr U_Dot		; ( addr-t u addr-n u )
.9e54	20 7c ab	jsr $ab7c			jsr CR
.9e57	a9 bf		lda #$bf			lda #$ff-%01000000
.9e59	25 22		and $22				and ed_flags
.9e5b	85 22		sta $22				sta ed_flags
.9e5d	4c ac 9b	jmp $9bac			jmp ed_next_command
.9e60					ed_error_2drop:
.9e60	e8		inx				inx			; Drop para2
.9e61	e8		inx				inx
.9e62					ed_error_1drop:
.9e62	e8		inx				inx			; Drop para1
.9e63	e8		inx				inx
.9e64					ed_error:
.9e64	20 7c ab	jsr $ab7c			jsr CR
.9e67	a9 3f		lda #$3f			lda #'?'
.9e69	20 dd cd	jsr $cddd			jsr Emit_A
.9e6c	20 7c ab	jsr $ab7c			jsr CR
.9e6f	4c ca 99	jmp $99ca			jmp ed_input_loop
.9e72					ed_get_input:
.9e72	20 83 c2	jsr $c283			jsr Refill		;  ( addr-t u-t f )
.9e75	b5 24		lda $24,x			lda DStack+0,x
.9e77	d0 05		bne $9e7e			bne +
.9e79	68		pla				pla
.9e7a	68		pla				pla
.9e7b	4c 62 9e	jmp $9e62			jmp ed_error_1drop
.9e7e					+
.9e7e	e8		inx				inx
.9e7f	e8		inx				inx
.9e80	60		rts				rts
.9e81					ed_have_text:
.9e81	a5 1e		lda $1e				lda ed_head
.9e83	05 1f		ora $1f				ora ed_head+1
.9e85	d0 05		bne $9e8c			bne +
.9e87	68		pla				pla
.9e88	68		pla				pla
.9e89	4c 64 9e	jmp $9e64			jmp ed_error
.9e8c					+
.9e8c	60		rts				rts
.9e8d					ed_is_valid_line:
.9e8d	38		sec				sec				; default is legal line number
.9e8e	b5 24		lda $24,x			lda DStack+0,x
.9e90	15 25		ora $25,x			ora DStack+1,x
.9e92	f0 18		beq $9eac			beq _nope_zero	; ( n )
.9e94	20 73 cf	jsr $cf73			jsr Dup				; ( n n )
.9e97	20 ae 9e	jsr $9eae			jsr ed_last_line		; ( n n last )
.9e9a	20 90 cf	jsr $cf90			jsr Swap			; ( n last n )
.9e9d	20 8f c8	jsr $c88f			jsr Less_Than			; ( n f )
.9ea0	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9ea2	15 25		ora $25,x			ora DStack+1,x
.9ea4	d0 04		bne $9eaa			bne _too_small
.9ea6	e8		inx				inx
.9ea7	e8		inx				inx			; DROP flag ( n )
.9ea8	38		sec				sec			; signal valid
.9ea9	60		rts				rts
.9eaa					_too_small:
.9eaa	e8		inx				inx
.9eab	e8		inx				inx
.9eac					_nope_zero:
.9eac	18		clc				clc			; signal not valid
.9ead	60		rts				rts
.9eae					ed_last_line:
.9eae	20 03 b8	jsr $b803			jsr Zero		; Set counter to zero
.9eb1	a9 1e		lda #$1e			lda #ed_head
.9eb3	20 f5 b7	jsr $b7f5			jsr PushZA		; ( count addr )
.9eb6					_loop:
.9eb6	20 b5 ce	jsr $ceb5			jsr Fetch		; ( count addr|0 )
.9eb9	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9ebb	f0 06		beq $9ec3			beq _done
.9ebd	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; Increase counter
.9ec0	4c b6 9e	jmp $9eb6			jmp _loop		; continue
.9ec3					_done:
.9ec3	60		rts				rts
.9ec4					ed_no_line_zero:
.9ec4	b5 26		lda $26,x			lda DStack+2,x
.9ec6	15 27		ora $27,x			ora DStack+3,x
.9ec8	d0 07		bne $9ed1			bne _done
.9eca	24 22		bit $22				bit ed_flags
.9ecc	10 03		bpl $9ed1			bpl _done
.9ece	4c 60 9e	jmp $9e60			jmp ed_error_2drop
.9ed1					_done:
.9ed1	60		rts				rts
.9ed2					ed_num_to_addr:
.9ed2	a9 1e		lda #$1e			lda #ed_head
.9ed4	20 f5 b7	jsr $b7f5			jsr PushZA		; ( u addr-h )
.9ed7	4c e4 9e	jmp $9ee4			jmp _test
.9eda					_loop:
.9eda	20 b5 ce	jsr $ceb5			jsr Fetch		; @ ( u addr1 )
.9edd	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9edf	f0 09		beq $9eea			beq _finished
.9ee1	20 5e ca	jsr $ca5e			jsr NOS_One_Minus	; decrement the line count
.9ee4	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9ee6	15 27		ora $27,x			ora DStack+3,x
.9ee8	d0 f0		bne $9eda			bne _loop
.9eea					_finished:
.9eea	4c ad c9	jmp $c9ad			jmp Nip			; ( addr )
.9eed					ed_para1_to_cur:
.9eed	b5 26		lda $26,x			lda DStack+2,x
.9eef	85 20		sta $20				sta ed_cur
.9ef1	b5 27		lda $27,x			lda DStack+3,x
.9ef3	85 21		sta $21				sta ed_cur+1
.9ef5	60		rts				rts
.9ef6					ed_print_addr:
.9ef6	20 24 ca	jsr $ca24			jsr Cell_Plus		; ( addr+2 )
.9ef9	20 73 cf	jsr $cf73			jsr Dup			; ( addr+2 addr+2 )
.9efc	20 24 ca	jsr $ca24			jsr Cell_Plus		; ( addr+2 addr+4 )
.9eff	20 b5 ce	jsr $ceb5			jsr Fetch		; ( addr+2 u-s )
.9f02	20 90 cf	jsr $cf90			jsr Swap		; ( u-s addr+2 )
.9f05	20 b5 ce	jsr $ceb5			jsr Fetch		; ( u-s addr-s )
.9f08	20 90 cf	jsr $cf90			jsr Swap		; ( addr-s u-s )
.9f0b	20 f5 cd	jsr $cdf5			jsr Type
.9f0e	4c 7c ab	jmp $ab7c			jmp CR
>9f11	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f19	71 51 00
.9f1c					ed_cmd_table:
>9f1c	c1 9b ef 9c 22 9d 58 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f24	4b 9d 42 9d
>9f28	b7 9c b5 9d a8 9d b2 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f30					ed6502_end:
>9f30	53 65 65			Name0:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=40627					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f33	a3					.byte (("See"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f34	11					.byte WordFlags	;wh_Flags
>9f35	03					.byte 3	;wh_CodeLength
>9f36	26 99					  .word WordListLink
=$9f38					XtPtr1 ::= *
=40627					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f38					See:
.9f38	20 4f bc	jsr $bc4f			jsr Tick_Nt		; ( nt )
.9f3b	20 7c ab	jsr $ab7c			jsr CR
.9f3e	ad 00 03	lda $0300			lda base		; Save the current number base
.9f41	48		pha				pha
.9f42	a9 48		lda #$48			lda #<str_see_nt	; print nt
.9f44	a0 da		ldy #$da			ldy #>str_see_nt
.9f46	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.9f49	20 73 cf	jsr $cf73			jsr Dup			; ( nt nt )
.9f4c	20 1c a9	jsr $a91c			jsr Dot_Hex
.9f4f	20 e9 cd	jsr $cde9			jsr Space		; ( nt )
.9f52	20 73 cf	jsr $cf73			jsr Dup			; ( nt nt )
.9f55	20 ba bd	jsr $bdba			jsr Name_To_Int		; ( nt xt )
.9f58	a9 4e		lda #$4e			lda #<str_see_xt	; print xt
.9f5a	a0 da		ldy #$da			ldy #>str_see_xt
.9f5c	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.9f5f	20 73 cf	jsr $cf73			jsr Dup			; ( nt xt xt )
.9f62	20 1c a9	jsr $a91c			jsr Dot_Hex
.9f65	20 7c ab	jsr $ab7c			jsr CR			; ( nt xt )
.9f68	a9 41		lda #$41			lda #<str_see_flags
.9f6a	a0 da		ldy #$da			ldy #>str_see_flags
.9f6c	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.9f6f	20 4c cf	jsr $cf4c			jsr Over		; ( nt xt nt )
.9f72	a9 81		lda #$81			lda #Wh_Flags
.9f74	20 29 ca	jsr $ca29			jsr Plus_A		; ( nt xt ^flags )
.9f77	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f79	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f7b	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f7d	20 e9 cd	jsr $cde9	_flag_loop:	jsr Space
.9f80	b9 e4 9f	lda $9fe4,y			lda _FlagLabels+0,y	;   print label
.9f83	20 dd cd	jsr $cddd			jsr Emit_A
.9f86	b9 e5 9f	lda $9fe5,y			lda _FlagLabels+1,y
.9f89	20 dd cd	jsr $cddd			jsr Emit_A
.9f8c	a9 3d		lda #$3d			lda #'='
.9f8e	20 dd cd	jsr $cddd			jsr Emit_A
.9f91	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f93	a9 00		lda #$00			lda #0
.9f95	69 30		adc #$30			adc #'0'
.9f97	20 dd cd	jsr $cddd			jsr Emit_A
.9f9a	88		dey				dey
.9f9b	88		dey				dey
.9f9c	10 df		bpl $9f7d			bpl _flag_loop
.9f9e	e8		inx				inx
.9f9f	e8		inx				inx			; ( nt xt )
.9fa0	20 7c ab	jsr $ab7c			jsr CR
.9fa3	a9 54		lda #$54			lda #<str_see_size	; print size
.9fa5	a0 da		ldy #$da			ldy #>str_see_size
.9fa7	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.9faa	20 90 cf	jsr $cf90			jsr Swap		; ( xt nt )
.9fad	20 35 ab	jsr $ab35			jsr WordSize		; ( xt u )
.9fb0	20 dc b1	jsr $b1dc			jsr Decimal
.9fb3	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fb5	c9 ff		cmp #$ff			cmp #$ff
.9fb7	d0 11		bne $9fca			bne _size5
.9fb9	20 ba b8	jsr $b8ba			jsr sliteral_runtime	;   type "large"
.9fbc	4c c4 9f	jmp $9fc4			  jmp _size2
>9fbf	6c 61 72 67 65					  .text "large"
.9fc4	20 f5 cd	jsr $cdf5	_size2:		jsr Type
.9fc7	4c d0 9f	jmp $9fd0			jmp _size9		;  else
.9fca	20 73 cf	jsr $cf73	_size5:		jsr Dup			;    type size
.9fcd	20 1d cc	jsr $cc1d			jsr U_Dot
.9fd0					_size9:
.9fd0	20 7c ab	jsr $ab7c			jsr CR
.9fd3	68		pla				pla			; restore base
.9fd4	8d 00 03	sta $0300			sta base
.9fd7	20 c1 cc	jsr $ccc1			jsr Two_dup
.9fda	20 76 a8	jsr $a876			jsr Dump		; dump
.9fdd	20 7c ab	jsr $ab7c			jsr CR
.9fe0	20 f4 d7	jsr $d7f4			jsr DisAsm		; disassemble
=171					CodeLen	.var *-XtPtr1
=$9fe3					Here1 = *	; remember here
>9f35	ab					.byte CodeLen	;patch wh_CodeLength
.9fe3	60		rts				rts
>9fe4	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fec	4e 4e 41 4e 55 46 5f 5f
>9ff4	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ffc	72 64 4c 69 73 74
=14					NameLength = *-Name0
=40834					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a002	8e					.byte (("Forth-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>a003	10					.byte WordFlags	;wh_Flags
>a004	03					.byte 3	;wh_CodeLength
>a005	cf					  .byte LinkDisplacement	; offset to previous nt
=$a006					XtPtr1 ::= *
=40834					WordListLink ::= Nt0 ; remember the nt of this word for later
.a006	4c 03 b8	jmp $b803	Forth_WordList:	jmp Zero
=3					CodeLen	.var *-XtPtr1
=$a009					Here1 = *	; remember here
>a004	03					.byte CodeLen	;patch wh_CodeLength
>a009	45 64 69 74 6f 72 2d 57		Name0:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a011	6f 72 64 4c 69 73 74
=15					NameLength = *-Name0
=40856					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a018	8f					.byte (("Editor-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a019	10					.byte WordFlags	;wh_Flags
>a01a	03					.byte 3	;wh_CodeLength
>a01b	16					  .byte LinkDisplacement	; offset to previous nt
=$a01c					XtPtr1 ::= *
=40856					WordListLink ::= Nt0 ; remember the nt of this word for later
.a01c					Editor_WordList:
.a01c	4c 0c b8	jmp $b80c			jmp One
=3					CodeLen	.var *-XtPtr1
=$a01f					Here1 = *	; remember here
>a01a	03					.byte CodeLen	;patch wh_CodeLength
>a01f	41 73 73 65 6d 62 6c 65		Name0:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a027	72 2d 57 6f 72 64 4c 69 73 74
=18					NameLength = *-Name0
=40881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a031	92					.byte (("Assembler-WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a032	10					.byte WordFlags	;wh_Flags
>a033	03					.byte 3	;wh_CodeLength
>a034	19					  .byte LinkDisplacement	; offset to previous nt
=$a035					XtPtr1 ::= *
=40881					WordListLink ::= Nt0 ; remember the nt of this word for later
.a035					Assembler_WordList:
.a035	4c 15 b8	jmp $b815			jmp Two
=3					CodeLen	.var *-XtPtr1
=$a038					Here1 = *	; remember here
>a033	03					.byte CodeLen	;patch wh_CodeLength
>a038	52 6f 6f 74 2d 57 6f 72		Name0:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a040	64 6c 69 73 74
=13					NameLength = *-Name0
=40901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a045	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a046	10					.byte WordFlags	;wh_Flags
>a047	03					.byte 3	;wh_CodeLength
>a048	14					  .byte LinkDisplacement	; offset to previous nt
=$a049					XtPtr1 ::= *
=40901					WordListLink ::= Nt0 ; remember the nt of this word for later
.a049	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a04b	4c f5 b7	jmp $b7f5			jmp PushZA
=5					CodeLen	.var *-XtPtr1
=$a04e					Here1 = *	; remember here
>a047	05					.byte CodeLen	;patch wh_CodeLength
>a04e	4f 6e 6c 79			Name0:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a052	24					.byte (("Only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a053	10					.byte WordFlags	;wh_Flags
>a054	03					.byte 3	;wh_CodeLength
>a055	0d					  .byte LinkDisplacement	; offset to previous nt
=$a056					XtPtr1 ::= *
=40914					WordListLink ::= Nt0 ; remember the nt of this word for later
.a056	20 d5 b7	jsr $b7d5	Only:		jsr True	; Push -1
.a059	4c 76 a1	jmp $a176			jmp Set_Order	; set the minimum search order.
=6					CodeLen	.var *-XtPtr1
=$a05c					Here1 = *	; remember here
>a054	06					.byte CodeLen	;patch wh_CodeLength
>a05c	41 6c 73 6f			Name0:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=40928					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a060	e4					.byte (("Also"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a061	10					.byte WordFlags	;wh_Flags
>a062	03					.byte 3	;wh_CodeLength
>a063	0e					  .byte LinkDisplacement	; offset to previous nt
=$a064					XtPtr1 ::= *
=40928					WordListLink ::= Nt0 ; remember the nt of this word for later
.a064	20 a6 a1	jsr $a1a6	Also:		jsr Get_Order
.a067	20 4c cf	jsr $cf4c			jsr Over
.a06a	20 90 cf	jsr $cf90			jsr Swap
.a06d	20 77 ca	jsr $ca77			jsr One_plus
.a070	4c 76 a1	jmp $a176			jmp Set_Order
=15					CodeLen	.var *-XtPtr1
=$a073					Here1 = *	; remember here
>a062	0f					.byte CodeLen	;patch wh_CodeLength
>a073	50 72 65 76 69 6f 75 73		Name0:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=40955					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a07b	68					.byte (("Previous"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a07c	10					.byte WordFlags	;wh_Flags
>a07d	03					.byte 3	;wh_CodeLength
>a07e	1b					  .byte LinkDisplacement	; offset to previous nt
=$a07f					XtPtr1 ::= *
=40955					WordListLink ::= Nt0 ; remember the nt of this word for later
.a07f	20 a6 a1	jsr $a1a6	Previous:	jsr Get_Order
.a082	20 ad c9	jsr $c9ad			jsr Nip
.a085	20 52 ca	jsr $ca52			jsr One_minus
.a088	4c 76 a1	jmp $a176			jmp Set_Order
=12					CodeLen	.var *-XtPtr1
=$a08b					Here1 = *	; remember here
>a07d	0c					.byte CodeLen	;patch wh_CodeLength
>a08b	3e 4f 72 64 65 72		Name0:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=40977					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a091	46					.byte ((">Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a092	10					.byte WordFlags	;wh_Flags
>a093	03					.byte 3	;wh_CodeLength
>a094	16					  .byte LinkDisplacement	; offset to previous nt
=$a095					XtPtr1 ::= *
=40977					WordListLink ::= Nt0 ; remember the nt of this word for later
.a095					To_Order:
.a095	20 fd ce	jsr $cefd			jsr To_R		; Put the wid on the return stack for now.
.a098	20 a6 a1	jsr $a1a6			jsr Get_Order		; Get the current search order.
.a09b	20 1b cf	jsr $cf1b			jsr R_From		; Get back the wid and add it to the list.
.a09e	20 90 cf	jsr $cf90			jsr Swap
.a0a1	20 77 ca	jsr $ca77			jsr One_plus
.a0a4	4c 76 a1	jmp $a176			jmp Set_Order		; Set the search order with the new list.
=18					CodeLen	.var *-XtPtr1
=$a0a7					Here1 = *	; remember here
>a093	12					.byte CodeLen	;patch wh_CodeLength
>a0a7	4f 72 64 65 72			Name0:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0ac	45					.byte (("Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0ad	10					.byte WordFlags	;wh_Flags
>a0ae	03					.byte 3	;wh_CodeLength
>a0af	1b					  .byte LinkDisplacement	; offset to previous nt
=$a0b0					XtPtr1 ::= *
=41004					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0b0					Order:
.a0b0	20 7c ab	jsr $ab7c			jsr CR
.a0b3	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0b5	f0 0b		beq $a0c2			beq _test
.a0b7	98		tya		_loop:		tya
.a0b8	48		pha				pha
.a0b9	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0bc	20 cd a0	jsr $a0cd			jsr print_wid_stringA	; internal helper function
.a0bf	68		pla				pla
.a0c0	a8		tay				tay
.a0c1	c8		iny				iny			;  next
.a0c2	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0c5	90 f0		bcc $a0b7			bcc _loop
.a0c7	20 7c ab	jsr $ab7c			jsr CR
.a0ca	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0cd					print_wid_stringA:
.a0cd	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0cf	90 06		bcc $a0d7			bcc _string
.a0d1	20 f5 b7	jsr $b7f5			jsr PushZA		; print the WID number
.a0d4	4c 1d cc	jmp $cc1d			jmp U_Dot		; JSR/RTS
.a0d7	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d8	a8		tay				tay
.a0d9	ca		dex				dex			; TOS= word nt
.a0da	ca		dex				dex
.a0db	b9 f3 a0	lda $a0f3,y			lda _wid_Table+0,y
.a0de	95 24		sta $24,x			sta DStack+0,x
.a0e0	b9 f4 a0	lda $a0f4,y			lda _wid_Table+1,y
.a0e3	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0e5	20 03 be	jsr $be03			jsr Name_To_String	; ( addr u )
.a0e8	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0ea	20 67 ca	jsr $ca67			jsr Minus_A
.a0ed	20 f5 cd	jsr $cdf5			jsr Type		; Print
.a0f0	4c e9 cd	jmp $cde9			jmp Space
=67					CodeLen	.var *-XtPtr1
=$a0f3					Here1 = *	; remember here
>a0ae	43					.byte CodeLen	;patch wh_CodeLength
.a0f3					_wid_Table:
>a0f3	82 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0f5	98 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f7	b1 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f9	c5 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0fb	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41088					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a100	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a101	10					.byte WordFlags	;wh_Flags
>a102	03					.byte 3	;wh_CodeLength
>a103	54					  .byte LinkDisplacement	; offset to previous nt
=$a104					XtPtr1 ::= *
=41088					WordListLink ::= Nt0 ; remember the nt of this word for later
.a104	a9 00		lda #$00	Forth:		lda #wid_Forth
.a106	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CodeLen	.var *-XtPtr1
=$a109					Here1 = *	; remember here
>a102	05					.byte CodeLen	;patch wh_CodeLength
.a109	60		rts				rts
>a10a	44 65 66 69 6e 69 74 69		Name0:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a112	6f 6e 73
=11					NameLength = *-Name0
=41109					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a115	6b					.byte (("Definitions"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a116	10					.byte WordFlags	;wh_Flags
>a117	03					.byte 3	;wh_CodeLength
>a118	15					  .byte LinkDisplacement	; offset to previous nt
=$a119					XtPtr1 ::= *
=41109					WordListLink ::= Nt0 ; remember the nt of this word for later
.a119	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a11c	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CodeLen	.var *-XtPtr1
=$a11f					Here1 = *	; remember here
>a117	06					.byte CodeLen	;patch wh_CodeLength
.a11f	60		rts				rts
>a120	57 6f 72 64 4c 69 73 74		Name0:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a128	88					.byte (("WordList"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a129	10					.byte WordFlags	;wh_Flags
>a12a	03					.byte 3	;wh_CodeLength
>a12b	13					  .byte LinkDisplacement	; offset to previous nt
=$a12c					XtPtr1 ::= *
=41128					WordListLink ::= Nt0 ; remember the nt of this word for later
.a12c					WordList:
.a12c	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a12f	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a131	90 05		bcc $a138			bcc +
.a133	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a135	4c 8c b4	jmp $b48c			jmp ThrowA
.a138					+
.a138	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a13b	4c f5 b7	jmp $b7f5			jmp PushZA		; and put it on the stack.
=18					CodeLen	.var *-XtPtr1
=$a13e					Here1 = *	; remember here
>a12a	12					.byte CodeLen	;patch wh_CodeLength
>a13e	53 65 74 2d 43 75 72 72		Name0:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a146	65 6e 74
=11					NameLength = *-Name0
=41161					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a149	8b					.byte (("Set-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a14a	00					.byte WordFlags	;wh_Flags
>a14b	03					.byte 3	;wh_CodeLength
>a14c	21					  .byte LinkDisplacement	; offset to previous nt
=$a14d					XtPtr1 ::= *
=41161					WordListLink ::= Nt0 ; remember the nt of this word for later
.a14d	20 ec b3	jsr $b3ec	Set_Current:	jsr PopA	; pop wid
.a150	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CodeLen	.var *-XtPtr1
=$a153					Here1 = *	; remember here
>a14b	06					.byte CodeLen	;patch wh_CodeLength
.a153	60		rts				rts
>a154	47 65 74 2d 43 75 72 72		Name0:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a15c	65 6e 74
=11					NameLength = *-Name0
=41183					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a15f	8b					.byte (("Get-Current"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a160	10					.byte WordFlags	;wh_Flags
>a161	03					.byte 3	;wh_CodeLength
>a162	16					  .byte LinkDisplacement	; offset to previous nt
=$a163					XtPtr1 ::= *
=41183					WordListLink ::= Nt0 ; remember the nt of this word for later
.a163					Get_Current:
.a163	ad 10 03	lda $0310			lda CurrentV
.a166	4c f5 b7	jmp $b7f5			jmp PushZA	; CURRENT is a byte variable
=6					CodeLen	.var *-XtPtr1
=$a169					Here1 = *	; remember here
>a161	06					.byte CodeLen	;patch wh_CodeLength
>a169	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a171	72
=9					NameLength = *-Name0
=41202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a172	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a173	10					.byte WordFlags	;wh_Flags
>a174	03					.byte 3	;wh_CodeLength
>a175	13					  .byte LinkDisplacement	; offset to previous nt
=$a176					XtPtr1 ::= *
=41202					WordListLink ::= Nt0 ; remember the nt of this word for later
.a176					Set_Order:
.a176	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a178	10 08		bpl $a182			bpl _start
.a17a	e8		inx				inx			; Drop
.a17b	e8		inx				inx
.a17c	20 49 a0	jsr $a049			jsr Root_Wordlist	; wid
.a17f	20 0c b8	jsr $b80c			jsr One			; Count is 1.
.a182					_start:
.a182	20 ec b3	jsr $b3ec			jsr PopA	; pop count
.a185	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a188	a0 00		ldy #$00			ldy #0
.a18a	f0 07		beq $a193			beq _test
.a18c					_loop:
.a18c	20 ec b3	jsr $b3ec			jsr PopA		; The search order is a byte array
.a18f	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a192	c8		iny				iny
.a193					_test:
.a193	cc 2a 03	cpy $032a			cpy Num_orderV
.a196	d0 f4		bne $a18c			bne _loop
=34					CodeLen	.var *-XtPtr1
=$a198					Here1 = *	; remember here
>a174	22					.byte CodeLen	;patch wh_CodeLength
.a198	60		rts				rts
>a199	47 65 74 2d 4f 72 64 65		Name0:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a1a1	72
=9					NameLength = *-Name0
=41250					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1a2	49					.byte (("Get-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a1a3	10					.byte WordFlags	;wh_Flags
>a1a4	03					.byte 3	;wh_CodeLength
>a1a5	30					  .byte LinkDisplacement	; offset to previous nt
=$a1a6					XtPtr1 ::= *
=41250					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1a6					Get_Order:
.a1a6	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a9	f0 09		beq $a1b4			beq _done	; If zero, there are no wordlists.
.a1ab					_loop:
.a1ab	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1ae	20 f5 b7	jsr $b7f5			jsr PushZA
.a1b1	88		dey				dey
.a1b2	d0 f7		bne $a1ab			bne _loop		; See if that was the last one to process (first in the list).
.a1b4					_done:
.a1b4	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b7	4c f5 b7	jmp $b7f5			jmp PushZA
=20					CodeLen	.var *-XtPtr1
=$a1ba					Here1 = *	; remember here
>a1a4	14					.byte CodeLen	;patch wh_CodeLength
>a1ba	53 65 61 72 63 68 2d 57		Name0:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1c2	6f 72 64 6c 69 73 74
=15					NameLength = *-Name0
=41289					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c9	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1ca	10					.byte WordFlags	;wh_Flags
>a1cb	03					.byte 3	;wh_CodeLength
>a1cc	27					  .byte LinkDisplacement	; offset to previous nt
=$a1cd					XtPtr1 ::= *
=41289					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1cd					Search_WordList:
.a1cd	20 ec b3	jsr $b3ec			jsr PopA		; Pop wid
.a1d0	48		pha				pha
.a1d1	20 a5 bc	jsr $bca5			jsr swl_prepare 	; ( 0 u )
.a1d4	e8		inx				inx
.a1d5	e8		inx				inx			; ( 0 )
.a1d6	68		pla				pla			; pop wid
.a1d7	20 d2 bc	jsr $bcd2			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1da	f0 1f		beq $a1fb			beq _NotFound
.a1dc	a0 81		ldy #$81			ldy #wh_Flags
.a1de	b1 14		lda ($14),y			lda (tmp1),y
.a1e0	29 03		and #$03			and #FP+DB
.a1e2	18		clc				clc
.a1e3	69 82		adc #$82			adc #wh_LinkNt-1
.a1e5	65 14		adc $14				adc tmp1+0		; TOS= xt
.a1e7	95 24		sta $24,x			sta DStack+0,x
.a1e9	a9 00		lda #$00			lda #0
.a1eb	65 15		adc $15				adc tmp1+1
.a1ed	95 25		sta $25,x			sta DStack+1,x
.a1ef	b1 14		lda ($14),y			lda (tmp1),y
.a1f1	29 08		and #$08			and #IM
.a1f3	d0 03		bne $a1f8			bne _immediate		; bit set, we're immediate
.a1f5	4c d5 b7	jmp $b7d5			jmp True		; We're not immediate, return -1
.a1f8	4c 0c b8	jmp $b80c	_immediate:	jmp One			; We're immediate, return 1
.a1fb					_NotFound:
.a1fb	60		rts				rts
=47					CodeLen	.var *-XtPtr1
=$a1fc					Here1 = *	; remember here
>a1cb	2f					.byte CodeLen	;patch wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1fc					BlockInit:
.a1fc	a9 00		lda #$00			lda #0
.a1fe	8d 3f 03	sta $033f			sta BuffStatusV
.a201	a9 30		lda #$30			lda #<Platform_Block_Read
.a203	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a205	8d 39 03	sta $0339			sta BlockReadV+0
.a208	8c 3a 03	sty $033a			sty BlockReadV+1
.a20b	a9 30		lda #$30			lda #<Platform_Block_Write
.a20d	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a20f	8d 3b 03	sta $033b			sta BlockWriteV+0
.a212	8c 3c 03	sty $033c			sty BlockWriteV+1
.a215	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a216	42 6c 6f 63 6b 2d 52 61		Name0:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a21e	6d 44 72 69 76 65 2d 49 6e 69 74
=19					NameLength = *-Name0
=41385					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a229	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>a22a	50					.byte WordFlags	;wh_Flags
>a22b	03					.byte 3	;wh_CodeLength
>a22c	60					  .byte LinkDisplacement	; offset to previous nt
=$a22d					XtPtr1 ::= *
=41385					WordListLink ::= Nt0 ; remember the nt of this word for later
.a22d					Block_RamDrive_Init:
.a22d	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a22f	20 f5 b7	jsr $b7f5			jsr PushZA
.a232	20 5c cb	jsr $cb5c			jsr LShift
.a235	20 45 ca	jsr $ca45			jsr Here		; ( size addr )
.a238	8d 41 07	sta $0741			sta RamDriveV+0
.a23b	8c 42 07	sty $0742			sty RamDriveV+1
.a23e	20 4c cf	jsr $cf4c			jsr Over
.a241	20 bf c0	jsr $c0bf			jsr Allot		; Create ramdrive buffer
.a244	20 90 cf	jsr $cf90			jsr Swap		; blank the buffer
.a247	20 4a be	jsr $be4a			jsr Blank
.a24a	a9 5f		lda #$5f			lda #<_read		; set block read vector
.a24c	a0 a2		ldy #$a2			ldy #>_read
.a24e	8d 39 03	sta $0339			sta BlockReadV+0
.a251	8c 3a 03	sty $033a			sty BlockReadV+1
.a254	a9 6f		lda #$6f			lda #<_write		; set block write vector
.a256	a0 a2		ldy #$a2			ldy #>_write
.a258	8d 3b 03	sta $033b			sta BlockWriteV+0
.a25b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a25e	60		rts				rts
=50					CodeLen	.var *-XtPtr1
=$a25f					Here1 = *	; remember here
>a22b	32					.byte CodeLen	;patch wh_CodeLength
.a25f					_read:
.a25f	20 7c a2	jsr $a27c			jsr _addr
.a262	20 90 cf	jsr $cf90			jsr Swap
.a265	a9 00		lda #$00			lda #0
.a267	a0 04		ldy #$04			ldy #>1024
.a269	20 c6 b7	jsr $b7c6			jsr PushYA
.a26c	4c 90 ad	jmp $ad90			jmp Move
.a26f					_write:
.a26f	20 7c a2	jsr $a27c			jsr _addr
.a272	a9 00		lda #$00			lda #0
.a274	a0 04		ldy #$04			ldy #>1024
.a276	20 c6 b7	jsr $b7c6			jsr PushYA
.a279	4c 90 ad	jmp $ad90			jmp Move
.a27c					_addr:
.a27c	a9 0a		lda #$0a			lda #10
.a27e	20 f5 b7	jsr $b7f5			jsr PushZA
.a281	20 5c cb	jsr $cb5c			jsr LShift
.a284	20 96 a2	jsr $a296			jsr RamDrive
.a287	4c bc cb	jmp $cbbc			jmp Plus
>a28a	52 61 6d 44 72 69 76 65		Name0:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=41490					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a292	a8					.byte (("RamDrive"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a293	10					.byte WordFlags	;wh_Flags
>a294	03					.byte 3	;wh_CodeLength
>a295	69					  .byte LinkDisplacement	; offset to previous nt
=$a296					XtPtr1 ::= *
=41490					WordListLink ::= Nt0 ; remember the nt of this word for later
.a296	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a299	ac 42 07	ldy $0742			ldy RamDriveV+1
.a29c	4c c6 b7	jmp $b7c6			jmp PushYA
=9					CodeLen	.var *-XtPtr1
=$a29f					Here1 = *	; remember here
>a294	09					.byte CodeLen	;patch wh_CodeLength
>a29f	42 75 66 66 53 74 61 74		Name0:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a2a7	75 73
=10					NameLength = *-Name0
=41513					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2a9	6a					.byte (("BuffStatus"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2aa	10					.byte WordFlags	;wh_Flags
>a2ab	03					.byte 3	;wh_CodeLength
>a2ac	17					  .byte LinkDisplacement	; offset to previous nt
=$a2ad					XtPtr1 ::= *
=41513					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2ad	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a2af	a9 3f		lda #$3f			lda #<BuffStatusV
.a2b1	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2b4					Here1 = *	; remember here
>a2ab	07					.byte CodeLen	;patch wh_CodeLength
>a2b4	42 75 66 66 42 6c 6f 63		Name0:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2bc	6b 4e 75 6d
=12					NameLength = *-Name0
=41536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2c0	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2c1	10					.byte WordFlags	;wh_Flags
>a2c2	03					.byte 3	;wh_CodeLength
>a2c3	17					  .byte LinkDisplacement	; offset to previous nt
=$a2c4					XtPtr1 ::= *
=41536					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2c4	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2c6	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2c8	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2cb					Here1 = *	; remember here
>a2c2	07					.byte CodeLen	;patch wh_CodeLength
>a2cb	42 6c 6b 42 75 66 66 65		Name0:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2d3	72
=9					NameLength = *-Name0
=41556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2d4	49					.byte (("BlkBuffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2d5	10					.byte WordFlags	;wh_Flags
>a2d6	03					.byte 3	;wh_CodeLength
>a2d7	14					  .byte LinkDisplacement	; offset to previous nt
=$a2d8					XtPtr1 ::= *
=41556					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d8	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2da	a9 41		lda #$41			lda #<BlockBuffer
.a2dc	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2df					Here1 = *	; remember here
>a2d6	07					.byte CodeLen	;patch wh_CodeLength
>a2df	53 63 72			Name0:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2e2	43					.byte (("Scr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2e3	10					.byte WordFlags	;wh_Flags
>a2e4	03					.byte 3	;wh_CodeLength
>a2e5	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2e6					XtPtr1 ::= *
=41570					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2e6	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2e8	a9 0e		lda #$0e			lda #<ScrV
.a2ea	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2ed					Here1 = *	; remember here
>a2e4	07					.byte CodeLen	;patch wh_CodeLength
>a2ed	42 6c 6b			Name0:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=41584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2f0	63					.byte (("Blk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2f1	10					.byte WordFlags	;wh_Flags
>a2f2	03					.byte 3	;wh_CodeLength
>a2f3	0e					  .byte LinkDisplacement	; offset to previous nt
=$a2f4					XtPtr1 ::= *
=41584					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2f4	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2f6	a9 0c		lda #$0c			lda #<BlkV
.a2f8	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a2fb					Here1 = *	; remember here
>a2f2	07					.byte CodeLen	;patch wh_CodeLength
>a2fb	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a303	69 74 65
=11					NameLength = *-Name0
=41606					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a306	ab					.byte (("Block-Write"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a307	10					.byte WordFlags	;wh_Flags
>a308	03					.byte 3	;wh_CodeLength
>a309	16					  .byte LinkDisplacement	; offset to previous nt
=$a30a					XtPtr1 ::= *
=41606					WordListLink ::= Nt0 ; remember the nt of this word for later
.a30a	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a30d					Here1 = *	; remember here
>a308	03					.byte CodeLen	;patch wh_CodeLength
>a30d	42 6c 6f 63 6b 2d 57 72		Name0:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a315	69 74 65 2d 56 65 63 74 6f 72
=18					NameLength = *-Name0
=41631					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a31f	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a320	10					.byte WordFlags	;wh_Flags
>a321	03					.byte 3	;wh_CodeLength
>a322	19					  .byte LinkDisplacement	; offset to previous nt
=$a323					XtPtr1 ::= *
=41631					WordListLink ::= Nt0 ; remember the nt of this word for later
.a323					Block_Write_Vector:
.a323	a0 03		ldy #$03			ldy #>BlockWriteV
.a325	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a327	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a32a					Here1 = *	; remember here
>a321	07					.byte CodeLen	;patch wh_CodeLength
>a32a	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a332	61 64
=10					NameLength = *-Name0
=41652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a334	8a					.byte (("Block-Read"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a335	10					.byte WordFlags	;wh_Flags
>a336	03					.byte 3	;wh_CodeLength
>a337	15					  .byte LinkDisplacement	; offset to previous nt
=$a338					XtPtr1 ::= *
=41652					WordListLink ::= Nt0 ; remember the nt of this word for later
.a338	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CodeLen	.var *-XtPtr1
=$a33b					Here1 = *	; remember here
>a336	03					.byte CodeLen	;patch wh_CodeLength
>a33b	42 6c 6f 63 6b 2d 52 65		Name0:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a343	61 64 2d 56 65 63 74 6f 72
=17					NameLength = *-Name0
=41676					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a34c	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a34d	10					.byte WordFlags	;wh_Flags
>a34e	03					.byte 3	;wh_CodeLength
>a34f	18					  .byte LinkDisplacement	; offset to previous nt
=$a350					XtPtr1 ::= *
=41676					WordListLink ::= Nt0 ; remember the nt of this word for later
.a350					Block_Read_Vector:
.a350	a0 03		ldy #$03			ldy #>BlockReadV
.a352	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a354	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a357					Here1 = *	; remember here
>a34e	07					.byte CodeLen	;patch wh_CodeLength
>a357	53 61 76 65 2d 42 75 66		Name0:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a35f	66 65 72 73
=12					NameLength = *-Name0
=41699					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a363	6c					.byte (("Save-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a364	00					.byte WordFlags	;wh_Flags
>a365	03					.byte 3	;wh_CodeLength
>a366	17					  .byte LinkDisplacement	; offset to previous nt
=$a367					XtPtr1 ::= *
=41699					WordListLink ::= Nt0 ; remember the nt of this word for later
.a367					Save_Buffers:
.a367	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a36a	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a36c	d0 11		bne $a37f			bne _done	; Either not used or not dirty = done!
.a36e	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a371	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a374	20 b5 ce	jsr $ceb5			jsr Fetch
.a377	20 0a a3	jsr $a30a			jsr Block_Write
.a37a	a9 01		lda #$01			lda #1
.a37c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a37f					_done:
=24					CodeLen	.var *-XtPtr1
=$a37f					Here1 = *	; remember here
>a365	18					.byte CodeLen	;patch wh_CodeLength
.a37f	60		rts				rts
>a380	42 6c 6f 63 6b			Name0:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41733					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a385	65					.byte (("Block"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a386	00					.byte WordFlags	;wh_Flags
>a387	03					.byte 3	;wh_CodeLength
>a388	22					  .byte LinkDisplacement	; offset to previous nt
=$a389					XtPtr1 ::= *
=41733					WordListLink ::= Nt0 ; remember the nt of this word for later
.a389					Block:
.a389	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a38c	d5 24		cmp $24,x			cmp DStack+0,x
.a38e	d0 0e		bne $a39e			bne _not_in_buffer
.a390	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a393	d5 25		cmp $25,x			cmp DStack+1,x
.a395	d0 07		bne $a39e			bne _not_in_buffer
.a397	ad 3f 03	lda $033f			lda BuffStatusV+0
.a39a	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a39c	d0 2d		bne $a3cb			bne _done	; It's already in the buffer and in use.
.a39e					_not_in_buffer:
.a39e	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3a1	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3a3	d0 0c		bne $a3b1			bne _buffer_available ; Unused or not dirty = available
.a3a5	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3a8	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a3ab	20 b5 ce	jsr $ceb5			jsr Fetch
.a3ae	20 0a a3	jsr $a30a			jsr Block_Write
.a3b1					_buffer_available:
.a3b1	b5 24		lda $24,x			lda DStack+0,x
.a3b3	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3b6	b5 25		lda $25,x			lda DStack+1,x
.a3b8	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3bb	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3be	20 90 cf	jsr $cf90			jsr Swap
.a3c1	20 38 a3	jsr $a338			jsr Block_Read
.a3c4	a9 01		lda #$01			lda #1
.a3c6	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3c9	ca		dex				dex
.a3ca	ca		dex				dex
.a3cb					_done:
.a3cb	a9 41		lda #$41			lda #<BlockBuffer
.a3cd	95 24		sta $24,x			sta DStack+0,x
.a3cf	a9 03		lda #$03			lda #>BlockBuffer
.a3d1	95 25		sta $25,x			sta DStack+1,x
=74					CodeLen	.var *-XtPtr1
=$a3d3					Here1 = *	; remember here
>a387	4a					.byte CodeLen	;patch wh_CodeLength
.a3d3	60		rts				rts
>a3d4	55 70 64 61 74 65		Name0:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3da	a6					.byte (("Update"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3db	00					.byte WordFlags	;wh_Flags
>a3dc	03					.byte 3	;wh_CodeLength
>a3dd	55					  .byte LinkDisplacement	; offset to previous nt
=$a3de					XtPtr1 ::= *
=41818					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3de					Update:
.a3de	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3e1	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3e3	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CodeLen	.var *-XtPtr1
=$a3e6					Here1 = *	; remember here
>a3dc	08					.byte CodeLen	;patch wh_CodeLength
.a3e6	60		rts				rts
>a3e7	42 75 66 66 65 72		Name0:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=41837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3ed	46					.byte (("Buffer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3ee	10					.byte WordFlags	;wh_Flags
>a3ef	03					.byte 3	;wh_CodeLength
>a3f0	13					  .byte LinkDisplacement	; offset to previous nt
=$a3f1					XtPtr1 ::= *
=41837					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3f1					Buffer:
.a3f1	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3f4	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3f6	d0 0c		bne $a404			bne _buffer_available ; Unused or not dirty = available
.a3f8	20 d8 a2	jsr $a2d8			jsr BlkBuffer
.a3fb	20 c4 a2	jsr $a2c4			jsr BuffBlockNum
.a3fe	20 b5 ce	jsr $ceb5			jsr Fetch
.a401	20 0a a3	jsr $a30a			jsr Block_Write
.a404					_buffer_available:
.a404	b5 24		lda $24,x			lda DStack+0,x
.a406	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a409	b5 25		lda $25,x			lda DStack+1,x
.a40b	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a40e	a9 01		lda #$01			lda #1
.a410	8d 3f 03	sta $033f			sta BuffStatusV+0
.a413					_done:
.a413	a9 41		lda #$41			lda #<BlockBuffer
.a415	95 24		sta $24,x			sta DStack+0,x
.a417	a9 03		lda #$03			lda #>BlockBuffer
.a419	95 25		sta $25,x			sta DStack+1,x
=42					CodeLen	.var *-XtPtr1
=$a41b					Here1 = *	; remember here
>a3ef	2a					.byte CodeLen	;patch wh_CodeLength
.a41b	60		rts				rts
>a41c	45 6d 70 74 79 2d 42 75		Name0:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a424	66 66 65 72 73
=13					NameLength = *-Name0
=41897					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a429	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a42a	10					.byte WordFlags	;wh_Flags
>a42b	03					.byte 3	;wh_CodeLength
>a42c	3c					  .byte LinkDisplacement	; offset to previous nt
=$a42d					XtPtr1 ::= *
=41897					WordListLink ::= Nt0 ; remember the nt of this word for later
.a42d	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a42f	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CodeLen	.var *-XtPtr1
=$a432					Here1 = *	; remember here
>a42b	05					.byte CodeLen	;patch wh_CodeLength
.a432	60		rts				rts
>a433	46 6c 75 73 68			Name0:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=41912					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a438	05					.byte (("Flush"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a439	10					.byte WordFlags	;wh_Flags
>a43a	03					.byte 3	;wh_CodeLength
>a43b	0f					  .byte LinkDisplacement	; offset to previous nt
=$a43c					XtPtr1 ::= *
=41912					WordListLink ::= Nt0 ; remember the nt of this word for later
.a43c	20 67 a3	jsr $a367	Flush:		jsr Save_Buffers
.a43f	4c 2d a4	jmp $a42d			jmp Empty_Buffers
=6					CodeLen	.var *-XtPtr1
=$a442					Here1 = *	; remember here
>a43a	06					.byte CodeLen	;patch wh_CodeLength
>a442	4c 6f 61 64			Name0:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=41926					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a446	84					.byte (("Load"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a447	40					.byte WordFlags	;wh_Flags
>a448	03					.byte 3	;wh_CodeLength
>a449	0e					  .byte LinkDisplacement	; offset to previous nt
=$a44a					XtPtr1 ::= *
=41926					WordListLink ::= Nt0 ; remember the nt of this word for later
.a44a					Load:
.a44a	20 30 b4	jsr $b430			jsr underflow_1
.a44d	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a450	48		pha				pha
.a451	ad 0c 03	lda $030c			lda BlkV+0
.a454	48		pha				pha
.a455	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a457	8d 0c 03	sta $030c			sta BlkV+0
.a45a	b5 25		lda $25,x			lda DStack+1,x
.a45c	8d 0d 03	sta $030d			sta BlkV+1
.a45f	20 89 a3	jsr $a389			jsr Block		; Load that block into a buffer
.a462	a9 00		lda #$00			lda #<1024		; block length.
.a464	a0 04		ldy #$04			ldy #>1024
.a466	20 c6 b7	jsr $b7c6			jsr PushYA
.a469	38		sec				sec		; Set a flag to not zero BLK
.a46a	20 17 b0	jsr $b017			jsr load_evaluate
.a46d	68		pla				pla
.a46e	8d 0c 03	sta $030c			sta BlkV+0
.a471	68		pla				pla
.a472	8d 0d 03	sta $030d			sta BlkV+1
.a475	0d 0c 03	ora $030c			ora BlkV+0
.a478	f0 13		beq $a48d			beq _done
.a47a	ad 0c 03	lda $030c			lda BlkV+0
.a47d	ac 0d 03	ldy $030d			ldy BlkV+1
.a480	20 c6 b7	jsr $b7c6			jsr PushYA
.a483	20 89 a3	jsr $a389			jsr Block
.a486	20 07 b4	jsr $b407			jsr PopYA	; Pop the buffer address.
.a489	85 04		sta $04				sta cib+0
.a48b	84 05		sty $05				sty cib+1
.a48d					_done:
=67					CodeLen	.var *-XtPtr1
=$a48d					Here1 = *	; remember here
>a448	43					.byte CodeLen	;patch wh_CodeLength
.a48d	60		rts				rts
>a48e	54 68 72 75			Name0:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42002					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a492	a4					.byte (("Thru"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a493	50					.byte WordFlags	;wh_Flags
>a494	03					.byte 3	;wh_CodeLength
>a495	4c					  .byte LinkDisplacement	; offset to previous nt
=$a496					XtPtr1 ::= *
=42002					WordListLink ::= Nt0 ; remember the nt of this word for later
.a496					Thru:
.a496	20 44 b4	jsr $b444			jsr underflow_2
.a499	20 fd ce	jsr $cefd			jsr To_R
.a49c					_loop:
.a49c	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a49e	48		pha				pha
.a49f	b5 24		lda $24,x			lda DStack+0,x
.a4a1	48		pha				pha
.a4a2	20 4a a4	jsr $a44a			jsr Load		; Load this screen.
.a4a5	20 1b cf	jsr $cf1b			jsr R_From		; Get the screen # we just loaded.
.a4a8	20 77 ca	jsr $ca77			jsr One_plus		; increment
.a4ab	86 14		stx $14				stx tmp1
.a4ad	ba		tsx				tsx
.a4ae	8a		txa				txa
.a4af	a8		tay				tay
.a4b0	a6 14		ldx $14				ldx tmp1
.a4b2	b9 01 01	lda $0101,y			lda RStack+1,y
.a4b5	d5 24		cmp $24,x			cmp DStack+0,x
.a4b7	b9 02 01	lda $0102,y			lda RStack+2,y
.a4ba	f5 25		sbc $25,x			sbc DStack+1,x
.a4bc	b0 de		bcs $a49c			bcs _loop
.a4be	e8		inx				inx			; Drop index
.a4bf	e8		inx				inx
.a4c0	68		pla				pla			; RDrop limit
.a4c1	68		pla				pla
=44					CodeLen	.var *-XtPtr1
=$a4c2					Here1 = *	; remember here
>a494	2c					.byte CodeLen	;patch wh_CodeLength
.a4c2	60		rts				rts
>a4c3	4c 69 73 74			Name0:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42055					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4c7	84					.byte (("List"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4c8	10					.byte WordFlags	;wh_Flags
>a4c9	03					.byte 3	;wh_CodeLength
>a4ca	35					  .byte LinkDisplacement	; offset to previous nt
=$a4cb					XtPtr1 ::= *
=42055					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4cb	20 07 b4	jsr $b407	List:		jsr PopYA	; Save the screen number
.a4ce	8d 0e 03	sta $030e			sta ScrV+0
.a4d1	8c 0f 03	sty $030f			sty ScrV+1
.a4d4					ListScr:
.a4d4	20 e6 a2	jsr $a2e6			jsr Scr
.a4d7	20 b5 ce	jsr $ceb5			jsr Fetch
.a4da	20 89 a3	jsr $a389			jsr Block	; Get the current screen contents.
.a4dd	20 7c ab	jsr $ab7c			jsr CR
.a4e0	20 ba b8	jsr $b8ba			jsr SLiteral_Runtime
.a4e3	4c ee a4	jmp $a4ee			  jmp +				; for SLiteral_Runtime
>a4e6	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4ee					+
.a4ee	20 f5 cd	jsr $cdf5			jsr Type
.a4f1	20 e6 a2	jsr $a2e6			jsr Scr		; print screen number
.a4f4	20 b5 ce	jsr $ceb5			jsr Fetch
.a4f7	a9 04		lda #$04			lda #4		;    in 4 positions
.a4f9	20 4f cc	jsr $cc4f			jsr U_Dot_R_A
.a4fc	a9 00		lda #$00			lda #0			; line #
.a4fe					_line_loop:
.a4fe	48		pha				pha
.a4ff	20 7c ab	jsr $ab7c			jsr CR
.a502	68		pla				pla		; Print the line number
.a503	48		pha				pha
.a504	20 f5 b7	jsr $b7f5			jsr PushZA
.a507	a9 02		lda #$02			lda #2		;   in 2 positions
.a509	20 4f cc	jsr $cc4f			jsr U_Dot_R_A
.a50c	20 e9 cd	jsr $cde9			jsr Space
.a50f	20 73 cf	jsr $cf73			jsr Dup		; Print one line using the address on the stack.
.a512	a9 40		lda #$40			lda #64
.a514	20 f5 b7	jsr $b7f5			jsr PushZA
.a517	20 f5 cd	jsr $cdf5			jsr Type
.a51a	a9 40		lda #$40			lda #64		; move address to the next line.
.a51c	20 29 ca	jsr $ca29			jsr Plus_A
.a51f	68		pla				pla		; Increment the line number
.a520	18		clc				clc
.a521	69 01		adc #$01			adc #1
.a523	c9 10		cmp #$10			cmp #16		; See if we are done.
.a525	d0 d7		bne $a4fe			bne _line_loop
.a527	e8		inx				inx		; Drop the address
.a528	e8		inx				inx
.a529	4c 7c ab	jmp $ab7c			jmp CR
=97					CodeLen	.var *-XtPtr1
=$a52c					Here1 = *	; remember here
>a4c9	61					.byte CodeLen	;patch wh_CodeLength
>a52c	44 65 66 65 72			Name0:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42161					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a531	45					.byte (("Defer"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a532	10					.byte WordFlags	;wh_Flags
>a533	03					.byte 3	;wh_CodeLength
>a534	6a					  .byte LinkDisplacement	; offset to previous nt
=$a535					XtPtr1 ::= *
=42161					WordListLink ::= Nt0 ; remember the nt of this word for later
.a535					Defer:
.a535	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.a538	a9 42		lda #$42			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a53a	a0 a5		ldy #$a5			ldy #>_undefined
.a53c	20 54 cd	jsr $cd54			jsr Jmp_Comma_YA
.a53f	4c e3 bb	jmp $bbe3			jmp adjust_z		; set word length
=13					CodeLen	.var *-XtPtr1
=$a542					Here1 = *	; remember here
>a533	0d					.byte CodeLen	;patch wh_CodeLength
.a542					_undefined:
.a542	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a544	4c 8c b4	jmp $b48c			jmp ThrowA
>a547	44 65 66 65 72 21		Name0:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a54d	26					.byte (("Defer!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a54e	10					.byte WordFlags	;wh_Flags
>a54f	03					.byte 3	;wh_CodeLength
>a550	1c					  .byte LinkDisplacement	; offset to previous nt
=$a551					XtPtr1 ::= *
=42189					WordListLink ::= Nt0 ; remember the nt of this word for later
.a551	20 07 b4	jsr $b407	Defer_Store:	jsr PopYA
.a554	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a556	84 15		sty $15				sty tmp1+1
.a558	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a55a	a0 01		ldy #$01			ldy #1
.a55c	91 14		sta ($14),y			sta (tmp1),y
.a55e	b5 25		lda $25,x			lda DStack+1,x
.a560	c8		iny				iny
.a561	91 14		sta ($14),y			sta (tmp1),y
.a563	4c ac cf	jmp $cfac			jmp Drop		; Drop xt2
=21					CodeLen	.var *-XtPtr1
=$a566					Here1 = *	; remember here
>a54f	15					.byte CodeLen	;patch wh_CodeLength
>a566	44 65 66 65 72 40		Name0:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a56c	06					.byte (("Defer@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a56d	10					.byte WordFlags	;wh_Flags
>a56e	03					.byte 3	;wh_CodeLength
>a56f	1f					  .byte LinkDisplacement	; offset to previous nt
=$a570					XtPtr1 ::= *
=42220					WordListLink ::= Nt0 ; remember the nt of this word for later
.a570	20 07 b4	jsr $b407	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a573	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a575	84 15		sty $15				sty tmp1+1
.a577	ca		dex				dex		; push DEFERs JMP abs operand
.a578	ca		dex				dex
.a579	a0 01		ldy #$01			ldy #1
.a57b	b1 14		lda ($14),y			lda (tmp1),y
.a57d	95 24		sta $24,x			sta DStack+0,x
.a57f	c8		iny				iny
.a580	b1 14		lda ($14),y			lda (tmp1),y
.a582	95 25		sta $25,x			sta DStack+1,x
.a584	60		rts				rts
=21					CodeLen	.var *-XtPtr1
=$a585					Here1 = *	; remember here
>a56e	15					.byte CodeLen	;patch wh_CodeLength
>a585	49 73				Name0:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42247					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a587	62					.byte (("Is"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a588	18					.byte WordFlags	;wh_Flags
>a589	03					.byte 3	;wh_CodeLength
>a58a	1b					  .byte LinkDisplacement	; offset to previous nt
=$a58b					XtPtr1 ::= *
=42247					WordListLink ::= Nt0 ; remember the nt of this word for later
.a58b					Is:
.a58b	20 49 bc	jsr $bc49			jsr Tick		; get xt of "name"
.a58e	a5 0a		lda $0a				lda state		; Check STATE
.a590	f0 bf		beq $a551			beq Defer_Store		; interpreting, put xt in the DEFER word
.a592					_compiling:
.a592	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a595	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a597	a9 54		lda #$54			lda #<Defer_Store_YA
.a599	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a59c					Here1 = *	; remember here
>a589	11					.byte CodeLen	;patch wh_CodeLength
>a59c	41 63 74 69 6f 6e 2d 4f		Name0:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a5a4	66
=9					NameLength = *-Name0
=42277					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5a5	c9					.byte (("Action-Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a5a6	18					.byte WordFlags	;wh_Flags
>a5a7	03					.byte 3	;wh_CodeLength
>a5a8	1e					  .byte LinkDisplacement	; offset to previous nt
=$a5a9					XtPtr1 ::= *
=42277					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5a9					Action_Of:
.a5a9	20 49 bc	jsr $bc49			jsr Tick		; get xt of "name"
.a5ac	a5 0a		lda $0a				lda state		; Check STATE
.a5ae	f0 c0		beq $a570			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a5b0					_compiling:
.a5b0	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5b3	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5b5	a9 73		lda #$73			lda #<Defer_Fetch_YA
.a5b7	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a5ba					Here1 = *	; remember here
>a5a7	11					.byte CodeLen	;patch wh_CodeLength
>a5ba	55 73 65 72 41 64 64 72		Name0:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=42306					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5c2	48					.byte (("UserAddr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5c3	10					.byte WordFlags	;wh_Flags
>a5c4	03					.byte 3	;wh_CodeLength
>a5c5	1d					  .byte LinkDisplacement	; offset to previous nt
=$a5c6					XtPtr1 ::= *
=42306					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5c6	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5c8	a9 ff		lda #$ff			lda #<User0
.a5ca	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$a5cd					Here1 = *	; remember here
>a5c4	07					.byte CodeLen	;patch wh_CodeLength
>a5cd	42 75 66 66 65 72 3a		Name0:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42324					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5d4	47					.byte (("Buffer:"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5d5	10					.byte WordFlags	;wh_Flags
>a5d6	03					.byte 3	;wh_CodeLength
>a5d7	12					  .byte LinkDisplacement	; offset to previous nt
=$a5d8					XtPtr1 ::= *
=42324					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d8	20 c6 c1	jsr $c1c6	Buffer_Colon:	jsr Create
.a5db	4c bf c0	jmp $c0bf			jmp Allot
=6					CodeLen	.var *-XtPtr1
=$a5de					Here1 = *	; remember here
>a5d6	06					.byte CodeLen	;patch wh_CodeLength
>a5de	43 61 73 65			Name0:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5e2	a4					.byte (("Case"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5e3	1c					.byte WordFlags	;wh_Flags
>a5e4	03					.byte 3	;wh_CodeLength
>a5e5	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5e6					XtPtr1 ::= *
=42338					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5e6					Case:
.a5e6	4c 03 b8	jmp $b803			jmp Zero	; init jmp fixup chain
=3					CodeLen	.var *-XtPtr1
=$a5e9					Here1 = *	; remember here
>a5e4	03					.byte CodeLen	;patch wh_CodeLength
>a5e9	45 6e 64 43 61 73 65		Name0:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5f0	a7					.byte (("EndCase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5f1	1c					.byte WordFlags	;wh_Flags
>a5f2	03					.byte 3	;wh_CodeLength
>a5f3	0e					  .byte LinkDisplacement	; offset to previous nt
=$a5f4					XtPtr1 ::= *
=42352					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5f4					EndCase:
.a5f4	20 2e cd	jsr $cd2e			jsr Drop_Comma
.a5f7					_loop:
.a5f7	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5f9	f0 06		beq $a601			beq _done
.a5fb	20 76 a6	jsr $a676			jsr Then	;   fixup another one
.a5fe	4c f7 a5	jmp $a5f7			jmp _loop
.a601					_done:
.a601	e8		inx				inx		; Drop the 0
.a602	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$a603					Here1 = *	; remember here
>a5f2	0f					.byte CodeLen	;patch wh_CodeLength
.a603	60		rts				rts
>a604	4f 66				Name0:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42374					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a606	c2					.byte (("Of"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a607	1c					.byte WordFlags	;wh_Flags
>a608	03					.byte 3	;wh_CodeLength
>a609	16					  .byte LinkDisplacement	; offset to previous nt
=$a60a					XtPtr1 ::= *
=42374					WordListLink ::= Nt0 ; remember the nt of this word for later
.a60a					Of:
.a60a	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a60c	a9 1f		lda #$1f			lda #<_runtime
.a60e	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.a611	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a613	20 04 cd	jsr $cd04			jsr C_Comma_A
.a616	20 45 ca	jsr $ca45			jsr Here		; Put the origination address on the stack for else/then
.a619	20 03 b8	jsr $b803			jsr Zero
.a61c	4c 18 cd	jmp $cd18			jmp Comma
=21					CodeLen	.var *-XtPtr1
=$a61f					Here1 = *	; remember here
>a608	15					.byte CodeLen	;patch wh_CodeLength
.a61f					_runtime:
.a61f	e8		inx				inx		; Drop x2
.a620	e8		inx				inx
.a621	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a623	d5 24		cmp $24,x			cmp DStack+0,x
.a625	d0 06		bne $a62d			bne _NotEq
.a627	b5 23		lda $23,x			lda DStack-1,x
.a629	d5 25		cmp $25,x			cmp DStack+1,x
.a62b	f0 31		beq $a65e			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a62d	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a62e	45 6e 64 4f 66			Name0:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a633	c5					.byte (("EndOf"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a634	1c					.byte WordFlags	;wh_Flags
>a635	03					.byte 3	;wh_CodeLength
>a636	2d					  .byte LinkDisplacement	; offset to previous nt
=$a637					XtPtr1 ::= *
=42419					WordListLink ::= Nt0 ; remember the nt of this word for later
.a637	4c 87 a6	jmp $a687	EndOf:		jmp Else
=3					CodeLen	.var *-XtPtr1
=$a63a					Here1 = *	; remember here
>a635	03					.byte CodeLen	;patch wh_CodeLength
>a63a	49 66				Name0:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42428					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a63c	c2					.byte (("If"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a63d	1c					.byte WordFlags	;wh_Flags
>a63e	03					.byte 3	;wh_CodeLength
>a63f	09					  .byte LinkDisplacement	; offset to previous nt
=$a640					XtPtr1 ::= *
=42428					WordListLink ::= Nt0 ; remember the nt of this word for later
.a640					If:
.a640	20 51 a6	jsr $a651	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a643					zbranch_jmp0_comma:
.a643	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a645	20 04 cd	jsr $cd04			jsr C_Comma_A
.a648	20 45 ca	jsr $ca45			jsr Here		; save ptr to address for else/then
.a64b	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a64d	a8		tay				tay			; THEN or ELSE will fix it later.
.a64e	4c 1b cd	jmp $cd1b			jmp Comma_YA
=17					CodeLen	.var *-XtPtr1
=$a651					Here1 = *	; remember here
>a63e	11					.byte CodeLen	;patch wh_CodeLength
=$cd51					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a651					zbranch_jsr_comma:
.a651	a0 a6		ldy #$a6			ldy #>_runtime
.a653	a9 58		lda #$58			lda #<_runtime
.a655	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
.a658					_runtime:
.a658	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a65a	15 25		ora $25,x			ora DStack+1,x
.a65c	f0 0d		beq $a66b			beq zbranch_run_done
.a65e	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a65f	68		pla				pla
.a660	69 03		adc #$03			adc #3
.a662	90 06		bcc $a66a			bcc +
.a664	a8		tay				tay
.a665	68		pla				pla
.a666	69 00		adc #$00			adc #0
.a668	48		pha				pha
.a669	98		tya				tya
.a66a	48		pha		+		pha
.a66b					zbranch_run_done:
.a66b	e8		inx				inx			; Drop f
.a66c	e8		inx				inx
.a66d	60		rts				rts
>a66e	54 68 65 6e			Name0:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a672	c4					.byte (("Then"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a673	1c					.byte WordFlags	;wh_Flags
>a674	03					.byte 3	;wh_CodeLength
>a675	36					  .byte LinkDisplacement	; offset to previous nt
=$a676					XtPtr1 ::= *
=42482					WordListLink ::= Nt0 ; remember the nt of this word for later
.a676					Then:
.a676	20 45 ca	jsr $ca45			jsr Here
.a679	20 90 cf	jsr $cf90			jsr Swap
.a67c	4c ce ce	jmp $cece			jmp Store
=9					CodeLen	.var *-XtPtr1
=$a67f					Here1 = *	; remember here
>a674	09					.byte CodeLen	;patch wh_CodeLength
>a67f	45 6c 73 65			Name0:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a683	a4					.byte (("Else"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a684	1c					.byte WordFlags	;wh_Flags
>a685	03					.byte 3	;wh_CodeLength
>a686	11					  .byte LinkDisplacement	; offset to previous nt
=$a687					XtPtr1 ::= *
=42499					WordListLink ::= Nt0 ; remember the nt of this word for later
.a687					Else:
.a687	20 43 a6	jsr $a643			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a68a	20 45 ca	jsr $ca45			jsr Here
.a68d	20 6e ce	jsr $ce6e			jsr Rot
.a690	4c ce ce	jmp $cece			jmp Store
=12					CodeLen	.var *-XtPtr1
=$a693					Here1 = *	; remember here
>a685	0c					.byte CodeLen	;patch wh_CodeLength
>a693	42 65 67 69 6e			Name0:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a698	c5					.byte (("Begin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a699	1c					.byte WordFlags	;wh_Flags
>a69a	03					.byte 3	;wh_CodeLength
>a69b	15					  .byte LinkDisplacement	; offset to previous nt
=$a69c					XtPtr1 ::= *
=42520					WordListLink ::= Nt0 ; remember the nt of this word for later
.a69c	20 45 ca	jsr $ca45	Begin:		jsr Here	; remember the loop starting location
.a69f	a9 9c		lda #$9c			lda #<Begin	; pairing marker
.a6a1	4c f5 b7	jmp $b7f5			jmp PushZA
=8					CodeLen	.var *-XtPtr1
=$a6a4					Here1 = *	; remember here
>a69a	08					.byte CodeLen	;patch wh_CodeLength
>a6a4	41 67 61 69 6e			Name0:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6a9	c5					.byte (("Again"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6aa	5c					.byte WordFlags	;wh_Flags
>a6ab	03					.byte 3	;wh_CodeLength
>a6ac	11					  .byte LinkDisplacement	; offset to previous nt
=$a6ad					XtPtr1 ::= *
=42537					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ad	20 44 b4	jsr $b444	Again:		jsr underflow_2
.a6b0	a9 9c		lda #$9c			lda #<Begin	; check pairing
.a6b2	20 1a b2	jsr $b21a			jsr QPairCtlA
.a6b5	4c 51 cd	jmp $cd51			jmp Jmp_Comma	; Compile a jmp abs.
=11					CodeLen	.var *-XtPtr1
=$a6b8					Here1 = *	; remember here
>a6ab	0b					.byte CodeLen	;patch wh_CodeLength
>a6b8	55 6e 74 69 6c			Name0:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42557					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6bd	85					.byte (("Until"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6be	1c					.byte WordFlags	;wh_Flags
>a6bf	03					.byte 3	;wh_CodeLength
>a6c0	14					  .byte LinkDisplacement	; offset to previous nt
=$a6c1					XtPtr1 ::= *
=42557					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6c1	a9 9c		lda #$9c	Until:		lda #<Begin		; check pairing
.a6c3	20 1a b2	jsr $b21a			jsr QPairCtlA
.a6c6	4c fd a6	jmp $a6fd			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CodeLen	.var *-XtPtr1
=$a6c9					Here1 = *	; remember here
>a6bf	08					.byte CodeLen	;patch wh_CodeLength
>a6c9	57 68 69 6c 65			Name0:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=42574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6ce	a5					.byte (("While"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6cf	1c					.byte WordFlags	;wh_Flags
>a6d0	03					.byte 3	;wh_CodeLength
>a6d1	11					  .byte LinkDisplacement	; offset to previous nt
=$a6d2					XtPtr1 ::= *
=42574					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6d2	a9 9c		lda #$9c	While:		lda #<Begin	; check pairing
.a6d4	20 1a b2	jsr $b21a			jsr QPairCtlA
.a6d7	20 40 a6	jsr $a640			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6da	20 90 cf	jsr $cf90			jsr Swap	; Swap the two addresses on the stack.
.a6dd	a9 9c		lda #$9c			lda #<Begin	; pairing marker
.a6df	4c f5 b7	jmp $b7f5			jmp PushZA
=16					CodeLen	.var *-XtPtr1
=$a6e2					Here1 = *	; remember here
>a6d0	10					.byte CodeLen	;patch wh_CodeLength
>a6e2	52 65 70 65 61 74		Name0:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=42600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6e8	86					.byte (("Repeat"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6e9	1c					.byte WordFlags	;wh_Flags
>a6ea	03					.byte 3	;wh_CodeLength
>a6eb	1a					  .byte LinkDisplacement	; offset to previous nt
=$a6ec					XtPtr1 ::= *
=42600					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ec	a9 9c		lda #$9c	Repeat:		lda #<Begin	; check pairing
.a6ee	20 1a b2	jsr $b21a			jsr QPairCtlA
.a6f1	20 51 cd	jsr $cd51			jsr Jmp_Comma	; compile the jmp back
.a6f4	20 45 ca	jsr $ca45			jsr Here	; patch the WHILE jmp operand
.a6f7	20 90 cf	jsr $cf90			jsr Swap
.a6fa	4c ce ce	jmp $cece			jmp Store
=17					CodeLen	.var *-XtPtr1
=$a6fd					Here1 = *	; remember here
>a6ea	11					.byte CodeLen	;patch wh_CodeLength
.a6fd					ZBranch_Comma:
.a6fd	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6ff	a8		tay				tay
.a700	20 1b cd	jsr $cd1b			jsr Comma_YA
.a703	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a705	a0 22		ldy #$22			ldy #DStack-2
.a707	20 1b cd	jsr $cd1b			jsr Comma_YA
.a70a	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a70c	a0 23		ldy #$23			ldy #DStack-1
.a70e	20 1b cd	jsr $cd1b			jsr Comma_YA
.a711	a9 f0		lda #$f0			lda #$f0		; BEQ
.a713	d0 0e		bne $a723			bne Branch_CommaA
>a715	42 72 61 6e 63 68 2c		Name0:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=42652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a71c	87					.byte (("Branch,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a71d	10					.byte WordFlags	;wh_Flags
>a71e	03					.byte 3	;wh_CodeLength
>a71f	34					  .byte LinkDisplacement	; offset to previous nt
=$a720					XtPtr1 ::= *
=42652					WordListLink ::= Nt0 ; remember the nt of this word for later
.a720	20 ec b3	jsr $b3ec			jsr PopA		; pop opcode to A
.a723					Branch_CommaA:
.a723	48		pha				pha			; save branch opcode
.a724	38		sec				sec			; AY= displacement+2
.a725	b5 24		lda $24,x			lda DStack+0,x
.a727	e5 00		sbc $00				sbc cp+0
.a729	a8		tay				tay
.a72a	b5 25		lda $25,x			lda DStack+1,x
.a72c	e5 01		sbc $01				sbc cp+1
.a72e	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a730	f0 0b		beq $a73d			beq _rev
.a732	68		pla		_2byte:		pla			; restore branch opcode
.a733	49 20		eor #$20			eor #$20		; reverse branch sense
.a735	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a737	20 1b cd	jsr $cd1b			jsr Comma_YA
.a73a	4c 51 cd	jmp $cd51			jmp Jmp_Comma		; compile JMP abs
.a73d	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a73f	90 f1		bcc $a732			bcc _2byte
.a741	e8		inx		_1byte:		inx			; Drop address
.a742	e8		inx				inx
.a743	88		dey				dey			; fix displacement
.a744	88		dey				dey
.a745	68		pla				pla			; restore branch opcode
.a746	4c 1b cd	jmp $cd1b			jmp Comma_YA		; compile Bcc
>a749	57 6f 72 64			Name0:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42701					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a74d	84					.byte (("Word"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a74e	50					.byte WordFlags	;wh_Flags
>a74f	03					.byte 3	;wh_CodeLength
>a750	31					  .byte LinkDisplacement	; offset to previous nt
=$a751					XtPtr1 ::= *
=42701					WordListLink ::= Nt0 ; remember the nt of this word for later
.a751					Word:
.a751	20 30 b4	jsr $b430			jsr underflow_1
.a754	a4 08		ldy $08				ldy toin+0		; >IN
.a756	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a758	f0 09		beq $a763			beq _found_char
.a75a	b1 04		lda ($04),y			lda (cib),y
.a75c	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a75e	d0 03		bne $a763			bne _found_char
.a760	c8		iny				iny
.a761	d0 f3		bne $a756			bne _DelimLoop
.a763					_found_char:
.a763	84 08		sty $08				sty toin+0		; Save index of where word starts
.a765	20 cc ba	jsr $bacc			jsr Parse		; The real work is done by parse
.a768	20 ec b3	jsr $b3ec			jsr PopA		; pop u
.a76b	85 16		sta $16				sta tmp2+0
.a76d	20 12 b4	jsr $b412			jsr PopTmp1		; pop addr
.a770	20 45 ca	jsr $ca45			jsr Here		; Return caddr
.a773	a5 16		lda $16				lda tmp2+0
.a775	a0 00		ldy #$00			ldy #0			; Save length of string
.a777	f0 03		beq $a77c			beq _CopyStart
.a779	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a77b	c8		iny				iny
.a77c	20 04 cd	jsr $cd04	_CopyStart:	jsr C_Comma_A
.a77f	c4 16		cpy $16				cpy tmp2+0
.a781	90 f6		bcc $a779			bcc _CopyLoop
=50					CodeLen	.var *-XtPtr1
=$a783					Here1 = *	; remember here
>a74f	32					.byte CodeLen	;patch wh_CodeLength
.a783	60		rts				rts
>a784	28				Name0:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=42757					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a785	01					.byte (("("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a786	18					.byte WordFlags	;wh_Flags
>a787	03					.byte 3	;wh_CodeLength
>a788	38					  .byte LinkDisplacement	; offset to previous nt
=$a789					XtPtr1 ::= *
=42757					WordListLink ::= Nt0 ; remember the nt of this word for later
.a789	a9 29		lda #$29	Paren:		lda #')'		; separator
.a78b	20 cf ba	jsr $bacf			jsr Parse_A		; Call parse.
.a78e	4c 53 c5	jmp $c553			jmp Two_drop		; 2Drop the result.
=8					CodeLen	.var *-XtPtr1
=$a791					Here1 = *	; remember here
>a787	08					.byte CodeLen	;patch wh_CodeLength
>a791	2e 28				Name0:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=42771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a793	02					.byte ((".("[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a794	18					.byte WordFlags	;wh_Flags
>a795	03					.byte 3	;wh_CodeLength
>a796	0e					  .byte LinkDisplacement	; offset to previous nt
=$a797					XtPtr1 ::= *
=42771					WordListLink ::= Nt0 ; remember the nt of this word for later
.a797	a9 29		lda #$29	Dot_paren:	lda #')'
.a799	20 cf ba	jsr $bacf			jsr Parse_A
.a79c	4c f5 cd	jmp $cdf5			jmp Type
=8					CodeLen	.var *-XtPtr1
=$a79f					Here1 = *	; remember here
>a795	08					.byte CodeLen	;patch wh_CodeLength
>a79f	48 61 73 68			Name0:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42787					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7a3	04					.byte (("Hash"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a7a4	10					.byte WordFlags	;wh_Flags
>a7a5	03					.byte 3	;wh_CodeLength
>a7a6	10					  .byte LinkDisplacement	; offset to previous nt
=$a7a7					XtPtr1 ::= *
=42787					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7a7	20 ec b3	jsr $b3ec	Hash:		jsr PopA		; save length
.a7aa	85 16		sta $16				sta tmp2+0
.a7ac	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a7ae	b4 25		ldy $25,x			ldy DStack+1,x
.a7b0	85 14		sta $14				sta tmp1+0
.a7b2	84 15		sty $15				sty tmp1+1
.a7b4	a9 b3		lda #$b3			lda #$b3		; init hash
.a7b6	95 24		sta $24,x			sta DStack+0,x
.a7b8	95 25		sta $25,x			sta DStack+1,x
.a7ba	a0 00		ldy #$00			ldy #0			; for each char
.a7bc	f0 15		beq $a7d3			beq _next
.a7be	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7c0	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7c2	90 06		bcc $a7ca			bcc _3
.a7c4	c9 7b		cmp #$7b			cmp #'z'+1
.a7c6	b0 02		bcs $a7ca			bcs _3
.a7c8	29 df		and #$df			and #$df
.a7ca	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7cc	36 25		rol $25,x			rol DStack+1,x
.a7ce	75 24		adc $24,x			adc DStack+0,x
.a7d0	95 24		sta $24,x			sta DStack+0,x
.a7d2	c8		iny				iny
.a7d3	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7d5	90 e7		bcc $a7be			bcc _loop
=48					CodeLen	.var *-XtPtr1
=$a7d7					Here1 = *	; remember here
>a7a5	30					.byte CodeLen	;patch wh_CodeLength
.a7d7	60		rts				rts
>a7d8	45 6e 76 69 72 6f 6e 6d		Name0:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7e0	65 6e 74 3f
=12					NameLength = *-Name0
=42852					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7e4	ec					.byte (("Environment?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7e5	10					.byte WordFlags	;wh_Flags
>a7e6	03					.byte 3	;wh_CodeLength
>a7e7	41					  .byte LinkDisplacement	; offset to previous nt
=$a7e8					XtPtr1 ::= *
=42852					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7e8					Environment_Q:
.a7e8	20 a7 a7	jsr $a7a7			jsr Hash		; ( hash )
.a7eb	a0 00		ldy #$00			ldy #0			; Y= table index
.a7ed	f0 0a		beq $a7f9			beq _entry_test
.a7ef	98		tya		_entry_next:	tya
.a7f0	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7f2	90 02		bcc $a7f6			bcc +
.a7f4	69 01		adc #$01			adc #6-4-1		;   skip double
.a7f6	69 04		adc #$04	+		adc #4			;   skip single
.a7f8	a8		tay		_3:		tay
.a7f9	b9 2d a8	lda $a82d,y	_entry_test:	lda _Table+0,y		; match?
.a7fc	f0 28		beq $a826			beq _notfound
.a7fe	d5 24		cmp $24,x			cmp DStack+0,x
.a800	d0 ed		bne $a7ef			bne _entry_next
.a802	b9 2e a8	lda $a82e,y			lda _Table+1,y
.a805	d5 25		cmp $25,x			cmp DStack+1,x
.a807	d0 e6		bne $a7ef			bne _entry_next
.a809	b9 2f a8	lda $a82f,y			lda _Table+2,y
.a80c	95 24		sta $24,x			sta DStack+0,x
.a80e	b9 30 a8	lda $a830,y			lda _Table+3,y
.a811	95 25		sta $25,x			sta DStack+1,x
.a813	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a815	90 0c		bcc $a823			bcc _single
.a817	ca		dex				dex			;  push 2nd cell
.a818	ca		dex				dex
.a819	b9 31 a8	lda $a831,y			lda _Table+4,y
.a81c	95 24		sta $24,x			sta DStack+0,x
.a81e	b9 32 a8	lda $a832,y			lda _Table+5,y
.a821	95 25		sta $25,x			sta DStack+1,x
.a823					_single:
.a823	4c d5 b7	jmp $b7d5			jmp True		; return True
.a826					_notfound:
.a826	a9 00		lda #$00			lda #0			; return 0
.a828	95 24		sta $24,x			sta DStack+0,x
.a82a	95 25		sta $25,x			sta DStack+1,x
.a82c	60		rts				rts
=69					CodeLen	.var *-XtPtr1
=$a82d					Here1 = *	; remember here
>a7e6	45					.byte CodeLen	;patch wh_CodeLength
.a82d					_Table:
>a82d	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a831	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a835	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a839	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a83d	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a841	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a845	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a849	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a84d	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a851	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a855	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a859	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a85d	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a861	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a867	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a86d	00					.byte 0		; end of list
>a86e	44 75 6d 70			Name0:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=42994					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a872	04					.byte (("Dump"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a873	50					.byte WordFlags	;wh_Flags
>a874	03					.byte 3	;wh_CodeLength
>a875	8e					  .byte LinkDisplacement	; offset to previous nt
=$a876					XtPtr1 ::= *
=42994					WordListLink ::= Nt0 ; remember the nt of this word for later
.a876					Dump:
.a876	20 44 b4	jsr $b444			jsr underflow_2
.a879	ca		dex				dex			; alloc work area
.a87a	ca		dex				dex
.a87b					_row:
.a87b	20 7c ab	jsr $ab7c			jsr CR
.a87e	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a880	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a883	b5 28		lda $28,x			lda DStack+4,x
.a885	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a888	20 e9 cd	jsr $cde9			jsr Space
.a88b	20 e9 cd	jsr $cde9			jsr Space
.a88e	a9 00		lda #$00			lda #0
.a890	95 24		sta $24,x			sta DStack+0,x
.a892					_loop:
.a892	b5 26		lda $26,x			lda DStack+2,x
.a894	15 27		ora $27,x			ora DStack+3,x
.a896	f0 36		beq $a8ce			beq _all_printed
.a898	a1 28		lda ($28,x)			lda (DStack+4,x)
.a89a	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a89d	20 e9 cd	jsr $cde9			jsr Space
.a8a0	a1 28		lda ($28,x)			lda (DStack+4,x)
.a8a2	20 24 a9	jsr $a924			jsr is_printable
.a8a5	b0 02		bcs $a8a9			bcs _printable
.a8a7	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a8a9					_printable:
.a8a9	b4 24		ldy $24,x			ldy DStack+0,x
.a8ab	91 00		sta ($00),y			sta (cp),y
.a8ad	c0 07		cpy #$07			cpy #7
.a8af	d0 03		bne $a8b4			bne +
.a8b1	20 e9 cd	jsr $cde9			jsr Space
.a8b4					+
.a8b4	f6 28		inc $28,x			inc DStack+4,x
.a8b6	d0 02		bne $a8ba			bne +
.a8b8	f6 29		inc $29,x			inc DStack+5,x
.a8ba					+
.a8ba	20 5e ca	jsr $ca5e			jsr NOS_One_Minus	; loop counter
.a8bd	f6 24		inc $24,x			inc DStack+0,x
.a8bf	b5 24		lda $24,x			lda DStack+0,x
.a8c1	c9 10		cmp #$10			cmp #16
.a8c3	90 cd		bcc $a892			bcc _loop		; next byte
.a8c5	20 e9 cd	jsr $cde9			jsr Space
.a8c8	20 dd a8	jsr $a8dd			jsr dump_print_ascii
.a8cb	4c 7b a8	jmp $a87b			jmp _row		; new row
.a8ce					_all_printed:
.a8ce	b5 24		lda $24,x			lda DStack+0,x
.a8d0	f0 06		beq $a8d8			beq _done
.a8d2	20 e9 cd	jsr $cde9			jsr Space
.a8d5	20 dd a8	jsr $a8dd			jsr dump_print_ascii
.a8d8					_done:
.a8d8	e8		inx				inx			; drop work area
.a8d9	e8		inx				inx
.a8da	4c 53 c5	jmp $c553			jmp Two_drop		; one byte less than 4x INX
.a8dd					dump_print_ascii:
.a8dd	a0 00		ldy #$00			ldy #0
.a8df					_loop:
.a8df	b1 00		lda ($00),y			lda (cp),y
.a8e1	20 dd cd	jsr $cddd			jsr Emit_A
.a8e4	c8		iny				iny
.a8e5	c0 08		cpy #$08			cpy #8
.a8e7	d0 03		bne $a8ec			bne +
.a8e9	20 e9 cd	jsr $cde9			jsr Space
.a8ec					+
.a8ec	98		tya				tya
.a8ed	d5 24		cmp $24,x			cmp DStack+0,x
.a8ef	90 ee		bcc $a8df			bcc _loop
.a8f1	60		rts				rts
=124					CodeLen	.var *-XtPtr1
=$a8f2					Here1 = *	; remember here
>a874	7c					.byte CodeLen	;patch wh_CodeLength
>a8f2	43 2e 48 65 78			Name0:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43127					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8f7	05					.byte (("C.Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8f8	10					.byte WordFlags	;wh_Flags
>a8f9	03					.byte 3	;wh_CodeLength
>a8fa	85					  .byte LinkDisplacement	; offset to previous nt
=$a8fb					XtPtr1 ::= *
=43127					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8fb	20 ec b3	jsr $b3ec	C_Dot_Hex:	jsr PopA
.a8fe	48		pha		C_Dot_Hex_A:	pha
.a8ff	4a		lsr a				lsr		; convert high nibble first
.a900	4a		lsr a				lsr
.a901	4a		lsr a				lsr
.a902	4a		lsr a				lsr
.a903	20 07 a9	jsr $a907			jsr _nibble_to_ascii
.a906	68		pla				pla
.a907					_nibble_to_ascii:
.a907	29 0f		and #$0f			and #$0F	; only use lower nibble
.a909	c9 0a		cmp #$0a			cmp #9+1
.a90b	90 02		bcc $a90f			bcc +
.a90d	69 06		adc #$06			adc #6
.a90f	69 30		adc #$30	+		adc #'0'
.a911	4c dd cd	jmp $cddd			jmp Emit_A
=25					CodeLen	.var *-XtPtr1
=$a914					Here1 = *	; remember here
>a8f9	19					.byte CodeLen	;patch wh_CodeLength
>a914	2e 48 65 78			Name0:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43160					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a918	04					.byte ((".Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a919	10					.byte WordFlags	;wh_Flags
>a91a	03					.byte 3	;wh_CodeLength
>a91b	21					  .byte LinkDisplacement	; offset to previous nt
=$a91c					XtPtr1 ::= *
=43160					WordListLink ::= Nt0 ; remember the nt of this word for later
.a91c	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a91e	20 fe a8	jsr $a8fe			jsr C_Dot_Hex_A
.a921	4c fb a8	jmp $a8fb			jmp C_Dot_Hex	; do lo byte
=8					CodeLen	.var *-XtPtr1
=$a924					Here1 = *	; remember here
>a91a	08					.byte CodeLen	;patch wh_CodeLength
.a924					is_printable:
.a924	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a926	90 07		bcc $a92f	                bcc _done
.a928	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a92a	b0 02		bcs $a92e	                bcs _failed
.a92c	38		sec		                sec
.a92d	60		rts		                rts
.a92e	18		clc		_failed:	clc
.a92f	60		rts		_done:		rts
>a930	2e 53				Name0:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a932	62					.byte ((".S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a933	10					.byte WordFlags	;wh_Flags
>a934	03					.byte 3	;wh_CodeLength
>a935	1a					  .byte LinkDisplacement	; offset to previous nt
=$a936					XtPtr1 ::= *
=43186					WordListLink ::= Nt0 ; remember the nt of this word for later
.a936					Dot_s:
.a936	a9 3c		lda #$3c			lda #'<'
.a938	20 dd cd	jsr $cddd			jsr Emit_A
.a93b	20 4d c2	jsr $c24d			jsr Depth	; ( -- u )
.a93e	20 36 cc	jsr $cc36			jsr print_u
.a941	a9 3e		lda #$3e			lda #'>'
.a943	20 dd cd	jsr $cddd			jsr Emit_A
.a946	20 e9 cd	jsr $cde9			jsr Space
.a949	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a94b	88		dey		_loop:		dey
.a94c	88		dey				dey
.a94d	86 14		stx $14				stx tmp1
.a94f	c4 14		cpy $14				cpy tmp1
.a951	90 15		bcc $a968			bcc _done
.a953	98		tya				tya			; save index
.a954	48		pha				pha
.a955	ca		dex				dex			; push stack[index]
.a956	ca		dex				dex
.a957	b9 24 00	lda $0024,y			lda DStack+0,y
.a95a	95 24		sta $24,x			sta DStack+0,x
.a95c	b9 25 00	lda $0025,y			lda DStack+1,y
.a95f	95 25		sta $25,x			sta DStack+1,x
.a961	20 ec cb	jsr $cbec			jsr Dot
.a964	68		pla				pla			; restore index
.a965	a8		tay				tay
.a966	d0 e3		bne $a94b			bne _loop
.a968					_done:
=50					CodeLen	.var *-XtPtr1
=$a968					Here1 = *	; remember here
>a934	32					.byte CodeLen	;patch wh_CodeLength
.a968	60		rts				rts
>a969	43 6f 6d 70 61 72 65		Name0:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a970	a7					.byte (("Compare"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a971	50					.byte WordFlags	;wh_Flags
>a972	03					.byte 3	;wh_CodeLength
>a973	3e					  .byte LinkDisplacement	; offset to previous nt
=$a974					XtPtr1 ::= *
=43248					WordListLink ::= Nt0 ; remember the nt of this word for later
.a974					Compare:
.a974	20 4e b4	jsr $b44e			jsr underflow_4
.a977	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a979	85 19		sta $19				sta tmp3+1
.a97b	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a97d	b4 27		ldy $27,x			ldy DStack+3,x
.a97f	85 16		sta $16				sta tmp2+0
.a981	84 17		sty $17				sty tmp2+1
.a983	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a985	85 18		sta $18				sta tmp3+0
.a987	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a989	b4 2b		ldy $2b,x			ldy DStack+7,x
.a98b	85 14		sta $14				sta tmp1+0
.a98d	84 15		sty $15				sty tmp1+1
.a98f	a0 00		ldy #$00			ldy #0		; for each char
.a991					_loop:
.a991	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a993	f0 13		beq $a9a8			beq _str1
.a995					_L1:
.a995	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a997	f0 27		beq $a9c0			beq _str2
.a999					_L2:
.a999	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a99b	d1 16		cmp ($16),y			cmp (tmp2),y
.a99d	d0 19		bne $a9b8			bne _neq
.a99f	c8		iny				iny		; to next char
.a9a0	d0 ef		bne $a991			bne _loop
.a9a2	e6 15		inc $15				inc tmp1+1	; to next page
.a9a4	e6 17		inc $17				inc tmp2+1
.a9a6	d0 e9		bne $a991			bne _loop
.a9a8	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a9aa	10 e9		bpl $a995			bpl _L1
.a9ac	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a9ae	d0 0a		bne $a9ba			bne _less
.a9b0	b5 25		lda $25,x			lda DStack+1,x
.a9b2	d0 06		bne $a9ba			bne _less
.a9b4	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9b6	f0 0e		beq $a9c6			beq _gt2
.a9b8	b0 0a		bcs $a9c4	_neq:		bcs _greater
.a9ba	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9bc	95 2a		sta $2a,x			sta DStack+6,x
.a9be	d0 0a		bne $a9ca			bne _done
.a9c0	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9c2	10 d5		bpl $a999			bpl _L2
.a9c4	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9c6	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9c8	a9 00		lda #$00			lda #0
.a9ca	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9cc	8a		txa				txa		; Remove all but the result from the stack.
.a9cd	18		clc				clc
.a9ce	69 06		adc #$06			adc #6
.a9d0	aa		tax				tax
=93					CodeLen	.var *-XtPtr1
=$a9d1					Here1 = *	; remember here
>a972	5d					.byte CodeLen	;patch wh_CodeLength
.a9d1	60		rts				rts
>a9d2	53 65 61 72 63 68		Name0:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9d8	06					.byte (("Search"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9d9	50					.byte WordFlags	;wh_Flags
>a9da	03					.byte 3	;wh_CodeLength
>a9db	68					  .byte LinkDisplacement	; offset to previous nt
=$a9dc					XtPtr1 ::= *
=43352					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9dc					Search:
.a9dc	20 4e b4	jsr $b44e			jsr underflow_4
.a9df	b5 24		lda $24,x			lda DStack+0,x
.a9e1	15 25		ora $25,x			ora DStack+1,x
.a9e3	d0 09		bne $a9ee			bne _start_search
.a9e5	e8		inx				inx		; Drop u2
.a9e6	e8		inx				inx
.a9e7	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9e9	95 24		sta $24,x			sta DStack+0,x
.a9eb	95 25		sta $25,x			sta DStack+1,x
.a9ed	60		rts				rts
.a9ee					_start_search:
.a9ee	20 03 b8	jsr $b803			jsr Zero
.a9f1					_search_loop:
.a9f1	18		clc				clc
.a9f2	b5 24		lda $24,x			lda DStack+0,x
.a9f4	75 26		adc $26,x			adc DStack+2,x
.a9f6	85 14		sta $14				sta tmp1+0
.a9f8	b5 25		lda $25,x			lda DStack+1,x
.a9fa	75 27		adc $27,x			adc DStack+3,x
.a9fc	85 15		sta $15				sta tmp1+1
.a9fe	d5 2b		cmp $2b,x			cmp DStack+7,x
.aa00	90 13		bcc $aa15			bcc _init_comparison ; Obviously less
.aa02	d0 06		bne $aa0a			bne _not_found
.aa04	b5 2a		lda $2a,x			lda DStack+6,x
.aa06	c5 14		cmp $14				cmp tmp1
.aa08	b0 0b		bcs $aa15			bcs _init_comparison
.aa0a					_not_found:
.aa0a	e8		inx				inx		; Remove offset
.aa0b	e8		inx				inx
.aa0c	e8		inx				inx		; Remove u2
.aa0d	e8		inx				inx
.aa0e	a9 00		lda #$00			lda #0
.aa10	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aa12	95 25		sta $25,x			sta DStack+1,x
.aa14	60		rts				rts
.aa15					_init_comparison:
.aa15	18		clc				clc
.aa16	b5 2c		lda $2c,x			lda DStack+8,x
.aa18	75 24		adc $24,x			adc DStack+0,x
.aa1a	85 14		sta $14				sta tmp1
.aa1c	b5 2d		lda $2d,x			lda DStack+9,x
.aa1e	75 25		adc $25,x			adc DStack+1,x
.aa20	85 15		sta $15				sta tmp1+1
.aa22	b5 28		lda $28,x			lda DStack+4,x
.aa24	85 16		sta $16				sta tmp2
.aa26	b5 29		lda $29,x			lda DStack+5,x
.aa28	85 17		sta $17				sta tmp2+1
.aa2a	b5 26		lda $26,x			lda DStack+2,x
.aa2c	85 18		sta $18				sta tmp3+0
.aa2e	b5 27		lda $27,x			lda DStack+3,x
.aa30	85 19		sta $19				sta tmp3+1
.aa32					_comparison_loop:
.aa32	a0 00		ldy #$00			ldy #0
.aa34	b1 14		lda ($14),y			lda (tmp1),y
.aa36	d1 16		cmp ($16),y			cmp (tmp2),y
.aa38	f0 06		beq $aa40			beq _letters_match
.aa3a	20 77 ca	jsr $ca77			jsr One_plus
.aa3d	4c f1 a9	jmp $a9f1			jmp _search_loop
.aa40					_letters_match:
.aa40	e6 14		inc $14				inc tmp1
.aa42	d0 02		bne $aa46			bne +
.aa44	e6 15		inc $15				inc tmp1+1
.aa46					+
.aa46	e6 16		inc $16				inc tmp2
.aa48	d0 02		bne $aa4c			bne +
.aa4a	e6 17		inc $17				inc tmp2+1
.aa4c					+
.aa4c	a5 18		lda $18				lda tmp3
.aa4e	d0 02		bne $aa52			bne +
.aa50	c6 19		dec $19				dec tmp3+1
.aa52					+
.aa52	c6 18		dec $18				dec tmp3
.aa54	a5 18		lda $18				lda tmp3
.aa56	05 19		ora $19				ora tmp3+1
.aa58	d0 d8		bne $aa32			bne _comparison_loop ; Check the next letter
.aa5a	18		clc				clc
.aa5b	b5 24		lda $24,x			lda DStack+0,x
.aa5d	75 2c		adc $2c,x			adc DStack+8,x
.aa5f	95 2c		sta $2c,x			sta DStack+8,x
.aa61	b5 25		lda $25,x			lda DStack+1,x
.aa63	75 2d		adc $2d,x			adc DStack+9,x
.aa65	95 2d		sta $2d,x			sta DStack+9,x
.aa67	38		sec				sec
.aa68	b5 2a		lda $2a,x			lda DStack+6,x
.aa6a	f5 24		sbc $24,x			sbc DStack+0,x
.aa6c	95 2a		sta $2a,x			sta DStack+6,x
.aa6e	b5 2b		lda $2b,x			lda DStack+7,x
.aa70	f5 25		sbc $25,x			sbc DStack+1,x
.aa72	95 2b		sta $2b,x			sta DStack+7,x
.aa74	e8		inx				inx		; drop offset
.aa75	e8		inx				inx
.aa76	e8		inx				inx		; drop u2
.aa77	e8		inx				inx
.aa78	a9 ff		lda #$ff			lda #$FF
.aa7a	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa7c	95 25		sta $25,x			sta DStack+1,x
=162					CodeLen	.var *-XtPtr1
=$aa7e					Here1 = *	; remember here
>a9da	a2					.byte CodeLen	;patch wh_CodeLength
.aa7e	60		rts				rts
>aa7f	4d 61 72 6b 65 72		Name0:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa85	46					.byte (("Marker"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa86	18					.byte WordFlags	;wh_Flags
>aa87	03					.byte 3	;wh_CodeLength
>aa88	ad					  .byte LinkDisplacement	; offset to previous nt
=$aa89					XtPtr1 ::= *
=43525					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa89					Marker:
.aa89	20 45 ca	jsr $ca45			jsr Here		; Save original CP, which
.aa8c	20 26 c1	jsr $c126			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa8f	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa91	a9 a9		lda #$a9			lda #<_runtime
.aa93	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.aa96	20 18 cd	jsr $cd18			jsr Comma		; Append original CP
.aa99	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa9b	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa9e	20 04 cd	jsr $cd04			jsr C_Comma_A
.aaa1	c8		iny				iny
.aaa2	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aaa4	90 f5		bcc $aa9b			bcc _loop
.aaa6	4c 1b c1	jmp $c11b			jmp Header_Link		; link built header into current dictionary
=32					CodeLen	.var *-XtPtr1
=$aaa9					Here1 = *	; remember here
>aa87	20					.byte CodeLen	;patch wh_CodeLength
.aaa9					_runtime:
.aaa9	68		pla				pla		; Pop the RTS address off the stack
.aaaa	85 14		sta $14				sta tmp1+0
.aaac	68		pla				pla
.aaad	85 15		sta $15				sta tmp1+1
.aaaf	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aab1	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aab3	85 00		sta $00				sta cp+0
.aab5	c8		iny				iny
.aab6	b1 14		lda ($14),y			lda (tmp1),y
.aab8	85 01		sta $01				sta cp+1
.aaba	c8		iny				iny
.aabb					_rloop:
.aabb	b1 14		lda ($14),y			lda (tmp1),y
.aabd	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aac0	c8		iny				iny
.aac1	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aac3	90 f6		bcc $aabb			bcc _rloop
.aac5	60		rts				rts
>aac6	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aacb	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aacc	10					.byte WordFlags	;wh_Flags
>aacd	03					.byte 3	;wh_CodeLength
>aace	46					  .byte LinkDisplacement	; offset to previous nt
=$aacf					XtPtr1 ::= *
=43595					WordListLink ::= Nt0 ; remember the nt of this word for later
.aacf					Words:
.aacf	a9 ff		lda #$ff			lda #$ff
.aad1	20 f5 b7	jsr $b7f5			jsr PushZA		; Alloc space for line size & wordlist #
.aad4	ca		dex				dex			; Alloc space for a nt
.aad5	ca		dex				dex
.aad6					_wordlist_next:
.aad6	20 7c ab	jsr $ab7c			jsr CR			; start wordlist on new line
.aad9	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aadb	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aadd	cc 2a 03	cpy $032a			cpy Num_OrderV
.aae0	b0 44		bcs $ab26			bcs _wordslist_done	; ran out of search wordlist entries?
.aae2	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aae5	0a		asl a				asl			; TOS= WORDLISTS[A]
.aae6	a8		tay				tay
.aae7	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aaea	95 24		sta $24,x			sta DStack+0,x
.aaec	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aaef	95 25		sta $25,x			sta DStack+1,x
.aaf1	f0 e3		beq $aad6			beq _wordlist_next	; end of list?
.aaf3					_word_loop:
.aaf3	20 73 cf	jsr $cf73			jsr Dup			; ( wordlist# nt nt )
.aaf6	20 03 be	jsr $be03			jsr Name_To_String	; ( wordlist# nt addr u )
.aaf9	b5 2b		lda $2b,x			lda DStack+7,x
.aafb	38		sec				sec			; don't forget the space between words
.aafc	75 24		adc $24,x			adc DStack+0,x
.aafe	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.ab00	90 05		bcc $ab07			bcc +
.ab02	20 7c ab	jsr $ab7c			jsr CR
.ab05	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.ab07	95 2b		sta $2b,x	+		sta DStack+7,x
.ab09	20 f5 cd	jsr $cdf5			jsr Type		; ( wordlist# nt )
.ab0c	20 e9 cd	jsr $cde9			jsr Space
.ab0f	b5 24		lda $24,x			lda DStack+0,x
.ab11	85 14		sta $14				sta tmp1+0
.ab13	b5 25		lda $25,x			lda DStack+1,x
.ab15	85 15		sta $15				sta tmp1+1
.ab17	20 9b 82	jsr $829b			jsr LinkNext		; tmp1= next word nt in list
.ab1a	a5 14		lda $14				lda tmp1+0
.ab1c	95 24		sta $24,x			sta DStack+0,x
.ab1e	a5 15		lda $15				lda tmp1+1
.ab20	95 25		sta $25,x			sta DStack+1,x
.ab22	d0 cf		bne $aaf3			bne _word_loop		; end of list?
.ab24	f0 b0		beq $aad6			beq _wordlist_next
.ab26					_wordslist_done:
.ab26	4c 53 c5	jmp $c553			jmp Two_Drop
=90					CodeLen	.var *-XtPtr1
=$ab29					Here1 = *	; remember here
>aacd	5a					.byte CodeLen	;patch wh_CodeLength
>ab29	57 6f 72 64 53 69 7a 65		Name0:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=43697					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab31	a8					.byte (("WordSize"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab32	10					.byte WordFlags	;wh_Flags
>ab33	03					.byte 3	;wh_CodeLength
>ab34	66					  .byte LinkDisplacement	; offset to previous nt
=$ab35					XtPtr1 ::= *
=43697					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab35	20 12 b4	jsr $b412	WordSize:	jsr PopTmp1
.ab38	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab3a	b1 14		lda ($14),y			lda (tmp1),y
.ab3c	4c f5 b7	jmp $b7f5			jmp PushZA
=10					CodeLen	.var *-XtPtr1
=$ab3f					Here1 = *	; remember here
>ab33	0a					.byte CodeLen	;patch wh_CodeLength
>ab3f	41 6c 69 67 6e 65 64		Name0:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=43718					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab46	87					.byte (("Aligned"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab47	00					.byte WordFlags	;wh_Flags
>ab48	03					.byte 3	;wh_CodeLength
>ab49	15					  .byte LinkDisplacement	; offset to previous nt
=$ab4a					XtPtr1 ::= *
=43718					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4a					Aligned:
=0					CodeLen	.var *-XtPtr1
=$ab4a					Here1 = *	; remember here
>ab48	00					.byte CodeLen	;patch wh_CodeLength
.ab4a	60		rts				rts
>ab4b	41 6c 69 67 6e			Name0:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43728					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab50	c5					.byte (("Align"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab51	00					.byte WordFlags	;wh_Flags
>ab52	03					.byte 3	;wh_CodeLength
>ab53	0a					  .byte LinkDisplacement	; offset to previous nt
=$ab54					XtPtr1 ::= *
=43728					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab54					Align:
=0					CodeLen	.var *-XtPtr1
=$ab54					Here1 = *	; remember here
>ab52	00					.byte CodeLen	;patch wh_CodeLength
.ab54	60		rts				rts
>ab55	4f 75 74 70 75 74		Name0:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=43739					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab5b	86					.byte (("Output"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab5c	10					.byte WordFlags	;wh_Flags
>ab5d	03					.byte 3	;wh_CodeLength
>ab5e	0b					  .byte LinkDisplacement	; offset to previous nt
=$ab5f					XtPtr1 ::= *
=43739					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab5f					xt_output:
.ab5f	a0 03		ldy #$03			ldy #>output
.ab61	a9 06		lda #$06			lda #<output
.ab63	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab66					Here1 = *	; remember here
>ab5d	07					.byte CodeLen	;patch wh_CodeLength
>ab66	49 6e 70 75 74			Name0:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab6b	85					.byte (("Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab6c	10					.byte WordFlags	;wh_Flags
>ab6d	03					.byte 3	;wh_CodeLength
>ab6e	10					  .byte LinkDisplacement	; offset to previous nt
=$ab6f					XtPtr1 ::= *
=43755					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab6f	a0 03		ldy #$03	xt_input:	ldy #>input
.ab71	a9 08		lda #$08			lda #<input
.ab73	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ab76					Here1 = *	; remember here
>ab6d	07					.byte CodeLen	;patch wh_CodeLength
>ab76	43 52				Name0:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab78	42					.byte (("CR"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab79	10					.byte WordFlags	;wh_Flags
>ab7a	03					.byte 3	;wh_CodeLength
>ab7b	0d					  .byte LinkDisplacement	; offset to previous nt
=$ab7c					XtPtr1 ::= *
=43768					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab7c					CR:
.ab7c	a9 0d		lda #$0d			lda #AscCR
.ab7e	20 dd cd	jsr $cddd			jsr Emit_A
.ab81	a9 0a		lda #$0a			lda #AscLF
.ab83	20 dd cd	jsr $cddd			jsr Emit_A
=10					CodeLen	.var *-XtPtr1
=$ab86					Here1 = *	; remember here
>ab7a	0a					.byte CodeLen	;patch wh_CodeLength
.ab86	60		rts				rts
>ab87	50 61 67 65			Name0:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43787					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab8b	a4					.byte (("Page"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>ab8c	10					.byte WordFlags	;wh_Flags
>ab8d	03					.byte 3	;wh_CodeLength
>ab8e	13					  .byte LinkDisplacement	; offset to previous nt
=$ab8f					XtPtr1 ::= *
=43787					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab8f	20 ba b8	jsr $b8ba	Page:		jsr SLiteral_Runtime
.ab92	4c 9f ab	jmp $ab9f			  jmp +
>ab95	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab99	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab9f	4c f5 cd	jmp $cdf5	+		jmp Type
=19					CodeLen	.var *-XtPtr1
=$aba2					Here1 = *	; remember here
>ab8d	13					.byte CodeLen	;patch wh_CodeLength
>aba2	41 74 2d 58 59			Name0:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=43815					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aba7	25					.byte (("At-XY"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>aba8	50					.byte WordFlags	;wh_Flags
>aba9	03					.byte 3	;wh_CodeLength
>abaa	1c					  .byte LinkDisplacement	; offset to previous nt
=$abab					XtPtr1 ::= *
=43815					WordListLink ::= Nt0 ; remember the nt of this word for later
.abab					At_XY:
.abab	20 44 b4	jsr $b444			jsr underflow_2
.abae	ad 00 03	lda $0300			lda base	; Save the BASE
.abb1	48		pha				pha
.abb2	20 dc b1	jsr $b1dc			jsr Decimal	; ANSI escape code values need to be in decimal.
.abb5	a9 1b		lda #$1b			lda #AscESC
.abb7	20 dd cd	jsr $cddd			jsr Emit_A
.abba	a9 5b		lda #$5b			lda #'['
.abbc	20 dd cd	jsr $cddd			jsr Emit_A
.abbf	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abc1	20 36 cc	jsr $cc36			jsr print_u
.abc4	a9 3b		lda #$3b			lda #';'
.abc6	20 dd cd	jsr $cddd			jsr Emit_A
.abc9	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abcb	20 36 cc	jsr $cc36			jsr print_u
.abce	a9 48		lda #$48			lda #'H'
.abd0	20 dd cd	jsr $cddd			jsr Emit_A
.abd3	68		pla				pla		; Restore the base
.abd4	8d 00 03	sta $0300			sta base
=44					CodeLen	.var *-XtPtr1
=$abd7					Here1 = *	; remember here
>aba9	2c					.byte CodeLen	;patch wh_CodeLength
.abd7	60		rts				rts
>abd8	50 61 64			Name0:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=43867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abdb	83					.byte (("Pad"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abdc	00					.byte WordFlags	;wh_Flags
>abdd	03					.byte 3	;wh_CodeLength
>abde	34					  .byte LinkDisplacement	; offset to previous nt
=$abdf					XtPtr1 ::= *
=43867					WordListLink ::= Nt0 ; remember the nt of this word for later
.abdf	ca		dex		Pad:		dex		; push cp+PadOffset
.abe0	ca		dex				dex
.abe1	18		clc				clc
.abe2	a5 00		lda $00				lda cp+0
.abe4	69 54		adc #$54			adc #PadOffset
.abe6	95 24		sta $24,x			sta DStack+0,x
.abe8	a5 01		lda $01				lda cp+1
.abea	69 00		adc #$00			adc #0
.abec	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$abee					Here1 = *	; remember here
>abdd	0f					.byte CodeLen	;patch wh_CodeLength
.abee	60		rts				rts
>abef	3c 23				Name0:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43889					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abf1	62					.byte (("<#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abf2	00					.byte WordFlags	;wh_Flags
>abf3	03					.byte 3	;wh_CodeLength
>abf4	16					  .byte LinkDisplacement	; offset to previous nt
=$abf5					XtPtr1 ::= *
=43889					WordListLink ::= Nt0 ; remember the nt of this word for later
.abf5					Less_Number_Sign:
.abf5	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abf7	8d 34 03	sta $0334			sta ToHold
=5					CodeLen	.var *-XtPtr1
=$abfa					Here1 = *	; remember here
>abf3	05					.byte CodeLen	;patch wh_CodeLength
.abfa	60		rts				rts
>abfb	23 3e				Name0:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=43901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abfd	c2					.byte (("#>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abfe	40					.byte WordFlags	;wh_Flags
>abff	03					.byte 3	;wh_CodeLength
>ac00	0c					  .byte LinkDisplacement	; offset to previous nt
=$ac01					XtPtr1 ::= *
=43901					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac01					Number_Sign_Greater:
.ac01	20 44 b4	jsr $b444			jsr underflow_2		; double number
.ac04	18		clc				clc			; addr= cp + ToHold
.ac05	a5 00		lda $00				lda cp+0
.ac07	6d 34 03	adc $0334			adc ToHold
.ac0a	95 26		sta $26,x			sta DStack+2,x
.ac0c	a5 01		lda $01				lda cp+1
.ac0e	69 00		adc #$00			adc #0
.ac10	95 27		sta $27,x			sta DStack+3,x
.ac12	38		sec				sec			; u= PadOffset - ToHold
.ac13	a9 54		lda #$54			lda #PadOffset
.ac15	ed 34 03	sbc $0334			sbc ToHold
.ac18	95 24		sta $24,x			sta DStack+0,x
.ac1a	a9 00		lda #$00			lda #0
.ac1c	95 25		sta $25,x			sta DStack+1,x
=29					CodeLen	.var *-XtPtr1
=$ac1e					Here1 = *	; remember here
>abff	1d					.byte CodeLen	;patch wh_CodeLength
.ac1e	60		rts				rts
>ac1f	48 6f 6c 64			Name0:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=43939					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac23	84					.byte (("Hold"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac24	00					.byte WordFlags	;wh_Flags
>ac25	03					.byte 3	;wh_CodeLength
>ac26	26					  .byte LinkDisplacement	; offset to previous nt
=$ac27					XtPtr1 ::= *
=43939					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac27	20 ec b3	jsr $b3ec	Hold:		jsr PopA
.ac2a	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac2d	ac 34 03	ldy $0334			ldy ToHold
.ac30	91 00		sta ($00),y			sta (cp),y
=11					CodeLen	.var *-XtPtr1
=$ac32					Here1 = *	; remember here
>ac25	0b					.byte CodeLen	;patch wh_CodeLength
.ac32	60		rts				rts
>ac33	23				Name0:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=43956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac34	61					.byte (("#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac35	50					.byte WordFlags	;wh_Flags
>ac36	03					.byte 3	;wh_CodeLength
>ac37	11					  .byte LinkDisplacement	; offset to previous nt
=$ac38					XtPtr1 ::= *
=43956					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac38					Number_Sign:
.ac38	20 44 b4	jsr $b444			jsr underflow_2		; double number
.ac3b	a9 00		lda #$00			lda #0			;   init remainder
.ac3d	18		clc				clc
.ac3e	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac40					_11:
.ac40	2a		rol a				rol a			;   shift remainder
.ac41	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac44	90 03		bcc $ac49			bcc _27
.ac46	ed 00 03	sbc $0300			sbc base
.ac49					_27:
.ac49	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac4b	36 27		rol $27,x			rol DStack+3,x
.ac4d	36 24		rol $24,x			rol DStack+0,x
.ac4f	36 25		rol $25,x			rol DStack+1,x
.ac51	88		dey				dey
.ac52	d0 ec		bne $ac40			bne _11
.ac54	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac56	90 02		bcc $ac5a			bcc +
.ac58	69 06		adc #$06			adc #7-1
.ac5a	69 30		adc #$30	+		adc #'0'
.ac5c	d0 cc		bne $ac2a			bne Hold_A
=38					CodeLen	.var *-XtPtr1
=$ac5e					Here1 = *	; remember here
>ac36	26					.byte CodeLen	;patch wh_CodeLength
>ac5e	23 53				Name0:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac60	62					.byte (("#S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac61	00					.byte WordFlags	;wh_Flags
>ac62	03					.byte 3	;wh_CodeLength
>ac63	2c					  .byte LinkDisplacement	; offset to previous nt
=$ac64					XtPtr1 ::= *
=44000					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac64					Number_Sign_S:
.ac64					_loop:
.ac64	20 38 ac	jsr $ac38			jsr Number_sign	; convert a single number ("#")
.ac67	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac69	15 25		ora $25,x			ora DStack+1,x
.ac6b	15 26		ora $26,x			ora DStack+2,x
.ac6d	15 27		ora $27,x			ora DStack+3,x
.ac6f	d0 f3		bne $ac64			bne _loop
=13					CodeLen	.var *-XtPtr1
=$ac71					Here1 = *	; remember here
>ac62	0d					.byte CodeLen	;patch wh_CodeLength
.ac71	60		rts				rts
>ac72	53 69 67 6e			Name0:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44022					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac76	c4					.byte (("Sign"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac77	10					.byte WordFlags	;wh_Flags
>ac78	03					.byte 3	;wh_CodeLength
>ac79	16					  .byte LinkDisplacement	; offset to previous nt
=$ac7a					XtPtr1 ::= *
=44022					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac7a	20 07 b4	jsr $b407	Sign:		jsr PopYA
.ac7d	98		tya				tya		; test MSB of TOS
.ac7e					Sign_P:
.ac7e	30 01		bmi $ac81			bmi _minus
.ac80	60		rts				rts
.ac81	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac83	d0 a5		bne $ac2a			bne hold_a
=11					CodeLen	.var *-XtPtr1
=$ac85					Here1 = *	; remember here
>ac78	0b					.byte CodeLen	;patch wh_CodeLength
>ac85	43 6c 65 61 76 65		Name0:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac8b	a6					.byte (("Cleave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac8c	50					.byte WordFlags	;wh_Flags
>ac8d	03					.byte 3	;wh_CodeLength
>ac8e	15					  .byte LinkDisplacement	; offset to previous nt
=$ac8f					XtPtr1 ::= *
=44043					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac8f					Cleave:
.ac8f	20 44 b4	jsr $b444			jsr underflow_2
.ac92	20 02 c5	jsr $c502			jsr Minus_leading	; -LEADING ( addr u )
.ac95	20 fe c3	jsr $c3fe			jsr Input_To_R	; save old imput state
.ac98	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac9a	85 06		sta $06				sta ciblen
.ac9c	b5 25		lda $25,x			lda DStack+1,x
.ac9e	85 07		sta $07				sta ciblen+1
.aca0	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.aca2	85 04		sta $04				sta cib
.aca4	b5 27		lda $27,x			lda DStack+3,x
.aca6	85 05		sta $05				sta cib+1
.aca8	a9 00		lda #$00			lda #0
.acaa	85 08		sta $08				sta toin	; >IN pointer is zero
.acac	85 09		sta $09				sta toin+1
.acae	20 85 ba	jsr $ba85			jsr parse_name	; ( addr u addr-s u-s )
.acb1	b5 24		lda $24,x			lda DStack+0,x
.acb3	15 25		ora $25,x			ora DStack+1,x
.acb5	f0 23		beq $acda			beq _done
.acb7	38		sec				sec
.acb8	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.acba	f5 24		sbc $24,x			sbc DStack+0,x
.acbc	95 28		sta $28,x			sta DStack+4,x
.acbe	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.acc0	f5 25		sbc $25,x			sbc DStack+1,x
.acc2	95 29		sta $29,x			sta DStack+5,x
.acc4	18		clc				clc
.acc5	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acc7	75 24		adc $24,x			adc DStack+0,x
.acc9	95 2a		sta $2a,x			sta DStack+6,x
.accb	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.accd	75 25		adc $25,x			adc DStack+1,x
.accf	95 2b		sta $2b,x			sta DStack+7,x
.acd1	20 64 c5	jsr $c564			jsr Two_swap		; ( addr-s u-s addr u )
.acd4	20 02 c5	jsr $c502			jsr Minus_leading
.acd7	20 64 c5	jsr $c564			jsr Two_swap		; ( addr u addr-s u-s )
.acda					_done:
.acda	20 1f c4	jsr $c41f			jsr R_To_Input
=78					CodeLen	.var *-XtPtr1
=$acdd					Here1 = *	; remember here
>ac8d	4e					.byte CodeLen	;patch wh_CodeLength
.acdd	60		rts				rts
>acde	48 65 78 53 74 6f 72 65		Name0:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ace6	a8					.byte (("HexStore"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>ace7	50					.byte WordFlags	;wh_Flags
>ace8	03					.byte 3	;wh_CodeLength
>ace9	5b					  .byte LinkDisplacement	; offset to previous nt
=$acea					XtPtr1 ::= *
=44134					WordListLink ::= Nt0 ; remember the nt of this word for later
.acea					Hexstore:
.acea	20 49 b4	jsr $b449			jsr underflow_3
.aced	20 73 cf	jsr $cf73			jsr Dup		; Save copy of original address
.acf0	20 83 c6	jsr $c683			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.acf3					_loop:
.acf3	b5 24		lda $24,x			lda DStack+0,x
.acf5	15 25		ora $25,x			ora DStack+1,x
.acf7	f0 37		beq $ad30			beq _done
.acf9	20 8f ac	jsr $ac8f			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.acfc	20 83 c6	jsr $c683			jsr Two_to_r
.acff	20 03 b8	jsr $b803			jsr Zero
.ad02	20 03 b8	jsr $b803			jsr Zero
.ad05	20 5f c6	jsr $c65f			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ad08	20 60 b0	jsr $b060			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ad0b	b5 24		lda $24,x			lda DStack+0,x
.ad0d	15 25		ora $25,x			ora DStack+1,x
.ad0f	d0 18		bne $ad29			bne _have_chars_left
.ad11	20 53 c5	jsr $c553			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ad14	20 2a c0	jsr $c02a			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ad17	20 36 cf	jsr $cf36			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad1a	20 7c cd	jsr $cd7c			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad1d	20 1b cf	jsr $cf1b			jsr R_From		; R>
.ad20	20 77 ca	jsr $ca77			jsr One_plus		; 1+
.ad23	20 fd ce	jsr $cefd			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad26	4c f3 ac	jmp $acf3			jmp _loop
.ad29					_have_chars_left:
.ad29	8a		txa				txa
.ad2a	18		clc				clc
.ad2b	69 08		adc #$08			adc #8
.ad2d	aa		tax				tax
.ad2e	d0 c3		bne $acf3			bne _loop
.ad30					_done:
.ad30	e8		inx				inx
.ad31	e8		inx				inx
.ad32	e8		inx				inx
.ad33	e8		inx				inx			; 2DROP
.ad34	20 5f c6	jsr $c65f			jsr Two_r_from		; ( addr2+n addr2 )
.ad37	20 90 cf	jsr $cf90			jsr Swap
.ad3a	4c d4 cb	jmp $cbd4			jmp Minus		; ( n )
=83					CodeLen	.var *-XtPtr1
=$ad3d					Here1 = *	; remember here
>ace8	53					.byte CodeLen	;patch wh_CodeLength
>ad3d	57 69 74 68 69 6e		Name0:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44227					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad43	c6					.byte (("Within"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad44	50					.byte WordFlags	;wh_Flags
>ad45	03					.byte 3	;wh_CodeLength
>ad46	5d					  .byte LinkDisplacement	; offset to previous nt
=$ad47					XtPtr1 ::= *
=44227					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad47					Within:
.ad47	20 49 b4	jsr $b449			jsr underflow_3
.ad4a	20 4c cf	jsr $cf4c			jsr Over
.ad4d	20 d4 cb	jsr $cbd4			jsr Minus
.ad50	20 fd ce	jsr $cefd			jsr To_R
.ad53	20 d4 cb	jsr $cbd4			jsr Minus
.ad56	20 1b cf	jsr $cf1b			jsr R_From
.ad59	4c b1 c8	jmp $c8b1			jmp U_Less_Than
=21					CodeLen	.var *-XtPtr1
=$ad5c					Here1 = *	; remember here
>ad45	15					.byte CodeLen	;patch wh_CodeLength
>ad5c	5c				Name0:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44253					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad5d	81					.byte (("\"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad5e	18					.byte WordFlags	;wh_Flags
>ad5f	03					.byte 3	;wh_CodeLength
>ad60	1a					  .byte LinkDisplacement	; offset to previous nt
=$ad61					XtPtr1 ::= *
=44253					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad61					Backslash:
.ad61	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad64	0d 0d 03	ora $030d			ora BlkV+1
.ad67	f0 16		beq $ad7f			beq _not_block
.ad69	a5 08		lda $08				lda toin+0
.ad6b	29 3f		and #$3f			and #$3F
.ad6d	c9 02		cmp #$02			cmp #2
.ad6f	90 16		bcc $ad87			bcc _rts
.ad71	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad73	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad75	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad76	69 40		adc #$40	                adc #$40
.ad78	85 08		sta $08		                sta toin+0
.ad7a	90 0b		bcc $ad87	                bcc _rts
.ad7c	e6 09		inc $09		                inc toin+1
.ad7e	60		rts				rts
.ad7f					_not_block:
.ad7f	a5 06		lda $06		                lda ciblen+0
.ad81	85 08		sta $08		                sta toin+0
.ad83	a5 07		lda $07		                lda ciblen+1
.ad85	85 09		sta $09		                sta toin+1
=38					CodeLen	.var *-XtPtr1
=$ad87					Here1 = *	; remember here
>ad5f	26					.byte CodeLen	;patch wh_CodeLength
.ad87	60		rts		_rts:		rts
>ad88	4d 6f 76 65			Name0:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44300					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad8c	a4					.byte (("Move"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifiable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad8d	50					.byte WordFlags	;wh_Flags
>ad8e	03					.byte 3	;wh_CodeLength
>ad8f	2f					  .byte LinkDisplacement	; offset to previous nt
=$ad90					XtPtr1 ::= *
=44300					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad90					Move:
.ad90	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad92	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad94	d0 04		bne $ad9a			bne _ne
.ad96	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad98	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad9a	90 58		bcc $adf4	_ne:		bcc CMove
.ad9c	d0 10		bne $adae			bne CMove_up
.ad9e	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad9f	18		clc				clc
.ada0	69 06		adc #$06			adc #6
.ada2	aa		tax				tax
=19					CodeLen	.var *-XtPtr1
=$ada3					Here1 = *	; remember here
>ad8e	13					.byte CodeLen	;patch wh_CodeLength
.ada3	60		rts				rts
>ada4	43 4d 6f 76 65 3e		Name0:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>adaa	c6					.byte (("CMove>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>adab	50					.byte WordFlags	;wh_Flags
>adac	03					.byte 3	;wh_CodeLength
>adad	1e					  .byte LinkDisplacement	; offset to previous nt
=$adae					XtPtr1 ::= *
=44330					WordListLink ::= Nt0 ; remember the nt of this word for later
.adae					CMove_up:
.adae	20 49 b4	jsr $b449			jsr underflow_3
.adb1	b5 26		lda $26,x			lda DStack+2,x
.adb3	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adb5	b5 27		lda $27,x			lda DStack+3,x
.adb7	18		clc				clc
.adb8	75 25		adc $25,x			adc DStack+1,x
.adba	85 17		sta $17				sta tmp2+1	; point to last page of destination
.adbc	b5 28		lda $28,x			lda DStack+4,x
.adbe	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adc0	b5 29		lda $29,x			lda DStack+5,x
.adc2	18		clc				clc
.adc3	75 25		adc $25,x			adc DStack+1,x
.adc5	85 15		sta $15				sta tmp1+1	; point to last page of source
.adc7	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adc9	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adcb	f0 10		beq $addd			beq _nopartial
.adcd					_outerloop:
.adcd	88		dey				dey
.adce	f0 07		beq $add7			beq _finishpage
.add0					_innerloop:
.add0	b1 14		lda ($14),y			lda (tmp1),y
.add2	91 16		sta ($16),y			sta (tmp2),y
.add4	88		dey				dey
.add5	d0 f9		bne $add0			bne _innerloop
.add7					_finishpage:
.add7	a0 00		ldy #$00			ldy #0
.add9	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.addb	91 16		sta ($16),y			sta (tmp2),y
.addd					_nopartial:
.addd	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.addf	c6 17		dec $17				dec tmp2+1
.ade1	d6 25		dec $25,x			dec DStack+1,x
.ade3	d0 e8		bne $adcd			bne _outerloop
.ade5					_done:
.ade5	4c 9e ad	jmp $ad9e			jmp ThreeDrop	; clear up the stack and leave
=58					CodeLen	.var *-XtPtr1
=$ade8					Here1 = *	; remember here
>adac	3a					.byte CodeLen	;patch wh_CodeLength
.ade8	4c 53 b4	jmp $b453	Throw_Stack_14: jmp Throw_Stack
>adeb	43 4d 6f 76 65			Name0:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>adf0	a5					.byte (("CMove"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>adf1	50					.byte WordFlags	;wh_Flags
>adf2	03					.byte 3	;wh_CodeLength
>adf3	46					  .byte LinkDisplacement	; offset to previous nt
=$adf4					XtPtr1 ::= *
=44400					WordListLink ::= Nt0 ; remember the nt of this word for later
.adf4					CMove:
.adf4	20 49 b4	jsr $b449			jsr underflow_3
.adf7	b5 26		lda $26,x			lda DStack+2,x
.adf9	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adfb	b5 27		lda $27,x			lda DStack+3,x
.adfd	85 17		sta $17				sta tmp2+1
.adff	b5 28		lda $28,x			lda DStack+4,x
.ae01	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ae03	b5 29		lda $29,x			lda DStack+5,x
.ae05	85 15		sta $15				sta tmp1+1
.ae07	a0 00		ldy #$00			ldy #0
.ae09	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ae0b	f0 0f		beq $ae1c			beq _dopartial
.ae0d					_page:
.ae0d	b1 14		lda ($14),y			lda (tmp1),y
.ae0f	91 16		sta ($16),y			sta (tmp2),y
.ae11	c8		iny				iny
.ae12	d0 f9		bne $ae0d			bne _page
.ae14	e6 15		inc $15				inc tmp1+1
.ae16	e6 17		inc $17				inc tmp2+1
.ae18	d6 25		dec $25,x			dec DStack+1,x
.ae1a	d0 f1		bne $ae0d			bne _page
.ae1c					_dopartial:
.ae1c	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae1e	f0 09		beq $ae29			beq _done
.ae20					_partial:
.ae20	b1 14		lda ($14),y			lda (tmp1),y
.ae22	91 16		sta ($16),y			sta (tmp2),y
.ae24	c8		iny				iny
.ae25	d6 24		dec $24,x			dec DStack+0,x
.ae27	d0 f7		bne $ae20			bne _partial
.ae29	4c 9e ad	jmp $ad9e	_done:		jmp ThreeDrop	; clear the stack
=56					CodeLen	.var *-XtPtr1
=$ae2c					Here1 = *	; remember here
>adf2	38					.byte CodeLen	;patch wh_CodeLength
>ae2c	55 4d 2a			Name0:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44463					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae2f	43					.byte (("UM*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae30	10					.byte WordFlags	;wh_Flags
>ae31	03					.byte 3	;wh_CodeLength
>ae32	3f					  .byte LinkDisplacement	; offset to previous nt
=$ae33					XtPtr1 ::= *
=44463					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae33					UM_Star:
.ae33	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae35	b0 b1		bcs $ade8		bcs Throw_Stack_14
.ae37	18		clc				clc		; tmp2= divsor-1
.ae38	b5 24		lda $24,x			lda DStack+0,x
.ae3a	e9 00		sbc #$00			sbc #0
.ae3c	85 16		sta $16				sta tmp2+0
.ae3e	b5 25		lda $25,x			lda DStack+1,x
.ae40	e9 00		sbc #$00			sbc #0
.ae42	85 17		sta $17				sta tmp2+1
.ae44	90 2e		bcc $ae74			bcc _zero	; is divisor zero?
.ae46	a9 00		lda #$00			lda #0
.ae48	85 14		sta $14				sta tmp1
.ae4a	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae4c	ca		dex				dex
.ae4d	ca		dex				dex
.ae4e					_outer_loop:
.ae4e	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae50	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae52					_inner_loop:
.ae52	90 0c		bcc $ae60			bcc _no_add
.ae54	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae56	a5 14		lda $14				lda tmp1
.ae58	65 16		adc $16				adc tmp2
.ae5a	85 14		sta $14				sta tmp1
.ae5c	a5 15		lda $15				lda tmp1+1
.ae5e	65 17		adc $17				adc tmp2+1
.ae60					_no_add:
.ae60	6a		ror a				ror
.ae61	66 14		ror $14				ror tmp1
.ae63	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae65	88		dey				dey
.ae66	d0 ea		bne $ae52			bne _inner_loop ; go back for one more shift?
.ae68	e8		inx				inx
.ae69	e4 18		cpx $18				cpx tmp3
.ae6b	d0 e1		bne $ae4e			bne _outer_loop ; go back for eight more shifts?
.ae6d	95 25		sta $25,x			sta DStack+1,x
.ae6f	a5 14		lda $14				lda tmp1
.ae71	95 24		sta $24,x			sta DStack+0,x
.ae73	60		rts				rts
.ae74	a9 00		lda #$00	_zero:		lda #0
.ae76	95 26		sta $26,x			sta DStack+2,x
.ae78	95 27		sta $27,x			sta DStack+3,x
.ae7a	60		rts				rts
=72					CodeLen	.var *-XtPtr1
=$ae7b					Here1 = *	; remember here
>ae31	48					.byte CodeLen	;patch wh_CodeLength
>ae7b	4d 2a				Name0:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44541					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae7d	42					.byte (("M*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae7e	10					.byte WordFlags	;wh_Flags
>ae7f	03					.byte 3	;wh_CodeLength
>ae80	4e					  .byte LinkDisplacement	; offset to previous nt
=$ae81					XtPtr1 ::= *
=44541					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae81					M_Star:
.ae81	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae83	b0 6b		bcs $aef0		bcs Throw_Stack_15
.ae85	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae87	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae89	08		php				php
.ae8a	20 df c6	jsr $c6df			jsr Abs
.ae8d	20 90 cf	jsr $cf90			jsr Swap
.ae90	20 df c6	jsr $c6df			jsr Abs
.ae93	20 33 ae	jsr $ae33			jsr UM_Star		; ( d )
.ae96	28		plp				plp			; handle the sign
.ae97	10 03		bpl $ae9c			bpl +
.ae99	4c f6 c6	jmp $c6f6			jmp DNegate
.ae9c					+
=27					CodeLen	.var *-XtPtr1
=$ae9c					Here1 = *	; remember here
>ae7f	1b					.byte CodeLen	;patch wh_CodeLength
.ae9c	60		rts				rts
>ae9d	2a				Name0:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae9e	41					.byte (("*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae9f	00					.byte WordFlags	;wh_Flags
>aea0	03					.byte 3	;wh_CodeLength
>aea1	21					  .byte LinkDisplacement	; offset to previous nt
=$aea2					XtPtr1 ::= *
=44574					WordListLink ::= Nt0 ; remember the nt of this word for later
.aea2					Star:
.aea2	20 33 ae	jsr $ae33			jsr UM_Star
.aea5	e8		inx				inx		; D>S	drop hi cell
.aea6	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$aea7					Here1 = *	; remember here
>aea0	05					.byte CodeLen	;patch wh_CodeLength
.aea7	60		rts				rts
>aea8	55 4d 2f 4d 6f 64		Name0:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aeae	86					.byte (("UM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>aeaf	10					.byte WordFlags	;wh_Flags
>aeb0	03					.byte 3	;wh_CodeLength
>aeb1	10					  .byte LinkDisplacement	; offset to previous nt
=$aeb2					XtPtr1 ::= *
=44590					WordListLink ::= Nt0 ; remember the nt of this word for later
.aeb2					UM_Slash_Mod:
.aeb2	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aeb4	b0 3a		bcs $aef0		bcs Throw_Stack_15
.aeb6	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aeb8	15 25		ora $25,x			ora DStack+1,x
.aeba	f0 2f		beq $aeeb			beq _DivByZero
.aebc	a0 10		ldy #$10			ldy #16			; for 16 bits
.aebe					_loop:
.aebe	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aec0	36 29		rol $29,x			rol DStack+5,x
.aec2	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aec4	36 27		rol $27,x			rol DStack+3,x
.aec6	b0 0a		bcs $aed2			bcs _subtract		;   overflow?
.aec8	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aeca	d5 24		cmp $24,x			cmp DStack+0,x
.aecc	b5 27		lda $27,x			lda DStack+3,x
.aece	f5 25		sbc $25,x			sbc DStack+1,x
.aed0	90 0d		bcc $aedf			bcc _next
.aed2	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aed4	f5 24		sbc $24,x			sbc DStack+0,x
.aed6	95 26		sta $26,x			sta DStack+2,x
.aed8	b5 27		lda $27,x			lda DStack+3,x
.aeda	f5 25		sbc $25,x			sbc DStack+1,x
.aedc	95 27		sta $27,x			sta DStack+3,x
.aede	38		sec				sec			;   it always fits
.aedf	88		dey		_next:		dey			;  next
.aee0	d0 dc		bne $aebe			bne _loop
.aee2	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aee4	36 29		rol $29,x			rol DStack+5,x
.aee6	e8		inx				inx			; drop divisor
.aee7	e8		inx				inx
.aee8	4c 90 cf	jmp $cf90			jmp Swap
.aeeb	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aeed	4c 8c b4	jmp $b48c			jmp ThrowA
=62					CodeLen	.var *-XtPtr1
=$aef0					Here1 = *	; remember here
>aeb0	3e					.byte CodeLen	;patch wh_CodeLength
.aef0	4c 53 b4	jmp $b453	Throw_Stack_15: jmp Throw_Stack
>aef3	53 4d 2f 52 65 6d		Name0:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44665					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aef9	a6					.byte (("SM/Rem"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aefa	10					.byte WordFlags	;wh_Flags
>aefb	03					.byte 3	;wh_CodeLength
>aefc	4b					  .byte LinkDisplacement	; offset to previous nt
=$aefd					XtPtr1 ::= *
=44665					WordListLink ::= Nt0 ; remember the nt of this word for later
.aefd					SM_Slash_Rem:
.aefd	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aeff	b0 ef		bcs $aef0		bcs Throw_Stack_15
.af01	b5 27		lda $27,x			lda DStack+3,x
.af03	08		php				php
.af04	55 25		eor $25,x			eor DStack+1,x
.af06	08		php				php
.af07	20 df c6	jsr $c6df			jsr Abs
.af0a	e8		inx				inx		; pretend we pushed n1 to R
.af0b	e8		inx				inx
.af0c	20 12 c7	jsr $c712			jsr DAbs
.af0f	ca		dex				dex
.af10	ca		dex				dex
.af11	20 b2 ae	jsr $aeb2			jsr UM_Slash_Mod	; UM/MOD
.af14	28		plp				plp
.af15	10 03		bpl $af1a			bpl +
.af17	20 c7 c6	jsr $c6c7			jsr Negate
.af1a					+
.af1a	28		plp				plp
.af1b	10 07		bpl $af24			bpl _done
.af1d	e8		inx				inx		; pretend we pushed quotient to R
.af1e	e8		inx				inx
.af1f	20 c7 c6	jsr $c6c7			jsr Negate
.af22	ca		dex				dex
.af23	ca		dex				dex
.af24					_done:
=39					CodeLen	.var *-XtPtr1
=$af24					Here1 = *	; remember here
>aefb	27					.byte CodeLen	;patch wh_CodeLength
.af24	60		rts				rts
>af25	46 4d 2f 4d 6f 64		Name0:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=44715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af2b	86					.byte (("FM/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af2c	10					.byte WordFlags	;wh_Flags
>af2d	03					.byte 3	;wh_CodeLength
>af2e	32					  .byte LinkDisplacement	; offset to previous nt
=$af2f					XtPtr1 ::= *
=44715					WordListLink ::= Nt0 ; remember the nt of this word for later
.af2f					FM_Slash_Mod:
.af2f	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af31	b0 bd		bcs $aef0		bcs Throw_Stack_15
.af33	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af35	08		php				php		;  save sign
.af36	10 0a		bpl $af42			bpl +
.af38	20 c7 c6	jsr $c6c7			jsr Negate	; NEGATE
.af3b	e8		inx				inx
.af3c	e8		inx				inx
.af3d	20 f6 c6	jsr $c6f6			jsr DNegate	; DNEGATE
.af40	ca		dex				dex
.af41	ca		dex				dex
.af42					+
.af42	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af44	10 0d		bpl $af53			bpl +
.af46	18		clc				clc
.af47	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af49	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af4b	95 26		sta $26,x			sta DStack+2,x
.af4d	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af4f	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af51	95 27		sta $27,x			sta DStack+3,x
.af53					+
.af53	20 b2 ae	jsr $aeb2			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af56	28		plp				plp
.af57	10 07		bpl $af60			bpl +
.af59	e8		inx				inx		; pretend that we SWAP
.af5a	e8		inx				inx
.af5b	20 c7 c6	jsr $c6c7			jsr Negate
.af5e	ca		dex				dex
.af5f	ca		dex				dex
.af60					+
=49					CodeLen	.var *-XtPtr1
=$af60					Here1 = *	; remember here
>af2d	31					.byte CodeLen	;patch wh_CodeLength
.af60	60		rts				rts
>af61	2f 4d 6f 64			Name0:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=44773					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af65	84					.byte (("/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af66	10					.byte WordFlags	;wh_Flags
>af67	03					.byte 3	;wh_CodeLength
>af68	3a					  .byte LinkDisplacement	; offset to previous nt
=$af69					XtPtr1 ::= *
=44773					WordListLink ::= Nt0 ; remember the nt of this word for later
.af69	20 73 cf	jsr $cf73	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af6c	a0 00		ldy #$00			ldy #0			; sign extend n1
.af6e	b5 29		lda $29,x			lda DStack+5,x
.af70	10 01		bpl $af73			bpl +
.af72	88		dey				dey
.af73	94 26		sty $26,x	+		sty DStack+2,x
.af75	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af77	4c fd ae	jmp $aefd			jmp SM_Slash_Rem	; SM/REM
=17					CodeLen	.var *-XtPtr1
=$af7a					Here1 = *	; remember here
>af67	11					.byte CodeLen	;patch wh_CodeLength
>af7a	2f				Name0:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=44795					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af7b	e1					.byte (("/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af7c	10					.byte WordFlags	;wh_Flags
>af7d	03					.byte 3	;wh_CodeLength
>af7e	16					  .byte LinkDisplacement	; offset to previous nt
=$af7f					XtPtr1 ::= *
=44795					WordListLink ::= Nt0 ; remember the nt of this word for later
.af7f	20 69 af	jsr $af69	Slash:		jsr Slash_Mod
.af82	4c ad c9	jmp $c9ad			jmp Nip		; Nip remainder
=6					CodeLen	.var *-XtPtr1
=$af85					Here1 = *	; remember here
>af7d	06					.byte CodeLen	;patch wh_CodeLength
>af85	4d 6f 64			Name0:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44808					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af88	83					.byte (("Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af89	00					.byte WordFlags	;wh_Flags
>af8a	03					.byte 3	;wh_CodeLength
>af8b	0d					  .byte LinkDisplacement	; offset to previous nt
=$af8c					XtPtr1 ::= *
=44808					WordListLink ::= Nt0 ; remember the nt of this word for later
.af8c	20 69 af	jsr $af69	Mod:		jsr Slash_Mod
.af8f	e8		inx				inx		; Drop quotient
.af90	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$af91					Here1 = *	; remember here
>af8a	05					.byte CodeLen	;patch wh_CodeLength
.af91	60		rts				rts
>af92	2a 2f 4d 6f 64			Name0:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=44823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af97	85					.byte (("*/Mod"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af98	50					.byte WordFlags	;wh_Flags
>af99	03					.byte 3	;wh_CodeLength
>af9a	0f					  .byte LinkDisplacement	; offset to previous nt
=$af9b					XtPtr1 ::= *
=44823					WordListLink ::= Nt0 ; remember the nt of this word for later
.af9b					Star_Slash_Mod:
.af9b	20 49 b4	jsr $b449			jsr underflow_3
.af9e	20 fd ce	jsr $cefd			jsr To_R
.afa1	20 81 ae	jsr $ae81			jsr M_Star
.afa4	20 1b cf	jsr $cf1b			jsr R_From
.afa7	4c fd ae	jmp $aefd			jmp SM_Slash_Rem
=15					CodeLen	.var *-XtPtr1
=$afaa					Here1 = *	; remember here
>af99	0f					.byte CodeLen	;patch wh_CodeLength
>afaa	2a 2f				Name0:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=44844					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afac	e2					.byte (("*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>afad	10					.byte WordFlags	;wh_Flags
>afae	03					.byte 3	;wh_CodeLength
>afaf	15					  .byte LinkDisplacement	; offset to previous nt
=$afb0					XtPtr1 ::= *
=44844					WordListLink ::= Nt0 ; remember the nt of this word for later
.afb0					Star_Slash:
.afb0	20 9b af	jsr $af9b			jsr Star_Slash_Mod
.afb3	4c ad c9	jmp $c9ad			jmp Nip			; mod
=6					CodeLen	.var *-XtPtr1
=$afb6					Here1 = *	; remember here
>afae	06					.byte CodeLen	;patch wh_CodeLength
>afb6	4d 2a 2f			Name0:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=44857					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afb9	e3					.byte (("M*/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afba	10					.byte WordFlags	;wh_Flags
>afbb	03					.byte 3	;wh_CodeLength
>afbc	0d					  .byte LinkDisplacement	; offset to previous nt
=$afbd					XtPtr1 ::= *
=44857					WordListLink ::= Nt0 ; remember the nt of this word for later
.afbd					m_star_slash:
.afbd	20 4e b4	jsr $b44e	                jsr underflow_4
.afc0	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afc2	55 27		eor $27,x			eor DStack+3,x
.afc4	55 29		eor $29,x			eor DStack+5,x
.afc6	08		php				php
.afc7	20 df c6	jsr $c6df	                jsr Abs			; Abs
.afca	20 fd ce	jsr $cefd	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afcd	20 df c6	jsr $c6df	                jsr Abs			; Abs
.afd0	20 fd ce	jsr $cefd	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afd3	20 12 c7	jsr $c712	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afd6	20 90 cf	jsr $cf90	                jsr Swap		; Swap
.afd9	20 36 cf	jsr $cf36	                jsr R_Fetch		; R@
.afdc	20 33 ae	jsr $ae33	                jsr UM_Star		; UM*
.afdf	20 6e ce	jsr $ce6e	                jsr Rot			; Rot
.afe2	20 1b cf	jsr $cf1b	                jsr R_From		; R>
.afe5	20 33 ae	jsr $ae33	                jsr UM_Star		; UM*
.afe8	20 6e ce	jsr $ce6e	                jsr Rot			; Rot
.afeb	20 8f ca	jsr $ca8f	                jsr UMPlus		; 0 D+
.afee	20 36 cf	jsr $cf36	                jsr R_Fetch		; R@
.aff1	20 b2 ae	jsr $aeb2	                jsr UM_Slash_Mod	; UM/Mod
.aff4	20 93 ce	jsr $ce93	                jsr Not_Rot		; Rot Rot
.aff7	20 1b cf	jsr $cf1b	                jsr R_From		; R>
.affa	20 b2 ae	jsr $aeb2	                jsr UM_Slash_Mod	; UM/Mod
.affd	20 ad c9	jsr $c9ad	                jsr Nip			; Swap Drop
.b000	20 90 cf	jsr $cf90	                jsr Swap		; Swap
.b003	28		plp				plp
.b004	10 03		bpl $b009			bpl _rts		; ... 0< if ...
.b006	4c f6 c6	jmp $c6f6	                jmp DNegate
.b009	60		rts		_rts:		rts
=77					CodeLen	.var *-XtPtr1
=$b00a					Here1 = *	; remember here
>afbb	4d					.byte CodeLen	;patch wh_CodeLength
>b00a	45 76 61 6c 75 61 74 65		Name0:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=44946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b012	a8					.byte (("Evaluate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>b013	10					.byte WordFlags	;wh_Flags
>b014	03					.byte 3	;wh_CodeLength
>b015	59					  .byte LinkDisplacement	; offset to previous nt
=$b016					XtPtr1 ::= *
=44946					WordListLink ::= Nt0 ; remember the nt of this word for later
.b016					Evaluate:
.b016	18		clc				clc			; signal to zero BLK.
.b017					load_evaluate:
.b017	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b01a	48		pha				pha
.b01b	ad 0c 03	lda $030c			lda BlkV+0
.b01e	48		pha				pha
.b01f	b0 08		bcs $b029			bcs +		; See if we should zero BLK.
.b021	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b023	8d 0c 03	sta $030c			sta BlkV+0
.b026	8d 0d 03	sta $030d			sta BlkV+1
.b029					+
.b029	20 fe c3	jsr $c3fe			jsr Input_To_R	; Save the input state to the Return Stack
.b02c	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b02e	85 02		sta $02				sta insrc+0
.b030	85 03		sta $03				sta insrc+1
.b032	a9 00		lda #$00			lda #0		; >IN= zero
.b034	85 08		sta $08				sta toin+0
.b036	85 09		sta $09				sta toin+1
.b038	20 07 b4	jsr $b407			jsr PopYA	; ciblen= string length (u)
.b03b	85 06		sta $06				sta ciblen+0
.b03d	84 07		sty $07				sty ciblen+1
.b03f	20 07 b4	jsr $b407			jsr PopYA	; cib= string addr
.b042	85 04		sta $04				sta cib+0
.b044	84 05		sty $05				sty cib+1
.b046	20 44 b5	jsr $b544			jsr interpret	; ( -- )
.b049	20 1f c4	jsr $c41f			jsr R_To_Input	; restore input state
.b04c	68		pla				pla		; Restore BLK from the return stack.
.b04d	8d 0c 03	sta $030c			sta BlkV+0
.b050	68		pla				pla
.b051	8d 0d 03	sta $030d			sta BlkV+1
=62					CodeLen	.var *-XtPtr1
=$b054					Here1 = *	; remember here
>b014	3e					.byte CodeLen	;patch wh_CodeLength
.b054	60		rts				rts
>b055	3e 4e 75 6d 62 65 72		Name0:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b05c	47					.byte ((">Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b05d	50					.byte WordFlags	;wh_Flags
>b05e	03					.byte 3	;wh_CodeLength
>b05f	4a					  .byte LinkDisplacement	; offset to previous nt
=$b060					XtPtr1 ::= *
=45020					WordListLink ::= Nt0 ; remember the nt of this word for later
.b060					To_Number:
.b060	20 4e b4	jsr $b44e			jsr underflow_4
.b063	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b065	f0 72		beq $b0d9			beq _done
.b067					_Char_loop:
.b067	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b069	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b06b	90 6c		bcc $b0d9			bcc _done
.b06d	c9 3a		cmp #$3a			cmp #'9'+1
.b06f	90 08		bcc $b079			bcc _digit
.b071	29 df		and #$df			and #$df		;   ASCII uppercase
.b073	c9 41		cmp #$41			cmp #'A'
.b075	90 62		bcc $b0d9			bcc _done
.b077	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b079	38		sec		_digit:		sec
.b07a	e9 30		sbc #$30			sbc #'0'
.b07c	cd 00 03	cmp $0300			cmp base		; must be < base
.b07f	b0 58		bcs $b0d9			bcs _done
.b081	48		pha				pha			; Save char value
.b082	20 85 c5	jsr $c585			jsr Two_Over		;   copy ud to work (multiplicand)
.b085	a9 00		lda #$00			lda #0			;   zero ud (product)
.b087	95 2c		sta $2c,x			sta DStack+8,x
.b089	95 2d		sta $2d,x			sta DStack+9,x
.b08b	95 2e		sta $2e,x			sta DStack+10,x
.b08d	95 2f		sta $2f,x			sta DStack+11,x
.b08f	ad 00 03	lda $0300			lda base		;   get multiplier
.b092	d0 23		bne $b0b7			bne _Mul_Test
.b094	48		pha		_Mul_Add:	pha			;   save multiplier
.b095	18		clc				clc			;   ud += work
.b096	b5 26		lda $26,x			lda DStack+2,x
.b098	75 2e		adc $2e,x			adc DStack+10,x
.b09a	95 2e		sta $2e,x			sta DStack+10,x
.b09c	b5 27		lda $27,x			lda DStack+3,x
.b09e	75 2f		adc $2f,x			adc DStack+11,x
.b0a0	95 2f		sta $2f,x			sta DStack+11,x
.b0a2	b5 24		lda $24,x			lda DStack+0,x
.b0a4	75 2c		adc $2c,x			adc DStack+8,x
.b0a6	95 2c		sta $2c,x			sta DStack+8,x
.b0a8	b5 25		lda $25,x			lda DStack+1,x
.b0aa	75 2d		adc $2d,x			adc DStack+9,x
.b0ac	95 2d		sta $2d,x			sta DStack+9,x
.b0ae	68		pla				pla			;   restore multiplier
.b0af	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b0b1	36 27		rol $27,x			rol DStack+3,x
.b0b3	36 24		rol $24,x			rol DStack+0,x
.b0b5	36 25		rol $25,x			rol DStack+1,x
.b0b7	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0b8	b0 da		bcs $b094			bcs _Mul_Add
.b0ba	d0 f3		bne $b0af			bne _Mul_Shift
.b0bc	e8		inx				inx			;   2Drop work
.b0bd	e8		inx				inx
.b0be	e8		inx				inx
.b0bf	e8		inx				inx
.b0c0	68		pla				pla			; recover value
.b0c1	18		clc				clc			; add to ud
.b0c2	75 2a		adc $2a,x			adc DStack+6,x
.b0c4	95 2a		sta $2a,x			sta DStack+6,x
.b0c6	90 0a		bcc $b0d2			bcc +
.b0c8	f6 2b		inc $2b,x			inc DStack+7,x
.b0ca	d0 06		bne $b0d2			bne +
.b0cc	f6 28		inc $28,x			inc DStack+4,x
.b0ce	d0 02		bne $b0d2			bne +
.b0d0	f6 29		inc $29,x			inc DStack+5,x
.b0d2					+
.b0d2	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; consume the char
.b0d5	d6 24		dec $24,x			dec DStack+0,x
.b0d7	d0 8e		bne $b067			bne _Char_loop
.b0d9					_done:
=121					CodeLen	.var *-XtPtr1
=$b0d9					Here1 = *	; remember here
>b05e	79					.byte CodeLen	;patch wh_CodeLength
.b0d9	60		rts				rts
>b0da	4e 75 6d 62 65 72		Name0:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0e0	46					.byte (("Number"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0e1	50					.byte WordFlags	;wh_Flags
>b0e2	03					.byte 3	;wh_CodeLength
>b0e3	84					  .byte LinkDisplacement	; offset to previous nt
=$b0e4					XtPtr1 ::= *
=45152					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0e4					Number:
.b0e4	20 44 b4	jsr $b444			jsr underflow_2
.b0e7	a9 00		lda #$00			lda #0
.b0e9	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0eb	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0ed	ad 00 03	lda $0300			lda base
.b0f0	48		pha				pha
.b0f1	20 c1 cc	jsr $ccc1			jsr Two_dup		; ( addr u addr u )
.b0f4	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0f6	20 b8 b1	jsr $b1b8			jsr _MinusCheck		; a minus sign?
.b0f9	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0fb	c9 23		cmp #$23			cmp #'#'
.b0fd	f0 35		beq $b134			beq _base_changed
.b0ff	a0 10		ldy #$10			ldy #16			; hex?
.b101	c9 24		cmp #$24			cmp #'$'
.b103	f0 2f		beq $b134			beq _base_changed
.b105	a0 02		ldy #$02			ldy #2			; binary?
.b107	c9 25		cmp #$25			cmp #'%'
.b109	f0 29		beq $b134			beq _base_changed
.b10b	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b10d	d0 2f		bne $b13e			bne _check_dot
.b10f	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b111	c9 03		cmp #$03			cmp #3
.b113	d0 1c		bne $b131			bne _not_a_char
.b115	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b117	85 1c		sta $1c				sta tmp5
.b119	b5 27		lda $27,x			lda DStack+3,x
.b11b	85 1d		sta $1d				sta tmp5+1
.b11d	a0 02		ldy #$02			ldy #2
.b11f	b1 1c		lda ($1c),y			lda (tmp5),y
.b121	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b123	d0 0c		bne $b131			bne _not_a_char
.b125	88		dey				dey		; The char we want is between the single quotes.
.b126	b1 1c		lda ($1c),y			lda (tmp5),y
.b128	95 26		sta $26,x			sta DStack+2,x
.b12a	a9 00		lda #$00			lda #0
.b12c	95 27		sta $27,x			sta DStack+3,x
.b12e	4c 8d b1	jmp $b18d			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b131					_not_a_char:
.b131	4c 6a b1	jmp $b16a			jmp _number_error
.b134					_base_changed:
.b134	8c 00 03	sty $0300			sty base	; Switch to the new base
.b137	20 81 ca	jsr $ca81			jsr NOS_One_Plus ; start one character later
.b13a	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b13c	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b13e					_check_dot:
.b13e	20 b8 b1	jsr $b1b8			jsr _MinusCheck
.b141	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b143	85 1c		sta $1c				sta tmp5
.b145	b5 27		lda $27,x			lda DStack+3,x
.b147	85 1d		sta $1d				sta tmp5+1
.b149	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b14b	88		dey				dey		; but we need the last character
.b14c	b1 1c		lda ($1c),y			lda (tmp5),y
.b14e	c9 2e		cmp #$2e			cmp #'.'
.b150	d0 04		bne $b156			bne _main
.b152	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b154	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b156					_main:
.b156	20 c1 cc	jsr $ccc1			jsr Two_Dup
.b159	a9 00		lda #$00			lda #0
.b15b	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b15d	95 29		sta $29,x			sta DStack+5,x
.b15f	95 2a		sta $2a,x			sta DStack+6,x
.b161	95 2b		sta $2b,x			sta DStack+7,x
.b163	20 60 b0	jsr $b060			jsr To_Number	; ( ud addr u -- ud addr u )
.b166	b5 24		lda $24,x			lda DStack+0,x
.b168	f0 1f		beq $b189			beq _all_converted
.b16a					_number_error:
.b16a	20 53 c5	jsr $c553			jsr Two_drop	; >NUMBER modified addr u
.b16d	20 53 c5	jsr $c553			jsr Two_drop	; ud   (partially converted number)
.b170	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b172	20 dd cd	jsr $cddd			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b175	20 f5 cd	jsr $cdf5			jsr Type
.b178	a9 3c		lda #$3c			lda #'<'
.b17a	20 dd cd	jsr $cddd			jsr Emit_A
.b17d	20 e9 cd	jsr $cde9			jsr Space
.b180	68		pla				pla		; restore base
.b181	8d 00 03	sta $0300			sta base
.b184	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b186	4c 8c b4	jmp $b48c			jmp ThrowA
.b189					_all_converted:
.b189	e8		inx				inx		; Drop the current addr u
.b18a	e8		inx				inx
.b18b	e8		inx				inx
.b18c	e8		inx				inx
.b18d					_drop_original_string:
.b18d	20 f5 bf	jsr $bff5			jsr TwoNip	 ; Drop the original addr u
.b190	a5 1a		lda $1a				lda tmp4	; flag for double
.b192	f0 10		beq $b1a4			beq _single
.b194	a9 20		lda #$20			lda #%00100000
.b196	05 0c		ora $0c				ora status
.b198	85 0c		sta $0c				sta status
.b19a	a5 1b		lda $1b				lda tmp4+1
.b19c	f0 15		beq $b1b3			beq _done	; no minus, all done
.b19e	20 f6 c6	jsr $c6f6			jsr DNegate
.b1a1	4c b3 b1	jmp $b1b3			jmp _done
.b1a4					_single:
.b1a4	e8		inx				inx		; convert ud to u
.b1a5	e8		inx				inx
.b1a6	a9 df		lda #$df			lda #$ff-%00100000
.b1a8	25 0c		and $0c				and status
.b1aa	85 0c		sta $0c				sta status
.b1ac	a5 1b		lda $1b				lda tmp4+1
.b1ae	f0 03		beq $b1b3			beq _done	; no minus, all done
.b1b0	20 c7 c6	jsr $c6c7			jsr Negate
.b1b3					_done:
.b1b3	68		pla				pla
.b1b4	8d 00 03	sta $0300			sta base
=211					CodeLen	.var *-XtPtr1
=$b1b7					Here1 = *	; remember here
>b0e2	d3					.byte CodeLen	;patch wh_CodeLength
.b1b7	60		rts				rts
.b1b8					_MinusCheck:
.b1b8	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1ba	d0 09		bne $b1c5			bne +
.b1bc	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1be	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; start one character later
.b1c1	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1c3	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1c5	60		rts		+		rts
>b1c6	48 65 78			Name0:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45385					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1c9	03					.byte (("Hex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1ca	10					.byte WordFlags	;wh_Flags
>b1cb	03					.byte 3	;wh_CodeLength
>b1cc	e9					  .byte LinkDisplacement	; offset to previous nt
=$b1cd					XtPtr1 ::= *
=45385					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1cd	a9 10		lda #$10	Hex:		lda #16
.b1cf	d0 0d		bne $b1de			bne decimal_a
=4					CodeLen	.var *-XtPtr1
=$b1d1					Here1 = *	; remember here
>b1cb	04					.byte CodeLen	;patch wh_CodeLength
>b1d1	44 65 63 69 6d 61 6c		Name0:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=45400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1d8	87					.byte (("Decimal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1d9	00					.byte WordFlags	;wh_Flags
>b1da	03					.byte 3	;wh_CodeLength
>b1db	0f					  .byte LinkDisplacement	; offset to previous nt
=$b1dc					XtPtr1 ::= *
=45400					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1dc	a9 0a		lda #$0a	Decimal:	lda #10
.b1de	8d 00 03	sta $0300	decimal_a:	sta base+0
.b1e1	a9 00		lda #$00			lda #0
.b1e3	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CodeLen	.var *-XtPtr1
=$b1e6					Here1 = *	; remember here
>b1da	0a					.byte CodeLen	;patch wh_CodeLength
.b1e6	60		rts				rts
>b1e7	42 61 73 65			Name0:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1eb	a4					.byte (("Base"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1ec	10					.byte WordFlags	;wh_Flags
>b1ed	03					.byte 3	;wh_CodeLength
>b1ee	13					  .byte LinkDisplacement	; offset to previous nt
=$b1ef					XtPtr1 ::= *
=45419					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1ef	a0 03		ldy #$03			ldy #>base
.b1f1	a9 00		lda #$00			lda #<base
.b1f3	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b1f6					Here1 = *	; remember here
>b1ed	07					.byte CodeLen	;patch wh_CodeLength
>b1f6	43 6f 75 6e 74			Name0:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45435					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1fb	85					.byte (("Count"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1fc	50					.byte WordFlags	;wh_Flags
>b1fd	03					.byte 3	;wh_CodeLength
>b1fe	10					  .byte LinkDisplacement	; offset to previous nt
=$b1ff					XtPtr1 ::= *
=45435					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1ff					Count:
.b1ff	20 30 b4	jsr $b430			jsr underflow_1
.b202	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b204	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b206	d0 02		bne $b20a			bne +
.b208	f6 25		inc $25,x			inc DStack+1,x
.b20a					+
.b20a	4c f5 b7	jmp $b7f5			jmp PushZA		; push number of characters, return
=14					CodeLen	.var *-XtPtr1
=$b20d					Here1 = *	; remember here
>b1fd	0e					.byte CodeLen	;patch wh_CodeLength
>b20d	3f 50 61 69 72 43 74 6c		Name0:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b215	41
=9					NameLength = *-Name0
=45462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b216	29					.byte (("?PairCtlA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b217	10					.byte WordFlags	;wh_Flags
>b218	03					.byte 3	;wh_CodeLength
>b219	1b					  .byte LinkDisplacement	; offset to previous nt
=$b21a					XtPtr1 ::= *
=45462					WordListLink ::= Nt0 ; remember the nt of this word for later
.b21a	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b21c	f0 05		beq $b223			beq _8
.b21e	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b220	4c 8c b4	jmp $b48c			jmp ThrowA
.b223	e8		inx		_8:		inx
.b224	e8		inx				inx	; Drop n
.b225	60		rts				rts
=12					CodeLen	.var *-XtPtr1
=$b226					Here1 = *	; remember here
>b218	0c					.byte CodeLen	;patch wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b226	3f 44 6f			Name0:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=45481					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b229	e3					.byte (("?Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b22a	1c					.byte WordFlags	;wh_Flags
>b22b	03					.byte 3	;wh_CodeLength
>b22c	13					  .byte LinkDisplacement	; offset to previous nt
=$b22d					XtPtr1 ::= *
=45481					WordListLink ::= Nt0 ; remember the nt of this word for later
.b22d					Question_Do:
.b22d	20 69 b3	jsr $b369			jsr Do_Leave_Init
.b230	a9 44		lda #$44			lda #<_runtime
.b232	a0 b2		ldy #$b2			ldy #>_runtime
.b234	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA	; compile JSR _runtime
.b237	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b239	a0 03		ldy #$03			ldy #3
.b23b	20 1b cd	jsr $cd1b			jsr Comma_YA
.b23e	20 4c b3	jsr $b34c			jsr Leave		; compile JMP leave
.b241	4c 61 b2	jmp $b261			jmp Do_8		; finish
=23					CodeLen	.var *-XtPtr1
=$b244					Here1 = *	; remember here
>b22b	17					.byte CodeLen	;patch wh_CodeLength
.b244					_runtime:
.b244	20 69 b2	jsr $b269			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b247	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b249	f0 01		beq $b24c			beq _2
.b24b	60		rts				rts		; return Z=0 to signal continue
.b24c	a5 13		lda $13		_2:		lda DoIndex+1
.b24e	c9 80		cmp #$80			cmp #$80
.b250	60		rts				rts		; return Z
>b251	44 6f				Name0:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=45523					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b253	e2					.byte (("Do"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b254	1c					.byte WordFlags	;wh_Flags
>b255	03					.byte 3	;wh_CodeLength
>b256	2a					  .byte LinkDisplacement	; offset to previous nt
=$b257					XtPtr1 ::= *
=45523					WordListLink ::= Nt0 ; remember the nt of this word for later
.b257					Do:
.b257	20 69 b3	jsr $b369			jsr Do_Leave_Init
.b25a	a9 69		lda #$69			lda #<Do_runtime
.b25c	a0 b2		ldy #$b2			ldy #>Do_runtime
.b25e	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA	; compile JSR _runtime
.b261	20 45 ca	jsr $ca45	Do_8:		jsr Here		; remember loop body start addr
.b264	a9 57		lda #$57			lda #<Do		; identifier
.b266	4c f5 b7	jmp $b7f5			jmp PushZA
=18					CodeLen	.var *-XtPtr1
=$b269					Here1 = *	; remember here
>b255	12					.byte CodeLen	;patch wh_CodeLength
.b269					Do_Runtime:
.b269	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b26c	ac 45 07	ldy $0745			ldy DoStkIndex
.b26f	30 2d		bmi $b29e			bmi _TooDeep
.b271	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b273	99 46 07	sta $0746,y			sta DoIndexL,y
.b276	a5 13		lda $13				lda DoIndex+1
.b278	99 4e 07	sta $074e,y			sta DoIndexH,y
.b27b	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b27c	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b27e	f5 26		sbc $26,x			sbc DStack+2,x
.b280	99 56 07	sta $0756,y			sta DoFuFaL,y
.b283	a9 80		lda #$80			lda #$80
.b285	f5 27		sbc $27,x			sbc DStack+3,x
.b287	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b28a	18		clc				clc			; index= FUFA plus original index
.b28b	b5 24		lda $24,x			lda DStack+0,x
.b28d	79 56 07	adc $0756,y			adc DoFuFaL,y
.b290	85 12		sta $12				sta DoIndex+0
.b292	b5 25		lda $25,x			lda DStack+1,x
.b294	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b297	85 13		sta $13				sta DoIndex+1
.b299	e8		inx				inx			; Drop orig index
.b29a	e8		inx				inx
.b29b	e8		inx				inx			; Drop orig limit
.b29c	e8		inx				inx
.b29d	60		rts				rts			; return
.b29e	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b2a0	20 8c b4	jsr $b48c			jsr ThrowA
>b2a3	4c 6f 6f 70			Name0:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45607					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2a7	04					.byte (("Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b2a8	1c					.byte WordFlags	;wh_Flags
>b2a9	03					.byte 3	;wh_CodeLength
>b2aa	54					  .byte LinkDisplacement	; offset to previous nt
=$b2ab					XtPtr1 ::= *
=45607					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2ab					Loop:
.b2ab	a9 b2		lda #$b2			lda #<_Runtime
.b2ad	a0 b2		ldy #$b2			ldy #>_Runtime
.b2af	4c cd b2	jmp $b2cd			jmp Plus_Loop_5
=7					CodeLen	.var *-XtPtr1
=$b2b2					Here1 = *	; remember here
>b2a9	07					.byte CodeLen	;patch wh_CodeLength
.b2b2					_Runtime:
.b2b2	e6 12		inc $12				inc DoIndex+0
.b2b4	f0 02		beq $b2b8			beq _Runtime2
.b2b6	b8		clv				clv			; return V=0 to signal loop back
.b2b7	60		rts				rts
.b2b8	18		clc		_Runtime2:	clc
.b2b9	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2bb	69 01		adc #$01			adc #1
.b2bd	85 13		sta $13				sta DoIndex+1
.b2bf	60		rts				rts			; return V to signal loop back
>b2c0	2b 4c 6f 6f 70			Name0:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45637					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2c5	05					.byte (("+Loop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2c6	1c					.byte WordFlags	;wh_Flags
>b2c7	03					.byte 3	;wh_CodeLength
>b2c8	1e					  .byte LinkDisplacement	; offset to previous nt
=$b2c9					XtPtr1 ::= *
=45637					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2c9					Plus_Loop:
.b2c9	a9 d7		lda #$d7			lda #<Plus_Loop_Runtime
.b2cb	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2cd	20 ee b2	jsr $b2ee	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2d0	a9 ae		lda #$ae			lda #<(Unloop-wh_LinkNt-1)
.b2d2	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2d4	4c c9 b6	jmp $b6c9			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CodeLen	.var *-XtPtr1
=$b2d7					Here1 = *	; remember here
>b2c7	0e					.byte CodeLen	;patch wh_CodeLength
.b2d7					Plus_Loop_Runtime:
.b2d7	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b2d9	b0 10		bcs $b2eb		bcs Throw_Stack_12
.b2db	18		clc				clc			; DoIndex += step
.b2dc	b5 24		lda $24,x			lda DStack+0,x
.b2de	65 12		adc $12				adc DoIndex+0
.b2e0	85 12		sta $12				sta DoIndex+0
.b2e2	b5 25		lda $25,x			lda DStack+1,x
.b2e4	65 13		adc $13				adc DoIndex+1
.b2e6	85 13		sta $13				sta DoIndex+1
.b2e8	e8		inx				inx			; Drop step
.b2e9	e8		inx				inx
.b2ea	60		rts				rts			; return V=0 to signal loop back
.b2eb	4c 53 b4	jmp $b453	Throw_Stack_12: jmp Throw_Stack
.b2ee					Loop_End:
.b2ee	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA	; compile JSR runtime
.b2f1	a9 57		lda #$57			lda #<Do		; check id
.b2f3	20 1a b2	jsr $b21a	Loop_End_3:	jsr QPairCtlA
.b2f6	a9 50		lda #$50			lda #$50		; compile BVC body
.b2f8	20 23 a7	jsr $a723			jsr Branch_CommaA
.b2fb	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2fe	ad 44 07	lda $0744			lda DoLeave+1
.b301	f0 1b		beq $b31e			beq _p9
.b303	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b305	85 15		sta $15				sta tmp1+1
.b307	a0 01		ldy #$01			ldy #1			;   save link
.b309	b1 14		lda ($14),y			lda (tmp1),y
.b30b	48		pha				pha
.b30c	88		dey				dey
.b30d	b1 14		lda ($14),y			lda (tmp1),y
.b30f	48		pha				pha
.b310	a5 00		lda $00				lda cp+0		;   patch addr
.b312	91 14		sta ($14),y			sta (tmp1),y
.b314	a5 01		lda $01				lda cp+1
.b316	c8		iny				iny
.b317	91 14		sta ($14),y			sta (tmp1),y
.b319	68		pla				pla			;   get saved link
.b31a	a8		tay				tay
.b31b	68		pla				pla
.b31c	d0 e5		bne $b303			bne _p1
.b31e					_p9:
.b31e	20 07 b4	jsr $b407			jsr PopYA		; restore DoLeave
.b321	8d 43 07	sta $0743			sta DoLeave+0
.b324	8c 44 07	sty $0744			sty DoLeave+1
.b327	60		rts				rts
>b328	55 6e 6c 6f 6f 70		Name0:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45742					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b32e	06					.byte (("Unloop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b32f	04					.byte WordFlags	;wh_Flags
>b330	03					.byte 3	;wh_CodeLength
>b331	69					  .byte LinkDisplacement	; offset to previous nt
=$b332					XtPtr1 ::= *
=45742					WordListLink ::= Nt0 ; remember the nt of this word for later
.b332					Unloop:
.b332	ac 45 07	ldy $0745			ldy DoStkIndex
.b335	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b338	85 12		sta $12				sta DoIndex+0
.b33a	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b33d	85 13		sta $13				sta DoIndex+1
.b33f	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CodeLen	.var *-XtPtr1
=$b342					Here1 = *	; remember here
>b330	10					.byte CodeLen	;patch wh_CodeLength
.b342	60		rts				rts
>b343	4c 65 61 76 65			Name0:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45768					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b348	a5					.byte (("Leave"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b349	1c					.byte WordFlags	;wh_Flags
>b34a	03					.byte 3	;wh_CodeLength
>b34b	1a					  .byte LinkDisplacement	; offset to previous nt
=$b34c					XtPtr1 ::= *
=45768					WordListLink ::= Nt0 ; remember the nt of this word for later
.b34c					Leave:
.b34c	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b34e	20 04 cd	jsr $cd04			jsr C_Comma_A
.b351	a5 01		lda $01				lda cp+1	; save cp
.b353	48		pha				pha
.b354	a5 00		lda $00				lda cp+0
.b356	48		pha				pha
.b357	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b35a	ac 44 07	ldy $0744			ldy DoLeave+1
.b35d	20 1b cd	jsr $cd1b			jsr Comma_YA
.b360	68		pla				pla		; update DoLeave
.b361	8d 43 07	sta $0743			sta DoLeave+0
.b364	68		pla				pla
.b365	8d 44 07	sta $0744			sta DoLeave+1
=28					CodeLen	.var *-XtPtr1
=$b368					Here1 = *	; remember here
>b34a	1c					.byte CodeLen	;patch wh_CodeLength
.b368	60		rts				rts
.b369					Do_Leave_Init:
.b369	ad 43 07	lda $0743			lda DoLeave+0
.b36c	ac 44 07	ldy $0744			ldy DoLeave+1
.b36f	20 c6 b7	jsr $b7c6			jsr PushYA	; save old leave head
.b372	a9 00		lda #$00			lda #0		; init
.b374	8d 44 07	sta $0744			sta DoLeave+1
.b377	60		rts				rts
>b378	49				Name0:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45817					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b379	21					.byte (("I"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b37a	04					.byte WordFlags	;wh_Flags
>b37b	03					.byte 3	;wh_CodeLength
>b37c	31					  .byte LinkDisplacement	; offset to previous nt
=$b37d					XtPtr1 ::= *
=45817					WordListLink ::= Nt0 ; remember the nt of this word for later
.b37d	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b380	ca		dex				dex
.b381	ca		dex				dex
.b382	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b383	a5 12		lda $12				lda DoIndex+0
.b385	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b388	95 24		sta $24,x			sta DStack+0,x
.b38a	a5 13		lda $13				lda DoIndex+1
.b38c	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b38f	95 25		sta $25,x			sta DStack+1,x
=20					CodeLen	.var *-XtPtr1
=$b391					Here1 = *	; remember here
>b37b	14					.byte CodeLen	;patch wh_CodeLength
.b391	60		rts				rts
>b392	4a				Name0:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=45843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b393	41					.byte (("J"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b394	04					.byte WordFlags	;wh_Flags
>b395	03					.byte 3	;wh_CodeLength
>b396	1a					  .byte LinkDisplacement	; offset to previous nt
=$b397					XtPtr1 ::= *
=45843					WordListLink ::= Nt0 ; remember the nt of this word for later
.b397	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b39a	ca		dex				dex
.b39b	ca		dex				dex
.b39c	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b39d	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b3a0	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b3a3	95 24		sta $24,x			sta DStack+0,x
.b3a5	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b3a8	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b3ab	95 25		sta $25,x			sta DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$b3ad					Here1 = *	; remember here
>b395	16					.byte CodeLen	;patch wh_CodeLength
.b3ad	60		rts				rts
>b3ae	41 62 6f 72 74 22		Name0:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=45876					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3b4	46					.byte (('Abort"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b3b5	1c					.byte WordFlags	;wh_Flags
>b3b6	03					.byte 3	;wh_CodeLength
>b3b7	21					  .byte LinkDisplacement	; offset to previous nt
=$b3b8					XtPtr1 ::= *
=45876					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3b8					Abort_Quote:
.b3b8	20 01 b9	jsr $b901			jsr S_Quote		; compile the string literal
.b3bb	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3bd	a9 c2		lda #$c2			lda #<_runtime
.b3bf	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b3c2					Here1 = *	; remember here
>b3b6	0a					.byte CodeLen	;patch wh_CodeLength
.b3c2					_runtime:
.b3c2	b5 28		lda $28,x			lda DStack+4,x
.b3c4	15 29		ora $29,x			ora DStack+5,x
.b3c6	d0 03		bne $b3cb			bne _do_abort	; true?
.b3c8	4c 9e ad	jmp $ad9e			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3cb					_do_abort:
.b3cb	20 f5 cd	jsr $cdf5			jsr Type	; print string
.b3ce	20 7c ab	jsr $ab7c			jsr CR		; We follow Gforth in going to a new line
.b3d1	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3d3	4c 8c b4	jmp $b48c			jmp ThrowA
>b3d6	41 62 6f 72 74			Name0:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45915					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3db	85					.byte (("Abort"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3dc	10					.byte WordFlags	;wh_Flags
>b3dd	03					.byte 3	;wh_CodeLength
>b3de	27					  .byte LinkDisplacement	; offset to previous nt
=$b3df					XtPtr1 ::= *
=45915					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3df	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3e1	4c 8c b4	jmp $b48c			jmp ThrowA
=5					CodeLen	.var *-XtPtr1
=$b3e4					Here1 = *	; remember here
>b3dd	05					.byte CodeLen	;patch wh_CodeLength
>b3e4	50 6f 70 41			Name0:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=45928					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3e8	24					.byte (("PopA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3e9	10					.byte WordFlags	;wh_Flags
>b3ea	03					.byte 3	;wh_CodeLength
>b3eb	0d					  .byte LinkDisplacement	; offset to previous nt
=$b3ec					XtPtr1 ::= *
=45928					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3ec					PopA:
.b3ec	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3ee	b0 63		bcs $b453		bcs Throw_Stack
.b3f0	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3f2	e8		inx				inx
.b3f3	e8		inx				inx
=8					CodeLen	.var *-XtPtr1
=$b3f4					Here1 = *	; remember here
>b3ea	08					.byte CodeLen	;patch wh_CodeLength
.b3f4	60		rts		                rts
.b3f5					PopA2:
.b3f5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3f7	b0 5a		bcs $b453		bcs Throw_Stack
.b3f9	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3fb	e8		inx				inx
.b3fc	e8		inx				inx
.b3fd	60		rts		                rts
>b3fe	50 6f 70 59 41			Name0:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=45955					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b403	25					.byte (("PopYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b404	10					.byte WordFlags	;wh_Flags
>b405	03					.byte 3	;wh_CodeLength
>b406	1b					  .byte LinkDisplacement	; offset to previous nt
=$b407					XtPtr1 ::= *
=45955					WordListLink ::= Nt0 ; remember the nt of this word for later
.b407					PopYA:
.b407	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b409	b0 48		bcs $b453		bcs Throw_Stack
.b40b	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b40d	b4 25		ldy $25,x			ldy DStack+1,x
.b40f	e8		inx				inx
.b410	e8		inx				inx
=10					CodeLen	.var *-XtPtr1
=$b411					Here1 = *	; remember here
>b405	0a					.byte CodeLen	;patch wh_CodeLength
.b411	60		rts				rts
.b412					PopTmp1:
.b412	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b414	b0 3d		bcs $b453		bcs Throw_Stack
.b416	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b418	b4 25		ldy $25,x			ldy DStack+1,x
.b41a	e8		inx				inx
.b41b	e8		inx				inx
.b41c	85 14		sta $14				sta tmp1+0
.b41e	84 15		sty $15				sty tmp1+1
.b420	60		rts				rts
>b421	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b429	77 5f 31
=11					NameLength = *-Name0
=45996					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b42c	2b					.byte (("underflow_1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b42d	10					.byte WordFlags	;wh_Flags
>b42e	03					.byte 3	;wh_CodeLength
>b42f	29					  .byte LinkDisplacement	; offset to previous nt
=$b430					XtPtr1 ::= *
=45996					WordListLink ::= Nt0 ; remember the nt of this word for later
.b430					underflow_1:
.b430	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b432	b0 1f		bcs $b453		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b434					Here1 = *	; remember here
>b42e	04					.byte CodeLen	;patch wh_CodeLength
.b434	60		rts				rts
>b435	75 6e 64 65 72 66 6c 6f		Name0:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b43d	77 5f 32
=11					NameLength = *-Name0
=46016					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b440	4b					.byte (("underflow_2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b441	10					.byte WordFlags	;wh_Flags
>b442	03					.byte 3	;wh_CodeLength
>b443	14					  .byte LinkDisplacement	; offset to previous nt
=$b444					XtPtr1 ::= *
=46016					WordListLink ::= Nt0 ; remember the nt of this word for later
.b444					underflow_2:
.b444	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b446	b0 0b		bcs $b453		bcs Throw_Stack
=4					CodeLen	.var *-XtPtr1
=$b448					Here1 = *	; remember here
>b442	04					.byte CodeLen	;patch wh_CodeLength
.b448	60		rts		                rts
.b449					underflow_3:
.b449	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b44b	b0 06		bcs $b453		bcs Throw_Stack
.b44d	60		rts		                rts
.b44e					underflow_4:
.b44e	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b450	b0 01		bcs $b453		bcs Throw_Stack
.b452	60		rts		                rts
.b453					Throw_Stack:
.b453	30 04		bmi $b459			bmi _over
.b455	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b457	d0 33		bne $b48c			bne ThrowA
.b459	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b45b	d0 2f		bne $b48c			bne ThrowA
.b45d					Throw_FPStack:
.b45d	30 04		bmi $b463			bmi _over
.b45f	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b461	d0 29		bne $b48c			bne ThrowA
.b463	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b465	d0 25		bne $b48c			bne ThrowA
.b467					Throw_FpOutOfRange:
.b467	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b469	d0 21		bne $b48c			bne ThrowA
>b46b	3f 53 74 61 63 6b		Name0:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b471	66					.byte (("?Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b472	10					.byte WordFlags	;wh_Flags
>b473	03					.byte 3	;wh_CodeLength
>b474	31					  .byte LinkDisplacement	; offset to previous nt
=$b475					XtPtr1 ::= *
=46065					WordListLink ::= Nt0 ; remember the nt of this word for later
.b475					QStack:
.b475	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b477	b0 da		bcs $b453		bcs Throw_Stack
.b479	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b47b	c0 0b		cpy #$0b			cpy #FDim+1
.b47d	b0 de		bcs $b45d			bcs Throw_FPStack
=10					CodeLen	.var *-XtPtr1
=$b47f					Here1 = *	; remember here
>b473	0a					.byte CodeLen	;patch wh_CodeLength
.b47f	60		rts				rts			; all OK
>b480	54 68 72 6f 77			Name0:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46085					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b485	e5					.byte (("Throw"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b486	10					.byte WordFlags	;wh_Flags
>b487	03					.byte 3	;wh_CodeLength
>b488	14					  .byte LinkDisplacement	; offset to previous nt
=$b489					XtPtr1 ::= *
=46085					WordListLink ::= Nt0 ; remember the nt of this word for later
.b489	20 ec b3	jsr $b3ec	Throw:		jsr PopA		; pop n
.b48c	20 b7 b4	jsr $b4b7	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b48f	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b491					Abort_Core:
.b491	20 ba b8	jsr $b8ba			jsr SLiteral_runtime
.b494	4c 9a b4	jmp $b49a			  jmp +
>b497	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b49a	20 f5 cd	jsr $cdf5	+		jsr Type
.b49d	20 1b cf	jsr $cf1b			jsr R_From		; show return stack TOS
.b4a0	20 99 81	jsr $8199			jsr TypeSymbol
.b4a3	20 36 cf	jsr $cf36			jsr R_Fetch		; show return stack NOS
.b4a6	20 99 81	jsr $8199			jsr TypeSymbol
.b4a9	20 7c ab	jsr $ab7c			jsr CR
.b4ac					Abort_Core2:
.b4ac	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b4ae	8d 45 07	sta $0745			sta DoStkIndex
.b4b1	20 fa b4	jsr $b4fa			jsr Empty_Stack		; empty the Data Stack & FP stack
.b4b4	4c 09 b5	jmp $b509			jmp Quit		; continue into QUIT.
.b4b7					Type_Exception_Text_A:
.b4b7	85 16		sta $16				sta tmp2+0	; save error code
.b4b9	a9 5c		lda #$5c			lda #<Exception_Text_List
.b4bb	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4bd	85 18		sta $18				sta tmp3+0
.b4bf	84 19		sty $19				sty tmp3+1
.b4c1	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4c3	b1 18		lda ($18),y			lda (tmp3),y
.b4c5	f0 1a		beq $b4e1			beq _NotFound
.b4c7	c5 16		cmp $16				cmp tmp2+0
.b4c9	f0 11		beq $b4dc			beq _Found
.b4cb	c8		iny		-		iny		;   step to end of entry
.b4cc	b1 18		lda ($18),y			lda (tmp3),y
.b4ce	d0 fb		bne $b4cb			bne -
.b4d0	98		tya				tya		;   step to next entry
.b4d1	38		sec				sec
.b4d2	65 18		adc $18				adc tmp3+0
.b4d4	85 18		sta $18				sta tmp3+0
.b4d6	90 e9		bcc $b4c1			bcc _TestEntry
.b4d8	e6 19		inc $19				inc tmp3+1
.b4da	d0 e5		bne $b4c1			bne _TestEntry
.b4dc					_Found:
.b4dc	a0 01		ldy #$01			ldy #1
.b4de	4c 16 ce	jmp $ce16			jmp Print_ASCIIZ_tmp3_no_lf
.b4e1	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4e3	a5 16		lda $16				lda tmp2+0
.b4e5	20 c6 b7	jsr $b7c6			jsr PushYA
.b4e8	4c ec cb	jmp $cbec			jmp Dot
=98					CodeLen	.var *-XtPtr1
=$b4eb					Here1 = *	; remember here
>b487	62					.byte CodeLen	;patch wh_CodeLength
>b4eb	45 6d 70 74 79 2d 53 74		Name0:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4f3	61 63 6b
=11					NameLength = *-Name0
=46198					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4f6	6b					.byte (("Empty-Stack"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4f7	10					.byte WordFlags	;wh_Flags
>b4f8	03					.byte 3	;wh_CodeLength
>b4f9	71					  .byte LinkDisplacement	; offset to previous nt
=$b4fa					XtPtr1 ::= *
=46198					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4fa	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4fc	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4fe	85 4c		sta $4c				sta FIndex
=6					CodeLen	.var *-XtPtr1
=$b500					Here1 = *	; remember here
>b4f8	06					.byte CodeLen	;patch wh_CodeLength
.b500	60		rts				rts
>b501	51 75 69 74			Name0:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b505	84					.byte (("Quit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b506	10					.byte WordFlags	;wh_Flags
>b507	03					.byte 3	;wh_CodeLength
>b508	0f					  .byte LinkDisplacement	; offset to previous nt
=$b509					XtPtr1 ::= *
=46213					WordListLink ::= Nt0 ; remember the nt of this word for later
.b509					Quit:
.b509	8a		txa				txa		; Save the DStack that we just defined
.b50a	a2 ff		ldx #$ff			ldx #rsp0
.b50c	9a		txs				txs
.b50d	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b50e	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b510	85 02		sta $02				sta insrc+0
.b512	85 03		sta $03				sta insrc+1
.b514	20 57 b7	jsr $b757			jsr Left_Bracket_NoCheck ; switch to interpret state
.b517					_get_line:
.b517	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b519	85 04		sta $04				sta cib+0
.b51b	a9 02		lda #$02			lda #>buffer0
.b51d	85 05		sta $05				sta cib+1
.b51f	20 83 c2	jsr $c283			jsr Refill		; ( -- f )
.b522	b5 24		lda $24,x			lda DStack+0,x
.b524	d0 05		bne $b52b			bne +
.b526	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b528	4c 8c b4	jmp $b48c			jmp ThrowA
.b52b	e8		inx		+		inx			; drop the flag
.b52c	e8		inx				inx
.b52d	20 44 b5	jsr $b544			jsr interpret
.b530	a5 0a		lda $0a				lda state
.b532	d0 06		bne $b53a			bne _print_compiled
.b534	a9 28		lda #$28			lda #<str_ok
.b536	a0 da		ldy #$da			ldy #>str_ok
.b538	d0 04		bne $b53e			bne _print
.b53a	a9 2c		lda #$2c	_print_compiled: lda #<str_compiled	; "compile" string
.b53c	a0 da		ldy #$da			ldy #>str_compiled
.b53e	20 21 ce	jsr $ce21	_print:		jsr Print_ASCIIZ_YA
.b541	4c 17 b5	jmp $b517			jmp _get_line
=59					CodeLen	.var *-XtPtr1
=$b544					Here1 = *	; remember here
>b507	3b					.byte CodeLen	;patch wh_CodeLength
.b544					Interpret:
.b544					_loop:
.b544	20 75 b4	jsr $b475			jsr QStack		; check stack bounds
.b547	20 85 ba	jsr $ba85			jsr parse_name		; ( "string" -- addr u )
.b54a	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b54c	f0 53		beq $b5a1	                beq _line_done
.b54e	20 c1 cc	jsr $ccc1			jsr Two_dup		; ( addr u -- addr u addr u )
.b551	20 6f bc	jsr $bc6f			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b554	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b556	d0 1b		bne $b573			bne _got_name_token
.b558	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b559	e8		inx		                inx
.b55a	20 e4 b0	jsr $b0e4	                jsr Number           ; ( addr u -- u|d )
.b55d	a5 0a		lda $0a		                lda state		; interpreting?
.b55f	f0 e3		beq $b544	                beq _loop		;   we're done
.b561	a9 20		lda #$20	                lda #$20		; double cell number?
.b563	24 0c		bit $0c		                bit status
.b565	f0 06		beq $b56d	                beq _single_number
.b567	20 61 b8	jsr $b861			jsr Two_literal		; compile a double number
.b56a	4c 44 b5	jmp $b544			jmp _loop
.b56d	20 7b b7	jsr $b77b	_single_number:	jsr Literal		; compile a single number
.b570	4c 44 b5	jmp $b544			jmp _loop
.b573					_got_name_token:
.b573	20 ad c9	jsr $c9ad			jsr Nip
.b576	20 ad c9	jsr $c9ad			jsr Nip			; ( nt )
.b579	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b57b	84 15		sty $15				sty tmp1+1
.b57d	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b57f	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b581	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b583	d0 12		bne $b597			bne _compile
.b585	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b587	f0 05		beq $b58e			beq _execute
.b589	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b58b	20 8c b4	jsr $b48c			jsr ThrowA
.b58e	20 ba bd	jsr $bdba	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b591	20 32 ce	jsr $ce32			jsr Execute		; EXECUTE the xt that is TOS
.b594	4c 44 b5	jmp $b544	                jmp _loop
.b597					_compile:
.b597	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b599	d0 f3		bne $b58e			bne _execute		;   IMMEDIATE word, execute now
.b59b	20 c6 b6	jsr $b6c6			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b59e	4c 44 b5	jmp $b544			jmp _loop
.b5a1					_line_done:
.b5a1	e8		inx				inx			; drop stuff from PARSE_NAME
.b5a2	e8		inx				inx
.b5a3	e8		inx				inx
.b5a4	e8		inx				inx
.b5a5	60		rts				rts
>b5a6	49 6d 6d 65 64 69 61 74		Name0:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b5ae	65
=9					NameLength = *-Name0
=46383					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5af	a9					.byte (("Immediate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b5b0	10					.byte WordFlags	;wh_Flags
>b5b1	03					.byte 3	;wh_CodeLength
>b5b2	aa					  .byte LinkDisplacement	; offset to previous nt
=$b5b3					XtPtr1 ::= *
=46383					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5b3	a9 08		lda #$08	Immediate:	lda #IM
.b5b5	48		pha		SetFlag:	pha
.b5b6	20 57 ba	jsr $ba57			jsr current_to_dp
.b5b9	a0 81		ldy #$81			ldy #Wh_Flags
.b5bb	68		pla				pla
.b5bc	11 10		ora ($10),y			ora (dp),y
.b5be	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5c0					Here1 = *	; remember here
>b5b1	0d					.byte CodeLen	;patch wh_CodeLength
.b5c0	60		rts				rts
>b5c1	43 6f 6d 70 69 6c 65 2d		Name0:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5c9	6f 6e 6c 79
=12					NameLength = *-Name0
=46413					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5cd	2c					.byte (("Compile-only"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5ce	10					.byte WordFlags	;wh_Flags
>b5cf	03					.byte 3	;wh_CodeLength
>b5d0	1e					  .byte LinkDisplacement	; offset to previous nt
=$b5d1					XtPtr1 ::= *
=46413					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5d1	a9 04		lda #$04	Compile_Only:	lda #CO
.b5d3	d0 e0		bne $b5b5			bne SetFlag
=4					CodeLen	.var *-XtPtr1
=$b5d5					Here1 = *	; remember here
>b5cf	04					.byte CodeLen	;patch wh_CodeLength
>b5d5	6e 65 76 65 72 2d 6e 61		Name0:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5dd	74 69 76 65
=12					NameLength = *-Name0
=46433					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5e1	ac					.byte (("never-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5e2	10					.byte WordFlags	;wh_Flags
>b5e3	03					.byte 3	;wh_CodeLength
>b5e4	14					  .byte LinkDisplacement	; offset to previous nt
=$b5e5					XtPtr1 ::= *
=46433					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5e5	20 57 ba	jsr $ba57	Never_Native:	jsr current_to_dp
.b5e8	a0 81		ldy #$81			ldy #Wh_Flags
.b5ea	b1 10		lda ($10),y			lda (dp),y
.b5ec	09 10		ora #$10			ora #NN		; set NN flag
.b5ee	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5f0	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b5f2					Here1 = *	; remember here
>b5e3	0d					.byte CodeLen	;patch wh_CodeLength
.b5f2	60		rts				rts
>b5f3	61 6c 77 61 79 73 2d 6e		Name0:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5fb	61 74 69 76 65
=13					NameLength = *-Name0
=46464					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b600	ad					.byte (("always-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b601	10					.byte WordFlags	;wh_Flags
>b602	03					.byte 3	;wh_CodeLength
>b603	1f					  .byte LinkDisplacement	; offset to previous nt
=$b604					XtPtr1 ::= *
=46464					WordListLink ::= Nt0 ; remember the nt of this word for later
.b604	20 57 ba	jsr $ba57	Always_Native:	jsr current_to_dp
.b607	a0 81		ldy #$81			ldy #Wh_Flags
.b609	b1 10		lda ($10),y			lda (dp),y
.b60b	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b60d	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b60f	91 10		sta ($10),y			sta (dp),y
=13					CodeLen	.var *-XtPtr1
=$b611					Here1 = *	; remember here
>b602	0d					.byte CodeLen	;patch wh_CodeLength
.b611	60		rts				rts
>b612	61 6c 6c 6f 77 2d 6e 61		Name0:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b61a	74 69 76 65
=12					NameLength = *-Name0
=46494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b61e	ac					.byte (("allow-native"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b61f	10					.byte WordFlags	;wh_Flags
>b620	03					.byte 3	;wh_CodeLength
>b621	1e					  .byte LinkDisplacement	; offset to previous nt
=$b622					XtPtr1 ::= *
=46494					WordListLink ::= Nt0 ; remember the nt of this word for later
.b622	20 57 ba	jsr $ba57	Allow_Native:	jsr current_to_dp
.b625	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b627	b1 10		lda ($10),y			lda (dp),y
.b629	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b62b	91 10		sta ($10),y			sta (dp),y
=11					CodeLen	.var *-XtPtr1
=$b62d					Here1 = *	; remember here
>b620	0b					.byte CodeLen	;patch wh_CodeLength
.b62d	60		rts				rts
>b62e	6e 63 2d 6c 69 6d 69 74		Name0:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b636	88					.byte (("nc-limit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b637	10					.byte WordFlags	;wh_Flags
>b638	03					.byte 3	;wh_CodeLength
>b639	18					  .byte LinkDisplacement	; offset to previous nt
=$b63a					XtPtr1 ::= *
=46518					WordListLink ::= Nt0 ; remember the nt of this word for later
.b63a	a0 03		ldy #$03			ldy #>nc_limit
.b63c	a9 02		lda #$02			lda #<nc_limit
.b63e	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b641					Here1 = *	; remember here
>b638	07					.byte CodeLen	;patch wh_CodeLength
>b641	73 74 72 69 70 2d 75 6e		Name0:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b649	64 65 72 66 6c 6f 77
=15					NameLength = *-Name0
=46544					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b650	ef					.byte (("strip-underflow"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b651	10					.byte WordFlags	;wh_Flags
>b652	03					.byte 3	;wh_CodeLength
>b653	1a					  .byte LinkDisplacement	; offset to previous nt
=$b654					XtPtr1 ::= *
=46544					WordListLink ::= Nt0 ; remember the nt of this word for later
.b654	a0 03		ldy #$03			ldy #>uf_strip
.b656	a9 04		lda #$04			lda #<uf_strip
.b658	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$b65b					Here1 = *	; remember here
>b652	07					.byte CodeLen	;patch wh_CodeLength
>b65b	70 6f 73 74 70 6f 6e 65		Name0:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46563					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b663	a8					.byte (("postpone"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b664	1c					.byte WordFlags	;wh_Flags
>b665	03					.byte 3	;wh_CodeLength
>b666	13					  .byte LinkDisplacement	; offset to previous nt
=$b667					XtPtr1 ::= *
=46563					WordListLink ::= Nt0 ; remember the nt of this word for later
.b667					Postpone:
.b667	20 b6 ba	jsr $bab6			jsr parse_name_check	; get name string
.b66a	20 98 bc	jsr $bc98			jsr find_name_check	; lookup name
.b66d	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b66f	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b671	29 08		and #$08			and #IM
.b673	f0 03		beq $b678			beq _not_immediate
.b675	4c c6 b6	jmp $b6c6			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b678					_not_immediate:
.b678	20 ad b7	jsr $b7ad			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b67b	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b67d	a9 c9		lda #$c9			lda #<Compile_Comma_NT_YA
.b67f	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=27					CodeLen	.var *-XtPtr1
=$b682					Here1 = *	; remember here
>b665	1b					.byte CodeLen	;patch wh_CodeLength
>b682	52 65 63 75 72 73 65		Name0:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46601					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b689	a7					.byte (("Recurse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b68a	1c					.byte WordFlags	;wh_Flags
>b68b	03					.byte 3	;wh_CodeLength
>b68c	26					  .byte LinkDisplacement	; offset to previous nt
=$b68d					XtPtr1 ::= *
=46601					WordListLink ::= Nt0 ; remember the nt of this word for later
.b68d					Recurse:
.b68d	a5 0e		lda $0e				lda WorkWord+0
.b68f	a4 0f		ldy $0f				ldy WorkWord+1
.b691	20 c6 b7	jsr $b7c6			jsr PushYA
.b694	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b696	50 10		bvc $b6a8			bvc _xt
.b698	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b69a	b1 0e		lda ($0e),y			lda (WorkWord),y
.b69c	29 20		and #$20			and #AN
.b69e	f0 05		beq $b6a5			beq _NotAn
.b6a0	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b6a2	20 8c b4	jsr $b48c			jsr ThrowA
.b6a5					_NotAN:
.b6a5	20 ba bd	jsr $bdba			jsr Name_To_Int		; convert nt to xt
.b6a8					_xt:
.b6a8	4c 3b cd	jmp $cd3b			jmp Jsr_Comma		; compile JSR xt, return
=30					CodeLen	.var *-XtPtr1
=$b6ab					Here1 = *	; remember here
>b68b	1e					.byte CodeLen	;patch wh_CodeLength
>b6ab	43 6f 6d 70 69 6c 65 2c		Name0:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=46643					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b6b3	88					.byte (("Compile,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b6b4	10					.byte WordFlags	;wh_Flags
>b6b5	03					.byte 3	;wh_CodeLength
>b6b6	2a					  .byte LinkDisplacement	; offset to previous nt
=$b6b7					XtPtr1 ::= *
=46643					WordListLink ::= Nt0 ; remember the nt of this word for later
.b6b7					Compile_Comma:
.b6b7	20 73 cf	jsr $cf73			jsr Dup			; ( xt xt )
.b6ba	20 69 bd	jsr $bd69			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6bd	e8		inx				inx			; drop nt
.b6be	e8		inx				inx
.b6bf	a5 15		lda $15				lda tmp1+1
.b6c1	d0 0a		bne $b6cd			bne Compile_Comma_NT_Tmp1
.b6c3	4c 3b cd	jmp $cd3b			jmp Jsr_Comma		; compile jsr, return
.b6c6					Compile_Comma_NT:
.b6c6	20 07 b4	jsr $b407			jsr PopYA
.b6c9					Compile_Comma_NT_YA:
.b6c9	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6cb	84 15		sty $15				sty tmp1+1
.b6cd					Compile_Comma_NT_Tmp1:
.b6cd	20 c7 bd	jsr $bdc7			jsr NameToIntTmp	; tmp2= xt
.b6d0	a5 16		lda $16				lda tmp2+0
.b6d2	a4 17		ldy $17				ldy tmp2+1
.b6d4	20 c6 b7	jsr $b7c6			jsr PushYA		; ( xt )
.b6d7	a0 82		ldy #$82			ldy #wh_CodeLength
.b6d9	b1 14		lda ($14),y			lda (tmp1),y
.b6db	20 f5 b7	jsr $b7f5			jsr PushZA		; ( xt u )
.b6de	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6e0	b1 14		lda ($14),y			lda (tmp1),y
.b6e2	29 30		and #$30			and #ST
.b6e4	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6e6	f0 2d		beq $b715			beq _strip
.b6e8	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6ea	f0 12		beq $b6fe			beq _jsr_opt
.b6ec	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6ee	f0 2f		beq $b71f			beq _inline
.b6f0	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6f3	d0 2a		bne $b71f			bne _inline
.b6f5	ad 02 03	lda $0302			lda nc_limit+0
.b6f8	d5 24		cmp $24,x			cmp DStack+0,x
.b6fa	f0 02		beq $b6fe			beq _jsr_opt
.b6fc	b0 21		bcs $b71f			bcs _inline
.b6fe					_jsr_opt:
.b6fe	ad 04 03	lda $0304			lda uf_strip
.b701	f0 0d		beq $b710			beq _jsr
.b703	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b705	b1 14		lda ($14),y			lda (tmp1),y
.b707	29 40		and #$40			and #UF
.b709	f0 05		beq $b710			beq _jsr
.b70b	a9 03		lda #$03			lda #3			;   strip the underflow check
.b70d	20 33 ca	jsr $ca33			jsr Nos_Plus_A
.b710					_jsr:
.b710	e8		inx				inx			; Drop len
.b711	e8		inx				inx
.b712	4c 3b cd	jmp $cd3b			jmp Jsr_Comma		; compile jsr, return
.b715					_strip:
.b715	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b717	20 33 ca	jsr $ca33			jsr Nos_Plus_A
.b71a	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b71c	20 67 ca	jsr $ca67			jsr minus_a
.b71f					_inline:
.b71f	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b722	f0 12		beq $b736			beq +
.b724	a0 81		ldy #$81			ldy #wh_Flags		; this word contains underflow checking?
.b726	b1 14		lda ($14),y			lda (tmp1),y
.b728	29 40		and #$40			and #UF
.b72a	f0 0a		beq $b736			beq +
.b72c	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b72e	20 33 ca	jsr $ca33			jsr Nos_Plus_A
.b731	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b733	20 67 ca	jsr $ca67			jsr minus_a
.b736					+
.b736	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b738	f0 0c		beq $b746			beq _copy_end
.b73a	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b73c	20 04 cd	jsr $cd04			jsr C_Comma_A
.b73f	20 81 ca	jsr $ca81			jsr NOS_One_Plus
.b742	d6 24		dec $24,x			dec DStack+0,x
.b744	d0 f4		bne $b73a			bne _copy_loop
.b746					_copy_end:
.b746	4c 53 c5	jmp $c553			jmp Two_drop
=146					CodeLen	.var *-XtPtr1
=$b749					Here1 = *	; remember here
>b6b5	92					.byte CodeLen	;patch wh_CodeLength
>b749	5b				Name0:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46794					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b74a	61					.byte (("["[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifiable copy, remember for later
=151					LinkDisplacement = Nt0-WordListLink
>b74b	1c					.byte WordFlags	;wh_Flags
>b74c	03					.byte 3	;wh_CodeLength
>b74d	97					  .byte LinkDisplacement	; offset to previous nt
=$b74e					XtPtr1 ::= *
=46794					WordListLink ::= Nt0 ; remember the nt of this word for later
.b74e	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b750	d0 05		bne $b757			bne Left_Bracket_NoCheck
.b752	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b754	4c 8c b4	jmp $b48c			jmp ThrowA
.b757					Left_Bracket_NoCheck:
.b757	a9 00		lda #$00			lda #0
.b759	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b75b	85 0b		sta $0b				sta state+1
=15					CodeLen	.var *-XtPtr1
=$b75d					Here1 = *	; remember here
>b74c	0f					.byte CodeLen	;patch wh_CodeLength
.b75d	60		rts				rts
>b75e	5d				Name0:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46815					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b75f	a1					.byte (("]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b760	18					.byte WordFlags	;wh_Flags
>b761	03					.byte 3	;wh_CodeLength
>b762	15					  .byte LinkDisplacement	; offset to previous nt
=$b763					XtPtr1 ::= *
=46815					WordListLink ::= Nt0 ; remember the nt of this word for later
.b763					Right_Bracket:
.b763	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b765	f0 05		beq $b76c			beq +
.b767	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b769	4c 8c b4	jmp $b48c			jmp ThrowA
.b76c					+
.b76c	a9 ff		lda #$ff			lda #$FF
.b76e	d0 e9		bne $b759			bne Left_Bracket_3
=13					CodeLen	.var *-XtPtr1
=$b770					Here1 = *	; remember here
>b761	0d					.byte CodeLen	;patch wh_CodeLength
>b770	4c 69 74 65 72 61 6c		Name0:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=46839					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b777	87					.byte (("Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b778	5c					.byte WordFlags	;wh_Flags
>b779	03					.byte 3	;wh_CodeLength
>b77a	18					  .byte LinkDisplacement	; offset to previous nt
=$b77b					XtPtr1 ::= *
=46839					WordListLink ::= Nt0 ; remember the nt of this word for later
.b77b					Literal:
.b77b	20 30 b4	jsr $b430			jsr underflow_1
.b77e	20 84 b7	jsr $b784			jsr LitCompile		; compile load regs, choose a runtime routine
.b781	4c c9 b6	jmp $b6c9			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CodeLen	.var *-XtPtr1
=$b784					Here1 = *	; remember here
>b779	09					.byte CodeLen	;patch wh_CodeLength
.b784					LitCompile:
.b784	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b786	f0 08		beq $b790			beq _ZByte
.b788	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b78b	a9 42		lda #$42			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b78d	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b78f	60		rts				rts
.b790					_ZByte:
.b790	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b792	f0 08		beq $b79c			beq _zero
.b794	20 b4 b7	jsr $b7b4			jsr lda_immed_comma	; compile "lda #" using TOS
.b797	a9 71		lda #$71			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b799	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b79b	60		rts				rts
.b79c	e8		inx		_zero:		inx			; drop
.b79d	e8		inx				inx
.b79e	a9 7f		lda #$7f			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b7a0	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b7a2	60		rts				rts
>b7a3	4c 44 59 41 23 2c		Name0:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46889					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7a9	86					.byte (("LDYA#,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b7aa	10					.byte WordFlags	;wh_Flags
>b7ab	03					.byte 3	;wh_CodeLength
>b7ac	32					  .byte LinkDisplacement	; offset to previous nt
=$b7ad					XtPtr1 ::= *
=46889					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7ad					ldya_immed_comma:
.b7ad	a9 a0		lda #$a0			lda #$a0		; ldy #
.b7af	b4 25		ldy $25,x			ldy DStack+1,x
.b7b1	20 1b cd	jsr $cd1b			jsr Comma_YA
.b7b4					lda_immed_comma:
.b7b4	a9 a9		lda #$a9			lda #$a9		; lda #
.b7b6	20 04 cd	jsr $cd04			jsr C_Comma_A
.b7b9	4c 01 cd	jmp $cd01			jmp C_Comma
=15					CodeLen	.var *-XtPtr1
=$b7bc					Here1 = *	; remember here
>b7ab	0f					.byte CodeLen	;patch wh_CodeLength
>b7bc	50 75 73 68 59 41		Name0:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7c2	26					.byte (("PushYA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7c3	00					.byte WordFlags	;wh_Flags
>b7c4	03					.byte 3	;wh_CodeLength
>b7c5	19					  .byte LinkDisplacement	; offset to previous nt
=$b7c6					XtPtr1 ::= *
=46914					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7c6	ca		dex		PushYA:		dex
.b7c7	ca		dex				dex
.b7c8	95 24		sta $24,x			sta DStack+0,x
.b7ca	94 25		sty $25,x			sty DStack+1,x
=6					CodeLen	.var *-XtPtr1
=$b7cc					Here1 = *	; remember here
>b7c4	06					.byte CodeLen	;patch wh_CodeLength
.b7cc	60		rts				rts
>b7cd	54 72 75 65			Name0:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=46929					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7d1	a4					.byte (("True"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7d2	00					.byte WordFlags	;wh_Flags
>b7d3	03					.byte 3	;wh_CodeLength
>b7d4	0f					  .byte LinkDisplacement	; offset to previous nt
=$b7d5					XtPtr1 ::= *
=46929					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7d5	a9 ff		lda #$ff	True:		lda #$FF
.b7d7	ca		dex		PushAA:		dex
.b7d8	ca		dex				dex
.b7d9	95 24		sta $24,x			sta DStack+0,x
.b7db	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7dd					Here1 = *	; remember here
>b7d3	08					.byte CodeLen	;patch wh_CodeLength
.b7dd	60		rts				rts
>b7de	46 61 6c 73 65			Name0:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=46947					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7e3	a5					.byte (("False"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7e4	10					.byte WordFlags	;wh_Flags
>b7e5	03					.byte 3	;wh_CodeLength
>b7e6	12					  .byte LinkDisplacement	; offset to previous nt
=$b7e7					XtPtr1 ::= *
=46947					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7e7	a9 00		lda #$00	False:		lda #0
.b7e9	f0 0a		beq $b7f5			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b7eb					Here1 = *	; remember here
>b7e5	04					.byte CodeLen	;patch wh_CodeLength
>b7eb	50 75 73 68 5a 41		Name0:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=46961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f1	26					.byte (("PushZA"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7f2	00					.byte WordFlags	;wh_Flags
>b7f3	03					.byte 3	;wh_CodeLength
>b7f4	0e					  .byte LinkDisplacement	; offset to previous nt
=$b7f5					XtPtr1 ::= *
=46961					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f5	ca		dex		PushZA:		dex
.b7f6	ca		dex				dex
.b7f7	95 24		sta $24,x			sta DStack+0,x
.b7f9	a9 00		lda #$00			lda #0
.b7fb	95 25		sta $25,x			sta DStack+1,x
=8					CodeLen	.var *-XtPtr1
=$b7fd					Here1 = *	; remember here
>b7f3	08					.byte CodeLen	;patch wh_CodeLength
.b7fd	60		rts				rts
>b7fe	30				Name0:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7ff	01					.byte (("0"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b800	10					.byte WordFlags	;wh_Flags
>b801	03					.byte 3	;wh_CodeLength
>b802	0e					  .byte LinkDisplacement	; offset to previous nt
=$b803					XtPtr1 ::= *
=46975					WordListLink ::= Nt0 ; remember the nt of this word for later
.b803	a9 00		lda #$00	Zero:		lda #0
.b805	f0 ee		beq $b7f5			beq PushZA
=4					CodeLen	.var *-XtPtr1
=$b807					Here1 = *	; remember here
>b801	04					.byte CodeLen	;patch wh_CodeLength
>b807	31				Name0:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46984					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b808	21					.byte (("1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b809	10					.byte WordFlags	;wh_Flags
>b80a	03					.byte 3	;wh_CodeLength
>b80b	09					  .byte LinkDisplacement	; offset to previous nt
=$b80c					XtPtr1 ::= *
=46984					WordListLink ::= Nt0 ; remember the nt of this word for later
.b80c	a9 01		lda #$01	One:		lda #1
.b80e	d0 e5		bne $b7f5			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b810					Here1 = *	; remember here
>b80a	04					.byte CodeLen	;patch wh_CodeLength
>b810	32				Name0:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=46993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b811	41					.byte (("2"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b812	10					.byte WordFlags	;wh_Flags
>b813	03					.byte 3	;wh_CodeLength
>b814	09					  .byte LinkDisplacement	; offset to previous nt
=$b815					XtPtr1 ::= *
=46993					WordListLink ::= Nt0 ; remember the nt of this word for later
.b815	a9 02		lda #$02	Two:		lda #2
.b817	d0 dc		bne $b7f5			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b819					Here1 = *	; remember here
>b813	04					.byte CodeLen	;patch wh_CodeLength
>b819	42 6c				Name0:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b81b	82					.byte (("Bl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b81c	10					.byte WordFlags	;wh_Flags
>b81d	03					.byte 3	;wh_CodeLength
>b81e	0a					  .byte LinkDisplacement	; offset to previous nt
=$b81f					XtPtr1 ::= *
=47003					WordListLink ::= Nt0 ; remember the nt of this word for later
.b81f	a9 20		lda #$20	Bl:		lda #AscSP
.b821	d0 d2		bne $b7f5			bne PushZA
=4					CodeLen	.var *-XtPtr1
=$b823					Here1 = *	; remember here
>b81d	04					.byte CodeLen	;patch wh_CodeLength
>b823	3e 49 6e			Name0:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47014					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b826	c3					.byte ((">In"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b827	10					.byte WordFlags	;wh_Flags
>b828	03					.byte 3	;wh_CodeLength
>b829	0b					  .byte LinkDisplacement	; offset to previous nt
=$b82a					XtPtr1 ::= *
=47014					WordListLink ::= Nt0 ; remember the nt of this word for later
.b82a	a9 08		lda #$08			lda #ToIn
.b82c	4c f5 b7	jmp $b7f5			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b82f					Here1 = *	; remember here
>b828	05					.byte CodeLen	;patch wh_CodeLength
>b82f	53 74 61 74 65			Name0:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b834	a5					.byte (("State"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b835	10					.byte WordFlags	;wh_Flags
>b836	03					.byte 3	;wh_CodeLength
>b837	0e					  .byte LinkDisplacement	; offset to previous nt
=$b838					XtPtr1 ::= *
=47028					WordListLink ::= Nt0 ; remember the nt of this word for later
.b838	a9 0a		lda #$0a			lda #state
.b83a	4c f5 b7	jmp $b7f5			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b83d					Here1 = *	; remember here
>b836	05					.byte CodeLen	;patch wh_CodeLength
>b83d	64 70				Name0:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47039					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b83f	02					.byte (("dp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b840	10					.byte WordFlags	;wh_Flags
>b841	03					.byte 3	;wh_CodeLength
>b842	0b					  .byte LinkDisplacement	; offset to previous nt
=$b843					XtPtr1 ::= *
=47039					WordListLink ::= Nt0 ; remember the nt of this word for later
.b843	a9 10		lda #$10			lda #dp
.b845	4c f5 b7	jmp $b7f5			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b848					Here1 = *	; remember here
>b841	05					.byte CodeLen	;patch wh_CodeLength
>b848	54 6d 70 31			Name0:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47052					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b84c	24					.byte (("Tmp1"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b84d	10					.byte WordFlags	;wh_Flags
>b84e	03					.byte 3	;wh_CodeLength
>b84f	0d					  .byte LinkDisplacement	; offset to previous nt
=$b850					XtPtr1 ::= *
=47052					WordListLink ::= Nt0 ; remember the nt of this word for later
.b850	a9 14		lda #$14			lda #tmp1
.b852	4c f5 b7	jmp $b7f5			jmp PushZA	; jmp to be a recognizable constant
=5					CodeLen	.var *-XtPtr1
=$b855					Here1 = *	; remember here
>b84e	05					.byte CodeLen	;patch wh_CodeLength
>b855	32 4c 69 74 65 72 61 6c		Name0:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b85d	88					.byte (("2Literal"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b85e	58					.byte WordFlags	;wh_Flags
>b85f	03					.byte 3	;wh_CodeLength
>b860	11					  .byte LinkDisplacement	; offset to previous nt
=$b861					XtPtr1 ::= *
=47069					WordListLink ::= Nt0 ; remember the nt of this word for later
.b861					Two_literal:
.b861	20 44 b4	jsr $b444			jsr underflow_2 ; check double number
.b864	20 90 cf	jsr $cf90			jsr Swap
.b867	20 7b b7	jsr $b77b			jsr Literal	; do lo cell
.b86a	4c 7b b7	jmp $b77b			jmp Literal	; do hi cell
=12					CodeLen	.var *-XtPtr1
=$b86d					Here1 = *	; remember here
>b85f	0c					.byte CodeLen	;patch wh_CodeLength
>b86d	53 4c 69 74 65 72 61 6c		Name0:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47093					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b875	88					.byte (("SLiteral"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b876	5c					.byte WordFlags	;wh_Flags
>b877	03					.byte 3	;wh_CodeLength
>b878	18					  .byte LinkDisplacement	; offset to previous nt
=$b879					XtPtr1 ::= *
=47093					WordListLink ::= Nt0 ; remember the nt of this word for later
.b879					SLiteral:
.b879	20 44 b4	jsr $b444			jsr underflow_2
.b87c	20 9c b8	jsr $b89c			jsr SLiteral_Start	; compile header
.b87f	4c 90 b8	jmp $b890			jmp _Move_Test
.b882	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b884	20 04 cd	jsr $cd04			jsr C_Comma_A
.b887	f6 28		inc $28,x			inc DStack+4,x
.b889	d0 02		bne $b88d			bne +
.b88b	f6 29		inc $29,x			inc DStack+5,x
.b88d					+
.b88d	20 5e ca	jsr $ca5e			jsr NOS_One_Minus
.b890	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b892	15 27		ora $27,x			ora DStack+3,x
.b894	d0 ec		bne $b882			bne _Move_Loop
.b896	20 a9 b8	jsr $b8a9			jsr SLiteral_End
.b899	4c 53 c5	jmp $c553			jmp Two_Drop		; clean up and leave
=35					CodeLen	.var *-XtPtr1
=$b89c					Here1 = *	; remember here
>b877	23					.byte CodeLen	;patch wh_CodeLength
.b89c					SLiteral_Start:
.b89c	a9 ba		lda #$ba			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b89e	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b8a0	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.b8a3	20 45 ca	jsr $ca45			jsr Here		; push addr of start of JMP
.b8a6	4c 54 cd	jmp $cd54			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b8a9					SLiteral_End:
.b8a9	20 77 ca	jsr $ca77			jsr One_Plus
.b8ac	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b8ae	81 24		sta ($24,x)			sta (DStack+0,x)
.b8b0	20 77 ca	jsr $ca77			jsr One_Plus
.b8b3	a5 01		lda $01				lda cp+1
.b8b5	81 24		sta ($24,x)			sta (DStack+0,x)
.b8b7	e8		inx				inx			; drop herej
.b8b8	e8		inx				inx
.b8b9	60		rts				rts
.b8ba					SLiteral_Runtime:
.b8ba	86 16		stx $16				stx tmp2	; save data stack index
.b8bc	ba		tsx				tsx
.b8bd	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8c0	85 14		sta $14				sta tmp1+0
.b8c2	bd 02 01	lda $0102,x			lda RStack+2,x
.b8c5	85 15		sta $15				sta tmp1+1
.b8c7	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8c9	ca		dex				dex		; push string addr
.b8ca	ca		dex				dex
.b8cb	18		clc				clc
.b8cc	a5 14		lda $14				lda tmp1+0
.b8ce	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8d0	95 24		sta $24,x			sta DStack+0,x
.b8d2	a5 15		lda $15				lda tmp1+1
.b8d4	69 00		adc #$00			adc #0
.b8d6	95 25		sta $25,x			sta DStack+1,x
.b8d8	ca		dex				dex		; push string length
.b8d9	ca		dex				dex
.b8da	38		sec				sec
.b8db	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8dd	b1 14		lda ($14),y			lda (tmp1),y
.b8df	f5 26		sbc $26,x			sbc DStack+2,x
.b8e1	95 24		sta $24,x			sta DStack+0,x
.b8e3	c8		iny				iny
.b8e4	b1 14		lda ($14),y			lda (tmp1),y
.b8e6	f5 27		sbc $27,x			sbc DStack+3,x
.b8e8	95 25		sta $25,x			sta DStack+1,x
.b8ea	60		rts				rts
>b8eb	2e 22				Name0:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8ed	42					.byte (('."'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8ee	1c					.byte WordFlags	;wh_Flags
>b8ef	03					.byte 3	;wh_CodeLength
>b8f0	78					  .byte LinkDisplacement	; offset to previous nt
=$b8f1					XtPtr1 ::= *
=47213					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8f1					Dot_quote:
.b8f1	20 01 b9	jsr $b901			jsr S_Quote		; compile the string literal
.b8f4	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8f6	a9 f5		lda #$f5			lda #<Type
.b8f8	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=10					CodeLen	.var *-XtPtr1
=$b8fb					Here1 = *	; remember here
>b8ef	0a					.byte CodeLen	;patch wh_CodeLength
>b8fb	53 22				Name0:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=47229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8fd	42					.byte (('S"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b8fe	18					.byte WordFlags	;wh_Flags
>b8ff	03					.byte 3	;wh_CodeLength
>b900	10					  .byte LinkDisplacement	; offset to previous nt
=$b901					XtPtr1 ::= *
=47229					WordListLink ::= Nt0 ; remember the nt of this word for later
.b901					S_Quote:
.b901	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b903					S_Quote_start:
.b903	48		pha				pha			; save "handle escaped chars" flag
.b904	a5 0a		lda $0a				lda state		; compiling?
.b906	f0 06		beq $b90e			beq _15
.b908	20 9c b8	jsr $b89c			jsr SLiteral_Start	; compile SLiteral header
.b90b	4c 11 b9	jmp $b911			jmp _19
.b90e	20 45 ca	jsr $ca45	_15:		jsr Here		; remember start addr
.b911					_19:
.b911	68		pla				pla			; init t2 flags
.b912	20 f5 b7	jsr $b7f5			jsr PushZA
.b915	20 03 b8	jsr $b803			jsr Zero		; init t3 flags
.b918					_savechars_loop:
.b918	a5 08		lda $08				lda toin+0		; LSB
.b91a	c5 06		cmp $06				cmp ciblen+0
.b91c	a5 09		lda $09				lda toin+1		; MSB
.b91e	e5 07		sbc $07				sbc ciblen+1
.b920	90 10		bcc $b932			bcc _input_fine		; input buffer empty?
.b922	20 83 c2	jsr $c283			jsr Refill		; Refill it  ( -- f )
.b925	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b927	d0 05		bne $b92e			bne +
.b929	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b92b	4c 8c b4	jmp $b48c			jmp ThrowA
.b92e	e8		inx		+		inx			; Drop the refill flag
.b92f	e8		inx				inx
.b930	d0 e6		bne $b918			bne _savechars_loop	; jump back up to the empty check, just in
.b932					_input_fine:
.b932	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b933	a5 04		lda $04				lda cib+0
.b935	85 14		sta $14				sta tmp1+0
.b937	a5 05		lda $05				lda cib+1
.b939	65 09		adc $09				adc toin+1
.b93b	85 15		sta $15				sta tmp1+1
.b93d	a4 08		ldy $08				ldy ToIn
.b93f	b1 14		lda ($14),y			lda (tmp1),y
.b941	85 14		sta $14				sta tmp1
.b943	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b945	d0 02		bne $b949			bne +
.b947	e6 09		inc $09				inc toin+1
.b949					+
.b949	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b94b	30 03		bmi $b950			bmi +
.b94d	4c f3 b9	jmp $b9f3			jmp _regular_char
.b950					+
.b950	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b952	30 03		bmi $b957			bmi +
.b954	4c e9 b9	jmp $b9e9			jmp _not_escaped
.b957					+
.b957	84 15		sty $15				sty tmp1+1
.b959	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b95b	70 25		bvs $b982			bvs _check_esc_chars
.b95d	a9 01		lda #$01			lda #1
.b95f	24 15		bit $15				bit tmp1+1
.b961	d0 11		bne $b974			bne _esc_x_second_digit
.b963	c8		iny				iny			; Adjust flag for second digit next time.
.b964	94 27		sty $27,x			sty DStack+3,x
.b966	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b968	20 16 ba	jsr $ba16			jsr convert_hex_value	; Convert to hex
.b96b	0a		asl a				asl			; This is the upper nybble, so move it up.
.b96c	0a		asl a				asl
.b96d	0a		asl a				asl
.b96e	0a		asl a				asl
.b96f	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b971	4c fa b9	jmp $b9fa			jmp _next_character
.b974					_esc_x_second_digit:
.b974	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b976	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b978	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b97a	20 16 ba	jsr $ba16			jsr convert_hex_value
.b97d	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b97f	4c f7 b9	jmp $b9f7			jmp _save_character
.b982					_check_esc_chars:
.b982	a0 00		ldy #$00			ldy #0
.b984	94 27		sty $27,x			sty DStack+3,x
.b986	a8		tay				tay
.b987	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b989	c0 61		cpy #$61			cpy #'a'
.b98b	f0 6a		beq $b9f7			beq _save_character
.b98d	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b98f	c0 62		cpy #$62			cpy #'b'
.b991	f0 64		beq $b9f7			beq _save_character
.b993	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b995	c0 65		cpy #$65			cpy #'e'
.b997	f0 5e		beq $b9f7			beq _save_character
.b999	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b99b	c0 66		cpy #$66			cpy #'f'
.b99d	f0 58		beq $b9f7			beq _save_character
.b99f	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b9a1	c0 6c		cpy #$6c			cpy #'l'
.b9a3	f0 52		beq $b9f7			beq _save_character
.b9a5	c0 6e		cpy #$6e			cpy #'n'
.b9a7	f0 4e		beq $b9f7			beq _save_character
.b9a9	c0 6d		cpy #$6d			cpy #'m'
.b9ab	d0 09		bne $b9b6			bne +
.b9ad	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9af	20 04 cd	jsr $cd04			jsr C_Comma_A
.b9b2	a9 0a		lda #$0a			lda #AscLF
.b9b4	d0 41		bne $b9f7			bne _save_character
.b9b6					+
.b9b6	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9b8	c0 71		cpy #$71			cpy #'q'
.b9ba	f0 3b		beq $b9f7			beq _save_character
.b9bc	c0 22		cpy #$22			cpy #AscDQuote
.b9be	f0 37		beq $b9f7			beq _save_character
.b9c0	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9c2	c0 72		cpy #$72			cpy #'r'
.b9c4	f0 31		beq $b9f7			beq _save_character
.b9c6	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9c8	c0 74		cpy #$74			cpy #'t'
.b9ca	f0 2b		beq $b9f7			beq _save_character
.b9cc	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9ce	c0 76		cpy #$76			cpy #'v'
.b9d0	f0 25		beq $b9f7			beq _save_character
.b9d2	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9d4	c0 7a		cpy #$7a			cpy #'z'
.b9d6	f0 1f		beq $b9f7			beq _save_character
.b9d8					_check_esc_x:
.b9d8	c0 78		cpy #$78			cpy #'x'
.b9da	d0 06		bne $b9e2			bne +
.b9dc	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9de	95 27		sta $27,x			sta DStack+3,x
.b9e0	d0 18		bne $b9fa			bne _next_character
.b9e2					+
.b9e2	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9e4	c0 5c		cpy #$5c			cpy #AscBackslash
.b9e6	f0 0f		beq $b9f7			beq _save_character
.b9e8	98		tya				tya
.b9e9					_not_escaped:
.b9e9	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9eb	d0 06		bne $b9f3			bne _regular_char
.b9ed	a9 ff		lda #$ff			lda #$FF
.b9ef	95 27		sta $27,x			sta DStack+3,x
.b9f1	d0 07		bne $b9fa			bne _next_character
.b9f3					_regular_char:
.b9f3	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9f5	f0 06		beq $b9fd			beq _found_string_end
.b9f7					_save_character:
.b9f7	20 04 cd	jsr $cd04			jsr C_Comma_A		; compile this character into the dictionary
.b9fa					_next_character:
.b9fa	4c 18 b9	jmp $b918			jmp _savechars_loop
.b9fd					_found_string_end:
.b9fd	e8		inx				inx			; Drop t3
.b9fe	e8		inx				inx
.b9ff	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.ba01	d0 0e		bne $ba11			bne _cmpl		; that's the way it works at the moment).
.ba03	38		sec				sec			; TOS= length of string = Here - start_addr
.ba04	a5 00		lda $00				lda cp+0
.ba06	f5 26		sbc $26,x			sbc DStack+2,x
.ba08	95 24		sta $24,x			sta DStack+0,x		;   LSB
.ba0a	a5 01		lda $01				lda cp+1
.ba0c	f5 27		sbc $27,x			sbc DStack+3,x
.ba0e	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba10	60		rts				rts			; ( startaddr u )
.ba11					_cmpl:
.ba11	e8		inx				inx			; Drop t2
.ba12	e8		inx				inx
.ba13	4c a9 b8	jmp $b8a9			jmp SLiteral_End	; ( jmpaddr )
=277					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$ba16					Here1 = *	; remember here
>b8ff	ff					.byte CodeLen	;patch wh_CodeLength
.ba16					convert_hex_value:
.ba16	c9 41		cmp #$41			cmp #'A'
.ba18	90 05		bcc $ba1f			bcc _digit
.ba1a	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba1c	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba1e	60		rts				rts
.ba1f					_digit:
.ba1f	e9 2f		sbc #$2f			sbc #'0'-1
.ba21	60		rts				rts
>ba22	53 5c 22			Name0:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=47525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba25	43					.byte (('S\"'[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=296					LinkDisplacement = Nt0-WordListLink
=25						  WordFlags ::= WordFlags | FP
>ba26	19					.byte WordFlags	;wh_Flags
>ba27	03					.byte 3	;wh_CodeLength
>ba28	7d b8					  .word WordListLink
=$ba2a					XtPtr1 ::= *
=47525					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba2a					S_Backslash_Quote:
.ba2a	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.ba2c	4c 03 b9	jmp $b903			jmp S_Quote_start
=5					CodeLen	.var *-XtPtr1
=$ba2f					Here1 = *	; remember here
>ba27	05					.byte CodeLen	;patch wh_CodeLength
>ba2f	4c 61 74 65 73 74 58 74		Name0:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47543					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba37	88					.byte (("LatestXt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba38	10					.byte WordFlags	;wh_Flags
>ba39	03					.byte 3	;wh_CodeLength
>ba3a	12					  .byte LinkDisplacement	; offset to previous nt
=$ba3b					XtPtr1 ::= *
=47543					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba3b	20 4d ba	jsr $ba4d	LatestXt:	jsr LatestNt	; ( nt )
.ba3e	4c ba bd	jmp $bdba			jmp Name_To_Int	; ( xt )
=6					CodeLen	.var *-XtPtr1
=$ba41					Here1 = *	; remember here
>ba39	06					.byte CodeLen	;patch wh_CodeLength
>ba41	4c 61 74 65 73 74 4e 74		Name0:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=47561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba49	88					.byte (("LatestNt"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba4a	10					.byte WordFlags	;wh_Flags
>ba4b	03					.byte 3	;wh_CodeLength
>ba4c	12					  .byte LinkDisplacement	; offset to previous nt
=$ba4d					XtPtr1 ::= *
=47561					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba4d	20 57 ba	jsr $ba57	LatestNt:	jsr current_to_dp
.ba50	a5 10		lda $10				lda dp+0
.ba52	a4 11		ldy $11				ldy dp+1
.ba54	4c c6 b7	jmp $b7c6			jmp PushYA
=10					CodeLen	.var *-XtPtr1
=$ba57					Here1 = *	; remember here
>ba4b	0a					.byte CodeLen	;patch wh_CodeLength
.ba57					current_to_dp:
.ba57	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba5a	0a		asl a				asl			; dp= wordlists[A]
.ba5b	a8		tay				tay
.ba5c	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba5f	85 10		sta $10				sta dp+0
.ba61	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba64	85 11		sta $11				sta dp+1
.ba66	60		rts				rts
.ba67					dp_to_current:
.ba67	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba6a	0a		asl a		                asl			; wordlists[A]=dp
.ba6b	a8		tay		                tay
.ba6c	a5 10		lda $10		                lda dp+0
.ba6e	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba71	a5 11		lda $11		                lda dp+1
.ba73	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba76	60		rts		                rts
>ba77	50 61 72 73 65 2d 4e 61		Name0:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba7f	6d 65
=10					NameLength = *-Name0
=47617					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba81	aa					.byte (("Parse-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba82	10					.byte WordFlags	;wh_Flags
>ba83	03					.byte 3	;wh_CodeLength
>ba84	38					  .byte LinkDisplacement	; offset to previous nt
=$ba85					XtPtr1 ::= *
=47617					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba85					Parse_Name:
.ba85	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba87	85 16		sta $16				sta tmp2+0
.ba89	18		clc				clc
.ba8a	a5 05		lda $05				lda cib+1
.ba8c	65 09		adc $09				adc toin+1
.ba8e	85 17		sta $17				sta tmp2+1
.ba90	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba92					_skip_loop:
.ba92	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba94	a5 09		lda $09				lda toin+1
.ba96	e5 07		sbc $07				sbc ciblen+1
.ba98	b0 11		bcs $baab			bcs _empty_line
.ba9a	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba9c	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba9e	b0 10		bcs $bab0			bcs _char_found
.baa0	c8		iny				iny			; increment toin
.baa1	84 08		sty $08				sty toin+0
.baa3	d0 ed		bne $ba92			bne _skip_loop
.baa5	e6 09		inc $09				inc toin+1
.baa7	e6 17		inc $17				inc tmp2+1
.baa9	d0 e7		bne $ba92			bne _skip_loop
.baab					_empty_line:
.baab	ca		dex				dex			; junk address
.baac	ca		dex				dex
.baad	4c 03 b8	jmp $b803			jmp Zero		; length=0
.bab0					_char_found:
.bab0	20 1f b8	jsr $b81f			jsr Bl			; push delimiter char
.bab3	4c cc ba	jmp $bacc			jmp Parse
=49					CodeLen	.var *-XtPtr1
=$bab6					Here1 = *	; remember here
>ba83	31					.byte CodeLen	;patch wh_CodeLength
.bab6					parse_name_check:
.bab6	20 85 ba	jsr $ba85			jsr parse_name		; get character from string
.bab9	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.babb	f0 01		beq $babe			beq _empty
.babd	60		rts				rts
.babe	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.bac0	4c 8c b4	jmp $b48c			jmp ThrowA
>bac3	50 61 72 73 65			Name0:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=47688					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bac8	a5					.byte (("Parse"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>bac9	10					.byte WordFlags	;wh_Flags
>baca	03					.byte 3	;wh_CodeLength
>bacb	47					  .byte LinkDisplacement	; offset to previous nt
=$bacc					XtPtr1 ::= *
=47688					WordListLink ::= Nt0 ; remember the nt of this word for later
.bacc	20 ec b3	jsr $b3ec	Parse:		jsr PopA		; pop c (check for underflow)
.bacf	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bad1	ca		dex				dex			; alloc space for addr
.bad2	ca		dex				dex
.bad3	ca		dex				dex			; alloc space for length
.bad4	ca		dex				dex
.bad5	18		clc				clc			; addr= cib+toin
.bad6	a5 08		lda $08				lda toin+0
.bad8	65 04		adc $04				adc cib+0
.bada	95 26		sta $26,x			sta DStack+2,x
.badc	a5 09		lda $09				lda toin+1
.bade	65 05		adc $05				adc cib+1
.bae0	95 27		sta $27,x			sta DStack+3,x
.bae2	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bae4	84 14		sty $14				sty tmp1+0
.bae6	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bae8	85 16		sta $16				sta tmp2+0
.baea	18		clc				clc
.baeb	a5 09		lda $09				lda toin+1		; tmp1= toin
.baed	85 15		sta $15				sta tmp1+1
.baef	65 05		adc $05				adc cib+1
.baf1	85 17		sta $17				sta tmp2+1
.baf3	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.baf5	85 1d		sta $1d				sta tmp5+1
.baf7					_loop:
.baf7	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baf9	a5 09		lda $09				lda toin+1
.bafb	e5 07		sbc $07				sbc ciblen+1
.bafd	b0 1d		bcs $bb1c			bcs _eol
.baff	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bb01	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bb03	d0 08		bne $bb0d			bne _not_whitespace
.bb05	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bb07	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bb09	90 0f		bcc $bb1a			bcc _found_delimiter
.bb0b	b0 04		bcs $bb11			bcs _not_delimiter
.bb0d	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bb0f	f0 09		beq $bb1a			beq _found_delimiter
.bb11					_not_delimiter:
.bb11	c8		iny				iny			; next character
.bb12	d0 e3		bne $baf7			bne _loop
.bb14	e6 09		inc $09				inc toin+1
.bb16	e6 17		inc $17				inc tmp2+1
.bb18	d0 dd		bne $baf7			bne _loop
.bb1a					_found_delimiter:
.bb1a	e6 1d		inc $1d				inc tmp5+1
.bb1c					_eol:
.bb1c	38		sec				sec			; length = toin - tmp1
.bb1d	98		tya				tya
.bb1e	e5 14		sbc $14				sbc tmp1+0
.bb20	95 24		sta $24,x			sta DStack+0,x
.bb22	a5 09		lda $09				lda toin+1
.bb24	e5 15		sbc $15				sbc tmp1+1
.bb26	95 25		sta $25,x			sta DStack+1,x
.bb28	18		clc				clc			; toin = toin + delimiter_offset
.bb29	98		tya				tya
.bb2a	65 1d		adc $1d				adc tmp5+1
.bb2c	85 08		sta $08				sta toin+0
.bb2e	90 02		bcc $bb32			bcc +
.bb30	e6 09		inc $09				inc toin+1
.bb32					+
=102					CodeLen	.var *-XtPtr1
=$bb32					Here1 = *	; remember here
>baca	66					.byte CodeLen	;patch wh_CodeLength
.bb32	60		rts				rts
>bb33	45 78 65 63 75 74 65 2d		Name0:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb3b	50 61 72 73 69 6e 67
=15					NameLength = *-Name0
=47810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb42	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb43	50					.byte WordFlags	;wh_Flags
>bb44	03					.byte 3	;wh_CodeLength
>bb45	7a					  .byte LinkDisplacement	; offset to previous nt
=$bb46					XtPtr1 ::= *
=47810					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb46					Execute_parsing:
.bb46	20 49 b4	jsr $b449			jsr underflow_3
.bb49	20 fe c3	jsr $c3fe			jsr Input_To_R		; save existing input for later
.bb4c	20 93 ce	jsr $ce93			jsr Not_Rot		; -ROT ( xt addr u )
.bb4f	20 07 b4	jsr $b407			jsr PopYA		; TOS is new ciblen
.bb52	85 06		sta $06				sta ciblen+0
.bb54	84 07		sty $07				sty ciblen+1
.bb56	20 07 b4	jsr $b407			jsr PopYA		; NOS is new cib
.bb59	85 04		sta $04				sta cib+0
.bb5b	84 05		sty $05				sty cib+1
.bb5d	a9 00		lda #$00			lda #0
.bb5f	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb61	85 09		sta $09				sta toin+1
.bb63	20 32 ce	jsr $ce32			jsr Execute
.bb66	20 1f c4	jsr $c41f			jsr R_To_Input		; restore
=35					CodeLen	.var *-XtPtr1
=$bb69					Here1 = *	; remember here
>bb44	23					.byte CodeLen	;patch wh_CodeLength
.bb69	60		rts				rts
>bb6a	53 6f 75 72 63 65		Name0:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=47856					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb70	a6					.byte (("Source"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb71	10					.byte WordFlags	;wh_Flags
>bb72	03					.byte 3	;wh_CodeLength
>bb73	2e					  .byte LinkDisplacement	; offset to previous nt
=$bb74					XtPtr1 ::= *
=47856					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb74					Source:
.bb74	a5 04		lda $04				lda cib+0	; push address
.bb76	a4 05		ldy $05				ldy cib+1
.bb78	20 c6 b7	jsr $b7c6			jsr PushYA
.bb7b	a5 06		lda $06				lda ciblen+0	; push size, return
.bb7d	a4 07		ldy $07				ldy ciblen+1
.bb7f	4c c6 b7	jmp $b7c6			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$bb82					Here1 = *	; remember here
>bb72	0e					.byte CodeLen	;patch wh_CodeLength
>bb82	53 6f 75 72 63 65 2d 49		Name0:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb8a	64
=9					NameLength = *-Name0
=47883					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb8b	89					.byte (("Source-Id"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb8c	10					.byte WordFlags	;wh_Flags
>bb8d	03					.byte 3	;wh_CodeLength
>bb8e	1b					  .byte LinkDisplacement	; offset to previous nt
=$bb8f					XtPtr1 ::= *
=47883					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb8f	a5 02		lda $02		Source_Id:	lda insrc+0
.bb91	a4 03		ldy $03				ldy insrc+1
.bb93	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$bb96					Here1 = *	; remember here
>bb8d	07					.byte CodeLen	;patch wh_CodeLength
>bb96	45 78 69 74			Name0:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=47898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb9a	84					.byte (("Exit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb9b	24					.byte WordFlags	;wh_Flags
>bb9c	03					.byte 3	;wh_CodeLength
>bb9d	0f					  .byte LinkDisplacement	; offset to previous nt
=$bb9e					XtPtr1 ::= *
=47898					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb9e					Exit:
.bb9e	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CodeLen	.var *-XtPtr1
=$bb9f					Here1 = *	; remember here
>bb9c	01					.byte CodeLen	;patch wh_CodeLength
>bb9f	3b				Name0:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=47904					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bba0	61					.byte ((";"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bba1	1c					.byte WordFlags	;wh_Flags
>bba2	03					.byte 3	;wh_CodeLength
>bba3	06					  .byte LinkDisplacement	; offset to previous nt
=$bba4					XtPtr1 ::= *
=47904					WordListLink ::= Nt0 ; remember the nt of this word for later
.bba4					Semicolon:
.bba4	20 4e b7	jsr $b74e			jsr Left_Bracket	; switch to interpret state
.bba7	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bba9	70 0c		bvs $bbb7			bvs _colonword
.bbab	a9 60		lda #$60			lda #$60		; compile an RTS
.bbad	20 04 cd	jsr $cd04			jsr C_Comma_A
.bbb0	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bbb2	a4 0f		ldy $0f				ldy WorkWord+1
.bbb4	4c c6 b7	jmp $b7c6			jmp PushYA
.bbb7					_colonword:
.bbb7	24 0c		bit $0c				bit status
.bbb9	10 1d		bpl $bbd8			bpl _new_word	; Bit 7 is clear = new word
.bbbb	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bbbd	a4 0f		ldy $0f				ldy WorkWord+1
.bbbf	20 c6 b7	jsr $b7c6			jsr PushYA
.bbc2	20 03 be	jsr $be03			jsr Name_To_String	; get our name string
.bbc5	a9 36		lda #$36			lda #<str_redefined	; string "redefined"
.bbc7	a0 da		ldy #$da			ldy #>str_redefined
.bbc9	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.bbcc	20 f5 cd	jsr $cdf5			jsr Type		; print the ofWordEnding word.
.bbcf	20 e9 cd	jsr $cde9			jsr Space
.bbd2	a9 7f		lda #$7f			lda #$ff-%10000000
.bbd4	25 0c		and $0c				and status
.bbd6	85 0c		sta $0c				sta status
.bbd8					_new_word:
.bbd8	20 1b c1	jsr $c11b			jsr Header_Link		; finish linking into current dictionary
.bbdb	20 e3 bb	jsr $bbe3			jsr adjust_z		; fix word length
.bbde	a9 60		lda #$60			lda #$60		; compile an RTS
.bbe0	4c 04 cd	jmp $cd04			jmp C_Comma_A
=63					CodeLen	.var *-XtPtr1
=$bbe3					Here1 = *	; remember here
>bba2	3f					.byte CodeLen	;patch wh_CodeLength
.bbe3					adjust_z:
.bbe3	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbe5	b1 10		lda ($10),y			lda (dp),y
.bbe7	29 03		and #$03			and #FP+DB
.bbe9	18		clc				clc
.bbea	69 84		adc #$84			adc #wh_LinkNt+1
.bbec	65 10		adc $10				adc dp+0
.bbee	85 14		sta $14				sta tmp1+0
.bbf0	a9 00		lda #$00			lda #0
.bbf2	65 11		adc $11				adc dp+1
.bbf4	85 15		sta $15				sta tmp1+1
.bbf6	38		sec				sec			; length= cp-xt
.bbf7	a5 00		lda $00				lda cp+0
.bbf9	e5 14		sbc $14				sbc tmp1+0
.bbfb	a8		tay				tay
.bbfc	a5 01		lda $01				lda cp+1
.bbfe	e5 15		sbc $15				sbc tmp1+1
.bc00	f0 0c		beq $bc0e			beq _short		; length > $ff ?
.bc02	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bc04	b1 10		lda ($10),y			lda (dp),y
.bc06	29 df		and #$df			and #$ff-AN
.bc08	09 10		ora #$10			ora #NN
.bc0a	91 10		sta ($10),y			sta (dp),y
.bc0c	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bc0e	98		tya		_short:		tya			; fill in length in header
.bc0f	a0 82		ldy #$82			ldy #Wh_CodeLength
.bc11	91 10		sta ($10),y			sta (dp),y
.bc13	60		rts				rts
>bc14	3a				Name0:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48021					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc15	41					.byte ((":"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bc16	10					.byte WordFlags	;wh_Flags
>bc17	03					.byte 3	;wh_CodeLength
>bc18	75					  .byte LinkDisplacement	; offset to previous nt
=$bc19					XtPtr1 ::= *
=48021					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc19					Colon:
.bc19	20 63 b7	jsr $b763			jsr Right_Bracket	; switch to compile state
.bc1c	a5 0c		lda $0c				lda status
.bc1e	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bc20	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc22	85 0c		sta $0c				sta status
.bc24	4c 26 c1	jmp $c126			jmp Header_Build	; compile word header (but don't link)
=14					CodeLen	.var *-XtPtr1
=$bc27					Here1 = *	; remember here
>bc17	0e					.byte CodeLen	;patch wh_CodeLength
>bc27	3a 4e 6f 4e 61 6d 65		Name0:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=48046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc2e	a7					.byte ((":NoName"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc2f	10					.byte WordFlags	;wh_Flags
>bc30	03					.byte 3	;wh_CodeLength
>bc31	19					  .byte LinkDisplacement	; offset to previous nt
=$bc32					XtPtr1 ::= *
=48046					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc32					Colon_NoName:
.bc32	20 63 b7	jsr $b763			jsr Right_Bracket	; switch to compile state
.bc35	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc37	25 0c		and $0c				and status		; a :NONAME word.
.bc39	85 0c		sta $0c				sta status
.bc3b	a5 00		lda $00				lda cp+0
.bc3d	85 0e		sta $0e				sta WorkWord+0
.bc3f	a5 01		lda $01				lda cp+1
.bc41	85 0f		sta $0f				sta WorkWord+1
=17					CodeLen	.var *-XtPtr1
=$bc43					Here1 = *	; remember here
>bc30	11					.byte CodeLen	;patch wh_CodeLength
.bc43	60		rts				rts
>bc44	27				Name0:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=48069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc45	e1					.byte (("'"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc46	10					.byte WordFlags	;wh_Flags
>bc47	03					.byte 3	;wh_CodeLength
>bc48	17					  .byte LinkDisplacement	; offset to previous nt
=$bc49					XtPtr1 ::= *
=48069					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc49	20 4f bc	jsr $bc4f	Tick:		jsr Tick_Nt
.bc4c	4c ba bd	jmp $bdba			jmp Name_To_Int	; ( nt -- xt )
=6					CodeLen	.var *-XtPtr1
=$bc4f					Here1 = *	; remember here
>bc47	06					.byte CodeLen	;patch wh_CodeLength
.bc4f	20 b6 ba	jsr $bab6	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc52	4c 98 bc	jmp $bc98			jmp find_name_check	; ( addr u -- nt )
>bc55	5b 27 5d			Name0:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=48088					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc58	a3					.byte (("[']"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc59	1c					.byte WordFlags	;wh_Flags
>bc5a	03					.byte 3	;wh_CodeLength
>bc5b	13					  .byte LinkDisplacement	; offset to previous nt
=$bc5c					XtPtr1 ::= *
=48088					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc5c	20 49 bc	jsr $bc49	Bracket_Tick:	jsr Tick
.bc5f	4c 7b b7	jmp $b77b			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$bc62					Here1 = *	; remember here
>bc5a	06					.byte CodeLen	;patch wh_CodeLength
>bc62	46 69 6e 64 2d 4e 61 6d		Name0:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc6a	65
=9					NameLength = *-Name0
=48107					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc6b	a9					.byte (("Find-Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc6c	10					.byte WordFlags	;wh_Flags
>bc6d	03					.byte 3	;wh_CodeLength
>bc6e	13					  .byte LinkDisplacement	; offset to previous nt
=$bc6f					XtPtr1 ::= *
=48107					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc6f					find_name:
.bc6f	20 a5 bc	jsr $bca5			jsr swl_prepare 	; setup for search
.bc72	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc74	95 25		sta $25,x			sta DStack+1,x
.bc76					_wordlist_next:
.bc76	f6 25		inc $25,x			inc DStack+1,x
.bc78	b4 25		ldy $25,x			ldy DStack+1,x
.bc7a	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc7d	90 06		bcc $bc85			bcc _nextS
.bc7f	d0 14		bne $bc95			bne _fail
.bc81	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc83	d0 03		bne $bc88			bne _nextA
.bc85	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc88	20 d2 bc	jsr $bcd2	_nextA:		jsr swl_search_wordlist
.bc8b	f0 e9		beq $bc76			beq _wordlist_next
.bc8d	a5 14		lda $14				lda tmp1+0		; NOS= nt
.bc8f	95 26		sta $26,x			sta DStack+2,x
.bc91	a5 15		lda $15				lda tmp1+1
.bc93	95 27		sta $27,x			sta DStack+3,x
.bc95					_fail:
.bc95	e8		inx				inx			; Drop work cell
.bc96	e8		inx				inx
=40					CodeLen	.var *-XtPtr1
=$bc97					Here1 = *	; remember here
>bc6d	28					.byte CodeLen	;patch wh_CodeLength
.bc97	60		rts				rts
.bc98					find_name_check:
.bc98	20 6f bc	jsr $bc6f			jsr find_name
.bc9b	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc9d	f0 01		beq $bca0			beq _NotFound
.bc9f	60		rts				rts
.bca0	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bca2	4c 8c b4	jmp $b48c			jmp ThrowA
.bca5					swl_prepare:
.bca5	20 44 b4	jsr $b444			jsr underflow_2
.bca8	38		sec				sec			; A= 0 - name start offset
.bca9	b5 24		lda $24,x			lda DStack+0,x
.bcab	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bcad	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bcaf	85 16		sta $16				sta tmp2+0
.bcb1	a9 ff		lda #$ff			lda #$ff
.bcb3	75 27		adc $27,x			adc DStack+3,x
.bcb5	85 17		sta $17				sta tmp2+1
.bcb7	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bcb9	38		sec				sec
.bcba	f5 24		sbc $24,x			sbc DStack+0,x
.bcbc	85 1a		sta $1a				sta tmp4+0
.bcbe	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcc0	b1 16		lda ($16),y			lda (tmp2),y
.bcc2	0a		asl a				asl a
.bcc3	0a		asl a				asl a
.bcc4	0a		asl a				asl a
.bcc5	0a		asl a				asl a
.bcc6	0a		asl a				asl a
.bcc7	15 24		ora $24,x			ora DStack+0,x
.bcc9	85 18		sta $18				sta tmp3+0
.bccb	a9 00		lda #$00			lda #0			; assuming failure
.bccd	95 26		sta $26,x			sta DStack+2,x
.bccf	95 27		sta $27,x			sta DStack+3,x
.bcd1	60		rts				rts
.bcd2					swl_search_wordlist:
.bcd2	86 19		stx $19				stx tmp3+1		; save data stack index
.bcd4	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcd5	a8		tay				tay
.bcd6	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcd9	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcdc	d0 15		bne $bcf3			bne _word_3		;   not end-of-list?
.bcde	08		php		_rts:		php
.bcdf	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bce1	28		plp				plp
.bce2	60		rts				rts			; Z= end_of_list
.bce3					_word_next:
.bce3	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bce5	b1 14		lda ($14),y			lda (tmp1),y
.bce7	a0 83		ldy #$83			ldy #wh_LinkNt
.bce9	29 01		and #$01			and #FP
.bceb	f0 0e		beq $bcfb			beq _LinkShort
.bced	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bcef	aa		tax				tax
.bcf0	c8		iny				iny
.bcf1	b1 14		lda ($14),y			lda (tmp1),y
.bcf3	85 15		sta $15		_word_3:	sta tmp1+1
.bcf5	86 14		stx $14				stx tmp1+0
.bcf7	d0 0d		bne $bd06			bne _Test
.bcf9	f0 e3		beq $bcde			beq _rts
.bcfb	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bcfd	38		sec				sec
.bcfe	f1 14		sbc ($14),y			sbc (tmp1),y
.bd00	85 14		sta $14				sta tmp1+0
.bd02	b0 02		bcs $bd06			bcs +
.bd04	c6 15		dec $15				dec tmp1+1
.bd06					+
.bd06	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bd08	b1 14		lda ($14),y			lda (tmp1),y
.bd0a	c5 18		cmp $18				cmp tmp3+0
.bd0c	d0 d5		bne $bce3			bne _word_next
.bd0e	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd10	c8		iny		_char_next:	iny			; to next char
.bd11	30 cb		bmi $bcde			bmi _rts		; end of string?
.bd13	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd15	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd17	f0 f7		beq $bd10			beq _char_next		;   exact match?
.bd19	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd1b	d0 c6		bne $bce3			bne _word_next
.bd1d	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd1f	29 df		and #$df			and #$df
.bd21	e9 41		sbc #$41			sbc #'A'
.bd23	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd25	90 e9		bcc $bd10			bcc _char_next
.bd27	b0 ba		bcs $bce3			bcs _word_next
>bd29	46 69 6e 64			Name0:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48301					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd2d	84					.byte (("Find"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=194					LinkDisplacement = Nt0-WordListLink
>bd2e	10					.byte WordFlags	;wh_Flags
>bd2f	03					.byte 3	;wh_CodeLength
>bd30	c2					  .byte LinkDisplacement	; offset to previous nt
=$bd31					XtPtr1 ::= *
=48301					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd31					Find:
.bd31	b5 25		lda $25,x			lda DStack+1,x		; Save caddr in case conversion fails.
.bd33	48		pha				pha
.bd34	b5 24		lda $24,x			lda DStack+0,x
.bd36	48		pha				pha
.bd37	20 ff b1	jsr $b1ff			jsr Count		; ( caddr -- addr u )
.bd3a	20 6f bc	jsr $bc6f			jsr find_name		; ( addr u -- nt | 0 )
.bd3d	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd3f	d0 09		bne $bd4a			bne _found_word
.bd41	68		pla				pla			; restore caddr
.bd42	95 24		sta $24,x			sta DStack+0,x
.bd44	68		pla				pla
.bd45	95 25		sta $25,x			sta DStack+1,x
.bd47	4c e7 b7	jmp $b7e7			jmp False		; ( addr 0 )
.bd4a					_found_word:
.bd4a	68		pla				pla			; RDrop saved caddr
.bd4b	68		pla				pla
.bd4c	20 ba bd	jsr $bdba			jsr Name_To_Int		; convert the return values to FIND's format
.bd4f	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.bd51	b1 14		lda ($14),y			lda (tmp1),y
.bd53	29 08		and #$08			and #IM
.bd55	d0 03		bne $bd5a			bne _immediate
.bd57	4c d5 b7	jmp $b7d5			jmp True		; We're not immediate, return -1
.bd5a	4c 0c b8	jmp $b80c	_immediate:	jmp One			; We're immediate, return 1
=44					CodeLen	.var *-XtPtr1
=$bd5d					Here1 = *	; remember here
>bd2f	2c					.byte CodeLen	;patch wh_CodeLength
>bd5d	49 6e 74 3e 4e 61 6d 65		Name0:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48357					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd65	a8					.byte (("Int>Name"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>bd66	50					.byte WordFlags	;wh_Flags
>bd67	03					.byte 3	;wh_CodeLength
>bd68	38					  .byte LinkDisplacement	; offset to previous nt
=$bd69					XtPtr1 ::= *
=48357					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd69					Int_To_Name:
.bd69	20 30 b4	jsr $b430			jsr underflow_1
.bd6c	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd6e	85 19		sta $19				sta tmp3+1
.bd70					_wordlist_next:
.bd70	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd72	c8		iny				iny
.bd73	c8		iny				iny
.bd74	84 19		sty $19				sty tmp3+1
.bd76	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd78	b0 2b		bcs $bda5			bcs _fail
.bd7a	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd7d	85 14		sta $14				sta tmp1+0
.bd7f	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd82	85 15		sta $15				sta tmp1+1
.bd84	d0 07		bne $bd8d			bne _calc
.bd86	f0 e8		beq $bd70			beq _wordlist_next
.bd88	20 9b 82	jsr $829b	_word_next:	jsr LinkNext		; step to next word
.bd8b	f0 e3		beq $bd70			beq _wordlist_next
.bd8d	20 c7 bd	jsr $bdc7	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd90	a5 16		lda $16				lda tmp2+0
.bd92	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd94	d0 f2		bne $bd88			bne _word_next
.bd96	a5 17		lda $17				lda tmp2+1
.bd98	d5 25		cmp $25,x			cmp DStack+1,x
.bd9a	d0 ec		bne $bd88			bne _word_next
.bd9c	a5 14		lda $14				lda tmp1+0
.bd9e	95 24		sta $24,x			sta DStack+0,x
.bda0	a5 15		lda $15				lda tmp1+1
.bda2	95 25		sta $25,x			sta DStack+1,x
.bda4	60		rts				rts			; return P.Z=0
.bda5					_fail:
.bda5	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bda7	95 24		sta $24,x			sta DStack+0,x
.bda9	95 25		sta $25,x			sta DStack+1,x
.bdab	85 15		sta $15				sta tmp1+1
.bdad	60		rts				rts			; return P.Z=1
=69					CodeLen	.var *-XtPtr1
=$bdae					Here1 = *	; remember here
>bd67	45					.byte CodeLen	;patch wh_CodeLength
>bdae	4e 61 6d 65 3e 49 6e 74		Name0:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48438					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdb6	88					.byte (("Name>Int"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bdb7	10					.byte WordFlags	;wh_Flags
>bdb8	03					.byte 3	;wh_CodeLength
>bdb9	51					  .byte LinkDisplacement	; offset to previous nt
=$bdba					XtPtr1 ::= *
=48438					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdba	20 12 b4	jsr $b412	Name_To_Int:	jsr PopTmp1
.bdbd	20 c7 bd	jsr $bdc7			jsr NameToIntTmp
.bdc0	a5 16		lda $16				lda tmp2+0
.bdc2	a4 17		ldy $17				ldy tmp2+1
.bdc4	4c c6 b7	jmp $b7c6			jmp PushYA
=13					CodeLen	.var *-XtPtr1
=$bdc7					Here1 = *	; remember here
>bdb8	0d					.byte CodeLen	;patch wh_CodeLength
.bdc7					NameToIntTmp:
.bdc7	a0 81		ldy #$81			ldy #wh_Flags
.bdc9	b1 14		lda ($14),y			lda (tmp1),y
.bdcb	29 02		and #$02			and #DB			; has XT ptr?
.bdcd	d0 12		bne $bde1			bne _HasXtPtr
.bdcf	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdd1	29 03		and #$03			and #DB+FP
.bdd3	18		clc				clc
.bdd4	69 84		adc #$84			adc #wh_LinkNt+1
.bdd6	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdd8	85 16		sta $16				sta tmp2+0
.bdda	a9 00		lda #$00			lda #0
.bddc	65 15		adc $15				adc tmp1+1
.bdde	85 17		sta $17				sta tmp2+1
.bde0	60		rts				rts
.bde1	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bde3	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bde5	29 01		and #$01			and #FP			; has long LinkNt ?
.bde7	f0 01		beq $bdea			beq _short
.bde9	c8		iny				iny			;   skip extra byte
.bdea	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bdec	85 16		sta $16				sta tmp2+0
.bdee	c8		iny				iny
.bdef	b1 14		lda ($14),y			lda (tmp1),y
.bdf1	85 17		sta $17				sta tmp2+1
.bdf3	60		rts				rts
>bdf4	4e 61 6d 65 3e 53 74 72		Name0:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdfc	69 6e 67
=11					NameLength = *-Name0
=48511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdff	eb					.byte (("Name>String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>be00	50					.byte WordFlags	;wh_Flags
>be01	03					.byte 3	;wh_CodeLength
>be02	49					  .byte LinkDisplacement	; offset to previous nt
=$be03					XtPtr1 ::= *
=48511					WordListLink ::= Nt0 ; remember the nt of this word for later
.be03					Name_To_String:
.be03	20 30 b4	jsr $b430			jsr underflow_1
.be06	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.be08	b4 25		ldy $25,x			ldy DStack+1,x
.be0a	85 14		sta $14				sta tmp1+0
.be0c	84 15		sty $15				sty tmp1+1		; ( nt )
.be0e	a0 80		ldy #$80			ldy #Wh_HashNameLen
.be10	b1 14		lda ($14),y			lda (tmp1),y
.be12	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.be14	48		pha				pha
.be15	49 ff		eor #$ff			eor #$ff
.be17	38		sec				sec
.be18	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.be1a	20 29 ca	jsr $ca29			jsr Plus_A		; calc string start addr
.be1d	68		pla				pla			; push string length
.be1e	4c f5 b7	jmp $b7f5			jmp PushZA
=30					CodeLen	.var *-XtPtr1
=$be21					Here1 = *	; remember here
>be01	1e					.byte CodeLen	;patch wh_CodeLength
>be21	3e 42 6f 64 79			Name0:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be26	25					.byte ((">Body"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be27	50					.byte WordFlags	;wh_Flags
>be28	03					.byte 3	;wh_CodeLength
>be29	27					  .byte LinkDisplacement	; offset to previous nt
=$be2a					XtPtr1 ::= *
=48550					WordListLink ::= Nt0 ; remember the nt of this word for later
.be2a					To_Body:
.be2a	20 30 b4	jsr $b430			jsr underflow_1
.be2d	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be2f	4c 29 ca	jmp $ca29			jmp Plus_A
=8					CodeLen	.var *-XtPtr1
=$be32					Here1 = *	; remember here
>be28	08					.byte CodeLen	;patch wh_CodeLength
>be32	45 72 61 73 65			Name0:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be37	a5					.byte (("Erase"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be38	10					.byte WordFlags	;wh_Flags
>be39	03					.byte 3	;wh_CodeLength
>be3a	11					  .byte LinkDisplacement	; offset to previous nt
=$be3b					XtPtr1 ::= *
=48567					WordListLink ::= Nt0 ; remember the nt of this word for later
.be3b					Erase:
.be3b	20 03 b8	jsr $b803			jsr Zero
.be3e	4c 58 be	jmp $be58			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be41					Here1 = *	; remember here
>be39	06					.byte CodeLen	;patch wh_CodeLength
>be41	42 6c 61 6e 6b			Name0:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be46	65					.byte (("Blank"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be47	10					.byte WordFlags	;wh_Flags
>be48	03					.byte 3	;wh_CodeLength
>be49	0f					  .byte LinkDisplacement	; offset to previous nt
=$be4a					XtPtr1 ::= *
=48582					WordListLink ::= Nt0 ; remember the nt of this word for later
.be4a					Blank:
.be4a	20 1f b8	jsr $b81f			jsr Bl
.be4d	4c 58 be	jmp $be58			jmp Fill
=6					CodeLen	.var *-XtPtr1
=$be50					Here1 = *	; remember here
>be48	06					.byte CodeLen	;patch wh_CodeLength
>be50	46 69 6c 6c			Name0:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48596					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be54	84					.byte (("Fill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be55	50					.byte WordFlags	;wh_Flags
>be56	03					.byte 3	;wh_CodeLength
>be57	0e					  .byte LinkDisplacement	; offset to previous nt
=$be58					XtPtr1 ::= *
=48596					WordListLink ::= Nt0 ; remember the nt of this word for later
.be58					Fill:
.be58	20 49 b4	jsr $b449			jsr underflow_3
.be5b	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be5d	85 14		sta $14				sta tmp1+0
.be5f	b5 29		lda $29,x			lda DStack+5,x
.be61	85 15		sta $15				sta tmp1+1
.be63	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be65	85 16		sta $16				sta tmp2+0
.be67	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be69	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be6b	a0 00		ldy #$00			ldy #0
.be6d	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be6f	f0 09		beq $be7a			beq _test2
.be71	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be73	c8		iny				iny			; to next byte
.be74	d0 f7		bne $be6d			bne _loop
.be76	e6 15		inc $15				inc tmp1+1		; increment addr page
.be78	d0 f3		bne $be6d			bne _loop
.be7a	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be7c	d0 f3		bne $be71			bne _3
.be7e	4c 9e ad	jmp $ad9e			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CodeLen	.var *-XtPtr1
=$be81					Here1 = *	; remember here
>be56	29					.byte CodeLen	;patch wh_CodeLength
>be81	56 61 72 69 61 62 6c 65		Name0:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be89	a8					.byte (("Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be8a	10					.byte WordFlags	;wh_Flags
>be8b	03					.byte 3	;wh_CodeLength
>be8c	35					  .byte LinkDisplacement	; offset to previous nt
=$be8d					XtPtr1 ::= *
=48649					WordListLink ::= Nt0 ; remember the nt of this word for later
.be8d	20 c6 c1	jsr $c1c6	Variable:	jsr Create		; compile word header & push PFA
.be90	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be92	a8		tay				tay
.be93	4c 1b cd	jmp $cd1b			jmp Comma_YA
=9					CodeLen	.var *-XtPtr1
=$be96					Here1 = *	; remember here
>be8b	09					.byte CodeLen	;patch wh_CodeLength
>be96	32 56 61 72 69 61 62 6c		Name0:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be9e	65
=9					NameLength = *-Name0
=48671					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be9f	a9					.byte (("2Variable"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>bea0	10					.byte WordFlags	;wh_Flags
>bea1	03					.byte 3	;wh_CodeLength
>bea2	16					  .byte LinkDisplacement	; offset to previous nt
=$bea3					XtPtr1 ::= *
=48671					WordListLink ::= Nt0 ; remember the nt of this word for later
.bea3	20 8d be	jsr $be8d	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.bea6	4c 1b cd	jmp $cd1b			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CodeLen	.var *-XtPtr1
=$bea9					Here1 = *	; remember here
>bea1	06					.byte CodeLen	;patch wh_CodeLength
>bea9	43 6f 6e 73 74 61 6e 74		Name0:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=48689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beb1	88					.byte (("Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>beb2	50					.byte WordFlags	;wh_Flags
>beb3	03					.byte 3	;wh_CodeLength
>beb4	12					  .byte LinkDisplacement	; offset to previous nt
=$beb5					XtPtr1 ::= *
=48689					WordListLink ::= Nt0 ; remember the nt of this word for later
.beb5					Constant:
.beb5	20 30 b4	jsr $b430			jsr underflow_1
.beb8	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.bebb	20 84 b7	jsr $b784			jsr LitCompile		; compile code to load registers, & pick a subroutine
.bebe	20 5b cd	jsr $cd5b			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.bec1	4c e3 bb	jmp $bbe3			jmp adjust_z		; fix word length
=15					CodeLen	.var *-XtPtr1
=$bec4					Here1 = *	; remember here
>beb3	0f					.byte CodeLen	;patch wh_CodeLength
>bec4	32 43 6f 6e 73 74 61 6e		Name0:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>becc	74
=9					NameLength = *-Name0
=48717					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>becd	89					.byte (("2Constant"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>bece	50					.byte WordFlags	;wh_Flags
>becf	03					.byte 3	;wh_CodeLength
>bed0	1c					  .byte LinkDisplacement	; offset to previous nt
=$bed1					XtPtr1 ::= *
=48717					WordListLink ::= Nt0 ; remember the nt of this word for later
.bed1					Two_constant:
.bed1	20 44 b4	jsr $b444			jsr underflow_2
.bed4	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.bed7	20 90 cf	jsr $cf90			jsr Swap
.beda	20 7b b7	jsr $b77b			jsr Literal		; compile push lo cell
.bedd	20 84 b7	jsr $b784			jsr LitCompile		; compile push hi cell, YA=exit routine
.bee0	20 5b cd	jsr $cd5b			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bee3	4c e3 bb	jmp $bbe3			jmp adjust_z		; fix word length
=21					CodeLen	.var *-XtPtr1
=$bee6					Here1 = *	; remember here
>becf	15					.byte CodeLen	;patch wh_CodeLength
>bee6	56 61 6c 75 65			Name0:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=48747					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beeb	a5					.byte (("Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>beec	50					.byte WordFlags	;wh_Flags
>beed	03					.byte 3	;wh_CodeLength
>beee	1e					  .byte LinkDisplacement	; offset to previous nt
=$beef					XtPtr1 ::= *
=48747					WordListLink ::= Nt0 ; remember the nt of this word for later
.beef					Value:
.beef	20 30 b4	jsr $b430			jsr underflow_1
.bef2	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.bef5	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile lda # & ldy #
.bef8	a9 c6		lda #$c6			lda #<PushYA		; compile jmp PushYA
.befa	a0 b7		ldy #$b7			ldy #>PushYA
.befc	20 54 cd	jsr $cd54			jsr Jmp_Comma_YA
.beff	4c e3 bb	jmp $bbe3			jmp adjust_z		; fix word length
=19					CodeLen	.var *-XtPtr1
=$bf02					Here1 = *	; remember here
>beed	13					.byte CodeLen	;patch wh_CodeLength
>bf02	32 56 61 6c 75 65		Name0:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=48776					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf08	a6					.byte (("2Value"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bf09	50					.byte WordFlags	;wh_Flags
>bf0a	03					.byte 3	;wh_CodeLength
>bf0b	1d					  .byte LinkDisplacement	; offset to previous nt
=$bf0c					XtPtr1 ::= *
=48776					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf0c					TwoValue:
.bf0c	20 44 b4	jsr $b444			jsr underflow_2
.bf0f	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.bf12	a9 1f		lda #$1f			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bf14	a0 bf		ldy #$bf			ldy #>TwoValue_Runtime
.bf16	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.bf19	20 e3 bb	jsr $bbe3			jsr adjust_z		; fix word length
.bf1c	4c 28 cd	jmp $cd28			jmp Two_Comma		; compile the value, return
=19					CodeLen	.var *-XtPtr1
=$bf1f					Here1 = *	; remember here
>bf0a	13					.byte CodeLen	;patch wh_CodeLength
.bf1f					TwoValue_Runtime:
.bf1f	68		pla				pla			; pop RTS addr
.bf20	85 14		sta $14				sta tmp1+0
.bf22	68		pla				pla
.bf23	85 15		sta $15				sta tmp1+1
.bf25	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf27	4c cd c5	jmp $c5cd			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf2a	54 6f				Name0:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=48812					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf2c	e2					.byte (("To"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf2d	18					.byte WordFlags	;wh_Flags
>bf2e	03					.byte 3	;wh_CodeLength
>bf2f	24					  .byte LinkDisplacement	; offset to previous nt
=$bf30					XtPtr1 ::= *
=48812					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf30					To:
.bf30	20 49 bc	jsr $bc49			jsr Tick		; We always need the xt of the target word
.bf33	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf35	b4 25		ldy $25,x			ldy DStack+1,x
.bf37	85 14		sta $14				sta tmp1+0
.bf39	84 15		sty $15				sty tmp1+1
.bf3b	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf3d	b1 14		lda ($14),y			lda (tmp1),y
.bf3f	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf41	d0 38		bne $bf7b			bne _Test2
.bf43	a5 0a		lda $0a				lda state		; check compile state
.bf45	f0 20		beq $bf67			beq _Value_interpret
.bf47	a9 07		lda #$07			lda #<PopYA		; compile jsr PopYA
.bf49	a0 b4		ldy #$b4			ldy #>PopYA
.bf4b	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.bf4e	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf50	20 04 cd	jsr $cd04			jsr C_Comma_A
.bf53	20 77 ca	jsr $ca77			jsr One_plus
.bf56	20 73 cf	jsr $cf73			jsr Dup
.bf59	20 18 cd	jsr $cd18			jsr Comma
.bf5c	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf5e	20 04 cd	jsr $cd04			jsr C_Comma_A
.bf61	20 24 ca	jsr $ca24			jsr Cell_Plus
.bf64	4c 18 cd	jmp $cd18			jmp Comma
.bf67					_Value_interpret:
.bf67	20 44 b4	jsr $b444			jsr underflow_2		; ( n xt )
.bf6a	e8		inx				inx			; Drop xt
.bf6b	e8		inx				inx
.bf6c	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf6e	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf70	91 14		sta ($14),y			sta (tmp1),y
.bf72	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf74	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf76	91 14		sta ($14),y			sta (tmp1),y
.bf78	e8		inx				inx			; Drop n
.bf79	e8		inx				inx
.bf7a	60		rts				rts
.bf7b	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf7d	d0 33		bne $bfb2			bne _Err
.bf7f	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf81	20 29 ca	jsr $ca29			jsr Plus_A
.bf84	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf86	b1 14		lda ($14),y			lda (tmp1),y
.bf88	c9 1f		cmp #$1f			cmp #<TwoValue_Runtime
.bf8a	d0 11		bne $bf9d			bne _Test3
.bf8c	a5 0a		lda $0a				lda state		; check compile state
.bf8e	f0 0a		beq $bf9a			beq _2Value_runtime
.bf90	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf93	a9 a0		lda #$a0			lda #<Two_Store_YA
.bf95	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf97	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf9a	4c 9a c5	jmp $c59a	_2Value_runtime: jmp Two_Store
.bf9d					_Test3:
.bf9d	c9 5e		cmp #$5e			cmp #<FValue_runtime
.bf9f	d0 11		bne $bfb2			bne _Err
.bfa1	a5 0a		lda $0a				lda state		; check compile state
.bfa3	f0 0a		beq $bfaf			beq _FValue_interpret
.bfa5	20 ad b7	jsr $b7ad			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bfa8	a9 7c		lda #$7c			lda #<FStore_YA
.bfaa	a0 86		ldy #$86			ldy #>FStore_YA
.bfac	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bfaf	4c 79 86	jmp $8679	_FValue_interpret: jmp FStore
.bfb2	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bfb4	20 8c b4	jsr $b48c			jsr ThrowA
=135					CodeLen	.var *-XtPtr1
=$bfb7					Here1 = *	; remember here
>bf2e	87					.byte CodeLen	;patch wh_CodeLength
>bfb7	44 4d 61 78			Name0:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48955					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfbb	04					.byte (("DMax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bfbc	10					.byte WordFlags	;wh_Flags
>bfbd	03					.byte 3	;wh_CodeLength
>bfbe	8f					  .byte LinkDisplacement	; offset to previous nt
=$bfbf					XtPtr1 ::= *
=48955					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfbf	a9 80		lda #$80	DMax:		lda #$80
.bfc1	d0 0a		bne $bfcd			bne DMin3
=4					CodeLen	.var *-XtPtr1
=$bfc3					Here1 = *	; remember here
>bfbd	04					.byte CodeLen	;patch wh_CodeLength
>bfc3	44 4d 69 6e			Name0:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=48967					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfc7	c4					.byte (("DMin"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfc8	10					.byte WordFlags	;wh_Flags
>bfc9	03					.byte 3	;wh_CodeLength
>bfca	0c					  .byte LinkDisplacement	; offset to previous nt
=$bfcb					XtPtr1 ::= *
=48967					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfcb	a9 00		lda #$00	DMin:		lda #0
.bfcd	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfcf	20 4e b4	jsr $b44e			jsr underflow_4
.bfd2	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfd4	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfd6	b5 27		lda $27,x			lda DStack+3,x
.bfd8	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfda	b5 24		lda $24,x			lda DStack+0,x
.bfdc	f5 28		sbc $28,x			sbc DStack+4,x
.bfde	b5 25		lda $25,x			lda DStack+1,x
.bfe0	f5 29		sbc $29,x			sbc DStack+5,x
.bfe2	50 02		bvc $bfe6			bvc +
.bfe4	49 80		eor #$80			eor #$80	; fix sign
.bfe6	45 16		eor $16		+		eor tmp2
.bfe8	30 0e		bmi $bff8			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfea	4c 53 c5	jmp $c553			jmp Two_Drop
=34					CodeLen	.var *-XtPtr1
=$bfed					Here1 = *	; remember here
>bfc9	22					.byte CodeLen	;patch wh_CodeLength
>bfed	32 4e 69 70			Name0:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bff1	04					.byte (("2Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bff2	50					.byte WordFlags	;wh_Flags
>bff3	03					.byte 3	;wh_CodeLength
>bff4	2a					  .byte LinkDisplacement	; offset to previous nt
=$bff5					XtPtr1 ::= *
=49009					WordListLink ::= Nt0 ; remember the nt of this word for later
.bff5	20 4e b4	jsr $b44e	TwoNip:		jsr underflow_4
.bff8	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bffa	95 28		sta $28,x			sta DStack+4,x
.bffc	b5 25		lda $25,x			lda DStack+1,x
.bffe	95 29		sta $29,x			sta DStack+5,x
.c000	b5 26		lda $26,x			lda DStack+2,x
.c002	95 2a		sta $2a,x			sta DStack+6,x
.c004	b5 27		lda $27,x			lda DStack+3,x
.c006	95 2b		sta $2b,x			sta DStack+7,x
.c008	4c 53 c5	jmp $c553			jmp Two_Drop
=22					CodeLen	.var *-XtPtr1
=$c00b					Here1 = *	; remember here
>bff3	16					.byte CodeLen	;patch wh_CodeLength
>c00b	53 3e 44			Name0:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c00e	83					.byte (("S>D"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c00f	40					.byte WordFlags	;wh_Flags
>c010	03					.byte 3	;wh_CodeLength
>c011	1d					  .byte LinkDisplacement	; offset to previous nt
=$c012					XtPtr1 ::= *
=49038					WordListLink ::= Nt0 ; remember the nt of this word for later
.c012					S_To_D:
.c012	20 30 b4	jsr $b430			jsr underflow_1
.c015	a0 00		ldy #$00			ldy #0			; assume positive
.c017	b5 25		lda $25,x			lda DStack+1,x		; test n
.c019	10 01		bpl $c01c			bpl +
.c01b	88		dey				dey			; make negative
.c01c					+
.c01c	ca		dex				dex			; push new hi cell
.c01d	ca		dex				dex
.c01e	94 24		sty $24,x			sty DStack+0,x
.c020	94 25		sty $25,x			sty DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c022					Here1 = *	; remember here
>c010	10					.byte CodeLen	;patch wh_CodeLength
.c022	60		rts				rts
>c023	44 3e 53			Name0:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c026	63					.byte (("D>S"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c027	40					.byte WordFlags	;wh_Flags
>c028	03					.byte 3	;wh_CodeLength
>c029	18					  .byte LinkDisplacement	; offset to previous nt
=$c02a					XtPtr1 ::= *
=49062					WordListLink ::= Nt0 ; remember the nt of this word for later
.c02a					D_To_S:
.c02a	20 44 b4	jsr $b444			jsr underflow_2
.c02d	e8		inx				inx		; Drop hi cell
.c02e	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$c02f					Here1 = *	; remember here
>c028	05					.byte CodeLen	;patch wh_CodeLength
.c02f	60		rts				rts
>c030	44 2d				Name0:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c032	a2					.byte (("D-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c033	40					.byte WordFlags	;wh_Flags
>c034	03					.byte 3	;wh_CodeLength
>c035	0c					  .byte LinkDisplacement	; offset to previous nt
=$c036					XtPtr1 ::= *
=49074					WordListLink ::= Nt0 ; remember the nt of this word for later
.c036					D_Minus:
.c036	20 4e b4	jsr $b44e			jsr underflow_4 ; two double numbers
.c039	38		sec				sec
.c03a	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c03c	f5 26		sbc $26,x			sbc DStack+2,x
.c03e	95 2a		sta $2a,x			sta DStack+6,x
.c040	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c042	f5 27		sbc $27,x			sbc DStack+3,x
.c044	95 2b		sta $2b,x			sta DStack+7,x
.c046	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c048	f5 24		sbc $24,x			sbc DStack+0,x
.c04a	95 28		sta $28,x			sta DStack+4,x
.c04c	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c04e	f5 25		sbc $25,x			sbc DStack+1,x
.c050	95 29		sta $29,x			sta DStack+5,x
.c052	e8		inx				inx
.c053	e8		inx				inx
.c054	e8		inx				inx
.c055	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c056					Here1 = *	; remember here
>c034	20					.byte CodeLen	;patch wh_CodeLength
.c056	60		rts				rts
>c057	44 2b				Name0:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=49113					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c059	62					.byte (("D+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c05a	40					.byte WordFlags	;wh_Flags
>c05b	03					.byte 3	;wh_CodeLength
>c05c	27					  .byte LinkDisplacement	; offset to previous nt
=$c05d					XtPtr1 ::= *
=49113					WordListLink ::= Nt0 ; remember the nt of this word for later
.c05d					D_Plus:
.c05d	20 4e b4	jsr $b44e			jsr underflow_4 ; two double numbers
.c060	18		clc				clc
.c061	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c063	75 2a		adc $2a,x			adc DStack+6,x
.c065	95 2a		sta $2a,x			sta DStack+6,x
.c067	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c069	75 2b		adc $2b,x			adc DStack+7,x
.c06b	95 2b		sta $2b,x			sta DStack+7,x
.c06d	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c06f	75 28		adc $28,x			adc DStack+4,x
.c071	95 28		sta $28,x			sta DStack+4,x
.c073	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c075	75 29		adc $29,x			adc DStack+5,x
.c077	95 29		sta $29,x			sta DStack+5,x
.c079	e8		inx				inx
.c07a	e8		inx				inx
.c07b	e8		inx				inx
.c07c	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c07d					Here1 = *	; remember here
>c05b	20					.byte CodeLen	;patch wh_CodeLength
.c07d	60		rts				rts
>c07e	44 31 2b			Name0:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49153					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c081	63					.byte (("D1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c082	40					.byte WordFlags	;wh_Flags
>c083	03					.byte 3	;wh_CodeLength
>c084	28					  .byte LinkDisplacement	; offset to previous nt
=$c085					XtPtr1 ::= *
=49153					WordListLink ::= Nt0 ; remember the nt of this word for later
.c085	20 44 b4	jsr $b444	D1Plus:		jsr underflow_2
.c088	f6 26		inc $26,x			inc DStack+2,x
.c08a	d0 0a		bne $c096			bne +
.c08c	f6 27		inc $27,x			inc DStack+3,x
.c08e	d0 06		bne $c096			bne +
.c090	f6 24		inc $24,x			inc DStack+0,x
.c092	d0 02		bne $c096			bne +
.c094	f6 25		inc $25,x			inc DStack+1,x
.c096					+
=17					CodeLen	.var *-XtPtr1
=$c096					Here1 = *	; remember here
>c083	11					.byte CodeLen	;patch wh_CodeLength
.c096	60		rts				rts
>c097	44 31 2d			Name0:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c09a	a3					.byte (("D1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c09b	40					.byte WordFlags	;wh_Flags
>c09c	03					.byte 3	;wh_CodeLength
>c09d	19					  .byte LinkDisplacement	; offset to previous nt
=$c09e					XtPtr1 ::= *
=49178					WordListLink ::= Nt0 ; remember the nt of this word for later
.c09e	20 44 b4	jsr $b444	D1Minus:	jsr underflow_2
.c0a1	b5 26		lda $26,x			lda DStack+2,x
.c0a3	d0 0e		bne $c0b3			bne _1
.c0a5	b5 27		lda $27,x			lda DStack+3,x
.c0a7	d0 08		bne $c0b1			bne _2
.c0a9	b5 24		lda $24,x			lda DStack+0,x
.c0ab	d0 02		bne $c0af			bne _3
.c0ad	d6 25		dec $25,x			dec DStack+1,x
.c0af	d6 24		dec $24,x	_3:		dec DStack+0,x
.c0b1	d6 27		dec $27,x	_2:		dec DStack+3,x
.c0b3	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CodeLen	.var *-XtPtr1
=$c0b5					Here1 = *	; remember here
>c09c	17					.byte CodeLen	;patch wh_CodeLength
.c0b5	60		rts				rts
>c0b6	41 6c 6c 6f 74			Name0:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0bb	85					.byte (("Allot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c0bc	50					.byte WordFlags	;wh_Flags
>c0bd	03					.byte 3	;wh_CodeLength
>c0be	21					  .byte LinkDisplacement	; offset to previous nt
=$c0bf					XtPtr1 ::= *
=49211					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0bf					Allot:
.c0bf	20 30 b4	jsr $b430			jsr underflow_1
.c0c2	18		clc				clc			; adjust cp
.c0c3	b5 24		lda $24,x			lda DStack+0,x
.c0c5	65 00		adc $00				adc cp+0
.c0c7	85 00		sta $00				sta cp+0
.c0c9	a8		tay				tay			;   save lo byte
.c0ca	b5 25		lda $25,x			lda DStack+1,x
.c0cc	85 14		sta $14				sta tmp1
.c0ce	65 01		adc $01				adc cp+1
.c0d0	85 01		sta $01				sta cp+1
.c0d2	24 14		bit $14				bit tmp1
.c0d4	30 15		bmi $c0eb			bmi _release
.c0d6	b0 06		bcs $c0de			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0d8	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0da	e9 7f		sbc #$7f			sbc #>_last
.c0dc	90 2c		bcc $c10a			bcc _done		; we're fine.
.c0de					_pos_err:
.c0de	a9 58		lda #$58			lda #<_last
.c0e0	85 00		sta $00				sta cp+0
.c0e2	a9 7f		lda #$7f			lda #>_last
.c0e4	85 01		sta $01				sta cp+1
.c0e6	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0e8	4c 8c b4	jmp $b48c			jmp ThrowA
.c0eb					_release:
.c0eb	90 06		bcc $c0f3			bcc _neg_err		; borrow indicates we've gone below 0
.c0ed	c0 66		cpy #$66			cpy #<cp0
.c0ef	e9 0b		sbc #$0b			sbc #>cp0
.c0f1	b0 17		bcs $c10a			bcs _done
.c0f3					_neg_err:
.c0f3	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0f5	85 00		sta $00				sta cp+0
.c0f7	a9 0b		lda #$0b			lda #>cp0
.c0f9	85 01		sta $01				sta cp+1
.c0fb	a9 28		lda #$28			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0fd	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c100	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c102	8d 13 03	sta $0313			sta WordlistsV+1
.c105	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c107	4c 8c b4	jmp $b48c			jmp ThrowA
.c10a					_done:
.c10a	e8		inx				inx			; Drop n
.c10b	e8		inx				inx
=77					CodeLen	.var *-XtPtr1
=$c10c					Here1 = *	; remember here
>c0bd	4d					.byte CodeLen	;patch wh_CodeLength
.c10c	60		rts				rts
>c10d	48 65 61 64 65 72 2c		Name0:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=49300					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c114	87					.byte (("Header,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c115	10					.byte WordFlags	;wh_Flags
>c116	03					.byte 3	;wh_CodeLength
>c117	59					  .byte LinkDisplacement	; offset to previous nt
=$c118					XtPtr1 ::= *
=49300					WordListLink ::= Nt0 ; remember the nt of this word for later
.c118					Header_Comma:
.c118	20 26 c1	jsr $c126			jsr Header_Build
.c11b					Header_Link:
.c11b	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c11d	85 10		sta $10				sta dp+0
.c11f	a5 0f		lda $0f				lda WorkWord+1
.c121	85 11		sta $11				sta dp+1
.c123	4c 67 ba	jmp $ba67			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c126					Header_Build:
.c126	20 b6 ba	jsr $bab6			jsr parse_name_check	; get name string, throw error if empty string
.c129	20 c1 cc	jsr $ccc1			jsr Two_dup		; ( addr u addr u )
.c12c	20 63 a1	jsr $a163			jsr Get_Current
.c12f	20 cd a1	jsr $a1cd			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c132	e8		inx				inx			; pop flag.
.c133	e8		inx				inx
.c134	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c136	f0 21		beq $c159			beq _new_name		; We haven't seen this one before.
.c138	e8		inx				inx			; Drop xt
.c139	e8		inx				inx
.c13a	24 0c		bit $0c				bit status		; Check bit 7
.c13c	10 08		bpl $c146			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c13e	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c140	05 0c		ora $0c				ora status
.c142	85 0c		sta $0c				sta status
.c144	d0 19		bne $c15f			bne _process_name
.c146					_redefined_name:
.c146	a9 36		lda #$36			lda #<str_redefined
.c148	a0 da		ldy #$da			ldy #>str_redefined
.c14a	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.c14d	20 c1 cc	jsr $ccc1			jsr Two_dup		 ; ( addr u addr u )
.c150	20 f5 cd	jsr $cdf5			jsr Type
.c153	20 e9 cd	jsr $cde9			jsr Space
.c156	4c 5f c1	jmp $c15f			jmp _process_name
.c159					_new_name:
.c159	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c15b	25 0c		and $0c				and status
.c15d	85 0c		sta $0c				sta status
.c15f					_process_name:
.c15f	20 c1 cc	jsr $ccc1			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c162	20 45 ca	jsr $ca45			jsr Here
.c165	20 90 cf	jsr $cf90			jsr Swap
.c168	20 f4 ad	jsr $adf4			jsr CMove
.c16b	20 73 cf	jsr $cf73			jsr Dup			;   save length
.c16e	20 bf c0	jsr $c0bf			jsr Allot
.c171	38		sec				sec
.c172	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c174	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c176	85 0e		sta $0e				sta WorkWord+0
.c178	a5 01		lda $01				lda cp+1
.c17a	e9 00		sbc #$00			sbc #0
.c17c	85 0f		sta $0f				sta WorkWord+1
.c17e	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c180	b1 0e		lda ($0e),y			lda (WorkWord),y
.c182	0a		asl a				asl a
.c183	0a		asl a				asl a
.c184	0a		asl a				asl a
.c185	0a		asl a				asl a
.c186	0a		asl a				asl a
.c187	15 24		ora $24,x			ora DStack+0,x
.c189	95 24		sta $24,x			sta DStack+0,x
.c18b	20 01 cd	jsr $cd01			jsr C_Comma		; compile wh_HashNameLen
.c18e	e8		inx				inx			; drop name string addr
.c18f	e8		inx				inx
.c190	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c192	20 04 cd	jsr $cd04			jsr C_Comma_A
.c195	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c197	20 04 cd	jsr $cd04			jsr C_Comma_A
.c19a	20 57 ba	jsr $ba57			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c19d	38		sec				sec
.c19e	a5 0e		lda $0e				lda WorkWord+0
.c1a0	e5 10		sbc $10				sbc dp+0
.c1a2	a8		tay				tay
.c1a3	a5 0f		lda $0f				lda WorkWord+1
.c1a5	e5 11		sbc $11				sbc dp+1
.c1a7	f0 0f		beq $c1b8			beq _LinkShort
.c1a9	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c1ab	b1 0e		lda ($0e),y			lda (WorkWord),y
.c1ad	09 01		ora #$01			ora #FP
.c1af	91 0e		sta ($0e),y			sta (WorkWord),y
.c1b1	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c1b3	a4 11		ldy $11				ldy dp+1
.c1b5	4c 1b cd	jmp $cd1b			jmp Comma_YA
.c1b8	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c1b9	4c 04 cd	jmp $cd04			jmp C_Comma_A
=164					CodeLen	.var *-XtPtr1
=$c1bc					Here1 = *	; remember here
>c116	a4					.byte CodeLen	;patch wh_CodeLength
>c1bc	43 72 65 61 74 65		Name0:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49474					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1c2	a6					.byte (("Create"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1c3	10					.byte WordFlags	;wh_Flags
>c1c4	03					.byte 3	;wh_CodeLength
>c1c5	ae					  .byte LinkDisplacement	; offset to previous nt
=$c1c6					XtPtr1 ::= *
=49474					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1c6					Create:
.c1c6	20 18 c1	jsr $c118			jsr Header_Comma	; compile word header
.c1c9	a9 d3		lda #$d3			lda #<DoVar		; compile JSR DoVar
.c1cb	a0 c1		ldy #$c1			ldy #>DoVar
.c1cd	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.c1d0	4c e3 bb	jmp $bbe3			jmp adjust_z
=13					CodeLen	.var *-XtPtr1
=$c1d3					Here1 = *	; remember here
>c1c4	0d					.byte CodeLen	;patch wh_CodeLength
.c1d3					DoVar:
.c1d3	68		pla				pla		; Pull the return address off the machine's stack
.c1d4	18		clc				clc		;   +1 because of the way the JSR works
.c1d5	69 01		adc #$01			adc #1
.c1d7	ca		dex				dex		; push on data stack
.c1d8	ca		dex				dex
.c1d9	95 24		sta $24,x			sta DStack+0,x
.c1db	68		pla				pla
.c1dc	69 00		adc #$00			adc #0
.c1de	95 25		sta $25,x			sta DStack+1,x
.c1e0	60		rts				rts		; takes us to the original caller of the
>c1e1	44 6f 65 73 3e			Name0:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1e6	c5					.byte (("Does>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1e7	1c					.byte WordFlags	;wh_Flags
>c1e8	03					.byte 3	;wh_CodeLength
>c1e9	24					  .byte LinkDisplacement	; offset to previous nt
=$c1ea					XtPtr1 ::= *
=49510					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1ea					Does:
.c1ea	a0 c2		ldy #$c2			ldy #>_runtime		; compile JSR _runtime
.c1ec	a9 04		lda #$04			lda #<_runtime
.c1ee	20 3e cd	jsr $cd3e			jsr Jsr_Comma_YA
.c1f1	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1f3	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1f5	20 1b cd	jsr $cd1b			jsr Comma_YA
.c1f8	a9 68		lda #$68			lda #$68		; compile PLA
.c1fa	20 04 cd	jsr $cd04			jsr C_Comma_A
.c1fd	a0 c2		ldy #$c2			ldy #>_DoDoes		; compile JSR _DoDoes
.c1ff	a9 21		lda #$21			lda #<_DoDoes
.c201	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=26					CodeLen	.var *-XtPtr1
=$c204					Here1 = *	; remember here
>c1e8	1a					.byte CodeLen	;patch wh_CodeLength
.c204					_runtime:
.c204	20 57 ba	jsr $ba57			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c207	a5 10		lda $10				lda dp+0		; tmp1= dp
.c209	a4 11		ldy $11				ldy dp+1
.c20b	85 14		sta $14				sta tmp1+0
.c20d	84 15		sty $15				sty tmp1+1
.c20f	20 c7 bd	jsr $bdc7			jsr NameToIntTmp	; tmp2= xt
.c212	18		clc				clc
.c213	68		pla				pla		; RTS addr LSB
.c214	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c216	a0 01		ldy #$01			ldy #1
.c218	91 16		sta ($16),y			sta (tmp2),y
.c21a	68		pla				pla		; RTS addr MSB
.c21b	69 00		adc #$00			adc #0
.c21d	c8		iny				iny
.c21e	91 16		sta ($16),y			sta (tmp2),y
.c220	60		rts				rts
.c221					_DoDoes:
.c221	c8		iny				iny		; +1 for JSR behavior
.c222	d0 03		bne $c227			bne +
.c224	18		clc				clc
.c225	69 01		adc #$01			adc #1
.c227					+
.c227	4c 81 cf	jmp $cf81			jmp PushAY
>c22a	55 6e 75 73 65 64		Name0:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49584					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c230	86					.byte (("Unused"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c231	00					.byte WordFlags	;wh_Flags
>c232	03					.byte 3	;wh_CodeLength
>c233	4a					  .byte LinkDisplacement	; offset to previous nt
=$c234					XtPtr1 ::= *
=49584					WordListLink ::= Nt0 ; remember the nt of this word for later
.c234					Unused:
=32600					_last = cp_end-2*padoffset
.c234	ca		dex				dex
.c235	ca		dex				dex
.c236	38		sec				sec
.c237	a9 58		lda #$58			lda #<_last
.c239	e5 00		sbc $00				sbc cp+0
.c23b	95 24		sta $24,x			sta DStack+0,x
.c23d	a9 7f		lda #$7f			lda #>_last
.c23f	e5 01		sbc $01				sbc cp+1
.c241	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c243					Here1 = *	; remember here
>c232	0f					.byte CodeLen	;patch wh_CodeLength
.c243	60		rts				rts
>c244	44 65 70 74 68			Name0:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=49609					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c249	05					.byte (("Depth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c24a	10					.byte WordFlags	;wh_Flags
>c24b	03					.byte 3	;wh_CodeLength
>c24c	19					  .byte LinkDisplacement	; offset to previous nt
=$c24d					XtPtr1 ::= *
=49609					WordListLink ::= Nt0 ; remember the nt of this word for later
.c24d					Depth:
.c24d	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c24f	86 1a		stx $1a				stx tmp4
.c251	38		sec				sec
.c252	e5 1a		sbc $1a				sbc tmp4
.c254	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c255	4c f5 b7	jmp $b7f5			jmp PushZA
=11					CodeLen	.var *-XtPtr1
=$c258					Here1 = *	; remember here
>c24b	0b					.byte CodeLen	;patch wh_CodeLength
>c258	4b 65 79			Name0:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=49627					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c25b	23					.byte (("Key"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c25c	10					.byte WordFlags	;wh_Flags
>c25d	03					.byte 3	;wh_CodeLength
>c25e	12					  .byte LinkDisplacement	; offset to previous nt
=$c25f					XtPtr1 ::= *
=49627					WordListLink ::= Nt0 ; remember the nt of this word for later
.c25f	20 65 c2	jsr $c265	Key:		jsr key_a		; returns char in A
.c262	4c f5 b7	jmp $b7f5			jmp PushZA
=6					CodeLen	.var *-XtPtr1
=$c265					Here1 = *	; remember here
>c25d	06					.byte CodeLen	;patch wh_CodeLength
.c265					Key_A:
.c265	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c268	4b 65 79 3f			Name0:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=49644					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c26c	e4					.byte (("Key?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c26d	10					.byte WordFlags	;wh_Flags
>c26e	03					.byte 3	;wh_CodeLength
>c26f	11					  .byte LinkDisplacement	; offset to previous nt
=$c270					XtPtr1 ::= *
=49644					WordListLink ::= Nt0 ; remember the nt of this word for later
.c270	20 76 c2	jsr $c276	KeyQ:		jsr KeyQ_A
.c273	4c f5 b7	jmp $b7f5			jmp PushZA
.c276	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c279	52 65 66 69 6c 6c		Name0:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49663					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c27f	86					.byte (("Refill"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c280	10					.byte WordFlags	;wh_Flags
>c281	03					.byte 3	;wh_CodeLength
>c282	13					  .byte LinkDisplacement	; offset to previous nt
=$c283					XtPtr1 ::= *
=49663					WordListLink ::= Nt0 ; remember the nt of this word for later
.c283					Refill:
.c283	a9 00		lda #$00			lda #0			; show empty in case of error
.c285	85 06		sta $06				sta ciblen+0
.c287	85 07		sta $07				sta ciblen+1
.c289	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c28b	d0 24		bne $c2b1			bne _src_not_kbd
.c28d	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c28f	a4 05		ldy $05				ldy cib+1
.c291	20 c6 b7	jsr $b7c6			jsr PushYA
.c294	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c296	20 f5 b7	jsr $b7f5			jsr PushZA		;  cheat: We only accept max 255
.c299	20 c7 c2	jsr $c2c7			jsr Accept		; ( addr n1 -- n2)
.c29c	b5 24		lda $24,x			lda DStack+0,x
.c29e	85 06		sta $06				sta ciblen+0
.c2a0	b5 25		lda $25,x			lda DStack+1,x
.c2a2	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c2a4	a9 00		lda #$00			lda #0
.c2a6	85 08		sta $08				sta toin+0
.c2a8	85 09		sta $09				sta toin+1
.c2aa	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c2ac	95 24		sta $24,x			sta DStack+0,x
.c2ae	95 25		sta $25,x			sta DStack+1,x
.c2b0	60		rts				rts
.c2b1					_src_not_kbd:
.c2b1	c9 ff		cmp #$ff			cmp #$ff
.c2b3	d0 03		bne $c2b8			bne _src_not_string
.c2b5	4c e7 b7	jmp $b7e7			jmp False
.c2b8					_src_not_string:
.c2b8	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c2ba	20 8c b4	jsr $b48c			jsr ThrowA
=58					CodeLen	.var *-XtPtr1
=$c2bd					Here1 = *	; remember here
>c281	3a					.byte CodeLen	;patch wh_CodeLength
>c2bd	41 63 63 65 70 74		Name0:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=49731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2c3	86					.byte (("Accept"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2c4	50					.byte WordFlags	;wh_Flags
>c2c5	03					.byte 3	;wh_CodeLength
>c2c6	44					  .byte LinkDisplacement	; offset to previous nt
=$c2c7					XtPtr1 ::= *
=49731					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2c7					Accept:
.c2c7	20 44 b4	jsr $b444			jsr underflow_2
.c2ca	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2cc	15 25		ora $25,x			ora DStack+1,x
.c2ce	d0 09		bne $c2d9			bne _not_zero
.c2d0	e8		inx				inx			; drop n
.c2d1	e8		inx				inx
.c2d2	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2d4	95 25		sta $25,x			sta DStack+1,x
.c2d6	4c ae c3	jmp $c3ae			jmp accept_done
.c2d9					_not_zero:
.c2d9	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2db	85 16		sta $16				sta tmp2
.c2dd	a9 00		lda #$00			lda #0
.c2df	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2e1	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2e3	85 14		sta $14				sta tmp1
.c2e5	b5 27		lda $27,x			lda DStack+3,x
.c2e7	85 15		sta $15				sta tmp1+1
.c2e9	e8		inx				inx
.c2ea	e8		inx				inx
.c2eb	a0 00		ldy #$00			ldy #0
.c2ed	a5 0c		lda $0c				lda status
.c2ef	29 f7		and #$f7			and #$f7
.c2f1	18		clc				clc
.c2f2	69 01		adc #$01			adc #1
.c2f4	09 08		ora #$08			ora #$08
.c2f6	85 0c		sta $0c				sta status
.c2f8					accept_loop:
.c2f8	20 65 c2	jsr $c265			jsr key_a
.c2fb	c9 0a		cmp #$0a			cmp #AscLF
.c2fd	f0 20		beq $c31f			beq _eol
.c2ff	c9 0d		cmp #$0d			cmp #AscCR
.c301	f0 1c		beq $c31f			beq _eol
.c303	c9 08		cmp #$08			cmp #AscBS
.c305	f0 24		beq $c32b			beq _backspace
.c307	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c309	f0 20		beq $c32b			beq _backspace
.c30b	c9 10		cmp #$10			cmp #AscCP
.c30d	f0 37		beq $c346			beq _ctrl_p
.c30f	c9 0e		cmp #$0e			cmp #AscCN
.c311	f0 46		beq $c359			beq _ctrl_n
.c313	91 14		sta ($14),y			sta (tmp1),y
.c315	c8		iny				iny
.c316	20 dd cd	jsr $cddd			jsr Emit_A
.c319	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c31b	d0 db		bne $c2f8			bne accept_loop	      ; fall through if buffer limit reached
.c31d	f0 03		beq $c322			beq _buffer_full
.c31f					_eol:
.c31f	20 e9 cd	jsr $cde9			jsr Space	; print final space
.c322					_buffer_full:
.c322	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c324	a9 00		lda #$00			lda #0
.c326	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c328	4c ae c3	jmp $c3ae			jmp accept_done
.c32b					_backspace:
.c32b	c0 00		cpy #$00			cpy #0		; buffer empty?
.c32d	d0 06		bne $c335			bne +
.c32f	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c331	20 dd cd	jsr $cddd			jsr Emit_A
.c334	c8		iny				iny
.c335					+
.c335	88		dey				dey
.c336	a9 08		lda #$08			lda #AscBS	; move back one
.c338	20 dd cd	jsr $cddd			jsr Emit_A
.c33b	20 e9 cd	jsr $cde9			jsr Space	; print a space (rubout)
.c33e	a9 08		lda #$08			lda #AscBS	; move back over space
.c340	20 dd cd	jsr $cddd			jsr Emit_A
.c343	4c f8 c2	jmp $c2f8			jmp accept_loop
.c346					_ctrl_p:
.c346	a5 0c		lda $0c				lda status
.c348	29 07		and #$07			and #7
.c34a	d0 08		bne $c354			bne _ctrl_p_dec
.c34c	a5 0c		lda $0c				lda status
.c34e	09 07		ora #$07			ora #7
.c350	85 0c		sta $0c				sta status
.c352	d0 14		bne $c368			bne _recall_history
.c354					_ctrl_p_dec:
.c354	c6 0c		dec $0c				dec status
.c356	4c 68 c3	jmp $c368			jmp _recall_history
.c359					_ctrl_n:
.c359	a9 08		lda #$08			lda #$8
.c35b	24 0c		bit $0c				bit status
.c35d	d0 09		bne $c368			bne _recall_history
.c35f	a5 0c		lda $0c				lda status
.c361	29 f7		and #$f7			and #$f7
.c363	18		clc				clc
.c364	69 01		adc #$01			adc #1
.c366	85 0c		sta $0c				sta status
.c368					_recall_history:
.c368	a9 f7		lda #$f7			lda #$ff-%00001000
.c36a	25 0c		and $0c				and status
.c36c	85 0c		sta $0c				sta status
.c36e	20 c9 c3	jsr $c3c9			jsr accept_total_recall
.c371	a9 0d		lda #$0d			lda #AscCR
.c373	20 dd cd	jsr $cddd			jsr Emit_A
.c376					input_clear:
.c376	c0 00		cpy #$00			cpy #0
.c378	f0 07		beq $c381			beq input_cleared
.c37a	20 e9 cd	jsr $cde9			jsr Space
.c37d	88		dey				dey
.c37e	4c 76 c3	jmp $c376			jmp input_clear
.c381					input_cleared:
.c381	a9 0d		lda #$0d			lda #AscCR
.c383	20 dd cd	jsr $cddd			jsr Emit_A
.c386	b1 18		lda ($18),y			lda (tmp3),y
.c388	85 0d		sta $0d				sta status+1
.c38a	e6 18		inc $18				inc tmp3
.c38c	d0 02		bne $c390			bne +		; Increment the upper byte on carry.
.c38e	e6 19		inc $19				inc tmp3+1
.c390					+
.c390	a9 0d		lda #$0d			lda #AscCR
.c392	20 dd cd	jsr $cddd			jsr Emit_A
.c395					_history_loop:
.c395	c4 0d		cpy $0d				cpy status+1
.c397	d0 03		bne $c39c			bne +
.c399	4c f8 c2	jmp $c2f8			jmp accept_loop	      ; Needs a long jump
.c39c					+
.c39c	c4 16		cpy $16				cpy tmp2
.c39e	f0 0a		beq $c3aa			beq _hist_filled_buffer
.c3a0	b1 18		lda ($18),y			lda (tmp3),y
.c3a2	91 14		sta ($14),y			sta (tmp1),y
.c3a4	20 dd cd	jsr $cddd			jsr Emit_A
.c3a7	c8		iny				iny
.c3a8	d0 eb		bne $c395			bne _history_loop
.c3aa					_hist_filled_buffer:
.c3aa	88		dey				dey
.c3ab	4c f8 c2	jmp $c2f8			jmp accept_loop
.c3ae					accept_done:
.c3ae	20 c9 c3	jsr $c3c9			jsr accept_total_recall
.c3b1	85 0d		sta $0d				sta status+1
.c3b3	a0 00		ldy #$00			ldy #0
.c3b5	91 18		sta ($18),y			sta (tmp3),y
.c3b7	e6 18		inc $18				inc tmp3
.c3b9	d0 02		bne $c3bd			bne +		; Increment the upper byte on carry.
.c3bb	e6 19		inc $19				inc tmp3+1
.c3bd					+
.c3bd					_save_history_loop:
.c3bd	c4 0d		cpy $0d				cpy status+1
.c3bf	f0 07		beq $c3c8			beq _save_history_done
.c3c1	b1 14		lda ($14),y			lda (tmp1),y
.c3c3	91 18		sta ($18),y			sta (tmp3),y
.c3c5	c8		iny				iny
.c3c6	d0 f5		bne $c3bd			bne _save_history_loop
.c3c8					_save_history_done:
=257					CodeLen	.var *-XtPtr1
=$ff					CodeLen	 .var $ff
=$c3c8					Here1 = *	; remember here
>c2c5	ff					.byte CodeLen	;patch wh_CodeLength
.c3c8	60		rts				rts
.c3c9					accept_total_recall:
.c3c9	a9 66		lda #$66			lda #<hist_buff
.c3cb	85 18		sta $18				sta tmp3
.c3cd	a9 07		lda #$07			lda #>hist_buff
.c3cf	85 19		sta $19				sta tmp3+1
.c3d1	a5 0c		lda $0c				lda status
.c3d3	6a		ror a				ror
.c3d4	29 03		and #$03			and #3
.c3d6	18		clc				clc
.c3d7	65 19		adc $19				adc tmp3+1
.c3d9	85 19		sta $19				sta tmp3+1
.c3db	a5 0c		lda $0c				lda status
.c3dd	6a		ror a				ror		; Rotate through carry into msb.
.c3de	6a		ror a				ror
.c3df	29 80		and #$80			and #$80
.c3e1	18		clc				clc
.c3e2	65 18		adc $18				adc tmp3
.c3e4	85 18		sta $18				sta tmp3
.c3e6	90 02		bcc $c3ea			bcc +		; Increment the upper byte on carry.
.c3e8	e6 19		inc $19				inc tmp3+1
.c3ea					+
.c3ea	98		tya				tya
.c3eb	c9 80		cmp #$80			cmp #$80
.c3ed	90 02		bcc $c3f1			bcc +
.c3ef	a9 7f		lda #$7f			lda #$7F
.c3f1					+
.c3f1	60		rts				rts
>c3f2	49 6e 70 75 74 3e 52		Name0:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50041					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3f9	47					.byte (("Input>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifiable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3fa	31					.byte WordFlags	;wh_Flags
>c3fb	03					.byte 3	;wh_CodeLength
>c3fc	43 c2					  .word WordListLink
=$c3fe					XtPtr1 ::= *
=50041					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3fe					Input_To_R:
.c3fe	68		pla				pla			; move it out of the way
.c3ff	85 14		sta $14				sta tmp1+0
.c401	68		pla				pla
.c402	85 15		sta $15				sta tmp1+1
.c404	a0 07		ldy #$07			ldy #7
.c406	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c409	48		pha				pha
.c40a	88		dey				dey
.c40b	10 f9		bpl $c406			bpl _loop
.c40d	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c40f	48		pha				pha
.c410	a5 14		lda $14				lda tmp1+0
.c412	48		pha				pha
=21					CodeLen	.var *-XtPtr1
=$c413					Here1 = *	; remember here
>c3fb	15					.byte CodeLen	;patch wh_CodeLength
.c413	60		rts				rts
>c414	52 3e 49 6e 70 75 74		Name0:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50075					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c41b	87					.byte (("R>Input"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c41c	30					.byte WordFlags	;wh_Flags
>c41d	03					.byte 3	;wh_CodeLength
>c41e	22					  .byte LinkDisplacement	; offset to previous nt
=$c41f					XtPtr1 ::= *
=50075					WordListLink ::= Nt0 ; remember the nt of this word for later
.c41f					R_To_Input:
.c41f	68		pla				pla		 ; move RTS addr out of the way
.c420	85 14		sta $14				sta tmp1+0
.c422	68		pla				pla
.c423	85 15		sta $15				sta tmp1+1
.c425	a0 00		ldy #$00			ldy #0
.c427	68		pla		_loop:		pla
.c428	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c42b	c8		iny				iny
.c42c	c0 08		cpy #$08			cpy #8
.c42e	d0 f7		bne $c427			bne _loop
.c430	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c432	48		pha				pha
.c433	a5 14		lda $14				lda tmp1+0
.c435	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$c436					Here1 = *	; remember here
>c41d	17					.byte CodeLen	;patch wh_CodeLength
.c436	60		rts				rts
>c437	49 4b 65 79			Name0:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50107					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c43b	24					.byte (("IKey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c43c	10					.byte WordFlags	;wh_Flags
>c43d	03					.byte 3	;wh_CodeLength
>c43e	20					  .byte LinkDisplacement	; offset to previous nt
=$c43f					XtPtr1 ::= *
=50107					WordListLink ::= Nt0 ; remember the nt of this word for later
.c43f					IKey:
.c43f	20 03 b8	jsr $b803	_again:		jsr Zero
.c442	20 03 b8	jsr $b803			jsr Zero	; ( ud )
.c445	20 45 ca	jsr $ca45			jsr Here
.c448	20 73 cf	jsr $cf73			jsr Dup		; get text
.c44b	a9 10		lda #$10			lda #16
.c44d	20 f5 b7	jsr $b7f5			jsr PushZA
.c450	20 c7 c2	jsr $c2c7			jsr Accept	; ( ud addr len )
.c453	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c455	c9 2d		cmp #$2d			cmp #'-'
.c457	08		php				php		;  save sign
.c458	d0 06		bne $c460			bne +
.c45a	20 81 ca	jsr $ca81			jsr NOS_One_Plus ;   eat the '-'
.c45d	20 52 ca	jsr $ca52			jsr One_Minus
.c460					+
.c460	20 60 b0	jsr $b060			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c463	e8		inx				inx		; Drop len
.c464	e8		inx				inx
.c465	e8		inx				inx		; Drop addr
.c466	e8		inx				inx
.c467	e8		inx				inx		; UD>S
.c468	e8		inx				inx
.c469	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c46b	f0 11		beq $c47e			beq _ok
.c46d	e8		inx		_err:		inx		; Drop u
.c46e	e8		inx				inx
.c46f	28		plp				plp		; RDrop saved sign
.c470	20 e9 cd	jsr $cde9			jsr Space	; prompt again
.c473	a9 3f		lda #$3f			lda #'?'
.c475	20 dd cd	jsr $cddd			jsr Emit_A
.c478	20 e9 cd	jsr $cde9			jsr Space
.c47b	4c 3f c4	jmp $c43f			jmp _again	; try it again
.c47e	28		plp		_ok:		plp		; apply sign
.c47f	d0 03		bne $c484			bne +
.c481	20 c7 c6	jsr $c6c7			jsr Negate
.c484					+
.c484	60		rts				rts
=70					CodeLen	.var *-XtPtr1
=$c485					Here1 = *	; remember here
>c43d	46					.byte CodeLen	;patch wh_CodeLength
>c485	42 6f 75 6e 64 73		Name0:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c48b	66					.byte (("Bounds"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c48c	40					.byte WordFlags	;wh_Flags
>c48d	03					.byte 3	;wh_CodeLength
>c48e	50					  .byte LinkDisplacement	; offset to previous nt
=$c48f					XtPtr1 ::= *
=50187					WordListLink ::= Nt0 ; remember the nt of this word for later
.c48f					Bounds:
.c48f	20 44 b4	jsr $b444			jsr underflow_2
.c492	18		clc				clc
.c493	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c495	a8		tay				tay
.c496	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c498	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c49a	94 24		sty $24,x			sty DStack+0,x
.c49c	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c49e	a8		tay				tay
.c49f	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c4a1	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c4a3	94 25		sty $25,x			sty DStack+1,x
=22					CodeLen	.var *-XtPtr1
=$c4a5					Here1 = *	; remember here
>c48d	16					.byte CodeLen	;patch wh_CodeLength
.c4a5	60		rts				rts
>c4a6	53 70 61 63 65 73		Name0:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4ac	66					.byte (("Spaces"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c4ad	50					.byte WordFlags	;wh_Flags
>c4ae	03					.byte 3	;wh_CodeLength
>c4af	21					  .byte LinkDisplacement	; offset to previous nt
=$c4b0					XtPtr1 ::= *
=50220					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4b0					 Spaces:
.c4b0	20 30 b4	jsr $b430			jsr underflow_1
.c4b3	4c b9 c4	jmp $c4b9			jmp _test
.c4b6					_loop:
.c4b6	20 e9 cd	jsr $cde9			jsr Space		; print a space
.c4b9	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c4bb	10 f9		bpl $c4b6			bpl _loop
.c4bd	e8		inx				inx			; Drop
.c4be	e8		inx				inx
=15					CodeLen	.var *-XtPtr1
=$c4bf					Here1 = *	; remember here
>c4ae	0f					.byte CodeLen	;patch wh_CodeLength
.c4bf	60		rts				rts
>c4c0	2d 54 72 61 69 6c 69 6e		Name0:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4c8	67
=9					NameLength = *-Name0
=50249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4c9	e9					.byte (("-Trailing"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4ca	50					.byte WordFlags	;wh_Flags
>c4cb	03					.byte 3	;wh_CodeLength
>c4cc	1d					  .byte LinkDisplacement	; offset to previous nt
=$c4cd					XtPtr1 ::= *
=50249					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4cd					Minus_trailing:
.c4cd	20 44 b4	jsr $b444			jsr underflow_2
.c4d0	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4d2	85 14		sta $14				sta tmp1+0
.c4d4	b5 27		lda $27,x			lda DStack+3,x
.c4d6	18		clc				clc
.c4d7	75 25		adc $25,x			adc DStack+1,x
.c4d9	85 15		sta $15				sta tmp1+1
.c4db	b4 24		ldy $24,x			ldy DStack+0,x
.c4dd	88		dey		_loop:		dey			; back 1 char
.c4de	c0 ff		cpy #$ff			cpy #$ff
.c4e0	d0 06		bne $c4e8			bne +
.c4e2	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4e4	d6 25		dec $25,x			dec DStack+1,x
.c4e6	30 06		bmi $c4ee			bmi _done
.c4e8					+
.c4e8	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4ea	c9 20		cmp #$20			cmp #AscSP
.c4ec	f0 ef		beq $c4dd			beq _loop
.c4ee	c8		iny		_done:		iny			; forward 1 char
.c4ef	d0 02		bne $c4f3			bne +
.c4f1	f6 25		inc $25,x			inc DStack+1,x
.c4f3	94 24		sty $24,x	+		sty DStack+0,x
=40					CodeLen	.var *-XtPtr1
=$c4f5					Here1 = *	; remember here
>c4cb	28					.byte CodeLen	;patch wh_CodeLength
.c4f5	60		rts				rts
>c4f6	2d 4c 65 61 64 69 6e 67		Name0:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=8					NameLength = *-Name0
=50302					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4fe	e8					.byte (("-Leading"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4ff	50					.byte WordFlags	;wh_Flags
>c500	03					.byte 3	;wh_CodeLength
>c501	35					  .byte LinkDisplacement	; offset to previous nt
=$c502					XtPtr1 ::= *
=50302					WordListLink ::= Nt0 ; remember the nt of this word for later
.c502					Minus_leading:
.c502	20 44 b4	jsr $b444			jsr underflow_2
.c505					_loop:
.c505	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c507	15 25		ora $25,x			ora DStack+1,x
.c509	f0 0f		beq $c51a			beq _done
.c50b	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c50d	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c50f	b0 09		bcs $c51a			bcs _done
.c511	20 81 ca	jsr $ca81			jsr NOS_One_Plus
.c514	20 55 ca	jsr $ca55			jsr One_Minus_NoUF
.c517	4c 05 c5	jmp $c505			jmp _loop
.c51a					_done:
=24					CodeLen	.var *-XtPtr1
=$c51a					Here1 = *	; remember here
>c500	18					.byte CodeLen	;patch wh_CodeLength
.c51a	60		rts				rts
>c51b	2f 53 74 72 69 6e 67		Name0:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c522	e7					.byte (("/String"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c523	50					.byte WordFlags	;wh_Flags
>c524	03					.byte 3	;wh_CodeLength
>c525	24					  .byte LinkDisplacement	; offset to previous nt
=$c526					XtPtr1 ::= *
=50338					WordListLink ::= Nt0 ; remember the nt of this word for later
.c526					Slash_String:
.c526	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c528	b0 1d		bcs $c547		bcs Throw_Stack_20
.c52a	18		clc				clc		; addr += n
.c52b	b5 24		lda $24,x			lda DStack+0,x
.c52d	75 28		adc $28,x			adc DStack+4,x
.c52f	95 28		sta $28,x			sta DStack+4,x
.c531	b5 25		lda $25,x			lda DStack+1,x
.c533	75 29		adc $29,x			adc DStack+5,x
.c535	95 29		sta $29,x			sta DStack+5,x
.c537	38		sec				sec		; u -= n
.c538	b5 26		lda $26,x			lda DStack+2,x
.c53a	f5 24		sbc $24,x			sbc DStack+0,x
.c53c	95 26		sta $26,x			sta DStack+2,x
.c53e	b5 27		lda $27,x			lda DStack+3,x
.c540	f5 25		sbc $25,x			sbc DStack+1,x
.c542	95 27		sta $27,x			sta DStack+3,x
.c544	e8		inx				inx		; Drop n
.c545	e8		inx				inx
=32					CodeLen	.var *-XtPtr1
=$c546					Here1 = *	; remember here
>c524	20					.byte CodeLen	;patch wh_CodeLength
.c546	60		rts				rts
.c547	4c 53 b4	jmp $b453	Throw_Stack_20: jmp Throw_Stack
>c54a	32 44 72 6f 70			Name0:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50383					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c54f	05					.byte (("2Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c550	40					.byte WordFlags	;wh_Flags
>c551	03					.byte 3	;wh_CodeLength
>c552	2d					  .byte LinkDisplacement	; offset to previous nt
=$c553					XtPtr1 ::= *
=50383					WordListLink ::= Nt0 ; remember the nt of this word for later
.c553					Two_drop:
.c553	20 44 b4	jsr $b444			jsr underflow_2
.c556	e8		inx				inx
.c557	e8		inx				inx
.c558	e8		inx				inx
.c559	e8		inx				inx
=7					CodeLen	.var *-XtPtr1
=$c55a					Here1 = *	; remember here
>c551	07					.byte CodeLen	;patch wh_CodeLength
.c55a	60		rts				rts
>c55b	32 53 77 61 70			Name0:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c560	05					.byte (("2Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c561	10					.byte WordFlags	;wh_Flags
>c562	03					.byte 3	;wh_CodeLength
>c563	11					  .byte LinkDisplacement	; offset to previous nt
=$c564					XtPtr1 ::= *
=50400					WordListLink ::= Nt0 ; remember the nt of this word for later
.c564					Two_Swap:
.c564	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c566	b0 df		bcs $c547		bcs Throw_Stack_20
.c568	86 14		stx $14				stx tmp1
.c56a	ca		dex				dex
.c56b	ca		dex				dex
.c56c	ca		dex				dex
.c56d	ca		dex				dex
.c56e	e8		inx		_loop:		inx
.c56f	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c571	b4 2b		ldy $2b,x			ldy DStack+7,x
.c573	95 2b		sta $2b,x			sta DStack+7,x
.c575	94 27		sty $27,x			sty DStack+3,x
.c577	e4 14		cpx $14				cpx tmp1
.c579	90 f3		bcc $c56e			bcc _loop
=23					CodeLen	.var *-XtPtr1
=$c57b					Here1 = *	; remember here
>c562	17					.byte CodeLen	;patch wh_CodeLength
.c57b	60		rts				rts
>c57c	32 4f 76 65 72			Name0:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=50433					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c581	45					.byte (("2Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c582	50					.byte WordFlags	;wh_Flags
>c583	03					.byte 3	;wh_CodeLength
>c584	21					  .byte LinkDisplacement	; offset to previous nt
=$c585					XtPtr1 ::= *
=50433					WordListLink ::= Nt0 ; remember the nt of this word for later
.c585					Two_over:
.c585	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c587	b0 be		bcs $c547		bcs Throw_Stack_20
.c589	a0 04		ldy #$04			ldy #4
.c58b	ca		dex		_loop:		dex
.c58c	b5 2c		lda $2c,x			lda DStack+8,x
.c58e	95 24		sta $24,x			sta DStack+0,x
.c590	88		dey				dey
.c591	d0 f8		bne $c58b			bne _loop
=14					CodeLen	.var *-XtPtr1
=$c593					Here1 = *	; remember here
>c583	0e					.byte CodeLen	;patch wh_CodeLength
.c593	60		rts				rts
>c594	32 21				Name0:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50454					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c596	22					.byte (("2!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c597	40					.byte WordFlags	;wh_Flags
>c598	03					.byte 3	;wh_CodeLength
>c599	15					  .byte LinkDisplacement	; offset to previous nt
=$c59a					XtPtr1 ::= *
=50454					WordListLink ::= Nt0 ; remember the nt of this word for later
.c59a					Two_Store:
.c59a	20 49 b4	jsr $b449			jsr underflow_3
.c59d	20 07 b4	jsr $b407			jsr PopYA
.c5a0	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c5a2	84 15		sty $15				sty tmp1+1
.c5a4	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c5a6	a0 00		ldy #$00			ldy #0
.c5a8	91 14		sta ($14),y			sta (tmp1),y
.c5aa	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c5ac	c8		iny				iny
.c5ad	91 14		sta ($14),y			sta (tmp1),y
.c5af	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c5b1	c8		iny				iny
.c5b2	91 14		sta ($14),y			sta (tmp1),y
.c5b4	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c5b6	c8		iny				iny
.c5b7	91 14		sta ($14),y			sta (tmp1),y
.c5b9	e8		inx				inx		; 2Drop
.c5ba	e8		inx				inx
.c5bb	e8		inx				inx
.c5bc	e8		inx				inx
=35					CodeLen	.var *-XtPtr1
=$c5bd					Here1 = *	; remember here
>c598	23					.byte CodeLen	;patch wh_CodeLength
.c5bd	60		rts				rts
>c5be	32 40				Name0:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50496					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5c0	02					.byte (("2@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c5c1	00					.byte WordFlags	;wh_Flags
>c5c2	03					.byte 3	;wh_CodeLength
>c5c3	2a					  .byte LinkDisplacement	; offset to previous nt
=$c5c4					XtPtr1 ::= *
=50496					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5c4	20 07 b4	jsr $b407	Two_fetch:	jsr PopYA
.c5c7	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5c9	84 15		sty $15				sty tmp1+1
.c5cb	a0 00		ldy #$00			ldy #0
.c5cd					Two_Fetch_Tmp1Y:
.c5cd	ca		dex				dex
.c5ce	ca		dex				dex
.c5cf	ca		dex				dex
.c5d0	ca		dex				dex
.c5d1	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5d3	95 24		sta $24,x			sta DStack+0,x
.c5d5	c8		iny				iny		; copy next
.c5d6	b1 14		lda ($14),y			lda (tmp1),y
.c5d8	95 25		sta $25,x			sta DStack+1,x
.c5da	c8		iny				iny		; copy next
.c5db	b1 14		lda ($14),y			lda (tmp1),y
.c5dd	95 26		sta $26,x			sta DStack+2,x
.c5df	c8		iny				iny		; copy next
.c5e0	b1 14		lda ($14),y			lda (tmp1),y
.c5e2	95 27		sta $27,x			sta DStack+3,x
=32					CodeLen	.var *-XtPtr1
=$c5e4					Here1 = *	; remember here
>c5c2	20					.byte CodeLen	;patch wh_CodeLength
.c5e4	60		rts				rts
>c5e5	44 40				Name0:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50535					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5e7	02					.byte (("D@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5e8	10					.byte WordFlags	;wh_Flags
>c5e9	03					.byte 3	;wh_CodeLength
>c5ea	27					  .byte LinkDisplacement	; offset to previous nt
=$c5eb					XtPtr1 ::= *
=50535					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5eb	20 07 b4	jsr $b407	DFetch:		jsr PopYA
.c5ee	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5f0	84 15		sty $15				sty tmp1+1
.c5f2	ca		dex				dex
.c5f3	ca		dex				dex
.c5f4	ca		dex				dex
.c5f5	ca		dex				dex
.c5f6	a0 00		ldy #$00			ldy #0
.c5f8	b1 14		lda ($14),y			lda (tmp1),y
.c5fa	95 26		sta $26,x			sta DStack+2,x
.c5fc	c8		iny				iny
.c5fd	b1 14		lda ($14),y			lda (tmp1),y
.c5ff	95 27		sta $27,x			sta DStack+3,x
.c601	c8		iny				iny
.c602	b1 14		lda ($14),y			lda (tmp1),y
.c604	95 24		sta $24,x			sta DStack+0,x
.c606	c8		iny				iny
.c607	b1 14		lda ($14),y			lda (tmp1),y
.c609	95 25		sta $25,x			sta DStack+1,x
=32					CodeLen	.var *-XtPtr1
=$c60b					Here1 = *	; remember here
>c5e9	20					.byte CodeLen	;patch wh_CodeLength
.c60b	60		rts				rts
>c60c	44 21				Name0:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c60e	22					.byte (("D!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c60f	10					.byte WordFlags	;wh_Flags
>c610	03					.byte 3	;wh_CodeLength
>c611	27					  .byte LinkDisplacement	; offset to previous nt
=$c612					XtPtr1 ::= *
=50574					WordListLink ::= Nt0 ; remember the nt of this word for later
.c612	20 07 b4	jsr $b407	DStore:		jsr PopYA
.c615	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c617	84 15		sty $15				sty tmp1+1
.c619	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c61b	a0 00		ldy #$00			ldy #0
.c61d	91 14		sta ($14),y			sta (tmp1),y
.c61f	b5 27		lda $27,x			lda DStack+3,x
.c621	c8		iny				iny
.c622	91 14		sta ($14),y			sta (tmp1),y
.c624	b5 24		lda $24,x			lda DStack+0,x
.c626	c8		iny				iny
.c627	91 14		sta ($14),y			sta (tmp1),y
.c629	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c62b	c8		iny				iny
.c62c	91 14		sta ($14),y			sta (tmp1),y
.c62e	4c 53 c5	jmp $c553			jmp Two_Drop	; also check underflow, return
=31					CodeLen	.var *-XtPtr1
=$c631					Here1 = *	; remember here
>c610	1f					.byte CodeLen	;patch wh_CodeLength
>c631	32 52 40			Name0:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50612					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c634	03					.byte (("2R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c635	14					.byte WordFlags	;wh_Flags
>c636	03					.byte 3	;wh_CodeLength
>c637	26					  .byte LinkDisplacement	; offset to previous nt
=$c638					XtPtr1 ::= *
=50612					WordListLink ::= Nt0 ; remember the nt of this word for later
.c638					Two_r_fetch:
.c638	8a		txa				txa		; Y= return stack index
.c639	ba		tsx				tsx
.c63a	86 14		stx $14				stx tmp1
.c63c	a4 14		ldy $14				ldy tmp1
.c63e	aa		tax				tax
.c63f	ca		dex				dex		; make room on the Data Stack
.c640	ca		dex				dex
.c641	ca		dex				dex
.c642	ca		dex				dex
.c643	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c646	95 24		sta $24,x			sta DStack+0,x
.c648	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c64b	95 25		sta $25,x			sta DStack+1,x
.c64d	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c650	95 26		sta $26,x			sta DStack+2,x
.c652	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c655	95 27		sta $27,x			sta DStack+3,x
=31					CodeLen	.var *-XtPtr1
=$c657					Here1 = *	; remember here
>c636	1f					.byte CodeLen	;patch wh_CodeLength
.c657	60		rts				rts
>c658	32 52 3e			Name0:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50651					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c65b	c3					.byte (("2R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c65c	34					.byte WordFlags	;wh_Flags
>c65d	03					.byte 3	;wh_CodeLength
>c65e	27					  .byte LinkDisplacement	; offset to previous nt
=$c65f					XtPtr1 ::= *
=50651					WordListLink ::= Nt0 ; remember the nt of this word for later
.c65f					Two_r_from:
.c65f	68		pla				pla			; save the return address
.c660	85 14		sta $14				sta tmp1+0
.c662	68		pla				pla
.c663	85 15		sta $15				sta tmp1+1
.c665	ca		dex				dex			; make room on stack
.c666	ca		dex				dex
.c667	ca		dex				dex
.c668	ca		dex				dex
.c669	68		pla				pla			; LSB
.c66a	95 24		sta $24,x			sta DStack+0,x
.c66c	68		pla				pla			; MSB
.c66d	95 25		sta $25,x			sta DStack+1,x
.c66f	68		pla				pla			; LSB
.c670	95 26		sta $26,x			sta DStack+2,x
.c672	68		pla				pla			; MSB
.c673	95 27		sta $27,x			sta DStack+3,x
.c675	a5 15		lda $15				lda tmp1+1		; restore return address
.c677	48		pha				pha
.c678	a5 14		lda $14				lda tmp1+0
.c67a	48		pha				pha
=28					CodeLen	.var *-XtPtr1
=$c67b					Here1 = *	; remember here
>c65d	1c					.byte CodeLen	;patch wh_CodeLength
.c67b	60		rts				rts
>c67c	32 3e 52			Name0:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50687					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c67f	43					.byte (("2>R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifiable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c680	74					.byte WordFlags	;wh_Flags
>c681	03					.byte 3	;wh_CodeLength
>c682	24					  .byte LinkDisplacement	; offset to previous nt
=$c683					XtPtr1 ::= *
=50687					WordListLink ::= Nt0 ; remember the nt of this word for later
.c683					Two_to_r:
.c683	68		pla				pla		; save the return address
.c684	85 14		sta $14				sta tmp1+0
.c686	68		pla				pla
.c687	85 15		sta $15				sta tmp1+1
.c689	20 44 b4	jsr $b444			jsr underflow_2
.c68c	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c68e	48		pha				pha
.c68f	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c691	48		pha				pha
.c692	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c694	48		pha				pha
.c695	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c697	48		pha				pha
.c698	e8		inx				inx
.c699	e8		inx				inx
.c69a	e8		inx				inx
.c69b	e8		inx				inx
.c69c	a5 15		lda $15				lda tmp1+1	; restore return address
.c69e	48		pha				pha
.c69f	a5 14		lda $14				lda tmp1+0
.c6a1	48		pha				pha
=31					CodeLen	.var *-XtPtr1
=$c6a2					Here1 = *	; remember here
>c681	1f					.byte CodeLen	;patch wh_CodeLength
.c6a2	60		rts				rts
>c6a3	49 6e 76 65 72 74		Name0:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50729					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6a9	86					.byte (("Invert"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c6aa	40					.byte WordFlags	;wh_Flags
>c6ab	03					.byte 3	;wh_CodeLength
>c6ac	2a					  .byte LinkDisplacement	; offset to previous nt
=$c6ad					XtPtr1 ::= *
=50729					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6ad					Invert:
.c6ad	20 30 b4	jsr $b430			jsr underflow_1
.c6b0	a9 ff		lda #$ff			lda #$FF
.c6b2	55 24		eor $24,x			eor DStack+0,x	; LSB
.c6b4	95 24		sta $24,x			sta DStack+0,x
.c6b6	a9 ff		lda #$ff			lda #$FF
.c6b8	55 25		eor $25,x			eor DStack+1,x	; MSB
.c6ba	95 25		sta $25,x			sta DStack+1,x
=15					CodeLen	.var *-XtPtr1
=$c6bc					Here1 = *	; remember here
>c6ab	0f					.byte CodeLen	;patch wh_CodeLength
.c6bc	60		rts				rts
>c6bd	4e 65 67 61 74 65		Name0:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=50755					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6c3	a6					.byte (("Negate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6c4	40					.byte WordFlags	;wh_Flags
>c6c5	03					.byte 3	;wh_CodeLength
>c6c6	1a					  .byte LinkDisplacement	; offset to previous nt
=$c6c7					XtPtr1 ::= *
=50755					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6c7					Negate:
.c6c7	20 30 b4	jsr $b430			jsr underflow_1
.c6ca	38		sec		Negate3:	sec
.c6cb	a9 00		lda #$00	Negate4:	lda #0
.c6cd	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6cf	95 24		sta $24,x			sta DStack+0,x
.c6d1	a9 00		lda #$00			lda #0
.c6d3	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6d5	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c6d7					Here1 = *	; remember here
>c6c5	10					.byte CodeLen	;patch wh_CodeLength
.c6d7	60		rts				rts
>c6d8	41 62 73			Name0:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50779					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6db	63					.byte (("Abs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6dc	10					.byte WordFlags	;wh_Flags
>c6dd	03					.byte 3	;wh_CodeLength
>c6de	18					  .byte LinkDisplacement	; offset to previous nt
=$c6df					XtPtr1 ::= *
=50779					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6df					Abs:
.c6df	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6e1	b0 05		bcs $c6e8		bcs Throw_Stack_17
.c6e3	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6e5	30 e3		bmi $c6ca			bmi Negate3
=8					CodeLen	.var *-XtPtr1
=$c6e7					Here1 = *	; remember here
>c6dd	08					.byte CodeLen	;patch wh_CodeLength
.c6e7	60		rts				rts
.c6e8	4c 53 b4	jmp $b453	Throw_Stack_17: jmp Throw_Stack
>c6eb	44 4e 65 67 61 74 65		Name0:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=50802					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6f2	a7					.byte (("DNegate"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6f3	10					.byte WordFlags	;wh_Flags
>c6f4	03					.byte 3	;wh_CodeLength
>c6f5	17					  .byte LinkDisplacement	; offset to previous nt
=$c6f6					XtPtr1 ::= *
=50802					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6f6					DNegate:
.c6f6	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c6f8	b0 ee		bcs $c6e8		bcs Throw_Stack_17
.c6fa	38		sec		DNegate3:	sec
.c6fb	a9 00		lda #$00			lda #0
.c6fd	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6ff	95 26		sta $26,x			sta DStack+2,x
.c701	a9 00		lda #$00			lda #0
.c703	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c705	95 27		sta $27,x			sta DStack+3,x
.c707	4c cb c6	jmp $c6cb			jmp Negate4
=20					CodeLen	.var *-XtPtr1
=$c70a					Here1 = *	; remember here
>c6f4	14					.byte CodeLen	;patch wh_CodeLength
>c70a	44 41 62 73			Name0:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c70e	64					.byte (("DAbs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c70f	10					.byte WordFlags	;wh_Flags
>c710	03					.byte 3	;wh_CodeLength
>c711	1c					  .byte LinkDisplacement	; offset to previous nt
=$c712					XtPtr1 ::= *
=50830					WordListLink ::= Nt0 ; remember the nt of this word for later
.c712					DAbs:
.c712	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c714	b0 d2		bcs $c6e8		bcs Throw_Stack_17
.c716	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c718	30 e0		bmi $c6fa			bmi DNegate3
=8					CodeLen	.var *-XtPtr1
=$c71a					Here1 = *	; remember here
>c710	08					.byte CodeLen	;patch wh_CodeLength
.c71a	60		rts				rts
>c71b	44 3c 3e			Name0:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50846					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c71e	c3					.byte (("D<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c71f	10					.byte WordFlags	;wh_Flags
>c720	03					.byte 3	;wh_CodeLength
>c721	10					  .byte LinkDisplacement	; offset to previous nt
=$c722					XtPtr1 ::= *
=50846					WordListLink ::= Nt0 ; remember the nt of this word for later
.c722	20 2e c7	jsr $c72e	DNEq:		jsr DEqual
.c725	4c 1c c9	jmp $c91c			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c728					Here1 = *	; remember here
>c720	06					.byte CodeLen	;patch wh_CodeLength
>c728	44 3d				Name0:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50858					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c72a	a2					.byte (("D="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c72b	10					.byte WordFlags	;wh_Flags
>c72c	03					.byte 3	;wh_CodeLength
>c72d	0c					  .byte LinkDisplacement	; offset to previous nt
=$c72e					XtPtr1 ::= *
=50858					WordListLink ::= Nt0 ; remember the nt of this word for later
.c72e	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c730	d5 26		cmp $26,x			cmp DStack+2,x
.c732	d0 4c		bne $c780			bne False3
.c734	b5 2b		lda $2b,x			lda DStack+7,x
.c736	d5 27		cmp $27,x			cmp DStack+3,x
.c738	d0 46		bne $c780			bne False3
.c73a	b5 24		lda $24,x			lda DStack+0,x
.c73c	d5 28		cmp $28,x			cmp DStack+4,x
.c73e	d0 40		bne $c780			bne False3
.c740	b5 25		lda $25,x			lda DStack+1,x
.c742	d5 29		cmp $29,x			cmp DStack+5,x
.c744	d0 3a		bne $c780			bne False3
.c746	f0 5c		beq $c7a4			beq True3
=26					CodeLen	.var *-XtPtr1
=$c748					Here1 = *	; remember here
>c72c	1a					.byte CodeLen	;patch wh_CodeLength
>c748	44 55 3e			Name0:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50891					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c74b	c3					.byte (("DU>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c74c	10					.byte WordFlags	;wh_Flags
>c74d	03					.byte 3	;wh_CodeLength
>c74e	21					  .byte LinkDisplacement	; offset to previous nt
=$c74f					XtPtr1 ::= *
=50891					WordListLink ::= Nt0 ; remember the nt of this word for later
.c74f	20 e5 c7	jsr $c7e5	DUGt:		jsr DGtSub
.c752	90 50		bcc $c7a4			bcc True3
.c754	b0 2a		bcs $c780			bcs False3
=7					CodeLen	.var *-XtPtr1
=$c756					Here1 = *	; remember here
>c74d	07					.byte CodeLen	;patch wh_CodeLength
>c756	44 55 3c 3d			Name0:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c75a	a4					.byte (("DU<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c75b	10					.byte WordFlags	;wh_Flags
>c75c	03					.byte 3	;wh_CodeLength
>c75d	0f					  .byte LinkDisplacement	; offset to previous nt
=$c75e					XtPtr1 ::= *
=50906					WordListLink ::= Nt0 ; remember the nt of this word for later
.c75e	20 e5 c7	jsr $c7e5	DULe:		jsr DGtSub
.c761	b0 41		bcs $c7a4			bcs True3
.c763	90 1b		bcc $c780			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c765					Here1 = *	; remember here
>c75c	07					.byte CodeLen	;patch wh_CodeLength
>c765	44 55 3e 3d			Name0:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=50921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c769	a4					.byte (("DU>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c76a	10					.byte WordFlags	;wh_Flags
>c76b	03					.byte 3	;wh_CodeLength
>c76c	0f					  .byte LinkDisplacement	; offset to previous nt
=$c76d					XtPtr1 ::= *
=50921					WordListLink ::= Nt0 ; remember the nt of this word for later
.c76d	20 b5 c7	jsr $c7b5	DUGe:		jsr DLessSub
.c770	b0 32		bcs $c7a4			bcs True3
.c772	90 0c		bcc $c780			bcc False3
=7					CodeLen	.var *-XtPtr1
=$c774					Here1 = *	; remember here
>c76b	07					.byte CodeLen	;patch wh_CodeLength
>c774	44 55 3c			Name0:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50935					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c777	83					.byte (("DU<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c778	10					.byte WordFlags	;wh_Flags
>c779	03					.byte 3	;wh_CodeLength
>c77a	0e					  .byte LinkDisplacement	; offset to previous nt
=$c77b					XtPtr1 ::= *
=50935					WordListLink ::= Nt0 ; remember the nt of this word for later
.c77b	20 b5 c7	jsr $c7b5	DULess:		jsr DLessSub
.c77e	90 24		bcc $c7a4			bcc True3
.c780	a9 00		lda #$00	False3:		lda #0
.c782	f0 22		beq $c7a6			beq DReturn3
=9					CodeLen	.var *-XtPtr1
=$c784					Here1 = *	; remember here
>c779	09					.byte CodeLen	;patch wh_CodeLength
.c784	4c 53 b4	jmp $b453	Throw_Stack_09: jmp Throw_Stack
>c787	44 3e 3d			Name0:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=50954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c78a	a3					.byte (("D>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c78b	10					.byte WordFlags	;wh_Flags
>c78c	03					.byte 3	;wh_CodeLength
>c78d	13					  .byte LinkDisplacement	; offset to previous nt
=$c78e					XtPtr1 ::= *
=50954					WordListLink ::= Nt0 ; remember the nt of this word for later
.c78e	20 b5 c7	jsr $c7b5	DGEq:		jsr DLessSub
.c791	70 0f		bvs $c7a2			bvs DLess3
.c793	10 0f		bpl $c7a4	DGEq3:		bpl True3
.c795	30 e9		bmi $c780			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c797					Here1 = *	; remember here
>c78c	09					.byte CodeLen	;patch wh_CodeLength
>c797	44 3c				Name0:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=50969					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c799	82					.byte (("D<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c79a	10					.byte WordFlags	;wh_Flags
>c79b	03					.byte 3	;wh_CodeLength
>c79c	0f					  .byte LinkDisplacement	; offset to previous nt
=$c79d					XtPtr1 ::= *
=50969					WordListLink ::= Nt0 ; remember the nt of this word for later
.c79d	20 b5 c7	jsr $c7b5	DLess:		jsr DLessSub
.c7a0	70 f1		bvs $c793			bvs DGEq3
.c7a2	10 dc		bpl $c780	DLess3:		bpl False3
.c7a4	a9 ff		lda #$ff	True3:		lda #$ff
.c7a6					DReturn3:
.c7a6	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c7a8	b0 da		bcs $c784		bcs Throw_Stack_09
.c7aa	95 2a		sta $2a,x			sta DStack+6,x
.c7ac	95 2b		sta $2b,x			sta DStack+7,x
.c7ae	e8		inx				inx			; preserve A, don't use ThreeDrop
.c7af	e8		inx				inx
.c7b0	e8		inx				inx
.c7b1	e8		inx				inx
.c7b2	e8		inx				inx
.c7b3	e8		inx				inx
.c7b4	60		rts				rts
=24					CodeLen	.var *-XtPtr1
=$c7b5					Here1 = *	; remember here
>c79b	18					.byte CodeLen	;patch wh_CodeLength
.c7b5	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c7b7	d5 26		cmp $26,x			cmp DStack+2,x
.c7b9	b5 2b		lda $2b,x			lda DStack+7,x
.c7bb	f5 27		sbc $27,x			sbc DStack+3,x
.c7bd	b5 28		lda $28,x			lda DStack+4,x
.c7bf	f5 24		sbc $24,x			sbc DStack+0,x
.c7c1	b5 29		lda $29,x			lda DStack+5,x
.c7c3	f5 25		sbc $25,x			sbc DStack+1,x
.c7c5	60		rts				rts
>c7c6	44 3c 3d			Name0:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51017					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7c9	a3					.byte (("D<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7ca	10					.byte WordFlags	;wh_Flags
>c7cb	03					.byte 3	;wh_CodeLength
>c7cc	30					  .byte LinkDisplacement	; offset to previous nt
=$c7cd					XtPtr1 ::= *
=51017					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7cd	20 e5 c7	jsr $c7e5	DLe:		jsr DGtSub
.c7d0	70 0f		bvs $c7e1			bvs DGt3
.c7d2	10 d0		bpl $c7a4	DLe3:		bpl True3
.c7d4	30 aa		bmi $c780			bmi False3
=9					CodeLen	.var *-XtPtr1
=$c7d6					Here1 = *	; remember here
>c7cb	09					.byte CodeLen	;patch wh_CodeLength
>c7d6	44 3e				Name0:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7d8	c2					.byte (("D>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7d9	10					.byte WordFlags	;wh_Flags
>c7da	03					.byte 3	;wh_CodeLength
>c7db	0f					  .byte LinkDisplacement	; offset to previous nt
=$c7dc					XtPtr1 ::= *
=51032					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7dc	20 e5 c7	jsr $c7e5	DGt:		jsr DGtSub
.c7df	70 f1		bvs $c7d2			bvs DLe3
.c7e1	30 c1		bmi $c7a4	DGt3:		bmi True3
.c7e3	10 9b		bpl $c780			bpl False3
=9					CodeLen	.var *-XtPtr1
=$c7e5					Here1 = *	; remember here
>c7da	09					.byte CodeLen	;patch wh_CodeLength
.c7e5	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7e7	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7e9	b5 27		lda $27,x			lda DStack+3,x
.c7eb	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7ed	b5 24		lda $24,x			lda DStack+0,x
.c7ef	f5 28		sbc $28,x			sbc DStack+4,x
.c7f1	b5 25		lda $25,x			lda DStack+1,x
.c7f3	f5 29		sbc $29,x			sbc DStack+5,x
.c7f5	60		rts				rts
>c7f6	44 30 3c 3d			Name0:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51066					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7fa	a4					.byte (("D0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7fb	10					.byte WordFlags	;wh_Flags
>c7fc	03					.byte 3	;wh_CodeLength
>c7fd	22					  .byte LinkDisplacement	; offset to previous nt
=$c7fe					XtPtr1 ::= *
=51066					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7fe	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c800	30 65		bmi $c867			bmi True1
.c802	10 24		bpl $c828			bpl D0Equal
=6					CodeLen	.var *-XtPtr1
=$c804					Here1 = *	; remember here
>c7fc	06					.byte CodeLen	;patch wh_CodeLength
>c804	44 30 3e			Name0:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c807	c3					.byte (("D0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c808	10					.byte WordFlags	;wh_Flags
>c809	03					.byte 3	;wh_CodeLength
>c80a	0d					  .byte LinkDisplacement	; offset to previous nt
=$c80b					XtPtr1 ::= *
=51079					WordListLink ::= Nt0 ; remember the nt of this word for later
.c80b	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c80d	10 0b		bpl $c81a			bpl D0Ne
.c80f	4c 86 c8	jmp $c886			jmp False1
>c812	44 30 3c 3e			Name0:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51094					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c816	c4					.byte (("D0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c817	10					.byte WordFlags	;wh_Flags
>c818	03					.byte 3	;wh_CodeLength
>c819	0f					  .byte LinkDisplacement	; offset to previous nt
=$c81a					XtPtr1 ::= *
=51094					WordListLink ::= Nt0 ; remember the nt of this word for later
.c81a	20 2f c8	jsr $c82f	D0Ne:		jsr D0EqSub
.c81d	d0 48		bne $c867			bne True1
.c81f	f0 65		beq $c886			beq False1
=7					CodeLen	.var *-XtPtr1
=$c821					Here1 = *	; remember here
>c818	07					.byte CodeLen	;patch wh_CodeLength
>c821	44 30 3d			Name0:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c824	a3					.byte (("D0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c825	10					.byte WordFlags	;wh_Flags
>c826	03					.byte 3	;wh_CodeLength
>c827	0e					  .byte LinkDisplacement	; offset to previous nt
=$c828					XtPtr1 ::= *
=51108					WordListLink ::= Nt0 ; remember the nt of this word for later
.c828	20 2f c8	jsr $c82f	D0Equal:	jsr D0EqSub
.c82b	d0 59		bne $c886			bne False1
.c82d	f0 38		beq $c867			beq True1
=7					CodeLen	.var *-XtPtr1
=$c82f					Here1 = *	; remember here
>c826	07					.byte CodeLen	;patch wh_CodeLength
.c82f	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c831	15 27		ora $27,x			ora DStack+3,x
.c833	15 24		ora $24,x			ora DStack+0,x
.c835	15 25		ora $25,x			ora DStack+1,x
.c837	60		rts				rts
>c838	44 30 3c			Name0:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51131					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c83b	83					.byte (("D0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c83c	10					.byte WordFlags	;wh_Flags
>c83d	03					.byte 3	;wh_CodeLength
>c83e	17					  .byte LinkDisplacement	; offset to previous nt
=$c83f					XtPtr1 ::= *
=51131					WordListLink ::= Nt0 ; remember the nt of this word for later
.c83f	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c841	30 24		bmi $c867			bmi True1
.c843	10 41		bpl $c886			bpl False1
=6					CodeLen	.var *-XtPtr1
=$c845					Here1 = *	; remember here
>c83d	06					.byte CodeLen	;patch wh_CodeLength
>c845	44 30 3e 3d			Name0:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51145					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c849	a4					.byte (("D0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c84a	10					.byte WordFlags	;wh_Flags
>c84b	03					.byte 3	;wh_CodeLength
>c84c	0e					  .byte LinkDisplacement	; offset to previous nt
=$c84d					XtPtr1 ::= *
=51145					WordListLink ::= Nt0 ; remember the nt of this word for later
.c84d	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c84f	10 16		bpl $c867			bpl True1
.c851	30 33		bmi $c886			bmi False1
=6					CodeLen	.var *-XtPtr1
=$c853					Here1 = *	; remember here
>c84b	06					.byte CodeLen	;patch wh_CodeLength
.c853	4c 53 b4	jmp $b453	Throw_Stack_08: jmp Throw_Stack
>c856	3d				Name0:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51159					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c857	a1					.byte (("="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c858	10					.byte WordFlags	;wh_Flags
>c859	03					.byte 3	;wh_CodeLength
>c85a	0e					  .byte LinkDisplacement	; offset to previous nt
=$c85b					XtPtr1 ::= *
=51159					WordListLink ::= Nt0 ; remember the nt of this word for later
.c85b	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c85d	d5 26		cmp $26,x			cmp DStack+2,x
.c85f	d0 25		bne $c886			bne False1
.c861	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c863	d5 27		cmp $27,x			cmp DStack+3,x
.c865	d0 1f		bne $c886			bne False1
.c867	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c869					Return1:
.c869	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c86b	b0 e6		bcs $c853		bcs Throw_Stack_08
.c86d	e8		inx				inx		; Drop
.c86e	e8		inx				inx
.c86f	95 24		sta $24,x			sta DStack+0,x	; store f
.c871	95 25		sta $25,x			sta DStack+1,x
.c873	60		rts				rts
=25					CodeLen	.var *-XtPtr1
=$c874					Here1 = *	; remember here
>c859	19					.byte CodeLen	;patch wh_CodeLength
>c874	3c 3e				Name0:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51190					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c876	c2					.byte (("<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c877	10					.byte WordFlags	;wh_Flags
>c878	03					.byte 3	;wh_CodeLength
>c879	1f					  .byte LinkDisplacement	; offset to previous nt
=$c87a					XtPtr1 ::= *
=51190					WordListLink ::= Nt0 ; remember the nt of this word for later
.c87a	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c87c	d5 26		cmp $26,x			cmp DStack+2,x
.c87e	d0 e7		bne $c867			bne True1
.c880	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c882	d5 27		cmp $27,x			cmp DStack+3,x
.c884	d0 e1		bne $c867			bne True1
.c886	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c888	f0 df		beq $c869			beq Return1
=16					CodeLen	.var *-XtPtr1
=$c88a					Here1 = *	; remember here
>c878	10					.byte CodeLen	;patch wh_CodeLength
>c88a	3c				Name0:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c88b	81					.byte (("<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c88c	10					.byte WordFlags	;wh_Flags
>c88d	03					.byte 3	;wh_CodeLength
>c88e	15					  .byte LinkDisplacement	; offset to previous nt
=$c88f					XtPtr1 ::= *
=51211					WordListLink ::= Nt0 ; remember the nt of this word for later
.c88f	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c891	d5 24		cmp $24,x			cmp DStack+0,x
.c893	b5 27		lda $27,x			lda DStack+3,x
.c895	f5 25		sbc $25,x			sbc DStack+1,x
.c897	50 02		bvc $c89b			bvc _c
.c899	49 80		eor #$80			eor #$80	; fix sign
.c89b	10 e9		bpl $c886	_c:		bpl False1
.c89d	30 c8		bmi $c867			bmi True1
=16					CodeLen	.var *-XtPtr1
=$c89f					Here1 = *	; remember here
>c88d	10					.byte CodeLen	;patch wh_CodeLength
>c89f	3e 3d				Name0:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51233					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8a1	a2					.byte ((">="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c8a2	10					.byte WordFlags	;wh_Flags
>c8a3	03					.byte 3	;wh_CodeLength
>c8a4	16					  .byte LinkDisplacement	; offset to previous nt
=$c8a5					XtPtr1 ::= *
=51233					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a5	20 8f c8	jsr $c88f	Ge:		jsr Less_Than
.c8a8	4c 1c c9	jmp $c91c			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8ab					Here1 = *	; remember here
>c8a3	06					.byte CodeLen	;patch wh_CodeLength
>c8ab	55 3c				Name0:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51245					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8ad	82					.byte (("U<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c8ae	10					.byte WordFlags	;wh_Flags
>c8af	03					.byte 3	;wh_CodeLength
>c8b0	0c					  .byte LinkDisplacement	; offset to previous nt
=$c8b1					XtPtr1 ::= *
=51245					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8b1	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c8b3	d5 24		cmp $24,x			cmp DStack+0,x
.c8b5	b5 27		lda $27,x			lda DStack+3,x
.c8b7	f5 25		sbc $25,x			sbc DStack+1,x
.c8b9	b0 cb		bcs $c886			bcs False1
.c8bb	90 aa		bcc $c867			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8bd					Here1 = *	; remember here
>c8af	0c					.byte CodeLen	;patch wh_CodeLength
>c8bd	55 3e				Name0:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51263					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8bf	c2					.byte (("U>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c8c0	10					.byte WordFlags	;wh_Flags
>c8c1	03					.byte 3	;wh_CodeLength
>c8c2	12					  .byte LinkDisplacement	; offset to previous nt
=$c8c3					XtPtr1 ::= *
=51263					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8c3	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8c5	d5 26		cmp $26,x			cmp DStack+2,x
.c8c7	b5 25		lda $25,x			lda DStack+1,x
.c8c9	f5 27		sbc $27,x			sbc DStack+3,x
.c8cb	b0 b9		bcs $c886			bcs False1
.c8cd	90 98		bcc $c867			bcc True1
=12					CodeLen	.var *-XtPtr1
=$c8cf					Here1 = *	; remember here
>c8c1	0c					.byte CodeLen	;patch wh_CodeLength
>c8cf	3e				Name0:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=51280					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8d0	c1					.byte ((">"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8d1	10					.byte WordFlags	;wh_Flags
>c8d2	03					.byte 3	;wh_CodeLength
>c8d3	11					  .byte LinkDisplacement	; offset to previous nt
=$c8d4					XtPtr1 ::= *
=51280					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8d4	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8d6	d5 26		cmp $26,x			cmp DStack+2,x
.c8d8	b5 25		lda $25,x			lda DStack+1,x
.c8da	f5 27		sbc $27,x			sbc DStack+3,x
.c8dc	50 02		bvc $c8e0			bvc _c
.c8de	49 80		eor #$80			eor #$80	; fix sign
.c8e0	10 a4		bpl $c886	_c:		bpl False1
.c8e2	4c 67 c8	jmp $c867			jmp True1
=17					CodeLen	.var *-XtPtr1
=$c8e5					Here1 = *	; remember here
>c8d2	11					.byte CodeLen	;patch wh_CodeLength
>c8e5	3c 3d				Name0:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51303					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8e7	a2					.byte (("<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8e8	10					.byte WordFlags	;wh_Flags
>c8e9	03					.byte 3	;wh_CodeLength
>c8ea	17					  .byte LinkDisplacement	; offset to previous nt
=$c8eb					XtPtr1 ::= *
=51303					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8eb	20 d4 c8	jsr $c8d4	Le:		jsr Greater_Than
.c8ee	4c 1c c9	jmp $c91c			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8f1					Here1 = *	; remember here
>c8e9	06					.byte CodeLen	;patch wh_CodeLength
>c8f1	55 3e 3d			Name0:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51316					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8f4	a3					.byte (("U>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8f5	10					.byte WordFlags	;wh_Flags
>c8f6	03					.byte 3	;wh_CodeLength
>c8f7	0d					  .byte LinkDisplacement	; offset to previous nt
=$c8f8					XtPtr1 ::= *
=51316					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8f8	20 b1 c8	jsr $c8b1	UGe:		jsr U_Less_Than
.c8fb	4c 1c c9	jmp $c91c			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c8fe					Here1 = *	; remember here
>c8f6	06					.byte CodeLen	;patch wh_CodeLength
>c8fe	55 3c 3d			Name0:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51329					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c901	a3					.byte (("U<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c902	10					.byte WordFlags	;wh_Flags
>c903	03					.byte 3	;wh_CodeLength
>c904	0d					  .byte LinkDisplacement	; offset to previous nt
=$c905					XtPtr1 ::= *
=51329					WordListLink ::= Nt0 ; remember the nt of this word for later
.c905	20 c3 c8	jsr $c8c3	ULe:		jsr U_Greater_Than
.c908	4c 1c c9	jmp $c91c			jmp ZEqA
=6					CodeLen	.var *-XtPtr1
=$c90b					Here1 = *	; remember here
>c903	06					.byte CodeLen	;patch wh_CodeLength
.c90b	4c 53 b4	jmp $b453	Throw_Stack_11: jmp Throw_Stack
>c90e	30 3d				Name0:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51344					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c910	a2					.byte (("0="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c911	10					.byte WordFlags	;wh_Flags
>c912	03					.byte 3	;wh_CodeLength
>c913	0f					  .byte LinkDisplacement	; offset to previous nt
=$c914					XtPtr1 ::= *
=51344					WordListLink ::= Nt0 ; remember the nt of this word for later
.c914	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c916	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c918	d0 2b		bne $c945			bne False0
.c91a	f0 14		beq $c930			beq True0
=8					CodeLen	.var *-XtPtr1
=$c91c					Here1 = *	; remember here
>c912	08					.byte CodeLen	;patch wh_CodeLength
.c91c					ZEqA:
.c91c	49 ff		eor #$ff			eor #$ff
.c91e	95 24		sta $24,x			sta DStack+0,x
.c920	95 25		sta $25,x			sta DStack+1,x
.c922	60		rts				rts
>c923	30 3c 3e			Name0:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c926	c3					.byte (("0<>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c927	10					.byte WordFlags	;wh_Flags
>c928	03					.byte 3	;wh_CodeLength
>c929	16					  .byte LinkDisplacement	; offset to previous nt
=$c92a					XtPtr1 ::= *
=51366					WordListLink ::= Nt0 ; remember the nt of this word for later
.c92a	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c92c	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c92e	f0 15		beq $c945			beq False0
.c930	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c932	95 24		sta $24,x	Return0:	sta DStack+0,x
.c934	95 25		sta $25,x			sta DStack+1,x
.c936	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c938	b0 35		bcs $c96f		bcs Throw_Stack_05
.c93a	60		rts				rts
=17					CodeLen	.var *-XtPtr1
=$c93b					Here1 = *	; remember here
>c928	11					.byte CodeLen	;patch wh_CodeLength
>c93b	30 3e				Name0:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51389					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c93d	c2					.byte (("0>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c93e	10					.byte WordFlags	;wh_Flags
>c93f	03					.byte 3	;wh_CodeLength
>c940	17					  .byte LinkDisplacement	; offset to previous nt
=$c941					XtPtr1 ::= *
=51389					WordListLink ::= Nt0 ; remember the nt of this word for later
.c941	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c943	10 e7		bpl $c92c			bpl ZNe3	; >= 0 ?
.c945	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c947	f0 e9		beq $c932			beq Return0
=8					CodeLen	.var *-XtPtr1
=$c949					Here1 = *	; remember here
>c93f	08					.byte CodeLen	;patch wh_CodeLength
>c949	30 3c 3d			Name0:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51404					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c94c	a3					.byte (("0<="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c94d	10					.byte WordFlags	;wh_Flags
>c94e	03					.byte 3	;wh_CodeLength
>c94f	0f					  .byte LinkDisplacement	; offset to previous nt
=$c950					XtPtr1 ::= *
=51404					WordListLink ::= Nt0 ; remember the nt of this word for later
.c950	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c952	30 dc		bmi $c930			bmi True0
.c954	10 c0		bpl $c916			bpl ZEq3
=6					CodeLen	.var *-XtPtr1
=$c956					Here1 = *	; remember here
>c94e	06					.byte CodeLen	;patch wh_CodeLength
>c956	30 3e 3d			Name0:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51417					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c959	a3					.byte (("0>="[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c95a	10					.byte WordFlags	;wh_Flags
>c95b	03					.byte 3	;wh_CodeLength
>c95c	0d					  .byte LinkDisplacement	; offset to previous nt
=$c95d					XtPtr1 ::= *
=51417					WordListLink ::= Nt0 ; remember the nt of this word for later
.c95d	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c95f	10 cf		bpl $c930			bpl True0
.c961	30 e2		bmi $c945			bmi False0
=6					CodeLen	.var *-XtPtr1
=$c963					Here1 = *	; remember here
>c95b	06					.byte CodeLen	;patch wh_CodeLength
>c963	30 3c				Name0:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51429					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c965	82					.byte (("0<"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c966	10					.byte WordFlags	;wh_Flags
>c967	03					.byte 3	;wh_CodeLength
>c968	0c					  .byte LinkDisplacement	; offset to previous nt
=$c969					XtPtr1 ::= *
=51429					WordListLink ::= Nt0 ; remember the nt of this word for later
.c969	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c96b	10 d8		bpl $c945			bpl False0
.c96d	30 c1		bmi $c930			bmi True0
=6					CodeLen	.var *-XtPtr1
=$c96f					Here1 = *	; remember here
>c967	06					.byte CodeLen	;patch wh_CodeLength
.c96f	4c 53 b4	jmp $b453	Throw_Stack_05: jmp Throw_Stack
>c972	4d 69 6e			Name0:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c975	c3					.byte (("Min"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c976	50					.byte WordFlags	;wh_Flags
>c977	03					.byte 3	;wh_CodeLength
>c978	10					  .byte LinkDisplacement	; offset to previous nt
=$c979					XtPtr1 ::= *
=51445					WordListLink ::= Nt0 ; remember the nt of this word for later
.c979					Min:
.c979	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c97b	b0 f2		bcs $c96f		bcs Throw_Stack_05
.c97d	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c97f	d5 26		cmp $26,x			cmp DStack+2,x
.c981	b5 25		lda $25,x			lda DStack+1,x
.c983	f5 27		sbc $27,x			sbc DStack+3,x
.c985	70 1a		bvs $c9a1			bvs Max_3	; if overflow, the sign is backwards
.c987	30 27		bmi $c9b0	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c989	e8		inx				inx		; Drop n2
.c98a	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c98b					Here1 = *	; remember here
>c977	12					.byte CodeLen	;patch wh_CodeLength
.c98b	60		rts				rts
>c98c	4d 61 78			Name0:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c98f	03					.byte (("Max"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c990	10					.byte WordFlags	;wh_Flags
>c991	03					.byte 3	;wh_CodeLength
>c992	1a					  .byte LinkDisplacement	; offset to previous nt
=$c993					XtPtr1 ::= *
=51471					WordListLink ::= Nt0 ; remember the nt of this word for later
.c993					Max:
.c993	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c995	b0 d8		bcs $c96f		bcs Throw_Stack_05
.c997	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c999	d5 26		cmp $26,x			cmp DStack+2,x
.c99b	b5 25		lda $25,x			lda DStack+1,x
.c99d	f5 27		sbc $27,x			sbc DStack+3,x
.c99f	70 e6		bvs $c987			bvs Min_3	; if overflow, the sign is backwards
.c9a1	10 0d		bpl $c9b0	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c9a3	e8		inx				inx		; Drop n2
.c9a4	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$c9a5					Here1 = *	; remember here
>c991	12					.byte CodeLen	;patch wh_CodeLength
.c9a5	60		rts				rts
>c9a6	4e 69 70			Name0:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51497					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9a9	03					.byte (("Nip"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c9aa	40					.byte WordFlags	;wh_Flags
>c9ab	03					.byte 3	;wh_CodeLength
>c9ac	1a					  .byte LinkDisplacement	; offset to previous nt
=$c9ad					XtPtr1 ::= *
=51497					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ad					Nip:
.c9ad	20 44 b4	jsr $b444			jsr underflow_2
.c9b0	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c9b2	b4 25		ldy $25,x			ldy DStack+1,x
.c9b4	e8		inx				inx
.c9b5	e8		inx				inx
.c9b6	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c9b8	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$c9ba					Here1 = *	; remember here
>c9ab	0d					.byte CodeLen	;patch wh_CodeLength
.c9ba	60		rts				rts
>c9bb	50 69 63 6b			Name0:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51519					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9bf	64					.byte (("Pick"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c9c0	00					.byte WordFlags	;wh_Flags
>c9c1	03					.byte 3	;wh_CodeLength
>c9c2	16					  .byte LinkDisplacement	; offset to previous nt
=$c9c3					XtPtr1 ::= *
=51519					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9c3					Pick:
.c9c3	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9c5	8a		txa				txa
.c9c6	75 24		adc $24,x			adc DStack+0,x
.c9c8	a8		tay				tay
.c9c9	b9 26 00	lda $0026,y			lda DStack+2,y
.c9cc	95 24		sta $24,x			sta DStack+0,x
.c9ce	b9 27 00	lda $0027,y			lda DStack+3,y
.c9d1	95 25		sta $25,x			sta DStack+1,x
=16					CodeLen	.var *-XtPtr1
=$c9d3					Here1 = *	; remember here
>c9c1	10					.byte CodeLen	;patch wh_CodeLength
.c9d3	60		rts				rts
>c9d4	43 68 61 72			Name0:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51544					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9d8	44					.byte (("Char"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9d9	10					.byte WordFlags	;wh_Flags
>c9da	03					.byte 3	;wh_CodeLength
>c9db	19					  .byte LinkDisplacement	; offset to previous nt
=$c9dc					XtPtr1 ::= *
=51544					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9dc					Char:
.c9dc	20 b6 ba	jsr $bab6			jsr parse_name_check
.c9df	e8		inx				inx		; Drop number of characters, leave addr
.c9e0	e8		inx				inx
.c9e1	4c 6a cd	jmp $cd6a			jmp C_Fetch	; get character ( C@ )
=8					CodeLen	.var *-XtPtr1
=$c9e4					Here1 = *	; remember here
>c9da	08					.byte CodeLen	;patch wh_CodeLength
>c9e4	5b 43 68 61 72 5d		Name0:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9ea	a6					.byte (("[Char]"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9eb	1c					.byte WordFlags	;wh_Flags
>c9ec	03					.byte 3	;wh_CodeLength
>c9ed	12					  .byte LinkDisplacement	; offset to previous nt
=$c9ee					XtPtr1 ::= *
=51562					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ee	20 dc c9	jsr $c9dc	Bracket_Char:	jsr Char
.c9f1	4c 7b b7	jmp $b77b			jmp Literal
=6					CodeLen	.var *-XtPtr1
=$c9f4					Here1 = *	; remember here
>c9ec	06					.byte CodeLen	;patch wh_CodeLength
>c9f4	43 68 61 72 2b			Name0:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9f9	65					.byte (("Char+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9fa	10					.byte WordFlags	;wh_Flags
>c9fb	03					.byte 3	;wh_CodeLength
>c9fc	0f					  .byte LinkDisplacement	; offset to previous nt
=$c9fd					XtPtr1 ::= *
=51577					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9fd	4c 77 ca	jmp $ca77	Char_Plus:	jmp One_Plus
=3					CodeLen	.var *-XtPtr1
=$ca00					Here1 = *	; remember here
>c9fb	03					.byte CodeLen	;patch wh_CodeLength
>ca00	43 68 61 72 73			Name0:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51589					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca05	65					.byte (("Chars"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>ca06	20					.byte WordFlags	;wh_Flags
>ca07	03					.byte 3	;wh_CodeLength
>ca08	0c					  .byte LinkDisplacement	; offset to previous nt
=$ca09					XtPtr1 ::= *
=51589					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca09					Chars:
=0					CodeLen	.var *-XtPtr1
=$ca09					Here1 = *	; remember here
>ca07	00					.byte CodeLen	;patch wh_CodeLength
.ca09	60		rts				rts
>ca0a	43 65 6c 6c 73			Name0:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51599					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca0f	65					.byte (("Cells"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ca10	40					.byte WordFlags	;wh_Flags
>ca11	03					.byte 3	;wh_CodeLength
>ca12	0a					  .byte LinkDisplacement	; offset to previous nt
=$ca13					XtPtr1 ::= *
=51599					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca13	20 30 b4	jsr $b430	Cells:		jsr underflow_1
.ca16	16 24		asl $24,x			asl DStack+0,x		; 2*
.ca18	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$ca1a					Here1 = *	; remember here
>ca11	07					.byte CodeLen	;patch wh_CodeLength
.ca1a	60		rts				rts
>ca1b	43 65 6c 6c 2b			Name0:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=51616					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca20	65					.byte (("Cell+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ca21	40					.byte WordFlags	;wh_Flags
>ca22	03					.byte 3	;wh_CodeLength
>ca23	11					  .byte LinkDisplacement	; offset to previous nt
=$ca24					XtPtr1 ::= *
=51616					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca24	20 30 b4	jsr $b430	Cell_Plus:	jsr underflow_1
.ca27	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca29					Plus_A:
.ca29	18		clc				clc
.ca2a	75 24		adc $24,x			adc DStack+0,x
.ca2c	95 24		sta $24,x			sta DStack+0,x
.ca2e	90 02		bcc $ca32			bcc +
.ca30	f6 25		inc $25,x			inc DStack+1,x
.ca32					+
=14					CodeLen	.var *-XtPtr1
=$ca32					Here1 = *	; remember here
>ca22	0e					.byte CodeLen	;patch wh_CodeLength
.ca32	60		rts				rts
.ca33					Nos_Plus_A:
.ca33	18		clc				clc
.ca34	75 26		adc $26,x			adc DStack+2,x
.ca36	95 26		sta $26,x			sta DStack+2,x
.ca38	90 02		bcc $ca3c			bcc +
.ca3a	f6 27		inc $27,x			inc DStack+3,x
.ca3c	60		rts		+		rts
>ca3d	48 65 72 65			Name0:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca41	a4					.byte (("Here"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca42	10					.byte WordFlags	;wh_Flags
>ca43	03					.byte 3	;wh_CodeLength
>ca44	21					  .byte LinkDisplacement	; offset to previous nt
=$ca45					XtPtr1 ::= *
=51649					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca45	a5 00		lda $00		Here:		lda cp+0
.ca47	a4 01		ldy $01				ldy cp+1
.ca49	4c c6 b7	jmp $b7c6			jmp PushYA
=7					CodeLen	.var *-XtPtr1
=$ca4c					Here1 = *	; remember here
>ca43	07					.byte CodeLen	;patch wh_CodeLength
>ca4c	31 2d				Name0:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51662					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca4e	a2					.byte (("1-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca4f	40					.byte WordFlags	;wh_Flags
>ca50	03					.byte 3	;wh_CodeLength
>ca51	0d					  .byte LinkDisplacement	; offset to previous nt
=$ca52					XtPtr1 ::= *
=51662					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca52	20 30 b4	jsr $b430	One_Minus:	jsr underflow_1
.ca55					One_Minus_NoUf:
.ca55	b5 24		lda $24,x			lda DStack+0,x
.ca57	d0 02		bne $ca5b			bne +
.ca59	d6 25		dec $25,x			dec DStack+1,x
.ca5b	d6 24		dec $24,x	+		dec DStack+0,x
=11					CodeLen	.var *-XtPtr1
=$ca5d					Here1 = *	; remember here
>ca50	0b					.byte CodeLen	;patch wh_CodeLength
.ca5d	60		rts				rts
.ca5e					NOS_One_Minus:
.ca5e	b5 26		lda $26,x			lda DStack+2,x
.ca60	d0 02		bne $ca64			bne +
.ca62	d6 27		dec $27,x			dec DStack+3,x
.ca64	d6 26		dec $26,x	+		dec DStack+2,x
.ca66	60		rts				rts
.ca67					Minus_A:
.ca67	18		clc				clc
.ca68	75 24		adc $24,x			adc DStack+0,x
.ca6a	95 24		sta $24,x			sta DStack+0,x
.ca6c	b0 02		bcs $ca70			bcs +
.ca6e	d6 25		dec $25,x			dec DStack+1,x
.ca70	60		rts		+		rts
>ca71	31 2b				Name0:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51699					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca73	62					.byte (("1+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca74	40					.byte WordFlags	;wh_Flags
>ca75	03					.byte 3	;wh_CodeLength
>ca76	25					  .byte LinkDisplacement	; offset to previous nt
=$ca77					XtPtr1 ::= *
=51699					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca77	20 30 b4	jsr $b430	One_Plus:	jsr underflow_1
.ca7a	f6 24		inc $24,x			inc DStack+0,x
.ca7c	d0 02		bne $ca80			bne +
.ca7e	f6 25		inc $25,x			inc DStack+1,x
.ca80					+
=9					CodeLen	.var *-XtPtr1
=$ca80					Here1 = *	; remember here
>ca75	09					.byte CodeLen	;patch wh_CodeLength
.ca80	60		rts				rts
.ca81					NOS_One_Plus:
.ca81	f6 26		inc $26,x			inc DStack+2,x
.ca83	d0 02		bne $ca87			bne +
.ca85	f6 27		inc $27,x			inc DStack+3,x
.ca87	60		rts		+		rts
>ca88	55 4d 2b			Name0:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51723					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca8b	63					.byte (("UM+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca8c	00					.byte WordFlags	;wh_Flags
>ca8d	03					.byte 3	;wh_CodeLength
>ca8e	18					  .byte LinkDisplacement	; offset to previous nt
=$ca8f					XtPtr1 ::= *
=51723					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca8f	20 07 b4	jsr $b407	UMPlus:		jsr PopYA
.ca92	18		clc				clc		; add n to d1.lo
.ca93	75 26		adc $26,x			adc DStack+2,x
.ca95	95 26		sta $26,x			sta DStack+2,x
.ca97	98		tya				tya
.ca98	75 27		adc $27,x			adc DStack+3,x
.ca9a	95 27		sta $27,x			sta DStack+3,x
.ca9c	90 06		bcc $caa4			bcc +		; propagate carry thru d1.hi
.ca9e	f6 24		inc $24,x			inc DStack+0,x
.caa0	d0 02		bne $caa4			bne +
.caa2	f6 25		inc $25,x			inc DStack+1,x
.caa4					+
=21					CodeLen	.var *-XtPtr1
=$caa4					Here1 = *	; remember here
>ca8d	15					.byte CodeLen	;patch wh_CodeLength
.caa4	60		rts				rts
>caa5	4d 2b				Name0:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51751					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caa7	62					.byte (("M+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>caa8	10					.byte WordFlags	;wh_Flags
>caa9	03					.byte 3	;wh_CodeLength
>caaa	1c					  .byte LinkDisplacement	; offset to previous nt
=$caab					XtPtr1 ::= *
=51751					WordListLink ::= Nt0 ; remember the nt of this word for later
.caab	20 8f ca	jsr $ca8f	MPlus:		jsr UMPlus
.caae	98		tya				tya		; if n negative
.caaf	30 a4		bmi $ca55			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CodeLen	.var *-XtPtr1
=$cab1					Here1 = *	; remember here
>caa9	06					.byte CodeLen	;patch wh_CodeLength
.cab1	60		rts				rts
>cab2	44 32 2a			Name0:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51765					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cab5	43					.byte (("D2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cab6	40					.byte WordFlags	;wh_Flags
>cab7	03					.byte 3	;wh_CodeLength
>cab8	0e					  .byte LinkDisplacement	; offset to previous nt
=$cab9					XtPtr1 ::= *
=51765					WordListLink ::= Nt0 ; remember the nt of this word for later
.cab9	20 44 b4	jsr $b444	D2Star:		jsr underflow_2
.cabc	16 26		asl $26,x			asl DStack+2,x
.cabe	36 27		rol $27,x			rol DStack+3,x
.cac0	36 24		rol $24,x			rol DStack+0,x
.cac2	36 25		rol $25,x			rol DStack+1,x
=11					CodeLen	.var *-XtPtr1
=$cac4					Here1 = *	; remember here
>cab7	0b					.byte CodeLen	;patch wh_CodeLength
.cac4	60		rts				rts
>cac5	44 32 2f			Name0:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cac8	e3					.byte (("D2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cac9	40					.byte WordFlags	;wh_Flags
>caca	03					.byte 3	;wh_CodeLength
>cacb	13					  .byte LinkDisplacement	; offset to previous nt
=$cacc					XtPtr1 ::= *
=51784					WordListLink ::= Nt0 ; remember the nt of this word for later
.cacc	20 44 b4	jsr $b444	D2Slash:	jsr underflow_2
.cacf	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cad1	0a		asl a				asl a
.cad2	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cad4	76 24		ror $24,x			ror DStack+0,x
.cad6	76 27		ror $27,x			ror DStack+3,x
.cad8	76 26		ror $26,x			ror DStack+2,x
=14					CodeLen	.var *-XtPtr1
=$cada					Here1 = *	; remember here
>caca	0e					.byte CodeLen	;patch wh_CodeLength
.cada	60		rts				rts
>cadb	55 44 32 2f			Name0:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=51807					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cadf	e4					.byte (("UD2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cae0	50					.byte WordFlags	;wh_Flags
>cae1	03					.byte 3	;wh_CodeLength
>cae2	17					  .byte LinkDisplacement	; offset to previous nt
=$cae3					XtPtr1 ::= *
=51807					WordListLink ::= Nt0 ; remember the nt of this word for later
.cae3	20 44 b4	jsr $b444	DU2Slash:	jsr underflow_2
.cae6	18		clc				clc
.cae7	90 e9		bcc $cad2			bcc D2SlashU
=6					CodeLen	.var *-XtPtr1
=$cae9					Here1 = *	; remember here
>cae1	06					.byte CodeLen	;patch wh_CodeLength
>cae9	32 2a				Name0:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51819					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caeb	42					.byte (("2*"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>caec	40					.byte WordFlags	;wh_Flags
>caed	03					.byte 3	;wh_CodeLength
>caee	0c					  .byte LinkDisplacement	; offset to previous nt
=$caef					XtPtr1 ::= *
=51819					WordListLink ::= Nt0 ; remember the nt of this word for later
.caef					Two_Star:
.caef	20 30 b4	jsr $b430			jsr underflow_1
.caf2	16 24		asl $24,x			asl DStack+0,x
.caf4	36 25		rol $25,x			rol DStack+1,x
=7					CodeLen	.var *-XtPtr1
=$caf6					Here1 = *	; remember here
>caed	07					.byte CodeLen	;patch wh_CodeLength
.caf6	60		rts				rts
>caf7	32 2f				Name0:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caf9	e2					.byte (("2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>cafa	40					.byte WordFlags	;wh_Flags
>cafb	03					.byte 3	;wh_CodeLength
>cafc	0e					  .byte LinkDisplacement	; offset to previous nt
=$cafd					XtPtr1 ::= *
=51833					WordListLink ::= Nt0 ; remember the nt of this word for later
.cafd					Two_Slash:
.cafd	20 30 b4	jsr $b430			jsr underflow_1
.cb00	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.cb02	0a		asl a				asl
.cb03	76 25		ror $25,x			ror DStack+1,x
.cb05	76 24		ror $24,x			ror DStack+0,x
=10					CodeLen	.var *-XtPtr1
=$cb07					Here1 = *	; remember here
>cafb	0a					.byte CodeLen	;patch wh_CodeLength
.cb07	60		rts				rts
>cb08	55 32 2f			Name0:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51851					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb0b	e3					.byte (("U2/"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cb0c	40					.byte WordFlags	;wh_Flags
>cb0d	03					.byte 3	;wh_CodeLength
>cb0e	12					  .byte LinkDisplacement	; offset to previous nt
=$cb0f					XtPtr1 ::= *
=51851					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb0f					UTwo_Slash:
.cb0f	20 30 b4	jsr $b430			jsr underflow_1
.cb12	56 25		lsr $25,x			lsr DStack+1,x
.cb14	76 24		ror $24,x			ror DStack+0,x
=7					CodeLen	.var *-XtPtr1
=$cb16					Here1 = *	; remember here
>cb0d	07					.byte CodeLen	;patch wh_CodeLength
.cb16	60		rts				rts
>cb17	44 52 53 68 69 66 74		Name0:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=51870					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb1e	87					.byte (("DRShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cb1f	00					.byte WordFlags	;wh_Flags
>cb20	03					.byte 3	;wh_CodeLength
>cb21	13					  .byte LinkDisplacement	; offset to previous nt
=$cb22					XtPtr1 ::= *
=51870					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb22	20 ec b3	jsr $b3ec	DRShift:	jsr PopA	; pop u
.cb25	a8		tay		DRShiftA:	tay
.cb26	f0 0e		beq $cb36			beq _9
.cb28	b5 25		lda $25,x			lda DStack+1,x
.cb2a	4a		lsr a		_2:		lsr a
.cb2b	76 24		ror $24,x			ror DStack+0,x
.cb2d	76 27		ror $27,x			ror DStack+3,x
.cb2f	76 26		ror $26,x			ror DStack+2,x
.cb31	88		dey				dey
.cb32	d0 f6		bne $cb2a			bne _2
.cb34	95 25		sta $25,x			sta DStack+1,x
.cb36					_9:
=20					CodeLen	.var *-XtPtr1
=$cb36					Here1 = *	; remember here
>cb20	14					.byte CodeLen	;patch wh_CodeLength
.cb36	60		rts				rts
>cb37	52 53 68 69 66 74		Name0:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb3d	86					.byte (("RShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb3e	00					.byte WordFlags	;wh_Flags
>cb3f	03					.byte 3	;wh_CodeLength
>cb40	1f					  .byte LinkDisplacement	; offset to previous nt
=$cb41					XtPtr1 ::= *
=51901					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb41	20 f5 b3	jsr $b3f5	RShift:		jsr PopA2	; pop u, check for 2 params
.cb44	a8		tay		RShift_A:	tay		; get shift count
.cb45	f0 0a		beq $cb51			beq _done
.cb47	b5 25		lda $25,x			lda DStack+1,x
.cb49	4a		lsr a		_loop:		lsr a
.cb4a	76 24		ror $24,x			ror DStack+0,x
.cb4c	88		dey				dey
.cb4d	d0 fa		bne $cb49			bne _loop
.cb4f	95 25		sta $25,x			sta DStack+1,x
.cb51					_done:
=16					CodeLen	.var *-XtPtr1
=$cb51					Here1 = *	; remember here
>cb3f	10					.byte CodeLen	;patch wh_CodeLength
.cb51	60		rts				rts
>cb52	4c 53 68 69 66 74		Name0:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=51928					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb58	86					.byte (("LShift"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb59	00					.byte WordFlags	;wh_Flags
>cb5a	03					.byte 3	;wh_CodeLength
>cb5b	1b					  .byte LinkDisplacement	; offset to previous nt
=$cb5c					XtPtr1 ::= *
=51928					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb5c	20 f5 b3	jsr $b3f5	LShift:		jsr PopA2	; pop u, check for 2 params
.cb5f	a8		tay		LShift_A:	tay		; get shift count
.cb60	f0 0a		beq $cb6c			beq _done
.cb62	b5 25		lda $25,x			lda DStack+1,x
.cb64	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb66	2a		rol a				rol a
.cb67	88		dey				dey
.cb68	d0 fa		bne $cb64			bne _loop
.cb6a	95 25		sta $25,x			sta DStack+1,x
.cb6c					_done:
=16					CodeLen	.var *-XtPtr1
=$cb6c					Here1 = *	; remember here
>cb5a	10					.byte CodeLen	;patch wh_CodeLength
.cb6c	60		rts				rts
>cb6d	41 6e 64			Name0:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=51952					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb70	83					.byte (("And"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb71	40					.byte WordFlags	;wh_Flags
>cb72	03					.byte 3	;wh_CodeLength
>cb73	18					  .byte LinkDisplacement	; offset to previous nt
=$cb74					XtPtr1 ::= *
=51952					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb74					And2:
.cb74	20 44 b4	jsr $b444			jsr underflow_2
.cb77	b5 24		lda $24,x			lda DStack+0,x
.cb79	35 26		and $26,x			and DStack+2,x
.cb7b	95 26		sta $26,x			sta DStack+2,x
.cb7d	b5 25		lda $25,x			lda DStack+1,x
.cb7f	35 27		and $27,x			and DStack+3,x
.cb81	95 27		sta $27,x			sta DStack+3,x
.cb83	e8		inx				inx		; Drop n2
.cb84	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb85					Here1 = *	; remember here
>cb72	11					.byte CodeLen	;patch wh_CodeLength
.cb85	60		rts				rts
>cb86	4f 72				Name0:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=51976					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb88	42					.byte (("Or"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb89	40					.byte WordFlags	;wh_Flags
>cb8a	03					.byte 3	;wh_CodeLength
>cb8b	18					  .byte LinkDisplacement	; offset to previous nt
=$cb8c					XtPtr1 ::= *
=51976					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb8c					Or:
.cb8c	20 44 b4	jsr $b444			jsr underflow_2
.cb8f	b5 24		lda $24,x			lda DStack+0,x
.cb91	15 26		ora $26,x			ora DStack+2,x
.cb93	95 26		sta $26,x			sta DStack+2,x
.cb95	b5 25		lda $25,x			lda DStack+1,x
.cb97	15 27		ora $27,x			ora DStack+3,x
.cb99	95 27		sta $27,x			sta DStack+3,x
.cb9b	e8		inx				inx		; Drop n2
.cb9c	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cb9d					Here1 = *	; remember here
>cb8a	11					.byte CodeLen	;patch wh_CodeLength
.cb9d	60		rts				rts
>cb9e	58 6f 72			Name0:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52001					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cba1	43					.byte (("Xor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cba2	40					.byte WordFlags	;wh_Flags
>cba3	03					.byte 3	;wh_CodeLength
>cba4	19					  .byte LinkDisplacement	; offset to previous nt
=$cba5					XtPtr1 ::= *
=52001					WordListLink ::= Nt0 ; remember the nt of this word for later
.cba5					Xor:
.cba5	20 44 b4	jsr $b444			jsr underflow_2
.cba8	b5 24		lda $24,x			lda DStack+0,x
.cbaa	55 26		eor $26,x			eor DStack+2,x
.cbac	95 26		sta $26,x			sta DStack+2,x
.cbae	b5 25		lda $25,x			lda DStack+1,x
.cbb0	55 27		eor $27,x			eor DStack+3,x
.cbb2	95 27		sta $27,x			sta DStack+3,x
.cbb4	e8		inx				inx		; Drop n2
.cbb5	e8		inx				inx
=17					CodeLen	.var *-XtPtr1
=$cbb6					Here1 = *	; remember here
>cba3	11					.byte CodeLen	;patch wh_CodeLength
.cbb6	60		rts				rts
>cbb7	2b				Name0:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbb8	61					.byte (("+"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cbb9	40					.byte WordFlags	;wh_Flags
>cbba	03					.byte 3	;wh_CodeLength
>cbbb	17					  .byte LinkDisplacement	; offset to previous nt
=$cbbc					XtPtr1 ::= *
=52024					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbbc					Plus:
.cbbc	20 44 b4	jsr $b444			jsr underflow_2
.cbbf	18		clc				clc
.cbc0	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cbc2	75 26		adc $26,x			adc DStack+2,x
.cbc4	95 26		sta $26,x			sta DStack+2,x
.cbc6	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cbc8	75 27		adc $27,x			adc DStack+3,x
.cbca	95 27		sta $27,x			sta DStack+3,x
.cbcc	e8		inx				inx
.cbcd	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbce					Here1 = *	; remember here
>cbba	12					.byte CodeLen	;patch wh_CodeLength
.cbce	60		rts				rts
>cbcf	2d				Name0:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbd0	a1					.byte (("-"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbd1	40					.byte WordFlags	;wh_Flags
>cbd2	03					.byte 3	;wh_CodeLength
>cbd3	18					  .byte LinkDisplacement	; offset to previous nt
=$cbd4					XtPtr1 ::= *
=52048					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbd4					Minus:
.cbd4	20 44 b4	jsr $b444			jsr underflow_2
.cbd7	38		sec				sec
.cbd8	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbda	f5 24		sbc $24,x			sbc DStack+0,x
.cbdc	95 26		sta $26,x			sta DStack+2,x
.cbde	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbe0	f5 25		sbc $25,x			sbc DStack+1,x
.cbe2	95 27		sta $27,x			sta DStack+3,x
.cbe4	e8		inx				inx		; Drop n2
.cbe5	e8		inx				inx
=18					CodeLen	.var *-XtPtr1
=$cbe6					Here1 = *	; remember here
>cbd2	12					.byte CodeLen	;patch wh_CodeLength
.cbe6	60		rts				rts
>cbe7	2e				Name0:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52072					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbe8	c1					.byte (("."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbe9	10					.byte WordFlags	;wh_Flags
>cbea	03					.byte 3	;wh_CodeLength
>cbeb	18					  .byte LinkDisplacement	; offset to previous nt
=$cbec					XtPtr1 ::= *
=52072					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbec	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbee	08		php				php
.cbef	20 df c6	jsr $c6df			jsr Abs			; ( u )
.cbf2	20 03 b8	jsr $b803			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbf5	4c 04 cc	jmp $cc04			jmp fmt_d3
=12					CodeLen	.var *-XtPtr1
=$cbf8					Here1 = *	; remember here
>cbea	0c					.byte CodeLen	;patch wh_CodeLength
>cbf8	44 2e				Name0:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbfa	c2					.byte (("D."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbfb	10					.byte WordFlags	;wh_Flags
>cbfc	03					.byte 3	;wh_CodeLength
>cbfd	12					  .byte LinkDisplacement	; offset to previous nt
=$cbfe					XtPtr1 ::= *
=52090					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbfe	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cc00	08		php				php
.cc01	20 12 c7	jsr $c712			jsr DAbs
.cc04	20 f5 ab	jsr $abf5	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cc07	20 64 ac	jsr $ac64			jsr Number_sign_s	; ( ud )	do all digits
.cc0a	28		plp				plp			; ( ud )	do sign
.cc0b	20 7e ac	jsr $ac7e			jsr Sign_P		; ( ud )
.cc0e	20 01 ac	jsr $ac01			jsr Number_sign_greater	; ( addr u )	end formatting
.cc11	20 f5 cd	jsr $cdf5			jsr Type
.cc14	4c e9 cd	jmp $cde9			jmp Space
=25					CodeLen	.var *-XtPtr1
=$cc17					Here1 = *	; remember here
>cbfc	19					.byte CodeLen	;patch wh_CodeLength
>cc17	55 2e				Name0:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc19	c2					.byte (("U."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc1a	50					.byte WordFlags	;wh_Flags
>cc1b	03					.byte 3	;wh_CodeLength
>cc1c	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc1d					XtPtr1 ::= *
=52121					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc1d	20 30 b4	jsr $b430	U_Dot:		jsr underflow_1
.cc20	20 36 cc	jsr $cc36			jsr print_u
.cc23	4c e9 cd	jmp $cde9			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc26					Here1 = *	; remember here
>cc1b	09					.byte CodeLen	;patch wh_CodeLength
>cc26	55 44 2e			Name0:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52137					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc29	c3					.byte (("UD."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc2a	50					.byte WordFlags	;wh_Flags
>cc2b	03					.byte 3	;wh_CodeLength
>cc2c	10					  .byte LinkDisplacement	; offset to previous nt
=$cc2d					XtPtr1 ::= *
=52137					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc2d	20 44 b4	jsr $b444	UD_Dot:		jsr underflow_2 ; double number
.cc30	20 39 cc	jsr $cc39			jsr print_ud
.cc33	4c e9 cd	jmp $cde9			jmp Space
=9					CodeLen	.var *-XtPtr1
=$cc36					Here1 = *	; remember here
>cc2b	09					.byte CodeLen	;patch wh_CodeLength
.cc36					print_u:
.cc36	20 03 b8	jsr $b803			jsr Zero			; convert to ud
.cc39					print_ud:
.cc39	20 f5 ab	jsr $abf5			jsr Less_Number_Sign		; <#	start formatting
.cc3c	20 64 ac	jsr $ac64			jsr Number_sign_s		; #S	do all digits
.cc3f	20 01 ac	jsr $ac01			jsr Number_sign_greater		; #>	end formatting
.cc42	4c f5 cd	jmp $cdf5			jmp Type
>cc45	55 2e 52			Name0:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52168					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc48	43					.byte (("U.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc49	10					.byte WordFlags	;wh_Flags
>cc4a	03					.byte 3	;wh_CodeLength
>cc4b	1f					  .byte LinkDisplacement	; offset to previous nt
=$cc4c					XtPtr1 ::= *
=52168					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc4c	20 ec b3	jsr $b3ec	U_Dot_R:	jsr PopA		; save field width
.cc4f	48		pha		U_Dot_R_A:	pha
.cc50	20 03 b8	jsr $b803			jsr Zero		; u>d  cvt u to ud
.cc53	4c 62 cc	jmp $cc62			jmp fmt_udr3
=10					CodeLen	.var *-XtPtr1
=$cc56					Here1 = *	; remember here
>cc4a	0a					.byte CodeLen	;patch wh_CodeLength
>cc56	55 44 2e 52			Name0:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc5a	44					.byte (("UD.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc5b	10					.byte WordFlags	;wh_Flags
>cc5c	03					.byte 3	;wh_CodeLength
>cc5d	12					  .byte LinkDisplacement	; offset to previous nt
=$cc5e					XtPtr1 ::= *
=52186					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc5e	20 ec b3	jsr $b3ec	UD_Dot_R:	jsr PopA			; save field width
.cc61	48		pha		UD_Dot_R_A:	pha
.cc62	20 f5 ab	jsr $abf5	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc65	20 64 ac	jsr $ac64			jsr Number_sign_s		; do all digits
.cc68	20 01 ac	jsr $ac01	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc6b	68		pla				pla				; recover field width
.cc6c	38		sec				sec				; do leading spaces
.cc6d	f5 24		sbc $24,x			sbc DStack+0,x
.cc6f	90 06		bcc $cc77			bcc +
.cc71	20 f5 b7	jsr $b7f5			jsr PushZA
.cc74	20 b0 c4	jsr $c4b0			jsr Spaces
.cc77	4c f5 cd	jmp $cdf5	+		jmp Type			; type formatted
=28					CodeLen	.var *-XtPtr1
=$cc7a					Here1 = *	; remember here
>cc5c	1c					.byte CodeLen	;patch wh_CodeLength
>cc7a	2e 52				Name0:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc7c	42					.byte ((".R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc7d	10					.byte WordFlags	;wh_Flags
>cc7e	03					.byte 3	;wh_CodeLength
>cc7f	22					  .byte LinkDisplacement	; offset to previous nt
=$cc80					XtPtr1 ::= *
=52220					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc80	20 ec b3	jsr $b3ec	Dot_R:		jsr PopA		; save field width
.cc83	48		pha		Dot_R_A:	pha
.cc84	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc86	08		php				php
.cc87	20 df c6	jsr $c6df			jsr Abs
.cc8a	20 03 b8	jsr $b803			jsr Zero		; u>d  cvt u to ud
.cc8d	4c a1 cc	jmp $cca1			jmp fmt_dr3
=16					CodeLen	.var *-XtPtr1
=$cc90					Here1 = *	; remember here
>cc7e	10					.byte CodeLen	;patch wh_CodeLength
>cc90	44 2e 52			Name0:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc93	43					.byte (("D.R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc94	10					.byte WordFlags	;wh_Flags
>cc95	03					.byte 3	;wh_CodeLength
>cc96	17					  .byte LinkDisplacement	; offset to previous nt
=$cc97					XtPtr1 ::= *
=52243					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc97	20 ec b3	jsr $b3ec	D_Dot_R:	jsr PopA		; save field width
.cc9a	48		pha		D_Dot_R_A:	pha
.cc9b	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc9d	08		php				php
.cc9e	20 12 c7	jsr $c712			jsr DAbs
.cca1	20 f5 ab	jsr $abf5	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cca4	20 64 ac	jsr $ac64			jsr Number_sign_s	; do all digits
.cca7	28		plp				plp			; do the sign
.cca8	20 7e ac	jsr $ac7e			jsr Sign_P
.ccab	4c 68 cc	jmp $cc68			jmp fmt_r
=23					CodeLen	.var *-XtPtr1
=$ccae					Here1 = *	; remember here
>cc95	17					.byte CodeLen	;patch wh_CodeLength
>ccae	3f				Name0:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52271					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccaf	e1					.byte (("?"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ccb0	10					.byte WordFlags	;wh_Flags
>ccb1	03					.byte 3	;wh_CodeLength
>ccb2	1c					  .byte LinkDisplacement	; offset to previous nt
=$ccb3					XtPtr1 ::= *
=52271					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccb3					Question:
.ccb3	20 b5 ce	jsr $ceb5			jsr Fetch
.ccb6	4c ec cb	jmp $cbec			jmp Dot
=6					CodeLen	.var *-XtPtr1
=$ccb9					Here1 = *	; remember here
>ccb1	06					.byte CodeLen	;patch wh_CodeLength
>ccb9	32 44 75 70			Name0:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52285					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccbd	04					.byte (("2Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ccbe	40					.byte WordFlags	;wh_Flags
>ccbf	03					.byte 3	;wh_CodeLength
>ccc0	0e					  .byte LinkDisplacement	; offset to previous nt
=$ccc1					XtPtr1 ::= *
=52285					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccc1					Two_Dup:
.ccc1	20 44 b4	jsr $b444			jsr underflow_2
.ccc4	ca		dex				dex
.ccc5	ca		dex				dex
.ccc6	ca		dex				dex
.ccc7	ca		dex				dex
.ccc8	b5 28		lda $28,x			lda DStack+4,x	; TOS
.ccca	95 24		sta $24,x			sta DStack+0,x
.cccc	b5 29		lda $29,x			lda DStack+5,x
.ccce	95 25		sta $25,x			sta DStack+1,x
.ccd0	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.ccd2	95 26		sta $26,x			sta DStack+2,x
.ccd4	b5 2b		lda $2b,x			lda DStack+7,x
.ccd6	95 27		sta $27,x			sta DStack+3,x
=23					CodeLen	.var *-XtPtr1
=$ccd8					Here1 = *	; remember here
>ccbf	17					.byte CodeLen	;patch wh_CodeLength
.ccd8	60		rts				rts
>ccd9	54 75 63 6b			Name0:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52317					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccdd	64					.byte (("Tuck"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccde	40					.byte WordFlags	;wh_Flags
>ccdf	03					.byte 3	;wh_CodeLength
>cce0	20					  .byte LinkDisplacement	; offset to previous nt
=$cce1					XtPtr1 ::= *
=52317					WordListLink ::= Nt0 ; remember the nt of this word for later
.cce1					Tuck:
.cce1	20 44 b4	jsr $b444			jsr underflow_2
.cce4	ca		dex				dex
.cce5	ca		dex				dex
.cce6	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cce8	b5 26		lda $26,x			lda DStack+2,x
.ccea	95 28		sta $28,x			sta DStack+4,x
.ccec	94 26		sty $26,x			sty DStack+2,x
.ccee	95 24		sta $24,x			sta DStack+0,x
.ccf0	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.ccf2	b5 27		lda $27,x			lda DStack+3,x
.ccf4	95 29		sta $29,x			sta DStack+5,x
.ccf6	94 27		sty $27,x			sty DStack+3,x
.ccf8	95 25		sta $25,x			sta DStack+1,x
=25					CodeLen	.var *-XtPtr1
=$ccfa					Here1 = *	; remember here
>ccdf	19					.byte CodeLen	;patch wh_CodeLength
.ccfa	60		rts				rts
>ccfb	43 2c				Name0:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52349					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccfd	82					.byte (("C,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccfe	10					.byte WordFlags	;wh_Flags
>ccff	03					.byte 3	;wh_CodeLength
>cd00	20					  .byte LinkDisplacement	; offset to previous nt
=$cd01					XtPtr1 ::= *
=52349					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd01	20 ec b3	jsr $b3ec	C_Comma:	jsr PopA	; pop c, with underflow check
.cd04					C_Comma_A:
.cd04	94 23		sty $23,x			sty DStack-1,x	; save Y
.cd06	a0 00		ldy #$00			ldy #0		; store A
.cd08	91 00		sta ($00),y			sta (cp),y
.cd0a	e6 00		inc $00				inc cp+0	; increment cp
.cd0c	d0 02		bne $cd10			bne +
.cd0e	e6 01		inc $01				inc cp+1
.cd10					+
.cd10	b4 23		ldy $23,x			ldy DStack-1,x	; restore Y
=17					CodeLen	.var *-XtPtr1
=$cd12					Here1 = *	; remember here
>ccff	11					.byte CodeLen	;patch wh_CodeLength
.cd12	60		rts				rts
>cd13	2c				Name0:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52372					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd14	81					.byte ((","[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cd15	10					.byte WordFlags	;wh_Flags
>cd16	03					.byte 3	;wh_CodeLength
>cd17	17					  .byte LinkDisplacement	; offset to previous nt
=$cd18					XtPtr1 ::= *
=52372					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd18	20 07 b4	jsr $b407	Comma:		jsr PopYA	; pop n, with underflow check
.cd1b					Comma_YA:
.cd1b	20 04 cd	jsr $cd04			jsr C_Comma_A	; compile LSB
.cd1e	98		tya				tya		; compile MSB
.cd1f	4c 04 cd	jmp $cd04			jmp C_Comma_A
=10					CodeLen	.var *-XtPtr1
=$cd22					Here1 = *	; remember here
>cd16	0a					.byte CodeLen	;patch wh_CodeLength
>cd22	32 2c				Name0:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52388					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd24	82					.byte (("2,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd25	10					.byte WordFlags	;wh_Flags
>cd26	03					.byte 3	;wh_CodeLength
>cd27	10					  .byte LinkDisplacement	; offset to previous nt
=$cd28					XtPtr1 ::= *
=52388					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd28	20 18 cd	jsr $cd18	Two_Comma:	jsr Comma
.cd2b	4c 18 cd	jmp $cd18			jmp Comma
=6					CodeLen	.var *-XtPtr1
=$cd2e					Here1 = *	; remember here
>cd26	06					.byte CodeLen	;patch wh_CodeLength
.cd2e	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd30	a8		tay				tay
.cd31	d0 e8		bne $cd1b			bne Comma_YA
>cd33	4a 73 72 2c			Name0:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52407					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd37	84					.byte (("Jsr,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd38	10					.byte WordFlags	;wh_Flags
>cd39	03					.byte 3	;wh_CodeLength
>cd3a	13					  .byte LinkDisplacement	; offset to previous nt
=$cd3b					XtPtr1 ::= *
=52407					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd3b	20 07 b4	jsr $b407	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd3e	20 c6 b7	jsr $b7c6	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd41	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd43	20 04 cd	jsr $cd04	Jsr_Comma_3:	jsr C_Comma_A
.cd46	4c 18 cd	jmp $cd18			jmp Comma	; compile addr
=14					CodeLen	.var *-XtPtr1
=$cd49					Here1 = *	; remember here
>cd39	0e					.byte CodeLen	;patch wh_CodeLength
>cd49	4a 6d 70 2c			Name0:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52429					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd4d	84					.byte (("Jmp,"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd4e	10					.byte WordFlags	;wh_Flags
>cd4f	03					.byte 3	;wh_CodeLength
>cd50	16					  .byte LinkDisplacement	; offset to previous nt
=$cd51					XtPtr1 ::= *
=52429					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd51	20 07 b4	jsr $b407	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd54	20 c6 b7	jsr $b7c6	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd57	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd59	d0 e8		bne $cd43			bne Jsr_Comma_3
.cd5b					Jmp_Comma_NT_YA:
.cd5b	20 c6 b7	jsr $b7c6			jsr PushYA
.cd5e	20 ba bd	jsr $bdba			jsr Name_To_Int	; convert nt to xt
.cd61	4c 51 cd	jmp $cd51			jmp Jmp_Comma
=19					CodeLen	.var *-XtPtr1
=$cd64					Here1 = *	; remember here
>cd4f	13					.byte CodeLen	;patch wh_CodeLength
>cd64	43 40				Name0:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52454					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd66	02					.byte (("C@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd67	40					.byte WordFlags	;wh_Flags
>cd68	03					.byte 3	;wh_CodeLength
>cd69	19					  .byte LinkDisplacement	; offset to previous nt
=$cd6a					XtPtr1 ::= *
=52454					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd6a	20 30 b4	jsr $b430	C_Fetch:	jsr underflow_1
.cd6d	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd6f	95 24		sta $24,x			sta DStack+0,x
.cd71	a9 00		lda #$00			lda #0
.cd73	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CodeLen	.var *-XtPtr1
=$cd75					Here1 = *	; remember here
>cd68	0b					.byte CodeLen	;patch wh_CodeLength
.cd75	60		rts				rts
>cd76	43 21				Name0:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52472					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd78	22					.byte (("C!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd79	40					.byte WordFlags	;wh_Flags
>cd7a	03					.byte 3	;wh_CodeLength
>cd7b	12					  .byte LinkDisplacement	; offset to previous nt
=$cd7c					XtPtr1 ::= *
=52472					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd7c	20 44 b4	jsr $b444	C_Store:	jsr underflow_2
.cd7f	b5 26		lda $26,x			lda DStack+2,x
.cd81	81 24		sta ($24,x)			sta (DStack+0,x)
.cd83	e8		inx				inx
.cd84	e8		inx				inx
.cd85	e8		inx				inx
.cd86	e8		inx				inx
=11					CodeLen	.var *-XtPtr1
=$cd87					Here1 = *	; remember here
>cd7a	0b					.byte CodeLen	;patch wh_CodeLength
.cd87	60		rts				rts
>cd88	31 2b 21			Name0:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52491					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd8b	23					.byte (("1+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd8c	00					.byte WordFlags	;wh_Flags
>cd8d	03					.byte 3	;wh_CodeLength
>cd8e	13					  .byte LinkDisplacement	; offset to previous nt
=$cd8f					XtPtr1 ::= *
=52491					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd8f					OnePlusStore:
.cd8f	a9 01		lda #$01			lda #1
.cd91	18		clc				clc
.cd92	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd94	81 24		sta ($24,x)			sta (DStack+0,x)
.cd96	90 0c		bcc $cda4			bcc _7			; if carry
.cd98	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd9a	d0 02		bne $cd9e			bne +
.cd9c	f6 25		inc $25,x			inc DStack+1,x
.cd9e					+
.cd9e	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cda0	69 00		adc #$00			adc #0
.cda2	81 24		sta ($24,x)			sta (Dstack+0,x)
.cda4					_7:
.cda4	e8		inx				inx			; Drop addr
.cda5	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$cda6					Here1 = *	; remember here
>cd8d	17					.byte CodeLen	;patch wh_CodeLength
.cda6	60		rts				rts
>cda7	2b 21				Name0:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52521					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cda9	22					.byte (("+!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cdaa	50					.byte WordFlags	;wh_Flags
>cdab	03					.byte 3	;wh_CodeLength
>cdac	1e					  .byte LinkDisplacement	; offset to previous nt
=$cdad					XtPtr1 ::= *
=52521					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdad					Plus_store:
.cdad	20 44 b4	jsr $b444			jsr underflow_2
.cdb0	18		clc				clc
.cdb1	b5 26		lda $26,x			lda DStack+2,x
.cdb3	61 24		adc ($24,x)			adc (DStack+0,x)
.cdb5	81 24		sta ($24,x)			sta (DStack+0,x)
.cdb7	f6 24		inc $24,x			inc DStack+0,x
.cdb9	d0 02		bne $cdbd			bne +
.cdbb	f6 25		inc $25,x			inc DStack+1,x
.cdbd					+
.cdbd	b5 27		lda $27,x			lda DStack+3,x
.cdbf	61 24		adc ($24,x)			adc (DStack+0,x)
.cdc1	81 24		sta ($24,x)			sta (DStack+0,x)
.cdc3	4c 53 c5	jmp $c553			jmp Two_Drop
=25					CodeLen	.var *-XtPtr1
=$cdc6					Here1 = *	; remember here
>cdab	19					.byte CodeLen	;patch wh_CodeLength
>cdc6	42 65 6c 6c			Name0:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52554					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdca	84					.byte (("Bell"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cdcb	10					.byte WordFlags	;wh_Flags
>cdcc	03					.byte 3	;wh_CodeLength
>cdcd	21					  .byte LinkDisplacement	; offset to previous nt
=$cdce					XtPtr1 ::= *
=52554					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdce	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdd0	d0 0b		bne $cddd			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cdd2					Here1 = *	; remember here
>cdcc	04					.byte CodeLen	;patch wh_CodeLength
>cdd2	45 6d 69 74			Name0:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdd6	84					.byte (("Emit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdd7	10					.byte WordFlags	;wh_Flags
>cdd8	03					.byte 3	;wh_CodeLength
>cdd9	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdda					XtPtr1 ::= *
=52566					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdda	20 ec b3	jsr $b3ec	Emit:		jsr PopA		; pop char, with underflow check
.cddd					Emit_A:
.cddd	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CodeLen	.var *-XtPtr1
=$cde0					Here1 = *	; remember here
>cdd8	06					.byte CodeLen	;patch wh_CodeLength
>cde0	53 70 61 63 65			Name0:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=52581					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cde5	a5					.byte (("Space"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cde6	10					.byte WordFlags	;wh_Flags
>cde7	03					.byte 3	;wh_CodeLength
>cde8	0f					  .byte LinkDisplacement	; offset to previous nt
=$cde9					XtPtr1 ::= *
=52581					WordListLink ::= Nt0 ; remember the nt of this word for later
.cde9	a9 20		lda #$20	Space:		lda #AscSP
.cdeb	d0 f0		bne $cddd			bne Emit_A
=4					CodeLen	.var *-XtPtr1
=$cded					Here1 = *	; remember here
>cde7	04					.byte CodeLen	;patch wh_CodeLength
>cded	54 79 70 65			Name0:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52593					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdf1	a4					.byte (("Type"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdf2	50					.byte WordFlags	;wh_Flags
>cdf3	03					.byte 3	;wh_CodeLength
>cdf4	0c					  .byte LinkDisplacement	; offset to previous nt
=$cdf5					XtPtr1 ::= *
=52593					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdf5					Type:
.cdf5	20 44 b4	jsr $b444			jsr underflow_2
.cdf8	4c 05 ce	jmp $ce05			jmp _test
.cdfb					_loop:
.cdfb	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cdfd	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cdff	20 dd cd	jsr $cddd			jsr Emit_A
.ce02	20 81 ca	jsr $ca81			jsr NOS_One_Plus	; increment address
.ce05	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.ce07	d0 f2		bne $cdfb			bne _loop
.ce09	d6 25		dec $25,x			dec DStack+1,x
.ce0b	10 ee		bpl $cdfb			bpl _loop
.ce0d	4c 53 c5	jmp $c553			jmp Two_drop
=27					CodeLen	.var *-XtPtr1
=$ce10					Here1 = *	; remember here
>cdf3	1b					.byte CodeLen	;patch wh_CodeLength
.ce10					Print_ASCIIZ_YA_no_lf:
.ce10	85 18		sta $18				sta tmp3+0		; save string address
.ce12	84 19		sty $19				sty tmp3+1
.ce14	a0 00		ldy #$00			ldy #0
.ce16					Print_ASCIIZ_tmp3_no_lf:
.ce16	b1 18		lda ($18),y			lda (tmp3),y
.ce18	f0 06		beq $ce20			beq _done		; end of string?
.ce1a	20 dd cd	jsr $cddd			jsr emit_a
.ce1d	c8		iny				iny
.ce1e	d0 f6		bne $ce16			bne Print_ASCIIZ_tmp3_no_lf
.ce20					_done:
.ce20	60		rts				rts
.ce21					Print_ASCIIZ_YA:
.ce21	20 10 ce	jsr $ce10			jsr Print_ASCIIZ_YA_no_lf
.ce24	4c 7c ab	jmp $ab7c	                jmp CR
>ce27	45 78 65 63 75 74 65		Name0:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=52654					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce2e	a7					.byte (("Execute"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce2f	10					.byte WordFlags	;wh_Flags
>ce30	03					.byte 3	;wh_CodeLength
>ce31	3d					  .byte LinkDisplacement	; offset to previous nt
=$ce32					XtPtr1 ::= *
=52654					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce32					Execute:
.ce32	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce34	b0 2e		bcs $ce64		bcs Throw_Stack_03
.ce36	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce38	48		pha				pha
.ce39	b5 24		lda $24,x			lda DStack+0,x
.ce3b	48		pha				pha
.ce3c	e8		inx				inx		; drop addr
.ce3d	e8		inx				inx
.ce3e	08		php				php		; flags for RTI
.ce3f	40		rti				rti
=14					CodeLen	.var *-XtPtr1
=$ce40					Here1 = *	; remember here
>ce30	0e					.byte CodeLen	;patch wh_CodeLength
>ce40	32 52 6f 74			Name0:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52676					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce44	84					.byte (("2Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce45	10					.byte WordFlags	;wh_Flags
>ce46	03					.byte 3	;wh_CodeLength
>ce47	16					  .byte LinkDisplacement	; offset to previous nt
=$ce48					XtPtr1 ::= *
=52676					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce48					TwoRot:
.ce48	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.ce4a	b0 18		bcs $ce64		bcs Throw_Stack_03
.ce4c	86 14		stx $14				stx tmp1+0
.ce4e	e8		inx				inx		; do 4 times
.ce4f	e8		inx				inx
.ce50	e8		inx				inx
.ce51	e8		inx				inx
.ce52	ca		dex		-		dex
.ce53	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce55	b5 28		lda $28,x			lda DStack+4,x
.ce57	95 2c		sta $2c,x			sta DStack+8,x
.ce59	b5 24		lda $24,x			lda DStack+0,x
.ce5b	95 28		sta $28,x			sta DStack+4,x
.ce5d	94 24		sty $24,x			sty DStack+0,x
.ce5f	e4 14		cpx $14				cpx tmp1+0
.ce61	d0 ef		bne $ce52			bne -
=27					CodeLen	.var *-XtPtr1
=$ce63					Here1 = *	; remember here
>ce46	1b					.byte CodeLen	;patch wh_CodeLength
.ce63	60		rts				rts
.ce64	4c 53 b4	jmp $b453	Throw_Stack_03: jmp Throw_Stack
>ce67	52 6f 74			Name0:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce6a	83					.byte (("Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce6b	10					.byte WordFlags	;wh_Flags
>ce6c	03					.byte 3	;wh_CodeLength
>ce6d	26					  .byte LinkDisplacement	; offset to previous nt
=$ce6e					XtPtr1 ::= *
=52714					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce6e					Rot:
.ce6e	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce70	b0 f2		bcs $ce64		bcs Throw_Stack_03
.ce72	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce74	b5 27		lda $27,x			lda DStack+3,x
.ce76	95 29		sta $29,x			sta DStack+5,x
.ce78	b5 25		lda $25,x			lda DStack+1,x
.ce7a	95 27		sta $27,x			sta DStack+3,x
.ce7c	94 25		sty $25,x			sty DStack+1,x
.ce7e	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce80	b5 26		lda $26,x			lda DStack+2,x
.ce82	95 28		sta $28,x			sta DStack+4,x
.ce84	b5 24		lda $24,x			lda DStack+0,x
.ce86	95 26		sta $26,x			sta DStack+2,x
.ce88	94 24		sty $24,x			sty DStack+0,x
=28					CodeLen	.var *-XtPtr1
=$ce8a					Here1 = *	; remember here
>ce6c	1c					.byte CodeLen	;patch wh_CodeLength
.ce8a	60		rts				rts
>ce8b	2d 52 6f 74			Name0:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52751					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce8f	84					.byte (("-Rot"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce90	10					.byte WordFlags	;wh_Flags
>ce91	03					.byte 3	;wh_CodeLength
>ce92	25					  .byte LinkDisplacement	; offset to previous nt
=$ce93					XtPtr1 ::= *
=52751					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce93					Not_Rot:
.ce93	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce95	b0 cd		bcs $ce64		bcs Throw_Stack_03
.ce97	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce99	b5 27		lda $27,x			lda DStack+3,x
.ce9b	95 25		sta $25,x			sta DStack+1,x
.ce9d	b5 29		lda $29,x			lda DStack+5,x
.ce9f	95 27		sta $27,x			sta DStack+3,x
.cea1	94 29		sty $29,x			sty DStack+5,x
.cea3	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.cea5	b5 26		lda $26,x			lda DStack+2,x
.cea7	95 24		sta $24,x			sta DStack+0,x
.cea9	b5 28		lda $28,x			lda DStack+4,x
.ceab	95 26		sta $26,x			sta DStack+2,x
.cead	94 28		sty $28,x			sty DStack+4,x
=28					CodeLen	.var *-XtPtr1
=$ceaf					Here1 = *	; remember here
>ce91	1c					.byte CodeLen	;patch wh_CodeLength
.ceaf	60		rts				rts
>ceb0	40				Name0:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52785					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceb1	01					.byte (("@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>ceb2	10					.byte WordFlags	;wh_Flags
>ceb3	03					.byte 3	;wh_CodeLength
>ceb4	22					  .byte LinkDisplacement	; offset to previous nt
=$ceb5					XtPtr1 ::= *
=52785					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceb5					Fetch:
.ceb5	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ceb7	b0 ab		bcs $ce64		bcs Throw_Stack_03
.ceb9	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.cebb	a8		tay				tay
.cebc	f6 24		inc $24,x			inc DStack+0,x
.cebe	d0 02		bne $cec2			bne +
.cec0	f6 25		inc $25,x			inc DStack+1,x
.cec2					+
.cec2	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cec4	95 25		sta $25,x			sta DStack+1,x
.cec6	94 24		sty $24,x			sty DStack+0,x
=19					CodeLen	.var *-XtPtr1
=$cec8					Here1 = *	; remember here
>ceb3	13					.byte CodeLen	;patch wh_CodeLength
.cec8	60		rts				rts
>cec9	21				Name0:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=52810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceca	21					.byte (("!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cecb	10					.byte WordFlags	;wh_Flags
>cecc	03					.byte 3	;wh_CodeLength
>cecd	19					  .byte LinkDisplacement	; offset to previous nt
=$cece					XtPtr1 ::= *
=52810					WordListLink ::= Nt0 ; remember the nt of this word for later
.cece					Store:
.cece	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ced0	b0 92		bcs $ce64		bcs Throw_Stack_03
.ced2	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ced4	81 24		sta ($24,x)			sta (DStack+0,x)
.ced6	f6 24		inc $24,x			inc DStack+0,x
.ced8	d0 02		bne $cedc			bne +
.ceda	f6 25		inc $25,x			inc DStack+1,x
.cedc					+
.cedc	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cede	81 24		sta ($24,x)			sta (DStack+0,x)
.cee0	e8		inx				inx		; 2Drop
.cee1	e8		inx				inx
.cee2	e8		inx				inx
.cee3	e8		inx				inx
=22					CodeLen	.var *-XtPtr1
=$cee4					Here1 = *	; remember here
>cecc	16					.byte CodeLen	;patch wh_CodeLength
.cee4	60		rts				rts
>cee5	30 21				Name0:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52839					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cee7	22					.byte (("0!"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=0					WordFlags ::= 0	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cee8	00					.byte WordFlags	;wh_Flags
>cee9	03					.byte 3	;wh_CodeLength
>ceea	1d					  .byte LinkDisplacement	; offset to previous nt
=$ceeb					XtPtr1 ::= *
=52839					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceeb	20 12 b4	jsr $b412	ZStore:		jsr PopTmp1	; pop addr, check underflow
.ceee	a9 00		lda #$00			lda #0
.cef0	a8		tay				tay		; clear LSB
.cef1	91 14		sta ($14),y			sta (tmp1),y
.cef3	c8		iny				iny		; clear MSB
.cef4	91 14		sta ($14),y			sta (tmp1),y
=11					CodeLen	.var *-XtPtr1
=$cef6					Here1 = *	; remember here
>cee9	0b					.byte CodeLen	;patch wh_CodeLength
.cef6	60		rts				rts
>cef7	3e 52				Name0:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52857					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cef9	42					.byte ((">R"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cefa	34					.byte WordFlags	;wh_Flags
>cefb	03					.byte 3	;wh_CodeLength
>cefc	12					  .byte LinkDisplacement	; offset to previous nt
=$cefd					XtPtr1 ::= *
=52857					WordListLink ::= Nt0 ; remember the nt of this word for later
.cefd					To_R:
.cefd	68		pla				pla		; move the RTS address out of the way
.cefe	85 1c		sta $1c				sta tmp5+0
.cf00	68		pla				pla
.cf01	85 1d		sta $1d				sta tmp5+1
.cf03	20 30 b4	jsr $b430			jsr underflow_1
.cf06	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cf08	48		pha				pha
.cf09	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cf0b	48		pha				pha
.cf0c	e8		inx				inx
.cf0d	e8		inx				inx
.cf0e	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.cf10	48		pha				pha
.cf11	a5 1c		lda $1c				lda tmp5+0
.cf13	48		pha				pha
=23					CodeLen	.var *-XtPtr1
=$cf14					Here1 = *	; remember here
>cefb	17					.byte CodeLen	;patch wh_CodeLength
.cf14	60		rts				rts
>cf15	52 3e				Name0:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf17	c2					.byte (("R>"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifiable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cf18	34					.byte WordFlags	;wh_Flags
>cf19	03					.byte 3	;wh_CodeLength
>cf1a	1e					  .byte LinkDisplacement	; offset to previous nt
=$cf1b					XtPtr1 ::= *
=52887					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf1b					R_From:
.cf1b	68		pla				pla		; Move the RTS addr out of the way
.cf1c	85 1c		sta $1c				sta tmp5+0
.cf1e	68		pla				pla
.cf1f	85 1d		sta $1d				sta tmp5+1
.cf21	ca		dex				dex
.cf22	ca		dex				dex
.cf23	68		pla				pla		; LSB
.cf24	95 24		sta $24,x			sta DStack+0,x
.cf26	68		pla				pla		; MSB
.cf27	95 25		sta $25,x			sta DStack+1,x
.cf29	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf2b	48		pha				pha
.cf2c	a5 1c		lda $1c				lda tmp5+0
.cf2e	48		pha				pha
=20					CodeLen	.var *-XtPtr1
=$cf2f					Here1 = *	; remember here
>cf19	14					.byte CodeLen	;patch wh_CodeLength
.cf2f	60		rts				rts
>cf30	52 40				Name0:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=52914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf32	02					.byte (("R@"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifiable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf33	14					.byte WordFlags	;wh_Flags
>cf34	03					.byte 3	;wh_CodeLength
>cf35	1b					  .byte LinkDisplacement	; offset to previous nt
=$cf36					XtPtr1 ::= *
=52914					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf36					R_Fetch:
.cf36	86 14		stx $14				stx tmp1	; save data stack index
.cf38	ba		tsx				tsx		; X= return stack index
.cf39	bd 03 01	lda $0103,x			lda RStack+3,x
.cf3c	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf3f	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf41	4c c6 b7	jmp $b7c6			jmp PushYA
=14					CodeLen	.var *-XtPtr1
=$cf44					Here1 = *	; remember here
>cf34	0e					.byte CodeLen	;patch wh_CodeLength
>cf44	4f 76 65 72			Name0:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52936					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf48	44					.byte (("Over"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf49	40					.byte WordFlags	;wh_Flags
>cf4a	03					.byte 3	;wh_CodeLength
>cf4b	16					  .byte LinkDisplacement	; offset to previous nt
=$cf4c					XtPtr1 ::= *
=52936					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf4c					Over:
.cf4c	20 44 b4	jsr $b444			jsr underflow_2
.cf4f	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf51	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf53	ca		dex				dex		; PushYA
.cf54	ca		dex				dex
.cf55	95 24		sta $24,x			sta DStack+0,x
.cf57	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf59					Here1 = *	; remember here
>cf4a	0d					.byte CodeLen	;patch wh_CodeLength
.cf59	60		rts				rts
>cf5a	3f 44 75 70			Name0:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=52958					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf5e	04					.byte (("?Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf5f	50					.byte WordFlags	;wh_Flags
>cf60	03					.byte 3	;wh_CodeLength
>cf61	16					  .byte LinkDisplacement	; offset to previous nt
=$cf62					XtPtr1 ::= *
=52958					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf62					Question_Dup:
.cf62	20 30 b4	jsr $b430			jsr underflow_1
.cf65	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf67	15 25		ora $25,x			ora DStack+1,x
.cf69	d0 0b		bne $cf76			bne Dup_NoUf
=9					CodeLen	.var *-XtPtr1
=$cf6b					Here1 = *	; remember here
>cf60	09					.byte CodeLen	;patch wh_CodeLength
.cf6b	60		rts				rts
>cf6c	44 75 70			Name0:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=52975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf6f	03					.byte (("Dup"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf70	40					.byte WordFlags	;wh_Flags
>cf71	03					.byte 3	;wh_CodeLength
>cf72	11					  .byte LinkDisplacement	; offset to previous nt
=$cf73					XtPtr1 ::= *
=52975					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf73					Dup:
.cf73	20 30 b4	jsr $b430			jsr underflow_1
.cf76	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf78	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf7a	ca		dex				dex
.cf7b	ca		dex				dex
.cf7c	95 24		sta $24,x			sta DStack+0,x
.cf7e	94 25		sty $25,x			sty DStack+1,x
=13					CodeLen	.var *-XtPtr1
=$cf80					Here1 = *	; remember here
>cf71	0d					.byte CodeLen	;patch wh_CodeLength
.cf80	60		rts				rts
.cf81					PushAY:
.cf81	ca		dex				dex
.cf82	ca		dex				dex
.cf83	94 24		sty $24,x			sty DStack+0,x
.cf85	95 25		sta $25,x			sta DStack+1,x
.cf87	60		rts				rts
>cf88	53 77 61 70			Name0:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf8c	04					.byte (("Swap"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf8d	40					.byte WordFlags	;wh_Flags
>cf8e	03					.byte 3	;wh_CodeLength
>cf8f	1d					  .byte LinkDisplacement	; offset to previous nt
=$cf90					XtPtr1 ::= *
=53004					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf90					Swap:
.cf90	20 44 b4	jsr $b444			jsr underflow_2
.cf93	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf95	b4 26		ldy $26,x			ldy DStack+2,x
.cf97	95 26		sta $26,x			sta DStack+2,x
.cf99	94 24		sty $24,x			sty DStack+0,x
.cf9b	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf9d	b4 27		ldy $27,x			ldy DStack+3,x
.cf9f	95 27		sta $27,x			sta DStack+3,x
.cfa1	94 25		sty $25,x			sty DStack+1,x
=19					CodeLen	.var *-XtPtr1
=$cfa3					Here1 = *	; remember here
>cf8e	13					.byte CodeLen	;patch wh_CodeLength
.cfa3	60		rts				rts
>cfa4	44 72 6f 70			Name0:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfa8	04					.byte (("Drop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifiable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cfa9	40					.byte WordFlags	;wh_Flags
>cfaa	03					.byte 3	;wh_CodeLength
>cfab	1c					  .byte LinkDisplacement	; offset to previous nt
=$cfac					XtPtr1 ::= *
=53032					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfac					Drop:
.cfac	20 30 b4	jsr $b430			jsr underflow_1
.cfaf	e8		inx				inx
.cfb0	e8		inx				inx
=5					CodeLen	.var *-XtPtr1
=$cfb1					Here1 = *	; remember here
>cfaa	05					.byte CodeLen	;patch wh_CodeLength
.cfb1	60		rts				rts
=53032					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cfb2	57 6f 72 64 73			Name0:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfb7	65					.byte (("Words"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53047					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cfb8	11					.byte WordFlags	;wh_Flags
>cfb9	03					.byte 3	;wh_CodeLength
>cfba	00 00					  .word WordListLink
=$cfbc					XtPtr1 ::= *
=53047					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfbc	4c cf aa	jmp $aacf			jmp Words
=3					CodeLen	.var *-XtPtr1
=$cfbf					Here1 = *	; remember here
>cfb9	03					.byte CodeLen	;patch wh_CodeLength
>cfbf	46 6f 72 74 68 2d 57 6f		Name0:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfc7	72 64 6c 69 73 74
=14					NameLength = *-Name0
=53069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfcd	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfce	10					.byte WordFlags	;wh_Flags
>cfcf	03					.byte 3	;wh_CodeLength
>cfd0	16					  .byte LinkDisplacement	; offset to previous nt
=$cfd1					XtPtr1 ::= *
=53069					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfd1	4c 06 a0	jmp $a006			jmp Forth_WordList
=3					CodeLen	.var *-XtPtr1
=$cfd4					Here1 = *	; remember here
>cfcf	03					.byte CodeLen	;patch wh_CodeLength
>cfd4	46 6f 72 74 68			Name0:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfd9	05					.byte (("Forth"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfda	10					.byte WordFlags	;wh_Flags
>cfdb	03					.byte 3	;wh_CodeLength
>cfdc	0c					  .byte LinkDisplacement	; offset to previous nt
=$cfdd					XtPtr1 ::= *
=53081					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfdd	4c 04 a1	jmp $a104			jmp Forth
=3					CodeLen	.var *-XtPtr1
=$cfe0					Here1 = *	; remember here
>cfdb	03					.byte CodeLen	;patch wh_CodeLength
>cfe0	53 65 74 2d 4f 72 64 65		Name0:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfe8	72
=9					NameLength = *-Name0
=53097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfe9	49					.byte (("Set-Order"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfea	10					.byte WordFlags	;wh_Flags
>cfeb	03					.byte 3	;wh_CodeLength
>cfec	10					  .byte LinkDisplacement	; offset to previous nt
=$cfed					XtPtr1 ::= *
=53097					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfed	4c 76 a1	jmp $a176			jmp Set_Order
=3					CodeLen	.var *-XtPtr1
=$cff0					Here1 = *	; remember here
>cfeb	03					.byte CodeLen	;patch wh_CodeLength
=53097					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cff0					asm_r:
.cff0	68		pla			pla		; pop RTS addr
.cff1	a8		tay			tay
.cff2	68		pla			pla
.cff3	20 2e d0	jsr $d02e		jsr asm_op	; compile opcode
.cff6	b5 25		lda $25,x		lda DStack+1,x	; check range
.cff8	f0 09		beq $d003		beq _plus
.cffa	c9 ff		cmp #$ff		cmp #$ff
.cffc	f0 0b		beq $d009		beq _minus
.cffe	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d000	4c 8c b4	jmp $b48c		jmp ThrowA
.d003	b5 24		lda $24,x	_plus:	lda DStack+0,x
.d005	30 f7		bmi $cffe		bmi _err
.d007	10 04		bpl $d00d		bpl _store
.d009	b5 24		lda $24,x	_minus:	lda DStack+0,x
.d00b	10 f1		bpl $cffe		bpl _err
.d00d	4c 01 cd	jmp $cd01	_store:	jmp C_Comma
.d010					asm_1:
.d010	68		pla			pla		; pop RTS addr
.d011	a8		tay			tay
.d012	68		pla			pla
.d013	20 2e d0	jsr $d02e		jsr asm_op	; compile opcode
.d016	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d018	f0 00		beq $d01a		beq _store	;   unsigned byte?
.d01a	4c 01 cd	jmp $cd01	_store:	jmp C_Comma
.d01d	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d01f	4c 8c b4	jmp $b48c		jmp ThrowA
.d022					asm_2:
.d022	68		pla			pla		; pop RTS addr
.d023	a8		tay			tay
.d024	68		pla			pla
.d025	20 2e d0	jsr $d02e		jsr asm_op	; compile opcode
.d028	4c 18 cd	jmp $cd18		jmp Comma	; compile operand
.d02b					asm_0:
.d02b	68		pla			pla		; pop RTS addr
.d02c	a8		tay			tay
.d02d	68		pla			pla
.d02e	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d030	85 15		sta $15			sta tmp1+1
.d032	a0 01		ldy #$01		ldy #1		; get opcode byte
.d034	b1 14		lda ($14),y		lda (tmp1),y
.d036	4c 04 cd	jmp $cd04		jmp C_Comma_A	; compile opcode
>d039	61 64 63 2e 23			Name0:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d03e	65					.byte (("adc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=53182					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d03f	11					.byte WordFlags	;wh_Flags
>d040	03					.byte 3	;wh_CodeLength
>d041	00 00					  .word WordListLink
=$d043					XtPtr1 ::= *
=53182					WordListLink ::= Nt0 ; remember the nt of this word for later
.d043	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d046					Here1 = *	; remember here
>d040	03					.byte CodeLen	;patch wh_CodeLength
>d046	69					.byte $69
>d047	61 64 63 2e 78			Name0:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53196					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d04c	05					.byte (("adc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d04d	10					.byte WordFlags	;wh_Flags
>d04e	03					.byte 3	;wh_CodeLength
>d04f	0e					  .byte LinkDisplacement	; offset to previous nt
=$d050					XtPtr1 ::= *
=53196					WordListLink ::= Nt0 ; remember the nt of this word for later
.d050	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d053					Here1 = *	; remember here
>d04e	03					.byte CodeLen	;patch wh_CodeLength
>d053	7d					.byte $7d
>d054	61 64 63 2e 79			Name0:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53209					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d059	25					.byte (("adc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d05a	10					.byte WordFlags	;wh_Flags
>d05b	03					.byte 3	;wh_CodeLength
>d05c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d05d					XtPtr1 ::= *
=53209					WordListLink ::= Nt0 ; remember the nt of this word for later
.d05d	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d060					Here1 = *	; remember here
>d05b	03					.byte CodeLen	;patch wh_CodeLength
>d060	79					.byte $79
>d061	61 64 63 2e 7a			Name0:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53222					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d066	45					.byte (("adc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d067	10					.byte WordFlags	;wh_Flags
>d068	03					.byte 3	;wh_CodeLength
>d069	0d					  .byte LinkDisplacement	; offset to previous nt
=$d06a					XtPtr1 ::= *
=53222					WordListLink ::= Nt0 ; remember the nt of this word for later
.d06a	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d06d					Here1 = *	; remember here
>d068	03					.byte CodeLen	;patch wh_CodeLength
>d06d	65					.byte $65
>d06e	61 64 63 2e 7a 69 79		Name0:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53237					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d075	27					.byte (("adc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d076	10					.byte WordFlags	;wh_Flags
>d077	03					.byte 3	;wh_CodeLength
>d078	0f					  .byte LinkDisplacement	; offset to previous nt
=$d079					XtPtr1 ::= *
=53237					WordListLink ::= Nt0 ; remember the nt of this word for later
.d079	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d07c					Here1 = *	; remember here
>d077	03					.byte CodeLen	;patch wh_CodeLength
>d07c	71					.byte $71
>d07d	61 64 63 2e 7a 78		Name0:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53251					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d083	06					.byte (("adc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d084	10					.byte WordFlags	;wh_Flags
>d085	03					.byte 3	;wh_CodeLength
>d086	0e					  .byte LinkDisplacement	; offset to previous nt
=$d087					XtPtr1 ::= *
=53251					WordListLink ::= Nt0 ; remember the nt of this word for later
.d087	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d08a					Here1 = *	; remember here
>d085	03					.byte CodeLen	;patch wh_CodeLength
>d08a	75					.byte $75
>d08b	61 64 63 2e 7a 78 69		Name0:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d092	27					.byte (("adc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d093	10					.byte WordFlags	;wh_Flags
>d094	03					.byte 3	;wh_CodeLength
>d095	0f					  .byte LinkDisplacement	; offset to previous nt
=$d096					XtPtr1 ::= *
=53266					WordListLink ::= Nt0 ; remember the nt of this word for later
.d096	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d099					Here1 = *	; remember here
>d094	03					.byte CodeLen	;patch wh_CodeLength
>d099	61					.byte $61
>d09a	61 6e 64 2e			Name0:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=53278					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d09e	c4					.byte (("and."[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d09f	10					.byte WordFlags	;wh_Flags
>d0a0	03					.byte 3	;wh_CodeLength
>d0a1	0c					  .byte LinkDisplacement	; offset to previous nt
=$d0a2					XtPtr1 ::= *
=53278					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0a2	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0a5					Here1 = *	; remember here
>d0a0	03					.byte CodeLen	;patch wh_CodeLength
>d0a5	2d					.byte $2d
>d0a6	61 6e 64 2e 23			Name0:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53291					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ab	65					.byte (("and.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0ac	10					.byte WordFlags	;wh_Flags
>d0ad	03					.byte 3	;wh_CodeLength
>d0ae	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0af					XtPtr1 ::= *
=53291					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0af	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0b2					Here1 = *	; remember here
>d0ad	03					.byte CodeLen	;patch wh_CodeLength
>d0b2	29					.byte $29
>d0b3	61 6e 64 2e 78			Name0:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53304					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b8	05					.byte (("and.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b9	10					.byte WordFlags	;wh_Flags
>d0ba	03					.byte 3	;wh_CodeLength
>d0bb	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0bc					XtPtr1 ::= *
=53304					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0bc	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0bf					Here1 = *	; remember here
>d0ba	03					.byte CodeLen	;patch wh_CodeLength
>d0bf	3d					.byte $3d
>d0c0	61 6e 64 2e 79			Name0:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53317					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0c5	25					.byte (("and.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0c6	10					.byte WordFlags	;wh_Flags
>d0c7	03					.byte 3	;wh_CodeLength
>d0c8	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0c9					XtPtr1 ::= *
=53317					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c9	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d0cc					Here1 = *	; remember here
>d0c7	03					.byte CodeLen	;patch wh_CodeLength
>d0cc	39					.byte $39
>d0cd	61 6e 64 2e 7a			Name0:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0d2	45					.byte (("and.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0d3	10					.byte WordFlags	;wh_Flags
>d0d4	03					.byte 3	;wh_CodeLength
>d0d5	0d					  .byte LinkDisplacement	; offset to previous nt
=$d0d6					XtPtr1 ::= *
=53330					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0d6	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0d9					Here1 = *	; remember here
>d0d4	03					.byte CodeLen	;patch wh_CodeLength
>d0d9	25					.byte $25
>d0da	61 6e 64 2e 7a 69 79		Name0:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0e1	27					.byte (("and.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0e2	10					.byte WordFlags	;wh_Flags
>d0e3	03					.byte 3	;wh_CodeLength
>d0e4	0f					  .byte LinkDisplacement	; offset to previous nt
=$d0e5					XtPtr1 ::= *
=53345					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0e5	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0e8					Here1 = *	; remember here
>d0e3	03					.byte CodeLen	;patch wh_CodeLength
>d0e8	31					.byte $31
>d0e9	61 6e 64 2e 7a 78		Name0:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53359					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ef	06					.byte (("and.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0f0	10					.byte WordFlags	;wh_Flags
>d0f1	03					.byte 3	;wh_CodeLength
>d0f2	0e					  .byte LinkDisplacement	; offset to previous nt
=$d0f3					XtPtr1 ::= *
=53359					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0f3	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d0f6					Here1 = *	; remember here
>d0f1	03					.byte CodeLen	;patch wh_CodeLength
>d0f6	35					.byte $35
>d0f7	61 6e 64 2e 7a 78 69		Name0:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53374					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0fe	27					.byte (("and.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0ff	10					.byte WordFlags	;wh_Flags
>d100	03					.byte 3	;wh_CodeLength
>d101	0f					  .byte LinkDisplacement	; offset to previous nt
=$d102					XtPtr1 ::= *
=53374					WordListLink ::= Nt0 ; remember the nt of this word for later
.d102	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d105					Here1 = *	; remember here
>d100	03					.byte CodeLen	;patch wh_CodeLength
>d105	21					.byte $21
>d106	61 73 6c			Name0:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53385					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d109	83					.byte (("asl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d10a	10					.byte WordFlags	;wh_Flags
>d10b	03					.byte 3	;wh_CodeLength
>d10c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d10d					XtPtr1 ::= *
=53385					WordListLink ::= Nt0 ; remember the nt of this word for later
.d10d	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d110					Here1 = *	; remember here
>d10b	03					.byte CodeLen	;patch wh_CodeLength
>d110	0e					.byte $0e
>d111	61 73 6c 2e 61			Name0:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53398					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d116	25					.byte (("asl.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d117	10					.byte WordFlags	;wh_Flags
>d118	03					.byte 3	;wh_CodeLength
>d119	0d					  .byte LinkDisplacement	; offset to previous nt
=$d11a					XtPtr1 ::= *
=53398					WordListLink ::= Nt0 ; remember the nt of this word for later
.d11a	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d11d					Here1 = *	; remember here
>d118	03					.byte CodeLen	;patch wh_CodeLength
>d11d	0a					.byte $0a
>d11e	61 73 6c 2e 78			Name0:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53411					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d123	05					.byte (("asl.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d124	10					.byte WordFlags	;wh_Flags
>d125	03					.byte 3	;wh_CodeLength
>d126	0d					  .byte LinkDisplacement	; offset to previous nt
=$d127					XtPtr1 ::= *
=53411					WordListLink ::= Nt0 ; remember the nt of this word for later
.d127	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d12a					Here1 = *	; remember here
>d125	03					.byte CodeLen	;patch wh_CodeLength
>d12a	1e					.byte $1e
>d12b	61 73 6c 2e 7a			Name0:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53424					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d130	45					.byte (("asl.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d131	10					.byte WordFlags	;wh_Flags
>d132	03					.byte 3	;wh_CodeLength
>d133	0d					  .byte LinkDisplacement	; offset to previous nt
=$d134					XtPtr1 ::= *
=53424					WordListLink ::= Nt0 ; remember the nt of this word for later
.d134	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d137					Here1 = *	; remember here
>d132	03					.byte CodeLen	;patch wh_CodeLength
>d137	06					.byte $06
>d138	61 73 6c 2e 7a 78		Name0:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53438					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d13e	06					.byte (("asl.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d13f	10					.byte WordFlags	;wh_Flags
>d140	03					.byte 3	;wh_CodeLength
>d141	0e					  .byte LinkDisplacement	; offset to previous nt
=$d142					XtPtr1 ::= *
=53438					WordListLink ::= Nt0 ; remember the nt of this word for later
.d142	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d145					Here1 = *	; remember here
>d140	03					.byte CodeLen	;patch wh_CodeLength
>d145	16					.byte $16
>d146	62 63 63			Name0:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53449					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d149	63					.byte (("bcc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d14a	10					.byte WordFlags	;wh_Flags
>d14b	03					.byte 3	;wh_CodeLength
>d14c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d14d					XtPtr1 ::= *
=53449					WordListLink ::= Nt0 ; remember the nt of this word for later
.d14d	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d150					Here1 = *	; remember here
>d14b	03					.byte CodeLen	;patch wh_CodeLength
>d150	90					.byte $90
>d151	62 63 73			Name0:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53460					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d154	63					.byte (("bcs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d155	10					.byte WordFlags	;wh_Flags
>d156	03					.byte 3	;wh_CodeLength
>d157	0b					  .byte LinkDisplacement	; offset to previous nt
=$d158					XtPtr1 ::= *
=53460					WordListLink ::= Nt0 ; remember the nt of this word for later
.d158	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d15b					Here1 = *	; remember here
>d156	03					.byte CodeLen	;patch wh_CodeLength
>d15b	b0					.byte $b0
>d15c	62 65 71			Name0:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d15f	23					.byte (("beq"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d160	10					.byte WordFlags	;wh_Flags
>d161	03					.byte 3	;wh_CodeLength
>d162	0b					  .byte LinkDisplacement	; offset to previous nt
=$d163					XtPtr1 ::= *
=53471					WordListLink ::= Nt0 ; remember the nt of this word for later
.d163	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d166					Here1 = *	; remember here
>d161	03					.byte CodeLen	;patch wh_CodeLength
>d166	f0					.byte $f0
>d167	62 69 74			Name0:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d16a	83					.byte (("bit"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d16b	10					.byte WordFlags	;wh_Flags
>d16c	03					.byte 3	;wh_CodeLength
>d16d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d16e					XtPtr1 ::= *
=53482					WordListLink ::= Nt0 ; remember the nt of this word for later
.d16e	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d171					Here1 = *	; remember here
>d16c	03					.byte CodeLen	;patch wh_CodeLength
>d171	2c					.byte $2c
>d172	62 69 74 2e 7a			Name0:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53495					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d177	45					.byte (("bit.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d178	10					.byte WordFlags	;wh_Flags
>d179	03					.byte 3	;wh_CodeLength
>d17a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d17b					XtPtr1 ::= *
=53495					WordListLink ::= Nt0 ; remember the nt of this word for later
.d17b	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d17e					Here1 = *	; remember here
>d179	03					.byte CodeLen	;patch wh_CodeLength
>d17e	24					.byte $24
>d17f	62 6d 69			Name0:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d182	23					.byte (("bmi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d183	10					.byte WordFlags	;wh_Flags
>d184	03					.byte 3	;wh_CodeLength
>d185	0b					  .byte LinkDisplacement	; offset to previous nt
=$d186					XtPtr1 ::= *
=53506					WordListLink ::= Nt0 ; remember the nt of this word for later
.d186	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d189					Here1 = *	; remember here
>d184	03					.byte CodeLen	;patch wh_CodeLength
>d189	30					.byte $30
>d18a	62 6e 65			Name0:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d18d	a3					.byte (("bne"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d18e	10					.byte WordFlags	;wh_Flags
>d18f	03					.byte 3	;wh_CodeLength
>d190	0b					  .byte LinkDisplacement	; offset to previous nt
=$d191					XtPtr1 ::= *
=53517					WordListLink ::= Nt0 ; remember the nt of this word for later
.d191	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d194					Here1 = *	; remember here
>d18f	03					.byte CodeLen	;patch wh_CodeLength
>d194	d0					.byte $d0
>d195	62 70 6c			Name0:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53528					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d198	83					.byte (("bpl"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d199	10					.byte WordFlags	;wh_Flags
>d19a	03					.byte 3	;wh_CodeLength
>d19b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d19c					XtPtr1 ::= *
=53528					WordListLink ::= Nt0 ; remember the nt of this word for later
.d19c	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d19f					Here1 = *	; remember here
>d19a	03					.byte CodeLen	;patch wh_CodeLength
>d19f	10					.byte $10
>d1a0	62 72 6b			Name0:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53539					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a3	63					.byte (("brk"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1a4	10					.byte WordFlags	;wh_Flags
>d1a5	03					.byte 3	;wh_CodeLength
>d1a6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1a7					XtPtr1 ::= *
=53539					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1a7	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d1aa					Here1 = *	; remember here
>d1a5	03					.byte CodeLen	;patch wh_CodeLength
>d1aa	00					.byte $00
>d1ab	62 76 63			Name0:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ae	63					.byte (("bvc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1af	10					.byte WordFlags	;wh_Flags
>d1b0	03					.byte 3	;wh_CodeLength
>d1b1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1b2					XtPtr1 ::= *
=53550					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1b2	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d1b5					Here1 = *	; remember here
>d1b0	03					.byte CodeLen	;patch wh_CodeLength
>d1b5	50					.byte $50
>d1b6	62 76 73			Name0:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b9	63					.byte (("bvs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1ba	10					.byte WordFlags	;wh_Flags
>d1bb	03					.byte 3	;wh_CodeLength
>d1bc	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1bd					XtPtr1 ::= *
=53561					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1bd	20 f0 cf	jsr $cff0		jsr asm_r
=3					CodeLen	.var *-XtPtr1
=$d1c0					Here1 = *	; remember here
>d1bb	03					.byte CodeLen	;patch wh_CodeLength
>d1c0	70					.byte $70
>d1c1	63 6c 63			Name0:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53572					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1c4	63					.byte (("clc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c5	10					.byte WordFlags	;wh_Flags
>d1c6	03					.byte 3	;wh_CodeLength
>d1c7	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1c8					XtPtr1 ::= *
=53572					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c8	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1cb					Here1 = *	; remember here
>d1c6	03					.byte CodeLen	;patch wh_CodeLength
>d1cb	18					.byte $18
>d1cc	63 6c 64			Name0:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53583					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1cf	83					.byte (("cld"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1d0	10					.byte WordFlags	;wh_Flags
>d1d1	03					.byte 3	;wh_CodeLength
>d1d2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1d3					XtPtr1 ::= *
=53583					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d3	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1d6					Here1 = *	; remember here
>d1d1	03					.byte CodeLen	;patch wh_CodeLength
>d1d6	d8					.byte $d8
>d1d7	63 6c 69			Name0:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53594					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1da	23					.byte (("cli"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1db	10					.byte WordFlags	;wh_Flags
>d1dc	03					.byte 3	;wh_CodeLength
>d1dd	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1de					XtPtr1 ::= *
=53594					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1de	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1e1					Here1 = *	; remember here
>d1dc	03					.byte CodeLen	;patch wh_CodeLength
>d1e1	58					.byte $58
>d1e2	63 6c 76			Name0:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53605					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e5	c3					.byte (("clv"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1e6	10					.byte WordFlags	;wh_Flags
>d1e7	03					.byte 3	;wh_CodeLength
>d1e8	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1e9					XtPtr1 ::= *
=53605					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1e9	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d1ec					Here1 = *	; remember here
>d1e7	03					.byte CodeLen	;patch wh_CodeLength
>d1ec	b8					.byte $b8
>d1ed	63 6d 70			Name0:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53616					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1f0	03					.byte (("cmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1f1	10					.byte WordFlags	;wh_Flags
>d1f2	03					.byte 3	;wh_CodeLength
>d1f3	0b					  .byte LinkDisplacement	; offset to previous nt
=$d1f4					XtPtr1 ::= *
=53616					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1f4	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d1f7					Here1 = *	; remember here
>d1f2	03					.byte CodeLen	;patch wh_CodeLength
>d1f7	cd					.byte $cd
>d1f8	63 6d 70 2e 23			Name0:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53629					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1fd	65					.byte (("cmp.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1fe	10					.byte WordFlags	;wh_Flags
>d1ff	03					.byte 3	;wh_CodeLength
>d200	0d					  .byte LinkDisplacement	; offset to previous nt
=$d201					XtPtr1 ::= *
=53629					WordListLink ::= Nt0 ; remember the nt of this word for later
.d201	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d204					Here1 = *	; remember here
>d1ff	03					.byte CodeLen	;patch wh_CodeLength
>d204	c9					.byte $c9
>d205	63 6d 70 2e 78			Name0:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53642					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d20a	05					.byte (("cmp.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d20b	10					.byte WordFlags	;wh_Flags
>d20c	03					.byte 3	;wh_CodeLength
>d20d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d20e					XtPtr1 ::= *
=53642					WordListLink ::= Nt0 ; remember the nt of this word for later
.d20e	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d211					Here1 = *	; remember here
>d20c	03					.byte CodeLen	;patch wh_CodeLength
>d211	dd					.byte $dd
>d212	63 6d 70 2e 79			Name0:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53655					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d217	25					.byte (("cmp.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d218	10					.byte WordFlags	;wh_Flags
>d219	03					.byte 3	;wh_CodeLength
>d21a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d21b					XtPtr1 ::= *
=53655					WordListLink ::= Nt0 ; remember the nt of this word for later
.d21b	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d21e					Here1 = *	; remember here
>d219	03					.byte CodeLen	;patch wh_CodeLength
>d21e	d9					.byte $d9
>d21f	63 6d 70 2e 7a			Name0:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53668					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d224	45					.byte (("cmp.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d225	10					.byte WordFlags	;wh_Flags
>d226	03					.byte 3	;wh_CodeLength
>d227	0d					  .byte LinkDisplacement	; offset to previous nt
=$d228					XtPtr1 ::= *
=53668					WordListLink ::= Nt0 ; remember the nt of this word for later
.d228	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d22b					Here1 = *	; remember here
>d226	03					.byte CodeLen	;patch wh_CodeLength
>d22b	c5					.byte $c5
>d22c	63 6d 70 2e 7a 69 79		Name0:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53683					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d233	27					.byte (("cmp.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d234	10					.byte WordFlags	;wh_Flags
>d235	03					.byte 3	;wh_CodeLength
>d236	0f					  .byte LinkDisplacement	; offset to previous nt
=$d237					XtPtr1 ::= *
=53683					WordListLink ::= Nt0 ; remember the nt of this word for later
.d237	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d23a					Here1 = *	; remember here
>d235	03					.byte CodeLen	;patch wh_CodeLength
>d23a	d1					.byte $d1
>d23b	63 6d 70 2e 7a 78		Name0:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53697					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d241	06					.byte (("cmp.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d242	10					.byte WordFlags	;wh_Flags
>d243	03					.byte 3	;wh_CodeLength
>d244	0e					  .byte LinkDisplacement	; offset to previous nt
=$d245					XtPtr1 ::= *
=53697					WordListLink ::= Nt0 ; remember the nt of this word for later
.d245	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d248					Here1 = *	; remember here
>d243	03					.byte CodeLen	;patch wh_CodeLength
>d248	d5					.byte $d5
>d249	63 6d 70 2e 7a 78 69		Name0:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53712					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d250	27					.byte (("cmp.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d251	10					.byte WordFlags	;wh_Flags
>d252	03					.byte 3	;wh_CodeLength
>d253	0f					  .byte LinkDisplacement	; offset to previous nt
=$d254					XtPtr1 ::= *
=53712					WordListLink ::= Nt0 ; remember the nt of this word for later
.d254	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d257					Here1 = *	; remember here
>d252	03					.byte CodeLen	;patch wh_CodeLength
>d257	c1					.byte $c1
>d258	63 70 78			Name0:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53723					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d25b	03					.byte (("cpx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d25c	10					.byte WordFlags	;wh_Flags
>d25d	03					.byte 3	;wh_CodeLength
>d25e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d25f					XtPtr1 ::= *
=53723					WordListLink ::= Nt0 ; remember the nt of this word for later
.d25f	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d262					Here1 = *	; remember here
>d25d	03					.byte CodeLen	;patch wh_CodeLength
>d262	ec					.byte $ec
>d263	63 70 78 2e 23			Name0:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53736					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d268	65					.byte (("cpx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d269	10					.byte WordFlags	;wh_Flags
>d26a	03					.byte 3	;wh_CodeLength
>d26b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d26c					XtPtr1 ::= *
=53736					WordListLink ::= Nt0 ; remember the nt of this word for later
.d26c	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d26f					Here1 = *	; remember here
>d26a	03					.byte CodeLen	;patch wh_CodeLength
>d26f	e0					.byte $e0
>d270	63 70 78 2e 7a			Name0:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53749					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d275	45					.byte (("cpx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d276	10					.byte WordFlags	;wh_Flags
>d277	03					.byte 3	;wh_CodeLength
>d278	0d					  .byte LinkDisplacement	; offset to previous nt
=$d279					XtPtr1 ::= *
=53749					WordListLink ::= Nt0 ; remember the nt of this word for later
.d279	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d27c					Here1 = *	; remember here
>d277	03					.byte CodeLen	;patch wh_CodeLength
>d27c	e4					.byte $e4
>d27d	63 70 79			Name0:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d280	23					.byte (("cpy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d281	10					.byte WordFlags	;wh_Flags
>d282	03					.byte 3	;wh_CodeLength
>d283	0b					  .byte LinkDisplacement	; offset to previous nt
=$d284					XtPtr1 ::= *
=53760					WordListLink ::= Nt0 ; remember the nt of this word for later
.d284	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d287					Here1 = *	; remember here
>d282	03					.byte CodeLen	;patch wh_CodeLength
>d287	cc					.byte $cc
>d288	63 70 79 2e 23			Name0:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53773					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d28d	65					.byte (("cpy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d28e	10					.byte WordFlags	;wh_Flags
>d28f	03					.byte 3	;wh_CodeLength
>d290	0d					  .byte LinkDisplacement	; offset to previous nt
=$d291					XtPtr1 ::= *
=53773					WordListLink ::= Nt0 ; remember the nt of this word for later
.d291	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d294					Here1 = *	; remember here
>d28f	03					.byte CodeLen	;patch wh_CodeLength
>d294	c0					.byte $c0
>d295	63 70 79 2e 7a			Name0:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53786					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d29a	45					.byte (("cpy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d29b	10					.byte WordFlags	;wh_Flags
>d29c	03					.byte 3	;wh_CodeLength
>d29d	0d					  .byte LinkDisplacement	; offset to previous nt
=$d29e					XtPtr1 ::= *
=53786					WordListLink ::= Nt0 ; remember the nt of this word for later
.d29e	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2a1					Here1 = *	; remember here
>d29c	03					.byte CodeLen	;patch wh_CodeLength
>d2a1	c4					.byte $c4
>d2a2	64 65 63			Name0:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53797					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2a5	63					.byte (("dec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2a6	10					.byte WordFlags	;wh_Flags
>d2a7	03					.byte 3	;wh_CodeLength
>d2a8	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2a9					XtPtr1 ::= *
=53797					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a9	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2ac					Here1 = *	; remember here
>d2a7	03					.byte CodeLen	;patch wh_CodeLength
>d2ac	ce					.byte $ce
>d2ad	64 65 63 2e 61			Name0:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2b2	25					.byte (("dec.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2b3	10					.byte WordFlags	;wh_Flags
>d2b4	03					.byte 3	;wh_CodeLength
>d2b5	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2b6					XtPtr1 ::= *
=53810					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2b6	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2b9					Here1 = *	; remember here
>d2b4	03					.byte CodeLen	;patch wh_CodeLength
>d2b9	3a					.byte $3a
>d2ba	64 65 63 2e 78			Name0:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2bf	05					.byte (("dec.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2c0	10					.byte WordFlags	;wh_Flags
>d2c1	03					.byte 3	;wh_CodeLength
>d2c2	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2c3					XtPtr1 ::= *
=53823					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2c3	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d2c6					Here1 = *	; remember here
>d2c1	03					.byte CodeLen	;patch wh_CodeLength
>d2c6	de					.byte $de
>d2c7	64 65 63 2e 7a			Name0:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2cc	45					.byte (("dec.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2cd	10					.byte WordFlags	;wh_Flags
>d2ce	03					.byte 3	;wh_CodeLength
>d2cf	0d					  .byte LinkDisplacement	; offset to previous nt
=$d2d0					XtPtr1 ::= *
=53836					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2d0	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2d3					Here1 = *	; remember here
>d2ce	03					.byte CodeLen	;patch wh_CodeLength
>d2d3	c6					.byte $c6
>d2d4	64 65 63 2e 7a 78		Name0:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53850					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2da	06					.byte (("dec.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2db	10					.byte WordFlags	;wh_Flags
>d2dc	03					.byte 3	;wh_CodeLength
>d2dd	0e					  .byte LinkDisplacement	; offset to previous nt
=$d2de					XtPtr1 ::= *
=53850					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2de	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d2e1					Here1 = *	; remember here
>d2dc	03					.byte CodeLen	;patch wh_CodeLength
>d2e1	d6					.byte $d6
>d2e2	64 65 78			Name0:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2e5	03					.byte (("dex"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2e6	10					.byte WordFlags	;wh_Flags
>d2e7	03					.byte 3	;wh_CodeLength
>d2e8	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2e9					XtPtr1 ::= *
=53861					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2e9	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2ec					Here1 = *	; remember here
>d2e7	03					.byte CodeLen	;patch wh_CodeLength
>d2ec	ca					.byte $ca
>d2ed	64 65 79			Name0:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53872					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f0	23					.byte (("dey"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2f1	10					.byte WordFlags	;wh_Flags
>d2f2	03					.byte 3	;wh_CodeLength
>d2f3	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2f4					XtPtr1 ::= *
=53872					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2f4	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d2f7					Here1 = *	; remember here
>d2f2	03					.byte CodeLen	;patch wh_CodeLength
>d2f7	88					.byte $88
>d2f8	65 6f 72			Name0:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53883					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2fb	43					.byte (("eor"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2fc	10					.byte WordFlags	;wh_Flags
>d2fd	03					.byte 3	;wh_CodeLength
>d2fe	0b					  .byte LinkDisplacement	; offset to previous nt
=$d2ff					XtPtr1 ::= *
=53883					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ff	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d302					Here1 = *	; remember here
>d2fd	03					.byte CodeLen	;patch wh_CodeLength
>d302	4d					.byte $4d
>d303	65 6f 72 2e 23			Name0:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d308	65					.byte (("eor.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d309	10					.byte WordFlags	;wh_Flags
>d30a	03					.byte 3	;wh_CodeLength
>d30b	0d					  .byte LinkDisplacement	; offset to previous nt
=$d30c					XtPtr1 ::= *
=53896					WordListLink ::= Nt0 ; remember the nt of this word for later
.d30c	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d30f					Here1 = *	; remember here
>d30a	03					.byte CodeLen	;patch wh_CodeLength
>d30f	49					.byte $49
>d310	65 6f 72 2e 78			Name0:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53909					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d315	05					.byte (("eor.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d316	10					.byte WordFlags	;wh_Flags
>d317	03					.byte 3	;wh_CodeLength
>d318	0d					  .byte LinkDisplacement	; offset to previous nt
=$d319					XtPtr1 ::= *
=53909					WordListLink ::= Nt0 ; remember the nt of this word for later
.d319	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d31c					Here1 = *	; remember here
>d317	03					.byte CodeLen	;patch wh_CodeLength
>d31c	5d					.byte $5d
>d31d	65 6f 72 2e 79			Name0:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d322	25					.byte (("eor.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d323	10					.byte WordFlags	;wh_Flags
>d324	03					.byte 3	;wh_CodeLength
>d325	0d					  .byte LinkDisplacement	; offset to previous nt
=$d326					XtPtr1 ::= *
=53922					WordListLink ::= Nt0 ; remember the nt of this word for later
.d326	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d329					Here1 = *	; remember here
>d324	03					.byte CodeLen	;patch wh_CodeLength
>d329	59					.byte $59
>d32a	65 6f 72 2e 7a			Name0:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=53935					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d32f	45					.byte (("eor.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d330	10					.byte WordFlags	;wh_Flags
>d331	03					.byte 3	;wh_CodeLength
>d332	0d					  .byte LinkDisplacement	; offset to previous nt
=$d333					XtPtr1 ::= *
=53935					WordListLink ::= Nt0 ; remember the nt of this word for later
.d333	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d336					Here1 = *	; remember here
>d331	03					.byte CodeLen	;patch wh_CodeLength
>d336	45					.byte $45
>d337	65 6f 72 2e 7a 69 79		Name0:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53950					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d33e	27					.byte (("eor.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d33f	10					.byte WordFlags	;wh_Flags
>d340	03					.byte 3	;wh_CodeLength
>d341	0f					  .byte LinkDisplacement	; offset to previous nt
=$d342					XtPtr1 ::= *
=53950					WordListLink ::= Nt0 ; remember the nt of this word for later
.d342	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d345					Here1 = *	; remember here
>d340	03					.byte CodeLen	;patch wh_CodeLength
>d345	51					.byte $51
>d346	65 6f 72 2e 7a 78		Name0:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=53964					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d34c	06					.byte (("eor.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d34d	10					.byte WordFlags	;wh_Flags
>d34e	03					.byte 3	;wh_CodeLength
>d34f	0e					  .byte LinkDisplacement	; offset to previous nt
=$d350					XtPtr1 ::= *
=53964					WordListLink ::= Nt0 ; remember the nt of this word for later
.d350	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d353					Here1 = *	; remember here
>d34e	03					.byte CodeLen	;patch wh_CodeLength
>d353	55					.byte $55
>d354	65 6f 72 2e 7a 78 69		Name0:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=53979					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d35b	27					.byte (("eor.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d35c	10					.byte WordFlags	;wh_Flags
>d35d	03					.byte 3	;wh_CodeLength
>d35e	0f					  .byte LinkDisplacement	; offset to previous nt
=$d35f					XtPtr1 ::= *
=53979					WordListLink ::= Nt0 ; remember the nt of this word for later
.d35f	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d362					Here1 = *	; remember here
>d35d	03					.byte CodeLen	;patch wh_CodeLength
>d362	41					.byte $41
>d363	69 6e 63			Name0:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=53990					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d366	63					.byte (("inc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d367	10					.byte WordFlags	;wh_Flags
>d368	03					.byte 3	;wh_CodeLength
>d369	0b					  .byte LinkDisplacement	; offset to previous nt
=$d36a					XtPtr1 ::= *
=53990					WordListLink ::= Nt0 ; remember the nt of this word for later
.d36a	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d36d					Here1 = *	; remember here
>d368	03					.byte CodeLen	;patch wh_CodeLength
>d36d	ee					.byte $ee
>d36e	69 6e 63 2e 61			Name0:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d373	25					.byte (("inc.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d374	10					.byte WordFlags	;wh_Flags
>d375	03					.byte 3	;wh_CodeLength
>d376	0d					  .byte LinkDisplacement	; offset to previous nt
=$d377					XtPtr1 ::= *
=54003					WordListLink ::= Nt0 ; remember the nt of this word for later
.d377	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d37a					Here1 = *	; remember here
>d375	03					.byte CodeLen	;patch wh_CodeLength
>d37a	1a					.byte $1a
>d37b	69 6e 63 2e 78			Name0:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54016					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d380	05					.byte (("inc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d381	10					.byte WordFlags	;wh_Flags
>d382	03					.byte 3	;wh_CodeLength
>d383	0d					  .byte LinkDisplacement	; offset to previous nt
=$d384					XtPtr1 ::= *
=54016					WordListLink ::= Nt0 ; remember the nt of this word for later
.d384	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d387					Here1 = *	; remember here
>d382	03					.byte CodeLen	;patch wh_CodeLength
>d387	fe					.byte $fe
>d388	69 6e 63 2e 7a			Name0:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d38d	45					.byte (("inc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d38e	10					.byte WordFlags	;wh_Flags
>d38f	03					.byte 3	;wh_CodeLength
>d390	0d					  .byte LinkDisplacement	; offset to previous nt
=$d391					XtPtr1 ::= *
=54029					WordListLink ::= Nt0 ; remember the nt of this word for later
.d391	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d394					Here1 = *	; remember here
>d38f	03					.byte CodeLen	;patch wh_CodeLength
>d394	e6					.byte $e6
>d395	69 6e 63 2e 7a 78		Name0:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d39b	06					.byte (("inc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d39c	10					.byte WordFlags	;wh_Flags
>d39d	03					.byte 3	;wh_CodeLength
>d39e	0e					  .byte LinkDisplacement	; offset to previous nt
=$d39f					XtPtr1 ::= *
=54043					WordListLink ::= Nt0 ; remember the nt of this word for later
.d39f	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3a2					Here1 = *	; remember here
>d39d	03					.byte CodeLen	;patch wh_CodeLength
>d3a2	f6					.byte $f6
>d3a3	69 6e 78			Name0:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54054					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3a6	03					.byte (("inx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3a7	10					.byte WordFlags	;wh_Flags
>d3a8	03					.byte 3	;wh_CodeLength
>d3a9	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3aa					XtPtr1 ::= *
=54054					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3aa	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d3ad					Here1 = *	; remember here
>d3a8	03					.byte CodeLen	;patch wh_CodeLength
>d3ad	e8					.byte $e8
>d3ae	69 6e 79			Name0:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b1	23					.byte (("iny"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3b2	10					.byte WordFlags	;wh_Flags
>d3b3	03					.byte 3	;wh_CodeLength
>d3b4	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3b5					XtPtr1 ::= *
=54065					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b5	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d3b8					Here1 = *	; remember here
>d3b3	03					.byte CodeLen	;patch wh_CodeLength
>d3b8	c8					.byte $c8
>d3b9	6a 6d 70			Name0:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54076					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3bc	03					.byte (("jmp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3bd	10					.byte WordFlags	;wh_Flags
>d3be	03					.byte 3	;wh_CodeLength
>d3bf	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3c0					XtPtr1 ::= *
=54076					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3c0	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3c3					Here1 = *	; remember here
>d3be	03					.byte CodeLen	;patch wh_CodeLength
>d3c3	4c					.byte $4c
>d3c4	6a 6d 70 2e 69			Name0:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54089					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3c9	25					.byte (("jmp.i"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ca	10					.byte WordFlags	;wh_Flags
>d3cb	03					.byte 3	;wh_CodeLength
>d3cc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3cd					XtPtr1 ::= *
=54089					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3cd	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3d0					Here1 = *	; remember here
>d3cb	03					.byte CodeLen	;patch wh_CodeLength
>d3d0	6c					.byte $6c
>d3d1	6a 73 72			Name0:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54100					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3d4	43					.byte (("jsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3d5	10					.byte WordFlags	;wh_Flags
>d3d6	03					.byte 3	;wh_CodeLength
>d3d7	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3d8					XtPtr1 ::= *
=54100					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3d8	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3db					Here1 = *	; remember here
>d3d6	03					.byte CodeLen	;patch wh_CodeLength
>d3db	20					.byte $20
>d3dc	6c 64 61			Name0:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54111					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3df	23					.byte (("lda"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3e0	10					.byte WordFlags	;wh_Flags
>d3e1	03					.byte 3	;wh_CodeLength
>d3e2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d3e3					XtPtr1 ::= *
=54111					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3e3	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d3e6					Here1 = *	; remember here
>d3e1	03					.byte CodeLen	;patch wh_CodeLength
>d3e6	ad					.byte $ad
>d3e7	6c 64 61 2e 23			Name0:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54124					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3ec	65					.byte (("lda.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ed	10					.byte WordFlags	;wh_Flags
>d3ee	03					.byte 3	;wh_CodeLength
>d3ef	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3f0					XtPtr1 ::= *
=54124					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3f0	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d3f3					Here1 = *	; remember here
>d3ee	03					.byte CodeLen	;patch wh_CodeLength
>d3f3	a9					.byte $a9
>d3f4	6c 64 61 2e 78			Name0:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54137					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f9	05					.byte (("lda.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3fa	10					.byte WordFlags	;wh_Flags
>d3fb	03					.byte 3	;wh_CodeLength
>d3fc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d3fd					XtPtr1 ::= *
=54137					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3fd	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d400					Here1 = *	; remember here
>d3fb	03					.byte CodeLen	;patch wh_CodeLength
>d400	bd					.byte $bd
>d401	6c 64 61 2e 79			Name0:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d406	25					.byte (("lda.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d407	10					.byte WordFlags	;wh_Flags
>d408	03					.byte 3	;wh_CodeLength
>d409	0d					  .byte LinkDisplacement	; offset to previous nt
=$d40a					XtPtr1 ::= *
=54150					WordListLink ::= Nt0 ; remember the nt of this word for later
.d40a	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d40d					Here1 = *	; remember here
>d408	03					.byte CodeLen	;patch wh_CodeLength
>d40d	b9					.byte $b9
>d40e	6c 64 61 2e 7a			Name0:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54163					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d413	45					.byte (("lda.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d414	10					.byte WordFlags	;wh_Flags
>d415	03					.byte 3	;wh_CodeLength
>d416	0d					  .byte LinkDisplacement	; offset to previous nt
=$d417					XtPtr1 ::= *
=54163					WordListLink ::= Nt0 ; remember the nt of this word for later
.d417	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d41a					Here1 = *	; remember here
>d415	03					.byte CodeLen	;patch wh_CodeLength
>d41a	a5					.byte $a5
>d41b	6c 64 61 2e 7a 69 79		Name0:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d422	27					.byte (("lda.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d423	10					.byte WordFlags	;wh_Flags
>d424	03					.byte 3	;wh_CodeLength
>d425	0f					  .byte LinkDisplacement	; offset to previous nt
=$d426					XtPtr1 ::= *
=54178					WordListLink ::= Nt0 ; remember the nt of this word for later
.d426	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d429					Here1 = *	; remember here
>d424	03					.byte CodeLen	;patch wh_CodeLength
>d429	b1					.byte $b1
>d42a	6c 64 61 2e 7a 78		Name0:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54192					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d430	06					.byte (("lda.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d431	10					.byte WordFlags	;wh_Flags
>d432	03					.byte 3	;wh_CodeLength
>d433	0e					  .byte LinkDisplacement	; offset to previous nt
=$d434					XtPtr1 ::= *
=54192					WordListLink ::= Nt0 ; remember the nt of this word for later
.d434	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d437					Here1 = *	; remember here
>d432	03					.byte CodeLen	;patch wh_CodeLength
>d437	b5					.byte $b5
>d438	6c 64 61 2e 7a 78 69		Name0:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54207					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d43f	27					.byte (("lda.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d440	10					.byte WordFlags	;wh_Flags
>d441	03					.byte 3	;wh_CodeLength
>d442	0f					  .byte LinkDisplacement	; offset to previous nt
=$d443					XtPtr1 ::= *
=54207					WordListLink ::= Nt0 ; remember the nt of this word for later
.d443	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d446					Here1 = *	; remember here
>d441	03					.byte CodeLen	;patch wh_CodeLength
>d446	a1					.byte $a1
>d447	6c 64 78			Name0:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54218					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d44a	03					.byte (("ldx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d44b	10					.byte WordFlags	;wh_Flags
>d44c	03					.byte 3	;wh_CodeLength
>d44d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d44e					XtPtr1 ::= *
=54218					WordListLink ::= Nt0 ; remember the nt of this word for later
.d44e	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d451					Here1 = *	; remember here
>d44c	03					.byte CodeLen	;patch wh_CodeLength
>d451	ae					.byte $ae
>d452	6c 64 78 2e 23			Name0:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54231					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d457	65					.byte (("ldx.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d458	10					.byte WordFlags	;wh_Flags
>d459	03					.byte 3	;wh_CodeLength
>d45a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d45b					XtPtr1 ::= *
=54231					WordListLink ::= Nt0 ; remember the nt of this word for later
.d45b	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d45e					Here1 = *	; remember here
>d459	03					.byte CodeLen	;patch wh_CodeLength
>d45e	a2					.byte $a2
>d45f	6c 64 78 2e 79			Name0:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54244					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d464	25					.byte (("ldx.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d465	10					.byte WordFlags	;wh_Flags
>d466	03					.byte 3	;wh_CodeLength
>d467	0d					  .byte LinkDisplacement	; offset to previous nt
=$d468					XtPtr1 ::= *
=54244					WordListLink ::= Nt0 ; remember the nt of this word for later
.d468	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d46b					Here1 = *	; remember here
>d466	03					.byte CodeLen	;patch wh_CodeLength
>d46b	be					.byte $be
>d46c	6c 64 78 2e 7a			Name0:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54257					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d471	45					.byte (("ldx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d472	10					.byte WordFlags	;wh_Flags
>d473	03					.byte 3	;wh_CodeLength
>d474	0d					  .byte LinkDisplacement	; offset to previous nt
=$d475					XtPtr1 ::= *
=54257					WordListLink ::= Nt0 ; remember the nt of this word for later
.d475	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d478					Here1 = *	; remember here
>d473	03					.byte CodeLen	;patch wh_CodeLength
>d478	a6					.byte $a6
>d479	6c 64 78 2e 7a 79		Name0:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54271					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d47f	26					.byte (("ldx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d480	10					.byte WordFlags	;wh_Flags
>d481	03					.byte 3	;wh_CodeLength
>d482	0e					  .byte LinkDisplacement	; offset to previous nt
=$d483					XtPtr1 ::= *
=54271					WordListLink ::= Nt0 ; remember the nt of this word for later
.d483	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d486					Here1 = *	; remember here
>d481	03					.byte CodeLen	;patch wh_CodeLength
>d486	b6					.byte $b6
>d487	6c 64 79			Name0:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54282					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d48a	23					.byte (("ldy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d48b	10					.byte WordFlags	;wh_Flags
>d48c	03					.byte 3	;wh_CodeLength
>d48d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d48e					XtPtr1 ::= *
=54282					WordListLink ::= Nt0 ; remember the nt of this word for later
.d48e	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d491					Here1 = *	; remember here
>d48c	03					.byte CodeLen	;patch wh_CodeLength
>d491	ac					.byte $ac
>d492	6c 64 79 2e 23			Name0:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54295					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d497	65					.byte (("ldy.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d498	10					.byte WordFlags	;wh_Flags
>d499	03					.byte 3	;wh_CodeLength
>d49a	0d					  .byte LinkDisplacement	; offset to previous nt
=$d49b					XtPtr1 ::= *
=54295					WordListLink ::= Nt0 ; remember the nt of this word for later
.d49b	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d49e					Here1 = *	; remember here
>d499	03					.byte CodeLen	;patch wh_CodeLength
>d49e	a0					.byte $a0
>d49f	6c 64 79 2e 78			Name0:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54308					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4a4	05					.byte (("ldy.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4a5	10					.byte WordFlags	;wh_Flags
>d4a6	03					.byte 3	;wh_CodeLength
>d4a7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4a8					XtPtr1 ::= *
=54308					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a8	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4ab					Here1 = *	; remember here
>d4a6	03					.byte CodeLen	;patch wh_CodeLength
>d4ab	bc					.byte $bc
>d4ac	6c 64 79 2e 7a			Name0:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54321					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4b1	45					.byte (("ldy.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4b2	10					.byte WordFlags	;wh_Flags
>d4b3	03					.byte 3	;wh_CodeLength
>d4b4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4b5					XtPtr1 ::= *
=54321					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4b5	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4b8					Here1 = *	; remember here
>d4b3	03					.byte CodeLen	;patch wh_CodeLength
>d4b8	a4					.byte $a4
>d4b9	6c 64 79 2e 7a 78		Name0:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54335					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4bf	06					.byte (("ldy.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4c0	10					.byte WordFlags	;wh_Flags
>d4c1	03					.byte 3	;wh_CodeLength
>d4c2	0e					  .byte LinkDisplacement	; offset to previous nt
=$d4c3					XtPtr1 ::= *
=54335					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4c3	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4c6					Here1 = *	; remember here
>d4c1	03					.byte CodeLen	;patch wh_CodeLength
>d4c6	b4					.byte $b4
>d4c7	6c 73 72			Name0:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54346					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ca	43					.byte (("lsr"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4cb	10					.byte WordFlags	;wh_Flags
>d4cc	03					.byte 3	;wh_CodeLength
>d4cd	0b					  .byte LinkDisplacement	; offset to previous nt
=$d4ce					XtPtr1 ::= *
=54346					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4ce	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4d1					Here1 = *	; remember here
>d4cc	03					.byte CodeLen	;patch wh_CodeLength
>d4d1	4e					.byte $4e
>d4d2	6c 73 72 2e 61			Name0:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54359					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4d7	25					.byte (("lsr.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d8	10					.byte WordFlags	;wh_Flags
>d4d9	03					.byte 3	;wh_CodeLength
>d4da	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4db					XtPtr1 ::= *
=54359					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4db	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d4de					Here1 = *	; remember here
>d4d9	03					.byte CodeLen	;patch wh_CodeLength
>d4de	4a					.byte $4a
>d4df	6c 73 72 2e 78			Name0:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54372					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4e4	05					.byte (("lsr.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4e5	10					.byte WordFlags	;wh_Flags
>d4e6	03					.byte 3	;wh_CodeLength
>d4e7	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4e8					XtPtr1 ::= *
=54372					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e8	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d4eb					Here1 = *	; remember here
>d4e6	03					.byte CodeLen	;patch wh_CodeLength
>d4eb	5e					.byte $5e
>d4ec	6c 73 72 2e 7a			Name0:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54385					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4f1	45					.byte (("lsr.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4f2	10					.byte WordFlags	;wh_Flags
>d4f3	03					.byte 3	;wh_CodeLength
>d4f4	0d					  .byte LinkDisplacement	; offset to previous nt
=$d4f5					XtPtr1 ::= *
=54385					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4f5	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d4f8					Here1 = *	; remember here
>d4f3	03					.byte CodeLen	;patch wh_CodeLength
>d4f8	46					.byte $46
>d4f9	6c 73 72 2e 7a 78		Name0:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54399					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ff	06					.byte (("lsr.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d500	10					.byte WordFlags	;wh_Flags
>d501	03					.byte 3	;wh_CodeLength
>d502	0e					  .byte LinkDisplacement	; offset to previous nt
=$d503					XtPtr1 ::= *
=54399					WordListLink ::= Nt0 ; remember the nt of this word for later
.d503	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d506					Here1 = *	; remember here
>d501	03					.byte CodeLen	;patch wh_CodeLength
>d506	56					.byte $56
>d507	6e 6f 70			Name0:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54410					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d50a	03					.byte (("nop"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d50b	10					.byte WordFlags	;wh_Flags
>d50c	03					.byte 3	;wh_CodeLength
>d50d	0b					  .byte LinkDisplacement	; offset to previous nt
=$d50e					XtPtr1 ::= *
=54410					WordListLink ::= Nt0 ; remember the nt of this word for later
.d50e	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d511					Here1 = *	; remember here
>d50c	03					.byte CodeLen	;patch wh_CodeLength
>d511	ea					.byte $ea
>d512	6f 72 61			Name0:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d515	23					.byte (("ora"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d516	10					.byte WordFlags	;wh_Flags
>d517	03					.byte 3	;wh_CodeLength
>d518	0b					  .byte LinkDisplacement	; offset to previous nt
=$d519					XtPtr1 ::= *
=54421					WordListLink ::= Nt0 ; remember the nt of this word for later
.d519	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d51c					Here1 = *	; remember here
>d517	03					.byte CodeLen	;patch wh_CodeLength
>d51c	0d					.byte $0d
>d51d	6f 72 61 2e 23			Name0:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54434					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d522	65					.byte (("ora.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d523	10					.byte WordFlags	;wh_Flags
>d524	03					.byte 3	;wh_CodeLength
>d525	0d					  .byte LinkDisplacement	; offset to previous nt
=$d526					XtPtr1 ::= *
=54434					WordListLink ::= Nt0 ; remember the nt of this word for later
.d526	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d529					Here1 = *	; remember here
>d524	03					.byte CodeLen	;patch wh_CodeLength
>d529	09					.byte $09
>d52a	6f 72 61 2e 78			Name0:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d52f	05					.byte (("ora.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d530	10					.byte WordFlags	;wh_Flags
>d531	03					.byte 3	;wh_CodeLength
>d532	0d					  .byte LinkDisplacement	; offset to previous nt
=$d533					XtPtr1 ::= *
=54447					WordListLink ::= Nt0 ; remember the nt of this word for later
.d533	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d536					Here1 = *	; remember here
>d531	03					.byte CodeLen	;patch wh_CodeLength
>d536	1d					.byte $1d
>d537	6f 72 61 2e 79			Name0:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54460					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d53c	25					.byte (("ora.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d53d	10					.byte WordFlags	;wh_Flags
>d53e	03					.byte 3	;wh_CodeLength
>d53f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d540					XtPtr1 ::= *
=54460					WordListLink ::= Nt0 ; remember the nt of this word for later
.d540	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d543					Here1 = *	; remember here
>d53e	03					.byte CodeLen	;patch wh_CodeLength
>d543	19					.byte $19
>d544	6f 72 61 2e 7a			Name0:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d549	45					.byte (("ora.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d54a	10					.byte WordFlags	;wh_Flags
>d54b	03					.byte 3	;wh_CodeLength
>d54c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d54d					XtPtr1 ::= *
=54473					WordListLink ::= Nt0 ; remember the nt of this word for later
.d54d	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d550					Here1 = *	; remember here
>d54b	03					.byte CodeLen	;patch wh_CodeLength
>d550	05					.byte $05
>d551	6f 72 61 2e 7a 69 79		Name0:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54488					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d558	27					.byte (("ora.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d559	10					.byte WordFlags	;wh_Flags
>d55a	03					.byte 3	;wh_CodeLength
>d55b	0f					  .byte LinkDisplacement	; offset to previous nt
=$d55c					XtPtr1 ::= *
=54488					WordListLink ::= Nt0 ; remember the nt of this word for later
.d55c	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d55f					Here1 = *	; remember here
>d55a	03					.byte CodeLen	;patch wh_CodeLength
>d55f	11					.byte $11
>d560	6f 72 61 2e 7a 78		Name0:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54502					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d566	06					.byte (("ora.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d567	10					.byte WordFlags	;wh_Flags
>d568	03					.byte 3	;wh_CodeLength
>d569	0e					  .byte LinkDisplacement	; offset to previous nt
=$d56a					XtPtr1 ::= *
=54502					WordListLink ::= Nt0 ; remember the nt of this word for later
.d56a	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d56d					Here1 = *	; remember here
>d568	03					.byte CodeLen	;patch wh_CodeLength
>d56d	15					.byte $15
>d56e	6f 72 61 2e 7a 78 69		Name0:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54517					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d575	27					.byte (("ora.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d576	10					.byte WordFlags	;wh_Flags
>d577	03					.byte 3	;wh_CodeLength
>d578	0f					  .byte LinkDisplacement	; offset to previous nt
=$d579					XtPtr1 ::= *
=54517					WordListLink ::= Nt0 ; remember the nt of this word for later
.d579	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d57c					Here1 = *	; remember here
>d577	03					.byte CodeLen	;patch wh_CodeLength
>d57c	01					.byte $01
>d57d	70 68 61			Name0:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54528					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d580	23					.byte (("pha"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d581	10					.byte WordFlags	;wh_Flags
>d582	03					.byte 3	;wh_CodeLength
>d583	0b					  .byte LinkDisplacement	; offset to previous nt
=$d584					XtPtr1 ::= *
=54528					WordListLink ::= Nt0 ; remember the nt of this word for later
.d584	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d587					Here1 = *	; remember here
>d582	03					.byte CodeLen	;patch wh_CodeLength
>d587	48					.byte $48
>d588	70 68 70			Name0:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54539					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d58b	03					.byte (("php"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d58c	10					.byte WordFlags	;wh_Flags
>d58d	03					.byte 3	;wh_CodeLength
>d58e	0b					  .byte LinkDisplacement	; offset to previous nt
=$d58f					XtPtr1 ::= *
=54539					WordListLink ::= Nt0 ; remember the nt of this word for later
.d58f	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d592					Here1 = *	; remember here
>d58d	03					.byte CodeLen	;patch wh_CodeLength
>d592	08					.byte $08
>d593	70 6c 61			Name0:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d596	23					.byte (("pla"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d597	10					.byte WordFlags	;wh_Flags
>d598	03					.byte 3	;wh_CodeLength
>d599	0b					  .byte LinkDisplacement	; offset to previous nt
=$d59a					XtPtr1 ::= *
=54550					WordListLink ::= Nt0 ; remember the nt of this word for later
.d59a	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d59d					Here1 = *	; remember here
>d598	03					.byte CodeLen	;patch wh_CodeLength
>d59d	68					.byte $68
>d59e	70 6c 70			Name0:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54561					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a1	03					.byte (("plp"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5a2	10					.byte WordFlags	;wh_Flags
>d5a3	03					.byte 3	;wh_CodeLength
>d5a4	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5a5					XtPtr1 ::= *
=54561					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a5	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5a8					Here1 = *	; remember here
>d5a3	03					.byte CodeLen	;patch wh_CodeLength
>d5a8	28					.byte $28
>d5a9	72 6f 6c			Name0:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54572					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5ac	83					.byte (("rol"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5ad	10					.byte WordFlags	;wh_Flags
>d5ae	03					.byte 3	;wh_CodeLength
>d5af	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5b0					XtPtr1 ::= *
=54572					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5b0	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5b3					Here1 = *	; remember here
>d5ae	03					.byte CodeLen	;patch wh_CodeLength
>d5b3	2e					.byte $2e
>d5b4	72 6f 6c 2e 61			Name0:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54585					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b9	25					.byte (("rol.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5ba	10					.byte WordFlags	;wh_Flags
>d5bb	03					.byte 3	;wh_CodeLength
>d5bc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5bd					XtPtr1 ::= *
=54585					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5bd	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d5c0					Here1 = *	; remember here
>d5bb	03					.byte CodeLen	;patch wh_CodeLength
>d5c0	2a					.byte $2a
>d5c1	72 6f 6c 2e 78			Name0:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54598					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5c6	05					.byte (("rol.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5c7	10					.byte WordFlags	;wh_Flags
>d5c8	03					.byte 3	;wh_CodeLength
>d5c9	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5ca					XtPtr1 ::= *
=54598					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ca	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5cd					Here1 = *	; remember here
>d5c8	03					.byte CodeLen	;patch wh_CodeLength
>d5cd	3e					.byte $3e
>d5ce	72 6f 6c 2e 7a			Name0:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54611					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5d3	45					.byte (("rol.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5d4	10					.byte WordFlags	;wh_Flags
>d5d5	03					.byte 3	;wh_CodeLength
>d5d6	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5d7					XtPtr1 ::= *
=54611					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5d7	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5da					Here1 = *	; remember here
>d5d5	03					.byte CodeLen	;patch wh_CodeLength
>d5da	26					.byte $26
>d5db	72 6f 6c 2e 7a 78		Name0:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54625					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e1	06					.byte (("rol.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5e2	10					.byte WordFlags	;wh_Flags
>d5e3	03					.byte 3	;wh_CodeLength
>d5e4	0e					  .byte LinkDisplacement	; offset to previous nt
=$d5e5					XtPtr1 ::= *
=54625					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e5	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d5e8					Here1 = *	; remember here
>d5e3	03					.byte CodeLen	;patch wh_CodeLength
>d5e8	36					.byte $36
>d5e9	72 6f 72			Name0:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54636					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5ec	43					.byte (("ror"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5ed	10					.byte WordFlags	;wh_Flags
>d5ee	03					.byte 3	;wh_CodeLength
>d5ef	0b					  .byte LinkDisplacement	; offset to previous nt
=$d5f0					XtPtr1 ::= *
=54636					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5f0	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d5f3					Here1 = *	; remember here
>d5ee	03					.byte CodeLen	;patch wh_CodeLength
>d5f3	6e					.byte $6e
>d5f4	72 6f 72 2e 61			Name0:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f9	25					.byte (("ror.a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5fa	10					.byte WordFlags	;wh_Flags
>d5fb	03					.byte 3	;wh_CodeLength
>d5fc	0d					  .byte LinkDisplacement	; offset to previous nt
=$d5fd					XtPtr1 ::= *
=54649					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5fd	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d600					Here1 = *	; remember here
>d5fb	03					.byte CodeLen	;patch wh_CodeLength
>d600	6a					.byte $6a
>d601	72 6f 72 2e 78			Name0:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54662					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d606	05					.byte (("ror.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d607	10					.byte WordFlags	;wh_Flags
>d608	03					.byte 3	;wh_CodeLength
>d609	0d					  .byte LinkDisplacement	; offset to previous nt
=$d60a					XtPtr1 ::= *
=54662					WordListLink ::= Nt0 ; remember the nt of this word for later
.d60a	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d60d					Here1 = *	; remember here
>d608	03					.byte CodeLen	;patch wh_CodeLength
>d60d	7e					.byte $7e
>d60e	72 6f 72 2e 7a			Name0:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54675					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d613	45					.byte (("ror.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d614	10					.byte WordFlags	;wh_Flags
>d615	03					.byte 3	;wh_CodeLength
>d616	0d					  .byte LinkDisplacement	; offset to previous nt
=$d617					XtPtr1 ::= *
=54675					WordListLink ::= Nt0 ; remember the nt of this word for later
.d617	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d61a					Here1 = *	; remember here
>d615	03					.byte CodeLen	;patch wh_CodeLength
>d61a	66					.byte $66
>d61b	72 6f 72 2e 7a 78		Name0:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d621	06					.byte (("ror.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d622	10					.byte WordFlags	;wh_Flags
>d623	03					.byte 3	;wh_CodeLength
>d624	0e					  .byte LinkDisplacement	; offset to previous nt
=$d625					XtPtr1 ::= *
=54689					WordListLink ::= Nt0 ; remember the nt of this word for later
.d625	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d628					Here1 = *	; remember here
>d623	03					.byte CodeLen	;patch wh_CodeLength
>d628	76					.byte $76
>d629	72 74 69			Name0:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54700					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d62c	23					.byte (("rti"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d62d	10					.byte WordFlags	;wh_Flags
>d62e	03					.byte 3	;wh_CodeLength
>d62f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d630					XtPtr1 ::= *
=54700					WordListLink ::= Nt0 ; remember the nt of this word for later
.d630	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d633					Here1 = *	; remember here
>d62e	03					.byte CodeLen	;patch wh_CodeLength
>d633	40					.byte $40
>d634	72 74 73			Name0:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d637	63					.byte (("rts"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d638	10					.byte WordFlags	;wh_Flags
>d639	03					.byte 3	;wh_CodeLength
>d63a	0b					  .byte LinkDisplacement	; offset to previous nt
=$d63b					XtPtr1 ::= *
=54711					WordListLink ::= Nt0 ; remember the nt of this word for later
.d63b	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d63e					Here1 = *	; remember here
>d639	03					.byte CodeLen	;patch wh_CodeLength
>d63e	60					.byte $60
>d63f	73 62 63			Name0:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54722					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d642	63					.byte (("sbc"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d643	10					.byte WordFlags	;wh_Flags
>d644	03					.byte 3	;wh_CodeLength
>d645	0b					  .byte LinkDisplacement	; offset to previous nt
=$d646					XtPtr1 ::= *
=54722					WordListLink ::= Nt0 ; remember the nt of this word for later
.d646	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d649					Here1 = *	; remember here
>d644	03					.byte CodeLen	;patch wh_CodeLength
>d649	ed					.byte $ed
>d64a	73 62 63 2e 23			Name0:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54735					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d64f	65					.byte (("sbc.#"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d650	10					.byte WordFlags	;wh_Flags
>d651	03					.byte 3	;wh_CodeLength
>d652	0d					  .byte LinkDisplacement	; offset to previous nt
=$d653					XtPtr1 ::= *
=54735					WordListLink ::= Nt0 ; remember the nt of this word for later
.d653	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d656					Here1 = *	; remember here
>d651	03					.byte CodeLen	;patch wh_CodeLength
>d656	e9					.byte $e9
>d657	73 62 63 2e 78			Name0:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54748					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d65c	05					.byte (("sbc.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d65d	10					.byte WordFlags	;wh_Flags
>d65e	03					.byte 3	;wh_CodeLength
>d65f	0d					  .byte LinkDisplacement	; offset to previous nt
=$d660					XtPtr1 ::= *
=54748					WordListLink ::= Nt0 ; remember the nt of this word for later
.d660	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d663					Here1 = *	; remember here
>d65e	03					.byte CodeLen	;patch wh_CodeLength
>d663	fd					.byte $fd
>d664	73 62 63 2e 79			Name0:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54761					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d669	25					.byte (("sbc.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d66a	10					.byte WordFlags	;wh_Flags
>d66b	03					.byte 3	;wh_CodeLength
>d66c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d66d					XtPtr1 ::= *
=54761					WordListLink ::= Nt0 ; remember the nt of this word for later
.d66d	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d670					Here1 = *	; remember here
>d66b	03					.byte CodeLen	;patch wh_CodeLength
>d670	f9					.byte $f9
>d671	73 62 63 2e 7a			Name0:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54774					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d676	45					.byte (("sbc.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d677	10					.byte WordFlags	;wh_Flags
>d678	03					.byte 3	;wh_CodeLength
>d679	0d					  .byte LinkDisplacement	; offset to previous nt
=$d67a					XtPtr1 ::= *
=54774					WordListLink ::= Nt0 ; remember the nt of this word for later
.d67a	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d67d					Here1 = *	; remember here
>d678	03					.byte CodeLen	;patch wh_CodeLength
>d67d	e5					.byte $e5
>d67e	73 62 63 2e 7a 69 79		Name0:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d685	27					.byte (("sbc.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d686	10					.byte WordFlags	;wh_Flags
>d687	03					.byte 3	;wh_CodeLength
>d688	0f					  .byte LinkDisplacement	; offset to previous nt
=$d689					XtPtr1 ::= *
=54789					WordListLink ::= Nt0 ; remember the nt of this word for later
.d689	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d68c					Here1 = *	; remember here
>d687	03					.byte CodeLen	;patch wh_CodeLength
>d68c	f1					.byte $f1
>d68d	73 62 63 2e 7a 78		Name0:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54803					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d693	06					.byte (("sbc.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d694	10					.byte WordFlags	;wh_Flags
>d695	03					.byte 3	;wh_CodeLength
>d696	0e					  .byte LinkDisplacement	; offset to previous nt
=$d697					XtPtr1 ::= *
=54803					WordListLink ::= Nt0 ; remember the nt of this word for later
.d697	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d69a					Here1 = *	; remember here
>d695	03					.byte CodeLen	;patch wh_CodeLength
>d69a	f5					.byte $f5
>d69b	73 62 63 2e 7a 78 69		Name0:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54818					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6a2	27					.byte (("sbc.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d6a3	10					.byte WordFlags	;wh_Flags
>d6a4	03					.byte 3	;wh_CodeLength
>d6a5	0f					  .byte LinkDisplacement	; offset to previous nt
=$d6a6					XtPtr1 ::= *
=54818					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6a6	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6a9					Here1 = *	; remember here
>d6a4	03					.byte CodeLen	;patch wh_CodeLength
>d6a9	e1					.byte $e1
>d6aa	73 65 63			Name0:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54829					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ad	63					.byte (("sec"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6ae	10					.byte WordFlags	;wh_Flags
>d6af	03					.byte 3	;wh_CodeLength
>d6b0	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6b1					XtPtr1 ::= *
=54829					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b1	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6b4					Here1 = *	; remember here
>d6af	03					.byte CodeLen	;patch wh_CodeLength
>d6b4	38					.byte $38
>d6b5	73 65 64			Name0:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54840					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b8	83					.byte (("sed"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6b9	10					.byte WordFlags	;wh_Flags
>d6ba	03					.byte 3	;wh_CodeLength
>d6bb	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6bc					XtPtr1 ::= *
=54840					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6bc	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6bf					Here1 = *	; remember here
>d6ba	03					.byte CodeLen	;patch wh_CodeLength
>d6bf	f8					.byte $f8
>d6c0	73 65 69			Name0:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54851					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6c3	23					.byte (("sei"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6c4	10					.byte WordFlags	;wh_Flags
>d6c5	03					.byte 3	;wh_CodeLength
>d6c6	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6c7					XtPtr1 ::= *
=54851					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6c7	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d6ca					Here1 = *	; remember here
>d6c5	03					.byte CodeLen	;patch wh_CodeLength
>d6ca	78					.byte $78
>d6cb	73 74 61			Name0:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54862					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ce	23					.byte (("sta"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6cf	10					.byte WordFlags	;wh_Flags
>d6d0	03					.byte 3	;wh_CodeLength
>d6d1	0b					  .byte LinkDisplacement	; offset to previous nt
=$d6d2					XtPtr1 ::= *
=54862					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6d2	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6d5					Here1 = *	; remember here
>d6d0	03					.byte CodeLen	;patch wh_CodeLength
>d6d5	8d					.byte $8d
>d6d6	73 74 61 2e 78			Name0:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54875					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6db	05					.byte (("sta.x"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6dc	10					.byte WordFlags	;wh_Flags
>d6dd	03					.byte 3	;wh_CodeLength
>d6de	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6df					XtPtr1 ::= *
=54875					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6df	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6e2					Here1 = *	; remember here
>d6dd	03					.byte CodeLen	;patch wh_CodeLength
>d6e2	9d					.byte $9d
>d6e3	73 74 61 2e 79			Name0:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54888					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e8	25					.byte (("sta.y"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6e9	10					.byte WordFlags	;wh_Flags
>d6ea	03					.byte 3	;wh_CodeLength
>d6eb	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6ec					XtPtr1 ::= *
=54888					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6ec	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d6ef					Here1 = *	; remember here
>d6ea	03					.byte CodeLen	;patch wh_CodeLength
>d6ef	99					.byte $99
>d6f0	73 74 61 2e 7a			Name0:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6f5	45					.byte (("sta.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6f6	10					.byte WordFlags	;wh_Flags
>d6f7	03					.byte 3	;wh_CodeLength
>d6f8	0d					  .byte LinkDisplacement	; offset to previous nt
=$d6f9					XtPtr1 ::= *
=54901					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f9	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d6fc					Here1 = *	; remember here
>d6f7	03					.byte CodeLen	;patch wh_CodeLength
>d6fc	85					.byte $85
>d6fd	73 74 61 2e 7a 69 79		Name0:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d704	27					.byte (("sta.ziy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d705	10					.byte WordFlags	;wh_Flags
>d706	03					.byte 3	;wh_CodeLength
>d707	0f					  .byte LinkDisplacement	; offset to previous nt
=$d708					XtPtr1 ::= *
=54916					WordListLink ::= Nt0 ; remember the nt of this word for later
.d708	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d70b					Here1 = *	; remember here
>d706	03					.byte CodeLen	;patch wh_CodeLength
>d70b	91					.byte $91
>d70c	73 74 61 2e 7a 78		Name0:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d712	06					.byte (("sta.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d713	10					.byte WordFlags	;wh_Flags
>d714	03					.byte 3	;wh_CodeLength
>d715	0e					  .byte LinkDisplacement	; offset to previous nt
=$d716					XtPtr1 ::= *
=54930					WordListLink ::= Nt0 ; remember the nt of this word for later
.d716	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d719					Here1 = *	; remember here
>d714	03					.byte CodeLen	;patch wh_CodeLength
>d719	95					.byte $95
>d71a	73 74 61 2e 7a 78 69		Name0:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=7					NameLength = *-Name0
=54945					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d721	27					.byte (("sta.zxi"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d722	10					.byte WordFlags	;wh_Flags
>d723	03					.byte 3	;wh_CodeLength
>d724	0f					  .byte LinkDisplacement	; offset to previous nt
=$d725					XtPtr1 ::= *
=54945					WordListLink ::= Nt0 ; remember the nt of this word for later
.d725	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d728					Here1 = *	; remember here
>d723	03					.byte CodeLen	;patch wh_CodeLength
>d728	81					.byte $81
>d729	73 74 78			Name0:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d72c	03					.byte (("stx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d72d	10					.byte WordFlags	;wh_Flags
>d72e	03					.byte 3	;wh_CodeLength
>d72f	0b					  .byte LinkDisplacement	; offset to previous nt
=$d730					XtPtr1 ::= *
=54956					WordListLink ::= Nt0 ; remember the nt of this word for later
.d730	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d733					Here1 = *	; remember here
>d72e	03					.byte CodeLen	;patch wh_CodeLength
>d733	8e					.byte $8e
>d734	73 74 78 2e 7a			Name0:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=54969					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d739	45					.byte (("stx.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d73a	10					.byte WordFlags	;wh_Flags
>d73b	03					.byte 3	;wh_CodeLength
>d73c	0d					  .byte LinkDisplacement	; offset to previous nt
=$d73d					XtPtr1 ::= *
=54969					WordListLink ::= Nt0 ; remember the nt of this word for later
.d73d	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d740					Here1 = *	; remember here
>d73b	03					.byte CodeLen	;patch wh_CodeLength
>d740	86					.byte $86
>d741	73 74 78 2e 7a 79		Name0:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=54983					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d747	26					.byte (("stx.zy"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d748	10					.byte WordFlags	;wh_Flags
>d749	03					.byte 3	;wh_CodeLength
>d74a	0e					  .byte LinkDisplacement	; offset to previous nt
=$d74b					XtPtr1 ::= *
=54983					WordListLink ::= Nt0 ; remember the nt of this word for later
.d74b	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d74e					Here1 = *	; remember here
>d749	03					.byte CodeLen	;patch wh_CodeLength
>d74e	96					.byte $96
>d74f	73 74 79			Name0:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=54994					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d752	23					.byte (("sty"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d753	10					.byte WordFlags	;wh_Flags
>d754	03					.byte 3	;wh_CodeLength
>d755	0b					  .byte LinkDisplacement	; offset to previous nt
=$d756					XtPtr1 ::= *
=54994					WordListLink ::= Nt0 ; remember the nt of this word for later
.d756	20 22 d0	jsr $d022		jsr asm_2
=3					CodeLen	.var *-XtPtr1
=$d759					Here1 = *	; remember here
>d754	03					.byte CodeLen	;patch wh_CodeLength
>d759	8c					.byte $8c
>d75a	73 74 79 2e 7a			Name0:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=5					NameLength = *-Name0
=55007					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d75f	45					.byte (("sty.z"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d760	10					.byte WordFlags	;wh_Flags
>d761	03					.byte 3	;wh_CodeLength
>d762	0d					  .byte LinkDisplacement	; offset to previous nt
=$d763					XtPtr1 ::= *
=55007					WordListLink ::= Nt0 ; remember the nt of this word for later
.d763	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d766					Here1 = *	; remember here
>d761	03					.byte CodeLen	;patch wh_CodeLength
>d766	84					.byte $84
>d767	73 74 79 2e 7a 78		Name0:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55021					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d76d	06					.byte (("sty.zx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d76e	10					.byte WordFlags	;wh_Flags
>d76f	03					.byte 3	;wh_CodeLength
>d770	0e					  .byte LinkDisplacement	; offset to previous nt
=$d771					XtPtr1 ::= *
=55021					WordListLink ::= Nt0 ; remember the nt of this word for later
.d771	20 10 d0	jsr $d010		jsr asm_1
=3					CodeLen	.var *-XtPtr1
=$d774					Here1 = *	; remember here
>d76f	03					.byte CodeLen	;patch wh_CodeLength
>d774	94					.byte $94
>d775	74 61 78			Name0:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d778	03					.byte (("tax"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d779	10					.byte WordFlags	;wh_Flags
>d77a	03					.byte 3	;wh_CodeLength
>d77b	0b					  .byte LinkDisplacement	; offset to previous nt
=$d77c					XtPtr1 ::= *
=55032					WordListLink ::= Nt0 ; remember the nt of this word for later
.d77c	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d77f					Here1 = *	; remember here
>d77a	03					.byte CodeLen	;patch wh_CodeLength
>d77f	aa					.byte $aa
>d780	74 61 79			Name0:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d783	23					.byte (("tay"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d784	10					.byte WordFlags	;wh_Flags
>d785	03					.byte 3	;wh_CodeLength
>d786	0b					  .byte LinkDisplacement	; offset to previous nt
=$d787					XtPtr1 ::= *
=55043					WordListLink ::= Nt0 ; remember the nt of this word for later
.d787	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d78a					Here1 = *	; remember here
>d785	03					.byte CodeLen	;patch wh_CodeLength
>d78a	a8					.byte $a8
>d78b	74 73 78			Name0:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55054					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d78e	03					.byte (("tsx"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d78f	10					.byte WordFlags	;wh_Flags
>d790	03					.byte 3	;wh_CodeLength
>d791	0b					  .byte LinkDisplacement	; offset to previous nt
=$d792					XtPtr1 ::= *
=55054					WordListLink ::= Nt0 ; remember the nt of this word for later
.d792	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d795					Here1 = *	; remember here
>d790	03					.byte CodeLen	;patch wh_CodeLength
>d795	ba					.byte $BA
>d796	74 78 61			Name0:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d799	23					.byte (("txa"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d79a	10					.byte WordFlags	;wh_Flags
>d79b	03					.byte 3	;wh_CodeLength
>d79c	0b					  .byte LinkDisplacement	; offset to previous nt
=$d79d					XtPtr1 ::= *
=55065					WordListLink ::= Nt0 ; remember the nt of this word for later
.d79d	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d7a0					Here1 = *	; remember here
>d79b	03					.byte CodeLen	;patch wh_CodeLength
>d7a0	8a					.byte $8a
>d7a1	74 78 73			Name0:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55076					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7a4	63					.byte (("txs"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7a5	10					.byte WordFlags	;wh_Flags
>d7a6	03					.byte 3	;wh_CodeLength
>d7a7	0b					  .byte LinkDisplacement	; offset to previous nt
=$d7a8					XtPtr1 ::= *
=55076					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7a8	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d7ab					Here1 = *	; remember here
>d7a6	03					.byte CodeLen	;patch wh_CodeLength
>d7ab	9a					.byte $9a
>d7ac	74 79 61			Name0:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55087					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7af	23					.byte (("tya"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7b0	10					.byte WordFlags	;wh_Flags
>d7b1	03					.byte 3	;wh_CodeLength
>d7b2	0b					  .byte LinkDisplacement	; offset to previous nt
=$d7b3					XtPtr1 ::= *
=55087					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7b3	20 2b d0	jsr $d02b		jsr asm_0
=3					CodeLen	.var *-XtPtr1
=$d7b6					Here1 = *	; remember here
>d7b1	03					.byte CodeLen	;patch wh_CodeLength
>d7b6	98					.byte $98
=55087					asm_table = WordListLink ; head of instruction word list for disassembler
>d7b7	70 75 73 68 2d 61		Name0:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55101					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7bd	26					.byte (("push-a"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7be	18					.byte WordFlags	;wh_Flags
>d7bf	03					.byte 3	;wh_CodeLength
>d7c0	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7c1					XtPtr1 ::= *
=55101					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7c1	a9 f5		lda #$f5			lda #<PushZA
.d7c3	a0 b7		ldy #$b7			ldy #>PushZA
.d7c5	4c 3e cd	jmp $cd3e			jmp Jsr_Comma_YA
=7					CodeLen	.var *-XtPtr1
=$d7c8					Here1 = *	; remember here
>d7bf	07					.byte CodeLen	;patch wh_CodeLength
>d7c8	2d 2d 3e			Name0:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=3					NameLength = *-Name0
=55115					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7cb	c3					.byte (("-->"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7cc	18					.byte WordFlags	;wh_Flags
>d7cd	03					.byte 3	;wh_CodeLength
>d7ce	0e					  .byte LinkDisplacement	; offset to previous nt
=$d7cf					XtPtr1 ::= *
=55115					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7cf	4c 45 ca	jmp $ca45			jmp Here
=3					CodeLen	.var *-XtPtr1
=$d7d2					Here1 = *	; remember here
>d7cd	03					.byte CodeLen	;patch wh_CodeLength
>d7d2	3c 6a				Name0:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55124					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d4	42					.byte (("<j"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifiable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7d5	08					.byte WordFlags	;wh_Flags
>d7d6	03					.byte 3	;wh_CodeLength
>d7d7	09					  .byte LinkDisplacement	; offset to previous nt
=$d7d8					XtPtr1 ::= *
=55124					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CodeLen	.var *-XtPtr1
=$d7d8					Here1 = *	; remember here
>d7d6	00					.byte CodeLen	;patch wh_CodeLength
.d7d8	60		rts				rts
>d7d9	3c 62				Name0:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55131					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7db	42					.byte (("<b"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifiable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7dc	18					.byte WordFlags	;wh_Flags
>d7dd	03					.byte 3	;wh_CodeLength
>d7de	07					  .byte LinkDisplacement	; offset to previous nt
=$d7df					XtPtr1 ::= *
=55131					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7df					asm_back_branch:
.d7df	20 45 ca	jsr $ca45			jsr Here		; ( addr-l addr-h )
.d7e2	20 d4 cb	jsr $cbd4			jsr Minus		; ( offset )
.d7e5	a9 fe		lda #$fe			lda #$fe
.d7e7	4c 67 ca	jmp $ca67			jmp Minus_A
=11					CodeLen	.var *-XtPtr1
=$d7ea					Here1 = *	; remember here
>d7dd	0b					.byte CodeLen	;patch wh_CodeLength
>d7ea	44 69 73 41 73 6d		Name0:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=6					NameLength = *-Name0
=55152					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7f0	a6					.byte (("DisAsm"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7f1	10					.byte WordFlags	;wh_Flags
>d7f2	03					.byte 3	;wh_CodeLength
>d7f3	15					  .byte LinkDisplacement	; offset to previous nt
=$d7f4					XtPtr1 ::= *
=55152					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7f4					DisAsm:
.d7f4	20 8f c4	jsr $c48f			jsr Bounds		; ( addr_end addr )
.d7f7					_instr:
.d7f7	20 44 b4	jsr $b444			jsr underflow_2
.d7fa	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7fc	d5 26		cmp $26,x			cmp DStack+2,x
.d7fe	b5 25		lda $25,x			lda DStack+1,x
.d800	f5 27		sbc $27,x			sbc DStack+3,x
.d802	90 03		bcc $d807			bcc +
.d804	4c 53 c5	jmp $c553			jmp Two_drop		; discard parms & return
.d807					+
.d807	20 7c ab	jsr $ab7c			jsr CR			; new line
.d80a	20 73 cf	jsr $cf73			jsr Dup			; print address
.d80d	20 1c a9	jsr $a91c			jsr Dot_Hex
.d810	20 e9 cd	jsr $cde9			jsr Space
.d813	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d815	20 52 d9	jsr $d952			jsr _print_a
.d818	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d81a	85 18		sta $18				sta tmp3
.d81c	20 77 ca	jsr $ca77			jsr One_plus
.d81f	a9 2f		lda #$2f			lda #<asm_table		; for each asm opcode word
.d821	a0 d7		ldy #$d7			ldy #>asm_table
.d823	85 14		sta $14				sta tmp1+0
.d825	84 15		sty $15				sty tmp1+1
.d827	d0 05		bne $d82e			bne _WTest
.d829	20 9b 82	jsr $829b	_WNext:		jsr LinkNext		;   next entry
.d82c	f0 28		beq $d856			beq _unknown
.d82e	20 c7 bd	jsr $bdc7	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d831	a0 03		ldy #$03			ldy #3			;   opcode match?
.d833	b1 16		lda ($16),y			lda (tmp2),y
.d835	c5 18		cmp $18				cmp tmp3
.d837	d0 f0		bne $d829			bne _WNext
.d839	a5 18		lda $18				lda tmp3		; save opcode
.d83b	48		pha				pha
.d83c	a5 15		lda $15				lda tmp1+1		; save its nt
.d83e	48		pha				pha
.d83f	a5 14		lda $14				lda tmp1+0
.d841	48		pha				pha
.d842	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d844	b1 16		lda ($16),y			lda (tmp2),y
.d846	c9 2b		cmp #$2b			cmp #<asm_0		; goto disasm processor
.d848	f0 1a		beq $d864			beq _c0
.d84a	c9 10		cmp #$10			cmp #<asm_1
.d84c	f0 4c		beq $d89a			beq _c1
.d84e	c9 22		cmp #$22			cmp #<asm_2
.d850	f0 64		beq $d8b6			beq _c2
.d852	c9 f0		cmp #$f0			cmp #<asm_r
.d854	f0 1b		beq $d871			beq _cr
.d856					_unknown:
.d856	20 33 d9	jsr $d933			jsr _tab		; to source area
.d859	a9 3f		lda #$3f			lda #'?'
.d85b	20 dd cd	jsr $cddd			jsr Emit_A
.d85e	68		pla				pla			; RDrop nt
.d85f	68		pla				pla
.d860	68		pla				pla			; RDrop opcode
.d861	4c f7 d7	jmp $d7f7			jmp _instr
.d864					_c0:
.d864	20 33 d9	jsr $d933			jsr _tab		; to source area
.d867	68		pla				pla			; get opcode word nt
.d868	a8		tay				tay
.d869	68		pla				pla
.d86a	20 38 d9	jsr $d938			jsr _print_opcode
.d86d	68		pla				pla			; discard opcode
.d86e	4c f7 d7	jmp $d7f7			jmp _instr
.d871					_cr:
.d871	20 49 d9	jsr $d949			jsr _get_byte		; get displacement byte
.d874	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d876	09 00		ora #$00			ora #0
.d878	10 01		bpl $d87b			bpl +
.d87a	88		dey				dey
.d87b	20 c6 b7	jsr $b7c6	+		jsr PushYA
.d87e	20 73 cf	jsr $cf73			jsr Dup			; save for TypeSymbol
.d881	20 33 d9	jsr $d933			jsr _tab		; to source area
.d884	20 ec cb	jsr $cbec			jsr Dot			; print dest address
.d887	68		pla				pla			; get opcode word nt
.d888	a8		tay				tay
.d889	68		pla				pla
.d88a	20 38 d9	jsr $d938			jsr _print_opcode
.d88d	68		pla				pla			; discard opcode
.d88e	20 4c cf	jsr $cf4c			jsr Over		; calc dest addr
.d891	20 bc cb	jsr $cbbc			jsr Plus
.d894	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d897	4c f7 d7	jmp $d7f7			jmp _instr
.d89a					_c1:
.d89a	20 49 d9	jsr $d949			jsr _get_byte		; get operand
.d89d	20 f5 b7	jsr $b7f5			jsr PushZA
.d8a0	20 33 d9	jsr $d933			jsr _tab		; to source area
.d8a3	20 73 cf	jsr $cf73			jsr Dup
.d8a6	20 1d cc	jsr $cc1d			jsr U_Dot		; print operand
.d8a9	68		pla				pla			; get opcode word nt
.d8aa	a8		tay				tay
.d8ab	68		pla				pla
.d8ac	20 38 d9	jsr $d938			jsr _print_opcode
.d8af	68		pla				pla			; discard opcode
.d8b0	20 99 81	jsr $8199			jsr TypeSymbol
.d8b3	4c f7 d7	jmp $d7f7			jmp _instr
.d8b6					_c2:
.d8b6	20 49 d9	jsr $d949			jsr _get_byte		; get operand lo byte
.d8b9	48		pha				pha
.d8ba	20 49 d9	jsr $d949			jsr _get_byte		; get operand hi byte
.d8bd	ca		dex				dex			; push operand bytes
.d8be	ca		dex				dex
.d8bf	95 25		sta $25,x			sta DStack+1,x
.d8c1	68		pla				pla
.d8c2	95 24		sta $24,x			sta DStack+0,x
.d8c4	20 33 d9	jsr $d933			jsr _tab		; to source area
.d8c7	20 73 cf	jsr $cf73			jsr Dup
.d8ca	20 1d cc	jsr $cc1d			jsr U_Dot		; print operand
.d8cd	68		pla				pla			; AY= opcode word nt
.d8ce	a8		tay				tay
.d8cf	68		pla				pla
.d8d0	20 38 d9	jsr $d938			jsr _print_opcode
.d8d3	20 73 cf	jsr $cf73			jsr Dup
.d8d6	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8d9	68		pla				pla			; get opcode
.d8da	c9 20		cmp #$20			cmp #$20		;  JSR
.d8dc	f0 09		beq $d8e7			beq _jsr
.d8de	e8		inx		_jdrop:		inx			; Drop operand
.d8df	e8		inx				inx
.d8e0	4c f7 d7	jmp $d7f7			jmp _instr		; ( addr_end addr )
.d8e3	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8e4	e8		inx				inx
.d8e5	d0 f7		bne $d8de			bne _jdrop
.d8e7					_jsr:
.d8e7	20 07 b4	jsr $b407			jsr PopYA
.d8ea	c9 ba		cmp #$ba			cmp #<sliteral_runtime	; string literal?
.d8ec	d0 42		bne $d930			bne _not_sliteral
.d8ee	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8f0	d0 3e		bne $d930			bne _not_sliteral
.d8f2	20 7c ab	jsr $ab7c			jsr CR
.d8f5	20 73 cf	jsr $cf73			jsr Dup			; ( addr_end addr addr )
.d8f8	20 1c a9	jsr $a91c			jsr Dot_Hex
.d8fb	20 e9 cd	jsr $cde9			jsr Space
.d8fe	20 73 cf	jsr $cf73			jsr Dup			; ( addr_end ? addr )
.d901	20 49 d9	jsr $d949			jsr _get_byte		; get JMP opcode
.d904	20 49 d9	jsr $d949			jsr _get_byte		; get JMP addr lo byte
.d907	95 26		sta $26,x			sta DStack+2,x
.d909	20 49 d9	jsr $d949			jsr _get_byte		; get JMP addr hi byte
.d90c	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d90e	20 7c ab	jsr $ab7c			jsr CR
.d911	20 73 cf	jsr $cf73			jsr Dup
.d914	20 1c a9	jsr $a91c			jsr Dot_Hex
.d917	20 e9 cd	jsr $cde9			jsr Space
.d91a	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d91c	d5 26		cmp $26,x			cmp DStack+2,x
.d91e	b5 25		lda $25,x			lda DStack+1,x
.d920	f5 27		sbc $27,x			sbc DStack+3,x
.d922	b0 06		bcs $d92a			bcs _slit_19
.d924	20 49 d9	jsr $d949			jsr _get_byte
.d927	4c 1a d9	jmp $d91a			jmp _slit_11
.d92a					_slit_19:
.d92a	20 ad c9	jsr $c9ad			jsr Nip			; ( addr_end addr )
.d92d	4c f7 d7	jmp $d7f7			jmp _instr
.d930					_not_sliteral:
.d930	4c f7 d7	jmp $d7f7			jmp _instr
.d933					_tab:
.d933	a9 09		lda #$09			lda #9
.d935	4c dd cd	jmp $cddd			jmp Emit_A
.d938					_print_opcode:
.d938	20 81 cf	jsr $cf81			jsr PushAY		; save opcode word nt
.d93b	20 e9 cd	jsr $cde9			jsr Space
.d93e	20 03 be	jsr $be03			jsr Name_To_String	; get name string
.d941	4c f5 cd	jmp $cdf5			jmp Type		; type word name
.d944					_get_byte_silent:
.d944	a1 24		lda ($24,x)			lda (DStack+0,x)
.d946	4c 77 ca	jmp $ca77			jmp One_plus
.d949					_get_byte:
.d949	20 44 d9	jsr $d944			jsr _get_byte_silent
.d94c	48		pha				pha
.d94d	20 52 d9	jsr $d952			jsr _print_a
.d950	68		pla				pla
.d951	60		rts				rts
.d952					_print_a:
.d952	20 f5 b7	jsr $b7f5			jsr PushZA
.d955	20 fb a8	jsr $a8fb			jsr C_Dot_Hex
.d958	4c e9 cd	jmp $cde9			jmp Space
=55152					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d95b	6c				Name0:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d95c	81					.byte (("l"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=55516					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d95d	11					.byte WordFlags	;wh_Flags
>d95e	03					.byte 3	;wh_CodeLength
>d95f	00 00					  .word WordListLink
=$d961					XtPtr1 ::= *
=55516					WordListLink ::= Nt0 ; remember the nt of this word for later
.d961	4c d4 a4	jmp $a4d4	Editor_l:	jmp ListScr
=3					CodeLen	.var *-XtPtr1
=$d964					Here1 = *	; remember here
>d95e	03					.byte CodeLen	;patch wh_CodeLength
.d964					Editor_Screen_Helper:
.d964	20 73 cf	jsr $cf73			jsr Dup
.d967	20 e6 a2	jsr $a2e6			jsr Scr
.d96a	20 ce ce	jsr $cece			jsr Store
.d96d	4c f1 a3	jmp $a3f1			jmp Buffer
>d970	65 6e 74 65 72 2d 73 63		Name0:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d978	72 65 65 6e
=12					NameLength = *-Name0
=55548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d97c	cc					.byte (("enter-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d97d	10					.byte WordFlags	;wh_Flags
>d97e	03					.byte 3	;wh_CodeLength
>d97f	20					  .byte LinkDisplacement	; offset to previous nt
=$d980					XtPtr1 ::= *
=55548					WordListLink ::= Nt0 ; remember the nt of this word for later
.d980					Editor_Enter_Screen:
.d980	20 64 d9	jsr $d964			jsr Editor_Screen_Helper
.d983	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d985	95 24		sta $24,x	_loop:		sta DStack+0,x
.d987	20 f5 b7	jsr $b7f5			jsr PushZA		; Put the current line number on the stack.
.d98a	20 ea d9	jsr $d9ea			jsr Editor_o		; prompt for overwrite.
.d98d	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d98f	b5 24		lda $24,x			lda DStack+0,x
.d991	c9 10		cmp #$10			cmp #16
.d993	90 f0		bcc $d985			bcc _loop
.d995	e8		inx				inx			; Drop work area
.d996	e8		inx				inx
=23					CodeLen	.var *-XtPtr1
=$d997					Here1 = *	; remember here
>d97e	17					.byte CodeLen	;patch wh_CodeLength
.d997	60		rts				rts
>d998	6c 69 6e 65			Name0:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=4					NameLength = *-Name0
=55580					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d99c	a4					.byte (("line"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d99d	10					.byte WordFlags	;wh_Flags
>d99e	03					.byte 3	;wh_CodeLength
>d99f	20					  .byte LinkDisplacement	; offset to previous nt
=$d9a0					XtPtr1 ::= *
=55580					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9a0					Editor_line:
.d9a0	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d9a2	20 5f cb	jsr $cb5f			jsr LShift_A	; *64 is same as left shift 6 times.
.d9a5	20 e6 a2	jsr $a2e6			jsr Scr
.d9a8	20 b5 ce	jsr $ceb5			jsr Fetch
.d9ab	20 89 a3	jsr $a389			jsr Block
.d9ae	4c bc cb	jmp $cbbc			jmp Plus
=17					CodeLen	.var *-XtPtr1
=$d9b1					Here1 = *	; remember here
>d99e	11					.byte CodeLen	;patch wh_CodeLength
>d9b1	65 72 61 73 65 2d 73 63		Name0:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b9	72 65 65 6e
=12					NameLength = *-Name0
=55613					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9bd	cc					.byte (("erase-screen"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d9be	10					.byte WordFlags	;wh_Flags
>d9bf	03					.byte 3	;wh_CodeLength
>d9c0	21					  .byte LinkDisplacement	; offset to previous nt
=$d9c1					XtPtr1 ::= *
=55613					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9c1					Editor_Erase_Screen:
.d9c1	20 64 d9	jsr $d964			jsr Editor_Screen_Helper
.d9c4	a9 00		lda #$00			lda #<1024
.d9c6	a0 04		ldy #$04			ldy #>1024
.d9c8	20 c6 b7	jsr $b7c6			jsr PushYA
.d9cb	20 4a be	jsr $be4a			jsr Blank		; Erase the entire block (fill with spaces).
.d9ce	4c de a3	jmp $a3de			jmp Update		; Mark buffer as updated.
=16					CodeLen	.var *-XtPtr1
=$d9d1					Here1 = *	; remember here
>d9bf	10					.byte CodeLen	;patch wh_CodeLength
>d9d1	65 6c				Name0:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=2					NameLength = *-Name0
=55635					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9d3	82					.byte (("el"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9d4	10					.byte WordFlags	;wh_Flags
>d9d5	03					.byte 3	;wh_CodeLength
>d9d6	16					  .byte LinkDisplacement	; offset to previous nt
=$d9d7					XtPtr1 ::= *
=55635					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9d7					Editor_el:
.d9d7	20 a0 d9	jsr $d9a0			jsr Editor_line
.d9da	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9dc	20 f5 b7	jsr $b7f5			jsr PushZA
.d9df	20 4a be	jsr $be4a			jsr Blank		; Fill with spaces.
.d9e2	4c de a3	jmp $a3de			jmp Update		; Mark buffer as updated.
=14					CodeLen	.var *-XtPtr1
=$d9e5					Here1 = *	; remember here
>d9d5	0e					.byte CodeLen	;patch wh_CodeLength
>d9e5	6f				Name0:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=1					NameLength = *-Name0
=55654					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9e6	e1					.byte (("o"[-1]&7)<<5)+NameLength	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifiable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9e7	10					.byte WordFlags	;wh_Flags
>d9e8	03					.byte 3	;wh_CodeLength
>d9e9	13					  .byte LinkDisplacement	; offset to previous nt
=$d9ea					XtPtr1 ::= *
=55654					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9ea					Editor_o:
.d9ea	20 7c ab	jsr $ab7c			jsr CR
.d9ed	20 73 cf	jsr $cf73			jsr Dup
.d9f0	a9 02		lda #$02			lda #2
.d9f2	20 4f cc	jsr $cc4f			jsr U_Dot_R_A
.d9f5	20 e9 cd	jsr $cde9			jsr Space
.d9f8	a9 2a		lda #$2a			lda #'*'
.d9fa	20 dd cd	jsr $cddd			jsr Emit_A
.d9fd	20 e9 cd	jsr $cde9			jsr Space
.da00	20 a0 d9	jsr $d9a0			jsr Editor_line
.da03	20 73 cf	jsr $cf73			jsr Dup		; Save a copy of the line address for later.
.da06	a9 40		lda #$40			lda #64		; chars/line
.da08	20 f5 b7	jsr $b7f5			jsr PushZA
.da0b	20 c7 c2	jsr $c2c7			jsr Accept
.da0e	20 73 cf	jsr $cf73			jsr Dup
.da11	20 93 ce	jsr $ce93			jsr Not_Rot
.da14	20 bc cb	jsr $cbbc			jsr Plus
.da17	a9 40		lda #$40			lda #64		; chars/line
.da19	20 f5 b7	jsr $b7f5			jsr PushZA
.da1c	20 6e ce	jsr $ce6e			jsr Rot
.da1f	20 d4 cb	jsr $cbd4			jsr Minus
.da22	20 4a be	jsr $be4a			jsr Blank
.da25	4c de a3	jmp $a3de			jmp Update
=62					CodeLen	.var *-XtPtr1
=$da28					Here1 = *	; remember here
>d9e8	3e					.byte CodeLen	;patch wh_CodeLength
=55654					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da28	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da2c	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da34	64 00
>da36	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da3e	64 20 00
>da41	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da48	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da4e	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da54	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da5c					Exception_Text_List:
>da5c	ff 00					.text $100+err_Abort,0
>da5e	fe 00					.text $100+err_AbortQuote,0
>da60	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da68	76 65 72 66 6c 6f 77 00
>da70	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da78	6e 64 65 72 66 6c 6f 77 00
>da81	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da89	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da99	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>daa9	74 69 6f 6e 00
>daae	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dab6	62 79 20 30 00
>dabb	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dac3	72 61 6e 67 65 00
>dac9	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dad1	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dae1	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dae9	65 64 20 77 6f 72 64 00
>daf1	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>daf9	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db09	6f 6e 6c 79 20 77 6f 72 64 00
>db13	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db1b	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db2a	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db32	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db42	74 63 68 00
>db46	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db4e	20 6e 61 6d 65 00
>db54	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db5c	65 61 64 00
>db60	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db68	72 69 74 65 00
>db6d	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db75	64 65 20 62 79 20 7a 65 72 6f 00
>db80	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db88	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db98	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dba0	6b 20 6f 76 65 72 66 6c 6f 77 00
>dbab	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbb3	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbbf	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbc7	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbd4	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbdc	72 66 6c 6f 77 00
>dbe2	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbea	45 00
>dbec	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbf2	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbfa	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc02	6f 74 20 73 65 74 00
>dc09	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc11	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc1f	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc27	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc32	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc3a	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc4a	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 8c b4	jmp $b48c			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 8c b4	jsr $b48c			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
