
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Tue Jun 18 19:23:07 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	ab ce					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	95 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	96 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	ef ce					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80 ; name, right justified
=127					wh_NameLastChar	= *-1	;last char of name
>0080					wh_HNL:		.byte ?	;
=$e0					wh_HNL_HashMask = $e0		; lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask = $1f	; length of name
.0081					wh_
>0081					wh_WordListLink: .word ? ;link to nt of previous word in wordlist chain
>0083					wh_CodeLength:	.byte ?	;size of code (0xff = 255 or greater)
>0084					wh_Flags:	.byte ?	; created by adding the flags defined as:
=1					CO =   1 ; Compile Only
=2					AN =   2 ; Always Native Compile (may not be called by JSR)
=4					IM =   4 ; Immediate Word
=8					NN =   8 ; Never Native Compile (must always be called by JSR)
=$10					UF = $10 ; Includes strippable Underflow Check
=$40					R6 = $40 ; strip 6 bytes from begin & end when native compiling
.0085					wh_xt:
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8048	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>804a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>804b	08					.byte NN	;wh_Flags	dictionary flags
=32711					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1
.8052					-
.8052	bd 00 80	lda $8000,x			lda Cold_zp_table,x
.8055	95 00		sta $00,x			sta zp0,x
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 97 b4	jsr $b497			jsr Empty_Stack
.8068	20 29 a1	jsr $a129			jsr BlockInit
.806b	20 d7 aa	jsr $aad7			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 59 b7	jsr $b759			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 59 b7	jsr $b759			jsr PushYA
.807c	20 8e af	jsr $af8e			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c 48 b4	jmp $b448			jmp Abort_Core2	;Quit
=80					CL	.var *-(WordListLink+wh_Xt)
=$809c					en = *	; remember here
>804a	50					.byte CL	;wh_CodeLength
.809c					forth_words_start:
>809c	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
.816e					user_words_start:
>816e					.binary "user_words.asc"
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8173	c7 7f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8175	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8176	00					.byte 0	;wh_Flags	dictionary flags
=33010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-(WordListLink+wh_Xt)
=$8178					en = *	; remember here
>8175	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	63 63 40			L1:	.text "cc@"	;  name of word as a string, ending at wh_NameLastChar
>817c	03					.byte (("cc@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>817d	f2 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>817f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8180	08					.byte NN	;wh_Flags	dictionary flags
=33020					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8181	4c 28 f1	jmp $f128	CCAt:		jmp platform_CCAt
=3					CL	.var *-(WordListLink+wh_Xt)
=$8184					en = *	; remember here
>817f	03					.byte CL	;wh_CodeLength
>8184	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
>8187	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8188	fc 80					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>818a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>818b	08					.byte NN	;wh_Flags	dictionary flags
=33031					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.818c	4c 27 f1	jmp $f127	Bye:		jmp platform_bye
=3					CL	.var *-(WordListLink+wh_Xt)
=$818f					en = *	; remember here
>818a	03					.byte CL	;wh_CodeLength
>818f	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8197	6f 6c
>8199	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>819a	07 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>819c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>819d	08					.byte NN	;wh_Flags	dictionary flags
=33049					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.819e	20 be b7	jsr $b7be	TypeSymbol:	jsr Two
.81a1	20 0f c4	jsr $c40f			jsr Spaces
.81a4	a9 28		lda #$28			lda #'('
.81a6	20 63 cd	jsr $cd63			jsr Emit_A
.81a9	20 70 cd	jsr $cd70			jsr Space
.81ac	20 f5 ce	jsr $cef5			jsr Dup
.81af	a9 24		lda #$24			lda #'$'
.81b1	20 63 cd	jsr $cd63			jsr Emit_A
.81b4	20 6c a8	jsr $a86c			jsr Dot_Hex
.81b7	20 70 cd	jsr $cd70			jsr Space
.81ba	20 e1 81	jsr $81e1			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81bd	20 a9 bd	jsr $bda9			jsr Name_To_String	; Change nt into the name
.81c0	20 7d cd	jsr $cd7d			jsr Type		; print it.
.81c3	20 70 cd	jsr $cd70			jsr Space
.81c6	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c8	15 25		ora $25,x			ora DStack+1,x
.81ca	f0 0b		beq $81d7			beq +
.81cc	a9 2b		lda #$2b			lda #'+'		;   print offset
.81ce	20 63 cd	jsr $cd63			jsr Emit_A
.81d1	20 f5 ce	jsr $cef5			jsr Dup
.81d4	20 a4 cb	jsr $cba4			jsr U_Dot
.81d7	e8		inx		+		inx
.81d8	e8		inx				inx
.81d9	a9 29		lda #$29			lda #')'
.81db	20 63 cd	jsr $cd63			jsr Emit_A
.81de	4c 70 cd	jmp $cd70			jmp Space
=67					CL	.var *-(WordListLink+wh_Xt)
=$81e1					en = *	; remember here
>819c	43					.byte CL	;wh_CodeLength
.81e1					DictSearchXt:
.81e1	ca		dex				dex
.81e2	ca		dex				dex
.81e3	20 cc ce	jsr $cecc			jsr Over
.81e6	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e8	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81ea	a9 fe		lda #$fe			lda #$fe		; for each wordlist
.81ec	48		pha				pha
.81ed	68		pla		_ListNext:	pla
.81ee	18		clc				clc
.81ef	69 02		adc #$02			adc #2			; to next wordlist
.81f1	c9 18		cmp #$18			cmp #max_wordlists*2
.81f3	b0 10		bcs $8205			bcs _Done
.81f5	48		pha				pha
.81f6	a8		tay				tay
.81f7	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81fa	85 14		sta $14				sta tmp1+0
.81fc	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81ff	85 15		sta $15				sta tmp1+1
.8201	d0 14		bne $8217			bne _WordTest
.8203	f0 e8		beq $81ed			beq _ListNext		;   empty list
.8205	e8		inx		_Done:		inx			; Drop xt
.8206	e8		inx				inx
.8207	60		rts				rts
.8208	a0 82		ldy #$82	_WordNext:	ldy #wh_WordListLink+1
.820a	b1 14		lda ($14),y			lda (tmp1),y
.820c	f0 df		beq $81ed			beq _ListNext		; end of Dictionary?
.820e	48		pha				pha
.820f	88		dey				dey
.8210	b1 14		lda ($14),y			lda (tmp1),y
.8212	85 14		sta $14				sta tmp1+0
.8214	68		pla				pla
.8215	85 15		sta $15				sta tmp1+1
.8217	18		clc		_WordTest:	clc			; tmp2 = xt of this word
.8218	a5 14		lda $14				lda tmp1+0
.821a	69 85		adc #$85			adc #wh_xt
.821c	85 16		sta $16				sta tmp2+0
.821e	a5 15		lda $15				lda tmp1+1
.8220	69 00		adc #$00			adc #0
.8222	85 17		sta $17				sta tmp2+1
.8224	38		sec				sec			; tmp2 = xt offset for this word
.8225	b5 24		lda $24,x			lda DStack+0,x
.8227	e5 16		sbc $16				sbc tmp2+0
.8229	85 16		sta $16				sta tmp2+0
.822b	b5 25		lda $25,x			lda DStack+1,x
.822d	e5 17		sbc $17				sbc tmp2+1
.822f	85 17		sta $17				sta tmp2+1
.8231	20 97 82	jsr $8297			jsr _test
.8234	a0 85		ldy #$85			ldy #wh_xt+0		; is this word a constant?
.8236	b1 14		lda ($14),y			lda (tmp1),y
.8238	c9 a0		cmp #$a0			cmp #$a0
.823a	f0 28		beq $8264			beq _PushYA
.823c	c9 a9		cmp #$a9			cmp #$a9
.823e	d0 c8		bne $8208			bne _WordNext
.8240	c8		iny		_PushZA:	iny			; get lda # operand
.8241	b5 24		lda $24,x			lda DStack+0,x
.8243	f1 14		sbc ($14),y			sbc (tmp1),y
.8245	85 16		sta $16				sta tmp2+0
.8247	b5 25		lda $25,x			lda DStack+1,x
.8249	e9 00		sbc #$00			sbc #0
.824b	85 17		sta $17				sta tmp2+1
.824d	c8		iny				iny			; check jmp opcode
.824e	b1 14		lda ($14),y			lda (tmp1),y
.8250	c9 4c		cmp #$4c			cmp #$4c
.8252	d0 b4		bne $8208			bne _WordNext
.8254	c8		iny				iny			; check jmp operand lo
.8255	b1 14		lda ($14),y			lda (tmp1),y
.8257	c9 9b		cmp #$9b			cmp #<PushZA
.8259	d0 ad		bne $8208			bne _WordNext
.825b	c8		iny				iny			; check jmp operand hi
.825c	b1 14		lda ($14),y			lda (tmp1),y
.825e	c9 b7		cmp #$b7			cmp #>PushZA
.8260	d0 a6		bne $8208			bne _WordNext
.8262	f0 2d		beq $8291			beq _KTest
.8264	a0 87		ldy #$87	_PushYA:	ldy #wh_xt+2		; check LDA # opcode
.8266	b1 14		lda ($14),y			lda (tmp1),y
.8268	c9 a9		cmp #$a9			cmp #$a9
.826a	d0 9c		bne $8208			bne _WordNext
.826c	c8		iny				iny			; get lda # operand
.826d	b5 24		lda $24,x			lda DStack+0,x
.826f	f1 14		sbc ($14),y			sbc (tmp1),y
.8271	85 16		sta $16				sta tmp2+0
.8273	a0 86		ldy #$86			ldy #wh_xt+1		; get LDY # operand
.8275	b5 25		lda $25,x			lda DStack+1,x
.8277	f1 14		sbc ($14),y			sbc (tmp1),y
.8279	85 17		sta $17				sta tmp2+1
.827b	a0 89		ldy #$89			ldy #wh_xt+4		; check JMP opcode
.827d	b1 14		lda ($14),y			lda (tmp1),y
.827f	c9 4c		cmp #$4c			cmp #$4c
.8281	d0 85		bne $8208			bne _WordNext
.8283	c8		iny				iny			; check JMP operand lo
.8284	b1 14		lda ($14),y			lda (tmp1),y
.8286	c9 59		cmp #$59			cmp #<PushYA
.8288	d0 0a		bne $8294			bne _WordNext3
.828a	c8		iny				iny			; check JMP operand hi
.828b	b1 14		lda ($14),y			lda (tmp1),y
.828d	c9 b7		cmp #$b7			cmp #>PushYA
.828f	d0 03		bne $8294			bne _WordNext3
.8291	20 97 82	jsr $8297	_KTest:		jsr _test
.8294	4c 08 82	jmp $8208	_WordNext3:	jmp _WordNext
.8297					_test:
.8297	a5 16		lda $16				lda tmp2+0		; this word have smaller offset?
.8299	d5 28		cmp $28,x			cmp DStack+4,x
.829b	a5 17		lda $17				lda tmp2+1
.829d	f5 29		sbc $29,x			sbc DStack+5,x
.829f	b0 10		bcs $82b1			bcs _trts
.82a1	a5 16		lda $16				lda tmp2+0		;   save this better offset
.82a3	a4 17		ldy $17				ldy tmp2+1
.82a5	95 28		sta $28,x			sta DStack+4,x
.82a7	94 29		sty $29,x			sty DStack+5,x
.82a9	a5 14		lda $14				lda tmp1+0		;   save this better nt
.82ab	a4 15		ldy $15				ldy tmp1+1
.82ad	95 26		sta $26,x			sta DStack+2,x
.82af	94 27		sty $27,x			sty DStack+3,x
.82b1	60		rts		_trts:		rts
>82b2	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>82b8	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82b9	19 81					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82bc	08					.byte NN	;wh_Flags	dictionary flags
=33336					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82bd	a9 24		lda #$24			lda #DStack
.82bf	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$82c2					en = *	; remember here
>82bb	05					.byte CL	;wh_CodeLength
>82c2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
>82ca	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82cb	38 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82cd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82ce	08					.byte NN	;wh_Flags	dictionary flags
=33354					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82cf	a0 03		ldy #$03			ldy #>RndState
.82d1	a9 35		lda #$35			lda #<RndState
.82d3	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$82d6					en = *	; remember here
>82cd	07					.byte CL	;wh_CodeLength
>82d6	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
>82da	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HNL
>82db	4a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>82dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>82de	00					.byte 0	;wh_Flags	dictionary flags
=33370					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.82df					Rand:
.82df	4e 36 03	lsr $0336			lsr RndState+1
.82e2	6e 35 03	ror $0335			ror RndState+0
.82e5	6e 38 03	ror $0338			ror RndState+3
.82e8	6e 37 03	ror $0337			ror RndState+2
.82eb	90 10		bcc $82fd			bcc _19			;  IfCs,
.82ed	ad 36 03	lda $0336			lda RndState+1
.82f0	49 d0		eor #$d0			eor #$d0
.82f2	8d 36 03	sta $0336			sta RndState+1
.82f5	ad 37 03	lda $0337			lda RndState+2
.82f8	49 01		eor #$01			eor #$01
.82fa	8d 37 03	sta $0337			sta RndState+2
.82fd					_19:
.82fd	ad 37 03	lda $0337			lda RndState+2
.8300	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-(WordListLink+wh_Xt)
=$8303					en = *	; remember here
>82dd	24					.byte CL	;wh_CodeLength
.8303	60		rts				rts
>8304	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
>8309	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>830a	5a 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>830c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>830d	08					.byte NN	;wh_Flags	dictionary flags
=33417					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.830e	20 f5 ce	jsr $cef5	RandM:		jsr Dup		; ( umod umod )
.8311	20 df 82	jsr $82df			jsr Rand
.8314	4a		lsr a				lsr a		; make positive
.8315	95 27		sta $27,x			sta DStack+3,x
.8317	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8319	4c 00 af	jmp $af00			jmp Mod
=14					CL	.var *-(WordListLink+wh_Xt)
=$831c					en = *	; remember here
>830c	0e					.byte CL	;wh_CodeLength
>004c					fp:	.byte ?		; floating-point stack index
>004d					FSExp:   .fill FDim	; FP stack exponent     array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSB array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th array
>831c	46 50				L1:	.text "FP"	;  name of word as a string, ending at wh_NameLastChar
>831e	02					.byte (("FP"[-1]&7)<<5)+(*-L1)	;wh_HNL
>831f	89 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8321	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8322	08					.byte NN	;wh_Flags	dictionary flags
=33438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8323	a9 4c		lda #$4c			lda #fp
.8325	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8328					en = *	; remember here
>8321	05					.byte CL	;wh_CodeLength
>8328	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
>832c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HNL
>832d	9e 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>832f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8330	08					.byte NN	;wh_Flags	dictionary flags
=33452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8331	a9 0a		lda #$0a			lda #FDim
.8333	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8336					en = *	; remember here
>832f	05					.byte CL	;wh_CodeLength
>8336	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
>833b	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>833c	ac 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>833e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>833f	08					.byte NN	;wh_Flags	dictionary flags
=33467					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8340	a9 4d		lda #$4d			lda #FSExp
.8342	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8345					en = *	; remember here
>833e	05					.byte CL	;wh_CodeLength
>8345	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
>834c	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>834d	bb 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>834f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8350	08					.byte NN	;wh_Flags	dictionary flags
=33484					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8351	a9 57		lda #$57			lda #FSMant0
.8353	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8356					en = *	; remember here
>834f	05					.byte CL	;wh_CodeLength
>8356	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
>835d	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>835e	cc 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8360	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8361	08					.byte NN	;wh_Flags	dictionary flags
=33501					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8362	a9 61		lda #$61			lda #FSMant1
.8364	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8367					en = *	; remember here
>8360	05					.byte CL	;wh_CodeLength
>8367	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
>836e	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>836f	dd 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8371	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8372	08					.byte NN	;wh_Flags	dictionary flags
=33518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8373	a9 6b		lda #$6b			lda #FSMant2
.8375	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8378					en = *	; remember here
>8371	05					.byte CL	;wh_CodeLength
>8378	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
>837f	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8380	ee 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8382	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8383	08					.byte NN	;wh_Flags	dictionary flags
=33535					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8384	a9 75		lda #$75			lda #FSMant3
.8386	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$8389					en = *	; remember here
>8382	05					.byte CL	;wh_CodeLength
>8389	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
>838f	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8390	ff 82					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8392	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8393	08					.byte NN	;wh_Flags	dictionary flags
=33551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8394	a9 05		lda #$05	FloatPlus:	lda #5
.8396	4c 9a c9	jmp $c99a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$8399					en = *	; remember here
>8392	05					.byte CL	;wh_CodeLength
>8399	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
>839f	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83a0	0f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83a3	08					.byte NN	;wh_Flags	dictionary flags
=33567					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83a4	a9 05		lda #$05	Floats:		lda #5
.83a6	20 9b b7	jsr $b79b			jsr PushZA
.83a9	4c 10 ae	jmp $ae10			jmp Star
=8					CL	.var *-(WordListLink+wh_Xt)
=$83ac					en = *	; remember here
>83a2	08					.byte CL	;wh_CodeLength
>83ac	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>83b4	6e
>83b5	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83b6	1f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83b8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83b9	08					.byte NN	;wh_Flags	dictionary flags
=33589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83ba	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.83bd	4c 9b b7	jmp $b79b			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$83c0					en = *	; remember here
>83b8	06					.byte CL	;wh_CodeLength
.83c0	60		rts				rts
>83c1	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>83c9	69 73 69 6f 6e
>83ce	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83cf	35 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83d2	08					.byte NN	;wh_Flags	dictionary flags
=33614					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83d3	20 83 b3	jsr $b383			jsr PopA
.83d6	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-(WordListLink+wh_Xt)
=$83d9					en = *	; remember here
>83d1	06					.byte CL	;wh_CodeLength
.83d9	60		rts				rts
>83da	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
>83df	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83e0	4e 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83e3	00					.byte 0	;wh_Flags	dictionary flags
=33631					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83e4	e6 4c		inc $4c		FDrop:		inc fp
=2					CL	.var *-(WordListLink+wh_Xt)
=$83e6					en = *	; remember here
>83e2	02					.byte CL	;wh_CodeLength
.83e6	60		rts				rts
>83e7	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
>83ed	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83ee	5f 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>83f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>83f1	00					.byte 0	;wh_Flags	dictionary flags
=33645					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.83f2	e6 4c		inc $4c		F2Drop:		inc fp
.83f4	e6 4c		inc $4c				inc fp
=4					CL	.var *-(WordListLink+wh_Xt)
=$83f6					en = *	; remember here
>83f0	04					.byte CL	;wh_CodeLength
.83f6	60		rts				rts
>83f7	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
>83fd	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>83fe	6d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8400	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8401	08					.byte NN	;wh_Flags	dictionary flags
=33661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8402	a9 0a		lda #$0a	FDepth:		lda #FDim
.8404	38		sec				sec
.8405	e5 4c		sbc $4c				sbc fp
.8407	4c 9b b7	jmp $b79b			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$840a					en = *	; remember here
>8400	08					.byte CL	;wh_CodeLength
>840a	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
>8411	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8412	7d 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8414	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8415	08					.byte NN	;wh_Flags	dictionary flags
=33681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8416	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.8418	a6 4c		ldx $4c				ldx fp		; X= floating point stack index
.841a	ca		dex				dex		; alloc FP stack entry
.841b	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.841d	b0 03		bcs $8422			bcs _err
.841f	86 4c		stx $4c				stx fp
.8421	60		rts				rts		; return X= FP stack index
.8422	0a		asl a		_err:		asl a		; save sign bit
.8423	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8425	6a		ror a				ror a		; restore sign bit
.8426	4c f7 b3	jmp $b3f7			jmp Throw_FPStack
=19					CL	.var *-(WordListLink+wh_Xt)
=$8429					en = *	; remember here
>8414	13					.byte CL	;wh_CodeLength
>8429	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
>842d	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>842e	91 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8430	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8431	08					.byte NN	;wh_Flags	dictionary flags
=33709					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8432	20 20 86	jsr $8620	FMax:		jsr FCmpA
.8435	10 ad		bpl $83e4			bpl FDrop
.8437	30 19		bmi $8452			bmi FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8439					en = *	; remember here
>8430	07					.byte CL	;wh_CodeLength
>8439	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
>843d	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>843e	ad 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8440	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8441	08					.byte NN	;wh_Flags	dictionary flags
=33725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8442	20 20 86	jsr $8620	FMin:		jsr FCmpA
.8445	30 9d		bmi $83e4			bmi FDrop
.8447	10 09		bpl $8452			bpl FNip
=7					CL	.var *-(WordListLink+wh_Xt)
=$8449					en = *	; remember here
>8440	07					.byte CL	;wh_CodeLength
>8449	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
>844d	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>844e	bd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8450	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8451	00					.byte 0	;wh_Flags	dictionary flags
=33741					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8452	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.8454	a6 4c		ldx $4c				ldx fp			; get FP stack index
.8456	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.8458	95 4e		sta $4e,x			sta FSExp+1,x
.845a	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.845c	95 58		sta $58,x			sta FSMant0+1,x
.845e	b5 61		lda $61,x			lda FSMant1+0,x
.8460	95 62		sta $62,x			sta FSMant1+1,x
.8462	b5 6b		lda $6b,x			lda FSMant2+0,x
.8464	95 6c		sta $6c,x			sta FSMant2+1,x
.8466	b5 75		lda $75,x			lda FSMant3+0,x
.8468	95 76		sta $76,x			sta FSMant3+1,x
.846a	e6 4c		inc $4c				inc fp			; FDrop
.846c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-(WordListLink+wh_Xt)
=$846e					en = *	; remember here
>8450	1c					.byte CL	;wh_CodeLength
.846e	60		rts				rts
>846f	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
>8473	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8474	cd 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8476	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8477	00					.byte 0	;wh_Flags	dictionary flags
=33779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8478	20 16 84	jsr $8416	FDup:		jsr FAllocX		; alloc FP stack entry
.847b	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.847d	95 4d		sta $4d,x			sta FSExp+0,x
.847f	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8481	95 57		sta $57,x			sta FSMant0+0,x
.8483	b5 62		lda $62,x			lda FSMant1+1,x
.8485	95 61		sta $61,x			sta FSMant1+0,x
.8487	b5 6c		lda $6c,x			lda FSMant2+1,x
.8489	95 6b		sta $6b,x			sta FSMant2+0,x
.848b	b5 76		lda $76,x			lda FSMant3+1,x
.848d	95 75		sta $75,x			sta FSMant3+0,x
.848f	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$8491					en = *	; remember here
>8476	19					.byte CL	;wh_CodeLength
.8491	60		rts				rts
>8492	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
>8497	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8498	f3 83					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>849a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>849b	00					.byte 0	;wh_Flags	dictionary flags
=33815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.849c	20 16 84	jsr $8416	FOver:		jsr FAllocX		; alloc FP stack entry
.849f	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.84a1	95 4d		sta $4d,x			sta FSExp+0,x
.84a3	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.84a5	95 57		sta $57,x			sta FSMant0+0,x
.84a7	b5 63		lda $63,x			lda FSMant1+2,x
.84a9	95 61		sta $61,x			sta FSMant1+0,x
.84ab	b5 6d		lda $6d,x			lda FSMant2+2,x
.84ad	95 6b		sta $6b,x			sta FSMant2+0,x
.84af	b5 77		lda $77,x			lda FSMant3+2,x
.84b1	95 75		sta $75,x			sta FSMant3+0,x
.84b3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-(WordListLink+wh_Xt)
=$84b5					en = *	; remember here
>849a	19					.byte CL	;wh_CodeLength
.84b5	60		rts				rts
>84b6	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
>84bb	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84bc	17 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84bf	00					.byte 0	;wh_Flags	dictionary flags
=33851					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84c0	20 83 b3	jsr $b383	FPick:		jsr PopA		; pop u
.84c3	18		clc		FPickA:		clc
.84c4	65 4c		adc $4c				adc fp
.84c6	a8		tay		FPick3:		tay
.84c7	20 16 84	jsr $8416			jsr FAllocX
.84ca	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.84cd	95 4d		sta $4d,x			sta FSExp,x
.84cf	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.84d2	95 57		sta $57,x			sta FSMant0,x
.84d4	b9 61 00	lda $0061,y			lda FSMant1,y
.84d7	95 61		sta $61,x			sta FSMant1,x
.84d9	b9 6b 00	lda $006b,y			lda FSMant2,y
.84dc	95 6b		sta $6b,x			sta FSMant2,x
.84de	b9 75 00	lda $0075,y			lda FSMant3,y
.84e1	95 75		sta $75,x			sta FSMant3,x
.84e3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-(WordListLink+wh_Xt)
=$84e5					en = *	; remember here
>84be	25					.byte CL	;wh_CodeLength
.84e5	60		rts				rts
>84e6	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
>84eb	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84ec	3b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ef	08					.byte NN	;wh_Flags	dictionary flags
=33899					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.84f0	20 9c 84	jsr $849c	F2Dup:		jsr FOver
.84f3	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$84f6					en = *	; remember here
>84ee	06					.byte CL	;wh_CodeLength
>84f6	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
>84fb	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>84fc	6b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>84fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>84ff	00					.byte 0	;wh_Flags	dictionary flags
=33915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8500	86 14		stx $14		FSwap:		stx tmp1		; save data stack index
.8502	a6 4c		ldx $4c				ldx fp			; X=FP stack index
.8504	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.8506	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8508	95 4e		sta $4e,x			sta FSExp+1,x
.850a	94 4d		sty $4d,x			sty FSExp+0,x
.850c	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.850e	b4 58		ldy $58,x			ldy FSMant0+1,x
.8510	95 58		sta $58,x			sta FSMant0+1,x
.8512	94 57		sty $57,x			sty FSMant0+0,x
.8514	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.8516	b4 62		ldy $62,x			ldy FSMant1+1,x
.8518	95 62		sta $62,x			sta FSMant1+1,x
.851a	94 61		sty $61,x			sty FSMant1+0,x
.851c	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.851e	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.8520	95 6c		sta $6c,x			sta FSMant2+1,x
.8522	94 6b		sty $6b,x			sty FSMant2+0,x
.8524	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.8526	b4 76		ldy $76,x			ldy FSMant3+1,x
.8528	95 76		sta $76,x			sta FSMant3+1,x
.852a	94 75		sty $75,x			sty FSMant3+0,x
.852c	a6 14		ldx $14				ldx tmp1		; restore data stack index
=46					CL	.var *-(WordListLink+wh_Xt)
=$852e					en = *	; remember here
>84fe	2e					.byte CL	;wh_CodeLength
.852e	60		rts				rts
>852f	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
>8534	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8535	7b 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8537	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8538	08					.byte NN	;wh_Flags	dictionary flags
=33972					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8539	20 00 85	jsr $8500	FTuck:		jsr FSwap
.853c	4c 9c 84	jmp $849c			jmp FOver
=6					CL	.var *-(WordListLink+wh_Xt)
=$853f					en = *	; remember here
>8537	06					.byte CL	;wh_CodeLength
>853f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
>8543	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8544	b4 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8546	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8547	00					.byte 0	;wh_Flags	dictionary flags
=33987					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8548	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.854a	a5 4c		lda $4c				lda fp			; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.854c	18		clc				clc
.854d	69 28		adc #$28			adc #4*FDim
.854f	d0 03		bne $8554			bne _3
.8551	8a		txa		_2:		txa			;    next byte
.8552	e9 0a		sbc #$0a			sbc #FDim
.8554	aa		tax		_3:		tax
.8555	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8557	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8559	94 4f		sty $4f,x			sty FSExp+2,x
.855b	b4 4d		ldy $4d,x			ldy FSExp+0,x
.855d	94 4e		sty $4e,x			sty FSExp+1,x
.855f	95 4d		sta $4d,x			sta FSExp+0,x
.8561	e4 4c		cpx $4c				cpx fp			; done?
.8563	d0 ec		bne $8551			bne _2
.8565	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-(WordListLink+wh_Xt)
=$8567					en = *	; remember here
>8546	1f					.byte CL	;wh_CodeLength
.8567	60		rts				rts
>8568	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
>856d	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>856e	c3 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8570	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8571	08					.byte NN	;wh_Flags	dictionary flags
=34029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8572	20 48 85	jsr $8548	FMRot:		jsr FRot
.8575	4c 48 85	jmp $8548			jmp FRot
=6					CL	.var *-(WordListLink+wh_Xt)
=$8578					en = *	; remember here
>8570	06					.byte CL	;wh_CodeLength
>8578	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
>857a	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>857b	ed 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>857d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>857e	00					.byte 0	;wh_Flags	dictionary flags
=34042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.857f	20 9f b3	jsr $b39f	FAt:		jsr PopYA		; pop addr
.8582	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8584	84 17		sty $17				sty tmp2+1
.8586	20 16 84	jsr $8416	FAt_Tmp2:	jsr FAllocX		; alloc FP stack entry
.8589	a0 00		ldy #$00			ldy #0			; copy mantissa
.858b	b1 16		lda ($16),y			lda (tmp2),y
.858d	95 75		sta $75,x			sta FSMant3,x
.858f	c8		iny				iny
.8590	b1 16		lda ($16),y			lda (tmp2),y
.8592	95 6b		sta $6b,x			sta FSMant2,x
.8594	c8		iny				iny
.8595	b1 16		lda ($16),y			lda (tmp2),y
.8597	95 61		sta $61,x			sta FSMant1,x
.8599	c8		iny				iny
.859a	b1 16		lda ($16),y			lda (tmp2),y
.859c	95 57		sta $57,x			sta FSMant0,x
.859e	c8		iny				iny			; copy exponent
.859f	b1 16		lda ($16),y			lda (tmp2),y
.85a1	95 4d		sta $4d,x			sta FSExp,x
.85a3	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-(WordListLink+wh_Xt)
=$85a5					en = *	; remember here
>857d	26					.byte CL	;wh_CodeLength
.85a5	60		rts				rts
>85a6	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
>85a8	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85a9	fa 84					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85ac	00					.byte 0	;wh_Flags	dictionary flags
=34088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85ad	20 9f b3	jsr $b39f	FStore:		jsr PopYA		; pop addr
.85b0	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.85b2	84 15		sty $15				sty tmp1+1
.85b4	86 16		stx $16				stx tmp2		; save data stack index
.85b6	a6 4c		ldx $4c				ldx fp			; Y= FP stack index
.85b8	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.85ba	a0 00		ldy #$00			ldy #0
.85bc	91 14		sta ($14),y			sta (tmp1),y
.85be	b5 6b		lda $6b,x			lda FSMant2,x
.85c0	c8		iny				iny
.85c1	91 14		sta ($14),y			sta (tmp1),y
.85c3	b5 61		lda $61,x			lda FSMant1,x
.85c5	c8		iny				iny
.85c6	91 14		sta ($14),y			sta (tmp1),y
.85c8	b5 57		lda $57,x			lda FSMant0,x
.85ca	c8		iny				iny
.85cb	91 14		sta ($14),y			sta (tmp1),y
.85cd	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.85cf	c8		iny				iny
.85d0	91 14		sta ($14),y			sta (tmp1),y
.85d2	e6 4c		inc $4c				inc fp			; FDrop
.85d4	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-(WordListLink+wh_Xt)
=$85d6					en = *	; remember here
>85ab	29					.byte CL	;wh_CodeLength
.85d6	60		rts				rts
>85d7	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
>85d9	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85da	28 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85dd	08					.byte NN	;wh_Flags	dictionary flags
=34137					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85de	a5 00		lda $00		FComma:		lda cp+0
.85e0	a4 01		ldy $01				ldy cp+1
.85e2	20 b0 85	jsr $85b0			jsr FStore_YA
.85e5	a9 05		lda #$05			lda #5			; Float
.85e7	20 9b b7	jsr $b79b			jsr PushZA
.85ea	4c 7d c0	jmp $c07d			jmp Allot
=15					CL	.var *-(WordListLink+wh_Xt)
=$85ed					en = *	; remember here
>85dc	0f					.byte CL	;wh_CodeLength
>85ed	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
>85f0	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>85f1	59 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>85f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>85f4	08					.byte NN	;wh_Flags	dictionary flags
=34160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.85f5	20 9f b3	jsr $b39f	FZStore:	jsr PopYA		; pop addr
.85f8	85 14		sta $14		FZStore_YA:	sta tmp1+0
.85fa	84 15		sty $15				sty tmp1+1
.85fc	a9 00		lda #$00			lda #0
.85fe	a0 04		ldy #$04			ldy #5-1
.8600	91 14		sta ($14),y	-		sta (tmp1),y
.8602	88		dey				dey
.8603	10 fb		bpl $8600			bpl -
=16					CL	.var *-(WordListLink+wh_Xt)
=$8605					en = *	; remember here
>85f3	10					.byte CL	;wh_CodeLength
.8605	60		rts				rts
>8606	46 43 6d 70			L1:	.text "FCmp"	;  name of word as a string, ending at wh_NameLastChar
>860a	04					.byte (("FCmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>860b	70 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>860d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>860e	08					.byte NN	;wh_Flags	dictionary flags
=34186					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.860f	20 20 86	jsr $8620			jsr FCmpA		; compare #s
.8612	a8		tay				tay			; return >0, 0, <0
.8613	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$8616					en = *	; remember here
>860d	07					.byte CL	;wh_CodeLength
>8616	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
>861b	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>861c	8a 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>861e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>861f	08					.byte NN	;wh_Flags	dictionary flags
=34203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8620	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8622	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.8624	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.8626	f0 35		beq $865d			beq _r2Zero
.8628	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.862a	f0 2b		beq $8657			beq _r1Zero
.862c	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.862e	30 3d		bmi $866d			bmi _MantissaSignDifferent
.8630	38		sec				sec			; compare exponent
.8631	b5 4e		lda $4e,x			lda FSExp+1,x
.8633	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8635	d0 2b		bne $8662			bne _ExponentDifferent
.8637	98		tya				tya			; compare mantissa MSB
.8638	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.863a	d0 17		bne $8653			bne _13
.863c	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.863e	f5 61		sbc $61,x			sbc FSMant1+0,x
.8640	d0 0c		bne $864e			bne _12
.8642	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8644	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8646	d0 06		bne $864e			bne _12
.8648	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.864a	f5 75		sbc $75,x			sbc FSMant3+0,x
.864c	f0 05		beq $8653			beq _13
.864e	6a		ror a		_12:		ror a
.864f	49 80		eor #$80	_14:		eor #$80
.8651	09 01		ora #$01			ora #1
.8653	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8655	a8		tay				tay			; set CPU flags
.8656	60		rts				rts
.8657	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.8659	d0 f4		bne $864f			bne _14
.865b	f0 f6		beq $8653			beq _13
.865d	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.865f	4c 53 86	jmp $8653			jmp _13
.8662					_ExponentDifferent:
.8662	50 02		bvc $8666			bvc +
.8664	49 80		eor #$80			eor #$80
.8666					+
.8666	55 57		eor $57,x			eor FSMant0+0,x
.8668	a6 14		ldx $14				ldx tmp1		; restore data stack index
.866a	09 01		ora #$01			ora #1			; set CPU flags
.866c	60		rts				rts
.866d					_MantissaSignDifferent:
.866d	98		tya				tya
.866e	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8670	09 01		ora #$01			ora #1
.8672	60		rts				rts
=83					CL	.var *-(WordListLink+wh_Xt)
=$8673					en = *	; remember here
>861e	53					.byte CL	;wh_CodeLength
>8673	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
>8678	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8679	9b 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>867b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>867c	08					.byte NN	;wh_Flags	dictionary flags
=34296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.867d	a4 4c		ldy $4c		Floor:		ldy fp
.867f	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.8682	10 19		bpl $869d			bpl _a
.8684	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.8687	10 14		bpl $869d			bpl _a
.8689	a9 80		lda #$80			lda #$80		; return -1
.868b	99 57 00	sta $0057,y			sta FSMant0,y
.868e	a9 00		lda #$00			lda #0
.8690	99 4d 00	sta $004d,y			sta FSExp,y
.8693	99 61 00	sta $0061,y			sta FSMant1,y
.8696	99 6b 00	sta $006b,y			sta FSMant2,y
.8699	99 75 00	sta $0075,y			sta FSMant3,y
.869c	60		rts				rts
.869d	a9 1f		lda #$1f	_a:		lda #31
.869f	20 a5 86	jsr $86a5			jsr FIntAlignA
.86a2	4c a0 8a	jmp $8aa0			jmp FNorm
=40					CL	.var *-(WordListLink+wh_Xt)
=$86a5					en = *	; remember here
>867b	28					.byte CL	;wh_CodeLength
.86a5					FIntAlignA:
.86a5	85 16		sta $16				sta tmp2+0		; save alignment
.86a7	46 15		lsr $15				lsr tmp1+1		; init saved lo bit
.86a9	86 14		stx $14				stx tmp1+0		; save data stack index
.86ab	a6 4c		ldx $4c				ldx fp			; X= FP stack index
.86ad	b5 57		lda $57,x			lda FSMant0,x
.86af	b4 4d		ldy $4d,x			ldy FSExp,x
.86b1	10 18		bpl $86cb			bpl _18
.86b3	a4 16		ldy $16				ldy tmp2+0		; return zero
.86b5	a9 00		lda #$00			lda #0
.86b7	95 61		sta $61,x			sta FSMant1,x
.86b9	95 6b		sta $6b,x			sta FSMant2,x
.86bb	95 75		sta $75,x			sta FSMant3,x
.86bd	f0 10		beq $86cf			beq _30
.86bf	c8		iny		_12:		iny			; exp += 1
.86c0	c9 80		cmp #$80			cmp #$80		; mantissa >>=1
.86c2	6a		ror a				ror a
.86c3	76 61		ror $61,x			ror FSMant1,x
.86c5	76 6b		ror $6b,x			ror FSMant2,x
.86c7	76 75		ror $75,x			ror FSMant3,x
.86c9	66 15		ror $15				ror tmp1+1		; save lo bit
.86cb	c4 16		cpy $16		_18:		cpy tmp2+0		; while exp<alignment
.86cd	90 f0		bcc $86bf			bcc _12
.86cf	95 57		sta $57,x	_30:		sta FSMant0,x
.86d1	94 4d		sty $4d,x			sty FSExp,x
.86d3	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.86d5	06 15		asl $15				asl tmp1+1		; set carry bit
.86d7	60		rts				rts
>86d8	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
>86de	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86df	f8 85					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86e1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86e2	08					.byte NN	;wh_Flags	dictionary flags
=34398					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86e3	a4 4c		ldy $4c		FTrunc:		ldy fp
.86e5	b9 57 00	lda $0057,y			lda FSMant0,y
.86e8	10 93		bpl $867d			bpl Floor
.86ea	20 a2 8b	jsr $8ba2			jsr FNegate
.86ed	20 7d 86	jsr $867d			jsr Floor
.86f0	4c a2 8b	jmp $8ba2			jmp FNegate
>86f3	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
>86f9	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HNL
>86fa	5e 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>86fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>86fd	08					.byte NN	;wh_Flags	dictionary flags
=34425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.86fe	a9 1f		lda #$1f	FRound:		lda #31
.8700	20 a5 86	jsr $86a5			jsr FIntAlignA
.8703	90 03		bcc $8708			bcc _15
.8705	4c 5e 8b	jmp $8b5e			jmp F1Plus
.8708	4c a0 8a	jmp $8aa0	_15:		jmp FNorm
=13					CL	.var *-(WordListLink+wh_Xt)
=$870b					en = *	; remember here
>86fc	0d					.byte CL	;wh_CodeLength
>870b	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
>8712	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8713	79 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8715	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8716	08					.byte NN	;wh_Flags	dictionary flags
=34450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8717	20 78 84	jsr $8478	FIntFrc:	jsr FDup	; ( r1 r1 )
.871a	20 7d 86	jsr $867d			jsr Floor	; ( r1 rint )
.871d	20 39 85	jsr $8539			jsr FTuck	; ( rint r1 rint )
.8720	20 6b 8b	jsr $8b6b			jsr FMinus	; ( rint rfrac )
.8723	4c 00 85	jmp $8500			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-(WordListLink+wh_Xt)
=$8726					en = *	; remember here
>8715	0f					.byte CL	;wh_CodeLength
>8726	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
>8729	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>872a	92 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>872c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>872d	08					.byte NN	;wh_Flags	dictionary flags
=34473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.872e	a4 4c		ldy $4c		FZEq:		ldy fp
.8730	b9 57 00	lda $0057,y			lda FSMant0,y
.8733	d0 26		bne $875b			bne FFalse1
.8735					FTrue1:
.8735	e6 4c		inc $4c				inc fp		; FDrop
.8737	4c 79 b7	jmp $b779			jmp True	; return true
=12					CL	.var *-(WordListLink+wh_Xt)
=$873a					en = *	; remember here
>872c	0c					.byte CL	;wh_CodeLength
>873a	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
>873e	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>873f	a9 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8741	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8742	08					.byte NN	;wh_Flags	dictionary flags
=34494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8743	a4 4c		ldy $4c		FZNe:		ldy fp
.8745	b9 57 00	lda $0057,y			lda FSMant0,y
.8748	f0 11		beq $875b			beq FFalse1
.874a	d0 e9		bne $8735			bne FTrue1
=9					CL	.var *-(WordListLink+wh_Xt)
=$874c					en = *	; remember here
>8741	09					.byte CL	;wh_CodeLength
>874c	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
>874f	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8750	be 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8752	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8753	08					.byte NN	;wh_Flags	dictionary flags
=34511					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8754	a4 4c		ldy $4c		FZLt:		ldy fp
.8756	b9 57 00	lda $0057,y			lda FSMant0,y
.8759	30 da		bmi $8735			bmi FTrue1
.875b					FFalse1:
.875b	e6 4c		inc $4c				inc fp		; FDrop
.875d	4c 8c b7	jmp $b78c			jmp False	; return false
=12					CL	.var *-(WordListLink+wh_Xt)
=$8760					en = *	; remember here
>8752	0c					.byte CL	;wh_CodeLength
>8760	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
>8764	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>8765	cf 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8768	08					.byte NN	;wh_Flags	dictionary flags
=34532					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8769	a4 4c		ldy $4c		FZGe:		ldy fp
.876b	b9 57 00	lda $0057,y			lda FSMant0,y
.876e	10 c5		bpl $8735			bpl FTrue1
.8770	30 e9		bmi $875b			bmi FFalse1
=9					CL	.var *-(WordListLink+wh_Xt)
=$8772					en = *	; remember here
>8767	09					.byte CL	;wh_CodeLength
>8772	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
>8775	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8776	e4 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8778	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8779	08					.byte NN	;wh_Flags	dictionary flags
=34549					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.877a	a4 4c		ldy $4c		FZGt:		ldy fp
.877c	b9 57 00	lda $0057,y			lda FSMant0,y
.877f	30 da		bmi $875b			bmi FFalse1
.8781	d0 b2		bne $8735			bne FTrue1
.8783	f0 d6		beq $875b			beq FFalse1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8785					en = *	; remember here
>8778	0b					.byte CL	;wh_CodeLength
>8785	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
>8789	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>878a	f5 86					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>878c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>878d	08					.byte NN	;wh_Flags	dictionary flags
=34569					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.878e	a4 4c		ldy $4c		FZLe:		ldy fp
.8790	b9 57 00	lda $0057,y			lda FSMant0,y
.8793	30 a0		bmi $8735			bmi FTrue1
.8795	d0 c4		bne $875b			bne FFalse1
.8797	f0 9c		beq $8735			beq FTrue1
=11					CL	.var *-(WordListLink+wh_Xt)
=$8799					en = *	; remember here
>878c	0b					.byte CL	;wh_CodeLength
>8799	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
>879b	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>879c	09 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>879e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>879f	08					.byte NN	;wh_Flags	dictionary flags
=34587					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87a0	20 20 86	jsr $8620	FLt:		jsr FCmpA
.87a3	30 35		bmi $87da			bmi FTrue2
.87a5					FFalse2:
.87a5	e6 4c		inc $4c				inc fp		; FDrop
.87a7	e6 4c		inc $4c				inc fp		; FDrop
.87a9	4c 8c b7	jmp $b78c			jmp False	; return False
=12					CL	.var *-(WordListLink+wh_Xt)
=$87ac					en = *	; remember here
>879e	0c					.byte CL	;wh_CodeLength
>87ac	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
>87af	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87b0	1b 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87b3	08					.byte NN	;wh_Flags	dictionary flags
=34607					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87b4	20 20 86	jsr $8620	FGe:		jsr FCmpA
.87b7	10 21		bpl $87da			bpl FTrue2
.87b9	30 ea		bmi $87a5			bmi FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87bb					en = *	; remember here
>87b2	07					.byte CL	;wh_CodeLength
>87bb	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
>87bd	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87be	2f 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87c1	08					.byte NN	;wh_Flags	dictionary flags
=34621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87c2	20 20 86	jsr $8620	FGt:		jsr FCmpA
.87c5	30 de		bmi $87a5			bmi FFalse2
.87c7	d0 11		bne $87da			bne FTrue2
.87c9	f0 da		beq $87a5			beq FFalse2
=9					CL	.var *-(WordListLink+wh_Xt)
=$87cb					en = *	; remember here
>87c0	09					.byte CL	;wh_CodeLength
>87cb	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
>87ce	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87cf	3d 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87d2	08					.byte NN	;wh_Flags	dictionary flags
=34638					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87d3	20 20 86	jsr $8620	FLe:		jsr FCmpA
.87d6	30 02		bmi $87da			bmi FTrue2
.87d8	d0 cb		bne $87a5			bne FFalse2
.87da					FTrue2:
.87da	e6 4c		inc $4c				inc fp		; FDrop
.87dc	e6 4c		inc $4c				inc fp		; FDrop
.87de	4c 79 b7	jmp $b779			jmp True	; return True
=14					CL	.var *-(WordListLink+wh_Xt)
=$87e1					en = *	; remember here
>87d1	0e					.byte CL	;wh_CodeLength
>87e1	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
>87e4	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>87e5	4e 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87e8	08					.byte NN	;wh_Flags	dictionary flags
=34660					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87e9	20 20 86	jsr $8620	FNe:		jsr FCmpA
.87ec	d0 ec		bne $87da			bne FTrue2
.87ee	f0 b5		beq $87a5			beq FFalse2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87f0					en = *	; remember here
>87e7	07					.byte CL	;wh_CodeLength
>87f0	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
>87f2	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HNL
>87f3	64 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>87f5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>87f6	08					.byte NN	;wh_Flags	dictionary flags
=34674					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.87f7	20 20 86	jsr $8620	FEq:		jsr FCmpA
.87fa	d0 a9		bne $87a5			bne FFalse2
.87fc	f0 dc		beq $87da			beq FTrue2
=7					CL	.var *-(WordListLink+wh_Xt)
=$87fe					en = *	; remember here
>87f5	07					.byte CL	;wh_CodeLength
>87fe	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
>8803	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8804	72 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8806	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8807	08					.byte NN	;wh_Flags	dictionary flags
=34691					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8808	20 72 85	jsr $8572	FTAbs:		jsr FMRot
.880b	20 6b 8b	jsr $8b6b			jsr FMinus
.880e	20 c9 8b	jsr $8bc9			jsr FAbs
.8811	4c c2 87	jmp $87c2			jmp FGt
=12					CL	.var *-(WordListLink+wh_Xt)
=$8814					en = *	; remember here
>8806	0c					.byte CL	;wh_CodeLength
>8814	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
>8819	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HNL
>881a	83 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>881c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>881d	08					.byte NN	;wh_Flags	dictionary flags
=34713					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.881e	20 9c 84	jsr $849c	FTRel:		jsr FOver
.8821	a9 03		lda #$03			lda #3
.8823	20 c3 84	jsr $84c3			jsr FPickA
.8826	20 29 8b	jsr $8b29			jsr FPlus
.8829	20 c9 8b	jsr $8bc9			jsr FAbs
.882c	20 fd 8b	jsr $8bfd			jsr FStar		; r1 r2 r3*|r1+r2|
.882f	20 72 85	jsr $8572			jsr FMRot		; r3*|r1+r2| r1 r2
.8832	20 6b 8b	jsr $8b6b			jsr FMinus
.8835	20 c9 8b	jsr $8bc9			jsr FAbs
.8838	4c c2 87	jmp $87c2			jmp FGt
=29					CL	.var *-(WordListLink+wh_Xt)
=$883b					en = *	; remember here
>881c	1d					.byte CL	;wh_CodeLength
>883b	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
>883d	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HNL
>883e	99 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8840	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8841	08					.byte NN	;wh_Flags	dictionary flags
=34749					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8842	a4 4c		ldy $4c		FTilde:		ldy fp
.8844	b9 57 00	lda $0057,y			lda FSMant0,y
.8847	30 06		bmi $884f			bmi _10			; r3<0
.8849	d0 bd		bne $8808			bne FTAbs		; r3>0
.884b	e6 4c		inc $4c				inc fp			; r3=0
.884d	d0 a8		bne $87f7			bne FEq
.884f	20 a2 8b	jsr $8ba2	_10:		jsr FNegate
.8852	4c 1e 88	jmp $881e			jmp FTRel
=19					CL	.var *-(WordListLink+wh_Xt)
=$8855					en = *	; remember here
>8840	13					.byte CL	;wh_CodeLength
>8855	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>885d	65
>885e	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>885f	bd 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8861	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8862	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8863	20 74 c1	jsr $c174	FVariable:	jsr Create		; compile word header & push PFA adr
.8866	20 ae bb	jsr $bbae			jsr adjust_z		; fix word code length
.8869	20 ec 88	jsr $88ec			jsr F0			; alloc & init data
.886c	4c de 85	jmp $85de			jmp FComma
=12					CL	.var *-(WordListLink+wh_Xt)
=$886f					en = *	; remember here
>8861	0c					.byte CL	;wh_CodeLength
>886f	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
>8877	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8878	de 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>887a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>887b	0c					.byte IM+NN	;wh_Flags	dictionary flags
=34807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.887c	20 91 88	jsr $8891	FLiteral:	jsr FLitTest
.887f	f0 0a		beq $888b			beq _Short
.8881	a9 cc		lda #$cc			lda #<FLitI		; compile JSR FLitI
.8883	a0 88		ldy #$88			ldy #>FLitI
.8885	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.8888	4c de 85	jmp $85de			jmp FComma		; inline operand, return
.888b	20 9d 88	jsr $889d	_Short:		jsr FLitShort
.888e	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-(WordListLink+wh_Xt)
=$8891					en = *	; remember here
>887a	15					.byte CL	;wh_CodeLength
.8891					FLitTest:
.8891	a4 4c		ldy $4c				ldy fp
.8893	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8896	19 6b 00	ora $006b,y			ora FSMant2,y
.8899	19 75 00	ora $0075,y			ora FSMant3,y
.889c	60		rts				rts
.889d					FLitShort:
.889d	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.889f	20 94 cc	jsr $cc94			jsr C_Comma_A
.88a2	b9 57 00	lda $0057,y			lda FSMant0,y
.88a5	20 94 cc	jsr $cc94			jsr C_Comma_A
.88a8	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.88aa	20 94 cc	jsr $cc94			jsr C_Comma_A
.88ad	b9 4d 00	lda $004d,y			lda FSExp,y
.88b0	20 94 cc	jsr $cc94			jsr C_Comma_A
.88b3	e6 4c		inc $4c				inc fp			; FDrop
.88b5	a9 ba		lda #$ba			lda #<FLitYA		; point at FLitYA
.88b7	a0 88		ldy #$88			ldy #>FLitYA
.88b9	60		rts				rts
.88ba					FLitYA:
.88ba	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.88bd	94 4d		sty $4d,x			sty FSExp,x
.88bf	95 57		sta $57,x			sta FSMant0,x
.88c1	a9 00		lda #$00			lda #0
.88c3	95 61		sta $61,x			sta FSMant1,x
.88c5	95 6b		sta $6b,x			sta FSMant2,x
.88c7	95 75		sta $75,x			sta FSMant3,x
.88c9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88cb	60		rts				rts
.88cc					FLitI:
.88cc	68		pla				pla			; tmp2= RTS addr
.88cd	85 16		sta $16				sta tmp2+0
.88cf	18		clc				clc			; bump RTS addr over inline data
.88d0	69 05		adc #$05			adc #5
.88d2	a8		tay				tay
.88d3	68		pla				pla
.88d4	85 17		sta $17				sta tmp2+1
.88d6	69 00		adc #$00			adc #0
.88d8	48		pha				pha
.88d9	98		tya				tya
.88da	48		pha				pha
.88db	e6 16		inc $16				inc tmp2+0		; tmp2 +=1 1 (correct RTS addr)
.88dd	d0 02		bne $88e1			bne +
.88df	e6 17		inc $17				inc tmp2+1
.88e1					+
.88e1	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>88e4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
>88e7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88e8	f7 87					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88eb	08					.byte NN	;wh_Flags	dictionary flags
=34919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88ec	a9 00		lda #$00	F0:		lda #0
.88ee	a0 80		ldy #$80			ldy #$80
.88f0	d0 c8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$88f2					en = *	; remember here
>88ea	06					.byte CL	;wh_CodeLength
>88f2	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
>88f8	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>88f9	67 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>88fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>88fc	08					.byte NN	;wh_Flags	dictionary flags
=34936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.88fd	a9 7d		lda #$7d	F1000:		lda #$7d
.88ff	a0 0a		ldy #$0a			ldy #10
.8901	d0 b7		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8903					en = *	; remember here
>88fb	06					.byte CL	;wh_CodeLength
>8903	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
>8907	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8908	78 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>890a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>890b	08					.byte NN	;wh_Flags	dictionary flags
=34951					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.890c	a9 50		lda #$50	F10:		lda #$50
.890e	a0 04		ldy #$04			ldy #4
.8910	d0 a8		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8912					en = *	; remember here
>890a	06					.byte CL	;wh_CodeLength
>8912	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
>8915	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8916	87 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8918	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8919	08					.byte NN	;wh_Flags	dictionary flags
=34965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.891a	a9 40		lda #$40	F2:		lda #$40
.891c	a0 02		ldy #$02			ldy #2
.891e	d0 9a		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$8920					en = *	; remember here
>8918	06					.byte CL	;wh_CodeLength
>8920	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
>8923	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8924	95 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8926	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8927	08					.byte NN	;wh_Flags	dictionary flags
=34979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8928	a9 40		lda #$40	F1:		lda #$40
.892a	a0 01		ldy #$01			ldy #1
.892c	d0 8c		bne $88ba			bne FLitYA
=6					CL	.var *-(WordListLink+wh_Xt)
=$892e					en = *	; remember here
>8926	06					.byte CL	;wh_CodeLength
>892e	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
>8931	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8932	a3 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8934	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8935	08					.byte NN	;wh_Flags	dictionary flags
=34993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8936	20 bb 89	jsr $89bb	F10th:		jsr FConstantRun
>8939	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>893d	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$893e					en = *	; remember here
>8934	08					.byte CL	;wh_CodeLength
>893e	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
>8940	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8941	b1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8943	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8944	08					.byte NN	;wh_Flags	dictionary flags
=35008					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8945	20 bb 89	jsr $89bb	FPi:		jsr FConstantRun
>8948	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>894c	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$894d					en = *	; remember here
>8943	08					.byte CL	;wh_CodeLength
>894d	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
>8951	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8952	c0 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8954	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8955	08					.byte NN	;wh_Flags	dictionary flags
=35025					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8956	20 bb 89	jsr $89bb	FPiH:		jsr FConstantRun
>8959	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>895d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$895e					en = *	; remember here
>8954	08					.byte CL	;wh_CodeLength
>895e	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
>8962	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8963	d1 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8965	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8966	08					.byte NN	;wh_Flags	dictionary flags
=35042					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8967	20 bb 89	jsr $89bb	FPiQ:		jsr FConstantRun
>896a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>896e	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$896f					en = *	; remember here
>8965	08					.byte CL	;wh_CodeLength
>896f	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
>8972	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8973	e2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8975	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8976	08					.byte NN	;wh_Flags	dictionary flags
=35058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8977	20 bb 89	jsr $89bb	F2Pi:		jsr FConstantRun
>897a	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>897e	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$897f					en = *	; remember here
>8975	08					.byte CL	;wh_CodeLength
>897f	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
>8982	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8983	f2 88					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8985	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8986	08					.byte NN	;wh_Flags	dictionary flags
=35074					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8987	20 bb 89	jsr $89bb	FE:		jsr FConstantRun
>898a	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>898e	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-(WordListLink+wh_Xt)
=$898f					en = *	; remember here
>8985	08					.byte CL	;wh_CodeLength
>898f	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8997	74
>8998	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8999	02 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>899b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>899c	08					.byte NN	;wh_Flags	dictionary flags
=35096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.899d	20 d7 c0	jsr $c0d7	FConstant:	jsr Header_Comma	; compile word header
.89a0	20 91 88	jsr $8891			jsr FLitTest		; will short work?
.89a3	f0 0d		beq $89b2			beq _Short
.89a5	a9 bb		lda #$bb			lda #<FConstantRun	; compile call
.89a7	a0 89		ldy #$89			ldy #>FConstantRun
.89a9	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.89ac	20 ae bb	jsr $bbae			jsr adjust_z
.89af	4c de 85	jmp $85de			jmp FComma		; inline operand, & return
.89b2					_Short:
.89b2	20 9d 88	jsr $889d			jsr FLitShort		; compile load value
.89b5	20 ea cc	jsr $ccea			jsr Jmp_Comma_YA
.89b8	4c ae bb	jmp $bbae			jmp adjust_z
=30					CL	.var *-(WordListLink+wh_Xt)
=$89bb					en = *	; remember here
>899b	1e					.byte CL	;wh_CodeLength
.89bb					FConstantRun:
.89bb	68		pla				pla			; tmp2= pop RTS addr & add 1
.89bc	18		clc				clc
.89bd	69 01		adc #$01			adc #1
.89bf	85 16		sta $16				sta tmp2+0
.89c1	68		pla				pla
.89c2	69 00		adc #$00			adc #0
.89c4	85 17		sta $17				sta tmp2+1
.89c6	4c 86 85	jmp $8586			jmp FAt_Tmp2		; fetch inline data, & return
>89c9	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
>89cf	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89d0	18 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=35151					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89d4	20 d7 c0	jsr $c0d7	FValue:		jsr Header_Comma	; compile word header
.89d7	a9 e4		lda #$e4			lda #<FValue_runtime	; compile JSR FValue_runtime
.89d9	a0 89		ldy #$89			ldy #>FValue_runtime
.89db	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.89de	20 ae bb	jsr $bbae			jsr adjust_z		; fix word length
.89e1	4c de 85	jmp $85de			jmp FComma		; alloc & init value
=16					CL	.var *-(WordListLink+wh_Xt)
=$89e4					en = *	; remember here
>89d2	10					.byte CL	;wh_CodeLength
.89e4					FValue_runtime:
.89e4	4c bb 89	jmp $89bb			jmp FConstantRun
>89e7	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
>89ed	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HNL
>89ee	4f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>89f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>89f1	08					.byte NN	;wh_Flags	dictionary flags
=35181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.89f2	20 83 b3	jsr $b383	FScale:		jsr PopA		; pop n
.89f5	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.89f7	a6 4c		ldx $4c				ldx fp
.89f9	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.89fb	f0 07		beq $8a04			beq _8
.89fd	18		clc				clc
.89fe	75 4d		adc $4d,x			adc FSExp,x
.8a00	95 4d		sta $4d,x			sta FSExp,x
.8a02	70 03		bvs $8a07			bvs _overflow		; overflow or underflow?
.8a04	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.8a06	60		rts				rts
.8a07					_overflow:
.8a07	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8a09	20 01 b4	jsr $b401			jsr Throw_FpOutOfRange
=26					CL	.var *-(WordListLink+wh_Xt)
=$8a0c					en = *	; remember here
>89f0	1a					.byte CL	;wh_CodeLength
>8a0c	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
>8a0f	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a10	6d 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a12	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a13	08					.byte NN	;wh_Flags	dictionary flags
=35215					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a14	a9 01		lda #$01	F2Star:		lda #1
.8a16	d0 dd		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a18					en = *	; remember here
>8a12	04					.byte CL	;wh_CodeLength
>8a18	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
>8a1b	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a1c	8f 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a1f	08					.byte NN	;wh_Flags	dictionary flags
=35227					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a20	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8a22	d0 d1		bne $89f5			bne FScaleA
=4					CL	.var *-(WordListLink+wh_Xt)
=$8a24					en = *	; remember here
>8a1e	04					.byte CL	;wh_CodeLength
>8a24	2b 8a				L1:	.text FMAlignX	;  name of word as a string, ending at wh_NameLastChar
>8a26	82					.byte ((FMAlignX[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a27	9b 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a29	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a2a	08					.byte NN	;wh_Flags	dictionary flags
=35238					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8a2b	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a2d	a6 4c		ldx $4c				ldx fp		; load FP stack index
.8a2f	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for 2 entries
.8a31	b0 60		bcs $8a93			bcs Throw_FPStack_3
.8a33	b5 4d		lda $4d,x			lda FSExp+0,x
.8a35	38		sec				sec
.8a36	f5 4e		sbc $4e,x			sbc FSExp+1,x	; compare exponents
.8a38	a8		tay				tay
.8a39	f0 22		beq $8a5d			beq _rts	; already = ?
.8a3b	10 2b		bpl $8a68			bpl _2		; r2 smaller?
.8a3d					_1:
.8a3d	70 4a		bvs $8a89			bvs _2z		; was this a big positive #?
.8a3f	c0 e0		cpy #$e0			cpy #-32
.8a41	90 1b		bcc $8a5e			bcc _1z		; all significant bits gone?
.8a43	b5 57		lda $57,x			lda FSMant0+0,x
.8a45	29 80		and #$80			and #$80
.8a47	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a49	b5 57		lda $57,x			lda FSMant0+0,x
.8a4b	4a		lsr a		_1s:		lsr a
.8a4c	05 15		ora $15				ora tmp1+1
.8a4e	76 61		ror $61,x			ror FSMant1+0,x
.8a50	76 6b		ror $6b,x			ror FSMant2+0,x
.8a52	76 75		ror $75,x			ror FSMant3+0,x
.8a54	c8		iny				iny
.8a55	d0 f4		bne $8a4b			bne _1s
.8a57	95 57		sta $57,x	_1e:		sta FSMant0+0,x
.8a59	b5 4e		lda $4e,x			lda FSExp+1,x
.8a5b	95 4d		sta $4d,x			sta FSExp+0,x
.8a5d	60		rts		_rts:		rts
.8a5e	a9 00		lda #$00	_1z:		lda #0		; TOS=0
.8a60	95 61		sta $61,x			sta FSMant1+0,x
.8a62	95 6b		sta $6b,x			sta FSMant2+0,x
.8a64	95 75		sta $75,x			sta FSMant3+0,x
.8a66	f0 ef		beq $8a57			beq _1e
.8a68					_2:
.8a68	70 f4		bvs $8a5e			bvs _1z		; was this a big negative #?
.8a6a	c0 20		cpy #$20			cpy #32
.8a6c	b0 1b		bcs $8a89			bcs _2z		; all significant bits gone?
.8a6e	b5 58		lda $58,x			lda FSMant0+1,x
.8a70	29 80		and #$80			and #$80
.8a72	85 15		sta $15				sta tmp1+1	; prepare sign for shifts
.8a74	b5 58		lda $58,x			lda FSMant0+1,x
.8a76	4a		lsr a		_2s:		lsr a
.8a77	05 15		ora $15				ora tmp1+1
.8a79	76 62		ror $62,x			ror FSMant1+1,x
.8a7b	76 6c		ror $6c,x			ror FSMant2+1,x
.8a7d	76 76		ror $76,x			ror FSMant3+1,x
.8a7f	88		dey				dey
.8a80	d0 f4		bne $8a76			bne _2s
.8a82	95 58		sta $58,x	_2e:		sta FSMant0+1,x
.8a84	b5 4d		lda $4d,x			lda FSExp+0,x
.8a86	95 4e		sta $4e,x			sta FSExp+1,x
.8a88	60		rts				rts
.8a89	a9 00		lda #$00	_2z:		lda #0		; NOS=0
.8a8b	95 62		sta $62,x			sta FSMant1+1,x
.8a8d	95 6c		sta $6c,x			sta FSMant2+1,x
.8a8f	95 76		sta $76,x			sta FSMant3+1,x
.8a91	f0 ef		beq $8a82			beq _2e
=104					CL	.var *-(WordListLink+wh_Xt)
=$8a93					en = *	; remember here
>8a29	68					.byte CL	;wh_CodeLength
.8a93	4c f7 b3	jmp $b3f7	Throw_FPStack_3: jmp Throw_FPStack
>8a96	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
>8a9b	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8a9c	a6 89					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8a9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8a9f	08					.byte NN	;wh_Flags	dictionary flags
=35355					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8aa0	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8aa2	a6 4c		ldx $4c		FNormX:		ldx fp			; switch to FP stack
.8aa4	b4 4d		ldy $4d,x			ldy FSExp,x
.8aa6	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8aa8	30 2d		bmi $8ad7			bmi _Neg
.8aaa	d0 0f		bne $8abb			bne _Pos2		; do byte shift
.8aac	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aaf	d0 0a		bne $8abb			bne _Pos2
.8ab1	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab4	d0 05		bne $8abb			bne _Pos2
.8ab6	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ab9	f0 43		beq $8afe			beq _zero		; no significant bits left?
.8abb	18		clc		_Pos2:		clc
.8abc	30 0a		bmi $8ac8			bmi _RShft
.8abe	88		dey		_Pos3:		dey			; do bit shift
.8abf	16 75		asl $75,x			asl FSMant3,x
.8ac1	36 6b		rol $6b,x			rol FSMant2,x
.8ac3	36 61		rol $61,x			rol FSMant1,x
.8ac5	2a		rol a				rol a
.8ac6	10 f6		bpl $8abe			bpl _Pos3
.8ac8					_RShft:
.8ac8	c8		iny				iny
.8ac9	6a		ror a				ror a
.8aca	76 61		ror $61,x			ror FSMant1,x
.8acc	76 6b		ror $6b,x			ror FSMant2,x
.8ace	76 75		ror $75,x			ror FSMant3,x
.8ad0					_28:
.8ad0	95 57		sta $57,x			sta FSMant0,x
.8ad2	94 4d		sty $4d,x			sty FSExp,x
.8ad4	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ad6	60		rts				rts
.8ad7					_Neg:
.8ad7	c9 ff		cmp #$ff			cmp #$ff
.8ad9	d0 11		bne $8aec			bne _Neg2	; do byte shift
.8adb	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ade	c9 ff		cmp #$ff			cmp #$ff
.8ae0	d0 0a		bne $8aec			bne _Neg2
.8ae2	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8ae5	c9 ff		cmp #$ff			cmp #$ff
.8ae7	d0 03		bne $8aec			bne _Neg2
.8ae9	20 0a 8b	jsr $8b0a			jsr _ShiftB
.8aec	c9 00		cmp #$00	_Neg2:		cmp #0
.8aee	10 d8		bpl $8ac8			bpl _RShft
.8af0	88		dey		_Neg3:		dey
.8af1	16 75		asl $75,x			asl FSMant3,x
.8af3	36 6b		rol $6b,x			rol FSMant2,x
.8af5	36 61		rol $61,x			rol FSMant1,x
.8af7	2a		rol a				rol a
.8af8	30 f6		bmi $8af0			bmi _Neg3
.8afa	10 cc		bpl $8ac8			bpl _RShft
.8afc	68		pla		_Zerop:		pla
.8afd	68		pla				pla		; pop rts addr from _ShiftB
.8afe	a9 00		lda #$00	_zero:		lda #0
.8b00	95 75		sta $75,x			sta FSMant3,x
.8b02	95 6b		sta $6b,x			sta FSMant2,x
.8b04	95 61		sta $61,x			sta FSMant1,x
.8b06	a0 80		ldy #$80			ldy #$80
.8b08	d0 c6		bne $8ad0			bne _28
.8b0a					_ShiftB:
.8b0a	98		tya				tya
.8b0b	38		sec				sec
.8b0c	e9 08		sbc #$08			sbc #8
.8b0e	a8		tay				tay
.8b0f	70 eb		bvs $8afc			bvs _zerop	;is this useful? do we need more of them?
.8b11	b5 61		lda $61,x			lda FSMant1,x
.8b13	48		pha				pha
.8b14	b5 6b		lda $6b,x			lda FSMant2,x
.8b16	95 61		sta $61,x			sta FSMant1,x
.8b18	b5 75		lda $75,x			lda FSMant3,x
.8b1a	95 6b		sta $6b,x			sta FSMant2,x
.8b1c	a9 00		lda #$00			lda #0
.8b1e	95 75		sta $75,x			sta FSMant3,x
.8b20	68		pla				pla
.8b21	60		rts				rts
=130					CL	.var *-(WordListLink+wh_Xt)
=$8b22					en = *	; remember here
>8a9e	82					.byte CL	;wh_CodeLength
>8b22	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
>8b24	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b25	1b 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b27	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b28	08					.byte NN	;wh_Flags	dictionary flags
=35492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b29	20 2b 8a	jsr $8a2b	FPlus:		jsr FMAlignX	; align mantissas
.8b2c	18		clc				clc		; add mantissas
.8b2d	b5 76		lda $76,x			lda FSMant3+1,x
.8b2f	75 75		adc $75,x			adc FSMant3+0,x
.8b31	95 76		sta $76,x			sta FSMant3+1,x
.8b33	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b35	75 6b		adc $6b,x			adc FSMant2+0,x
.8b37	95 6c		sta $6c,x			sta FSMant2+1,x
.8b39	b5 62		lda $62,x			lda FSMant1+1,x
.8b3b	75 61		adc $61,x			adc FSMant1+0,x
.8b3d	95 62		sta $62,x			sta FSMant1+1,x
.8b3f	b5 58		lda $58,x			lda FSMant0+1,x
.8b41	75 57		adc $57,x			adc FSMant0+0,x
.8b43					FPlusFin:
.8b43	e8		inx				inx		; FDrop
.8b44	86 4c		stx $4c				stx fp
.8b46	50 09		bvc $8b51	FPlusFin3:	bvc _19		; if overflow
.8b48	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b49	76 61		ror $61,x			ror FSMant1,x
.8b4b	76 6b		ror $6b,x			ror FSMant2,x
.8b4d	76 75		ror $75,x			ror FSMant3,x
.8b4f	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b51					_19:
.8b51	95 57		sta $57,x			sta FSMant0,x
.8b53	4c a2 8a	jmp $8aa2			jmp FNormX	; normalize, return
=45					CL	.var *-(WordListLink+wh_Xt)
=$8b56					en = *	; remember here
>8b27	2d					.byte CL	;wh_CodeLength
>8b56	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
>8b59	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b5a	a4 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b5c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b5d	08					.byte NN	;wh_Flags	dictionary flags
=35545					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b5e	20 28 89	jsr $8928	F1Plus:		jsr F1
.8b61	4c 29 8b	jmp $8b29			jmp FPlus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b64					en = *	; remember here
>8b5c	06					.byte CL	;wh_CodeLength
>8b64	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
>8b66	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b67	d9 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b69	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b6a	08					.byte NN	;wh_Flags	dictionary flags
=35558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b6b	20 2b 8a	jsr $8a2b	FMinus:		jsr FMAlignX	; align mantissas
.8b6e	38		sec				sec		; subtract mantissas
.8b6f	b5 76		lda $76,x			lda FSMant3+1,x
.8b71	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b73	95 76		sta $76,x			sta FSMant3+1,x
.8b75	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b77	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b79	95 6c		sta $6c,x			sta FSMant2+1,x
.8b7b	b5 62		lda $62,x			lda FSMant1+1,x
.8b7d	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b7f	95 62		sta $62,x			sta FSMant1+1,x
.8b81	b5 58		lda $58,x			lda FSMant0+1,x
.8b83	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b85	4c 43 8b	jmp $8b43			jmp FPlusFin
=29					CL	.var *-(WordListLink+wh_Xt)
=$8b88					en = *	; remember here
>8b69	1d					.byte CL	;wh_CodeLength
>8b88	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
>8b8b	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b8c	e6 8a					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8b8e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8b8f	08					.byte NN	;wh_Flags	dictionary flags
=35595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8b90	20 28 89	jsr $8928	F1Minus:	jsr F1
.8b93	4c 6b 8b	jmp $8b6b			jmp FMinus
=6					CL	.var *-(WordListLink+wh_Xt)
=$8b96					en = *	; remember here
>8b8e	06					.byte CL	;wh_CodeLength
>8b96	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
>8b9d	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8b9e	0b 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ba0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ba1	08					.byte NN	;wh_Flags	dictionary flags
=35613					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ba2	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8ba4	a6 4c		ldx $4c				ldx fp		; X= FP stack index
.8ba6	38		sec				sec		; mantissa = 0 - mantissa
.8ba7	a9 00		lda #$00			lda #0
.8ba9	f5 75		sbc $75,x			sbc FSMant3,x
.8bab	95 75		sta $75,x			sta FSMant3,x
.8bad	a9 00		lda #$00			lda #0
.8baf	f5 6b		sbc $6b,x			sbc FSMant2,x
.8bb1	95 6b		sta $6b,x			sta FSMant2,x
.8bb3	a9 00		lda #$00			lda #0
.8bb5	f5 61		sbc $61,x			sbc FSMant1,x
.8bb7	95 61		sta $61,x			sta FSMant1,x
.8bb9	a9 00		lda #$00			lda #0
.8bbb	f5 57		sbc $57,x			sbc FSMant0,x
.8bbd	4c 46 8b	jmp $8b46			jmp FPlusFin3	; finish up, return
=30					CL	.var *-(WordListLink+wh_Xt)
=$8bc0					en = *	; remember here
>8ba0	1e					.byte CL	;wh_CodeLength
>8bc0	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
>8bc4	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bc5	1d 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bc8	08					.byte NN	;wh_Flags	dictionary flags
=35652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bc9	a4 4c		ldy $4c		FAbs:		ldy fp
.8bcb	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bce	30 d2		bmi $8ba2			bmi FNegate
.8bd0	60		rts				rts
=8					CL	.var *-(WordListLink+wh_Xt)
=$8bd1					en = *	; remember here
>8bc7	08					.byte CL	;wh_CodeLength
.8bd1	4c f7 b3	jmp $b3f7	Throw_FPStack_4: jmp Throw_FPStack
.8bd4	a4 4c		ldy $4c		FPos:		ldy fp			; load FP stack index
.8bd6	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bd8	b0 f7		bcs $8bd1			bcs Throw_FPStack_4
.8bda	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bdd	59 58 00	eor $0058,y			eor FSMant0+1,y
.8be0	08		php				php
.8be1	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8be4	10 07		bpl $8bed			bpl +
.8be6	e6 4c		inc $4c				inc fp			;   point at NOS
.8be8	20 a2 8b	jsr $8ba2			jsr FNegate		;   negate NOS
.8beb	c6 4c		dec $4c				dec fp			;   restore fp
.8bed					+
.8bed	20 c9 8b	jsr $8bc9			jsr FAbs		; abs TOS
.8bf0	86 14		stx $14				stx tmp1+0		; save data stack index
.8bf2	a6 4c		ldx $4c				ldx fp			; load FP stack index
.8bf4	28		plp				plp			; restore sign flag
.8bf5	60		rts				rts
>8bf6	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
>8bf8	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8bf9	44 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8bfb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8bfc	08					.byte NN	;wh_Flags	dictionary flags
=35704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8bfd					FStar:
.8bfd	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive,
.8c00	08		php				php			;   save r3 sign
.8c01	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8c03	38		sec				sec
.8c04	75 4e		adc $4e,x			adc FSExp+1,x
.8c06	95 4e		sta $4e,x			sta FSExp+1,x
.8c08	50 12		bvc $8c1c			bvc _49			; IfVs,
.8c0a	b0 06		bcs $8c12			bcs _zero		;   underflow?
.8c0c	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8c0e	28		plp				plp			; RDrop sign flag
.8c0f	20 01 b4	jsr $b401			jsr Throw_FpOutOfRange
.8c12	e8		inx		_zero:		inx			; F2Drop
.8c13	e8		inx				inx
.8c14	86 4c		stx $4c				stx fp
.8c16	28		plp				plp			; rdrop saved result sign
.8c17	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c19	4c ec 88	jmp $88ec			jmp F0			; return zero
.8c1c					_49:
.8c1c	b5 58		lda $58,x			lda FSMant0+1,x		; save r1 mantissa
.8c1e	48		pha				pha
.8c1f	b5 62		lda $62,x			lda FSMant1+1,x
.8c21	48		pha				pha
.8c22	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c24	48		pha				pha
.8c25	b5 76		lda $76,x			lda FSMant3+1,x
.8c27	a0 00		ldy #$00			ldy #0			; init r3 mantissa
.8c29	94 58		sty $58,x			sty FSMant0+1,x
.8c2b	94 62		sty $62,x			sty FSMant1+1,x
.8c2d	94 6c		sty $6c,x			sty FSMant2+1,x
.8c2f	94 76		sty $76,x			sty FSMant3+1,x
.8c31	20 4d 8c	jsr $8c4d			jsr _Byte		; do bytes of r1 mantissa
.8c34	68		pla				pla
.8c35	20 4d 8c	jsr $8c4d			jsr _Byte
.8c38	68		pla				pla
.8c39	20 4d 8c	jsr $8c4d			jsr _Byte
.8c3c	68		pla				pla
.8c3d	20 4d 8c	jsr $8c4d			jsr _Byte
.8c40	e6 4c		inc $4c				inc fp			; FDrop
.8c42	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c44	28		plp				plp			; fix result sign
.8c45	10 03		bpl $8c4a			bpl +
.8c47	4c a2 8b	jmp $8ba2			jmp FNegate
.8c4a					+
.8c4a	4c a0 8a	jmp $8aa0			jmp FNorm
.8c4d					_Byte:
.8c4d	85 15		sta $15				sta tmp1+1
.8c4f	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c51	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c53	90 19		bcc $8c6e			bcc _b3
.8c55	18		clc				clc			;     r3 += r2
.8c56	b5 76		lda $76,x			lda FSMant3+1,x
.8c58	75 75		adc $75,x			adc FSMant3+0,x
.8c5a	95 76		sta $76,x			sta FSMant3+1,x
.8c5c	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c5e	75 6b		adc $6b,x			adc FSMant2+0,x
.8c60	95 6c		sta $6c,x			sta FSMant2+1,x
.8c62	b5 62		lda $62,x			lda FSMant1+1,x
.8c64	75 61		adc $61,x			adc FSMant1+0,x
.8c66	95 62		sta $62,x			sta FSMant1+1,x
.8c68	b5 58		lda $58,x			lda FSMant0+1,x
.8c6a	75 57		adc $57,x			adc FSMant0+0,x
.8c6c	95 58		sta $58,x			sta FSMant0+1,x
.8c6e	56 58		lsr $58,x	_b3:		lsr FSMant0+1,x		;   r3 >>= 1
.8c70	76 62		ror $62,x			ror FSMant1+1,x
.8c72	76 6c		ror $6c,x			ror FSMant2+1,x
.8c74	76 76		ror $76,x			ror FSMant3+1,x
.8c76	88		dey				dey			;  next bit
.8c77	d0 d8		bne $8c51			bne _b1
.8c79	60		rts				rts
=125					CL	.var *-(WordListLink+wh_Xt)
=$8c7a					en = *	; remember here
>8bfb	7d					.byte CL	;wh_CodeLength
>8c7a	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
>8c7e	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c7f	78 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c82	08					.byte NN	;wh_Flags	dictionary flags
=35838					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c83	20 78 84	jsr $8478	FSqr:		jsr FDup
.8c86	4c fd 8b	jmp $8bfd			jmp FStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8c89					en = *	; remember here
>8c81	06					.byte CL	;wh_CodeLength
>8c89	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
>8c8d	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8c8e	fe 8b					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8c90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8c91	08					.byte NN	;wh_Flags	dictionary flags
=35853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8c92	20 78 84	jsr $8478	F10Star:	jsr FDup
.8c95	a4 4c		ldy $4c				ldy fp
.8c97	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c9a	18		clc				clc
.8c9b	69 01		adc #$01			adc #1
.8c9d	99 4d 00	sta $004d,y			sta FSExp+0,y
.8ca0	18		clc				clc
.8ca1	69 02		adc #$02			adc #2
.8ca3	99 4e 00	sta $004e,y			sta FSExp+1,y
.8ca6	4c 29 8b	jmp $8b29			jmp FPlus
=23					CL	.var *-(WordListLink+wh_Xt)
=$8ca9					en = *	; remember here
>8c90	17					.byte CL	;wh_CodeLength
>8ca9	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
>8cab	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8cac	0d 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8cae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8caf	08					.byte NN	;wh_Flags	dictionary flags
=35883					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8cb0	20 d4 8b	jsr $8bd4	FSlash:		jsr FPos		; make r1 & r2 positive
.8cb3	08		php				php			;   save result sign
.8cb4	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8cb6	18		clc				clc
.8cb7	69 01		adc #$01			adc #1
.8cb9	38		sec				sec
.8cba	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8cbc	95 4e		sta $4e,x			sta FSExp+1,x
.8cbe	50 12		bvc $8cd2			bvc _49			;  IfVs
.8cc0	b0 06		bcs $8cc8			bcs _Zero		; underflow?
.8cc2	28		plp				plp			; drop saved result sign
.8cc3	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cc5	20 01 b4	jsr $b401			jsr Throw_FpOutOfRange	; overflow
.8cc8	e8		inx		_Zero:		inx			; F2Drop
.8cc9	e8		inx				inx
.8cca	86 4c		stx $4c				stx fp
.8ccc	28		plp				plp			; drop saved result sign
.8ccd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ccf	4c ec 88	jmp $88ec			jmp F0			; return 0
.8cd2					_49:
.8cd2	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cd4	85 16		sta $16				sta tmp2+0
.8cd6	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cd8	85 17		sta $17				sta tmp2+1
.8cda	b5 62		lda $62,x			lda FSMant1+1,x
.8cdc	85 18		sta $18				sta tmp3+0
.8cde	b5 58		lda $58,x			lda FSMant0+1,x
.8ce0	85 19		sta $19				sta tmp3+1
.8ce2	20 0b 8d	jsr $8d0b			jsr _Byte
.8ce5	95 58		sta $58,x			sta FSMant0+1,x
.8ce7	20 0b 8d	jsr $8d0b			jsr _Byte
.8cea	95 62		sta $62,x			sta FSMant1+1,x
.8cec	20 0b 8d	jsr $8d0b			jsr _Byte
.8cef	95 6c		sta $6c,x			sta FSMant2+1,x
.8cf1	20 0b 8d	jsr $8d0b			jsr _Byte
.8cf4	95 76		sta $76,x			sta FSMant3+1,x
.8cf6	56 58		lsr $58,x			lsr FSMant0+1,x
.8cf8	76 62		ror $62,x			ror FSMant1+1,x
.8cfa	76 6c		ror $6c,x			ror FSMant2+1,x
.8cfc	76 76		ror $76,x			ror FSMant3+1,x
.8cfe	e6 4c		inc $4c				inc fp			; FDrop
.8d00	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d02	28		plp				plp			; fix sign
.8d03	10 03		bpl $8d08			bpl +
.8d05	20 a2 8b	jsr $8ba2			jsr FNegate
.8d08	4c a0 8a	jmp $8aa0	+		jmp FNorm
.8d0b					_Byte:
.8d0b	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d0d					_1:
.8d0d	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8d0f	d5 57		cmp $57,x			cmp FSMant0+0,x
.8d11	d0 10		bne $8d23			bne _4
.8d13	a5 18		lda $18				lda tmp3+0
.8d15	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d17	d0 0a		bne $8d23			bne _4
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d1d	d0 04		bne $8d23			bne _4
.8d1f	a5 16		lda $16				lda tmp2+0
.8d21	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d23	90 18		bcc $8d3d	_4:		bcc _2
.8d25	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d27	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d29	85 16		sta $16				sta tmp2+0
.8d2b	a5 17		lda $17				lda tmp2+1
.8d2d	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d2f	85 17		sta $17				sta tmp2+1
.8d31	a5 18		lda $18				lda tmp3+0
.8d33	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d35	85 18		sta $18				sta tmp3+0
.8d37	a5 19		lda $19				lda tmp3+1
.8d39	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d3b	85 19		sta $19				sta tmp3+1
.8d3d	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d3f	06 16		asl $16				asl tmp2+0
.8d41	26 17		rol $17				rol tmp2+1
.8d43	26 18		rol $18				rol tmp3+0
.8d45	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d47	88		dey				dey			;  next
.8d48	d0 c3		bne $8d0d			bne _1
.8d4a	a5 15		lda $15				lda tmp1+1		; return bits
.8d4c	60		rts				rts
=157					CL	.var *-(WordListLink+wh_Xt)
=$8d4d					en = *	; remember here
>8cae	9d					.byte CL	;wh_CodeLength
>8d4d	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
>8d50	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d51	2b 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d53	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d54	08					.byte NN	;wh_Flags	dictionary flags
=36048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d55	20 28 89	jsr $8928	F1Slash:	jsr F1
.8d58	20 00 85	jsr $8500			jsr FSwap
.8d5b	4c b0 8c	jmp $8cb0			jmp FSlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8d5e					en = *	; remember here
>8d53	09					.byte CL	;wh_CodeLength
>8d5e	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
>8d60	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8d61	d0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8d63	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8d64	08					.byte NN	;wh_Flags	dictionary flags
=36064					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8d65					EStar:
.8d65	20 d4 8b	jsr $8bd4			jsr FPos		; make r1 & r2 positive
.8d68	08		php				php			;   remember result sign
.8d69	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d6b	38		sec				sec
.8d6c	75 4e		adc $4e,x			adc FSExp+1,x
.8d6e	95 4e		sta $4e,x			sta FSExp+1,x
.8d70	70 15		bvs $8d87			bvs _ExpOvfl
.8d72	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d74	48		pha				pha
.8d75	b5 62		lda $62,x			lda FSMant1+1,x
.8d77	a0 00		ldy #$00			ldy #0
.8d79	94 58		sty $58,x			sty FSMant0+1,x
.8d7b	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d7d	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant1+1 byte
.8d80	68		pla				pla
.8d81	20 96 8d	jsr $8d96			jsr _Byte		; do FSMant0+1 byte
.8d84	4c b3 8d	jmp $8db3			jmp EFix3		; finish
.8d87					_ExpOvfl:
.8d87	b0 05		bcs $8d8e			bcs _Zero		;underflow?
.8d89	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d8b	20 01 b4	jsr $b401			jsr Throw_FpOutOfRange	;overflow
.8d8e	a9 00		lda #$00	_Zero:		lda #0
.8d90	95 62		sta $62,x			sta FSMant1+1,x
.8d92	95 58		sta $58,x			sta FSMant0+1,x
.8d94	f0 1d		beq $8db3			beq EFix3
.8d96					_Byte:
.8d96	85 15		sta $15				sta tmp1+1
.8d98	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d9a	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d9c	90 0d		bcc $8dab			bcc _b5
.8d9e	18		clc				clc			;     r3 += r2
.8d9f	b5 61		lda $61,x			lda FSMant1+0,x
.8da1	75 62		adc $62,x			adc FSMant1+1,x
.8da3	95 62		sta $62,x			sta FSMant1+1,x
.8da5	b5 57		lda $57,x			lda FSMant0+0,x
.8da7	75 58		adc $58,x			adc FSMant0+1,x
.8da9	95 58		sta $58,x			sta FSMant0+1,x
.8dab					_b5:
.8dab	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8dad	76 62		ror $62,x			ror FSMant1+1,x
.8daf	88		dey				dey			;  next bit
.8db0	d0 e8		bne $8d9a			bne _b1
.8db2	60		rts				rts
=78					CL	.var *-(WordListLink+wh_Xt)
=$8db3					en = *	; remember here
>8d63	4e					.byte CL	;wh_CodeLength
.8db3					EFix3:
.8db3	a9 00		lda #$00			lda #0			; zero unused mantissa
.8db5	95 6c		sta $6c,x			sta FSMant2+1,x
.8db7	95 76		sta $76,x			sta FSMant3+1,x
.8db9	e6 4c		inc $4c				inc fp			; FDrop
.8dbb	a6 14		ldx $14				ldx tmp1+0		; restore X
.8dbd	28		plp				plp			;fix result sign
.8dbe	10 03		bpl $8dc3			bpl +
.8dc0	4c a2 8b	jmp $8ba2			jmp FNegate
.8dc3	4c a0 8a	jmp $8aa0	+		jmp FNorm
>8dc6	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
>8dca	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dcb	e0 8c					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dcd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8dce	08					.byte NN	;wh_Flags	dictionary flags
=36170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8dcf	20 78 84	jsr $8478	ESqr:		jsr FDup
.8dd2	4c 65 8d	jmp $8d65			jmp EStar
=6					CL	.var *-(WordListLink+wh_Xt)
=$8dd5					en = *	; remember here
>8dcd	06					.byte CL	;wh_CodeLength
>8dd5	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
>8dd7	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8dd8	4a 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8dda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ddb	08					.byte NN	;wh_Flags	dictionary flags
=36183					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ddc	20 d4 8b	jsr $8bd4	ESlash:		jsr FPos	; make r1 & r2 positive
.8ddf	08		php				php		; remember result sign
.8de0	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8de2	38		sec				sec
.8de3	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8de5	70 17		bvs $8dfe			bvs _ExpOvfl
.8de7	18		clc				clc
.8de8	69 01		adc #$01			adc #1
.8dea	95 4e		sta $4e,x			sta FSExp+1,x
.8dec	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient hi byte
.8def	48		pha				pha
.8df0	20 04 8e	jsr $8e04			jsr _Byte		; gen quotient lo byte
.8df3	95 62		sta $62,x			sta FSMant1+1,x
.8df5	68		pla				pla
.8df6	4a		lsr a				lsr a
.8df7	95 58		sta $58,x			sta FSMant0+1,x
.8df9	76 62		ror $62,x			ror FSMant1+1,x
.8dfb	4c b3 8d	jmp $8db3			jmp EFix3
.8dfe					_ExpOvfl:
.8dfe	28		plp				plp			; rdrop saved result sign
.8dff	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e01	20 01 b4	jsr $b401			jsr Throw_FpOutOfRange	; overflow
.8e04					_Byte:
.8e04	a0 08		ldy #$08			ldy #8			; for 8 bits
.8e06	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8e08	d5 61		cmp $61,x			cmp FSMant1+0,x
.8e0a	b5 58		lda $58,x			lda FSMant0+1,x
.8e0c	f5 57		sbc $57,x			sbc FSMant0+0,x
.8e0e	90 09		bcc $8e19			bcc _b5
.8e10	95 58		sta $58,x			sta FSMant0+1,x
.8e12	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8e14	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e16	95 62		sta $62,x			sta FSMant1+1,x
.8e18	38		sec				sec
.8e19					_b5:
.8e19	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e1b	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e1d	36 58		rol $58,x			rol FSMant0+1,x
.8e1f	88		dey				dey			;  next bit
.8e20	d0 e4		bne $8e06			bne _b1
.8e22	a5 15		lda $15				lda tmp1+1		; return bits
.8e24	60		rts				rts
=73					CL	.var *-(WordListLink+wh_Xt)
=$8e25					en = *	; remember here
>8dda	49					.byte CL	;wh_CodeLength
>8e25	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
>8e28	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e29	57 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e2b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e2c	08					.byte NN	;wh_Flags	dictionary flags
=36264					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e2d	20 28 89	jsr $8928	E1Slash:	jsr F1
.8e30	20 00 85	jsr $8500			jsr FSwap
.8e33	4c dc 8d	jmp $8ddc			jmp ESlash
=9					CL	.var *-(WordListLink+wh_Xt)
=$8e36					en = *	; remember here
>8e2b	09					.byte CL	;wh_CodeLength
>8e36	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
>8e39	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e3a	a8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e3d	08					.byte NN	;wh_Flags	dictionary flags
=36281					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e3e	20 9f b3	jsr $b39f	SToF:		jsr PopYA		; pop n
.8e41	20 16 84	jsr $8416	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e44	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e46	95 61		sta $61,x			sta FSMant1,x
.8e48	a9 00		lda #$00			lda #0			; pad mantissa
.8e4a	95 6b		sta $6b,x			sta FSMant2,x
.8e4c	95 75		sta $75,x			sta FSMant3,x
.8e4e	a9 0f		lda #$0f			lda #15			; set exponent
.8e50	95 4d		sta $4d,x			sta FSExp,x
.8e52	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=23					CL	.var *-(WordListLink+wh_Xt)
=$8e55					en = *	; remember here
>8e3c	17					.byte CL	;wh_CodeLength
>8e55	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
>8e58	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e59	b9 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e5b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e5c	08					.byte NN	;wh_Flags	dictionary flags
=36312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e5d	20 16 84	jsr $8416	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e60	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e62	a4 4c		ldy $4c				ldy fp
.8e64	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e66	99 75 00	sta $0075,y			sta FSMant3,y
.8e69	b5 27		lda $27,x			lda DStack+3,x
.8e6b	99 6b 00	sta $006b,y			sta FSMant2,y
.8e6e	b5 24		lda $24,x			lda DStack+0,x
.8e70	99 61 00	sta $0061,y			sta FSMant1,y
.8e73	b5 25		lda $25,x			lda DStack+1,x
.8e75	99 57 00	sta $0057,y			sta FSMant0,y
.8e78	a9 1f		lda #$1f			lda #31			; set exponent
.8e7a	99 4d 00	sta $004d,y			sta FSExp,y
.8e7d	20 b6 c4	jsr $c4b6			jsr Two_Drop
.8e80	4c a0 8a	jmp $8aa0			jmp FNorm		; normalize, return
=38					CL	.var *-(WordListLink+wh_Xt)
=$8e83					en = *	; remember here
>8e5b	26					.byte CL	;wh_CodeLength
>8e83	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
>8e86	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8e87	d8 8d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8e89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8e8a	08					.byte NN	;wh_Flags	dictionary flags
=36358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8e8b	a4 4c		ldy $4c		FToS:		ldy fp
.8e8d	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e90	08		php				php
.8e91	10 03		bpl $8e96			bpl +
.8e93	20 a2 8b	jsr $8ba2			jsr FNegate
.8e96					+
.8e96	a9 0f		lda #$0f			lda #15
.8e98	20 a5 86	jsr $86a5			jsr FIntAlignA
.8e9b	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e9d	b0 17		bcs $8eb6			bcs _overflow
.8e9f	a4 4c		ldy $4c				ldy fp
.8ea1	ca		dex				dex
.8ea2	ca		dex				dex
.8ea3	b9 57 00	lda $0057,y			lda FSMant0,y
.8ea6	95 25		sta $25,x			sta DStack+1,x
.8ea8	b9 61 00	lda $0061,y			lda FSMant1,y
.8eab	95 24		sta $24,x			sta DStack+0,x
.8ead	e6 4c		inc $4c				inc fp			; FDrop
.8eaf	28		plp				plp			; apply saved sign
.8eb0	30 01		bmi $8eb3			bmi +
.8eb2	60		rts				rts
.8eb3	4c 0f c6	jmp $c60f	+		jmp Negate
.8eb6	28		plp		_overflow:	plp			; RDrop saved sign
.8eb7	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8eb9	20 28 b4	jsr $b428			jsr ThrowA
=49					CL	.var *-(WordListLink+wh_Xt)
=$8ebc					en = *	; remember here
>8e89	31					.byte CL	;wh_CodeLength
>8ebc	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
>8ebf	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8ec0	06 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8ec2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8ec3	08					.byte NN	;wh_Flags	dictionary flags
=36415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8ec4	a4 4c		ldy $4c		FToD:		ldy fp
.8ec6	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8ec9	08		php				php
.8eca	10 03		bpl $8ecf			bpl +
.8ecc	20 a2 8b	jsr $8ba2			jsr FNegate
.8ecf					+
.8ecf	a9 1f		lda #$1f			lda #31
.8ed1	20 a5 86	jsr $86a5			jsr FIntAlignA
.8ed4	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ed6	b0 23		bcs $8efb			bcs _overflow
.8ed8	a4 4c		ldy $4c				ldy fp
.8eda	ca		dex				dex			; d= mantissa
.8edb	ca		dex				dex
.8edc	ca		dex				dex
.8edd	ca		dex				dex
.8ede	b9 57 00	lda $0057,y			lda FSMant0,y
.8ee1	95 25		sta $25,x			sta DStack+1,x
.8ee3	b9 61 00	lda $0061,y			lda FSMant1,y
.8ee6	95 24		sta $24,x			sta DStack+0,x
.8ee8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8eeb	95 27		sta $27,x			sta DStack+3,x
.8eed	b9 75 00	lda $0075,y			lda FSMant3,y
.8ef0	95 26		sta $26,x			sta DStack+2,x
.8ef2	e6 4c		inc $4c				inc fp			; FDrop
.8ef4	28		plp				plp			; apply saved sign
.8ef5	30 01		bmi $8ef8			bmi +
.8ef7	60		rts				rts
.8ef8	4c 40 c6	jmp $c640	+		jmp DNegate
.8efb	28		plp		_overflow:	plp			; RDrop sign
.8efc	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8efe	20 28 b4	jsr $b428			jsr ThrowA
=61					CL	.var *-(WordListLink+wh_Xt)
=$8f01					en = *	; remember here
>8ec2	3d					.byte CL	;wh_CodeLength
>8f01	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
>8f05	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f06	3f 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f08	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f09	08					.byte NN	;wh_Flags	dictionary flags
=36485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f0a	20 df 82	jsr $82df	FRnd:		jsr Rand		; generate next RndState
.8f0d	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.8f10	4a		lsr a				lsr a			;   make positive
.8f11	95 57		sta $57,x			sta FSMant0,x
.8f13	94 61		sty $61,x			sty FSMant1,x
.8f15	ad 35 03	lda $0335			lda RndState+0
.8f18	95 6b		sta $6b,x			sta FSMant2,x
.8f1a	ad 36 03	lda $0336			lda RndState+1
.8f1d	95 75		sta $75,x			sta FSMant3,x
.8f1f	a9 00		lda #$00			lda #0			; exponent=0
.8f21	95 4d		sta $4d,x			sta FSExp,x
.8f23	4c a2 8a	jmp $8aa2			jmp FNormX		; normalize, return
=28					CL	.var *-(WordListLink+wh_Xt)
=$8f26					en = *	; remember here
>8f08	1c					.byte CL	;wh_CodeLength
>8f26	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
>8f2b	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f2c	85 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f2f	08					.byte NN	;wh_Flags	dictionary flags
=36523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f30	a4 4c		ldy $4c		FSqrt:		ldy fp
.8f32	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f35	d0 01		bne $8f38			bne +
.8f37	60		rts				rts			;   just return the zero
.8f38					+
.8f38	20 78 84	jsr $8478			jsr FDup		; get trial value
.8f3b	a4 4c		ldy $4c				ldy fp
.8f3d	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f40	c9 80		cmp #$80			cmp #$80
.8f42	6a		ror a				ror a
.8f43	99 4d 00	sta $004d,y			sta FSExp,y
.8f46	a9 09		lda #$09			lda #9			; for 9 iterations
.8f48	48		pha		_3:		pha
.8f49	20 f0 84	jsr $84f0			jsr F2Dup		;   calc new trial value
.8f4c	20 b0 8c	jsr $8cb0			jsr FSlash
.8f4f	20 29 8b	jsr $8b29			jsr FPlus
.8f52	20 20 8a	jsr $8a20			jsr F2Slash
.8f55	68		pla				pla			;  next
.8f56	38		sec				sec
.8f57	e9 01		sbc #$01			sbc #1
.8f59	d0 ed		bne $8f48			bne _3
.8f5b	4c 52 84	jmp $8452			jmp FNip		; return trial value
=46					CL	.var *-(WordListLink+wh_Xt)
=$8f5e					en = *	; remember here
>8f2e	2e					.byte CL	;wh_CodeLength
>8f5e	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
>8f63	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f64	ab 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f67	08					.byte NN	;wh_Flags	dictionary flags
=36579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f68	20 16 84	jsr $8416	HexToF:		jsr FAllocX		; alloc FP stack entry
.8f6b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8f6d	a4 4c		ldy $4c				ldy fp			; Y= FP stack index
.8f6f	20 83 b3	jsr $b383			jsr PopA		; pop n_exp
.8f72	99 4d 00	sta $004d,y			sta FSExp,y
.8f75	b5 25		lda $25,x			lda DStack+1,x
.8f77	99 57 00	sta $0057,y			sta FSMant0,y
.8f7a	b5 24		lda $24,x			lda DStack+0,x
.8f7c	99 61 00	sta $0061,y			sta FSMant1,y
.8f7f	b5 27		lda $27,x			lda DStack+3,x
.8f81	99 6b 00	sta $006b,y			sta FSMant2,y
.8f84	b5 26		lda $26,x			lda DStack+2,x
.8f86	99 75 00	sta $0075,y			sta FSMant3,y
.8f89	4c b6 c4	jmp $c4b6			jmp Two_Drop
=36					CL	.var *-(WordListLink+wh_Xt)
=$8f8c					en = *	; remember here
>8f66	24					.byte CL	;wh_CodeLength
>8f8c	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
>8f91	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8f92	e3 8e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8f94	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8f95	08					.byte NN	;wh_Flags	dictionary flags
=36625					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8f96	a4 4c		ldy $4c		FToHex:		ldy fp		; Y= FP stack index
.8f98	ca		dex				dex
.8f99	ca		dex				dex
.8f9a	ca		dex				dex
.8f9b	ca		dex				dex
.8f9c	ca		dex				dex
.8f9d	ca		dex				dex
.8f9e	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.8fa1	95 27		sta $27,x			sta DStack+3,x
.8fa3	b9 61 00	lda $0061,y			lda FSMant1,y
.8fa6	95 26		sta $26,x			sta DStack+2,x
.8fa8	b9 6b 00	lda $006b,y			lda FSMant2,y
.8fab	95 29		sta $29,x			sta DStack+5,x
.8fad	b9 75 00	lda $0075,y			lda FSMant3,y
.8fb0	95 28		sta $28,x			sta DStack+4,x
.8fb2	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8fb5	95 24		sta $24,x			sta DStack+0,x
.8fb7	29 80		and #$80			and #$80	;   sign extend
.8fb9	f0 02		beq $8fbd			beq +
.8fbb	a9 ff		lda #$ff			lda #$ff
.8fbd	95 25		sta $25,x	+		sta DStack+1,x
.8fbf	e6 4c		inc $4c				inc fp		; FDrop
.8fc1	60		rts				rts
=44					CL	.var *-(WordListLink+wh_Xt)
=$8fc2					en = *	; remember here
>8f94	2c					.byte CL	;wh_CodeLength
>8fc2	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
>8fc7	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fc8	11 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fcb	08					.byte NN	;wh_Flags	dictionary flags
=36679					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fcc	20 96 8f	jsr $8f96	FDotHex:	jsr FToHex	; get parts of r
.8fcf	20 1f ce	jsr $ce1f			jsr Not_Rot
.8fd2	20 6c a8	jsr $a86c			jsr Dot_Hex	; do mantissa
.8fd5	20 6c a8	jsr $a86c			jsr Dot_Hex
.8fd8	a9 3a		lda #$3a			lda #':'
.8fda	20 63 cd	jsr $cd63			jsr Emit_A
.8fdd	4c 4a a8	jmp $a84a			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-(WordListLink+wh_Xt)
=$8fe0					en = *	; remember here
>8fca	14					.byte CL	;wh_CodeLength
>8fe0	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
>8fe4	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>8fe5	47 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>8fe7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>8fe8	08					.byte NN	;wh_Flags	dictionary flags
=36708					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.8fe9	20 66 90	jsr $9066	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8fec	20 f2 8f	jsr $8ff2			jsr PFDotSub
.8fef	4c 84 90	jmp $9084			jmp pfcen
.8ff2					PFDotSub:
.8ff2	20 ba 83	jsr $83ba			jsr Precision	;alloc & init work area
.8ff5	20 b4 b7	jsr $b7b4			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8ff8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10, counting exponent
.8ffb					_c:
.8ffb	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8ffd	d0 05		bne $9004			bne _c2
.8fff	a9 2e		lda #$2e			lda #'.'
.9001	20 7b 90	jsr $907b			jsr pfch
.9004	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.9006	20 78 84	jsr $8478			jsr FDup		;  do a digit
.9009	20 8b 8e	jsr $8e8b			jsr FToS		; ( work n )
.900c	b5 24		lda $24,x			lda DStack+0,x
.900e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.9010	95 29		sta $29,x			sta _mantNzFound+2,x
.9012	f0 08		beq $901c			beq _c7
.9014	d6 28		dec $28,x			dec _NumSigDigits+2,x
.9016	10 04		bpl $901c			bpl +
.9018	e8		inx				inx			;    drop integer
.9019	e8		inx				inx
.901a	d0 17		bne $9033			bne _d
.901c					+
.901c	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.901e	09 30		ora #$30			ora #'0'
.9020	20 7b 90	jsr $907b			jsr pfch
.9023	20 3e 8e	jsr $8e3e			jsr SToF		; ( work )
.9026	20 6b 8b	jsr $8b6b			jsr FMinus
.9029	20 92 8c	jsr $8c92			jsr F10Star
.902c	a4 4c		ldy $4c				ldy fp			;  until mantissa==0
.902e	b9 57 00	lda $0057,y			lda FSMant0,y
.9031	d0 c8		bne $8ffb			bne _c
.9033	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.9035	30 08		bmi $903f			bmi _d9
.9037	a9 30		lda #$30			lda #'0'
.9039	20 7b 90	jsr $907b			jsr pfch
.903c	4c 33 90	jmp $9033			jmp _d
.903f					_d9:
.903f	e8		inx				inx			; drop work area
.9040	e8		inx				inx
.9041	e8		inx				inx
.9042	e8		inx				inx
.9043	e6 4c		inc $4c				inc fp			; FDrop
.9045	60		rts				rts
=93					CL	.var *-(WordListLink+wh_Xt)
=$9046					en = *	; remember here
>8fe7	5d					.byte CL	;wh_CodeLength
.9046					FLt10:
.9046	a4 4c		ldy $4c		_1:		ldy fp			; while r >= 10
.9048	b9 4d 00	lda $004d,y			lda FSExp,y
.904b	30 18		bmi $9065			bmi _9			;   exponent negative?
.904d	c9 04		cmp #$04			cmp #4
.904f	90 14		bcc $9065			bcc _9			;   < 4 ?
.9051	d0 07		bne $905a			bne _2			;   > 4 ?
.9053	b9 57 00	lda $0057,y			lda FSMant0,y
.9056	c9 50		cmp #$50			cmp #$50
.9058	90 0b		bcc $9065			bcc _9
.905a	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.905c	20 0c 89	jsr $890c			jsr F10			;   r /= 10
.905f	20 b0 8c	jsr $8cb0			jsr FSlash
.9062	4c 46 90	jmp $9046			jmp _1
.9065	60		rts		_9:		rts
.9066					pfcst:
.9066	a9 01		lda #$01			lda #1
.9068	8d 34 03	sta $0334			sta ToHold
.906b	a4 4c		ldy $4c				ldy fp			; if r1 negative
.906d	b9 57 00	lda $0057,y			lda FSMant0,y
.9070	10 08		bpl $907a			bpl _19
.9072	a9 2d		lda #$2d			lda #'-'		;   append sign
.9074	20 7b 90	jsr $907b			jsr pfch
.9077	4c a2 8b	jmp $8ba2			jmp FNegate		;   make positive, return
.907a	60		rts		_19:		rts
.907b					pfch:
.907b	ac 34 03	ldy $0334			ldy ToHold
.907e	91 00		sta ($00),y			sta (cp),y
.9080	ee 34 03	inc $0334			inc ToHold
.9083	60		rts				rts
.9084					pfcen:
.9084	ad 34 03	lda $0334			lda ToHold
.9087	38		sec				sec
.9088	e9 01		sbc #$01			sbc #1
.908a	a0 00		ldy #$00			ldy #0
.908c	91 00		sta ($00),y			sta (cp),y		; fill in length
.908e	4c b7 c9	jmp $c9b7			jmp Here		; push start addr
.9091					pfciA:
.9091	a8		tay				tay
.9092	10 0a		bpl $909e			bpl _15			; IfMi,
.9094	49 ff		eor #$ff			eor #$ff
.9096	18		clc				clc
.9097	69 01		adc #$01			adc #1
.9099	48		pha				pha
.909a	a9 2d		lda #$2d			lda #'-'
.909c	d0 03		bne $90a1			bne _19
.909e	48		pha		_15:		pha
.909f	a9 2b		lda #$2b			lda #'+'
.90a1					_19:
.90a1	20 7b 90	jsr $907b			jsr pfch
.90a4	68		pla				pla
.90a5	a0 2f		ldy #$2f			ldy #'0'-1
.90a7	c8		iny		_20:		iny
.90a8	38		sec				sec
.90a9	e9 0a		sbc #$0a			sbc #10
.90ab	b0 fa		bcs $90a7			bcs _20
.90ad	69 0a		adc #$0a			adc #10
.90af	48		pha				pha
.90b0	98		tya				tya
.90b1	20 7b 90	jsr $907b			jsr pfch
.90b4	68		pla				pla
.90b5	09 30		ora #$30			ora #'0'
.90b7	d0 c2		bne $907b			bne pfch
>90b9	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
>90bb	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HNL
>90bc	64 8f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90be	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90bf	08					.byte NN	;wh_Flags	dictionary flags
=36923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90c0	20 e9 8f	jsr $8fe9	FDot:		jsr PFDot
.90c3	20 6d b1	jsr $b16d	FDot2:		jsr Count
.90c6	20 7d cd	jsr $cd7d			jsr Type
.90c9	4c 70 cd	jmp $cd70			jmp Space
=12					CL	.var *-(WordListLink+wh_Xt)
=$90cc					en = *	; remember here
>90be	0c					.byte CL	;wh_CodeLength
>90cc	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
>90cf	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90d0	3b 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90d3	08					.byte NN	;wh_Flags	dictionary flags
=36943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90d4	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.90d6	d0 0b		bne $90e3			bne _8
.90d8	48		pha		_2:		pha
.90d9	20 c6 84	jsr $84c6			jsr FPick3	;   print it
.90dc	20 c0 90	jsr $90c0			jsr FDot
.90df	68		pla				pla		;  next
.90e0	38		sec				sec
.90e1	e9 01		sbc #$01			sbc #1
.90e3	c5 4c		cmp $4c		_8:		cmp fp
.90e5	b0 f1		bcs $90d8			bcs _2
=19					CL	.var *-(WordListLink+wh_Xt)
=$90e7					en = *	; remember here
>90d2	13					.byte CL	;wh_CodeLength
.90e7	60		rts				rts
>90e8	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
>90ed	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>90ee	4f 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>90f0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>90f1	08					.byte NN	;wh_Flags	dictionary flags
=36973					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.90f2	20 aa b7	jsr $b7aa	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90f5	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.90f8	20 46 90	jsr $9046			jsr FLt10		; scale down to <10
.90fb	a4 4c		ldy $4c		_c1:		ldy fp			; while r < 1
.90fd	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.9100	f0 0f		beq $9111			beq _c9
.9102	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9105	f0 02		beq $9109			beq _c2
.9107	10 08		bpl $9111			bpl _c9
.9109	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.910b	20 92 8c	jsr $8c92			jsr F10Star		;  r *= 10
.910e	4c fb 90	jmp $90fb			jmp _c1
.9111					_c9:
.9111	20 f2 8f	jsr $8ff2	PFSDotM:	jsr PFDotSub		; do mantissa
.9114	a9 45		lda #$45			lda #'E'
.9116	20 7b 90	jsr $907b			jsr pfch		; do exponent
.9119	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.911b	20 91 90	jsr $9091			jsr pfciA
.911e	e8		inx				inx			; Drop work area
.911f	e8		inx				inx
.9120	4c 84 90	jmp $9084			jmp pfcen		; finish string
=49					CL	.var *-(WordListLink+wh_Xt)
=$9123					en = *	; remember here
>90f0	31					.byte CL	;wh_CodeLength
>9123	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
>9126	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9127	6d 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9129	03					.byte 3		;wh_CodeLength  (with placeholder value)
>912a	08					.byte NN	;wh_Flags	dictionary flags
=37030					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.912b	20 f2 90	jsr $90f2	FSDot:		jsr PFSDot
.912e	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9131					en = *	; remember here
>9129	06					.byte CL	;wh_CodeLength
>9131	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
>9136	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9137	a6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9139	03					.byte 3		;wh_CodeLength  (with placeholder value)
>913a	08					.byte NN	;wh_Flags	dictionary flags
=37046					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.913b	20 aa b7	jsr $b7aa	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.913e	20 66 90	jsr $9066			jsr pfcst		; start collecting chars, make r positive
.9141	a4 4c		ldy $4c		_30:		ldy fp			; while r < 1
.9143	b9 57 00	lda $0057,y			lda FSMant0,y
.9146	f0 16		beq $915e			beq _39
.9148	b9 4d 00	lda $004d,y			lda FSExp,y
.914b	f0 02		beq $914f			beq _31
.914d	10 0f		bpl $915e			bpl _39
.914f	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.9151	d6 24		dec $24,x			dec _exp,x
.9153	d6 24		dec $24,x			dec _exp,x
.9155	20 fd 88	jsr $88fd			jsr F1000		;  r *= 1000
.9158	20 fd 8b	jsr $8bfd			jsr FStar
.915b	4c 41 91	jmp $9141			jmp _30
.915e					_39:
.915e	a4 4c		ldy $4c		_a:		ldy fp			; while r >= 1000
.9160	b9 4d 00	lda $004d,y			lda FSExp,y
.9163	30 1c		bmi $9181			bmi _a9			; exponent negative?
.9165	c9 0a		cmp #$0a			cmp #10
.9167	90 18		bcc $9181			bcc _a9			;   < 10 ?
.9169	d0 07		bne $9172			bne _a2			;   > 10 ?
.916b	b9 57 00	lda $0057,y			lda FSMant0,y
.916e	c9 7d		cmp #$7d			cmp #$7d
.9170	90 0f		bcc $9181			bcc _a9
.9172	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.9174	f6 24		inc $24,x			inc _exp,x
.9176	f6 24		inc $24,x			inc _exp,x
.9178	20 fd 88	jsr $88fd			jsr F1000		;   r /= 1000
.917b	20 b0 8c	jsr $8cb0			jsr FSlash
.917e	4c 5e 91	jmp $915e			jmp _a
.9181					_a9:
.9181	4c 11 91	jmp $9111			jmp PFSDotM
=73					CL	.var *-(WordListLink+wh_Xt)
=$9184					en = *	; remember here
>9139	49					.byte CL	;wh_CodeLength
>9184	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
>9187	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HNL
>9188	b6 90					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>918a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>918b	08					.byte NN	;wh_Flags	dictionary flags
=37127					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.918c	20 3b 91	jsr $913b	FEDot:		jsr PFEDot
.918f	4c c3 90	jmp $90c3			jmp FDot2
=6					CL	.var *-(WordListLink+wh_Xt)
=$9192					en = *	; remember here
>918a	06					.byte CL	;wh_CodeLength
>9192	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
>9194	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>9195	07 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9198	0c					.byte IM+NN	;wh_Flags	dictionary flags
=37140					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9199	20 4a ba	jsr $ba4a	FQuote:		jsr Parse_Name		; get string
.919c	20 bd 91	jsr $91bd			jsr ToFloat		; convert
.919f	b5 24		lda $24,x			lda DStack+0,x		; error?
.91a1	f0 0a		beq $91ad			beq _Err
.91a3	e8		inx				inx
.91a4	e8		inx				inx
.91a5	a5 0a		lda $0a				lda State		; compiling?
.91a7	d0 01		bne $91aa			bne _compile
.91a9	60		rts				rts
.91aa	4c 7c 88	jmp $887c	_compile:	jmp FLiteral		; compile a FP literal
.91ad	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.91af	20 28 b4	jsr $b428			jsr ThrowA
=25					CL	.var *-(WordListLink+wh_Xt)
=$91b2					en = *	; remember here
>9197	19					.byte CL	;wh_CodeLength
>91b2	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
>91b8	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HNL
>91b9	14 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>91bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>91bc	08					.byte NN	;wh_Flags	dictionary flags
=37176					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.91bd					ToFloat:
.91bd	20 aa b7	jsr $b7aa			jsr Zero	; alloc & init workspace
.91c0	20 aa b7	jsr $b7aa			jsr Zero
.91c3	20 aa b7	jsr $b7aa			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.91c6	20 ec 88	jsr $88ec			jsr F0			; init result
.91c9	20 9b 92	jsr $929b	_11:		jsr _GetChar		; get mantissa prefix
.91cc	b0 57		bcs $9225			bcs _trueb ;_finishb
.91ce	c9 20		cmp #$20			cmp #' '
.91d0	f0 f7		beq $91c9			beq _11
.91d2	c9 2b		cmp #$2b			cmp #'+'
.91d4	f0 06		beq $91dc			beq _20
.91d6	c9 2d		cmp #$2d			cmp #'-'
.91d8	d0 07		bne $91e1			bne _21
.91da	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.91dc	20 9b 92	jsr $929b	_20:		jsr _GetChar		; do next mantissa digits
.91df	b0 47		bcs $9228			bcs _finishb
.91e1	c9 2e		cmp #$2e	_21:		cmp #'.'
.91e3	f0 31		beq $9216			beq _27
.91e5	c9 45		cmp #$45			cmp #'E'
.91e7	f0 42		beq $922b			beq _30
.91e9	c9 65		cmp #$65			cmp #'e'
.91eb	f0 3e		beq $922b			beq _30
.91ed	c9 44		cmp #$44			cmp #'D'
.91ef	f0 3a		beq $922b			beq _30
.91f1	c9 64		cmp #$64			cmp #'d'
.91f3	f0 36		beq $922b			beq _30
.91f5	38		sec				sec			;   a digit?
.91f6	e9 30		sbc #$30			sbc #'0'
.91f8	90 24		bcc $921e			bcc _fail
.91fa	c9 0a		cmp #$0a			cmp #9+1
.91fc	b0 20		bcs $921e			bcs _fail
.91fe	48		pha				pha			; append digit to mantissa
.91ff	20 92 8c	jsr $8c92			jsr F10Star
.9202	68		pla				pla
.9203	a0 00		ldy #$00			ldy #0
.9205	20 41 8e	jsr $8e41			jsr SToFYA
.9208	20 29 8b	jsr $8b29			jsr FPlus
.920b	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.920d	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.920f	f0 02		beq $9213			beq +
.9211	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.9213					+
.9213	4c dc 91	jmp $91dc			jmp _20
.9216					_27:
.9216	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.9218	d0 04		bne $921e			bne _fail
.921a	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.921c	f0 be		beq $91dc			beq _20
.921e					_fail:
.921e	20 e4 83	jsr $83e4			jsr FDrop
.9221	a9 00		lda #$00			lda #0			;return false
.9223	f0 69		beq $928e			beq _return
.9225	4c 8c 92	jmp $928c	_trueb:		jmp _true
.9228	4c 59 92	jmp $9259	_finishb:	jmp _finish
.922b					_30:
.922b	20 9b 92	jsr $929b			jsr _GetChar
.922e	b0 29		bcs $9259			bcs _finish
.9230	c9 2b		cmp #$2b			cmp #'+'
.9232	f0 06		beq $923a			beq _40
.9234	c9 2d		cmp #$2d			cmp #'-'
.9236	d0 07		bne $923f			bne _41
.9238	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.923a	20 9b 92	jsr $929b	_40:		jsr _GetChar		;get exponent digits
.923d	b0 1a		bcs $9259			bcs _finish
.923f	38		sec		_41:		sec			;  digit?
.9240	e9 30		sbc #$30			sbc #'0'
.9242	90 da		bcc $921e			bcc _fail
.9244	c9 0a		cmp #$0a			cmp #9+1
.9246	b0 d6		bcs $921e			bcs _fail
.9248	85 14		sta $14				sta tmp1
.924a	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.924c	b5 28		lda $28,x			lda _exponent,x
.924e	0a		asl a				asl a
.924f	0a		asl a				asl a
.9250	75 28		adc $28,x			adc _exponent,x
.9252	65 14		adc $14				adc tmp1		;  + digit
.9254	95 28		sta $28,x			sta _exponent,x
.9256	4c 3a 92	jmp $923a			jmp _40
.9259					_finish:
.9259	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.925b	f0 c1		beq $921e			beq _fail
.925d	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.925f	f0 07		beq $9268			beq +
.9261	a9 00		lda #$00			lda #0
.9263	38		sec				sec
.9264	f5 28		sbc $28,x			sbc _exponent,x
.9266	95 28		sta $28,x			sta _exponent,x
.9268					+
.9268	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.926a	18		clc				clc
.926b	75 27		adc $27,x			adc _decimalPos,x
.926d	95 28		sta $28,x			sta _exponent,x
.926f	4c 77 92	jmp $9277			jmp _93
.9272	20 92 8c	jsr $8c92	_93b:		jsr F10Star		;apply exponent to mantissa
.9275	d6 28		dec $28,x			dec _exponent,x
.9277	f0 0a		beq $9283	_93:		beq _94
.9279	10 f7		bpl $9272			bpl _93b
.927b	20 0c 89	jsr $890c	_94b:		jsr F10
.927e	20 b0 8c	jsr $8cb0			jsr FSlash
.9281	f6 28		inc $28,x			inc _exponent,x
.9283	30 f6		bmi $927b	_94:		bmi _94b
.9285					_95:
.9285	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.9287	f0 03		beq $928c			beq +
.9289	20 a2 8b	jsr $8ba2			jsr FNegate
.928c					+
.928c	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.928e					_return:
.928e	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9290	95 2d		sta $2d,x			sta _addr+1,x
.9292	e8		inx				inx			; Drop work
.9293	e8		inx				inx
.9294	e8		inx				inx			; 2Drop work
.9295	e8		inx				inx
.9296	e8		inx				inx
.9297	e8		inx				inx
.9298	e8		inx				inx			; Drop len
.9299	e8		inx				inx
.929a	60		rts				rts
.929b					_GetChar:
.929b	38		sec				sec
.929c	b5 2a		lda $2a,x			lda _len,x
.929e	f0 0b		beq $92ab			beq _gc_rts		; if end, return C=1
.92a0	d6 2a		dec $2a,x			dec _len,x
.92a2	a1 2c		lda ($2c,x)			lda (_addr,x)
.92a4	f6 2c		inc $2c,x			inc _addr+0,x
.92a6	d0 02		bne $92aa			bne +
.92a8	f6 2d		inc $2d,x			inc _addr+1,x
.92aa					+
.92aa	18		clc				clc			; get char, return C=0
.92ab	60		rts		_gc_rts:	rts
>92ac	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
>92af	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92b0	38 91					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92b3	08					.byte NN	;wh_Flags	dictionary flags
=37423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92b4	20 9f b3	jsr $b39f	SFAt:		jsr PopYA		; pop sf_addr
.92b7	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.92b9	84 17		sty $17				sty tmp2+1
.92bb	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.92be	a0 01		ldy #$01			ldy #1			; copy exponent
.92c0	b1 16		lda ($16),y			lda (tmp2),y
.92c2	0a		asl a				asl a
.92c3	88		dey				dey
.92c4	b1 16		lda ($16),y			lda (tmp2),y
.92c6	2a		rol a				rol a
.92c7	38		sec				sec
.92c8	e9 7e		sbc #$7e			sbc #126
.92ca	95 4d		sta $4d,x			sta FSExp,x
.92cc	a0 01		ldy #$01			ldy #1			; copy mantissa
.92ce	b1 16		lda ($16),y			lda (tmp2),y
.92d0	09 80		ora #$80			ora #$80
.92d2	4a		lsr a				lsr a
.92d3	95 57		sta $57,x			sta FSMant0,x
.92d5	c8		iny				iny
.92d6	b1 16		lda ($16),y			lda (tmp2),y
.92d8	6a		ror a				ror a
.92d9	95 61		sta $61,x			sta FSMant1,x
.92db	c8		iny				iny
.92dc	b1 16		lda ($16),y			lda (tmp2),y
.92de	6a		ror a				ror a
.92df	95 6b		sta $6b,x			sta FSMant2,x
.92e1	a9 00		lda #$00			lda #0
.92e3	6a		ror a				ror a
.92e4	95 75		sta $75,x			sta FSMant3,x
.92e6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.92e8	a0 00		ldy #$00			ldy #0			; get sign
.92ea	b1 16		lda ($16),y			lda (tmp2),y
.92ec	10 03		bpl $92f1			bpl +
.92ee	20 a2 8b	jsr $8ba2			jsr FNegate
.92f1					+
=61					CL	.var *-(WordListLink+wh_Xt)
=$92f1					en = *	; remember here
>92b2	3d					.byte CL	;wh_CodeLength
.92f1	60		rts				rts
>92f2	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
>92f5	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>92f6	2f 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>92f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>92f9	08					.byte NN	;wh_Flags	dictionary flags
=37493					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.92fa	20 9f b3	jsr $b39f	SFStore:	jsr PopYA		; pop sf_addr
.92fd	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92ff	84 17		sty $17				sty tmp2+1
.9301	a4 4c		ldy $4c				ldy fp			; negative?
.9303	b9 57 00	lda $0057,y			lda FSMant0,y
.9306	29 80		and #$80			and #$80		;  save sign
.9308	85 19		sta $19				sta tmp3+1
.930a	10 03		bpl $930f			bpl +
.930c	20 a2 8b	jsr $8ba2			jsr FNegate
.930f					+
.930f	86 14		stx $14				stx tmp1+0		; save data stack index
.9311	a6 4c		ldx $4c				ldx fp			; switch to FP stack index
.9313	b5 4d		lda $4d,x			lda FSExp,x		; +128
.9315	18		clc				clc
.9316	69 7e		adc #$7e			adc #126
.9318	95 4d		sta $4d,x			sta FSExp,x
.931a	16 75		asl $75,x			asl FSMant3,x
.931c	b5 6b		lda $6b,x			lda FSMant2,x
.931e	2a		rol a				rol a
.931f	a0 03		ldy #$03			ldy #3			; +3 IEEE
.9321	91 16		sta ($16),y			sta (tmp2),y
.9323	b5 61		lda $61,x			lda FSMant1,x
.9325	2a		rol a				rol a
.9326	88		dey				dey			; +2 IEEE
.9327	91 16		sta ($16),y			sta (tmp2),y
.9329	b5 57		lda $57,x			lda FSMant0,x
.932b	2a		rol a				rol a
.932c	2a		rol a				rol a
.932d	56 4d		lsr $4d,x			lsr FSExp,x
.932f	6a		ror a				ror a
.9330	88		dey				dey			; +1 IEEE
.9331	91 16		sta ($16),y			sta (tmp2),y
.9333	b5 4d		lda $4d,x			lda FSExp,x
.9335	05 19		ora $19				ora tmp3+1		;  insert sign
.9337	88		dey				dey			; +0 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	e6 4c		inc $4c				inc fp			; FDrop
.933c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-(WordListLink+wh_Xt)
=$933e					en = *	; remember here
>92f8	44					.byte CL	;wh_CodeLength
.933e	60		rts				rts
>933f	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9346	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9347	75 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9349	03					.byte 3		;wh_CodeLength  (with placeholder value)
>934a	08					.byte NN	;wh_Flags	dictionary flags
=37574					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.934b	a9 04		lda #$04	SFloatPlus:	lda #4
.934d	4c 9a c9	jmp $c99a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9350					en = *	; remember here
>9349	05					.byte CL	;wh_CodeLength
>9350	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
>9357	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9358	c6 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>935a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>935b	08					.byte NN	;wh_Flags	dictionary flags
=37591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.935c	a9 02		lda #$02	SFloats:	lda #2
.935e	4c de ca	jmp $cade			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9361					en = *	; remember here
>935a	05					.byte CL	;wh_CodeLength
>9361	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
>9364	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9365	d7 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9367	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9368	08					.byte NN	;wh_Flags	dictionary flags
=37604					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9369	20 9f b3	jsr $b39f	DFStore:	jsr PopYA		; pop df_addr
.936c	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.936e	84 17		sty $17				sty tmp2+1
.9370	a4 4c		ldy $4c				ldy fp			; negative?
.9372	b9 57 00	lda $0057,y			lda FSMant0,y
.9375	29 80		and #$80			and #$80		; remember sign
.9377	85 19		sta $19				sta tmp3+1
.9379	10 03		bpl $937e			bpl +			; make positive
.937b	20 a2 8b	jsr $8ba2			jsr FNegate
.937e					+
.937e	86 14		stx $14				stx tmp1+0		; save data stack index
.9380	a6 4c		ldx $4c				ldx fp
.9382	a9 00		lda #$00			lda #0
.9384	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9386	91 16		sta ($16),y			sta (tmp2),y
.9388	88		dey				dey			; +6 IEEE
.9389	91 16		sta ($16),y			sta (tmp2),y
.938b	20 d3 93	jsr $93d3			jsr _shift		; shift mantissa
.938e	20 d3 93	jsr $93d3			jsr _shift
.9391	88		dey				dey			; +5 IEEE
.9392	91 16		sta ($16),y			sta (tmp2),y
.9394	b5 75		lda $75,x			lda FSMant3,x
.9396	88		dey				dey			; +4 IEEE
.9397	91 16		sta ($16),y			sta (tmp2),y
.9399	b5 6b		lda $6b,x			lda FSMant2,x
.939b	88		dey				dey			; +3 IEEE
.939c	91 16		sta ($16),y			sta (tmp2),y
.939e	b5 61		lda $61,x			lda FSMant1,x
.93a0	88		dey				dey			; +2 IEEE
.93a1	91 16		sta ($16),y			sta (tmp2),y
.93a3	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.93a5	29 0f		and #$0f			and #$f
.93a7	95 57		sta $57,x			sta FSMant0,x
.93a9	b5 4d		lda $4d,x			lda FSExp,x
.93ab	38		sec				sec
.93ac	e9 02		sbc #$02			sbc #2
.93ae	95 4d		sta $4d,x			sta FSExp,x
.93b0	0a		asl a				asl a
.93b1	0a		asl a				asl a
.93b2	0a		asl a				asl a
.93b3	0a		asl a				asl a
.93b4	15 57		ora $57,x			ora FSMant0,x
.93b6	88		dey				dey			; +1 IEEE
.93b7	91 16		sta ($16),y			sta (tmp2),y
.93b9	b5 4d		lda $4d,x			lda FSExp,x
.93bb	08		php				php
.93bc	4a		lsr a				lsr a
.93bd	4a		lsr a				lsr a
.93be	4a		lsr a				lsr a
.93bf	4a		lsr a				lsr a
.93c0	18		clc				clc
.93c1	69 30		adc #$30			adc #$30
.93c3	28		plp				plp
.93c4	30 03		bmi $93c9			bmi +
.93c6	18		clc				clc
.93c7	69 10		adc #$10			adc #$10
.93c9	05 19		ora $19		+		ora tmp3+1		; add sign bit
.93cb	88		dey				dey			; +0 IEEE
.93cc	91 16		sta ($16),y			sta (tmp2),y
.93ce	e6 4c		inc $4c				inc fp			; FDrop
.93d0	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.93d2	60		rts				rts
.93d3	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.93d5	76 61		ror $61,x			ror FSMant1,x
.93d7	76 6b		ror $6b,x			ror FSMant2,x
.93d9	76 75		ror $75,x			ror FSMant3,x
.93db	6a		ror a				ror a
=115					CL	.var *-(WordListLink+wh_Xt)
=$93dc					en = *	; remember here
>9367	73					.byte CL	;wh_CodeLength
.93dc	60		rts				rts
>93dd	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
>93e0	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>93e1	e4 92					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>93e3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>93e4	08					.byte NN	;wh_Flags	dictionary flags
=37728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.93e5	20 9f b3	jsr $b39f	DFAt:		jsr PopYA		; pop df_addr
.93e8	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.93ea	84 17		sty $17				sty tmp2+1
.93ec	20 16 84	jsr $8416			jsr FAllocX		; alloc FP stack entry
.93ef	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93f1	b1 16		lda ($16),y			lda (tmp2),y
.93f3	95 4d		sta $4d,x			sta FSExp,x
.93f5	c8		iny				iny			; +1 IEEE byte
.93f6	b1 16		lda ($16),y			lda (tmp2),y
.93f8	95 57		sta $57,x			sta FSMant0,x
.93fa	c8		iny				iny			; +2 IEEE byte
.93fb	b1 16		lda ($16),y			lda (tmp2),y
.93fd	95 61		sta $61,x			sta FSMant1,x
.93ff	c8		iny				iny			; +3 IEEE byte
.9400	b1 16		lda ($16),y			lda (tmp2),y
.9402	95 6b		sta $6b,x			sta FSMant2,x
.9404	c8		iny				iny			; +4 IEEE byte
.9405	b1 16		lda ($16),y			lda (tmp2),y
.9407	95 75		sta $75,x			sta FSMant3,x
.9409	c8		iny				iny			; +5 IEEE byte
.940a	b1 16		lda ($16),y			lda (tmp2),y
.940c	20 35 94	jsr $9435			jsr _shifta		; shift exponent & mantissa bits into place
.940f	20 35 94	jsr $9435			jsr _shifta
.9412	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.9414	0a		asl a				asl a
.9415	36 4d		rol $4d,x			rol FSExp,x
.9417	0a		asl a				asl a
.9418	36 4d		rol $4d,x			rol FSExp,x
.941a	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.941c	18		clc				clc
.941d	69 02		adc #$02			adc #2
.941f	95 4d		sta $4d,x			sta FSExp,x
.9421	b5 57		lda $57,x			lda FSMant0,x
.9423	29 7f		and #$7f			and #$7f
.9425	09 40		ora #$40			ora #$40		;   insert implied 1
.9427	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.9429	a6 14		ldx $14				ldx tmp1		; restore data stack index
.942b	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.942d	b1 16		lda ($16),y			lda (tmp2),y
.942f	10 03		bpl $9434			bpl +
.9431	20 a2 8b	jsr $8ba2			jsr FNegate
.9434					+
.9434	60		rts				rts
.9435	0a		asl a		_shifta:	asl a
.9436	36 75		rol $75,x			rol FSMant3,x
.9438	36 6b		rol $6b,x			rol FSMant2,x
.943a	36 61		rol $61,x			rol FSMant1,x
.943c	36 57		rol $57,x			rol FSMant0,x
.943e	36 4d		rol $4d,x			rol FSExp,x
.9440	60		rts				rts
=92					CL	.var *-(WordListLink+wh_Xt)
=$9441					en = *	; remember here
>93e3	5c					.byte CL	;wh_CodeLength
>9441	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
>9448	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9449	60 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>944b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>944c	08					.byte NN	;wh_Flags	dictionary flags
=37832					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.944d	a9 08		lda #$08	DFloatPlus:	lda #8
.944f	4c 9a c9	jmp $c99a			jmp Plus_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9452					en = *	; remember here
>944b	05					.byte CL	;wh_CodeLength
>9452	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
>9459	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HNL
>945a	c8 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>945c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>945d	08					.byte NN	;wh_Flags	dictionary flags
=37849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.945e	a9 03		lda #$03	DFloats:	lda #3
.9460	4c de ca	jmp $cade			jmp LShift_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$9463					en = *	; remember here
>945c	05					.byte CL	;wh_CodeLength
>9463	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
>9467	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9468	d9 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>946a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>946b	08					.byte NN	;wh_Flags	dictionary flags
=37863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.946c					FKey:
.946c	20 b7 c9	jsr $c9b7			jsr Here		; ( addr )
.946f	20 b7 c9	jsr $c9b7			jsr Here		; ( addr addr )
.9472	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9474	20 9b b7	jsr $b79b			jsr PushZA
.9477	20 71 c2	jsr $c271			jsr Accept		; ( addr len )
.947a	20 bd 91	jsr $91bd			jsr ToFloat		; ( true | false)
.947d	e8		inx				inx			; err?
.947e	e8		inx				inx
.947f	b5 22		lda $22,x			lda DStack-2,x
.9481	f0 01		beq $9484			beq _err
.9483	60		rts				rts
.9484	20 7a b8	jsr $b87a	_err:		jsr SLiteral_runtime
.9487	4c 8d 94	jmp $948d			  jmp +
>948a	20 3f 20					  .text " ? "
.948d	20 7d cd	jsr $cd7d	+		jsr Type
.9490	4c 6c 94	jmp $946c			jmp FKey
>9493	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
>9499	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HNL
>949a	e7 93					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>949c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>949d	08					.byte NN	;wh_Flags	dictionary flags
=37913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.949e	20 9f b3	jsr $b39f	FMPoly:		jsr PopYA
.94a1	20 59 b7	jsr $b759	FMPolyYA:	jsr PushYA		; push coefficent addr
.94a4	20 82 85	jsr $8582			jsr FAt_YA		; fetch 1st coefficent
.94a7	4c ba 94	jmp $94ba			jmp _4
.94aa	20 9c 84	jsr $849c	_2:		jsr FOver
.94ad	20 fd 8b	jsr $8bfd			jsr FStar
.94b0	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.94b2	b4 25		ldy $25,x			ldy DStack+1,x
.94b4	20 82 85	jsr $8582			jsr FAt_YA
.94b7	20 29 8b	jsr $8b29			jsr FPlus
.94ba	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.94bc	20 9a c9	jsr $c99a			jsr Plus_A
.94bf	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.94c1	d0 e7		bne $94aa			bne _2
.94c3	e8		inx				inx			; Drop coefficent ptr
.94c4	e8		inx				inx
=39					CL	.var *-(WordListLink+wh_Xt)
=$94c5					en = *	; remember here
>949c	27					.byte CL	;wh_CodeLength
.94c5	60		rts				rts
>94c6	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
>94ce	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>94cf	19 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>94d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>94d2	08					.byte NN	;wh_Flags	dictionary flags
=37966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.94d3	a9 dd		lda #$dd	FLog2M1M:	lda #<_c
.94d5	a0 94		ldy #$94			ldy #>_c
.94d7	20 a1 94	jsr $94a1			jsr FMPolyYA
.94da	4c fd 8b	jmp $8bfd			jmp FStar
.94dd					_c:
>94dd	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e1	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>94e2	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e6	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>94e7	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94eb	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>94ec	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f0	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f1	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94f5	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>94f6	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94fa	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>94fb	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94ff	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>9500	00 00						.word 0
=47					CL	.var *-(WordListLink+wh_Xt)
=$9502					en = *	; remember here
>94d1	2f					.byte CL	;wh_CodeLength
>9502	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
>9507	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9508	4e 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>950a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>950b	08					.byte NN	;wh_Flags	dictionary flags
=38023					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.950c	a4 4c		ldy $4c		FLog2:		ldy fp
.950e	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.9511	30 20		bmi $9533			bmi _OutOfRange
.9513	f0 1e		beq $9533			beq _OutOfRange
.9515	b9 4d 00	lda $004d,y			lda FSExp,y
.9518	48		pha				pha		; remember orig exponent
.9519	a9 01		lda #$01			lda #1
.951b	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.951e	20 90 8b	jsr $8b90			jsr F1Minus
.9521	20 d3 94	jsr $94d3			jsr FLog2M1M
.9524	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.9526	68		pla				pla
.9527	38		sec				sec
.9528	e9 01		sbc #$01			sbc #1
.952a	10 01		bpl $952d			bpl +
.952c	88		dey				dey
.952d					+
.952d	20 41 8e	jsr $8e41			jsr SToFYA
.9530	4c 29 8b	jmp $8b29			jmp FPlus
.9533	4c 01 b4	jmp $b401	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-(WordListLink+wh_Xt)
=$9536					en = *	; remember here
>950a	2a					.byte CL	;wh_CodeLength
>9536	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
>9539	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HNL
>953a	87 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>953c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>953d	08					.byte NN	;wh_Flags	dictionary flags
=38073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.953e	20 0c 95	jsr $950c	FLn:		jsr FLog2
.9541	20 cc 88	jsr $88cc			jsr FLitI
>9544	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9548	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.9549	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$954c					en = *	; remember here
>953c	0e					.byte CL	;wh_CodeLength
>954c	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
>9551	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9552	b9 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9554	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9555	08					.byte NN	;wh_Flags	dictionary flags
=38097					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9556	20 5e 8b	jsr $8b5e	FlnP1:		jsr F1Plus
.9559	4c 3e 95	jmp $953e			jmp FLn
=6					CL	.var *-(WordListLink+wh_Xt)
=$955c					en = *	; remember here
>9554	06					.byte CL	;wh_CodeLength
>955c	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
>9560	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9561	d1 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9563	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9564	08					.byte NN	;wh_Flags	dictionary flags
=38112					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9565	20 0c 95	jsr $950c	FLog:		jsr FLog2
.9568	20 cc 88	jsr $88cc			jsr FLitI
>956b	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>956f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.9570	4c fd 8b	jmp $8bfd			jmp FStar
=14					CL	.var *-(WordListLink+wh_Xt)
=$9573					en = *	; remember here
>9563	0e					.byte CL	;wh_CodeLength
>9573	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
>957b	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HNL
>957c	e0 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>957e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>957f	08					.byte NN	;wh_Flags	dictionary flags
=38139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9580	a9 8a		lda #$8a	FExp2M1M:	lda #<_c
.9582	a0 95		ldy #$95			ldy #>_c
.9584	20 a1 94	jsr $94a1			jsr FMPolyYA
.9587	4c fd 8b	jmp $8bfd			jmp FStar
=10					CL	.var *-(WordListLink+wh_Xt)
=$958a					en = *	; remember here
>957e	0a					.byte CL	;wh_CodeLength
.958a					_c:
>958a	da dc 4f 7c					.dword $7C4FDCDa	; 32 bit signed binary mantissa.  $40000000 = +0.5
>958e	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>958f	d6 ca 4c 49					.dword $494CCAD6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9593	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9594	f0 42 64 72					.dword $726442f0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9598	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9599	44 90 f4 7a					.dword $7AF49044	; 32 bit signed binary mantissa.  $40000000 = +0.5
>959d	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>959e	9b 3c b9 58					.dword $58B93C9b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a2	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>95a3	00						.byte 0
>95a4	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
>95a9	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95aa	fb 94					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95ad	08					.byte NN	;wh_Flags	dictionary flags
=38185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95ae	20 17 87	jsr $8717	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.95b1	20 8b 8e	jsr $8e8b			jsr FToS
.95b4	20 80 95	jsr $9580			jsr FExp2M1M
.95b7	20 5e 8b	jsr $8b5e			jsr F1Plus
.95ba	20 83 b3	jsr $b383			jsr PopA
.95bd	a4 4c		ldy $4c				ldy fp
.95bf	18		clc				clc
.95c0	79 4d 00	adc $004d,y			adc FSExp,y
.95c3	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-(WordListLink+wh_Xt)
=$95c6					en = *	; remember here
>95ac	18					.byte CL	;wh_CodeLength
.95c6	60		rts				rts
>95c7	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
>95cb	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95cc	29 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95cf	08					.byte NN	;wh_Flags	dictionary flags
=38219					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95d0					FExp:
.95d0	20 cc 88	jsr $88cc			jsr FLitI
>95d3	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95d7	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.95d8	20 fd 8b	jsr $8bfd			jsr FStar
.95db	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$95de					en = *	; remember here
>95ce	0e					.byte CL	;wh_CodeLength
>95de	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
>95e4	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95e5	4b 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95e8	08					.byte NN	;wh_Flags	dictionary flags
=38244					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95e9	20 d0 95	jsr $95d0	FExpM1:		jsr FExp
.95ec	4c 90 8b	jmp $8b90			jmp F1Minus
=6					CL	.var *-(WordListLink+wh_Xt)
=$95ef					en = *	; remember here
>95e7	06					.byte CL	;wh_CodeLength
>95ef	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
>95f4	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HNL
>95f5	64 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>95f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>95f8	08					.byte NN	;wh_Flags	dictionary flags
=38260					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.95f9					FALog:
.95f9	20 cc 88	jsr $88cc			jsr FLitI
>95fc	20 3c 4d 6a					.dword $6a4d3c20	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9600	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9601	20 fd 8b	jsr $8bfd			jsr FStar
.9604	4c ae 95	jmp $95ae			jmp FExp2
=14					CL	.var *-(WordListLink+wh_Xt)
=$9607					en = *	; remember here
>95f7	0e					.byte CL	;wh_CodeLength
>9607	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
>960a	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HNL
>960b	74 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>960d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>960e	08					.byte NN	;wh_Flags	dictionary flags
=38282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.960f	20 00 85	jsr $8500	FPower:		jsr FSwap
.9612	20 0c 95	jsr $950c			jsr FLog2
.9615	20 fd 8b	jsr $8bfd			jsr FStar
.9618	4c ae 95	jmp $95ae			jmp FExp2
=12					CL	.var *-(WordListLink+wh_Xt)
=$961b					en = *	; remember here
>960d	0c					.byte CL	;wh_CodeLength
>961b	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
>9622	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9623	8a 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9626	08					.byte NN	;wh_Flags	dictionary flags
=38306					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9627					Deg2Rad:
.9627	20 cc 88	jsr $88cc			jsr FLitI
>962a	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>962e	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.962f	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9632					en = *	; remember here
>9625	0b					.byte CL	;wh_CodeLength
>9632	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
>9639	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HNL
>963a	a2 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>963c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>963d	08					.byte NN	;wh_Flags	dictionary flags
=38329					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.963e					Rad2Deg:
.963e	20 cc 88	jsr $88cc			jsr FLitI
>9641	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9645	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.9646	4c fd 8b	jmp $8bfd			jmp FStar
=11					CL	.var *-(WordListLink+wh_Xt)
=$9649					en = *	; remember here
>963c	0b					.byte CL	;wh_CodeLength
>9649	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
>9651	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9652	b9 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9654	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9655	08					.byte NN	;wh_Flags	dictionary flags
=38353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9656	a4 4c		ldy $4c		FAReduce:	ldy fp
.9658	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.965b	f0 2f		beq $968c			beq _ok
.965d	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.9660	30 2a		bmi $968c			bmi _ok			; small?
.9662	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.9664	30 26		bmi $968c			bmi _ok			;if exponent <=0
.9666	f0 24		beq $968c			beq _ok
.9668	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.966a	b0 22		bcs $968e			bcs _exp2
.966c	b9 57 00	lda $0057,y			lda FSMant0,y
.966f	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.9671	90 19		bcc $968c			bcc _ok
.9673	c9 9b		cmp #$9b			cmp #$100-$65
.9675	b0 15		bcs $968c			bcs _ok
.9677					_mir:
.9677	20 45 89	jsr $8945			jsr FPi
.967a	a4 4c		ldy $4c				ldy fp
.967c	b9 58 00	lda $0058,y			lda FSMant0+1,y
.967f	10 03		bpl $9684			bpl _3
.9681	20 a2 8b	jsr $8ba2			jsr FNegate
.9684	20 00 85	jsr $8500	_3:		jsr FSwap
.9687	20 6b 8b	jsr $8b6b			jsr FMinus
.968a	38		sec				sec		; mirrored
.968b	60		rts				rts
.968c	18		clc		_ok:		clc		; not mirrored
.968d	60		rts				rts
.968e	d0 0b		bne $969b	_exp2:		bne _rot	;if exp>2 then fix
.9690	b9 57 00	lda $0057,y			lda FSMant0,y
.9693	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9695	90 e0		bcc $9677			bcc _mir
.9697	c9 9b		cmp #$9b			cmp #$100-$65
.9699	b0 dc		bcs $9677			bcs _mir
.969b	20 77 89	jsr $8977	_rot:		jsr F2Pi
.969e	20 b0 8c	jsr $8cb0			jsr FSlash
.96a1	20 17 87	jsr $8717			jsr FIntFrc
.96a4	e6 4c		inc $4c				inc fp		; FDrop integer part
.96a6	a4 4c		ldy $4c				ldy fp		;if >=.5
.96a8	b9 4d 00	lda $004d,y			lda FSExp,y
.96ab	a8		tay				tay
.96ac	30 03		bmi $96b1			bmi _rot4
.96ae	20 90 8b	jsr $8b90			jsr F1Minus	;  subtract 1
.96b1	20 77 89	jsr $8977	_rot4:		jsr F2Pi
.96b4	20 fd 8b	jsr $8bfd			jsr FStar
.96b7	4c 56 96	jmp $9656			jmp FAReduce	; rotate done, look again
=100					CL	.var *-(WordListLink+wh_Xt)
=$96ba					en = *	; remember here
>9654	64					.byte CL	;wh_CodeLength
>96ba	46 53 69 6e 4d			L1:	.text "FSinM"	;  name of word as a string, ending at wh_NameLastChar
>96bf	a5					.byte (("FSinM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96c0	d1 95					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96c3	08					.byte NN	;wh_Flags	dictionary flags
=38463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96c4	20 78 84	jsr $8478	FSinM:		jsr FDup
.96c7	20 83 8c	jsr $8c83			jsr FSqr	; x x^2
.96ca	a9 da		lda #$da			lda #<_c
.96cc	a0 96		ldy #$96			ldy #>_c
.96ce	20 a1 94	jsr $94a1			jsr FMPolyYA
.96d1	20 fd 8b	jsr $8bfd			jsr FStar
.96d4	20 5e 8b	jsr $8b5e			jsr F1Plus	; C0 +1.0
.96d7	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$96da					en = *	; remember here
>96c2	16					.byte CL	;wh_CodeLength
.96da					_c:
>96da	a6 a7 21 57					.dword $5721a7a6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96de	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>96df	4e 0b 2a 98					.dword $982a0b4e	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e3	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>96e4	3c 8f 43 44					.dword $44438f3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96e8	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>96e9	37 ae aa aa					.dword $aaaaae37	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ed	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>96ee	00						.byte 0
>96ef	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
>96f3	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>96f4	3f 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>96f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>96f7	08					.byte NN	;wh_Flags	dictionary flags
=38515					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.96f8	20 56 96	jsr $9656	FSin:		jsr FAReduce
.96fb	4c c4 96	jmp $96c4			jmp FSinM
=6					CL	.var *-(WordListLink+wh_Xt)
=$96fe					en = *	; remember here
>96f6	06					.byte CL	;wh_CodeLength
>96fe	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
>9702	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9703	73 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9705	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9706	08					.byte NN	;wh_Flags	dictionary flags
=38530					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9707	20 56 89	jsr $8956	FCos:		jsr FPiH
.970a	20 29 8b	jsr $8b29			jsr FPlus
.970d	4c f8 96	jmp $96f8			jmp FSin
=9					CL	.var *-(WordListLink+wh_Xt)
=$9710					en = *	; remember here
>9705	09					.byte CL	;wh_CodeLength
>9710	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
>9717	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9718	82 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>971a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>971b	08					.byte NN	;wh_Flags	dictionary flags
=38551					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.971c	20 78 84	jsr $8478	FSinCos:	jsr FDup
.971f	20 f8 96	jsr $96f8			jsr FSin
.9722	20 00 85	jsr $8500			jsr FSwap
.9725	4c 07 97	jmp $9707			jmp FCos
=12					CL	.var *-(WordListLink+wh_Xt)
=$9728					en = *	; remember here
>971a	0c					.byte CL	;wh_CodeLength
>9728	46 54 61 6e 4d			L1:	.text "FTanM"	;  name of word as a string, ending at wh_NameLastChar
>972d	a5					.byte (("FTanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>972e	97 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9730	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9731	08					.byte NN	;wh_Flags	dictionary flags
=38573					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9732	20 78 84	jsr $8478	FTanM:		jsr FDup
.9735	20 83 8c	jsr $8c83			jsr FSqr		; x x^2
.9738	a9 48		lda #$48			lda #<_c
.973a	a0 97		ldy #$97			ldy #>_c
.973c	20 a1 94	jsr $94a1			jsr FMPolyYA
.973f	20 fd 8b	jsr $8bfd			jsr FStar
.9742	20 5e 8b	jsr $8b5e			jsr F1Plus		; c0 1.0
.9745	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9748					en = *	; remember here
>9730	16					.byte CL	;wh_CodeLength
.9748					_c:
>9748	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>974c	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>974d	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9751	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9752	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9756	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9757	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975b	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>975c	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9760	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9761	00						.byte 0
>9762	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
>9766	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9767	ad 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9769	03					.byte 3		;wh_CodeLength  (with placeholder value)
>976a	08					.byte NN	;wh_Flags	dictionary flags
=38630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.976b	20 56 96	jsr $9656	FTan:		jsr FAReduce
.976e	90 06		bcc $9776			bcc _30
.9770	20 76 97	jsr $9776			jsr _30
.9773	4c a2 8b	jmp $8ba2			jmp FNegate
.9776					_30:
.9776	20 78 84	jsr $8478			jsr FDup
.9779	20 c9 8b	jsr $8bc9			jsr FAbs
.977c	20 67 89	jsr $8967			jsr FPiQ
.977f	20 d3 87	jsr $87d3			jsr FLe
.9782	e8		inx				inx			; pop f
.9783	e8		inx				inx
.9784	b5 24		lda $24,x			lda DStack+0,x
.9786	d0 aa		bne $9732			bne FTanM
.9788	20 a2 44	jsr $44a2			jsr FPi/2
.978b	a4 4c		ldy $4c				ldy fp			; get sign
.978d	b9 57 00	lda $0057,y			lda FSMant0,y
.9790	10 03		bpl $9795			bpl +
.9792	20 a2 8b	jsr $8ba2			jsr FNegate
.9795					+
.9795	20 00 85	jsr $8500			jsr FSwap
.9798	20 6b 8b	jsr $8b6b			jsr FMinus
.979b	20 32 97	jsr $9732			jsr FTanM
.979e	4c 55 8d	jmp $8d55			jmp F1Slash
=54					CL	.var *-(WordListLink+wh_Xt)
=$97a1					en = *	; remember here
>9769	36					.byte CL	;wh_CodeLength
>97a1	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
>97a6	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HNL
>97a7	e6 96					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>97a9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>97aa	08					.byte NN	;wh_Flags	dictionary flags
=38694					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.97ab	a4 4c		ldy $4c		FACos:		ldy fp
.97ad	b9 57 00	lda $0057,y			lda FSMant0,y
.97b0	08		php				php			; save sign
.97b1	20 c9 8b	jsr $8bc9			jsr FAbs
.97b4	a9 d7		lda #$d7			lda #<_c
.97b6	a0 97		ldy #$97			ldy #>_c
.97b8	20 a1 94	jsr $94a1			jsr FMPolyYA
.97bb	20 00 85	jsr $8500			jsr FSwap
.97be	20 a2 8b	jsr $8ba2			jsr FNegate
.97c1	20 5e 8b	jsr $8b5e			jsr F1Plus
.97c4	20 30 8f	jsr $8f30			jsr FSqrt
.97c7	20 fd 8b	jsr $8bfd			jsr FStar
.97ca	28		plp				plp			; was r1 negative?
.97cb	10 09		bpl $97d6			bpl +
.97cd	20 45 89	jsr $8945			jsr FPi
.97d0	20 00 85	jsr $8500			jsr FSwap
.97d3	20 6b 8b	jsr $8b6b			jsr FMinus
.97d6					+
=43					CL	.var *-(WordListLink+wh_Xt)
=$97d6					en = *	; remember here
>97a9	2b					.byte CL	;wh_CodeLength
.97d6	60		rts				rts
.97d7					_c:
>97d7	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97db	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>97dc	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e0	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>97e1	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97e5	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>97e6	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ea	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97eb	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97ef	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97f0	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>97f5	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>97fa	00						.byte 0
>97fb	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
>9800	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9801	26 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9804	08					.byte NN	;wh_Flags	dictionary flags
=38784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9805	20 ab 97	jsr $97ab	FASin:		jsr FACos
.9808	20 a2 8b	jsr $8ba2			jsr FNegate
.980b	20 56 89	jsr $8956			jsr FPiH
.980e	4c 29 8b	jmp $8b29			jmp FPlus
=12					CL	.var *-(WordListLink+wh_Xt)
=$9811					en = *	; remember here
>9803	0c					.byte CL	;wh_CodeLength
>9811	46 41 54 61 6e 4d		L1:	.text "FATanM"	;  name of word as a string, ending at wh_NameLastChar
>9817	a6					.byte (("FATanM"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9818	80 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>981a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>981b	08					.byte NN	;wh_Flags	dictionary flags
=38807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.981c	20 78 84	jsr $8478	FATanM:		jsr FDup		; x x
.981f	20 83 8c	jsr $8c83			jsr FSqr		; x xsqr
.9822	a9 32		lda #$32			lda #<_c
.9824	a0 98		ldy #$98			ldy #>_c
.9826	20 a1 94	jsr $94a1			jsr FMPolyYA
.9829	20 fd 8b	jsr $8bfd			jsr FStar		; x poly
.982c	20 5e 8b	jsr $8b5e			jsr F1Plus		; x poly
.982f	4c fd 8b	jmp $8bfd			jmp FStar
=22					CL	.var *-(WordListLink+wh_Xt)
=$9832					en = *	; remember here
>981a	16					.byte CL	;wh_CodeLength
.9832					_c:
>9832	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9836	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>9837	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>983b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>983c	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9840	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9841	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9845	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9846	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984a	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>984b	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>984f	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9850	00						.byte 0
>9851	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
>9856	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9857	97 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9859	03					.byte 3		;wh_CodeLength  (with placeholder value)
>985a	08					.byte NN	;wh_Flags	dictionary flags
=38870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.985b					FATan:
.985b	a4 4c		ldy $4c				ldy fp
.985d	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.9860	30 ba		bmi $981c			bmi FATanM
.9862	f0 b8		beq $981c			beq FATanM
.9864	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.9867	08		php				php
.9868	20 55 8d	jsr $8d55			jsr F1Slash
.986b	20 1c 98	jsr $981c			jsr FATanM
.986e	20 a2 8b	jsr $8ba2			jsr FNegate
.9871	20 56 89	jsr $8956			jsr FPiH
.9874	28		plp				plp
.9875	10 03		bpl $987a			bpl _18
.9877	20 a2 8b	jsr $8ba2			jsr FNegate
.987a	4c 29 8b	jmp $8b29	_18:		jmp FPlus
>987d	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
>9883	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9884	d6 97					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9886	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9887	08					.byte NN	;wh_Flags	dictionary flags
=38915					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9888	a4 4c		ldy $4c		FATan2:		ldy fp
.988a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.988d	f0 1c		beq $98ab			beq _rxzero
.988f	0a		asl a				asl a		;   C=rx sign
.9890	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9893	08		php				php		; save signs
.9894	20 b0 8c	jsr $8cb0			jsr FSlash
.9897	20 5b 98	jsr $985b			jsr FATan
.989a	28		plp				plp		; pop signs
.989b	b0 01		bcs $989e			bcs _rxneg
.989d	60		rts		_rts:		rts
.989e	08		php		_rxneg:		php
.989f	20 45 89	jsr $8945			jsr FPi
.98a2	28		plp				plp
.98a3	10 03		bpl $98a8			bpl +
.98a5	20 a2 8b	jsr $8ba2			jsr FNegate
.98a8	4c 29 8b	jmp $8b29	+		jmp FPlus
.98ab	e6 4c		inc $4c		_rxzero:	inc fp		; FDrop rx
.98ad	b9 57 00	lda $0057,y			lda FSMant0,y
.98b0	08		php				php
.98b1	e6 4c		inc $4c				inc fp		; FDrop ry
.98b3	20 56 89	jsr $8956			jsr FPiH
.98b6	28		plp				plp
.98b7	10 e4		bpl $989d			bpl _rts
.98b9	4c a2 8b	jmp $8ba2			jmp FNegate
=52					CL	.var *-(WordListLink+wh_Xt)
=$98bc					en = *	; remember here
>9886	34					.byte CL	;wh_CodeLength
>98bc	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
>98be	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>98bf	03 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>98c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>98c2	08					.byte NN	;wh_Flags	dictionary flags
=38974					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.98c3	4c c6 98	jmp $98c6	Ed:		jmp ed6502
=3					CL	.var *-(WordListLink+wh_Xt)
=$98c6					en = *	; remember here
>98c1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.98c6					ed6502:
.98c6	ad 00 03	lda $0300			lda base
.98c9	85 23		sta $23				sta editor3+1
.98cb	20 58 b1	jsr $b158			jsr Decimal
.98ce	a9 00		lda #$00			lda #0
.98d0	85 1e		sta $1e				sta ed_head
.98d2	85 1f		sta $1f				sta ed_head+1
.98d4	85 20		sta $20				sta ed_cur
.98d6	85 21		sta $21				sta ed_cur+1
.98d8	85 22		sta $22				sta ed_flags
.98da	20 aa b7	jsr $b7aa			jsr Zero
.98dd	20 aa b7	jsr $b7aa			jsr Zero		; ( addr-t u-t )
.98e0	20 d7 aa	jsr $aad7			jsr CR
.98e3					ed_input_loop:
.98e3	a9 7e		lda #$7e			lda #$ff-%10000001
.98e5	25 22		and $22				and ed_flags
.98e7	85 22		sta $22				sta ed_flags
.98e9	20 8b 9d	jsr $9d8b			jsr ed_get_input
.98ec	a5 06		lda $06				lda ciblen+0
.98ee	d0 1e		bne $990e			bne _command_mode
.98f0	a5 20		lda $20				lda ed_cur+0
.98f2	a4 21		ldy $21				ldy ed_cur+1
.98f4	20 59 b7	jsr $b759			jsr PushYA		; ( addr-t u-t u )
.98f7	a9 80		lda #$80			lda #%10000000
.98f9	05 22		ora $22				ora ed_flags
.98fb	85 22		sta $22				sta ed_flags
.98fd	20 eb c9	jsr $c9eb			jsr One_Plus		; ( addr-t u-t u+1 )
.9900	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.9903	b0 03		bcs $9908			bcs +
.9905	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop	; New line number is not legal, abort
.9908					+
.9908	20 aa b7	jsr $b7aa			jsr Zero		; ( addr-t u-t u+1 0 )
.990b	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.990e					_command_mode:
.990e	20 aa b7	jsr $b7aa			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.9911	20 aa b7	jsr $b7aa			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.9914	a0 00		ldy #$00			ldy #0			; get char
.9916	b1 04		lda ($04),y			lda (cib),y
.9918	c9 2e		cmp #$2e			cmp #'.'
.991a	d0 31		bne $994d			bne _prefix_dollar
.991c	20 9a 9d	jsr $9d9a			jsr ed_have_text
.991f	a5 20		lda $20				lda ed_cur
.9921	95 26		sta $26,x			sta DStack+2,x
.9923	a5 21		lda $21				lda ed_cur+1
.9925	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9927	a9 80		lda #$80			lda #%10000000
.9929	05 22		ora $22				ora ed_flags
.992b	85 22		sta $22				sta ed_flags
.992d	a5 06		lda $06				lda ciblen
.992f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9931	d0 03		bne $9936			bne +
.9933	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.9936					+
.9936	a5 04		lda $04				lda cib+0
.9938	a4 05		ldy $05				ldy cib+1
.993a	20 59 b7	jsr $b759			jsr PushYA
.993d	a5 06		lda $06				lda ciblen+0
.993f	a4 07		ldy $07				ldy ciblen+1
.9941	20 59 b7	jsr $b759			jsr PushYA
.9944	20 c5 c9	jsr $c9c5			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9947	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.994a	4c 1f 9a	jmp $9a1f			jmp _check_for_para2
.994d					_prefix_dollar:
.994d	c9 24		cmp #$24			cmp #'$'
.994f	d0 1f		bne $9970			bne _prefix_percent
.9951	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9954	e8		inx				inx
.9955	e8		inx				inx			; ( addr-t u-t 0 )
.9956	20 c7 9d	jsr $9dc7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9959	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t para1 0 )
.995c	a9 80		lda #$80			lda #%10000000
.995e	05 22		ora $22				ora ed_flags
.9960	85 22		sta $22				sta ed_flags
.9962	a5 06		lda $06				lda ciblen
.9964	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9966	d0 03		bne $996b			bne +
.9968	4c cd 99	jmp $99cd			jmp _line_number_only_from_external
.996b					+
.996b	a0 01		ldy #$01			ldy #1
.996d	4c 95 9a	jmp $9a95			jmp _check_command
.9970					_prefix_percent:
.9970	c9 25		cmp #$25			cmp #'%'
.9972	f0 04		beq $9978			beq _whole_text
.9974	c9 2c		cmp #$2c			cmp #','
.9976	d0 1b		bne $9993			bne _prefix_semicolon
.9978					_whole_text:
.9978	20 9a 9d	jsr $9d9a			jsr ed_have_text
.997b	a9 01		lda #$01			lda #1
.997d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.997f	a9 00		lda #$00			lda #0
.9981	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9983					_semicolon_entry:
.9983	e8		inx				inx
.9984	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9985	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9988	a9 80		lda #$80			lda #%10000000
.998a	05 22		ora $22				ora ed_flags
.998c	85 22		sta $22				sta ed_flags
.998e	a0 01		ldy #$01			ldy #1
.9990	4c 95 9a	jmp $9a95			jmp _check_command
.9993					_prefix_semicolon:
.9993	c9 3b		cmp #$3b			cmp #';'
.9995	d0 0e		bne $99a5			bne _prefix_number
.9997	20 9a 9d	jsr $9d9a			jsr ed_have_text
.999a	a5 20		lda $20				lda ed_cur
.999c	95 26		sta $26,x			sta DStack+2,x
.999e	a5 21		lda $21				lda ed_cur+1
.99a0	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.99a2	4c 83 99	jmp $9983			jmp _semicolon_entry
.99a5					_prefix_number:
.99a5	20 aa b7	jsr $b7aa			jsr Zero
.99a8	20 aa b7	jsr $b7aa			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.99ab	a5 04		lda $04				lda cib+0
.99ad	a4 05		ldy $05				ldy cib+1
.99af	20 59 b7	jsr $b759			jsr PushYA
.99b2	a5 06		lda $06				lda ciblen+0
.99b4	a4 07		ldy $07				ldy ciblen+1
.99b6	20 59 b7	jsr $b759			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.99b9	20 d9 af	jsr $afd9			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.99bc	b5 24		lda $24,x			lda DStack+0,x
.99be	15 25		ora $25,x			ora DStack+1,x
.99c0	d0 25		bne $99e7			bne _have_unconverted_chars
.99c2	20 b6 c4	jsr $c4b6			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.99c5	20 e3 bf	jsr $bfe3			jsr D_To_S		; ( addr-t u-t 0 0 u )
.99c8	20 1f ce	jsr $ce1f			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.99cb	e8		inx				inx
.99cc	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.99cd					_line_number_only_from_external:
.99cd	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t 0 u )
.99d0	20 a6 9d	jsr $9da6			jsr ed_is_valid_line
.99d3	b0 03		bcs $99d8			bcs +
.99d5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.99d8					+
.99d8	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t u 0 )
.99db	20 06 9e	jsr $9e06			jsr ed_para1_to_cur
.99de	a9 80		lda #$80			lda #%10000000
.99e0	05 22		ora $22				ora ed_flags
.99e2	85 22		sta $22				sta ed_flags
.99e4	4c 64 9c	jmp $9c64			jmp ed_cmd_p_from_external
.99e7					_have_unconverted_chars:
.99e7	a5 06		lda $06				lda ciblen+0
.99e9	d5 24		cmp $24,x			cmp DStack+0,x
.99eb	d0 16		bne $9a03			bne _no_command_yet
.99ed	a5 07		lda $07				lda ciblen+1
.99ef	d5 25		cmp $25,x			cmp DStack+1,x
.99f1	d0 10		bne $9a03			bne _no_command_yet
.99f3	8a		txa				txa
.99f4	18		clc				clc
.99f5	69 08		adc #$08			adc #8
.99f7	aa		tax				tax			; ( addr-t u-t 0 0 )
.99f8	a9 7f		lda #$7f			lda #$ff-%10000000
.99fa	25 22		and $22				and ed_flags
.99fc	85 22		sta $22				sta ed_flags
.99fe	a0 00		ldy #$00			ldy #0
.9a00	4c 95 9a	jmp $9a95			jmp _check_command
.9a03					_no_command_yet:
.9a03	20 7a ce	jsr $ce7a			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9a06	20 1f ce	jsr $ce1f			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9a09	20 e3 bf	jsr $bfe3			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9a0c	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9a0e	95 2a		sta $2a,x			sta DStack+6,x
.9a10	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9a12	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9a14	e8		inx				inx
.9a15	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9a16	20 99 ce	jsr $ce99			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9a19	a9 80		lda #$80			lda #%10000000
.9a1b	05 22		ora $22				ora ed_flags
.9a1d	85 22		sta $22				sta ed_flags
.9a1f					_check_for_para2:
.9a1f	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a21	c9 2c		cmp #$2c			cmp #','
.9a23	f0 0c		beq $9a31			beq _got_comma
.9a25	38		sec				sec
.9a26	a5 06		lda $06				lda ciblen
.9a28	f5 24		sbc $24,x			sbc DStack+0,x
.9a2a	a8		tay				tay
.9a2b	20 b6 c4	jsr $c4b6			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9a2e	4c 95 9a	jmp $9a95			jmp _check_command
.9a31					_got_comma:
.9a31	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9a34	20 c5 c9	jsr $c9c5			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9a37	a1 26		lda ($26,x)			lda (DStack+2,x)
.9a39	c9 24		cmp #$24			cmp #'$'
.9a3b	d0 16		bne $9a53			bne _para2_not_dollar
.9a3d	38		sec				sec
.9a3e	a5 06		lda $06				lda ciblen
.9a40	f5 26		sbc $26,x			sbc DStack+2,x
.9a42	a8		tay				tay
.9a43	c8		iny				iny
.9a44	98		tya				tya
.9a45	48		pha				pha
.9a46	8a		txa				txa
.9a47	18		clc				clc
.9a48	69 06		adc #$06			adc #6
.9a4a	aa		tax				tax			; ( addr-t u-t para1 )
.9a4b	20 c7 9d	jsr $9dc7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a4e	68		pla				pla
.9a4f	a8		tay				tay
.9a50	4c 95 9a	jmp $9a95			jmp _check_command
.9a53					_para2_not_dollar:
.9a53	20 7a ce	jsr $ce7a			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9a56	20 aa b7	jsr $b7aa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9a59	20 aa b7	jsr $b7aa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9a5c	20 f9 cd	jsr $cdf9			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9a5f	20 99 ce	jsr $ce99			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9a62	20 f5 ce	jsr $cef5			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9a65	20 7a ce	jsr $ce7a			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9a68	20 d9 af	jsr $afd9			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9a6b	20 f5 ce	jsr $cef5			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9a6e	20 99 ce	jsr $ce99			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9a71	20 b3 c7	jsr $c7b3			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9a74	b5 24		lda $24,x			lda DStack+0,x
.9a76	15 25		ora $25,x			ora DStack+1,x
.9a78	f0 08		beq $9a82			beq _second_number
.9a7a	8a		txa				txa
.9a7b	18		clc				clc
.9a7c	69 0c		adc #$0c			adc #12
.9a7e	aa		tax				tax			; back to ( addr-t u-t )
.9a7f	4c 7d 9d	jmp $9d7d			jmp ed_error
.9a82					_second_number:
.9a82	e8		inx				inx
.9a83	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9a84	38		sec				sec
.9a85	a5 06		lda $06				lda ciblen
.9a87	f5 24		sbc $24,x			sbc DStack+0,x
.9a89	48		pha				pha
.9a8a	20 b6 c4	jsr $c4b6			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9a8d	20 e3 bf	jsr $bfe3			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9a90	20 10 c9	jsr $c910			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9a93	68		pla				pla
.9a94	a8		tay				tay
.9a95					_check_command:
.9a95	24 22		bit $22				bit ed_flags
.9a97	30 08		bmi $9aa1			bmi _check_command_have_arg
.9a99	a5 20		lda $20				lda ed_cur+0
.9a9b	95 26		sta $26,x			sta DStack+2,x
.9a9d	a5 21		lda $21				lda ed_cur+1
.9a9f	95 27		sta $27,x			sta DStack+3,x
.9aa1					_check_command_have_arg:
.9aa1	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9aa3	85 14		sta $14				sta tmp1+0
.9aa5	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9aa7	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9aa9	e8		inx		_cmd_loop:	inx			;   next char
.9aaa	bd 2a 9e	lda $9e2a,x			lda ed_cmd_list,x
.9aad	f0 13		beq $9ac2			beq _illegal_command	;   end of list?
.9aaf	c5 14		cmp $14				cmp tmp1+0
.9ab1	d0 f6		bne $9aa9			bne _cmd_loop		;   not found?
.9ab3	8a		txa				txa
.9ab4	0a		asl a				asl
.9ab5	aa		tax				tax			; X * 2 for table
.9ab6	bd 36 9e	lda $9e36,x			lda ed_cmd_table+1,x
.9ab9	48		pha				pha
.9aba	bd 35 9e	lda $9e35,x			lda ed_Cmd_table+0,x
.9abd	48		pha				pha
.9abe	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ac0	08		php				php
.9ac1	40		rti				rti			; jump to command routine
.9ac2					_illegal_command:
.9ac2	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9ac5					ed_next_command:
.9ac5	20 b6 c4	jsr $c4b6			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ac8					_next_command_empty:
.9ac8	4c e3 98	jmp $98e3			jmp ed_input_loop
.9acb					ed_all_done:
.9acb	a9 00		lda #$00			lda #0
.9acd	85 06		sta $06				sta ciblen
.9acf	85 07		sta $07				sta ciblen+1
.9ad1	20 b6 c4	jsr $c4b6			jsr Two_drop			; ( addr-t u-t )
.9ad4	a5 23		lda $23				lda editor3+1
.9ad6	8d 00 03	sta $0300			sta base
.9ad9	60		rts				rts
.9ada					ed_cmd_a:
.9ada	e8		inx				inx
.9adb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9adc					ed_entry_cmd_i:
.9adc					ed_cmd_a_have_para:
.9adc	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9adf	20 d7 aa	jsr $aad7			jsr CR
.9ae2					_next_string_loop:
.9ae2	20 8b 9d	jsr $9d8b			jsr ed_get_input
.9ae5	a0 00		ldy #$00			ldy #0
.9ae7	b1 04		lda ($04),y			lda (cib),y
.9ae9	c9 2e		cmp #$2e			cmp #'.'
.9aeb	d0 18		bne $9b05			bne _add_line
.9aed	a4 06		ldy $06				ldy ciblen
.9aef	c0 01		cpy #$01			cpy #1
.9af1	d0 12		bne $9b05			bne _add_line
.9af3	a4 07		ldy $07				ldy ciblen+1
.9af5	d0 0e		bne $9b05			bne _add_line
.9af7	e8		inx				inx
.9af8	e8		inx				inx
.9af9	a9 40		lda #$40			lda #%01000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff	20 d7 aa	jsr $aad7			jsr CR
.9b02	4c e3 98	jmp $98e3			jmp ed_input_loop
.9b05					_add_line:
.9b05	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9b08	20 b7 c9	jsr $c9b7			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9b0b	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9b0e	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9b11	20 ab cc	jsr $ccab			jsr Comma		; ( addr-t u-t addr1 here )
.9b14	20 70 cc	jsr $cc70			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9b17	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t here here addr1 )
.9b1a	20 42 ce	jsr $ce42			jsr Store		; ( addr-t u-t here )
.9b1d	20 b7 c9	jsr $c9b7			jsr Here		; HERE ( addr-t u-t here here2)
.9b20	a9 04		lda #$04			lda #4
.9b22	20 9b b7	jsr $b79b			jsr PushZA
.9b25	20 7d c0	jsr $c07d			jsr Allot
.9b28	e6 20		inc $20				inc ed_cur
.9b2a	d0 02		bne $9b2e			bne +
.9b2c	e6 21		inc $21				inc ed_cur+1
.9b2e					+
.9b2e	20 b7 c9	jsr $c9b7			jsr Here	; ( addr-t u-t here here2 here3 )
.9b31	a5 04		lda $04				lda cib+0
.9b33	a4 05		ldy $05				ldy cib+1
.9b35	20 59 b7	jsr $b759			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9b38	20 cc ce	jsr $cecc			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9b3b	a5 06		lda $06				lda ciblen+0
.9b3d	a4 07		ldy $07				ldy ciblen+1
.9b3f	20 59 b7	jsr $b759			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9b42	20 f9 ac	jsr $acf9			jsr Move	; ( addr-t u-t here here2 here3 )
.9b45	18		clc				clc
.9b46	a5 00		lda $00				lda cp
.9b48	65 06		adc $06				adc ciblen
.9b4a	85 00		sta $00				sta cp
.9b4c	90 06		bcc $9b54			bcc +
.9b4e	a5 01		lda $01				lda cp+1
.9b50	65 07		adc $07				adc ciblen+1
.9b52	85 01		sta $01				sta cp+1
.9b54					+
.9b54	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9b57	20 42 ce	jsr $ce42			jsr Store		; ( addr-t u-t here here2 )
.9b5a	20 98 c9	jsr $c998			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9b5d	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9b60	a5 06		lda $06				lda ciblen
.9b62	95 26		sta $26,x			sta DStack+2,x
.9b64	a5 07		lda $07				lda ciblen+1
.9b66	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9b68	20 42 ce	jsr $ce42			jsr Store		; ( addr-t u-t here )
.9b6b	20 d7 aa	jsr $aad7			jsr CR			; Add a line feed for visuals
.9b6e	4c e2 9a	jmp $9ae2			jmp _next_string_loop
.9b71					ed_cmd_d:
.9b71	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9b74	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9b77	b5 24		lda $24,x			lda DStack+0,x
.9b79	15 25		ora $25,x			ora DStack+1,x
.9b7b	d0 09		bne $9b86			bne +
.9b7d	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t para1 0 para1 )
.9b80	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9b83	4c af 9b	jmp $9baf			jmp _cmd_d_done
.9b86					+
.9b86	20 a6 9d	jsr $9da6			jsr ed_is_valid_line	  ; result is in C flag
.9b89	b0 03		bcs $9b8e			bcs _cmd_d_loop
.9b8b	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9b8e					_cmd_d_loop:
.9b8e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9b90	d5 26		cmp $26,x			cmp DStack+2,x
.9b92	b5 25		lda $25,x			lda DStack+1,x
.9b94	f5 27		sbc $27,x			sbc DStack+3,x
.9b96	90 0c		bcc $9ba4			bcc _cmd_d_done_with_flag
.9b98	20 f5 ce	jsr $cef5			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9b9b	20 bb 9b	jsr $9bbb			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9b9e	20 c5 c9	jsr $c9c5			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9ba1	4c 8e 9b	jmp $9b8e			jmp _cmd_d_loop
.9ba4					_cmd_d_done_with_flag:
.9ba4	20 d1 c9	jsr $c9d1			jsr NOS_One_Minus
.9ba7	b5 26		lda $26,x			lda DStack+2,x
.9ba9	85 20		sta $20				sta ed_cur
.9bab	b5 27		lda $27,x			lda DStack+3,x
.9bad	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9baf					_cmd_d_done:
.9baf	a9 40		lda #$40			lda #%01000000
.9bb1	05 22		ora $22				ora ed_flags
.9bb3	85 22		sta $22				sta ed_flags
.9bb5	20 d7 aa	jsr $aad7			jsr CR
.9bb8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9bbb					_cmd_d_common:
.9bbb	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u-t u u )
.9bbe	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9bc1	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr-t u-t u addr1 )
.9bc4	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t addr1 u )
.9bc7	20 c5 c9	jsr $c9c5			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9bca	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9bcd	4c 42 ce	jmp $ce42			jmp Store		; ( addr-t u-t )
.9bd0					ed_cmd_equ:
.9bd0	a5 1e		lda $1e				lda ed_head
.9bd2	05 1f		ora $1f				ora ed_head+1
.9bd4	d0 06		bne $9bdc			bne _cmd_equ_have_text
.9bd6	20 aa b7	jsr $b7aa			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9bd9	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bdc					_cmd_equ_have_text:
.9bdc	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9bdf	24 22		bit $22				bit ed_flags
.9be1	30 0a		bmi $9bed			bmi _cmd_equ_have_para
.9be3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9be5	a4 21		ldy $21				ldy ed_cur+1
.9be7	20 59 b7	jsr $b759			jsr PushYA
.9bea	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9bed					_cmd_equ_have_para:
.9bed	b5 24		lda $24,x			lda DStack+0,x
.9bef	15 25		ora $25,x			ora DStack+1,x
.9bf1	d0 06		bne $9bf9			bne _cmd_equ_two_paras
.9bf3	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t para1 para2 para1)
.9bf6	4c fc 9b	jmp $9bfc			jmp _cmd_equ_done
.9bf9					_cmd_equ_two_paras:
.9bf9	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9bfc					_cmd_equ_done:
.9bfc	20 d7 aa	jsr $aad7			jsr CR			; number goes on new line
.9bff	20 a4 cb	jsr $cba4			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9c02	20 d7 aa	jsr $aad7			jsr CR
.9c05	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c08					ed_cmd_f:
.9c08	24 22		bit $22				bit ed_flags
.9c0a	30 18		bmi $9c24			bmi _cmd_f_have_para
.9c0c	20 d7 aa	jsr $aad7			jsr CR
.9c0f	20 7a ce	jsr $ce7a			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9c12	20 f9 cd	jsr $cdf9			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9c15	20 f5 ce	jsr $cef5			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9c18	20 a4 cb	jsr $cba4			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9c1b	20 1f ce	jsr $ce1f			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9c1e	20 99 ce	jsr $ce99			jsr R_From		; ( addr-t u-t 0 0 )
.9c21	4c 35 9c	jmp $9c35			jmp _cmd_f_done
.9c24					_cmd_f_have_para:
.9c24	20 cc ce	jsr $cecc			jsr Over
.9c27	20 d7 aa	jsr $aad7			jsr CR
.9c2a	20 a4 cb	jsr $cba4			jsr U_Dot
.9c2d	b5 26		lda $26,x			lda DStack+2,x
.9c2f	95 2a		sta $2a,x			sta DStack+6,x
.9c31	b5 27		lda $27,x			lda DStack+3,x
.9c33	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9c35					_cmd_f_done:
.9c35	20 d7 aa	jsr $aad7			jsr CR
.9c38	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9c3b					ed_cmd_i:
.9c3b	e8		inx				inx
.9c3c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9c3d	24 22		bit $22				bit ed_flags
.9c3f	30 08		bmi $9c49			bmi _cmd_i_have_para
.9c41	a5 20		lda $20				lda ed_cur
.9c43	95 24		sta $24,x			sta DStack+0,x
.9c45	a5 21		lda $21				lda ed_cur+1
.9c47	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9c49					_cmd_i_have_para:
.9c49	b5 24		lda $24,x			lda DStack+0,x
.9c4b	15 25		ora $25,x			ora DStack+1,x
.9c4d	f0 09		beq $9c58			beq _cmd_i_done
.9c4f	20 c5 c9	jsr $c9c5			jsr One_minus		; ( addr-t u-t para1-1 )
.9c52	20 aa b7	jsr $b7aa			jsr Zero		; ( addr-t u-t para1-1 0 )
.9c55	20 f5 c8	jsr $c8f5			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9c58					_cmd_i_done:
.9c58	4c dc 9a	jmp $9adc			jmp ed_entry_cmd_i
.9c5b					ed_cmd_n:
.9c5b	a9 01		lda #$01			lda #%00000001
.9c5d	05 22		ora $22				ora ed_flags
.9c5f	85 22		sta $22				sta ed_flags
.9c61	4c 6a 9c	jmp $9c6a			jmp ed_cmd_p_entry_for_cmd_n
.9c64					ed_cmd_p:
.9c64					ed_cmd_p_from_external:
.9c64	a9 fe		lda #$fe			lda #$ff-%00000001
.9c66	25 22		and $22				and ed_flags
.9c68	85 22		sta $22				sta ed_flags
.9c6a					ed_cmd_p_entry_for_cmd_n:
.9c6a	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9c6d	20 dd 9d	jsr $9ddd			jsr ed_no_line_zero
.9c70	20 d7 aa	jsr $aad7			jsr CR
.9c73	b5 24		lda $24,x			lda DStack+0,x
.9c75	15 25		ora $25,x			ora DStack+1,x
.9c77	d0 11		bne $9c8a			bne _cmd_p_loop
.9c79	b5 26		lda $26,x			lda DStack+2,x
.9c7b	85 20		sta $20				sta ed_cur
.9c7d	b5 27		lda $27,x			lda DStack+3,x
.9c7f	85 21		sta $21				sta ed_cur+1
.9c81	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c84	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c87	4c a8 9c	jmp $9ca8			jmp _cmd_p_all_done
.9c8a					_cmd_p_loop:
.9c8a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c8c	d5 26		cmp $26,x			cmp DStack+2,x
.9c8e	b5 25		lda $25,x			lda DStack+1,x
.9c90	f5 27		sbc $27,x			sbc DStack+3,x
.9c92	90 0c		bcc $9ca0			bcc _cmd_p_done
.9c94	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9c97	20 ab 9c	jsr $9cab			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9c9a	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus
.9c9d	4c 8a 9c	jmp $9c8a			jmp _cmd_p_loop
.9ca0					_cmd_p_done:
.9ca0	b5 24		lda $24,x			lda DStack+0,x
.9ca2	85 20		sta $20				sta ed_cur
.9ca4	b5 25		lda $25,x			lda DStack+1,x
.9ca6	85 21		sta $21				sta ed_cur+1
.9ca8					_cmd_p_all_done:
.9ca8	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9cab					_cmd_p_common:
.9cab	a5 22		lda $22				lda ed_flags
.9cad	4a		lsr a				lsr			; bit 0 now in carry
.9cae	90 0b		bcc $9cbb			bcc _cmd_p_common_no_num
.9cb0	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u-t para1 para1 )
.9cb3	20 a4 cb	jsr $cba4			jsr U_Dot		; ( addr-t u-t para1 )
.9cb6	a9 09		lda #$09			lda #AscHT
.9cb8	20 63 cd	jsr $cd63			jsr Emit_A
.9cbb					_cmd_p_common_no_num:
.9cbb	20 eb 9d	jsr $9deb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9cbe	4c 0f 9e	jmp $9e0f			jmp ed_print_addr
.9cc1					ed_cmd_q:
.9cc1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9cc3	50 03		bvc $9cc8			bvc +
.9cc5	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cc8					+
.9cc8	4c cb 9a	jmp $9acb			jmp ed_all_done		   ; can't fall thru because of PLX
.9ccb					ed_cmd_qq:
.9ccb	4c cb 9a	jmp $9acb			jmp ed_all_done
.9cce					ed_cmd_w:
.9cce	20 9a 9d	jsr $9d9a			jsr ed_have_text
.9cd1	24 22		bit $22				bit ed_flags		; parameter given?
.9cd3	30 12		bmi $9ce7			bmi _cmd_w_have_para
.9cd5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9cd7	d0 03		bne $9cdc			bne +
.9cd9	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9cdc					+
.9cdc	b5 2a		lda $2a,x			lda DStack+6,x
.9cde	95 26		sta $26,x			sta DStack+2,x
.9ce0	b5 2b		lda $2b,x			lda DStack+7,x
.9ce2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9ce4	4c ef 9c	jmp $9cef			jmp _cmd_w_para_ready
.9ce7					_cmd_w_have_para:
.9ce7	b5 26		lda $26,x			lda DStack+2,x
.9ce9	95 2a		sta $2a,x			sta DStack+6,x
.9ceb	b5 27		lda $27,x			lda DStack+3,x
.9ced	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9cef					_cmd_w_para_ready:
.9cef	a9 1e		lda #$1e			lda #<ed_head
.9cf1	95 24		sta $24,x			sta DStack+0,x
.9cf3	a9 00		lda #$00			lda #>ed_head
.9cf5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9cf7	20 cc ce	jsr $cecc			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9cfa	20 7a ce	jsr $ce7a			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9cfd					_cmd_w_loop:
.9cfd	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9d00	b5 24		lda $24,x			lda DStack+0,x
.9d02	15 25		ora $25,x			ora DStack+1,x
.9d04	f0 4d		beq $9d53			beq _cmd_w_eol
.9d06	20 4f cc	jsr $cc4f			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9d09	20 c9 c5	jsr $c5c9			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9d0c	20 98 c9	jsr $c998			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9d0f	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9d12	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9d15	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9d18	20 98 c9	jsr $c998			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9d1b	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9d1e	20 1f ce	jsr $ce1f			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9d21	20 13 cf	jsr $cf13			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9d24	20 f9 cd	jsr $cdf9			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9d27	20 f5 ce	jsr $cef5			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9d2a	20 7a ce	jsr $ce7a			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9d2d	20 f9 ac	jsr $acf9			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9d30	20 99 ce	jsr $ce99			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9d33	20 a4 c5	jsr $c5a4			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9d36	20 1f ce	jsr $ce1f			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9d39	20 3f cb	jsr $cb3f			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9d3c	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9d3f	a9 0a		lda #$0a			lda #AscLF
.9d41	20 9b b7	jsr $b79b			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9d44	20 13 cf	jsr $cf13			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9d47	20 42 ce	jsr $ce42			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9d4a	20 eb c9	jsr $c9eb			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9d4d	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9d50	4c fd 9c	jmp $9cfd			jmp _cmd_w_loop
.9d53					_cmd_w_eol:
.9d53	20 13 cf	jsr $cf13			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9d56	20 99 ce	jsr $ce99			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9d59	20 58 cb	jsr $cb58			jsr Minus		; ( addr-t u-t addr-n u )
.9d5c	b5 24		lda $24,x			lda DStack+0,x
.9d5e	95 28		sta $28,x			sta DStack+4,x
.9d60	b5 25		lda $25,x			lda DStack+1,x
.9d62	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9d64	20 d7 aa	jsr $aad7			jsr CR
.9d67	20 f5 ce	jsr $cef5			jsr Dup			; ( addr-t u addr-n u u )
.9d6a	20 a4 cb	jsr $cba4			jsr U_Dot		; ( addr-t u addr-n u )
.9d6d	20 d7 aa	jsr $aad7			jsr CR
.9d70	a9 bf		lda #$bf			lda #$ff-%01000000
.9d72	25 22		and $22				and ed_flags
.9d74	85 22		sta $22				sta ed_flags
.9d76	4c c5 9a	jmp $9ac5			jmp ed_next_command
.9d79					ed_error_2drop:
.9d79	e8		inx				inx			; Drop para2
.9d7a	e8		inx				inx
.9d7b					ed_error_1drop:
.9d7b	e8		inx				inx			; Drop para1
.9d7c	e8		inx				inx
.9d7d					ed_error:
.9d7d	20 d7 aa	jsr $aad7			jsr CR
.9d80	a9 3f		lda #$3f			lda #'?'
.9d82	20 63 cd	jsr $cd63			jsr Emit_A
.9d85	20 d7 aa	jsr $aad7			jsr CR
.9d88	4c e3 98	jmp $98e3			jmp ed_input_loop
.9d8b					ed_get_input:
.9d8b	20 2c c2	jsr $c22c			jsr Refill		;  ( addr-t u-t f )
.9d8e	b5 24		lda $24,x			lda DStack+0,x
.9d90	d0 05		bne $9d97			bne +
.9d92	68		pla				pla
.9d93	68		pla				pla
.9d94	4c 7b 9d	jmp $9d7b			jmp ed_error_1drop
.9d97					+
.9d97	e8		inx				inx
.9d98	e8		inx				inx
.9d99	60		rts				rts
.9d9a					ed_have_text:
.9d9a	a5 1e		lda $1e				lda ed_head
.9d9c	05 1f		ora $1f				ora ed_head+1
.9d9e	d0 05		bne $9da5			bne +
.9da0	68		pla				pla
.9da1	68		pla				pla
.9da2	4c 7d 9d	jmp $9d7d			jmp ed_error
.9da5					+
.9da5	60		rts				rts
.9da6					ed_is_valid_line:
.9da6	38		sec				sec				; default is legal line number
.9da7	b5 24		lda $24,x			lda DStack+0,x
.9da9	15 25		ora $25,x			ora DStack+1,x
.9dab	f0 18		beq $9dc5			beq _nope_zero	; ( n )
.9dad	20 f5 ce	jsr $cef5			jsr Dup				; ( n n )
.9db0	20 c7 9d	jsr $9dc7			jsr ed_last_line		; ( n n last )
.9db3	20 13 cf	jsr $cf13			jsr Swap			; ( n last n )
.9db6	20 e9 c7	jsr $c7e9			jsr Less_Than			; ( n f )
.9db9	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9dbb	15 25		ora $25,x			ora DStack+1,x
.9dbd	d0 04		bne $9dc3			bne _too_small
.9dbf	e8		inx				inx
.9dc0	e8		inx				inx			; DROP flag ( n )
.9dc1	38		sec				sec			; signal valid
.9dc2	60		rts				rts
.9dc3					_too_small:
.9dc3	e8		inx				inx
.9dc4	e8		inx				inx
.9dc5					_nope_zero:
.9dc5	18		clc				clc			; signal not valid
.9dc6	60		rts				rts
.9dc7					ed_last_line:
.9dc7	20 aa b7	jsr $b7aa			jsr Zero		; Set counter to zero
.9dca	a9 1e		lda #$1e			lda #ed_head
.9dcc	20 9b b7	jsr $b79b			jsr PushZA		; ( count addr )
.9dcf					_loop:
.9dcf	20 5f ce	jsr $ce5f			jsr Fetch		; ( count addr|0 )
.9dd2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9dd4	f0 06		beq $9ddc			beq _done
.9dd6	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; Increase counter
.9dd9	4c cf 9d	jmp $9dcf			jmp _loop		; continue
.9ddc					_done:
.9ddc	60		rts				rts
.9ddd					ed_no_line_zero:
.9ddd	b5 26		lda $26,x			lda DStack+2,x
.9ddf	15 27		ora $27,x			ora DStack+3,x
.9de1	d0 07		bne $9dea			bne _done
.9de3	24 22		bit $22				bit ed_flags
.9de5	10 03		bpl $9dea			bpl _done
.9de7	4c 79 9d	jmp $9d79			jmp ed_error_2drop
.9dea					_done:
.9dea	60		rts				rts
.9deb					ed_num_to_addr:
.9deb	a9 1e		lda #$1e			lda #ed_head
.9ded	20 9b b7	jsr $b79b			jsr PushZA		; ( u addr-h )
.9df0	4c fd 9d	jmp $9dfd			jmp _test
.9df3					_loop:
.9df3	20 5f ce	jsr $ce5f			jsr Fetch		; @ ( u addr1 )
.9df6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9df8	f0 09		beq $9e03			beq _finished
.9dfa	20 d1 c9	jsr $c9d1			jsr NOS_One_Minus	; decrement the line count
.9dfd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9dff	15 27		ora $27,x			ora DStack+3,x
.9e01	d0 f0		bne $9df3			bne _loop
.9e03					_finished:
.9e03	4c 10 c9	jmp $c910			jmp Nip			; ( addr )
.9e06					ed_para1_to_cur:
.9e06	b5 26		lda $26,x			lda DStack+2,x
.9e08	85 20		sta $20				sta ed_cur
.9e0a	b5 27		lda $27,x			lda DStack+3,x
.9e0c	85 21		sta $21				sta ed_cur+1
.9e0e	60		rts				rts
.9e0f					ed_print_addr:
.9e0f	20 95 c9	jsr $c995			jsr Cell_Plus		; ( addr+2 )
.9e12	20 f5 ce	jsr $cef5			jsr Dup			; ( addr+2 addr+2 )
.9e15	20 95 c9	jsr $c995			jsr Cell_Plus		; ( addr+2 addr+4 )
.9e18	20 5f ce	jsr $ce5f			jsr Fetch		; ( addr+2 u-s )
.9e1b	20 13 cf	jsr $cf13			jsr Swap		; ( u-s addr+2 )
.9e1e	20 5f ce	jsr $ce5f			jsr Fetch		; ( u-s addr-s )
.9e21	20 13 cf	jsr $cf13			jsr Swap		; ( addr-s u-s )
.9e24	20 7d cd	jsr $cd7d			jsr Type
.9e27	4c d7 aa	jmp $aad7			jmp CR
>9e2a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9e32	71 51 00
.9e35					ed_cmd_table:
>9e35	da 9a 08 9c 3b 9c 71 9b				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9e3d	64 9c 5b 9c
>9e41	d0 9b ce 9c c1 9c cb 9c				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9e49					ed6502_end:
>9e49	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
>9e4c	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9e4d	3e 98					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9e4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9e50	08					.byte NN	;wh_Flags	dictionary flags
=40396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9e51					See:
.9e51	20 17 bc	jsr $bc17			jsr Tick_Nt		; ( nt )
.9e54	20 d7 aa	jsr $aad7			jsr CR
.9e57	ad 00 03	lda $0300			lda base		; Save the current number base
.9e5a	48		pha				pha
.9e5b	a9 98		lda #$98			lda #<str_see_nt	; print nt
.9e5d	a0 da		ldy #$da			ldy #>str_see_nt
.9e5f	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.9e62	20 f5 ce	jsr $cef5			jsr Dup			; ( nt nt )
.9e65	20 6c a8	jsr $a86c			jsr Dot_Hex
.9e68	20 70 cd	jsr $cd70			jsr Space		; ( nt )
.9e6b	20 f5 ce	jsr $cef5			jsr Dup			; ( nt nt )
.9e6e	20 91 bd	jsr $bd91			jsr Name_To_Int		; ( nt xt )
.9e71	a9 9e		lda #$9e			lda #<str_see_xt	; print xt
.9e73	a0 da		ldy #$da			ldy #>str_see_xt
.9e75	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.9e78	20 f5 ce	jsr $cef5			jsr Dup			; ( nt xt xt )
.9e7b	20 6c a8	jsr $a86c			jsr Dot_Hex
.9e7e	20 d7 aa	jsr $aad7			jsr CR			; ( nt xt )
.9e81	a9 91		lda #$91			lda #<str_see_flags
.9e83	a0 da		ldy #$da			ldy #>str_see_flags
.9e85	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.9e88	20 cc ce	jsr $cecc			jsr Over		; ( nt xt nt )
.9e8b	a9 84		lda #$84			lda #Wh_Flags
.9e8d	20 9a c9	jsr $c99a			jsr Plus_A		; ( nt xt ^flags )
.9e90	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9e92	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9e94	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9e96	20 70 cd	jsr $cd70	_flag_loop:	jsr Space
.9e99	b9 fd 9e	lda $9efd,y			lda _FlagLabels+0,y	;   print label
.9e9c	20 63 cd	jsr $cd63			jsr Emit_A
.9e9f	b9 fe 9e	lda $9efe,y			lda _FlagLabels+1,y
.9ea2	20 63 cd	jsr $cd63			jsr Emit_A
.9ea5	a9 3d		lda #$3d			lda #'='
.9ea7	20 63 cd	jsr $cd63			jsr Emit_A
.9eaa	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9eac	a9 00		lda #$00			lda #0
.9eae	69 30		adc #$30			adc #'0'
.9eb0	20 63 cd	jsr $cd63			jsr Emit_A
.9eb3	88		dey				dey
.9eb4	88		dey				dey
.9eb5	10 df		bpl $9e96			bpl _flag_loop
.9eb7	e8		inx				inx
.9eb8	e8		inx				inx			; ( nt xt )
.9eb9	20 d7 aa	jsr $aad7			jsr CR
.9ebc	a9 a4		lda #$a4			lda #<str_see_size	; print size
.9ebe	a0 da		ldy #$da			ldy #>str_see_size
.9ec0	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.9ec3	20 13 cf	jsr $cf13			jsr Swap		; ( xt nt )
.9ec6	20 8b aa	jsr $aa8b			jsr WordSize		; ( xt u )
.9ec9	20 58 b1	jsr $b158			jsr Decimal
.9ecc	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9ece	c9 ff		cmp #$ff			cmp #$ff
.9ed0	d0 11		bne $9ee3			bne _size5
.9ed2	20 7a b8	jsr $b87a			jsr sliteral_runtime	;   type "large"
.9ed5	4c dd 9e	jmp $9edd			  jmp _size2
>9ed8	6c 61 72 67 65					  .text "large"
.9edd	20 7d cd	jsr $cd7d	_size2:		jsr Type
.9ee0	4c e9 9e	jmp $9ee9			jmp _size9		;  else
.9ee3	20 f5 ce	jsr $cef5	_size5:		jsr Dup			;    type size
.9ee6	20 a4 cb	jsr $cba4			jsr U_Dot
.9ee9					_size9:
.9ee9	20 d7 aa	jsr $aad7			jsr CR
.9eec	68		pla				pla			; restore base
.9eed	8d 00 03	sta $0300			sta base
.9ef0	20 4f cc	jsr $cc4f			jsr Two_dup
.9ef3	20 c4 a7	jsr $a7c4			jsr Dump		; dump
.9ef6	20 d7 aa	jsr $aad7			jsr CR
.9ef9	20 1b d8	jsr $d81b			jsr DisAsm		; disassemble
=171					CL	.var *-(WordListLink+wh_Xt)
=$9efc					en = *	; remember here
>9e4f	ab					.byte CL	;wh_CodeLength
.9efc	60		rts				rts
>9efd	43 4f 41 4e 49 4d 4e 4e		_FlagLabels:	.text "COANIMNNUF__R6__"
>9f05	55 46 5f 5f 52 36 5f 5f
>9f0d	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f15	72 64 4c 69 73 74
>9f1b	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f1c	cc 9d					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f1e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f1f	08					.byte NN	;wh_Flags	dictionary flags
=40603					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f20	4c aa b7	jmp $b7aa	Forth_WordList:	jmp Zero
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f23					en = *	; remember here
>9f1e	03					.byte CL	;wh_CodeLength
>9f23	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f2b	6f 72 64 4c 69 73 74
>9f32	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f33	9b 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f35	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f36	08					.byte NN	;wh_Flags	dictionary flags
=40626					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f37					Editor_WordList:
.9f37	4c b4 b7	jmp $b7b4			jmp One
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f3a					en = *	; remember here
>9f35	03					.byte CL	;wh_CodeLength
>9f3a	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9f42	72 2d 57 6f 72 64 4c 69 73 74
>9f4c	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f4d	b2 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f4f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f50	08					.byte NN	;wh_Flags	dictionary flags
=40652					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f51					Assembler_WordList:
.9f51	4c be b7	jmp $b7be			jmp Two
=3					CL	.var *-(WordListLink+wh_Xt)
=$9f54					en = *	; remember here
>9f4f	03					.byte CL	;wh_CodeLength
>9f54	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>9f5c	64 6c 69 73 74
>9f61	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f62	cc 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f64	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f65	08					.byte NN	;wh_Flags	dictionary flags
=40673					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f66	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.9f68	4c 9b b7	jmp $b79b			jmp PushZA
=5					CL	.var *-(WordListLink+wh_Xt)
=$9f6b					en = *	; remember here
>9f64	05					.byte CL	;wh_CodeLength
>9f6b	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
>9f6f	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f70	e1 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f73	08					.byte NN	;wh_Flags	dictionary flags
=40687					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f74	20 79 b7	jsr $b779	Only:		jsr True	; Push -1
.9f77	4c dd a0	jmp $a0dd			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-(WordListLink+wh_Xt)
=$9f7a					en = *	; remember here
>9f72	06					.byte CL	;wh_CodeLength
>9f7a	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
>9f7e	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f7f	ef 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f81	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f82	08					.byte NN	;wh_Flags	dictionary flags
=40702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f83	20 15 a1	jsr $a115	Also:		jsr Get_Order
.9f86	20 cc ce	jsr $cecc			jsr Over
.9f89	20 13 cf	jsr $cf13			jsr Swap
.9f8c	20 eb c9	jsr $c9eb			jsr One_plus
.9f8f	4c dd a0	jmp $a0dd			jmp Set_Order
=15					CL	.var *-(WordListLink+wh_Xt)
=$9f92					en = *	; remember here
>9f81	0f					.byte CL	;wh_CodeLength
>9f92	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
>9f9a	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9f9b	fe 9e					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9f9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9f9e	08					.byte NN	;wh_Flags	dictionary flags
=40730					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9f9f	20 15 a1	jsr $a115	Previous:	jsr Get_Order
.9fa2	20 10 c9	jsr $c910			jsr Nip
.9fa5	20 c5 c9	jsr $c9c5			jsr One_minus
.9fa8	4c dd a0	jmp $a0dd			jmp Set_Order
=12					CL	.var *-(WordListLink+wh_Xt)
=$9fab					en = *	; remember here
>9f9d	0c					.byte CL	;wh_CodeLength
>9fab	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
>9fb1	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fb2	1a 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fb4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fb5	08					.byte NN	;wh_Flags	dictionary flags
=40753					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fb6					To_Order:
.9fb6	20 7a ce	jsr $ce7a			jsr To_R		; Put the wid on the return stack for now.
.9fb9	20 15 a1	jsr $a115			jsr Get_Order		; Get the current search order.
.9fbc	20 99 ce	jsr $ce99			jsr R_From		; Get back the wid and add it to the list.
.9fbf	20 13 cf	jsr $cf13			jsr Swap
.9fc2	20 eb c9	jsr $c9eb			jsr One_plus
.9fc5	4c dd a0	jmp $a0dd			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-(WordListLink+wh_Xt)
=$9fc8					en = *	; remember here
>9fb4	12					.byte CL	;wh_CodeLength
>9fc8	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
>9fcd	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>9fce	31 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>9fd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>9fd1	08					.byte NN	;wh_Flags	dictionary flags
=40781					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.9fd2					Order:
.9fd2	20 d7 aa	jsr $aad7			jsr CR
.9fd5	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.9fd7	f0 0b		beq $9fe4			beq _test
.9fd9	98		tya		_loop:		tya
.9fda	48		pha				pha
.9fdb	b9 2b 03	lda $032b,y			lda Search_orderV,y
.9fde	20 ef 9f	jsr $9fef			jsr order_print_wid_string   ; internal helper function
.9fe1	68		pla				pla
.9fe2	a8		tay				tay
.9fe3	c8		iny				iny			;  next
.9fe4	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.9fe7	90 f0		bcc $9fd9			bcc _loop
.9fe9	20 d7 aa	jsr $aad7			jsr CR
.9fec	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.9fef					order_print_wid_string:
.9fef	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.9ff1	90 06		bcc $9ff9			bcc _string
.9ff3	20 9b b7	jsr $b79b			jsr PushZA		; print the WID number
.9ff6	4c a4 cb	jmp $cba4			jmp U_Dot		; JSR/RTS
.9ff9	0a		asl a		_string:	asl		; Get the string based on WID 0 to 3
.9ffa	a8		tay				tay
.9ffb	b9 07 a0	lda $a007,y			lda _wid_Table+0,y
.9ffe	48		pha				pha
.9fff	b9 08 a0	lda $a008,y			lda _wid_Table+1,y
.a002	a8		tay				tay
.a003	68		pla				pla
.a004	4c 9e cd	jmp $cd9e			jmp Print_ASCIIZ_YA_no_lf ; Print without a line feed
=53					CL	.var *-(WordListLink+wh_Xt)
=$a007					en = *	; remember here
>9fd0	35					.byte CL	;wh_CodeLength
.a007					_wid_Table:
>a007	84 da					.word str_wid_forth	       ; WID 0: "Forth"
>a009	7c da					.word str_wid_editor	       ; WID 1: "Editor"
>a00b	71 da					.word str_wid_asm	       ; WID 2: "Assembler"
>a00d	8b da					.word str_wid_root	       ; WID 3: "Root"
>a00f	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>a014	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a015	4d 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a017	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a018	08					.byte NN	;wh_Flags	dictionary flags
=40852					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a019	a9 00		lda #$00	Forth:		lda #wid_Forth
.a01b	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-(WordListLink+wh_Xt)
=$a01e					en = *	; remember here
>a017	05					.byte CL	;wh_CodeLength
.a01e	60		rts				rts
>a01f	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a027	6f 6e 73
>a02a	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a02b	94 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a02d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a02e	08					.byte NN	;wh_Flags	dictionary flags
=40874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a02f	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a032	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a035					en = *	; remember here
>a02d	06					.byte CL	;wh_CodeLength
.a035	60		rts				rts
>a036	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
>a03e	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a03f	aa 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a041	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a042	08					.byte NN	;wh_Flags	dictionary flags
=40894					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a043					WordList:
.a043	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a046	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a048	90 05		bcc $a04f			bcc +
.a04a	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a04c	4c 28 b4	jmp $b428			jmp ThrowA
.a04f					+
.a04f	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a052	4c 9b b7	jmp $b79b			jmp PushZA		; and put it on the stack.
=18					CL	.var *-(WordListLink+wh_Xt)
=$a055					en = *	; remember here
>a041	12					.byte CL	;wh_CodeLength
>a055	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a05d	6f 72 64 6c 69 73 74
>a064	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a065	be 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a067	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a068	18					.byte UF+NN	;wh_Flags	dictionary flags
=40932					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a069					Search_WordList:
.a069	20 e3 b3	jsr $b3e3			jsr underflow_3
.a06c	b5 24		lda $24,x			lda DStack+0,x		; Pop wid
.a06e	e8		inx				inx
.a06f	e8		inx				inx
.a070	48		pha				pha
.a071	20 c0 bc	jsr $bcc0			jsr fina_pattern_prepare ; tmp2 = pseudo-header for pattern name, zeros NOS
.a074	68		pla				pla			; pop wid
.a075	20 ea bc	jsr $bcea			jsr fina_search_wordlist ; tmp1 = nt of matching word
.a078	f0 25		beq $a09f			beq _fail
.a07a	18		clc				clc
.a07b	a5 14		lda $14				lda tmp1+0		; NOS = xt
.a07d	69 85		adc #$85			adc #Wh_xt
.a07f	95 26		sta $26,x			sta DStack+2,x
.a081	a5 15		lda $15				lda tmp1+1
.a083	69 00		adc #$00			adc #0
.a085	95 27		sta $27,x			sta DStack+3,x
.a087	a0 84		ldy #$84			ldy #Wh_Flags		; get flags
.a089	b1 14		lda ($14),y			lda (tmp1),y
.a08b	29 04		and #$04			and #IM
.a08d	d0 07		bne $a096			bne _immediate		; bit set, we're immediate
.a08f	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.a091	95 24		sta $24,x			sta DStack+0,x
.a093	95 25		sta $25,x			sta DStack+1,x
.a095	60		rts				rts
.a096					_immediate:
.a096	a9 01		lda #$01			lda #1			; We're immediate, return 1
.a098	95 24		sta $24,x			sta DStack+0,x
.a09a	a9 00		lda #$00			lda #0
.a09c	95 25		sta $25,x			sta DStack+1,x
.a09e	60		rts				rts
.a09f					_fail:
.a09f	e8		inx				inx			; Drop u
.a0a0	e8		inx				inx
.a0a1	60		rts				rts
=57					CL	.var *-(WordListLink+wh_Xt)
=$a0a2					en = *	; remember here
>a067	39					.byte CL	;wh_CodeLength
>a0a2	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0aa	65 6e 74
>a0ad	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0ae	e4 9f					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0b1	00					.byte 0	;wh_Flags	dictionary flags
=41005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0b2	20 83 b3	jsr $b383	Set_Current:	jsr PopA	; pop wid
.a0b5	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0b8					en = *	; remember here
>a0b0	06					.byte CL	;wh_CodeLength
.a0b8	60		rts				rts
>a0b9	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a0c1	65 6e 74
>a0c4	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0c5	2d a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0c8	08					.byte NN	;wh_Flags	dictionary flags
=41028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0c9					Get_Current:
.a0c9	ad 10 03	lda $0310			lda CurrentV
.a0cc	4c 9b b7	jmp $b79b			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-(WordListLink+wh_Xt)
=$a0cf					en = *	; remember here
>a0c7	06					.byte CL	;wh_CodeLength
>a0cf	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a0d7	72
>a0d8	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a0d9	44 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a0db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a0dc	00					.byte 0	;wh_Flags	dictionary flags
=41048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a0dd					Set_Order:
.a0dd	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a0df	10 0b		bpl $a0ec			bpl _start
.a0e1	a9 00		lda #$00			lda #0
.a0e3	95 25		sta $25,x			sta DStack+1,x
.a0e5	a9 03		lda #$03			lda #wid_Root
.a0e7	95 24		sta $24,x			sta DStack+0,x
.a0e9	20 b4 b7	jsr $b7b4			jsr One			; Count is 1.
.a0ec					_start:
.a0ec	b5 24		lda $24,x			lda DStack+0,x
.a0ee	99 2a 03	sta $032a,y			sta Num_orderV,y	; #ORDER is a byte variable.
.a0f1	85 14		sta $14				sta tmp1	; Save a copy for zero check and looping.
.a0f3	e8		inx				inx		; Drop the count off the data stack.
.a0f4	e8		inx				inx
.a0f5	a5 14		lda $14				lda tmp1
.a0f7	f0 0d		beq $a106			beq _done	; If zero, there are no wordlists.
.a0f9	a0 00		ldy #$00			ldy #0
.a0fb					_loop:
.a0fb	20 83 b3	jsr $b383			jsr PopA		; The search order is a byte array
.a0fe	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a101	c8		iny				iny
.a102	c6 14		dec $14				dec tmp1
.a104	d0 f5		bne $a0fb			bne _loop
.a106					_done:
=41					CL	.var *-(WordListLink+wh_Xt)
=$a106					en = *	; remember here
>a0db	29					.byte CL	;wh_CodeLength
.a106	60		rts				rts
>a107	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a10f	72
>a110	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a111	58 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a113	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a114	08					.byte NN	;wh_Flags	dictionary flags
=41104					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a115					Get_Order:
.a115	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a118	f0 09		beq $a123			beq _done	; If zero, there are no wordlists.
.a11a					_loop:
.a11a	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a11d	20 9b b7	jsr $b79b			jsr PushZA
.a120	88		dey				dey
.a121	d0 f7		bne $a11a			bne _loop		; See if that was the last one to process (first in the list).
.a123					_done:
.a123	ad 2a 03	lda $032a			lda Num_OrderV		; Put the number of items on the stack.
.a126	4c 9b b7	jmp $b79b			jmp PushZA
=20					CL	.var *-(WordListLink+wh_Xt)
=$a129					en = *	; remember here
>a113	14					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a129					BlockInit:
.a129	a9 00		lda #$00			lda #0
.a12b	8d 3f 03	sta $033f			sta BuffStatusV
.a12e	a9 30		lda #$30			lda #<Platform_Block_Read
.a130	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a132	8d 39 03	sta $0339			sta BlockReadV+0
.a135	8c 3a 03	sty $033a			sty BlockReadV+1
.a138	a9 30		lda #$30			lda #<Platform_Block_Write
.a13a	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a13c	8d 3b 03	sta $033b			sta BlockWriteV+0
.a13f	8c 3c 03	sty $033c			sty BlockWriteV+1
.a142	60		rts				rts
>0741					RamDriveV: .word ?
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a143	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a14b	6d 44 72 69 76 65 2d 49 6e 69 74
>a156	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a157	90 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a159	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a15a	18					.byte UF+NN	;wh_Flags	dictionary flags
=41174					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a15b					Block_RamDrive_Init:
.a15b	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a15d	20 9b b7	jsr $b79b			jsr PushZA
.a160	20 db ca	jsr $cadb			jsr LShift
.a163	20 b7 c9	jsr $c9b7			jsr Here		; ( size addr )
.a166	8d 41 07	sta $0741			sta RamDriveV+0
.a169	8c 42 07	sty $0742			sty RamDriveV+1
.a16c	20 cc ce	jsr $cecc			jsr Over
.a16f	20 7d c0	jsr $c07d			jsr Allot		; Create ramdrive buffer
.a172	20 13 cf	jsr $cf13			jsr Swap		; blank the buffer
.a175	20 f3 bd	jsr $bdf3			jsr Blank
.a178	a9 8d		lda #$8d			lda #<_read		; set block read vector
.a17a	a0 a1		ldy #$a1			ldy #>_read
.a17c	8d 39 03	sta $0339			sta BlockReadV+0
.a17f	8c 3a 03	sty $033a			sty BlockReadV+1
.a182	a9 9d		lda #$9d			lda #<_write		; set block write vector
.a184	a0 a1		ldy #$a1			ldy #>_write
.a186	8d 3b 03	sta $033b			sta BlockWriteV+0
.a189	8c 3c 03	sty $033c			sty BlockWriteV+1
.a18c	60		rts				rts
=50					CL	.var *-(WordListLink+wh_Xt)
=$a18d					en = *	; remember here
>a159	32					.byte CL	;wh_CodeLength
.a18d					_read:
.a18d	20 aa a1	jsr $a1aa			jsr _addr
.a190	20 13 cf	jsr $cf13			jsr Swap
.a193	a9 00		lda #$00			lda #0
.a195	a0 04		ldy #$04			ldy #>1024
.a197	20 59 b7	jsr $b759			jsr PushYA
.a19a	4c f9 ac	jmp $acf9			jmp Move
.a19d					_write:
.a19d	20 aa a1	jsr $a1aa			jsr _addr
.a1a0	a9 00		lda #$00			lda #0
.a1a2	a0 04		ldy #$04			ldy #>1024
.a1a4	20 59 b7	jsr $b759			jsr PushYA
.a1a7	4c f9 ac	jmp $acf9			jmp Move
.a1aa					_addr:
.a1aa	a9 0a		lda #$0a			lda #10
.a1ac	20 9b b7	jsr $b79b			jsr PushZA
.a1af	20 db ca	jsr $cadb			jsr LShift
.a1b2	20 c5 a1	jsr $a1c5			jsr RamDrive
.a1b5	4c 3f cb	jmp $cb3f			jmp Plus
>a1b8	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
>a1c0	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1c1	d6 a0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1c4	08					.byte NN	;wh_Flags	dictionary flags
=41280					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1c5	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a1c8	ac 42 07	ldy $0742			ldy RamDriveV+1
.a1cb	4c 59 b7	jmp $b759			jmp PushYA
=9					CL	.var *-(WordListLink+wh_Xt)
=$a1ce					en = *	; remember here
>a1c3	09					.byte CL	;wh_CodeLength
>a1ce	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a1d6	75 73
>a1d8	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1d9	40 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1dc	08					.byte NN	;wh_Flags	dictionary flags
=41304					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1dd	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a1df	a9 3f		lda #$3f			lda #<BuffStatusV
.a1e1	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1e4					en = *	; remember here
>a1db	07					.byte CL	;wh_CodeLength
>a1e4	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a1ec	6b 4e 75 6d
>a1f0	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a1f1	58 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a1f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a1f4	08					.byte NN	;wh_Flags	dictionary flags
=41328					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a1f5	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a1f7	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a1f9	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a1fc					en = *	; remember here
>a1f3	07					.byte CL	;wh_CodeLength
>a1fc	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a204	72
>a205	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a206	70 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a208	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a209	08					.byte NN	;wh_Flags	dictionary flags
=41349					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a20a	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a20c	a9 41		lda #$41			lda #<BlockBuffer
.a20e	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a211					en = *	; remember here
>a208	07					.byte CL	;wh_CodeLength
>a211	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
>a214	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a215	85 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a217	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a218	08					.byte NN	;wh_Flags	dictionary flags
=41364					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a219	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a21b	a9 0e		lda #$0e			lda #<ScrV
.a21d	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a220					en = *	; remember here
>a217	07					.byte CL	;wh_CodeLength
>a220	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
>a223	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a224	94 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a226	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a227	08					.byte NN	;wh_Flags	dictionary flags
=41379					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a228	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a22a	a9 0c		lda #$0c			lda #<BlkV
.a22c	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a22f					en = *	; remember here
>a226	07					.byte CL	;wh_CodeLength
>a22f	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a237	69 74 65
>a23a	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a23b	a3 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a23d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a23e	08					.byte NN	;wh_Flags	dictionary flags
=41402					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a23f	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a242					en = *	; remember here
>a23d	03					.byte CL	;wh_CodeLength
>a242	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a24a	69 74 65 2d 56 65 63 74 6f 72
>a254	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a255	ba a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a257	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a258	08					.byte NN	;wh_Flags	dictionary flags
=41428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a259					Block_Write_Vector:
.a259	a0 03		ldy #$03			ldy #>BlockWriteV
.a25b	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a25d	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a260					en = *	; remember here
>a257	07					.byte CL	;wh_CodeLength
>a260	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a268	61 64
>a26a	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a26b	d4 a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a26d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a26e	08					.byte NN	;wh_Flags	dictionary flags
=41450					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a26f	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-(WordListLink+wh_Xt)
=$a272					en = *	; remember here
>a26d	03					.byte CL	;wh_CodeLength
>a272	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a27a	61 64 2d 56 65 63 74 6f 72
>a283	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a284	ea a1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a286	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a287	08					.byte NN	;wh_Flags	dictionary flags
=41475					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a288					Block_Read_Vector:
.a288	a0 03		ldy #$03			ldy #>BlockReadV
.a28a	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a28c	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a28f					en = *	; remember here
>a286	07					.byte CL	;wh_CodeLength
>a28f	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a297	66 65 72 73
>a29b	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a29c	03 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a29e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a29f	00					.byte 0	;wh_Flags	dictionary flags
=41499					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2a0					Save_Buffers:
.a2a0	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2a3	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2a5	d0 11		bne $a2b8			bne _done	; Either not used or not dirty = done!
.a2a7	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2aa	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a2ad	20 5f ce	jsr $ce5f			jsr Fetch
.a2b0	20 3f a2	jsr $a23f			jsr Block_Write
.a2b3	a9 01		lda #$01			lda #1
.a2b5	8d 3f 03	sta $033f			sta BuffStatusV+0
.a2b8					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$a2b8					en = *	; remember here
>a29e	18					.byte CL	;wh_CodeLength
.a2b8	60		rts				rts
>a2b9	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
>a2be	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a2bf	1b a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a2c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a2c2	00					.byte 0	;wh_Flags	dictionary flags
=41534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a2c3					Block:
.a2c3	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a2c6	d5 24		cmp $24,x			cmp DStack+0,x
.a2c8	d0 0e		bne $a2d8			bne _not_in_buffer
.a2ca	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a2cd	d5 25		cmp $25,x			cmp DStack+1,x
.a2cf	d0 07		bne $a2d8			bne _not_in_buffer
.a2d1	ad 3f 03	lda $033f			lda BuffStatusV+0
.a2d4	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a2d6	d0 2d		bne $a305			bne _done	; It's already in the buffer and in use.
.a2d8					_not_in_buffer:
.a2d8	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a2db	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a2dd	d0 0c		bne $a2eb			bne _buffer_available ; Unused or not dirty = available
.a2df	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2e2	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a2e5	20 5f ce	jsr $ce5f			jsr Fetch
.a2e8	20 3f a2	jsr $a23f			jsr Block_Write
.a2eb					_buffer_available:
.a2eb	b5 24		lda $24,x			lda DStack+0,x
.a2ed	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a2f0	b5 25		lda $25,x			lda DStack+1,x
.a2f2	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a2f5	20 0a a2	jsr $a20a			jsr BlkBuffer
.a2f8	20 13 cf	jsr $cf13			jsr Swap
.a2fb	20 6f a2	jsr $a26f			jsr Block_Read
.a2fe	a9 01		lda #$01			lda #1
.a300	8d 3f 03	sta $033f			sta BuffStatusV+0
.a303	ca		dex				dex
.a304	ca		dex				dex
.a305					_done:
.a305	a9 41		lda #$41			lda #<BlockBuffer
.a307	95 24		sta $24,x			sta DStack+0,x
.a309	a9 03		lda #$03			lda #>BlockBuffer
.a30b	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-(WordListLink+wh_Xt)
=$a30d					en = *	; remember here
>a2c1	4a					.byte CL	;wh_CodeLength
.a30d	60		rts				rts
>a30e	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
>a314	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a315	3e a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a317	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a318	00					.byte 0	;wh_Flags	dictionary flags
=41620					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a319					Update:
.a319	ad 3f 03	lda $033f			lda BuffStatusV+0
.a31c	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a31e	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-(WordListLink+wh_Xt)
=$a321					en = *	; remember here
>a317	08					.byte CL	;wh_CodeLength
.a321	60		rts				rts
>a322	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
>a328	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a329	94 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a32b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a32c	08					.byte NN	;wh_Flags	dictionary flags
=41640					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a32d					Buffer:
.a32d	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a330	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a332	d0 0c		bne $a340			bne _buffer_available ; Unused or not dirty = available
.a334	20 0a a2	jsr $a20a			jsr BlkBuffer
.a337	20 f5 a1	jsr $a1f5			jsr BuffBlockNum
.a33a	20 5f ce	jsr $ce5f			jsr Fetch
.a33d	20 3f a2	jsr $a23f			jsr Block_Write
.a340					_buffer_available:
.a340	b5 24		lda $24,x			lda DStack+0,x
.a342	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a345	b5 25		lda $25,x			lda DStack+1,x
.a347	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a34a	a9 01		lda #$01			lda #1
.a34c	8d 3f 03	sta $033f			sta BuffStatusV+0
.a34f					_done:
.a34f	a9 41		lda #$41			lda #<BlockBuffer
.a351	95 24		sta $24,x			sta DStack+0,x
.a353	a9 03		lda #$03			lda #>BlockBuffer
.a355	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-(WordListLink+wh_Xt)
=$a357					en = *	; remember here
>a32b	2a					.byte CL	;wh_CodeLength
.a357	60		rts				rts
>a358	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a360	66 66 65 72 73
>a365	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a366	a8 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a368	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a369	08					.byte NN	;wh_Flags	dictionary flags
=41701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a36a	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a36c	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-(WordListLink+wh_Xt)
=$a36f					en = *	; remember here
>a368	05					.byte CL	;wh_CodeLength
.a36f	60		rts				rts
>a370	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
>a375	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a376	e5 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a378	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a379	08					.byte NN	;wh_Flags	dictionary flags
=41717					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a37a	20 a0 a2	jsr $a2a0	Flush:		jsr Save_Buffers
.a37d	4c 6a a3	jmp $a36a			jmp Empty_Buffers
=6					CL	.var *-(WordListLink+wh_Xt)
=$a380					en = *	; remember here
>a378	06					.byte CL	;wh_CodeLength
>a380	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
>a384	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a385	f5 a2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a387	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a388	10					.byte UF	;wh_Flags	dictionary flags
=41732					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a389					Load:
.a389	20 c9 b3	jsr $b3c9			jsr underflow_1
.a38c	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a38f	48		pha				pha
.a390	ad 0c 03	lda $030c			lda BlkV+0
.a393	48		pha				pha
.a394	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a396	8d 0c 03	sta $030c			sta BlkV+0
.a399	b5 25		lda $25,x			lda DStack+1,x
.a39b	8d 0d 03	sta $030d			sta BlkV+1
.a39e	20 c3 a2	jsr $a2c3			jsr Block		; Load that block into a buffer
.a3a1	a9 00		lda #$00			lda #<1024		; block length.
.a3a3	a0 04		ldy #$04			ldy #>1024
.a3a5	20 59 b7	jsr $b759			jsr PushYA
.a3a8	38		sec				sec		; Set a flag to not zero BLK
.a3a9	20 8f af	jsr $af8f			jsr load_evaluate
.a3ac	68		pla				pla
.a3ad	8d 0c 03	sta $030c			sta BlkV+0
.a3b0	68		pla				pla
.a3b1	8d 0d 03	sta $030d			sta BlkV+1
.a3b4	0d 0c 03	ora $030c			ora BlkV+0
.a3b7	f0 13		beq $a3cc			beq _done
.a3b9	ad 0c 03	lda $030c			lda BlkV+0
.a3bc	ac 0d 03	ldy $030d			ldy BlkV+1
.a3bf	20 59 b7	jsr $b759			jsr PushYA
.a3c2	20 c3 a2	jsr $a2c3			jsr Block
.a3c5	20 9f b3	jsr $b39f			jsr PopYA	; Pop the buffer address.
.a3c8	85 04		sta $04				sta cib+0
.a3ca	84 05		sty $05				sty cib+1
.a3cc					_done:
=67					CL	.var *-(WordListLink+wh_Xt)
=$a3cc					en = *	; remember here
>a387	43					.byte CL	;wh_CodeLength
.a3cc	60		rts				rts
>a3cd	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
>a3d1	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a3d2	04 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a3d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a3d5	18					.byte UF+NN	;wh_Flags	dictionary flags
=41809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a3d6					Thru:
.a3d6	20 de b3	jsr $b3de			jsr underflow_2
.a3d9	20 7a ce	jsr $ce7a			jsr To_R
.a3dc					_loop:
.a3dc	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a3de	48		pha				pha
.a3df	b5 24		lda $24,x			lda DStack+0,x
.a3e1	48		pha				pha
.a3e2	20 89 a3	jsr $a389			jsr Load		; Load this screen.
.a3e5	20 99 ce	jsr $ce99			jsr R_From		; Get the screen # we just loaded.
.a3e8	20 eb c9	jsr $c9eb			jsr One_plus		; increment
.a3eb	86 14		stx $14				stx tmp1
.a3ed	ba		tsx				tsx
.a3ee	8a		txa				txa
.a3ef	a8		tay				tay
.a3f0	a6 14		ldx $14				ldx tmp1
.a3f2	b9 01 01	lda $0101,y			lda RStack+1,y
.a3f5	d5 24		cmp $24,x			cmp DStack+0,x
.a3f7	b9 02 01	lda $0102,y			lda RStack+2,y
.a3fa	f5 25		sbc $25,x			sbc DStack+1,x
.a3fc	b0 de		bcs $a3dc			bcs _loop
.a3fe	e8		inx				inx			; Drop index
.a3ff	e8		inx				inx
.a400	68		pla				pla			; RDrop limit
.a401	68		pla				pla
=44					CL	.var *-(WordListLink+wh_Xt)
=$a402					en = *	; remember here
>a3d4	2c					.byte CL	;wh_CodeLength
.a402	60		rts				rts
>a403	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
>a407	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a408	51 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a40a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a40b	08					.byte NN	;wh_Flags	dictionary flags
=41863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a40c	20 9f b3	jsr $b39f	List:		jsr PopYA	; Save the screen number
.a40f	8d 0e 03	sta $030e			sta ScrV+0
.a412	8c 0f 03	sty $030f			sty ScrV+1
.a415					ListScr:
.a415	20 19 a2	jsr $a219			jsr Scr
.a418	20 5f ce	jsr $ce5f			jsr Fetch
.a41b	20 c3 a2	jsr $a2c3			jsr Block	; Get the current screen contents.
.a41e	20 d7 aa	jsr $aad7			jsr CR
.a421	20 7a b8	jsr $b87a			jsr SLiteral_Runtime
.a424	4c 2f a4	jmp $a42f			  jmp +				; for SLiteral_Runtime
>a427	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a42f					+
.a42f	20 7d cd	jsr $cd7d			jsr Type
.a432	20 19 a2	jsr $a219			jsr Scr		; print screen number
.a435	20 5f ce	jsr $ce5f			jsr Fetch
.a438	a9 04		lda #$04			lda #4		;    in 4 positions
.a43a	20 d8 cb	jsr $cbd8			jsr U_Dot_R_A
.a43d	a9 00		lda #$00			lda #0			; line #
.a43f					_line_loop:
.a43f	48		pha				pha
.a440	20 d7 aa	jsr $aad7			jsr CR
.a443	68		pla				pla		; Print the line number
.a444	48		pha				pha
.a445	20 9b b7	jsr $b79b			jsr PushZA
.a448	a9 02		lda #$02			lda #2		;   in 2 positions
.a44a	20 d8 cb	jsr $cbd8			jsr U_Dot_R_A
.a44d	20 70 cd	jsr $cd70			jsr Space
.a450	20 f5 ce	jsr $cef5			jsr Dup		; Print one line using the address on the stack.
.a453	a9 40		lda #$40			lda #64
.a455	20 9b b7	jsr $b79b			jsr PushZA
.a458	20 7d cd	jsr $cd7d			jsr Type
.a45b	a9 40		lda #$40			lda #64		; move address to the next line.
.a45d	20 9a c9	jsr $c99a			jsr Plus_A
.a460	68		pla				pla		; Increment the line number
.a461	18		clc				clc
.a462	69 01		adc #$01			adc #1
.a464	c9 10		cmp #$10			cmp #16		; See if we are done.
.a466	d0 d7		bne $a43f			bne _line_loop
.a468	e8		inx				inx		; Drop the address
.a469	e8		inx				inx
.a46a	4c d7 aa	jmp $aad7			jmp CR
=97					CL	.var *-(WordListLink+wh_Xt)
=$a46d					en = *	; remember here
>a40a	61					.byte CL	;wh_CodeLength
>a46d	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
>a472	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a473	87 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a475	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a476	08					.byte NN	;wh_Flags	dictionary flags
=41970					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a477					Defer:
.a477	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.a47a	a9 84		lda #$84			lda #<_undefined	; compile "jmp _undefined"
.a47c	a0 a4		ldy #$a4			ldy #>_undefined
.a47e	20 ea cc	jsr $ccea			jsr Jmp_Comma_YA
.a481	4c ae bb	jmp $bbae			jmp adjust_z	; adjust header to correct length
=13					CL	.var *-(WordListLink+wh_Xt)
=$a484					en = *	; remember here
>a475	0d					.byte CL	;wh_CodeLength
.a484					_undefined:
.a484	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a486	4c 28 b4	jmp $b428			jmp ThrowA
>a489	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
>a48f	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a490	f2 a3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a492	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a493	08					.byte NN	;wh_Flags	dictionary flags
=41999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a494					Defer_Fetch:
.a494	20 eb c9	jsr $c9eb			jsr One_plus	; step over JMP opcode to operand
.a497	4c 5f ce	jmp $ce5f			jmp Fetch	; get JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a49a					en = *	; remember here
>a492	06					.byte CL	;wh_CodeLength
>a49a	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
>a4a0	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4a1	0f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4a4	08					.byte NN	;wh_Flags	dictionary flags
=42016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4a5					Defer_Store:
.a4a5	20 eb c9	jsr $c9eb			jsr One_plus	; step over JMP opcode to operand
.a4a8	4c 42 ce	jmp $ce42			jmp Store	; set JMP operand, return
=6					CL	.var *-(WordListLink+wh_Xt)
=$a4ab					en = *	; remember here
>a4a3	06					.byte CL	;wh_CodeLength
>a4ab	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
>a4ad	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4ae	20 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4b1	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4b2					Is:
.a4b2	a5 0a		lda $0a				lda state		; Check STATE
.a4b4	f0 0a		beq $a4c0			beq _interpreting
.a4b6					_compiling:
.a4b6	20 25 bc	jsr $bc25			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4b9	a0 a4		ldy #$a4			ldy #>Defer_Store	; Postpone DEFER! by compiling a JSR to it.
.a4bb	a9 a5		lda #$a5			lda #<Defer_Store
.a4bd	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
.a4c0					_interpreting:
.a4c0	20 11 bc	jsr $bc11			jsr Tick
.a4c3	4c a5 a4	jmp $a4a5			jmp Defer_Store
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4c6					en = *	; remember here
>a4b0	14					.byte CL	;wh_CodeLength
>a4c6	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a4ce	66
>a4cf	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4d0	2d a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4d3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42063					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4d4					Action_Of:
.a4d4	a5 0a		lda $0a				lda state		; Check STATE
.a4d6	f0 0a		beq $a4e2			beq _interpreting
.a4d8					_compiling:
.a4d8	20 25 bc	jsr $bc25			jsr Bracket_Tick	; compile the xt of the next word as a literal.
.a4db	a0 a4		ldy #$a4			ldy #>Defer_Fetch	; Postpone DEFER@ by compiling a JSR to it.
.a4dd	a9 94		lda #$94			lda #<Defer_Fetch
.a4df	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
.a4e2					_interpreting:
.a4e2	20 11 bc	jsr $bc11			jsr Tick
.a4e5	4c 94 a4	jmp $a494			jmp Defer_Fetch
=20					CL	.var *-(WordListLink+wh_Xt)
=$a4e8					en = *	; remember here
>a4d2	14					.byte CL	;wh_CodeLength
>a4e8	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
>a4f0	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a4f1	4f a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a4f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a4f4	08					.byte NN	;wh_Flags	dictionary flags
=42096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a4f5	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a4f7	a9 ff		lda #$ff			lda #<User0
.a4f9	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$a4fc					en = *	; remember here
>a4f3	07					.byte CL	;wh_CodeLength
>a4fc	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
>a503	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a504	70 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a506	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a507	08					.byte NN	;wh_Flags	dictionary flags
=42115					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a508	20 74 c1	jsr $c174	Buffer_Colon:	jsr Create
.a50b	4c 7d c0	jmp $c07d			jmp Allot
=6					CL	.var *-(WordListLink+wh_Xt)
=$a50e					en = *	; remember here
>a506	06					.byte CL	;wh_CodeLength
>a50e	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
>a512	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a513	83 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a515	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a516	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a517					Case:
.a517	4c aa b7	jmp $b7aa			jmp Zero	; init jmp fixup chain
=3					CL	.var *-(WordListLink+wh_Xt)
=$a51a					en = *	; remember here
>a515	03					.byte CL	;wh_CodeLength
>a51a	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
>a521	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a522	92 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a524	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a525	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42145					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a526					EndCase:
.a526	20 c2 cc	jsr $ccc2			jsr Drop_Comma
.a529					_loop:
.a529	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a52b	f0 06		beq $a533			beq _done
.a52d	20 b0 a5	jsr $a5b0			jsr Then	;   fixup another one
.a530	4c 29 a5	jmp $a529			jmp _loop
.a533					_done:
.a533	e8		inx				inx		; Drop the 0
.a534	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$a535					en = *	; remember here
>a524	0f					.byte CL	;wh_CodeLength
.a535	60		rts				rts
>a536	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
>a538	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a539	a1 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a53b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a53c	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a53d					Of:
.a53d	a0 a5		ldy #$a5			ldy #>_runtime		; Check if value is equal to this case.
.a53f	a9 52		lda #$52			lda #<_runtime
.a541	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.a544	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a546	20 94 cc	jsr $cc94			jsr C_Comma_A
.a549	20 b7 c9	jsr $c9b7			jsr Here		; Put the origination address on the stack for else/then
.a54c	20 aa b7	jsr $b7aa			jsr Zero
.a54f	4c ab cc	jmp $ccab			jmp Comma
=21					CL	.var *-(WordListLink+wh_Xt)
=$a552					en = *	; remember here
>a53b	15					.byte CL	;wh_CodeLength
.a552					_runtime:
.a552	b5 24		lda $24,x			lda DStack+0,x	; compare x1 with x2
.a554	d5 26		cmp $26,x			cmp DStack+2,x
.a556	d0 0a		bne $a562			bne _NotEq
.a558	b5 25		lda $25,x			lda DStack+1,x
.a55a	d5 27		cmp $27,x			cmp DStack+3,x
.a55c	d0 04		bne $a562			bne _NotEq
.a55e	e8		inx				inx		; Drop x2
.a55f	e8		inx				inx
.a560	d0 35		bne $a597			bne zbranch_run2 ; Drop x1 & return to after the jmp abs
.a562	e8		inx		_NotEq:		inx		; Drop x2
.a563	e8		inx				inx
.a564	60		rts				rts		; return to the jmp abs to next test
>a565	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
>a56a	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a56b	b8 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a56d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a56e	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42218					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a56f					EndOf:
.a56f	4c c2 a5	jmp $a5c2			jmp Else
=3					CL	.var *-(WordListLink+wh_Xt)
=$a572					en = *	; remember here
>a56d	03					.byte CL	;wh_CodeLength
>a572	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
>a574	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a575	ea a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a577	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a578	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42228					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a579					If:
.a579	20 8a a5	jsr $a58a	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a57c					zbranch_jmp0_comma:
.a57c	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a57e	20 94 cc	jsr $cc94			jsr C_Comma_A
.a581	20 b7 c9	jsr $c9b7			jsr Here		; save ptr to address for else/then
.a584	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a586	a8		tay				tay			; THEN or ELSE will fix it later.
.a587	4c ae cc	jmp $ccae			jmp Comma_YA
=17					CL	.var *-(WordListLink+wh_Xt)
=$a58a					en = *	; remember here
>a577	11					.byte CL	;wh_CodeLength
=$cce7					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a58a					zbranch_jsr_comma:
.a58a	a0 a5		ldy #$a5			ldy #>_runtime
.a58c	a9 91		lda #$91			lda #<_runtime
.a58e	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
.a591					_runtime:
.a591	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a593	15 25		ora $25,x			ora DStack+1,x
.a595	f0 0d		beq $a5a4			beq zbranch_run_done
.a597	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a598	68		pla				pla
.a599	69 03		adc #$03			adc #3
.a59b	90 06		bcc $a5a3			bcc +
.a59d	a8		tay				tay
.a59e	68		pla				pla
.a59f	69 00		adc #$00			adc #0
.a5a1	48		pha				pha
.a5a2	98		tya				tya
.a5a3	48		pha		+		pha
.a5a4					zbranch_run_done:
.a5a4	e8		inx				inx			; Drop f
.a5a5	e8		inx				inx
.a5a6	60		rts				rts
>a5a7	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
>a5ab	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5ac	f4 a4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5af	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42283					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5b0					Then:
.a5b0	20 b7 c9	jsr $c9b7			jsr Here
.a5b3	20 13 cf	jsr $cf13			jsr Swap
.a5b6	4c 42 ce	jmp $ce42			jmp Store
=9					CL	.var *-(WordListLink+wh_Xt)
=$a5b9					en = *	; remember here
>a5ae	09					.byte CL	;wh_CodeLength
>a5b9	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
>a5bd	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5be	2b a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5c1	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42301					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5c2					Else:
.a5c2	20 7c a5	jsr $a57c			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a5c5	20 b7 c9	jsr $c9b7			jsr Here
.a5c8	20 f9 cd	jsr $cdf9			jsr Rot
.a5cb	4c 42 ce	jmp $ce42			jmp Store
=12					CL	.var *-(WordListLink+wh_Xt)
=$a5ce					en = *	; remember here
>a5c0	0c					.byte CL	;wh_CodeLength
>a5ce	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
>a5d3	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5d4	3d a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5d7	0d					.byte NN+CO+IM	;wh_Flags	dictionary flags
=42323					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5d8	20 b7 c9	jsr $c9b7	Begin:		jsr Here	; remember the loop starting location
.a5db	a9 d8		lda #$d8			lda #<Begin	; pairing marker
.a5dd	4c 9b b7	jmp $b79b			jmp PushZA
=8					CL	.var *-(WordListLink+wh_Xt)
=$a5e0					en = *	; remember here
>a5d6	08					.byte CL	;wh_CodeLength
>a5e0	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
>a5e5	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5e6	53 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5e9	1d					.byte NN+CO+IM+UF	;wh_Flags	dictionary flags
=42341					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5ea	20 de b3	jsr $b3de	Again:		jsr underflow_2
.a5ed	a9 d8		lda #$d8			lda #<Begin	; check pairing
.a5ef	20 8f b2	jsr $b28f			jsr QPairCtlA
.a5f2	4c e7 cc	jmp $cce7			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-(WordListLink+wh_Xt)
=$a5f5					en = *	; remember here
>a5e8	0b					.byte CL	;wh_CodeLength
>a5f5	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
>a5fa	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a5fb	65 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a5fd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a5fe	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42362					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a5ff	a9 d8		lda #$d8	Until:		lda #<Begin		; check pairing
.a601	20 8f b2	jsr $b28f			jsr QPairCtlA
.a604	4c 3d a6	jmp $a63d			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a607					en = *	; remember here
>a5fd	08					.byte CL	;wh_CodeLength
>a607	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
>a60c	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a60d	7a a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a60f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a610	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42380					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a611	a9 d8		lda #$d8	While:		lda #<Begin	; check pairing
.a613	20 8f b2	jsr $b28f			jsr QPairCtlA
.a616	20 79 a5	jsr $a579			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a619	20 13 cf	jsr $cf13			jsr Swap	; Swap the two addresses on the stack.
.a61c	a9 d8		lda #$d8			lda #<Begin	; pairing marker
.a61e	4c 9b b7	jmp $b79b			jmp PushZA
=16					CL	.var *-(WordListLink+wh_Xt)
=$a621					en = *	; remember here
>a60f	10					.byte CL	;wh_CodeLength
>a621	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
>a627	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a628	8c a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a62a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a62b	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=42407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a62c	a9 d8		lda #$d8	Repeat:		lda #<Begin	; check pairing
.a62e	20 8f b2	jsr $b28f			jsr QPairCtlA
.a631	20 e7 cc	jsr $cce7			jsr Jmp_Comma	; compile the jmp back
.a634	20 b7 c9	jsr $c9b7			jsr Here	; patch the WHILE jmp operand
.a637	20 13 cf	jsr $cf13			jsr Swap
.a63a	4c 42 ce	jmp $ce42			jmp Store
=17					CL	.var *-(WordListLink+wh_Xt)
=$a63d					en = *	; remember here
>a62a	11					.byte CL	;wh_CodeLength
.a63d					ZBranch_Comma:
.a63d	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a63f	a8		tay				tay
.a640	20 ae cc	jsr $ccae			jsr Comma_YA
.a643	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a645	a0 22		ldy #$22			ldy #DStack-2
.a647	20 ae cc	jsr $ccae			jsr Comma_YA
.a64a	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a64c	a0 23		ldy #$23			ldy #DStack-1
.a64e	20 ae cc	jsr $ccae			jsr Comma_YA
.a651	a9 f0		lda #$f0			lda #$f0		; BEQ
.a653	d0 0c		bne $a661			bne Branch_Comma
>a655	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
>a65c	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a65d	a7 a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a65f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a660	08					.byte NN	;wh_Flags	dictionary flags
=42460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a661					Branch_Comma:
.a661	48		pha				pha			; save branch opcode
.a662	38		sec				sec			; AY= displacement+2
.a663	b5 24		lda $24,x			lda DStack+0,x
.a665	e5 00		sbc $00				sbc cp+0
.a667	a8		tay				tay
.a668	b5 25		lda $25,x			lda DStack+1,x
.a66a	e5 01		sbc $01				sbc cp+1
.a66c	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a66e	f0 0b		beq $a67b			beq _rev
.a670	68		pla		_2byte:		pla			; restore branch opcode
.a671	49 20		eor #$20			eor #$20		; reverse branch sense
.a673	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a675	20 ae cc	jsr $ccae			jsr Comma_YA
.a678	4c e7 cc	jmp $cce7			jmp Jmp_Comma		; compile JMP abs
.a67b	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a67d	90 f1		bcc $a670			bcc _2byte
.a67f	e8		inx		_1byte:		inx			; Drop address
.a680	e8		inx				inx
.a681	88		dey				dey			; fix displacement
.a682	88		dey				dey
.a683	68		pla				pla			; restore branch opcode
.a684	4c ae cc	jmp $ccae			jmp Comma_YA		; compile Bcc
>a687	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
>a68b	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a68c	dc a5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a68e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a68f	18					.byte UF+NN	;wh_Flags	dictionary flags
=42507					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a690					Word:
.a690	20 c9 b3	jsr $b3c9			jsr underflow_1
.a693	a4 08		ldy $08				ldy toin+0		; >IN
.a695	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a697	f0 09		beq $a6a2			beq _found_char
.a699	b1 04		lda ($04),y			lda (cib),y
.a69b	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a69d	d0 03		bne $a6a2			bne _found_char
.a69f	c8		iny				iny
.a6a0	d0 f3		bne $a695			bne _DelimLoop
.a6a2					_found_char:
.a6a2	84 08		sty $08				sty toin+0		; Save index of where word starts
.a6a4	20 92 ba	jsr $ba92			jsr Parse		; The real work is done by parse
.a6a7	20 83 b3	jsr $b383			jsr PopA		; pop u
.a6aa	85 16		sta $16				sta tmp2+0
.a6ac	20 aa b3	jsr $b3aa			jsr PopTmp1		; pop addr
.a6af	20 b7 c9	jsr $c9b7			jsr Here		; Return caddr
.a6b2	a5 16		lda $16				lda tmp2+0
.a6b4	a0 00		ldy #$00			ldy #0			; Save length of string
.a6b6	f0 03		beq $a6bb			beq _CopyStart
.a6b8	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a6ba	c8		iny				iny
.a6bb	20 94 cc	jsr $cc94	_CopyStart:	jsr C_Comma_A
.a6be	c4 16		cpy $16				cpy tmp2+0
.a6c0	90 f6		bcc $a6b8			bcc _CopyLoop
=50					CL	.var *-(WordListLink+wh_Xt)
=$a6c2					en = *	; remember here
>a68e	32					.byte CL	;wh_CodeLength
.a6c2	60		rts				rts
>a6c3	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
>a6c4	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6c5	0b a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6c8	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6c9	a9 29		lda #$29	Paren:		lda #')'		; separator
.a6cb	20 95 ba	jsr $ba95			jsr Parse_A		; Call parse.
.a6ce	4c b6 c4	jmp $c4b6			jmp Two_drop		; Throw away the result.
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6d1					en = *	; remember here
>a6c7	08					.byte CL	;wh_CodeLength
>a6d1	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
>a6d3	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6d4	44 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6d6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6d7	0c					.byte IM+NN	;wh_Flags	dictionary flags
=42579					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6d8	a9 29		lda #$29	Dot_paren:	lda #')'
.a6da	20 95 ba	jsr $ba95			jsr Parse_A
.a6dd	4c 7d cd	jmp $cd7d			jmp Type
=8					CL	.var *-(WordListLink+wh_Xt)
=$a6e0					en = *	; remember here
>a6d6	08					.byte CL	;wh_CodeLength
>a6e0	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
>a6e4	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a6e5	53 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a6e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a6e8	08					.byte NN	;wh_Flags	dictionary flags
=42596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a6e9	20 83 b3	jsr $b383	Hash:		jsr PopA		; save length
.a6ec	85 16		sta $16				sta tmp2+0
.a6ee	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a6f0	b4 25		ldy $25,x			ldy DStack+1,x
.a6f2	85 14		sta $14				sta tmp1+0
.a6f4	84 15		sty $15				sty tmp1+1
.a6f6	a9 b3		lda #$b3			lda #$b3		; init hash
.a6f8	95 24		sta $24,x			sta DStack+0,x
.a6fa	95 25		sta $25,x			sta DStack+1,x
.a6fc	a0 00		ldy #$00			ldy #0			; for each char
.a6fe	f0 15		beq $a715			beq _next
.a700	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a702	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a704	90 06		bcc $a70c			bcc _3
.a706	c9 7b		cmp #$7b			cmp #'z'+1
.a708	b0 02		bcs $a70c			bcs _3
.a70a	29 df		and #$df			and #$df
.a70c	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a70e	36 25		rol $25,x			rol DStack+1,x
.a710	75 24		adc $24,x			adc DStack+0,x
.a712	95 24		sta $24,x			sta DStack+0,x
.a714	c8		iny				iny
.a715	c4 16		cpy $16		_Next:		cpy tmp2+0
.a717	90 e7		bcc $a700			bcc _loop
=48					CL	.var *-(WordListLink+wh_Xt)
=$a719					en = *	; remember here
>a6e7	30					.byte CL	;wh_CodeLength
.a719	60		rts				rts
>a71a	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a722	65 6e 74 3f
>a726	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a727	64 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a729	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a72a	08					.byte NN	;wh_Flags	dictionary flags
=42662					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a72b					Environment_Q:
.a72b	20 e9 a6	jsr $a6e9			jsr Hash		; ( hash )
.a72e	a0 00		ldy #$00			ldy #0			; Y= table index
.a730	f0 0a		beq $a73c			beq _entry_test
.a732	98		tya		_entry_next:	tya
.a733	c0 30		cpy #$30			cpy #_table_dbl		; if double
.a735	90 02		bcc $a739			bcc +
.a737	69 01		adc #$01			adc #6-4-1		;   skip double
.a739	69 04		adc #$04	+		adc #4			;   skip single
.a73b	a8		tay		_3:		tay
.a73c	b9 70 a7	lda $a770,y	_entry_test:	lda _Table+0,y		; match?
.a73f	f0 28		beq $a769			beq _notfound
.a741	d5 24		cmp $24,x			cmp DStack+0,x
.a743	d0 ed		bne $a732			bne _entry_next
.a745	b9 71 a7	lda $a771,y			lda _Table+1,y
.a748	d5 25		cmp $25,x			cmp DStack+1,x
.a74a	d0 e6		bne $a732			bne _entry_next
.a74c	b9 72 a7	lda $a772,y			lda _Table+2,y
.a74f	95 24		sta $24,x			sta DStack+0,x
.a751	b9 73 a7	lda $a773,y			lda _Table+3,y
.a754	95 25		sta $25,x			sta DStack+1,x
.a756	c0 30		cpy #$30			cpy #_table_dbl		; single or double data?
.a758	90 0c		bcc $a766			bcc _single
.a75a	ca		dex				dex			;  push 2nd cell
.a75b	ca		dex				dex
.a75c	b9 74 a7	lda $a774,y			lda _Table+4,y
.a75f	95 24		sta $24,x			sta DStack+0,x
.a761	b9 75 a7	lda $a775,y			lda _Table+5,y
.a764	95 25		sta $25,x			sta DStack+1,x
.a766					_single:
.a766	4c 79 b7	jmp $b779			jmp True		; return True
.a769					_notfound:
.a769	a9 00		lda #$00			lda #0			; return 0
.a76b	95 24		sta $24,x			sta DStack+0,x
.a76d	95 25		sta $25,x			sta DStack+1,x
.a76f	60		rts				rts
=69					CL	.var *-(WordListLink+wh_Xt)
=$a770					en = *	; remember here
>a729	45					.byte CL	;wh_CodeLength
.a770					_Table:
>a770	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a774	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a778	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a77c	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a780	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a784	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a788	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a78c	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a790	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a794	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a798	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a79c	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=48					_table_dbl = *-_Table	; These return a double-cell number
>a7a0	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a7a6	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a7ac	00					.byte 0		; end of list
>a7ad	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
>a7b1	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7b2	a6 a6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7b5	08					.byte NN	;wh_Flags	dictionary flags
=42801					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7b6	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.a7b8	4c 63 cd	jmp $cd63			jmp Emit_A
=5					CL	.var *-(WordListLink+wh_Xt)
=$a7bb					en = *	; remember here
>a7b4	05					.byte CL	;wh_CodeLength
>a7bb	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
>a7bf	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a7c0	31 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a7c2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a7c3	18					.byte UF+NN	;wh_Flags	dictionary flags
=42815					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a7c4					Dump:
.a7c4	20 de b3	jsr $b3de			jsr underflow_2
.a7c7	ca		dex				dex			; alloc work area
.a7c8	ca		dex				dex
.a7c9					_row:
.a7c9	20 d7 aa	jsr $aad7			jsr CR
.a7cc	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a7ce	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7d1	b5 28		lda $28,x			lda DStack+4,x
.a7d3	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7d6	20 70 cd	jsr $cd70			jsr Space
.a7d9	20 70 cd	jsr $cd70			jsr Space
.a7dc	a9 00		lda #$00			lda #0
.a7de	95 24		sta $24,x			sta DStack+0,x
.a7e0					_loop:
.a7e0	b5 26		lda $26,x			lda DStack+2,x
.a7e2	15 27		ora $27,x			ora DStack+3,x
.a7e4	f0 36		beq $a81c			beq _all_printed
.a7e6	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7e8	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a7eb	20 70 cd	jsr $cd70			jsr Space
.a7ee	a1 28		lda ($28,x)			lda (DStack+4,x)
.a7f0	20 74 a8	jsr $a874			jsr is_printable
.a7f3	b0 02		bcs $a7f7			bcs _printable
.a7f5	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a7f7					_printable:
.a7f7	b4 24		ldy $24,x			ldy DStack+0,x
.a7f9	91 00		sta ($00),y			sta (cp),y
.a7fb	c0 07		cpy #$07			cpy #7
.a7fd	d0 03		bne $a802			bne +
.a7ff	20 70 cd	jsr $cd70			jsr Space
.a802					+
.a802	f6 28		inc $28,x			inc DStack+4,x
.a804	d0 02		bne $a808			bne +
.a806	f6 29		inc $29,x			inc DStack+5,x
.a808					+
.a808	20 d1 c9	jsr $c9d1			jsr NOS_One_Minus	; loop counter
.a80b	f6 24		inc $24,x			inc DStack+0,x
.a80d	b5 24		lda $24,x			lda DStack+0,x
.a80f	c9 10		cmp #$10			cmp #16
.a811	90 cd		bcc $a7e0			bcc _loop		; next byte
.a813	20 70 cd	jsr $cd70			jsr Space
.a816	20 2b a8	jsr $a82b			jsr dump_print_ascii
.a819	4c c9 a7	jmp $a7c9			jmp _row		; new row
.a81c					_all_printed:
.a81c	b5 24		lda $24,x			lda DStack+0,x
.a81e	f0 06		beq $a826			beq _done
.a820	20 70 cd	jsr $cd70			jsr Space
.a823	20 2b a8	jsr $a82b			jsr dump_print_ascii
.a826					_done:
.a826	e8		inx				inx			; drop work area
.a827	e8		inx				inx
.a828	4c b6 c4	jmp $c4b6			jmp Two_drop		; one byte less than 4x INX
=103					CL	.var *-(WordListLink+wh_Xt)
=$a82b					en = *	; remember here
>a7c2	67					.byte CL	;wh_CodeLength
.a82b					dump_print_ascii:
.a82b	a0 00		ldy #$00			ldy #0
.a82d					_loop:
.a82d	b1 00		lda ($00),y			lda (cp),y
.a82f	20 63 cd	jsr $cd63			jsr Emit_A
.a832	c8		iny				iny
.a833	c0 08		cpy #$08			cpy #8
.a835	d0 03		bne $a83a			bne +
.a837	20 70 cd	jsr $cd70			jsr Space
.a83a					+
.a83a	98		tya				tya
.a83b	d5 24		cmp $24,x			cmp DStack+0,x
.a83d	90 ee		bcc $a82d			bcc _loop
.a83f	60		rts				rts
>a840	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
>a845	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a846	3f a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a848	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a849	08					.byte NN	;wh_Flags	dictionary flags
=42949					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a84a	20 83 b3	jsr $b383	C_Dot_Hex:	jsr PopA
.a84d					C_Dot_Hex_A:
.a84d	48		pha		                pha
.a84e	4a		lsr a				lsr		; convert high nibble first
.a84f	4a		lsr a				lsr
.a850	4a		lsr a				lsr
.a851	4a		lsr a				lsr
.a852	20 56 a8	jsr $a856			jsr _nibble_to_ascii
.a855	68		pla				pla
.a856					_nibble_to_ascii:
.a856	29 0f		and #$0f			and #$0F	; only use lower nibble
.a858	c9 0a		cmp #$0a			cmp #9+1
.a85a	90 02		bcc $a85e			bcc +
.a85c	69 06		adc #$06			adc #6
.a85e	69 30		adc #$30	+		adc #'0'
.a860	4c 63 cd	jmp $cd63			jmp Emit_A
>a863	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
>a867	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a868	c5 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a86a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a86b	08					.byte NN	;wh_Flags	dictionary flags
=42983					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a86c	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a86e	20 4d a8	jsr $a84d			jsr C_Dot_Hex_A
.a871	4c 4a a8	jmp $a84a			jmp C_Dot_Hex	; do lo byte
.a874					is_printable:
.a874	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a876	90 07		bcc $a87f	                bcc _done
.a878	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a87a	b0 02		bcs $a87e	                bcs _failed
.a87c	38		sec		                sec
.a87d	60		rts		                rts
.a87e	18		clc		_failed:	clc
.a87f	60		rts		_done:		rts
>a880	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
>a882	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a883	e7 a7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a885	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a886	08					.byte NN	;wh_Flags	dictionary flags
=43010					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a887					Dot_s:
.a887	a9 3c		lda #$3c			lda #'<'
.a889	20 63 cd	jsr $cd63			jsr Emit_A
.a88c	20 f3 c1	jsr $c1f3			jsr Depth	; ( -- u )
.a88f	20 be cb	jsr $cbbe			jsr print_u
.a892	a9 3e		lda #$3e			lda #'>'
.a894	20 63 cd	jsr $cd63			jsr Emit_A
.a897	20 70 cd	jsr $cd70			jsr Space
.a89a	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a89c	88		dey		_loop:		dey
.a89d	88		dey				dey
.a89e	86 14		stx $14				stx tmp1
.a8a0	c4 14		cpy $14				cpy tmp1
.a8a2	90 15		bcc $a8b9			bcc _done
.a8a4	98		tya				tya			; save index
.a8a5	48		pha				pha
.a8a6	ca		dex				dex			; push stack[index]
.a8a7	ca		dex				dex
.a8a8	b9 24 00	lda $0024,y			lda DStack+0,y
.a8ab	95 24		sta $24,x			sta DStack+0,x
.a8ad	b9 25 00	lda $0025,y			lda DStack+1,y
.a8b0	95 25		sta $25,x			sta DStack+1,x
.a8b2	20 71 cb	jsr $cb71			jsr Dot
.a8b5	68		pla				pla			; restore index
.a8b6	a8		tay				tay
.a8b7	d0 e3		bne $a89c			bne _loop
.a8b9					_done:
=50					CL	.var *-(WordListLink+wh_Xt)
=$a8b9					en = *	; remember here
>a885	32					.byte CL	;wh_CodeLength
.a8b9	60		rts				rts
>a8ba	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
>a8c1	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a8c2	02 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a8c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a8c5	18					.byte UF+NN	;wh_Flags	dictionary flags
=43073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a8c6					Compare:
.a8c6	20 e8 b3	jsr $b3e8			jsr underflow_4
.a8c9	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a8cb	85 19		sta $19				sta tmp3+1
.a8cd	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a8cf	b4 27		ldy $27,x			ldy DStack+3,x
.a8d1	85 16		sta $16				sta tmp2+0
.a8d3	84 17		sty $17				sty tmp2+1
.a8d5	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a8d7	85 18		sta $18				sta tmp3+0
.a8d9	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a8db	b4 2b		ldy $2b,x			ldy DStack+7,x
.a8dd	85 14		sta $14				sta tmp1+0
.a8df	84 15		sty $15				sty tmp1+1
.a8e1	a0 00		ldy #$00			ldy #0		; for each char
.a8e3					_loop:
.a8e3	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a8e5	f0 13		beq $a8fa			beq _str1
.a8e7					_L1:
.a8e7	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a8e9	f0 27		beq $a912			beq _str2
.a8eb					_L2:
.a8eb	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a8ed	d1 16		cmp ($16),y			cmp (tmp2),y
.a8ef	d0 19		bne $a90a			bne _neq
.a8f1	c8		iny				iny		; to next char
.a8f2	d0 ef		bne $a8e3			bne _loop
.a8f4	e6 15		inc $15				inc tmp1+1	; to next page
.a8f6	e6 17		inc $17				inc tmp2+1
.a8f8	d0 e9		bne $a8e3			bne _loop
.a8fa	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a8fc	10 e9		bpl $a8e7			bpl _L1
.a8fe	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a900	d0 0a		bne $a90c			bne _less
.a902	b5 25		lda $25,x			lda DStack+1,x
.a904	d0 06		bne $a90c			bne _less
.a906	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a908	f0 0e		beq $a918			beq _gt2
.a90a	b0 0a		bcs $a916	_neq:		bcs _greater
.a90c	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a90e	95 2a		sta $2a,x			sta DStack+6,x
.a910	d0 0a		bne $a91c			bne _done
.a912	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a914	10 d5		bpl $a8eb			bpl _L2
.a916	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a918	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a91a	a9 00		lda #$00			lda #0
.a91c	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a91e	8a		txa				txa		; Remove all but the result from the stack.
.a91f	18		clc				clc
.a920	69 06		adc #$06			adc #6
.a922	aa		tax				tax
=93					CL	.var *-(WordListLink+wh_Xt)
=$a923					en = *	; remember here
>a8c4	5d					.byte CL	;wh_CodeLength
.a923	60		rts				rts
>a924	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
>a92a	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a92b	41 a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a92d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a92e	18					.byte UF+NN	;wh_Flags	dictionary flags
=43178					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a92f					Search:
.a92f	20 e8 b3	jsr $b3e8			jsr underflow_4
.a932	b5 24		lda $24,x			lda DStack+0,x
.a934	15 25		ora $25,x			ora DStack+1,x
.a936	d0 09		bne $a941			bne _start_search
.a938	e8		inx				inx		; Drop u2
.a939	e8		inx				inx
.a93a	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a93c	95 24		sta $24,x			sta DStack+0,x
.a93e	95 25		sta $25,x			sta DStack+1,x
.a940	60		rts				rts
.a941					_start_search:
.a941	20 aa b7	jsr $b7aa			jsr Zero
.a944					_search_loop:
.a944	18		clc				clc
.a945	b5 24		lda $24,x			lda DStack+0,x
.a947	75 26		adc $26,x			adc DStack+2,x
.a949	85 14		sta $14				sta tmp1+0
.a94b	b5 25		lda $25,x			lda DStack+1,x
.a94d	75 27		adc $27,x			adc DStack+3,x
.a94f	85 15		sta $15				sta tmp1+1
.a951	d5 2b		cmp $2b,x			cmp DStack+7,x
.a953	90 13		bcc $a968			bcc _init_comparison ; Obviously less
.a955	d0 06		bne $a95d			bne _not_found
.a957	b5 2a		lda $2a,x			lda DStack+6,x
.a959	c5 14		cmp $14				cmp tmp1
.a95b	b0 0b		bcs $a968			bcs _init_comparison
.a95d					_not_found:
.a95d	e8		inx				inx		; Remove offset
.a95e	e8		inx				inx
.a95f	e8		inx				inx		; Remove u2
.a960	e8		inx				inx
.a961	a9 00		lda #$00			lda #0
.a963	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.a965	95 25		sta $25,x			sta DStack+1,x
.a967	60		rts				rts
.a968					_init_comparison:
.a968	18		clc				clc
.a969	b5 2c		lda $2c,x			lda DStack+8,x
.a96b	75 24		adc $24,x			adc DStack+0,x
.a96d	85 14		sta $14				sta tmp1
.a96f	b5 2d		lda $2d,x			lda DStack+9,x
.a971	75 25		adc $25,x			adc DStack+1,x
.a973	85 15		sta $15				sta tmp1+1
.a975	b5 28		lda $28,x			lda DStack+4,x
.a977	85 16		sta $16				sta tmp2
.a979	b5 29		lda $29,x			lda DStack+5,x
.a97b	85 17		sta $17				sta tmp2+1
.a97d	b5 26		lda $26,x			lda DStack+2,x
.a97f	85 18		sta $18				sta tmp3+0
.a981	b5 27		lda $27,x			lda DStack+3,x
.a983	85 19		sta $19				sta tmp3+1
.a985					_comparison_loop:
.a985	a0 00		ldy #$00			ldy #0
.a987	b1 14		lda ($14),y			lda (tmp1),y
.a989	d1 16		cmp ($16),y			cmp (tmp2),y
.a98b	f0 06		beq $a993			beq _letters_match
.a98d	20 eb c9	jsr $c9eb			jsr One_plus
.a990	4c 44 a9	jmp $a944			jmp _search_loop
.a993					_letters_match:
.a993	e6 14		inc $14				inc tmp1
.a995	d0 02		bne $a999			bne +
.a997	e6 15		inc $15				inc tmp1+1
.a999					+
.a999	e6 16		inc $16				inc tmp2
.a99b	d0 02		bne $a99f			bne +
.a99d	e6 17		inc $17				inc tmp2+1
.a99f					+
.a99f	a5 18		lda $18				lda tmp3
.a9a1	d0 02		bne $a9a5			bne +
.a9a3	c6 19		dec $19				dec tmp3+1
.a9a5					+
.a9a5	c6 18		dec $18				dec tmp3
.a9a7	a5 18		lda $18				lda tmp3
.a9a9	05 19		ora $19				ora tmp3+1
.a9ab	d0 d8		bne $a985			bne _comparison_loop ; Check the next letter
.a9ad	18		clc				clc
.a9ae	b5 24		lda $24,x			lda DStack+0,x
.a9b0	75 2c		adc $2c,x			adc DStack+8,x
.a9b2	95 2c		sta $2c,x			sta DStack+8,x
.a9b4	b5 25		lda $25,x			lda DStack+1,x
.a9b6	75 2d		adc $2d,x			adc DStack+9,x
.a9b8	95 2d		sta $2d,x			sta DStack+9,x
.a9ba	38		sec				sec
.a9bb	b5 2a		lda $2a,x			lda DStack+6,x
.a9bd	f5 24		sbc $24,x			sbc DStack+0,x
.a9bf	95 2a		sta $2a,x			sta DStack+6,x
.a9c1	b5 2b		lda $2b,x			lda DStack+7,x
.a9c3	f5 25		sbc $25,x			sbc DStack+1,x
.a9c5	95 2b		sta $2b,x			sta DStack+7,x
.a9c7	e8		inx				inx		; drop offset
.a9c8	e8		inx				inx
.a9c9	e8		inx				inx		; drop u2
.a9ca	e8		inx				inx
.a9cb	a9 ff		lda #$ff			lda #$FF
.a9cd	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.a9cf	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-(WordListLink+wh_Xt)
=$a9d1					en = *	; remember here
>a92d	a2					.byte CL	;wh_CodeLength
.a9d1	60		rts				rts
>a9d2	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
>a9d8	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HNL
>a9d9	aa a8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>a9db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>a9dc	0c					.byte IM+NN	;wh_Flags	dictionary flags
=43352					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.a9dd					Marker:
.a9dd	20 b7 c9	jsr $c9b7			jsr Here		; Save original CP, which
.a9e0	20 e5 c0	jsr $c0e5			jsr Header_Build	; compile a word header, but don't link into wordlist
.a9e3	a0 a9		ldy #$a9			ldy #>_runtime		; compile JSR _runtime
.a9e5	a9 fd		lda #$fd			lda #<_runtime
.a9e7	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.a9ea	20 ab cc	jsr $ccab			jsr Comma		; Append original CP
.a9ed	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.a9ef	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.a9f2	20 94 cc	jsr $cc94			jsr C_Comma_A
.a9f5	c8		iny				iny
.a9f6	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.a9f8	90 f5		bcc $a9ef			bcc _loop
.a9fa	4c da c0	jmp $c0da			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-(WordListLink+wh_Xt)
=$a9fd					en = *	; remember here
>a9db	20					.byte CL	;wh_CodeLength
.a9fd					_runtime:
.a9fd	68		pla				pla		; Pop the RTS address off the stack
.a9fe	85 14		sta $14				sta tmp1+0
.aa00	68		pla				pla
.aa01	85 15		sta $15				sta tmp1+1
.aa03	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aa05	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aa07	85 00		sta $00				sta cp+0
.aa09	c8		iny				iny
.aa0a	b1 14		lda ($14),y			lda (tmp1),y
.aa0c	85 01		sta $01				sta cp+1
.aa0e	c8		iny				iny
.aa0f					_rloop:
.aa0f	b1 14		lda ($14),y			lda (tmp1),y
.aa11	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aa14	c8		iny				iny
.aa15	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aa17	90 f6		bcc $aa0f			bcc _rloop
.aa19	60		rts				rts
>aa1a	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>aa1f	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa20	58 a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa22	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa23	08					.byte NN	;wh_Flags	dictionary flags
=43423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa24					Words:
.aa24	a9 ff		lda #$ff			lda #$ff
.aa26	20 9b b7	jsr $b79b			jsr PushZA		; Alloc space for line size & wordlist #
.aa29	ca		dex				dex			; Alloc space for a nt
.aa2a	ca		dex				dex
.aa2b					_wordlist_next:
.aa2b	20 d7 aa	jsr $aad7			jsr CR			; start wordlist on new line
.aa2e	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aa30	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aa32	cc 2a 03	cpy $032a			cpy Num_OrderV
.aa35	b0 44		bcs $aa7b			bcs _wordslist_done	; ran out of search wordlist entries?
.aa37	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aa3a	0a		asl a				asl			; TOS= WORDLISTS[A]
.aa3b	a8		tay				tay
.aa3c	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aa3f	95 24		sta $24,x			sta DStack+0,x
.aa41	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aa44	95 25		sta $25,x			sta DStack+1,x
.aa46	f0 e3		beq $aa2b			beq _wordlist_next	; end of list?
.aa48					_word_loop:
.aa48	20 f5 ce	jsr $cef5			jsr Dup			; ( wordlist# nt nt )
.aa4b	20 a9 bd	jsr $bda9			jsr Name_To_String	; ( wordlist# nt addr u )
.aa4e	b5 2b		lda $2b,x			lda DStack+7,x
.aa50	38		sec				sec			; don't forget the space between words
.aa51	75 24		adc $24,x			adc DStack+0,x
.aa53	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aa55	90 05		bcc $aa5c			bcc +
.aa57	20 d7 aa	jsr $aad7			jsr CR
.aa5a	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.aa5c	95 2b		sta $2b,x	+		sta DStack+7,x
.aa5e	20 7d cd	jsr $cd7d			jsr Type		; ( wordlist# nt )
.aa61	20 70 cd	jsr $cd70			jsr Space
.aa64	b5 24		lda $24,x			lda DStack+0,x
.aa66	85 14		sta $14				sta tmp1+0
.aa68	b5 25		lda $25,x			lda DStack+1,x
.aa6a	85 15		sta $15				sta tmp1+1
.aa6c	a0 81		ldy #$81			ldy #wh_WordListLink	; get next word nt
.aa6e	b1 14		lda ($14),y			lda (tmp1),y
.aa70	95 24		sta $24,x			sta DStack+0,x
.aa72	c8		iny				iny
.aa73	b1 14		lda ($14),y			lda (tmp1),y
.aa75	95 25		sta $25,x			sta DStack+1,x
.aa77	d0 cf		bne $aa48			bne _word_loop		; end of list?
.aa79	f0 b0		beq $aa2b			beq _wordlist_next
.aa7b					_wordslist_done:
.aa7b	4c b6 c4	jmp $c4b6			jmp Two_Drop
=90					CL	.var *-(WordListLink+wh_Xt)
=$aa7e					en = *	; remember here
>aa22	5a					.byte CL	;wh_CodeLength
>aa7e	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
>aa86	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa87	9f a9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aa8a	08					.byte NN	;wh_Flags	dictionary flags
=43526					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aa8b	20 aa b3	jsr $b3aa	WordSize:	jsr PopTmp1
.aa8e	a0 83		ldy #$83			ldy #Wh_CodeLength
.aa90	b1 14		lda ($14),y			lda (tmp1),y
.aa92	4c 9b b7	jmp $b79b			jmp PushZA
=10					CL	.var *-(WordListLink+wh_Xt)
=$aa95					en = *	; remember here
>aa89	0a					.byte CL	;wh_CodeLength
>aa95	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
>aa9c	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aa9d	06 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aa9f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaa0	00					.byte 0	;wh_Flags	dictionary flags
=43548					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaa1					Aligned:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaa1					en = *	; remember here
>aa9f	00					.byte CL	;wh_CodeLength
.aaa1	60		rts				rts
>aaa2	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
>aaa7	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aaa8	1c aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aaaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaab	00					.byte 0	;wh_Flags	dictionary flags
=43559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaac					Align:
=0					CL	.var *-(WordListLink+wh_Xt)
=$aaac					en = *	; remember here
>aaaa	00					.byte CL	;wh_CodeLength
.aaac	60		rts				rts
>aaad	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
>aab3	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aab4	27 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aab6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aab7	08					.byte NN	;wh_Flags	dictionary flags
=43571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aab8					xt_output:
.aab8	a0 03		ldy #$03			ldy #>output
.aaba	a9 06		lda #$06			lda #<output
.aabc	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aabf					en = *	; remember here
>aab6	07					.byte CL	;wh_CodeLength
>aabf	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
>aac4	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aac5	33 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aac7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aac8	08					.byte NN	;wh_Flags	dictionary flags
=43588					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aac9	a0 03		ldy #$03	xt_input:	ldy #>input
.aacb	a9 08		lda #$08			lda #<input
.aacd	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$aad0					en = *	; remember here
>aac7	07					.byte CL	;wh_CodeLength
>aad0	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
>aad2	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aad3	44 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aad5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aad6	08					.byte NN	;wh_Flags	dictionary flags
=43602					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aad7					CR:
.aad7	a9 0d		lda #$0d			lda #AscCR
.aad9	20 63 cd	jsr $cd63			jsr Emit_A
.aadc	a9 0a		lda #$0a			lda #AscLF
.aade	20 63 cd	jsr $cd63			jsr Emit_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$aae1					en = *	; remember here
>aad5	0a					.byte CL	;wh_CodeLength
.aae1	60		rts				rts
>aae2	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
>aae6	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aae7	52 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aae9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aaea	08					.byte NN	;wh_Flags	dictionary flags
=43622					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aaeb	20 7a b8	jsr $b87a	Page:		jsr SLiteral_Runtime
.aaee	4c fb aa	jmp $aafb			  jmp +
>aaf1	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>aaf5	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.aafb	4c 7d cd	jmp $cd7d	+		jmp Type
=19					CL	.var *-(WordListLink+wh_Xt)
=$aafe					en = *	; remember here
>aae9	13					.byte CL	;wh_CodeLength
>aafe	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
>ab03	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab04	66 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab06	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab07	18					.byte UF+NN	;wh_Flags	dictionary flags
=43651					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab08					At_XY:
.ab08	20 de b3	jsr $b3de			jsr underflow_2
.ab0b	ad 00 03	lda $0300			lda base	; Save the BASE
.ab0e	48		pha				pha
.ab0f	20 58 b1	jsr $b158			jsr Decimal	; ANSI escape code values need to be in decimal.
.ab12	a9 1b		lda #$1b			lda #AscESC
.ab14	20 63 cd	jsr $cd63			jsr Emit_A
.ab17	a9 5b		lda #$5b			lda #'['
.ab19	20 63 cd	jsr $cd63			jsr Emit_A
.ab1c	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab1e	20 be cb	jsr $cbbe			jsr print_u
.ab21	a9 3b		lda #$3b			lda #';'
.ab23	20 63 cd	jsr $cd63			jsr Emit_A
.ab26	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.ab28	20 be cb	jsr $cbbe			jsr print_u
.ab2b	a9 48		lda #$48			lda #'H'
.ab2d	20 63 cd	jsr $cd63			jsr Emit_A
.ab30	68		pla				pla		; Restore the base
.ab31	8d 00 03	sta $0300			sta base
=44					CL	.var *-(WordListLink+wh_Xt)
=$ab34					en = *	; remember here
>ab06	2c					.byte CL	;wh_CodeLength
.ab34	60		rts				rts
>ab35	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
>ab38	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab39	83 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab3b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab3c	00					.byte 0	;wh_Flags	dictionary flags
=43704					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab3d	ca		dex		Pad:		dex		; push cp+PadOffset
.ab3e	ca		dex				dex
.ab3f	18		clc				clc
.ab40	a5 00		lda $00				lda cp+0
.ab42	69 54		adc #$54			adc #PadOffset
.ab44	95 24		sta $24,x			sta DStack+0,x
.ab46	a5 01		lda $01				lda cp+1
.ab48	69 00		adc #$00			adc #0
.ab4a	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$ab4c					en = *	; remember here
>ab3b	0f					.byte CL	;wh_CodeLength
.ab4c	60		rts				rts
>ab4d	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
>ab4f	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab50	b8 aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab52	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab53	00					.byte 0	;wh_Flags	dictionary flags
=43727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab54					Less_Number_Sign:
.ab54	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.ab56	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-(WordListLink+wh_Xt)
=$ab59					en = *	; remember here
>ab52	05					.byte CL	;wh_CodeLength
.ab59	60		rts				rts
>ab5a	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
>ab5c	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab5d	cf aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab5f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab60	10					.byte UF	;wh_Flags	dictionary flags
=43740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab61					Number_Sign_Greater:
.ab61	20 de b3	jsr $b3de			jsr underflow_2		; double number
.ab64	18		clc				clc			; addr= cp + ToHold
.ab65	a5 00		lda $00				lda cp+0
.ab67	6d 34 03	adc $0334			adc ToHold
.ab6a	95 26		sta $26,x			sta DStack+2,x
.ab6c	a5 01		lda $01				lda cp+1
.ab6e	69 00		adc #$00			adc #0
.ab70	95 27		sta $27,x			sta DStack+3,x
.ab72	38		sec				sec			; u= PadOffset - ToHold
.ab73	a9 54		lda #$54			lda #PadOffset
.ab75	ed 34 03	sbc $0334			sbc ToHold
.ab78	95 24		sta $24,x			sta DStack+0,x
.ab7a	a9 00		lda #$00			lda #0
.ab7c	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-(WordListLink+wh_Xt)
=$ab7e					en = *	; remember here
>ab5f	1d					.byte CL	;wh_CodeLength
.ab7e	60		rts				rts
>ab7f	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
>ab83	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab84	dc aa					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab86	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab87	00					.byte 0	;wh_Flags	dictionary flags
=43779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab88	20 83 b3	jsr $b383	Hold:		jsr PopA
.ab8b	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ab8e	ac 34 03	ldy $0334			ldy ToHold
.ab91	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$ab93					en = *	; remember here
>ab86	0b					.byte CL	;wh_CodeLength
.ab93	60		rts				rts
>ab94	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
>ab95	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ab96	03 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ab98	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ab99	18					.byte UF+NN	;wh_Flags	dictionary flags
=43797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ab9a					Number_Sign:
.ab9a	20 de b3	jsr $b3de			jsr underflow_2		; double number
.ab9d	a9 00		lda #$00			lda #0			;   init remainder
.ab9f	18		clc				clc
.aba0	a0 21		ldy #$21			ldy #32+1		;   for each bit
.aba2					_11:
.aba2	2a		rol a				rol a			;   shift remainder
.aba3	cd 00 03	cmp $0300			cmp base		;   will it fit?
.aba6	90 03		bcc $abab			bcc _27
.aba8	ed 00 03	sbc $0300			sbc base
.abab					_27:
.abab	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.abad	36 27		rol $27,x			rol DStack+3,x
.abaf	36 24		rol $24,x			rol DStack+0,x
.abb1	36 25		rol $25,x			rol DStack+1,x
.abb3	88		dey				dey
.abb4	d0 ec		bne $aba2			bne _11
.abb6	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.abb8	90 02		bcc $abbc			bcc +
.abba	69 06		adc #$06			adc #7-1
.abbc	69 30		adc #$30	+		adc #'0'
.abbe	d0 cb		bne $ab8b			bne Hold_A
=38					CL	.var *-(WordListLink+wh_Xt)
=$abc0					en = *	; remember here
>ab98	26					.byte CL	;wh_CodeLength
>abc0	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
>abc2	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abc3	15 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abc5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abc6	10					.byte UF	;wh_Flags	dictionary flags
=43842					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abc7					Number_Sign_S:
.abc7					_loop:
.abc7	20 9a ab	jsr $ab9a			jsr Number_sign	; convert a single number ("#")
.abca	b5 24		lda $24,x			lda DStack+0,x	; stop when double-celled number in TOS is zero
.abcc	15 25		ora $25,x			ora DStack+1,x
.abce	15 26		ora $26,x			ora DStack+2,x
.abd0	15 27		ora $27,x			ora DStack+3,x
.abd2	d0 f3		bne $abc7			bne _loop
=13					CL	.var *-(WordListLink+wh_Xt)
=$abd4					en = *	; remember here
>abc5	0d					.byte CL	;wh_CodeLength
.abd4	60		rts				rts
>abd5	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
>abd9	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abda	42 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abdc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abdd	08					.byte NN	;wh_Flags	dictionary flags
=43865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abde	20 9f b3	jsr $b39f	Sign:		jsr PopYA
.abe1	98		tya				tya		; test MSB of TOS
.abe2					Sign_P:
.abe2	30 01		bmi $abe5			bmi _minus
.abe4	60		rts				rts
.abe5	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.abe7	d0 a2		bne $ab8b			bne hold_a
=11					CL	.var *-(WordListLink+wh_Xt)
=$abe9					en = *	; remember here
>abdc	0b					.byte CL	;wh_CodeLength
>abe9	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
>abef	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>abf0	59 ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>abf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>abf3	18					.byte UF+NN	;wh_Flags	dictionary flags
=43887					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.abf4					Cleave:
.abf4	20 de b3	jsr $b3de			jsr underflow_2
.abf7	20 63 c4	jsr $c463			jsr Minus_leading	; -LEADING ( addr u )
.abfa	20 a8 c3	jsr $c3a8			jsr Input_To_R	; save old imput state
.abfd	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.abff	85 06		sta $06				sta ciblen
.ac01	b5 25		lda $25,x			lda DStack+1,x
.ac03	85 07		sta $07				sta ciblen+1
.ac05	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac07	85 04		sta $04				sta cib
.ac09	b5 27		lda $27,x			lda DStack+3,x
.ac0b	85 05		sta $05				sta cib+1
.ac0d	a9 00		lda #$00			lda #0
.ac0f	85 08		sta $08				sta toin	; >IN pointer is zero
.ac11	85 09		sta $09				sta toin+1
.ac13	20 4a ba	jsr $ba4a			jsr parse_name	; ( addr u addr-s u-s )
.ac16	b5 24		lda $24,x			lda DStack+0,x
.ac18	15 25		ora $25,x			ora DStack+1,x
.ac1a	f0 23		beq $ac3f			beq _done
.ac1c	38		sec				sec
.ac1d	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.ac1f	f5 24		sbc $24,x			sbc DStack+0,x
.ac21	95 28		sta $28,x			sta DStack+4,x
.ac23	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.ac25	f5 25		sbc $25,x			sbc DStack+1,x
.ac27	95 29		sta $29,x			sta DStack+5,x
.ac29	18		clc				clc
.ac2a	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.ac2c	75 24		adc $24,x			adc DStack+0,x
.ac2e	95 2a		sta $2a,x			sta DStack+6,x
.ac30	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.ac32	75 25		adc $25,x			adc DStack+1,x
.ac34	95 2b		sta $2b,x			sta DStack+7,x
.ac36	20 c8 c4	jsr $c4c8			jsr Two_swap		; ( addr-s u-s addr u )
.ac39	20 63 c4	jsr $c463			jsr Minus_leading
.ac3c	20 c8 c4	jsr $c4c8			jsr Two_swap		; ( addr u addr-s u-s )
.ac3f					_done:
.ac3f	20 ca c3	jsr $c3ca			jsr R_To_Input
=78					CL	.var *-(WordListLink+wh_Xt)
=$ac42					en = *	; remember here
>abf2	4e					.byte CL	;wh_CodeLength
.ac42	60		rts				rts
>ac43	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
>ac4b	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ac4c	6f ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ac4e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ac4f	18					.byte UF+NN	;wh_Flags	dictionary flags
=43979					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ac50					Hexstore:
.ac50	20 e3 b3	jsr $b3e3			jsr underflow_3
.ac53	20 f5 ce	jsr $cef5			jsr Dup		; Save copy of original address
.ac56	20 c9 c5	jsr $c5c9			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac59					_loop:
.ac59	b5 24		lda $24,x			lda DStack+0,x
.ac5b	15 25		ora $25,x			ora DStack+1,x
.ac5d	f0 37		beq $ac96			beq _done
.ac5f	20 f4 ab	jsr $abf4			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.ac62	20 c9 c5	jsr $c5c9			jsr Two_to_r
.ac65	20 aa b7	jsr $b7aa			jsr Zero
.ac68	20 aa b7	jsr $b7aa			jsr Zero
.ac6b	20 a4 c5	jsr $c5a4			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ac6e	20 d9 af	jsr $afd9			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ac71	b5 24		lda $24,x			lda DStack+0,x
.ac73	15 25		ora $25,x			ora DStack+1,x
.ac75	d0 18		bne $ac8f			bne _have_chars_left
.ac77	20 b6 c4	jsr $c4b6			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ac7a	20 e3 bf	jsr $bfe3			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ac7d	20 b5 ce	jsr $ceb5			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ac80	20 0b cd	jsr $cd0b			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ac83	20 99 ce	jsr $ce99			jsr R_From		; R>
.ac86	20 eb c9	jsr $c9eb			jsr One_plus		; 1+
.ac89	20 7a ce	jsr $ce7a			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ac8c	4c 59 ac	jmp $ac59			jmp _loop
.ac8f					_have_chars_left:
.ac8f	8a		txa				txa
.ac90	18		clc				clc
.ac91	69 08		adc #$08			adc #8
.ac93	aa		tax				tax
.ac94	d0 c3		bne $ac59			bne _loop
.ac96					_done:
.ac96	e8		inx				inx
.ac97	e8		inx				inx
.ac98	e8		inx				inx
.ac99	e8		inx				inx			; 2DROP
.ac9a	20 a4 c5	jsr $c5a4			jsr Two_r_from		; ( addr2+n addr2 )
.ac9d	20 13 cf	jsr $cf13			jsr Swap
.aca0	4c 58 cb	jmp $cb58			jmp Minus		; ( n )
=83					CL	.var *-(WordListLink+wh_Xt)
=$aca3					en = *	; remember here
>ac4e	53					.byte CL	;wh_CodeLength
>aca3	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
>aca9	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acaa	cb ab					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acad	18					.byte UF+NN	;wh_Flags	dictionary flags
=44073					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acae					Within:
.acae	20 e3 b3	jsr $b3e3			jsr underflow_3
.acb1	20 cc ce	jsr $cecc			jsr Over
.acb4	20 58 cb	jsr $cb58			jsr Minus
.acb7	20 7a ce	jsr $ce7a			jsr To_R
.acba	20 58 cb	jsr $cb58			jsr Minus
.acbd	20 99 ce	jsr $ce99			jsr R_From
.acc0	4c 0d c8	jmp $c80d			jmp U_Less_Than
=21					CL	.var *-(WordListLink+wh_Xt)
=$acc3					en = *	; remember here
>acac	15					.byte CL	;wh_CodeLength
>acc3	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
>acc4	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acc5	29 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acc7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acc8	0c					.byte IM+NN	;wh_Flags	dictionary flags
=44100					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acc9					Backslash:
.acc9	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.accc	0d 0d 03	ora $030d			ora BlkV+1
.accf	f0 16		beq $ace7			beq _not_block
.acd1	a5 08		lda $08				lda toin+0
.acd3	29 3f		and #$3f			and #$3F
.acd5	c9 02		cmp #$02			cmp #2
.acd7	90 16		bcc $acef			bcc _rts
.acd9	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.acdb	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.acdd	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.acde	69 40		adc #$40	                adc #$40
.ace0	85 08		sta $08		                sta toin+0
.ace2	90 0b		bcc $acef	                bcc _rts
.ace4	e6 09		inc $09		                inc toin+1
.ace6	60		rts				rts
.ace7					_not_block:
.ace7	a5 06		lda $06		                lda ciblen+0
.ace9	85 08		sta $08		                sta toin+0
.aceb	a5 07		lda $07		                lda ciblen+1
.aced	85 09		sta $09		                sta toin+1
=38					CL	.var *-(WordListLink+wh_Xt)
=$acef					en = *	; remember here
>acc7	26					.byte CL	;wh_CodeLength
.acef	60		rts		_rts:		rts
>acf0	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
>acf4	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HNL
>acf5	44 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>acf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>acf8	18					.byte NN+UF	;wh_Flags	dictionary flags
=44148					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.acf9					Move:
.acf9	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.acfb	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.acfd	d0 04		bne $ad03			bne _ne
.acff	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad01	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad03	90 5a		bcc $ad5f	_ne:		bcc CMove
.ad05	d0 11		bne $ad18			bne CMove_up
.ad07	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad08	18		clc				clc
.ad09	69 06		adc #$06			adc #6
.ad0b	aa		tax				tax
=19					CL	.var *-(WordListLink+wh_Xt)
=$ad0c					en = *	; remember here
>acf7	13					.byte CL	;wh_CodeLength
.ad0c	60		rts				rts
>ad0d	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
>ad13	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad14	74 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad16	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad17	18					.byte UF+NN	;wh_Flags	dictionary flags
=44179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad18					CMove_up:
.ad18	20 e3 b3	jsr $b3e3			jsr underflow_3
.ad1b	b5 26		lda $26,x			lda DStack+2,x
.ad1d	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad1f	b5 27		lda $27,x			lda DStack+3,x
.ad21	18		clc				clc
.ad22	75 25		adc $25,x			adc DStack+1,x
.ad24	85 17		sta $17				sta tmp2+1	; point to last page of destination
.ad26	b5 28		lda $28,x			lda DStack+4,x
.ad28	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad2a	b5 29		lda $29,x			lda DStack+5,x
.ad2c	18		clc				clc
.ad2d	75 25		adc $25,x			adc DStack+1,x
.ad2f	85 15		sta $15				sta tmp1+1	; point to last page of source
.ad31	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.ad33	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.ad35	f0 10		beq $ad47			beq _nopartial
.ad37					_outerloop:
.ad37	88		dey				dey
.ad38	f0 07		beq $ad41			beq _finishpage
.ad3a					_innerloop:
.ad3a	b1 14		lda ($14),y			lda (tmp1),y
.ad3c	91 16		sta ($16),y			sta (tmp2),y
.ad3e	88		dey				dey
.ad3f	d0 f9		bne $ad3a			bne _innerloop
.ad41					_finishpage:
.ad41	a0 00		ldy #$00			ldy #0
.ad43	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.ad45	91 16		sta ($16),y			sta (tmp2),y
.ad47					_nopartial:
.ad47	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.ad49	c6 17		dec $17				dec tmp2+1
.ad4b	d6 25		dec $25,x			dec DStack+1,x
.ad4d	d0 e8		bne $ad37			bne _outerloop
.ad4f					_done:
.ad4f	4c 07 ad	jmp $ad07			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-(WordListLink+wh_Xt)
=$ad52					en = *	; remember here
>ad16	3a					.byte CL	;wh_CodeLength
.ad52	4c ed b3	jmp $b3ed	Throw_Stack_14: jmp Throw_Stack
>ad55	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
>ad5a	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad5b	93 ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad5e	18					.byte UF+NN	;wh_Flags	dictionary flags
=44250					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad5f					CMove:
.ad5f	20 e3 b3	jsr $b3e3			jsr underflow_3
.ad62	b5 26		lda $26,x			lda DStack+2,x
.ad64	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ad66	b5 27		lda $27,x			lda DStack+3,x
.ad68	85 17		sta $17				sta tmp2+1
.ad6a	b5 28		lda $28,x			lda DStack+4,x
.ad6c	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.ad6e	b5 29		lda $29,x			lda DStack+5,x
.ad70	85 15		sta $15				sta tmp1+1
.ad72	a0 00		ldy #$00			ldy #0
.ad74	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ad76	f0 0f		beq $ad87			beq _dopartial
.ad78					_page:
.ad78	b1 14		lda ($14),y			lda (tmp1),y
.ad7a	91 16		sta ($16),y			sta (tmp2),y
.ad7c	c8		iny				iny
.ad7d	d0 f9		bne $ad78			bne _page
.ad7f	e6 15		inc $15				inc tmp1+1
.ad81	e6 17		inc $17				inc tmp2+1
.ad83	d6 25		dec $25,x			dec DStack+1,x
.ad85	d0 f1		bne $ad78			bne _page
.ad87					_dopartial:
.ad87	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ad89	f0 09		beq $ad94			beq _done
.ad8b					_partial:
.ad8b	b1 14		lda ($14),y			lda (tmp1),y
.ad8d	91 16		sta ($16),y			sta (tmp2),y
.ad8f	c8		iny				iny
.ad90	d6 24		dec $24,x			dec DStack+0,x
.ad92	d0 f7		bne $ad8b			bne _partial
.ad94	4c 07 ad	jmp $ad07	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-(WordListLink+wh_Xt)
=$ad97					en = *	; remember here
>ad5d	38					.byte CL	;wh_CodeLength
>ad97	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
>ad9a	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ad9b	da ac					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ad9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ad9e	08					.byte NN	;wh_Flags	dictionary flags
=44314					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ad9f					UM_Star:
.ad9f	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ada1	b0 af		bcs $ad52		bcs Throw_Stack_14
.ada3	18		clc				clc		; tmp2= divsor-1
.ada4	b5 24		lda $24,x			lda DStack+0,x
.ada6	e9 00		sbc #$00			sbc #0
.ada8	85 16		sta $16				sta tmp2+0
.adaa	b5 25		lda $25,x			lda DStack+1,x
.adac	e9 00		sbc #$00			sbc #0
.adae	85 17		sta $17				sta tmp2+1
.adb0	90 2e		bcc $ade0			bcc _zero	; is divisor zero?
.adb2	a9 00		lda #$00			lda #0
.adb4	85 14		sta $14				sta tmp1
.adb6	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.adb8	ca		dex				dex
.adb9	ca		dex				dex
.adba					_outer_loop:
.adba	a0 08		ldy #$08			ldy #8		; counter inner loop
.adbc	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.adbe					_inner_loop:
.adbe	90 0c		bcc $adcc			bcc _no_add
.adc0	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.adc2	a5 14		lda $14				lda tmp1
.adc4	65 16		adc $16				adc tmp2
.adc6	85 14		sta $14				sta tmp1
.adc8	a5 15		lda $15				lda tmp1+1
.adca	65 17		adc $17				adc tmp2+1
.adcc					_no_add:
.adcc	6a		ror a				ror
.adcd	66 14		ror $14				ror tmp1
.adcf	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.add1	88		dey				dey
.add2	d0 ea		bne $adbe			bne _inner_loop ; go back for one more shift?
.add4	e8		inx				inx
.add5	e4 18		cpx $18				cpx tmp3
.add7	d0 e1		bne $adba			bne _outer_loop ; go back for eight more shifts?
.add9	95 25		sta $25,x			sta DStack+1,x
.addb	a5 14		lda $14				lda tmp1
.addd	95 24		sta $24,x			sta DStack+0,x
.addf	60		rts				rts
.ade0	a9 00		lda #$00	_zero:		lda #0
.ade2	95 26		sta $26,x			sta DStack+2,x
.ade4	95 27		sta $27,x			sta DStack+3,x
.ade6	60		rts				rts
=72					CL	.var *-(WordListLink+wh_Xt)
=$ade7					en = *	; remember here
>ad9d	48					.byte CL	;wh_CodeLength
>ade7	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
>ade9	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>adea	1a ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>adec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aded	08					.byte NN	;wh_Flags	dictionary flags
=44393					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.adee					M_Star:
.adee	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.adf0	b0 6d		bcs $ae5f		bcs Throw_Stack_15
.adf2	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.adf4	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.adf6	08		php				php
.adf7	20 28 c6	jsr $c628			jsr Abs
.adfa	20 13 cf	jsr $cf13			jsr Swap
.adfd	20 28 c6	jsr $c628			jsr Abs
.ae00	20 9f ad	jsr $ad9f			jsr UM_Star		; ( d )
.ae03	28		plp				plp			; handle the sign
.ae04	10 03		bpl $ae09			bpl +
.ae06	4c 40 c6	jmp $c640			jmp DNegate
.ae09					+
=27					CL	.var *-(WordListLink+wh_Xt)
=$ae09					en = *	; remember here
>adec	1b					.byte CL	;wh_CodeLength
.ae09	60		rts				rts
>ae0a	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
>ae0b	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae0c	69 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae0e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae0f	00					.byte 0	;wh_Flags	dictionary flags
=44427					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae10					Star:
.ae10	20 9f ad	jsr $ad9f			jsr UM_Star
.ae13	e8		inx				inx		; UD>U	drop hi cell
.ae14	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$ae15					en = *	; remember here
>ae0e	05					.byte CL	;wh_CodeLength
.ae15	60		rts				rts
>ae16	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae1c	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae1d	8b ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae20	08					.byte NN	;wh_Flags	dictionary flags
=44444					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae21					UM_Slash_Mod:
.ae21	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae23	b0 3a		bcs $ae5f		bcs Throw_Stack_15
.ae25	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.ae27	15 25		ora $25,x			ora DStack+1,x
.ae29	f0 2f		beq $ae5a			beq _DivByZero
.ae2b	a0 10		ldy #$10			ldy #16			; for 16 bits
.ae2d					_loop:
.ae2d	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.ae2f	36 29		rol $29,x			rol DStack+5,x
.ae31	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.ae33	36 27		rol $27,x			rol DStack+3,x
.ae35	b0 0a		bcs $ae41			bcs _subtract		;   overflow?
.ae37	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.ae39	d5 24		cmp $24,x			cmp DStack+0,x
.ae3b	b5 27		lda $27,x			lda DStack+3,x
.ae3d	f5 25		sbc $25,x			sbc DStack+1,x
.ae3f	90 0d		bcc $ae4e			bcc _next
.ae41	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.ae43	f5 24		sbc $24,x			sbc DStack+0,x
.ae45	95 26		sta $26,x			sta DStack+2,x
.ae47	b5 27		lda $27,x			lda DStack+3,x
.ae49	f5 25		sbc $25,x			sbc DStack+1,x
.ae4b	95 27		sta $27,x			sta DStack+3,x
.ae4d	38		sec				sec			;   it always fits
.ae4e	88		dey		_next:		dey			;  next
.ae4f	d0 dc		bne $ae2d			bne _loop
.ae51	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.ae53	36 29		rol $29,x			rol DStack+5,x
.ae55	e8		inx				inx			; drop divisor
.ae56	e8		inx				inx
.ae57	4c 13 cf	jmp $cf13			jmp Swap
.ae5a	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.ae5c	4c 28 b4	jmp $b428			jmp ThrowA
=62					CL	.var *-(WordListLink+wh_Xt)
=$ae5f					en = *	; remember here
>ae1f	3e					.byte CL	;wh_CodeLength
.ae5f	4c ed b3	jmp $b3ed	Throw_Stack_15: jmp Throw_Stack
>ae62	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
>ae68	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae69	9c ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae6b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae6c	08					.byte NN	;wh_Flags	dictionary flags
=44520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ae6d					SM_Slash_Rem:
.ae6d	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ae6f	b0 ee		bcs $ae5f		bcs Throw_Stack_15
.ae71	b5 27		lda $27,x			lda DStack+3,x
.ae73	08		php				php
.ae74	55 25		eor $25,x			eor DStack+1,x
.ae76	08		php				php
.ae77	20 28 c6	jsr $c628			jsr Abs
.ae7a	e8		inx				inx		; pretend we pushed n1 to R
.ae7b	e8		inx				inx
.ae7c	20 5d c6	jsr $c65d			jsr DAbs
.ae7f	ca		dex				dex
.ae80	ca		dex				dex
.ae81	20 21 ae	jsr $ae21			jsr UM_Slash_Mod	; UM/MOD
.ae84	28		plp				plp
.ae85	10 03		bpl $ae8a			bpl +
.ae87	20 0f c6	jsr $c60f			jsr Negate
.ae8a					+
.ae8a	28		plp				plp
.ae8b	10 07		bpl $ae94			bpl _done
.ae8d	e8		inx				inx		; pretend we pushed quotient to R
.ae8e	e8		inx				inx
.ae8f	20 0f c6	jsr $c60f			jsr Negate
.ae92	ca		dex				dex
.ae93	ca		dex				dex
.ae94					_done:
=39					CL	.var *-(WordListLink+wh_Xt)
=$ae94					en = *	; remember here
>ae6b	27					.byte CL	;wh_CodeLength
.ae94	60		rts				rts
>ae95	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
>ae9b	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ae9c	e8 ad					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ae9e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ae9f	08					.byte NN	;wh_Flags	dictionary flags
=44571					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aea0					FM_Slash_Mod:
.aea0	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aea2	b0 bb		bcs $ae5f		bcs Throw_Stack_15
.aea4	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aea6	08		php				php		;  save sign
.aea7	10 0a		bpl $aeb3			bpl +
.aea9	20 0f c6	jsr $c60f			jsr Negate	; NEGATE
.aeac	e8		inx				inx
.aead	e8		inx				inx
.aeae	20 40 c6	jsr $c640			jsr DNegate	; DNEGATE
.aeb1	ca		dex				dex
.aeb2	ca		dex				dex
.aeb3					+
.aeb3	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.aeb5	10 0d		bpl $aec4			bpl +
.aeb7	18		clc				clc
.aeb8	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.aeba	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.aebc	95 26		sta $26,x			sta DStack+2,x
.aebe	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.aec0	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.aec2	95 27		sta $27,x			sta DStack+3,x
.aec4					+
.aec4	20 21 ae	jsr $ae21			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.aec7	28		plp				plp
.aec8	10 07		bpl $aed1			bpl +
.aeca	e8		inx				inx		; pretend that we SWAP
.aecb	e8		inx				inx
.aecc	20 0f c6	jsr $c60f			jsr Negate
.aecf	ca		dex				dex
.aed0	ca		dex				dex
.aed1					+
=49					CL	.var *-(WordListLink+wh_Xt)
=$aed1					en = *	; remember here
>ae9e	31					.byte CL	;wh_CodeLength
.aed1	60		rts				rts
>aed2	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
>aed6	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aed7	1b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aed9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeda	08					.byte NN	;wh_Flags	dictionary flags
=44630					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aedb	20 f5 ce	jsr $cef5	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.aede	a0 00		ldy #$00			ldy #0			; sign extend n1
.aee0	b5 29		lda $29,x			lda DStack+5,x
.aee2	10 01		bpl $aee5			bpl +
.aee4	88		dey				dey
.aee5	94 26		sty $26,x	+		sty DStack+2,x
.aee7	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.aee9	4c 6d ae	jmp $ae6d			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-(WordListLink+wh_Xt)
=$aeec					en = *	; remember here
>aed9	11					.byte CL	;wh_CodeLength
>aeec	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
>aeed	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aeee	56 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aef0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aef1	08					.byte NN	;wh_Flags	dictionary flags
=44653					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.aef2	20 db ae	jsr $aedb	Slash:		jsr Slash_Mod
.aef5	4c 10 c9	jmp $c910			jmp Nip		; Nip remainder
=6					CL	.var *-(WordListLink+wh_Xt)
=$aef8					en = *	; remember here
>aef0	06					.byte CL	;wh_CodeLength
>aef8	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
>aefb	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>aefc	6d ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>aefe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>aeff	00					.byte 0	;wh_Flags	dictionary flags
=44667					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af00	20 db ae	jsr $aedb	Mod:		jsr Slash_Mod
.af03	e8		inx				inx		; Drop quotient
.af04	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$af05					en = *	; remember here
>aefe	05					.byte CL	;wh_CodeLength
.af05	60		rts				rts
>af06	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
>af0b	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af0c	7b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af0e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af0f	18					.byte UF+NN	;wh_Flags	dictionary flags
=44683					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af10					Star_Slash_Mod:
.af10	20 e3 b3	jsr $b3e3			jsr underflow_3
.af13	20 7a ce	jsr $ce7a			jsr To_R
.af16	20 ee ad	jsr $adee			jsr M_Star
.af19	20 99 ce	jsr $ce99			jsr R_From
.af1c	4c 6d ae	jmp $ae6d			jmp SM_Slash_Rem
=15					CL	.var *-(WordListLink+wh_Xt)
=$af1f					en = *	; remember here
>af0e	0f					.byte CL	;wh_CodeLength
>af1f	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
>af21	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af22	8b ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af24	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af25	08					.byte NN	;wh_Flags	dictionary flags
=44705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af26					Star_Slash:
.af26	20 10 af	jsr $af10			jsr Star_Slash_Mod
.af29	4c 10 c9	jmp $c910			jmp Nip			; mod
=6					CL	.var *-(WordListLink+wh_Xt)
=$af2c					en = *	; remember here
>af24	06					.byte CL	;wh_CodeLength
>af2c	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
>af2f	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af30	a1 ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af33	08					.byte NN	;wh_Flags	dictionary flags
=44719					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af34					m_star_slash:
.af34	20 e8 b3	jsr $b3e8	                jsr underflow_4
.af37	b5 24		lda $24,x			lda DStack+0,x		; calc result sign
.af39	55 26		eor $26,x			eor DStack+2,x
.af3b	55 28		eor $28,x			eor DStack+4,x
.af3d	08		php				php
.af3e	20 28 c6	jsr $c628	                jsr Abs			; Abs
.af41	20 7a ce	jsr $ce7a	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.af44	20 28 c6	jsr $c628	                jsr Abs			; Abs
.af47	20 7a ce	jsr $ce7a	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.af4a	20 5d c6	jsr $c65d	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.af4d	20 13 cf	jsr $cf13	                jsr Swap		; Swap
.af50	20 b5 ce	jsr $ceb5	                jsr R_Fetch		; R@
.af53	20 9f ad	jsr $ad9f	                jsr UM_Star		; UM*
.af56	20 f9 cd	jsr $cdf9	                jsr Rot			; Rot
.af59	20 99 ce	jsr $ce99	                jsr R_From		; R>
.af5c	20 9f ad	jsr $ad9f	                jsr UM_Star		; UM*
.af5f	20 f9 cd	jsr $cdf9	                jsr Rot			; Rot
.af62	20 04 ca	jsr $ca04	                jsr UMPlus		; 0 D+
.af65	20 b5 ce	jsr $ceb5	                jsr R_Fetch		; R@
.af68	20 21 ae	jsr $ae21	                jsr UM_Slash_Mod	; UM/Mod
.af6b	20 1f ce	jsr $ce1f	                jsr Not_Rot		; Rot Rot
.af6e	20 99 ce	jsr $ce99	                jsr R_From		; R>
.af71	20 21 ae	jsr $ae21	                jsr UM_Slash_Mod	; UM/Mod
.af74	20 10 c9	jsr $c910	                jsr Nip			; Swap Drop
.af77	20 13 cf	jsr $cf13	                jsr Swap		; Swap
.af7a	28		plp				plp
.af7b	10 03		bpl $af80			bpl _rts		; ... 0< if ...
.af7d	4c 40 c6	jmp $c640	                jmp DNegate
.af80	60		rts		_rts:		rts
=77					CL	.var *-(WordListLink+wh_Xt)
=$af81					en = *	; remember here
>af32	4d					.byte CL	;wh_CodeLength
>af81	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
>af89	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>af8a	af ae					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>af8c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>af8d	08					.byte NN	;wh_Flags	dictionary flags
=44809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.af8e					Evaluate:
.af8e	18		clc				clc			; signal to zero BLK.
.af8f					load_evaluate:
.af8f	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.af92	48		pha				pha
.af93	ad 0c 03	lda $030c			lda BlkV+0
.af96	48		pha				pha
.af97	b0 08		bcs $afa1			bcs +		; See if we should zero BLK.
.af99	a9 00		lda #$00			lda #0		; Set BLK to zero.
.af9b	8d 0c 03	sta $030c			sta BlkV+0
.af9e	8d 0d 03	sta $030d			sta BlkV+1
.afa1					+
.afa1	20 a8 c3	jsr $c3a8			jsr Input_To_R	; Save the input state to the Return Stack
.afa4	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.afa6	85 02		sta $02				sta insrc+0
.afa8	85 03		sta $03				sta insrc+1
.afaa	a9 00		lda #$00			lda #0		; >IN= zero
.afac	85 08		sta $08				sta toin+0
.afae	85 09		sta $09				sta toin+1
.afb0	20 9f b3	jsr $b39f			jsr PopYA	; ciblen= string length (u)
.afb3	85 06		sta $06				sta ciblen+0
.afb5	84 07		sty $07				sty ciblen+1
.afb7	20 9f b3	jsr $b39f			jsr PopYA	; cib= string addr
.afba	85 04		sta $04				sta cib+0
.afbc	84 05		sty $05				sty cib+1
.afbe	20 e2 b4	jsr $b4e2			jsr interpret	; ( -- )
.afc1	20 ca c3	jsr $c3ca			jsr R_To_Input	; restore input state
.afc4	68		pla				pla		; Restore BLK from the return stack.
.afc5	8d 0c 03	sta $030c			sta BlkV+0
.afc8	68		pla				pla
.afc9	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-(WordListLink+wh_Xt)
=$afcc					en = *	; remember here
>af8c	3e					.byte CL	;wh_CodeLength
.afcc	60		rts				rts
>afcd	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
>afd4	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>afd5	09 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>afd7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>afd8	18					.byte UF+NN	;wh_Flags	dictionary flags
=44884					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.afd9					To_Number:
.afd9	20 e8 b3	jsr $b3e8			jsr underflow_4
.afdc	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.afde	f0 72		beq $b052			beq _done
.afe0					_Char_loop:
.afe0	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.afe2	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.afe4	90 6c		bcc $b052			bcc _done
.afe6	c9 3a		cmp #$3a			cmp #'9'+1
.afe8	90 08		bcc $aff2			bcc _digit
.afea	29 df		and #$df			and #$df		;   ASCII uppercase
.afec	c9 41		cmp #$41			cmp #'A'
.afee	90 62		bcc $b052			bcc _done
.aff0	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.aff2	38		sec		_digit:		sec
.aff3	e9 30		sbc #$30			sbc #'0'
.aff5	cd 00 03	cmp $0300			cmp base		; must be < base
.aff8	b0 58		bcs $b052			bcs _done
.affa	48		pha				pha			; Save char value
.affb	20 ea c4	jsr $c4ea			jsr Two_Over		;   copy ud to work (multiplicand)
.affe	a9 00		lda #$00			lda #0			;   zero ud (product)
.b000	95 2c		sta $2c,x			sta DStack+8,x
.b002	95 2d		sta $2d,x			sta DStack+9,x
.b004	95 2e		sta $2e,x			sta DStack+10,x
.b006	95 2f		sta $2f,x			sta DStack+11,x
.b008	ad 00 03	lda $0300			lda base		;   get multiplier
.b00b	d0 23		bne $b030			bne _Mul_Test
.b00d	48		pha		_Mul_Add:	pha			;   save multiplier
.b00e	18		clc				clc			;   ud += work
.b00f	b5 26		lda $26,x			lda DStack+2,x
.b011	75 2e		adc $2e,x			adc DStack+10,x
.b013	95 2e		sta $2e,x			sta DStack+10,x
.b015	b5 27		lda $27,x			lda DStack+3,x
.b017	75 2f		adc $2f,x			adc DStack+11,x
.b019	95 2f		sta $2f,x			sta DStack+11,x
.b01b	b5 24		lda $24,x			lda DStack+0,x
.b01d	75 2c		adc $2c,x			adc DStack+8,x
.b01f	95 2c		sta $2c,x			sta DStack+8,x
.b021	b5 25		lda $25,x			lda DStack+1,x
.b023	75 2d		adc $2d,x			adc DStack+9,x
.b025	95 2d		sta $2d,x			sta DStack+9,x
.b027	68		pla				pla			;   restore multiplier
.b028	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b02a	36 27		rol $27,x			rol DStack+3,x
.b02c	36 24		rol $24,x			rol DStack+0,x
.b02e	36 25		rol $25,x			rol DStack+1,x
.b030	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b031	b0 da		bcs $b00d			bcs _Mul_Add
.b033	d0 f3		bne $b028			bne _Mul_Shift
.b035	e8		inx				inx			;   2Drop work
.b036	e8		inx				inx
.b037	e8		inx				inx
.b038	e8		inx				inx
.b039	68		pla				pla			; recover value
.b03a	18		clc				clc			; add to ud
.b03b	75 2a		adc $2a,x			adc DStack+6,x
.b03d	95 2a		sta $2a,x			sta DStack+6,x
.b03f	90 0a		bcc $b04b			bcc +
.b041	f6 2b		inc $2b,x			inc DStack+7,x
.b043	d0 06		bne $b04b			bne +
.b045	f6 28		inc $28,x			inc DStack+4,x
.b047	d0 02		bne $b04b			bne +
.b049	f6 29		inc $29,x			inc DStack+5,x
.b04b					+
.b04b	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; consume the char
.b04e	d6 24		dec $24,x			dec DStack+0,x
.b050	d0 8e		bne $afe0			bne _Char_loop
.b052					_done:
=121					CL	.var *-(WordListLink+wh_Xt)
=$b052					en = *	; remember here
>afd7	79					.byte CL	;wh_CodeLength
.b052	60		rts				rts
>b053	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
>b059	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b05a	54 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b05c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b05d	18					.byte UF+NN	;wh_Flags	dictionary flags
=45017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b05e					Number:
.b05e	20 de b3	jsr $b3de			jsr underflow_2
.b061	a9 00		lda #$00			lda #0
.b063	85 1a		sta $1a				sta tmp4+0	; flag for double
.b065	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b067	ad 00 03	lda $0300			lda base
.b06a	48		pha				pha
.b06b	20 4f cc	jsr $cc4f			jsr Two_dup		; ( addr u addr u )
.b06e	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b070	20 32 b1	jsr $b132			jsr _MinusCheck		; a minus sign?
.b073	a0 0a		ldy #$0a			ldy #10			; decimal?
.b075	c9 23		cmp #$23			cmp #'#'
.b077	f0 35		beq $b0ae			beq _base_changed
.b079	a0 10		ldy #$10			ldy #16			; hex?
.b07b	c9 24		cmp #$24			cmp #'$'
.b07d	f0 2f		beq $b0ae			beq _base_changed
.b07f	a0 02		ldy #$02			ldy #2			; binary?
.b081	c9 25		cmp #$25			cmp #'%'
.b083	f0 29		beq $b0ae			beq _base_changed
.b085	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b087	d0 2f		bne $b0b8			bne _check_dot
.b089	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b08b	c9 03		cmp #$03			cmp #3
.b08d	d0 1c		bne $b0ab			bne _not_a_char
.b08f	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b091	85 1c		sta $1c				sta tmp5
.b093	b5 27		lda $27,x			lda DStack+3,x
.b095	85 1d		sta $1d				sta tmp5+1
.b097	a0 02		ldy #$02			ldy #2
.b099	b1 1c		lda ($1c),y			lda (tmp5),y
.b09b	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b09d	d0 0c		bne $b0ab			bne _not_a_char
.b09f	88		dey				dey		; The char we want is between the single quotes.
.b0a0	b1 1c		lda ($1c),y			lda (tmp5),y
.b0a2	95 26		sta $26,x			sta DStack+2,x
.b0a4	a9 00		lda #$00			lda #0
.b0a6	95 27		sta $27,x			sta DStack+3,x
.b0a8	4c 07 b1	jmp $b107			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b0ab					_not_a_char:
.b0ab	4c e4 b0	jmp $b0e4			jmp _number_error
.b0ae					_base_changed:
.b0ae	8c 00 03	sty $0300			sty base	; Switch to the new base
.b0b1	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus ; start one character later
.b0b4	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b0b6	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b0b8					_check_dot:
.b0b8	20 32 b1	jsr $b132			jsr _MinusCheck
.b0bb	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b0bd	85 1c		sta $1c				sta tmp5
.b0bf	b5 27		lda $27,x			lda DStack+3,x
.b0c1	85 1d		sta $1d				sta tmp5+1
.b0c3	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b0c5	88		dey				dey		; but we need the last character
.b0c6	b1 1c		lda ($1c),y			lda (tmp5),y
.b0c8	c9 2e		cmp #$2e			cmp #'.'
.b0ca	d0 04		bne $b0d0			bne _main
.b0cc	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b0ce	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b0d0					_main:
.b0d0	20 4f cc	jsr $cc4f			jsr Two_Dup
.b0d3	a9 00		lda #$00			lda #0
.b0d5	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b0d7	95 29		sta $29,x			sta DStack+5,x
.b0d9	95 2a		sta $2a,x			sta DStack+6,x
.b0db	95 2b		sta $2b,x			sta DStack+7,x
.b0dd	20 d9 af	jsr $afd9			jsr To_Number	; ( ud addr u -- ud addr u )
.b0e0	b5 24		lda $24,x			lda DStack+0,x
.b0e2	f0 1f		beq $b103			beq _all_converted
.b0e4					_number_error:
.b0e4	20 b6 c4	jsr $c4b6			jsr Two_drop	; >NUMBER modified addr u
.b0e7	20 b6 c4	jsr $c4b6			jsr Two_drop	; ud   (partially converted number)
.b0ea	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b0ec	20 63 cd	jsr $cd63			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b0ef	20 7d cd	jsr $cd7d			jsr Type
.b0f2	a9 3c		lda #$3c			lda #'<'
.b0f4	20 63 cd	jsr $cd63			jsr Emit_A
.b0f7	20 70 cd	jsr $cd70			jsr Space
.b0fa	68		pla				pla		; restore base
.b0fb	8d 00 03	sta $0300			sta base
.b0fe	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b100	4c 28 b4	jmp $b428			jmp ThrowA
.b103					_all_converted:
.b103	e8		inx				inx		; Drop the current addr u
.b104	e8		inx				inx
.b105	e8		inx				inx
.b106	e8		inx				inx
.b107					_drop_original_string:
.b107	20 ac bf	jsr $bfac			jsr TwoNip	 ; Drop the original addr u
.b10a	a5 1a		lda $1a				lda tmp4	; flag for double
.b10c	f0 10		beq $b11e			beq _single
.b10e	a9 20		lda #$20			lda #%00100000
.b110	05 0c		ora $0c				ora status
.b112	85 0c		sta $0c				sta status
.b114	a5 1b		lda $1b				lda tmp4+1
.b116	f0 15		beq $b12d			beq _done	; no minus, all done
.b118	20 40 c6	jsr $c640			jsr DNegate
.b11b	4c 2d b1	jmp $b12d			jmp _done
.b11e					_single:
.b11e	e8		inx				inx		; convert ud to u
.b11f	e8		inx				inx
.b120	a9 df		lda #$df			lda #$ff-%00100000
.b122	25 0c		and $0c				and status
.b124	85 0c		sta $0c				sta status
.b126	a5 1b		lda $1b				lda tmp4+1
.b128	f0 03		beq $b12d			beq _done	; no minus, all done
.b12a	20 0f c6	jsr $c60f			jsr Negate
.b12d					_done:
.b12d	68		pla				pla
.b12e	8d 00 03	sta $0300			sta base
=211					CL	.var *-(WordListLink+wh_Xt)
=$b131					en = *	; remember here
>b05c	d3					.byte CL	;wh_CodeLength
.b131	60		rts				rts
.b132					_MinusCheck:
.b132	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b134	d0 09		bne $b13f			bne +
.b136	c6 1b		dec $1b				dec tmp4+1		; set flag
.b138	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; start one character later
.b13b	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b13d	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b13f	60		rts		+		rts
>b140	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
>b143	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b144	d9 af					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b146	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b147	08					.byte NN	;wh_Flags	dictionary flags
=45251					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b148	a9 10		lda #$10	Hex:		lda #16
.b14a	d0 0e		bne $b15a			bne decimal_a
=4					CL	.var *-(WordListLink+wh_Xt)
=$b14c					en = *	; remember here
>b146	04					.byte CL	;wh_CodeLength
>b14c	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
>b153	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b154	c3 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b156	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b157	00					.byte 0	;wh_Flags	dictionary flags
=45267					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b158	a9 0a		lda #$0a	Decimal:	lda #10
.b15a	8d 00 03	sta $0300	decimal_a:	sta base+0
.b15d	a9 00		lda #$00			lda #0
.b15f	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-(WordListLink+wh_Xt)
=$b162					en = *	; remember here
>b156	0a					.byte CL	;wh_CodeLength
.b162	60		rts				rts
>b163	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
>b168	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b169	d3 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b16b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b16c	18					.byte UF+NN	;wh_Flags	dictionary flags
=45288					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b16d					Count:
.b16d	20 c9 b3	jsr $b3c9			jsr underflow_1
.b170	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b172	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b174	d0 02		bne $b178			bne +
.b176	f6 25		inc $25,x			inc DStack+1,x
.b178					+
.b178	4c 9b b7	jmp $b79b			jmp PushZA		; push number of characters, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b17b					en = *	; remember here
>b16b	0e					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b17b	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
>b17e	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b17f	e8 b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b181	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b182	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b183					Question_Do:
.b183	20 de b2	jsr $b2de			jsr Do_Leave_Init
.b186	a9 9a		lda #$9a			lda #<_runtime
.b188	a0 b1		ldy #$b1			ldy #>_runtime
.b18a	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA	; compile JSR _runtime
.b18d	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b18f	a0 03		ldy #$03			ldy #3
.b191	20 ae cc	jsr $ccae			jsr Comma_YA
.b194	20 c1 b2	jsr $b2c1			jsr Leave		; compile JMP leave
.b197	4c b8 b1	jmp $b1b8			jmp Do_8		; finish
=23					CL	.var *-(WordListLink+wh_Xt)
=$b19a					en = *	; remember here
>b181	17					.byte CL	;wh_CodeLength
.b19a					_runtime:
.b19a	20 c0 b1	jsr $b1c0			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b19d	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b19f	f0 01		beq $b1a2			beq _2
.b1a1	60		rts				rts		; return Z=0 to signal continue
.b1a2	a5 13		lda $13		_2:		lda DoIndex+1
.b1a4	c9 80		cmp #$80			cmp #$80
.b1a6	60		rts				rts		; return Z
>b1a7	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
>b1a9	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1aa	fe b0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b1ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b1ad	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45353					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b1ae					Do:
.b1ae	20 de b2	jsr $b2de			jsr Do_Leave_Init
.b1b1	a9 c0		lda #$c0			lda #<Do_runtime
.b1b3	a0 b1		ldy #$b1			ldy #>Do_runtime
.b1b5	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA	; compile JSR _runtime
.b1b8	20 b7 c9	jsr $c9b7	Do_8:		jsr Here		; remember loop body start addr
.b1bb	a9 ae		lda #$ae			lda #<Do		; identifier
.b1bd	4c 9b b7	jmp $b79b			jmp PushZA
=18					CL	.var *-(WordListLink+wh_Xt)
=$b1c0					en = *	; remember here
>b1ac	12					.byte CL	;wh_CodeLength
.b1c0					Do_Runtime:
.b1c0	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b1c3	ac 45 07	ldy $0745			ldy DoStkIndex
.b1c6	30 2d		bmi $b1f5			bmi _TooDeep
.b1c8	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b1ca	99 46 07	sta $0746,y			sta DoIndexL,y
.b1cd	a5 13		lda $13				lda DoIndex+1
.b1cf	99 4e 07	sta $074e,y			sta DoIndexH,y
.b1d2	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b1d3	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b1d5	f5 26		sbc $26,x			sbc DStack+2,x
.b1d7	99 56 07	sta $0756,y			sta DoFuFaL,y
.b1da	a9 80		lda #$80			lda #$80
.b1dc	f5 27		sbc $27,x			sbc DStack+3,x
.b1de	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b1e1	18		clc				clc			; index= FUFA plus original index
.b1e2	b5 24		lda $24,x			lda DStack+0,x
.b1e4	79 56 07	adc $0756,y			adc DoFuFaL,y
.b1e7	85 12		sta $12				sta DoIndex+0
.b1e9	b5 25		lda $25,x			lda DStack+1,x
.b1eb	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b1ee	85 13		sta $13				sta DoIndex+1
.b1f0	e8		inx				inx			; Drop orig index
.b1f1	e8		inx				inx
.b1f2	e8		inx				inx			; Drop orig limit
.b1f3	e8		inx				inx
.b1f4	60		rts				rts			; return
.b1f5	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b1f7	20 28 b4	jsr $b428			jsr ThrowA
>b1fa	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
>b1fe	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b1ff	29 b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b201	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b202	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45438					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b203					Loop:
.b203	a9 0a		lda #$0a			lda #<_Runtime
.b205	a0 b2		ldy #$b2			ldy #>_Runtime
.b207	4c 26 b2	jmp $b226			jmp Plus_Loop_5
=7					CL	.var *-(WordListLink+wh_Xt)
=$b20a					en = *	; remember here
>b201	07					.byte CL	;wh_CodeLength
.b20a					_Runtime:
.b20a	e6 12		inc $12				inc DoIndex+0
.b20c	f0 02		beq $b210			beq _Runtime2
.b20e	b8		clv				clv			; return V=0 to signal loop back
.b20f	60		rts				rts
.b210	18		clc		_Runtime2:	clc
.b211	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b213	69 01		adc #$01			adc #1
.b215	85 13		sta $13				sta DoIndex+1
.b217	60		rts				rts			; return V to signal loop back
>b218	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
>b21d	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b21e	7e b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b220	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b221	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45469					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b222					Plus_Loop:
.b222	a9 30		lda #$30			lda #<Plus_Loop_Runtime
.b224	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b226	20 47 b2	jsr $b247	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b229	a9 a6		lda #$a6			lda #<Unloop
.b22b	a0 b2		ldy #$b2			ldy #>Unloop
.b22d	4c 4f b6	jmp $b64f			jmp Compile_Comma_WithNT_YA ; compile JSR Unloop, return
=14					CL	.var *-(WordListLink+wh_Xt)
=$b230					en = *	; remember here
>b220	0e					.byte CL	;wh_CodeLength
.b230					Plus_Loop_Runtime:
.b230	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b232	b0 10		bcs $b244		bcs Throw_Stack_12
.b234	18		clc				clc			; DoIndex += step
.b235	b5 24		lda $24,x			lda DStack+0,x
.b237	65 12		adc $12				adc DoIndex+0
.b239	85 12		sta $12				sta DoIndex+0
.b23b	b5 25		lda $25,x			lda DStack+1,x
.b23d	65 13		adc $13				adc DoIndex+1
.b23f	85 13		sta $13				sta DoIndex+1
.b241	e8		inx				inx			; Drop step
.b242	e8		inx				inx
.b243	60		rts				rts			; return V=0 to signal loop back
.b244	4c ed b3	jmp $b3ed	Throw_Stack_12: jmp Throw_Stack
.b247					Loop_End:
.b247	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA	; compile JSR runtime
.b24a	a9 ae		lda #$ae			lda #<Do		; check id
.b24c	20 8f b2	jsr $b28f	Loop_End_3:	jsr QPairCtlA
.b24f	a9 50		lda #$50			lda #$50		; compile BVC body
.b251	20 61 a6	jsr $a661			jsr Branch_Comma
.b254	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b257	ad 44 07	lda $0744			lda DoLeave+1
.b25a	f0 1b		beq $b277			beq _p9
.b25c	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b25e	85 15		sta $15				sta tmp1+1
.b260	a0 01		ldy #$01			ldy #1			;   save link
.b262	b1 14		lda ($14),y			lda (tmp1),y
.b264	48		pha				pha
.b265	88		dey				dey
.b266	b1 14		lda ($14),y			lda (tmp1),y
.b268	48		pha				pha
.b269	a5 00		lda $00				lda cp+0		;   patch addr
.b26b	91 14		sta ($14),y			sta (tmp1),y
.b26d	a5 01		lda $01				lda cp+1
.b26f	c8		iny				iny
.b270	91 14		sta ($14),y			sta (tmp1),y
.b272	68		pla				pla			;   get saved link
.b273	a8		tay				tay
.b274	68		pla				pla
.b275	d0 e5		bne $b25c			bne _p1
.b277					_p9:
.b277	20 9f b3	jsr $b39f			jsr PopYA		; restore DoLeave
.b27a	8d 43 07	sta $0743			sta DoLeave+0
.b27d	8c 44 07	sty $0744			sty DoLeave+1
.b280	60		rts				rts
>b281	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b289	41
>b28a	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b28b	9d b1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b28e	08					.byte NN	;wh_Flags	dictionary flags
=45578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b28f	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b291	f0 05		beq $b298			beq _8
.b293	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b295	4c 28 b4	jmp $b428			jmp ThrowA
.b298	e8		inx		_8:		inx
.b299	e8		inx				inx	; Drop n
.b29a	60		rts				rts
=12					CL	.var *-(WordListLink+wh_Xt)
=$b29b					en = *	; remember here
>b28d	0c					.byte CL	;wh_CodeLength
>b29b	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
>b2a1	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2a2	0a b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2a5	01					.byte CO	;wh_Flags	dictionary flags
=45601					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2a6					Unloop:
.b2a6	ac 45 07	ldy $0745			ldy DoStkIndex
.b2a9	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b2ac	85 12		sta $12				sta DoIndex+0
.b2ae	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b2b1	85 13		sta $13				sta DoIndex+1
.b2b3	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-(WordListLink+wh_Xt)
=$b2b6					en = *	; remember here
>b2a4	10					.byte CL	;wh_CodeLength
.b2b6	60		rts				rts
>b2b7	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
>b2bc	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2bd	21 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2bf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2c0	0d					.byte IM+NN+CO	;wh_Flags	dictionary flags
=45628					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2c1					Leave:
.b2c1	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b2c3	20 94 cc	jsr $cc94			jsr C_Comma_A
.b2c6	a5 01		lda $01				lda cp+1	; save cp
.b2c8	48		pha				pha
.b2c9	a5 00		lda $00				lda cp+0
.b2cb	48		pha				pha
.b2cc	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b2cf	ac 44 07	ldy $0744			ldy DoLeave+1
.b2d2	20 ae cc	jsr $ccae			jsr Comma_YA
.b2d5	68		pla				pla		; update DoLeave
.b2d6	8d 43 07	sta $0743			sta DoLeave+0
.b2d9	68		pla				pla
.b2da	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-(WordListLink+wh_Xt)
=$b2dd					en = *	; remember here
>b2bf	1c					.byte CL	;wh_CodeLength
.b2dd	60		rts				rts
.b2de					Do_Leave_Init:
.b2de	ad 43 07	lda $0743			lda DoLeave+0
.b2e1	ac 44 07	ldy $0744			ldy DoLeave+1
.b2e4	20 59 b7	jsr $b759			jsr PushYA	; save old leave head
.b2e7	a9 00		lda #$00			lda #0		; init
.b2e9	8d 44 07	sta $0744			sta DoLeave+1
.b2ec	60		rts				rts
>b2ed	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
>b2ee	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b2ef	3c b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b2f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b2f2	01					.byte CO	;wh_Flags	dictionary flags
=45678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b2f3	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b2f6	ca		dex				dex
.b2f7	ca		dex				dex
.b2f8	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b2f9	a5 12		lda $12				lda DoIndex+0
.b2fb	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b2fe	95 24		sta $24,x			sta DStack+0,x
.b300	a5 13		lda $13				lda DoIndex+1
.b302	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b305	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-(WordListLink+wh_Xt)
=$b307					en = *	; remember here
>b2f1	14					.byte CL	;wh_CodeLength
.b307	60		rts				rts
>b308	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
>b309	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b30a	6e b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b30c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b30d	01					.byte CO	;wh_Flags	dictionary flags
=45705					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b30e	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b311	ca		dex				dex
.b312	ca		dex				dex
.b313	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b314	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b317	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b31a	95 24		sta $24,x			sta DStack+0,x
.b31c	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b31f	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b322	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$b324					en = *	; remember here
>b30c	16					.byte CL	;wh_CodeLength
.b324	60		rts				rts
>b325	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
>b32c	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b32d	89 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b32f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b330	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b331					Recurse:
.b331	a5 0e		lda $0e				lda workword+0
.b333	a4 0f		ldy $0f				ldy workword+1
.b335	20 59 b7	jsr $b759			jsr PushYA
.b338	24 0c		bit $0c				bit status		; does WORKWORD contain xt or nt?
.b33a	50 03		bvc $b33f			bvc +
.b33c	20 91 bd	jsr $bd91			jsr Name_To_Int		; convert nt to xt
.b33f					+
.b33f	4c d0 cc	jmp $ccd0			jmp Jsr_Comma		; compile JSR xt, return
=17					CL	.var *-(WordListLink+wh_Xt)
=$b342					en = *	; remember here
>b32f	11					.byte CL	;wh_CodeLength
>b342	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
>b348	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b349	ac b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b34b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b34c	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=45768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b34d					Abort_Quote:
.b34d	20 c3 b8	jsr $b8c3			jsr S_Quote		; compile the string literal
.b350	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b352	a9 57		lda #$57			lda #<_runtime
.b354	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b357					en = *	; remember here
>b34b	0a					.byte CL	;wh_CodeLength
.b357					_runtime:
.b357	b5 28		lda $28,x			lda DStack+4,x
.b359	15 29		ora $29,x			ora DStack+5,x
.b35b	d0 03		bne $b360			bne _do_abort	; true?
.b35d	4c 07 ad	jmp $ad07			jmp ThreeDrop	; Drop three entries from the Data Stack
.b360					_do_abort:
.b360	20 7d cd	jsr $cd7d			jsr Type	; print string
.b363	20 d7 aa	jsr $aad7			jsr CR		; We follow Gforth in going to a new line
.b366	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b368	4c 28 b4	jmp $b428			jmp ThrowA
>b36b	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
>b370	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b371	c8 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b373	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b374	08					.byte NN	;wh_Flags	dictionary flags
=45808					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b375	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b377	4c 28 b4	jmp $b428			jmp ThrowA
=5					CL	.var *-(WordListLink+wh_Xt)
=$b37a					en = *	; remember here
>b373	05					.byte CL	;wh_CodeLength
>b37a	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
>b37e	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b37f	f0 b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b381	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b382	08					.byte NN	;wh_Flags	dictionary flags
=45822					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b383					PopA:
.b383	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b385	b0 66		bcs $b3ed		bcs Throw_Stack
.b387	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b389	e8		inx				inx
.b38a	e8		inx				inx
=8					CL	.var *-(WordListLink+wh_Xt)
=$b38b					en = *	; remember here
>b381	08					.byte CL	;wh_CodeLength
.b38b	60		rts		                rts
.b38c					PopA2:
.b38c	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b38e	b0 5d		bcs $b3ed		bcs Throw_Stack
.b390	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b392	e8		inx				inx
.b393	e8		inx				inx
.b394	60		rts		                rts
>b395	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
>b39a	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b39b	fe b2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b39d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b39e	08					.byte NN	;wh_Flags	dictionary flags
=45850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b39f					PopYA:
.b39f	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3a1	b0 4a		bcs $b3ed		bcs Throw_Stack
.b3a3	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b3a5	b4 25		ldy $25,x			ldy DStack+1,x
.b3a7	e8		inx				inx
.b3a8	e8		inx				inx
=10					CL	.var *-(WordListLink+wh_Xt)
=$b3a9					en = *	; remember here
>b39d	0a					.byte CL	;wh_CodeLength
.b3a9	60		rts				rts
.b3aa					PopTmp1:
.b3aa	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3ac	b0 3f		bcs $b3ed		bcs Throw_Stack
.b3ae	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b3b0	b4 25		ldy $25,x			ldy DStack+1,x
.b3b2	e8		inx				inx
.b3b3	e8		inx				inx
.b3b4	85 14		sta $14				sta tmp1+0
.b3b6	84 15		sty $15				sty tmp1+1
.b3b8	60		rts				rts
>b3b9	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b3c1	77 5f 31
>b3c4	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3c5	1a b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3c8	08					.byte NN	;wh_Flags	dictionary flags
=45892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3c9					underflow_1:
.b3c9	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3cb	b0 20		bcs $b3ed		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3cd					en = *	; remember here
>b3c7	04					.byte CL	;wh_CodeLength
.b3cd	60		rts				rts
>b3ce	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b3d6	77 5f 32
>b3d9	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b3da	44 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b3dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b3dd	08					.byte NN	;wh_Flags	dictionary flags
=45913					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b3de					underflow_2:
.b3de	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3e0	b0 0b		bcs $b3ed		bcs Throw_Stack
=4					CL	.var *-(WordListLink+wh_Xt)
=$b3e2					en = *	; remember here
>b3dc	04					.byte CL	;wh_CodeLength
.b3e2	60		rts		                rts
.b3e3					underflow_3:
.b3e3	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b3e5	b0 06		bcs $b3ed		bcs Throw_Stack
.b3e7	60		rts		                rts
.b3e8					underflow_4:
.b3e8	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b3ea	b0 01		bcs $b3ed		bcs Throw_Stack
.b3ec	60		rts		                rts
.b3ed					Throw_Stack:
.b3ed	30 04		bmi $b3f3			bmi _over
.b3ef	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b3f1	d0 35		bne $b428			bne ThrowA
.b3f3	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b3f5	d0 31		bne $b428			bne ThrowA
.b3f7					Throw_FPStack:
.b3f7	30 04		bmi $b3fd			bmi _over
.b3f9	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b3fb	d0 2b		bne $b428			bne ThrowA
.b3fd	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b3ff	d0 27		bne $b428			bne ThrowA
.b401					Throw_FpOutOfRange:
.b401	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b403	d0 23		bne $b428			bne ThrowA
>b405	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
>b40b	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b40c	59 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b40e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b40f	08					.byte NN	;wh_Flags	dictionary flags
=45963					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b410					QStack:
.b410	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b412	b0 d9		bcs $b3ed		bcs Throw_Stack
.b414	a4 4c		ldy $4c				ldy fp			; check floating point stack
.b416	c0 0b		cpy #$0b			cpy #FDim+1
.b418	b0 dd		bcs $b3f7			bcs Throw_FPStack
=10					CL	.var *-(WordListLink+wh_Xt)
=$b41a					en = *	; remember here
>b40e	0a					.byte CL	;wh_CodeLength
.b41a	60		rts				rts			; all OK
>b41b	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
>b420	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b421	8b b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b423	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b424	08					.byte NN	;wh_Flags	dictionary flags
=45984					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b425	20 83 b3	jsr $b383	Throw:		jsr PopA		; pop n
.b428	20 53 b4	jsr $b453	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b42b	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b42d					Abort_Core:
.b42d	20 7a b8	jsr $b87a			jsr SLiteral_runtime
.b430	4c 36 b4	jmp $b436			  jmp +
>b433	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b436	20 7d cd	jsr $cd7d	+		jsr Type
.b439	20 99 ce	jsr $ce99			jsr R_From		; show return stack TOS
.b43c	20 9e 81	jsr $819e			jsr TypeSymbol
.b43f	20 b5 ce	jsr $ceb5			jsr R_Fetch		; show return stack NOS
.b442	20 9e 81	jsr $819e			jsr TypeSymbol
.b445	20 d7 aa	jsr $aad7			jsr CR
.b448					Abort_Core2:
.b448	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b44a	8d 45 07	sta $0745			sta DoStkIndex
.b44d	20 97 b4	jsr $b497			jsr Empty_Stack		; empty the Data Stack & FP stack
.b450	4c a7 b4	jmp $b4a7			jmp Quit		; continue into QUIT.
.b453					Type_Exception_Text_A:
.b453	85 16		sta $16				sta tmp2+0	; save error code
.b455	a9 ac		lda #$ac			lda #<Exception_Text_List
.b457	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b459	85 18		sta $18				sta tmp3+0
.b45b	84 19		sty $19				sty tmp3+1
.b45d	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b45f	b1 18		lda ($18),y			lda (tmp3),y
.b461	f0 1a		beq $b47d			beq _NotFound
.b463	c5 16		cmp $16				cmp tmp2+0
.b465	f0 11		beq $b478			beq _Found
.b467	c8		iny		-		iny		;   step to end of entry
.b468	b1 18		lda ($18),y			lda (tmp3),y
.b46a	d0 fb		bne $b467			bne -
.b46c	98		tya				tya		;   step to next entry
.b46d	38		sec				sec
.b46e	65 18		adc $18				adc tmp3+0
.b470	85 18		sta $18				sta tmp3+0
.b472	90 e9		bcc $b45d			bcc _TestEntry
.b474	e6 19		inc $19				inc tmp3+1
.b476	d0 e5		bne $b45d			bne _TestEntry
.b478					_Found:
.b478	a0 01		ldy #$01			ldy #1
.b47a	4c a4 cd	jmp $cda4			jmp Print_ASCIIZ_tmp3_no_lf
.b47d	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b47f	a5 16		lda $16				lda tmp2+0
.b481	20 59 b7	jsr $b759			jsr PushYA
.b484	4c 71 cb	jmp $cb71			jmp Dot
>b487	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b48f	61 63 6b
>b492	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b493	a0 b3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b495	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b496	08					.byte NN	;wh_Flags	dictionary flags
=46098					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b497	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; empty data stack
.b499	a9 0a		lda #$0a			lda #FDim	; empty FP stack
.b49b	85 4c		sta $4c				sta fp
=6					CL	.var *-(WordListLink+wh_Xt)
=$b49d					en = *	; remember here
>b495	06					.byte CL	;wh_CodeLength
.b49d	60		rts				rts
>b49e	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
>b4a2	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b4a3	12 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b4a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b4a6	08					.byte NN	;wh_Flags	dictionary flags
=46114					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b4a7					Quit:
.b4a7	8a		txa				txa		; Save the DStack that we just defined
.b4a8	a2 ff		ldx #$ff			ldx #rsp0
.b4aa	9a		txs				txs
.b4ab	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b4ac	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b4ae	85 02		sta $02				sta insrc+0
.b4b0	85 03		sta $03				sta insrc+1
.b4b2	20 e6 b6	jsr $b6e6			jsr Left_Bracket_NoCheck ; switch to interpret state
.b4b5					_get_line:
.b4b5	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b4b7	85 04		sta $04				sta cib+0
.b4b9	a9 02		lda #$02			lda #>buffer0
.b4bb	85 05		sta $05				sta cib+1
.b4bd	20 2c c2	jsr $c22c			jsr Refill		; ( -- f )
.b4c0	b5 24		lda $24,x			lda DStack+0,x
.b4c2	d0 05		bne $b4c9			bne +
.b4c4	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b4c6	4c 28 b4	jmp $b428			jmp ThrowA
.b4c9	e8		inx		+		inx			; drop the flag
.b4ca	e8		inx				inx
.b4cb	20 e2 b4	jsr $b4e2			jsr interpret
.b4ce	a5 0a		lda $0a				lda state
.b4d0	d0 06		bne $b4d8			bne _print_compiled
.b4d2	a9 58		lda #$58			lda #<str_ok
.b4d4	a0 da		ldy #$da			ldy #>str_ok
.b4d6	d0 04		bne $b4dc			bne _print
.b4d8	a9 5c		lda #$5c	_print_compiled: lda #<str_compiled	; "compile" string
.b4da	a0 da		ldy #$da			ldy #>str_compiled
.b4dc	20 98 cd	jsr $cd98	_print:		jsr Print_ASCIIZ_YA
.b4df	4c b5 b4	jmp $b4b5			jmp _get_line
=59					CL	.var *-(WordListLink+wh_Xt)
=$b4e2					en = *	; remember here
>b4a5	3b					.byte CL	;wh_CodeLength
.b4e2					Interpret:
.b4e2					_loop:
.b4e2	20 10 b4	jsr $b410			jsr QStack		; check stack bounds
.b4e5	20 4a ba	jsr $ba4a			jsr parse_name		; ( "string" -- addr u )
.b4e8	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b4ea	f0 53		beq $b53f	                beq _line_done
.b4ec	20 4f cc	jsr $cc4f			jsr Two_dup		; ( addr u -- addr u addr u )
.b4ef	20 87 bc	jsr $bc87			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b4f2	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b4f4	d0 1b		bne $b511			bne _got_name_token
.b4f6	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b4f7	e8		inx		                inx
.b4f8	20 5e b0	jsr $b05e	                jsr Number           ; ( addr u -- u|d )
.b4fb	a5 0a		lda $0a		                lda state		; interpreting?
.b4fd	f0 e3		beq $b4e2	                beq _loop		;   we're done
.b4ff	a9 20		lda #$20	                lda #$20		; double cell number?
.b501	24 0c		bit $0c		                bit status
.b503	f0 06		beq $b50b	                beq _single_number
.b505	20 20 b8	jsr $b820			jsr Two_literal		; compile a double number
.b508	4c e2 b4	jmp $b4e2			jmp _loop
.b50b	20 0c b7	jsr $b70c	_single_number:	jsr Literal		; compile a single number
.b50e	4c e2 b4	jmp $b4e2			jmp _loop
.b511					_got_name_token:
.b511	20 10 c9	jsr $c910			jsr Nip
.b514	20 10 c9	jsr $c910			jsr Nip			; ( nt )
.b517	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b519	84 15		sty $15				sty tmp1+1
.b51b	20 91 bd	jsr $bd91			jsr Name_To_Int		; ( nt -- xt )
.b51e	a0 84		ldy #$84			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b520	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b522	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b524	d0 0f		bne $b535			bne _compile
.b526	29 01		and #$01			and #CO			; is the word COMPILE-ONLY?
.b528	f0 05		beq $b52f			beq _execute
.b52a	a9 f2		lda #$f2			lda #$100+err_CompileOnly	;   complain & quit
.b52c	4c 28 b4	jmp $b428			jmp ThrowA
.b52f	20 bb cd	jsr $cdbb	_execute:	jsr Execute		; EXECUTE the xt that is TOS
.b532	4c e2 b4	jmp $b4e2	                jmp _loop
.b535					_compile:
.b535	29 04		and #$04			and #IM			; is the word IMMEDIATE?
.b537	d0 f6		bne $b52f			bne _execute		;   IMMEDIATE word, execute now
.b539	20 52 b6	jsr $b652			jsr Compile_Comma_WithNT ; Compile the xt into the Dictionary
.b53c	4c e2 b4	jmp $b4e2			jmp _loop
.b53f					_line_done:
.b53f	e8		inx				inx			; drop stuff from PARSE_NAME
.b540	e8		inx				inx
.b541	e8		inx				inx
.b542	e8		inx				inx
.b543	60		rts				rts
>b544	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b54c	65
>b54d	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b54e	22 b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b550	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b551	08					.byte NN	;wh_Flags	dictionary flags
=46285					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b552	a9 04		lda #$04	Immediate:	lda #IM
.b554	48		pha		SetFlag:	pha
.b555	20 1b ba	jsr $ba1b			jsr current_to_dp
.b558	a0 84		ldy #$84			ldy #Wh_Flags
.b55a	68		pla				pla
.b55b	11 10		ora ($10),y			ora (dp),y
.b55d	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b55f					en = *	; remember here
>b550	0d					.byte CL	;wh_CodeLength
.b55f	60		rts				rts
>b560	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b568	6f 6e 6c 79
>b56c	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b56d	cd b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b56f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b570	08					.byte NN	;wh_Flags	dictionary flags
=46316					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b571	a9 01		lda #$01	Compile_Only:	lda #CO
.b573	d0 df		bne $b554			bne SetFlag
=4					CL	.var *-(WordListLink+wh_Xt)
=$b575					en = *	; remember here
>b56f	04					.byte CL	;wh_CodeLength
>b575	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b57d	74 69 76 65
>b581	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b582	ec b4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b584	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b585	08					.byte NN	;wh_Flags	dictionary flags
=46337					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b586	20 1b ba	jsr $ba1b	Never_Native:	jsr current_to_dp
.b589	a0 84		ldy #$84			ldy #Wh_Flags
.b58b	b1 10		lda ($10),y			lda (dp),y
.b58d	09 08		ora #$08			ora #NN		; set NN flag
.b58f	29 fd		and #$fd			and #$ff-AN	; clear AN flag
.b591	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b593					en = *	; remember here
>b584	0d					.byte CL	;wh_CodeLength
.b593	60		rts				rts
>b594	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b59c	61 74 69 76 65
>b5a1	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5a2	01 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5a4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5a5	08					.byte NN	;wh_Flags	dictionary flags
=46369					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5a6	20 1b ba	jsr $ba1b	Always_Native:	jsr current_to_dp
.b5a9	a0 84		ldy #$84			ldy #Wh_Flags
.b5ab	b1 10		lda ($10),y			lda (dp),y
.b5ad	09 02		ora #$02			ora #AN		; Make sure AN flag is set
.b5af	29 f7		and #$f7			and #$ff-NN	; and NN flag is clear.
.b5b1	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-(WordListLink+wh_Xt)
=$b5b3					en = *	; remember here
>b5a4	0d					.byte CL	;wh_CodeLength
.b5b3	60		rts				rts
>b5b4	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b5bc	74 69 76 65
>b5c0	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5c1	21 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5c4	08					.byte NN	;wh_Flags	dictionary flags
=46400					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5c5	20 1b ba	jsr $ba1b	Allow_Native:	jsr current_to_dp
.b5c8	a0 84		ldy #$84			ldy #Wh_Flags	; offset for status byte
.b5ca	b1 10		lda ($10),y			lda (dp),y
.b5cc	29 f5		and #$f5			and #$ff-NN-AN	; AN and NN flag is clear.
.b5ce	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-(WordListLink+wh_Xt)
=$b5d0					en = *	; remember here
>b5c3	0b					.byte CL	;wh_CodeLength
.b5d0	60		rts				rts
>b5d1	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
>b5d9	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5da	40 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5dd	08					.byte NN	;wh_Flags	dictionary flags
=46425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5de	a0 03		ldy #$03			ldy #>nc_limit
.b5e0	a9 02		lda #$02			lda #<nc_limit
.b5e2	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b5e5					en = *	; remember here
>b5dc	07					.byte CL	;wh_CodeLength
>b5e5	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b5ed	64 65 72 66 6c 6f 77
>b5f4	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b5f5	59 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b5f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b5f8	08					.byte NN	;wh_Flags	dictionary flags
=46452					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b5f9	a0 03		ldy #$03			ldy #>uf_strip
.b5fb	a9 04		lda #$04			lda #<uf_strip
.b5fd	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b600					en = *	; remember here
>b5f7	07					.byte CL	;wh_CodeLength
>b600	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
>b608	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b609	74 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b60b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b60c	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b60d					Postpone:
.b60d	20 7b ba	jsr $ba7b			jsr parse_name_check	; ( -- addr n )
.b610	20 b3 bc	jsr $bcb3			jsr find_name_check	; ( -- nt | 0 )
.b613	b5 24		lda $24,x			lda DStack+0,x
.b615	85 14		sta $14				sta tmp1+0
.b617	b5 25		lda $25,x			lda DStack+1,x
.b619	85 15		sta $15				sta tmp1+1
.b61b	20 91 bd	jsr $bd91			jsr Name_To_Int	; ( nt -- xt )
.b61e	a0 84		ldy #$84			ldy #Wh_Flags		; IMMEDIATE word?
.b620	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b622	29 04		and #$04			and #IM
.b624	f0 03		beq $b629			beq _not_immediate
.b626	4c 52 b6	jmp $b652			jmp Compile_Comma_WithNT ; compile it
.b629					_not_immediate:
.b629	20 3f b7	jsr $b73f			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with xt of the word
.b62c	a0 b6		ldy #$b6			ldy #>Compile_Comma_WithNT_YA	; compile COMPILE,
.b62e	a9 4f		lda #$4f			lda #<Compile_Comma_WithNT_YA
.b630	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
=38					CL	.var *-(WordListLink+wh_Xt)
=$b633					en = *	; remember here
>b60b	26					.byte CL	;wh_CodeLength
>b633	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
>b63b	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b63c	88 b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b63e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b63f	08					.byte NN	;wh_Flags	dictionary flags
=46523					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b640	20 9f b3	jsr $b39f	Compile_Comma:	jsr PopYA		; pop xt (check stack, skippable)
.b643	20 59 b7	jsr $b759	Compile_Comma_YA: jsr PushYA		; push xt
.b646	20 f5 ce	jsr $cef5			jsr Dup			; ( xt xt )
.b649	20 39 bd	jsr $bd39			jsr Int_To_Name		; ( xt nt )	does a dictionary search
.b64c	4c 5a b6	jmp $b65a			jmp Compile_Comma_B
.b64f	20 59 b7	jsr $b759	Compile_Comma_WithNT_YA: jsr PushYA
.b652					Compile_Comma_WithNT:
.b652	20 f5 ce	jsr $cef5			jsr Dup
.b655	a9 7b		lda #$7b			lda #$100-wh_xt		; convert xt to nt
.b657	20 da c9	jsr $c9da			jsr Minus_A
.b65a					Compile_Comma_B:
.b65a	b5 24		lda $24,x			lda DStack+0,x		; tmp5 = nt
.b65c	85 1c		sta $1c				sta tmp5+0
.b65e	b5 25		lda $25,x			lda DStack+1,x
.b660	85 1d		sta $1d				sta tmp5+1
.b662	f0 36		beq $b69a			beq _jsr		; no nt found (we have no flags) ?
.b664	a0 83		ldy #$83			ldy #wh_CodeLength
.b666	b1 1c		lda ($1c),y			lda (tmp5),y
.b668	95 24		sta $24,x			sta DStack+0,x		; ( xt u )
.b66a	a0 84		ldy #$84			ldy #Wh_Flags		; save word flags
.b66c	b1 1c		lda ($1c),y			lda (tmp5),y
.b66e	95 25		sta $25,x			sta DStack+1,x
.b670	29 02		and #$02			and #AN			; Always Native (AN) word?
.b672	d0 2b		bne $b69f			bne _inline
.b674	b5 25		lda $25,x			lda DStack+1,x		; Never Native (NN) word?
.b676	29 08		and #$08			and #NN
.b678	d0 0e		bne $b688			bne _jsr_opt
.b67a	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b67d	d0 20		bne $b69f			bne _inline
.b67f	ad 02 03	lda $0302			lda nc_limit+0
.b682	d5 24		cmp $24,x			cmp DStack+0,x
.b684	f0 02		beq $b688			beq _jsr_opt
.b686	b0 17		bcs $b69f			bcs _inline
.b688					_jsr_opt:
.b688	ad 04 03	lda $0304			lda uf_strip
.b68b	f0 0d		beq $b69a			beq _jsr
.b68d	b5 25		lda $25,x			lda DStack+1,x		; underflow strip & not stack strip?
.b68f	49 10		eor #$10			eor #UF
.b691	29 50		and #$50			and #UF+R6
.b693	d0 05		bne $b69a			bne _jsr
.b695	a9 03		lda #$03			lda #3			; skip the underflow check
.b697	20 a4 c9	jsr $c9a4			jsr Nos_Plus_A
.b69a					_jsr:
.b69a	e8		inx				inx			; Drop len or nt
.b69b	e8		inx				inx
.b69c	4c d0 cc	jmp $ccd0			jmp Jsr_Comma		; compile jsr, return
.b69f					_inline:
.b69f	b5 25		lda $25,x			lda DStack+1,x		; this word contains RTS addr save & restore?
.b6a1	29 40		and #$40			and #R6
.b6a3	f0 0a		beq $b6af			beq +
.b6a5	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b6a7	20 a4 c9	jsr $c9a4			jsr Nos_Plus_A
.b6aa	a9 f4		lda #$f4			lda #$f4		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b6ac	20 da c9	jsr $c9da			jsr minus_a
.b6af					+
.b6af	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b6b2	f0 10		beq $b6c4			beq +
.b6b4	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b6b6	29 10		and #$10			and #UF
.b6b8	f0 0a		beq $b6c4			beq +
.b6ba	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b6bc	20 a4 c9	jsr $c9a4			jsr Nos_Plus_A
.b6bf	a9 fd		lda #$fd			lda #$fd		;   Adjust u: omit underflow check
.b6c1	20 da c9	jsr $c9da			jsr minus_a
.b6c4					+
.b6c4	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b6c6	f0 0c		beq $b6d4			beq _copy_end
.b6c8	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b6ca	20 94 cc	jsr $cc94			jsr C_Comma_A
.b6cd	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus
.b6d0	d6 24		dec $24,x			dec DStack+0,x
.b6d2	d0 f4		bne $b6c8			bne _copy_loop
.b6d4					_copy_end:
.b6d4	4c b6 c4	jmp $c4b6			jmp Two_drop
=151					CL	.var *-(WordListLink+wh_Xt)
=$b6d7					en = *	; remember here
>b63e	97					.byte CL	;wh_CodeLength
>b6d7	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
>b6d8	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6d9	bb b5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6db	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6dc	0d					.byte IM+CO+NN	;wh_Flags	dictionary flags
=46680					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6dd	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b6df	d0 05		bne $b6e6			bne Left_Bracket_NoCheck
.b6e1	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b6e3	4c 28 b4	jmp $b428			jmp ThrowA
.b6e6					Left_Bracket_NoCheck:
.b6e6	a9 00		lda #$00			lda #0
.b6e8	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b6ea	85 0b		sta $0b				sta state+1
=15					CL	.var *-(WordListLink+wh_Xt)
=$b6ec					en = *	; remember here
>b6db	0f					.byte CL	;wh_CodeLength
.b6ec	60		rts				rts
>b6ed	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
>b6ee	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b6ef	58 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b6f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b6f2	0c					.byte IM+NN	;wh_Flags	dictionary flags
=46702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b6f3					Right_Bracket:
.b6f3	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b6f5	f0 05		beq $b6fc			beq +
.b6f7	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b6f9	4c 28 b4	jmp $b428			jmp ThrowA
.b6fc					+
.b6fc	a9 ff		lda #$ff			lda #$FF
.b6fe	d0 e8		bne $b6e8			bne Left_Bracket_3
=13					CL	.var *-(WordListLink+wh_Xt)
=$b700					en = *	; remember here
>b6f1	0d					.byte CL	;wh_CodeLength
>b700	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
>b707	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b708	6e b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b70a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b70b	1d					.byte IM+CO+UF+NN	;wh_Flags	dictionary flags
=46727					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b70c					Literal:
.b70c	20 c9 b3	jsr $b3c9			jsr underflow_1
.b70f	20 15 b7	jsr $b715			jsr LitCompile		; compile load regs, choose a runtime routine
.b712	4c 4f b6	jmp $b64f			jmp Compile_Comma_WithNT_YA ; compile JSR runtime
=9					CL	.var *-(WordListLink+wh_Xt)
=$b715					en = *	; remember here
>b70a	09					.byte CL	;wh_CodeLength
.b715					LitCompile:
.b715	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b717	f0 08		beq $b721			beq _ZByte
.b719	20 3f b7	jsr $b73f			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b71c	a9 59		lda #$59			lda #<PushYA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b71e	a0 b7		ldy #$b7			ldy #>PushYA
.b720	60		rts				rts
.b721					_ZByte:
.b721	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b723	f0 08		beq $b72d			beq _zero
.b725	20 46 b7	jsr $b746			jsr lda_immed_comma	; compile "lda #" using TOS
.b728	a9 9b		lda #$9b			lda #<PushZA		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b72a	a0 b7		ldy #$b7			ldy #>PushZA
.b72c	60		rts				rts
.b72d	e8		inx		_zero:		inx			; drop
.b72e	e8		inx				inx
.b72f	a9 aa		lda #$aa			lda #<Zero		; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b731	a0 b7		ldy #$b7			ldy #>Zero
.b733	60		rts				rts
>b734	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
>b73a	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b73b	87 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b73d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b73e	08					.byte NN	;wh_Flags	dictionary flags
=46778					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b73f					ldya_immed_comma:
.b73f	a9 a0		lda #$a0			lda #$a0		; ldy #
.b741	b4 25		ldy $25,x			ldy DStack+1,x
.b743	20 ae cc	jsr $ccae			jsr Comma_YA
.b746					lda_immed_comma:
.b746	a9 a9		lda #$a9			lda #$a9		; lda #
.b748	20 94 cc	jsr $cc94			jsr C_Comma_A
.b74b	4c 91 cc	jmp $cc91			jmp C_Comma
=15					CL	.var *-(WordListLink+wh_Xt)
=$b74e					en = *	; remember here
>b73d	0f					.byte CL	;wh_CodeLength
>b74e	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
>b754	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b755	ba b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b757	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b758	00					.byte 0	;wh_Flags	dictionary flags
=46804					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b759	ca		dex		PushYA:		dex
.b75a	ca		dex				dex
.b75b	95 24		sta $24,x			sta DStack+0,x
.b75d	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-(WordListLink+wh_Xt)
=$b75f					en = *	; remember here
>b757	06					.byte CL	;wh_CodeLength
.b75f	60		rts				rts
>b760	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
>b764	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b765	d4 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b767	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b768	08					.byte NN	;wh_Flags	dictionary flags
=46820					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b769	a0 03		ldy #$03			ldy #>base
.b76b	a9 00		lda #$00			lda #<base
.b76d	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$b770					en = *	; remember here
>b767	07					.byte CL	;wh_CodeLength
>b770	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
>b774	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b775	e4 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b777	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b778	00					.byte 0	;wh_Flags	dictionary flags
=46836					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b779	a9 ff		lda #$ff	True:		lda #$FF
.b77b	ca		dex		PushAA:		dex
.b77c	ca		dex				dex
.b77d	95 24		sta $24,x			sta DStack+0,x
.b77f	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b781					en = *	; remember here
>b777	08					.byte CL	;wh_CodeLength
.b781	60		rts				rts
>b782	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
>b787	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b788	f4 b6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b78a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b78b	08					.byte NN	;wh_Flags	dictionary flags
=46855					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b78c	a9 00		lda #$00	False:		lda #0
.b78e	f0 0b		beq $b79b			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b790					en = *	; remember here
>b78a	04					.byte CL	;wh_CodeLength
>b790	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
>b796	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b797	07 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b799	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b79a	00					.byte 0	;wh_Flags	dictionary flags
=46870					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b79b	ca		dex		PushZA:		dex
.b79c	ca		dex				dex
.b79d	95 24		sta $24,x			sta DStack+0,x
.b79f	a9 00		lda #$00			lda #0
.b7a1	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-(WordListLink+wh_Xt)
=$b7a3					en = *	; remember here
>b799	08					.byte CL	;wh_CodeLength
.b7a3	60		rts				rts
>b7a4	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
>b7a5	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7a6	16 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7a9	08					.byte NN	;wh_Flags	dictionary flags
=46885					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7aa	a9 00		lda #$00	Zero:		lda #0
.b7ac	f0 ed		beq $b79b			beq PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7ae					en = *	; remember here
>b7a8	04					.byte CL	;wh_CodeLength
>b7ae	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
>b7af	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7b0	25 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7b2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7b3	08					.byte NN	;wh_Flags	dictionary flags
=46895					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7b4	a9 01		lda #$01	One:		lda #1
.b7b6	d0 e3		bne $b79b			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7b8					en = *	; remember here
>b7b2	04					.byte CL	;wh_CodeLength
>b7b8	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
>b7b9	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7ba	2f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7bd	08					.byte NN	;wh_Flags	dictionary flags
=46905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7be	a9 02		lda #$02	Two:		lda #2
.b7c0	d0 d9		bne $b79b			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7c2					en = *	; remember here
>b7bc	04					.byte CL	;wh_CodeLength
>b7c2	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
>b7c4	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7c5	39 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7c8	08					.byte NN	;wh_Flags	dictionary flags
=46916					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7c9	a9 20		lda #$20	Bl:		lda #AscSP
.b7cb	d0 ce		bne $b79b			bne PushZA
=4					CL	.var *-(WordListLink+wh_Xt)
=$b7cd					en = *	; remember here
>b7c7	04					.byte CL	;wh_CodeLength
>b7cd	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
>b7d0	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7d1	44 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7d4	08					.byte NN	;wh_Flags	dictionary flags
=46928					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7d5	a9 08		lda #$08			lda #ToIn
.b7d7	4c 9b b7	jmp $b79b			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7da					en = *	; remember here
>b7d3	05					.byte CL	;wh_CodeLength
>b7da	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
>b7df	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7e0	50 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7e3	08					.byte NN	;wh_Flags	dictionary flags
=46943					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7e4	a9 0a		lda #$0a			lda #state
.b7e6	4c 9b b7	jmp $b79b			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7e9					en = *	; remember here
>b7e2	05					.byte CL	;wh_CodeLength
>b7e9	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
>b7eb	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7ec	5f b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7ef	08					.byte NN	;wh_Flags	dictionary flags
=46955					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7f0	a9 10		lda #$10			lda #dp
.b7f2	4c 9b b7	jmp $b79b			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b7f5					en = *	; remember here
>b7ee	05					.byte CL	;wh_CodeLength
>b7f5	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
>b7f9	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b7fa	6b b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b7fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b7fd	08					.byte NN	;wh_Flags	dictionary flags
=46969					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b7fe	a9 14		lda #$14			lda #tmp1
.b800	4c 9b b7	jmp $b79b			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b803					en = *	; remember here
>b7fc	05					.byte CL	;wh_CodeLength
>b803	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
>b809	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b80a	79 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b80c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b80d	08					.byte NN	;wh_Flags	dictionary flags
=46985					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b80e	a9 24		lda #$24			lda #DStack
.b810	4c 9b b7	jmp $b79b			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-(WordListLink+wh_Xt)
=$b813					en = *	; remember here
>b80c	05					.byte CL	;wh_CodeLength
>b813	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
>b81b	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b81c	89 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b81e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b81f	1c					.byte UF+IM+NN	;wh_Flags	dictionary flags
=47003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b820					Two_literal:
.b820	20 de b3	jsr $b3de			jsr underflow_2 ; double number
.b823	20 13 cf	jsr $cf13			jsr Swap
.b826	20 0c b7	jsr $b70c			jsr Literal	; do lo cell
.b829	4c 0c b7	jmp $b70c			jmp Literal	; do hi cell
=12					CL	.var *-(WordListLink+wh_Xt)
=$b82c					en = *	; remember here
>b81e	0c					.byte CL	;wh_CodeLength
>b82c	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
>b834	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b835	9b b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b837	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b838	1d					.byte CO+IM+UF+NN	;wh_Flags	dictionary flags
=47028					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b839					SLiteral:
.b839	20 de b3	jsr $b3de			jsr underflow_2
.b83c	20 5c b8	jsr $b85c			jsr SLiteral_Start	; compile header
.b83f	4c 50 b8	jmp $b850			jmp _Move_Test
.b842	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b844	20 94 cc	jsr $cc94			jsr C_Comma_A
.b847	f6 28		inc $28,x			inc DStack+4,x
.b849	d0 02		bne $b84d			bne +
.b84b	f6 29		inc $29,x			inc DStack+5,x
.b84d					+
.b84d	20 d1 c9	jsr $c9d1			jsr NOS_One_Minus
.b850	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b852	15 27		ora $27,x			ora DStack+3,x
.b854	d0 ec		bne $b842			bne _Move_Loop
.b856	20 69 b8	jsr $b869			jsr SLiteral_End
.b859	4c b6 c4	jmp $c4b6			jmp Two_Drop		; clean up and leave
=35					CL	.var *-(WordListLink+wh_Xt)
=$b85c					en = *	; remember here
>b837	23					.byte CL	;wh_CodeLength
.b85c					SLiteral_Start:
.b85c	a9 7a		lda #$7a			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b85e	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b860	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.b863	20 b7 c9	jsr $c9b7			jsr Here		; push addr of start of JMP
.b866	4c ea cc	jmp $ccea			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b869					SLiteral_End:
.b869	20 eb c9	jsr $c9eb			jsr One_Plus
.b86c	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b86e	81 24		sta ($24,x)			sta (DStack+0,x)
.b870	20 eb c9	jsr $c9eb			jsr One_Plus
.b873	a5 01		lda $01				lda cp+1
.b875	81 24		sta ($24,x)			sta (DStack+0,x)
.b877	e8		inx				inx			; drop herej
.b878	e8		inx				inx
.b879	60		rts				rts
.b87a					SLiteral_Runtime:
.b87a	86 16		stx $16				stx tmp2	; save data stack index
.b87c	ba		tsx				tsx
.b87d	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b880	85 14		sta $14				sta tmp1+0
.b882	bd 02 01	lda $0102,x			lda RStack+2,x
.b885	85 15		sta $15				sta tmp1+1
.b887	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b889	ca		dex				dex		; push string addr
.b88a	ca		dex				dex
.b88b	18		clc				clc
.b88c	a5 14		lda $14				lda tmp1+0
.b88e	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b890	95 24		sta $24,x			sta DStack+0,x
.b892	a5 15		lda $15				lda tmp1+1
.b894	69 00		adc #$00			adc #0
.b896	95 25		sta $25,x			sta DStack+1,x
.b898	ca		dex				dex		; push string length
.b899	ca		dex				dex
.b89a	38		sec				sec
.b89b	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b89d	b1 14		lda ($14),y			lda (tmp1),y
.b89f	f5 26		sbc $26,x			sbc DStack+2,x
.b8a1	95 24		sta $24,x			sta DStack+0,x
.b8a3	c8		iny				iny
.b8a4	b1 14		lda ($14),y			lda (tmp1),y
.b8a6	f5 27		sbc $27,x			sbc DStack+3,x
.b8a8	95 25		sta $25,x			sta DStack+1,x
.b8aa	60		rts				rts
>b8ab	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
>b8ad	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8ae	b4 b7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8b1	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47149					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8b2					Dot_quote:
.b8b2	20 c3 b8	jsr $b8c3			jsr S_Quote		; compile the string literal
.b8b5	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8b7	a9 7d		lda #$7d			lda #<Type
.b8b9	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
=10					CL	.var *-(WordListLink+wh_Xt)
=$b8bc					en = *	; remember here
>b8b0	0a					.byte CL	;wh_CodeLength
>b8bc	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
>b8be	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b8bf	2d b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b8c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b8c2	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47166					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b8c3					S_Quote:
.b8c3	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8c5					S_Quote_start:
.b8c5	48		pha				pha			; save "handle escaped chars" flag
.b8c6	a5 0a		lda $0a				lda state		; compiling?
.b8c8	f0 06		beq $b8d0			beq _15
.b8ca	20 5c b8	jsr $b85c			jsr SLiteral_Start	; compile SLiteral header
.b8cd	4c d3 b8	jmp $b8d3			jmp _19
.b8d0	20 b7 c9	jsr $c9b7	_15:		jsr Here		; remember start addr
.b8d3					_19:
.b8d3	68		pla				pla			; init t2 flags
.b8d4	20 9b b7	jsr $b79b			jsr PushZA
.b8d7	20 aa b7	jsr $b7aa			jsr Zero		; init t3 flags
.b8da					_savechars_loop:
.b8da	a5 08		lda $08				lda toin+0		; LSB
.b8dc	c5 06		cmp $06				cmp ciblen+0
.b8de	a5 09		lda $09				lda toin+1		; MSB
.b8e0	e5 07		sbc $07				sbc ciblen+1
.b8e2	90 10		bcc $b8f4			bcc _input_fine		; input buffer empty?
.b8e4	20 2c c2	jsr $c22c			jsr Refill		; Refill it  ( -- f )
.b8e7	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b8e9	d0 05		bne $b8f0			bne +
.b8eb	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b8ed	4c 28 b4	jmp $b428			jmp ThrowA
.b8f0	e8		inx		+		inx			; Drop the refill flag
.b8f1	e8		inx				inx
.b8f2	d0 e6		bne $b8da			bne _savechars_loop	; jump back up to the empty check, just in
.b8f4					_input_fine:
.b8f4	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b8f5	a5 04		lda $04				lda cib+0
.b8f7	85 14		sta $14				sta tmp1+0
.b8f9	a5 05		lda $05				lda cib+1
.b8fb	65 09		adc $09				adc toin+1
.b8fd	85 15		sta $15				sta tmp1+1
.b8ff	a4 08		ldy $08				ldy ToIn
.b901	b1 14		lda ($14),y			lda (tmp1),y
.b903	85 14		sta $14				sta tmp1
.b905	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b907	d0 02		bne $b90b			bne +
.b909	e6 09		inc $09				inc toin+1
.b90b					+
.b90b	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b90d	30 03		bmi $b912			bmi +
.b90f	4c b5 b9	jmp $b9b5			jmp _regular_char
.b912					+
.b912	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b914	30 03		bmi $b919			bmi +
.b916	4c ab b9	jmp $b9ab			jmp _not_escaped
.b919					+
.b919	84 15		sty $15				sty tmp1+1
.b91b	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b91d	70 25		bvs $b944			bvs _check_esc_chars
.b91f	a9 01		lda #$01			lda #1
.b921	24 15		bit $15				bit tmp1+1
.b923	d0 11		bne $b936			bne _esc_x_second_digit
.b925	c8		iny				iny			; Adjust flag for second digit next time.
.b926	94 27		sty $27,x			sty DStack+3,x
.b928	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b92a	20 d8 b9	jsr $b9d8			jsr convert_hex_value	; Convert to hex
.b92d	0a		asl a				asl			; This is the upper nybble, so move it up.
.b92e	0a		asl a				asl
.b92f	0a		asl a				asl
.b930	0a		asl a				asl
.b931	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b933	4c bc b9	jmp $b9bc			jmp _next_character
.b936					_esc_x_second_digit:
.b936	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b938	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b93a	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b93c	20 d8 b9	jsr $b9d8			jsr convert_hex_value
.b93f	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b941	4c b9 b9	jmp $b9b9			jmp _save_character
.b944					_check_esc_chars:
.b944	a0 00		ldy #$00			ldy #0
.b946	94 27		sty $27,x			sty DStack+3,x
.b948	a8		tay				tay
.b949	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b94b	c0 61		cpy #$61			cpy #'a'
.b94d	f0 6a		beq $b9b9			beq _save_character
.b94f	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b951	c0 62		cpy #$62			cpy #'b'
.b953	f0 64		beq $b9b9			beq _save_character
.b955	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b957	c0 65		cpy #$65			cpy #'e'
.b959	f0 5e		beq $b9b9			beq _save_character
.b95b	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b95d	c0 66		cpy #$66			cpy #'f'
.b95f	f0 58		beq $b9b9			beq _save_character
.b961	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b963	c0 6c		cpy #$6c			cpy #'l'
.b965	f0 52		beq $b9b9			beq _save_character
.b967	c0 6e		cpy #$6e			cpy #'n'
.b969	f0 4e		beq $b9b9			beq _save_character
.b96b	c0 6d		cpy #$6d			cpy #'m'
.b96d	d0 09		bne $b978			bne +
.b96f	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b971	20 94 cc	jsr $cc94			jsr C_Comma_A
.b974	a9 0a		lda #$0a			lda #AscLF
.b976	d0 41		bne $b9b9			bne _save_character
.b978					+
.b978	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b97a	c0 71		cpy #$71			cpy #'q'
.b97c	f0 3b		beq $b9b9			beq _save_character
.b97e	c0 22		cpy #$22			cpy #AscDQuote
.b980	f0 37		beq $b9b9			beq _save_character
.b982	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b984	c0 72		cpy #$72			cpy #'r'
.b986	f0 31		beq $b9b9			beq _save_character
.b988	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b98a	c0 74		cpy #$74			cpy #'t'
.b98c	f0 2b		beq $b9b9			beq _save_character
.b98e	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b990	c0 76		cpy #$76			cpy #'v'
.b992	f0 25		beq $b9b9			beq _save_character
.b994	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b996	c0 7a		cpy #$7a			cpy #'z'
.b998	f0 1f		beq $b9b9			beq _save_character
.b99a					_check_esc_x:
.b99a	c0 78		cpy #$78			cpy #'x'
.b99c	d0 06		bne $b9a4			bne +
.b99e	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9a0	95 27		sta $27,x			sta DStack+3,x
.b9a2	d0 18		bne $b9bc			bne _next_character
.b9a4					+
.b9a4	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9a6	c0 5c		cpy #$5c			cpy #AscBackslash
.b9a8	f0 0f		beq $b9b9			beq _save_character
.b9aa	98		tya				tya
.b9ab					_not_escaped:
.b9ab	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9ad	d0 06		bne $b9b5			bne _regular_char
.b9af	a9 ff		lda #$ff			lda #$FF
.b9b1	95 27		sta $27,x			sta DStack+3,x
.b9b3	d0 07		bne $b9bc			bne _next_character
.b9b5					_regular_char:
.b9b5	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9b7	f0 06		beq $b9bf			beq _found_string_end
.b9b9					_save_character:
.b9b9	20 94 cc	jsr $cc94			jsr C_Comma_A		; compile this character into the dictionary
.b9bc					_next_character:
.b9bc	4c da b8	jmp $b8da			jmp _savechars_loop
.b9bf					_found_string_end:
.b9bf	e8		inx				inx			; Drop t3
.b9c0	e8		inx				inx
.b9c1	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9c3	d0 0e		bne $b9d3			bne _cmpl		; that's the way it works at the moment).
.b9c5	38		sec				sec			; TOS= length of string = Here - start_addr
.b9c6	a5 00		lda $00				lda cp+0
.b9c8	f5 26		sbc $26,x			sbc DStack+2,x
.b9ca	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9cc	a5 01		lda $01				lda cp+1
.b9ce	f5 27		sbc $27,x			sbc DStack+3,x
.b9d0	95 25		sta $25,x			sta DStack+1,x		;   MSB
.b9d2	60		rts				rts			; ( startaddr u )
.b9d3					_cmpl:
.b9d3	e8		inx				inx			; Drop t2
.b9d4	e8		inx				inx
.b9d5	4c 69 b8	jmp $b869			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$b9d8					en = *	; remember here
>b8c1	ff					.byte CL	;wh_CodeLength
.b9d8					convert_hex_value:
.b9d8	c9 41		cmp #$41			cmp #'A'
.b9da	90 05		bcc $b9e1			bcc _digit
.b9dc	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.b9de	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.b9e0	60		rts				rts
.b9e1					_digit:
.b9e1	e9 2f		sbc #$2f			sbc #'0'-1
.b9e3	60		rts				rts
>b9e4	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
>b9e7	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9e8	3e b8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9eb	0c					.byte IM+NN	;wh_Flags	dictionary flags
=47463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9ec					S_Backslash_Quote:
.b9ec	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.b9ee	4c c5 b8	jmp $b8c5			jmp S_Quote_start
=5					CL	.var *-(WordListLink+wh_Xt)
=$b9f1					en = *	; remember here
>b9ea	05					.byte CL	;wh_CodeLength
>b9f1	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
>b9f9	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>b9fa	67 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>b9fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>b9fd	08					.byte NN	;wh_Flags	dictionary flags
=47481					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.b9fe	20 11 ba	jsr $ba11	LatestXt:	jsr LatestNt	; ( nt )
.ba01	4c 91 bd	jmp $bd91			jmp Name_To_Int	; ( xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$ba04					en = *	; remember here
>b9fc	06					.byte CL	;wh_CodeLength
>ba04	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
>ba0c	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba0d	79 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba0f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba10	08					.byte NN	;wh_Flags	dictionary flags
=47500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba11	20 1b ba	jsr $ba1b	LatestNt:	jsr current_to_dp
.ba14	a5 10		lda $10				lda dp+0
.ba16	a4 11		ldy $11				ldy dp+1
.ba18	4c 59 b7	jmp $b759			jmp PushYA
=10					CL	.var *-(WordListLink+wh_Xt)
=$ba1b					en = *	; remember here
>ba0f	0a					.byte CL	;wh_CodeLength
.ba1b					current_to_dp:
.ba1b	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba1e	0a		asl a				asl			; dp= wordlists[A]
.ba1f	a8		tay				tay
.ba20	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba23	85 10		sta $10				sta dp+0
.ba25	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba28	85 11		sta $11				sta dp+1
.ba2a	60		rts				rts
.ba2b					dp_to_current:
.ba2b	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba2e	0a		asl a		                asl			; wordlists[A]=dp
.ba2f	a8		tay		                tay
.ba30	a5 10		lda $10		                lda dp+0
.ba32	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba35	a5 11		lda $11		                lda dp+1
.ba37	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba3a	60		rts		                rts
>ba3b	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba43	6d 65
>ba45	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba46	8c b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba48	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba49	08					.byte NN	;wh_Flags	dictionary flags
=47557					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba4a					Parse_Name:
.ba4a	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba4c	85 16		sta $16				sta tmp2+0
.ba4e	18		clc				clc
.ba4f	a5 05		lda $05				lda cib+1
.ba51	65 09		adc $09				adc toin+1
.ba53	85 17		sta $17				sta tmp2+1
.ba55	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba57					_skip_loop:
.ba57	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba59	a5 09		lda $09				lda toin+1
.ba5b	e5 07		sbc $07				sbc ciblen+1
.ba5d	b0 11		bcs $ba70			bcs _empty_line
.ba5f	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba61	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba63	b0 10		bcs $ba75			bcs _char_found
.ba65	c8		iny				iny			; increment toin
.ba66	84 08		sty $08				sty toin+0
.ba68	d0 ed		bne $ba57			bne _skip_loop
.ba6a	e6 09		inc $09				inc toin+1
.ba6c	e6 17		inc $17				inc tmp2+1
.ba6e	d0 e7		bne $ba57			bne _skip_loop
.ba70					_empty_line:
.ba70	ca		dex				dex			; junk address
.ba71	ca		dex				dex
.ba72	4c aa b7	jmp $b7aa			jmp Zero		; length=0
.ba75					_char_found:
.ba75	20 c9 b7	jsr $b7c9			jsr Bl			; push delimiter char
.ba78	4c 92 ba	jmp $ba92			jmp Parse
=49					CL	.var *-(WordListLink+wh_Xt)
=$ba7b					en = *	; remember here
>ba48	31					.byte CL	;wh_CodeLength
.ba7b					parse_name_check:
.ba7b	20 4a ba	jsr $ba4a			jsr parse_name		; get character from string
.ba7e	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.ba80	f0 01		beq $ba83			beq _empty
.ba82	60		rts				rts
.ba83	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.ba85	4c 28 b4	jmp $b428			jmp ThrowA
>ba88	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
>ba8d	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ba8e	c5 b9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ba90	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ba91	08					.byte NN	;wh_Flags	dictionary flags
=47629					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ba92	20 83 b3	jsr $b383	Parse:		jsr PopA		; pop c (check for underflow)
.ba95	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.ba97	ca		dex				dex			; alloc space for addr
.ba98	ca		dex				dex
.ba99	ca		dex				dex			; alloc space for length
.ba9a	ca		dex				dex
.ba9b	18		clc				clc			; addr= cib+toin
.ba9c	a5 08		lda $08				lda toin+0
.ba9e	65 04		adc $04				adc cib+0
.baa0	95 26		sta $26,x			sta DStack+2,x
.baa2	a5 09		lda $09				lda toin+1
.baa4	65 05		adc $05				adc cib+1
.baa6	95 27		sta $27,x			sta DStack+3,x
.baa8	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.baaa	84 14		sty $14				sty tmp1+0
.baac	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.baae	85 16		sta $16				sta tmp2+0
.bab0	18		clc				clc
.bab1	a5 09		lda $09				lda toin+1		; tmp1= toin
.bab3	85 15		sta $15				sta tmp1+1
.bab5	65 05		adc $05				adc cib+1
.bab7	85 17		sta $17				sta tmp2+1
.bab9	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.babb	85 1d		sta $1d				sta tmp5+1
.babd					_loop:
.babd	c4 06		cpy $06				cpy ciblen+0		; end of string?
.babf	a5 09		lda $09				lda toin+1
.bac1	e5 07		sbc $07				sbc ciblen+1
.bac3	b0 1d		bcs $bae2			bcs _eol
.bac5	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.bac7	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bac9	d0 08		bne $bad3			bne _not_whitespace
.bacb	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bacd	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bacf	90 0f		bcc $bae0			bcc _found_delimiter
.bad1	b0 04		bcs $bad7			bcs _not_delimiter
.bad3	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bad5	f0 09		beq $bae0			beq _found_delimiter
.bad7					_not_delimiter:
.bad7	c8		iny				iny			; next character
.bad8	d0 e3		bne $babd			bne _loop
.bada	e6 09		inc $09				inc toin+1
.badc	e6 17		inc $17				inc tmp2+1
.bade	d0 dd		bne $babd			bne _loop
.bae0					_found_delimiter:
.bae0	e6 1d		inc $1d				inc tmp5+1
.bae2					_eol:
.bae2	38		sec				sec			; length = toin - tmp1
.bae3	98		tya				tya
.bae4	e5 14		sbc $14				sbc tmp1+0
.bae6	95 24		sta $24,x			sta DStack+0,x
.bae8	a5 09		lda $09				lda toin+1
.baea	e5 15		sbc $15				sbc tmp1+1
.baec	95 25		sta $25,x			sta DStack+1,x
.baee	18		clc				clc			; toin = toin + delimiter_offset
.baef	98		tya				tya
.baf0	65 1d		adc $1d				adc tmp5+1
.baf2	85 08		sta $08				sta toin+0
.baf4	90 02		bcc $baf8			bcc +
.baf6	e6 09		inc $09				inc toin+1
.baf8					+
=102					CL	.var *-(WordListLink+wh_Xt)
=$baf8					en = *	; remember here
>ba90	66					.byte CL	;wh_CodeLength
.baf8	60		rts				rts
>baf9	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb01	50 61 72 73 69 6e 67
>bb08	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb09	0d ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb0b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb0c	18					.byte UF+NN	;wh_Flags	dictionary flags
=47752					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb0d					Execute_parsing:
.bb0d	20 e3 b3	jsr $b3e3			jsr underflow_3
.bb10	20 a8 c3	jsr $c3a8			jsr Input_To_R		; save existing input for later
.bb13	20 1f ce	jsr $ce1f			jsr Not_Rot		; -ROT ( xt addr u )
.bb16	20 9f b3	jsr $b39f			jsr PopYA		; TOS is new ciblen
.bb19	85 06		sta $06				sta ciblen+0
.bb1b	84 07		sty $07				sty ciblen+1
.bb1d	20 9f b3	jsr $b39f			jsr PopYA		; NOS is new cib
.bb20	85 04		sta $04				sta cib+0
.bb22	84 05		sty $05				sty cib+1
.bb24	a9 00		lda #$00			lda #0
.bb26	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb28	85 09		sta $09				sta toin+1
.bb2a	20 bb cd	jsr $cdbb			jsr Execute
.bb2d	20 ca c3	jsr $c3ca			jsr R_To_Input		; restore
=35					CL	.var *-(WordListLink+wh_Xt)
=$bb30					en = *	; remember here
>bb0b	23					.byte CL	;wh_CodeLength
.bb30	60		rts				rts
>bb31	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
>bb37	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb38	88 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb3a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb3b	08					.byte NN	;wh_Flags	dictionary flags
=47799					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb3c					Source:
.bb3c	a5 04		lda $04				lda cib+0	; push address
.bb3e	a4 05		ldy $05				ldy cib+1
.bb40	20 59 b7	jsr $b759			jsr PushYA
.bb43	a5 06		lda $06				lda ciblen+0	; push size, return
.bb45	a4 07		ldy $07				ldy ciblen+1
.bb47	4c 59 b7	jmp $b759			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$bb4a					en = *	; remember here
>bb3a	0e					.byte CL	;wh_CodeLength
>bb4a	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb52	64
>bb53	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb54	b7 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb57	08					.byte NN	;wh_Flags	dictionary flags
=47827					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb58	a5 02		lda $02		Source_Id:	lda insrc+0
.bb5a	a4 03		ldy $03				ldy insrc+1
.bb5c	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$bb5f					en = *	; remember here
>bb56	07					.byte CL	;wh_CodeLength
>bb5f	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
>bb63	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb64	d3 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb66	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb67	03					.byte AN+CO	;wh_Flags	dictionary flags
=47843					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb68					Exit:
.bb68	60		rts				rts		; keep before FEnd so it gets inlined
=1					CL	.var *-(WordListLink+wh_Xt)
=$bb69					en = *	; remember here
>bb66	01					.byte CL	;wh_CodeLength
>bb69	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
>bb6a	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bb6b	e3 ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bb6d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bb6e	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=47850					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bb6f					Semicolon:
.bb6f	20 dd b6	jsr $b6dd			jsr Left_Bracket	; switch to interpret state
.bb72	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb74	70 0c		bvs $bb82			bvs _colonword
.bb76	a9 60		lda #$60			lda #$60		; compile an RTS
.bb78	20 94 cc	jsr $cc94			jsr C_Comma_A
.bb7b	a5 0e		lda $0e				lda workword+0		; push xt, return
.bb7d	a4 0f		ldy $0f				ldy workword+1
.bb7f	4c 59 b7	jmp $b759			jmp PushYA
.bb82					_colonword:
.bb82	24 0c		bit $0c				bit status
.bb84	10 1d		bpl $bba3			bpl _new_word	; Bit 7 is clear = new word
.bb86	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bb88	a4 0f		ldy $0f				ldy WorkWord+1
.bb8a	20 59 b7	jsr $b759			jsr PushYA
.bb8d	20 a9 bd	jsr $bda9			jsr Name_To_String	; get our name string
.bb90	a9 66		lda #$66			lda #<str_redefined	; string "redefined"
.bb92	a0 da		ldy #$da			ldy #>str_redefined
.bb94	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.bb97	20 7d cd	jsr $cd7d			jsr Type		; print the offending word.
.bb9a	20 70 cd	jsr $cd70			jsr Space
.bb9d	a9 7f		lda #$7f			lda #$ff-%10000000
.bb9f	25 0c		and $0c				and status
.bba1	85 0c		sta $0c				sta status
.bba3					_new_word:
.bba3	20 da c0	jsr $c0da			jsr Header_Link		; finish linking into current dictionary
.bba6	20 ae bb	jsr $bbae			jsr adjust_z		; fix word length
.bba9	a9 60		lda #$60			lda #$60		; compile an RTS
.bbab	4c 94 cc	jmp $cc94			jmp C_Comma_A
=63					CL	.var *-(WordListLink+wh_Xt)
=$bbae					en = *	; remember here
>bb6d	3f					.byte CL	;wh_CodeLength
.bbae					adjust_z:
.bbae	a5 10		lda $10				lda dp+0		; tmp1= xt
.bbb0	18		clc				clc
.bbb1	69 85		adc #$85			adc #Wh_xt
.bbb3	85 14		sta $14				sta tmp1+0
.bbb5	a5 11		lda $11				lda dp+1
.bbb7	69 00		adc #$00			adc #0
.bbb9	85 15		sta $15				sta tmp1+1
.bbbb	38		sec				sec			; length= cp-xt
.bbbc	a5 00		lda $00				lda cp+0
.bbbe	e5 14		sbc $14				sbc tmp1+0
.bbc0	a8		tay				tay
.bbc1	a5 01		lda $01				lda cp+1
.bbc3	e5 15		sbc $15				sbc tmp1+1
.bbc5	f0 0c		beq $bbd3			beq _short		; length > $ff ?
.bbc7	a0 84		ldy #$84			ldy #Wh_Flags		; make it NN
.bbc9	b1 10		lda ($10),y			lda (dp),y
.bbcb	29 fd		and #$fd			and #$ff-AN
.bbcd	09 08		ora #$08			ora #NN
.bbcf	91 10		sta ($10),y			sta (dp),y
.bbd1	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bbd3	98		tya		_short:		tya			; fill in length in header
.bbd4	a0 83		ldy #$83			ldy #Wh_CodeLength
.bbd6	91 10		sta ($10),y			sta (dp),y
.bbd8	60		rts				rts
>bbd9	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
>bbda	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbdb	ea ba					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbdd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbde	08					.byte NN	;wh_Flags	dictionary flags
=47962					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbdf					Colon:
.bbdf	20 f3 b6	jsr $b6f3			jsr Right_Bracket	; switch to compile state
.bbe2	a5 0c		lda $0c				lda status
.bbe4	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bbe6	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bbe8	85 0c		sta $0c				sta status
.bbea	4c e5 c0	jmp $c0e5			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-(WordListLink+wh_Xt)
=$bbed					en = *	; remember here
>bbdd	0e					.byte CL	;wh_CodeLength
>bbed	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
>bbf4	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bbf5	5a bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bbf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bbf8	08					.byte NN	;wh_Flags	dictionary flags
=47988					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bbf9					Colon_NoName:
.bbf9	20 f3 b6	jsr $b6f3			jsr Right_Bracket	; switch to compile state
.bbfc	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bbfe	25 0c		and $0c				and status		; a :NONAME word.
.bc00	85 0c		sta $0c				sta status
.bc02	a5 00		lda $00				lda cp+0
.bc04	85 0e		sta $0e				sta workword+0
.bc06	a5 01		lda $01				lda cp+1
.bc08	85 0f		sta $0f				sta workword+1
=17					CL	.var *-(WordListLink+wh_Xt)
=$bc0a					en = *	; remember here
>bbf7	11					.byte CL	;wh_CodeLength
.bc0a	60		rts				rts
>bc0b	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
>bc0c	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc0d	74 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc0f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc10	08					.byte NN	;wh_Flags	dictionary flags
=48012					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc11	20 17 bc	jsr $bc17	Tick:		jsr Tick_Nt
.bc14	4c 91 bd	jmp $bd91			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc17					en = *	; remember here
>bc0f	06					.byte CL	;wh_CodeLength
.bc17	20 7b ba	jsr $ba7b	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc1a	4c b3 bc	jmp $bcb3			jmp find_name_check	; ( addr u -- nt )
>bc1d	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
>bc20	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc21	8c bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc23	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc24	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=48032					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc25	20 11 bc	jsr $bc11	Bracket_Tick:	jsr Tick
.bc28	4c 0c b7	jmp $b70c			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$bc2b					en = *	; remember here
>bc23	06					.byte CL	;wh_CodeLength
>bc2b	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
>bc2f	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc30	a0 bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc32	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc33	18					.byte UF+NN	;wh_Flags	dictionary flags
=48047					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc34					Find:
.bc34	20 c9 b3	jsr $b3c9			jsr underflow_1
.bc37	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bc39	48		pha				pha
.bc3a	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bc3c	48		pha				pha
.bc3d	20 6d b1	jsr $b16d			jsr Count		; ( caddr -- addr u )
.bc40	20 87 bc	jsr $bc87			jsr find_name		; ( addr u -- nt | 0 )
.bc43	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bc45	d0 0a		bne $bc51			bne _found_word
.bc47	20 8c b7	jsr $b78c			jsr False		; ( 0 0 )
.bc4a	68		pla				pla			; LSB of address
.bc4b	95 26		sta $26,x			sta DStack+2,x
.bc4d	68		pla				pla
.bc4e	95 27		sta $27,x			sta DStack+3,x		; MSB of address
.bc50	60		rts				rts			; ( addr 0 )
.bc51					_found_word:
.bc51	68		pla				pla			; We don't need the address after all, RDrop it
.bc52	68		pla				pla
.bc53	20 f5 ce	jsr $cef5			jsr Dup		; ( nt nt )
.bc56	20 91 bd	jsr $bd91			jsr Name_To_Int	; ( nt xt )
.bc59	20 13 cf	jsr $cf13			jsr Swap		; ( xt nt )
.bc5c	a0 00		ldy #$00			ldy #0			; Prepare flag
.bc5e	a9 84		lda #$84			lda #Wh_Flags		; get flags
.bc60	20 9a c9	jsr $c99a			jsr Plus_A		; ( xt nt+Wh_Flags )
.bc63	a1 24		lda ($24,x)			lda (DStack+0,x)		; ( xt flags )
.bc65	29 04		and #$04			and #IM
.bc67	d0 07		bne $bc70			bne _immediate		; bit set, we're immediate
.bc69	a9 ff		lda #$ff			lda #$FF		; We're not immediate, return -1
.bc6b	95 24		sta $24,x			sta DStack+0,x
.bc6d	95 25		sta $25,x			sta DStack+1,x
.bc6f	60		rts				rts
.bc70					_immediate:
.bc70	a9 01		lda #$01			lda #1			; We're immediate, return 1
.bc72	95 24		sta $24,x			sta DStack+0,x
.bc74	a9 00		lda #$00			lda #0
.bc76	95 25		sta $25,x			sta DStack+1,x
=68					CL	.var *-(WordListLink+wh_Xt)
=$bc78					en = *	; remember here
>bc32	44					.byte CL	;wh_CodeLength
.bc78	60		rts				rts
>bc79	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc81	65
>bc82	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bc83	af bb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bc85	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bc86	18					.byte UF+NN	;wh_Flags	dictionary flags
=48130					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bc87					find_name:
.bc87	20 de b3	jsr $b3de			jsr underflow_2
.bc8a	20 c0 bc	jsr $bcc0			jsr fina_pattern_prepare ; tmp2 = pseudo-header of pattern name
.bc8d	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc8f	95 25		sta $25,x			sta DStack+1,x
.bc91					_wordlist_next:
.bc91	f6 25		inc $25,x			inc DStack+1,x
.bc93	b4 25		ldy $25,x			ldy DStack+1,x
.bc95	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc98	90 06		bcc $bca0			bcc _nextS
.bc9a	d0 14		bne $bcb0			bne _fail
.bc9c	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc9e	d0 03		bne $bca3			bne _nextA
.bca0	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bca3	20 ea bc	jsr $bcea	_nextA:		jsr fina_search_wordlist
.bca6	f0 e9		beq $bc91			beq _wordlist_next
.bca8	a5 14		lda $14				lda tmp1+0		; NOS = nt
.bcaa	95 26		sta $26,x			sta DStack+2,x
.bcac	a5 15		lda $15				lda tmp1+1
.bcae	95 27		sta $27,x			sta DStack+3,x
.bcb0					_fail:
.bcb0	e8		inx				inx			; Drop	pattern name length
.bcb1	e8		inx				inx
=43					CL	.var *-(WordListLink+wh_Xt)
=$bcb2					en = *	; remember here
>bc85	2b					.byte CL	;wh_CodeLength
.bcb2	60		rts				rts
.bcb3					find_name_check:
.bcb3	20 87 bc	jsr $bc87			jsr find_name
.bcb6	b5 25		lda $25,x			lda DStack+1,x		; not found?
.bcb8	f0 01		beq $bcbb			beq _NotFound
.bcba	60		rts				rts
.bcbb	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bcbd	4c 28 b4	jmp $b428			jmp ThrowA
.bcc0					fina_pattern_prepare:
.bcc0	38		sec				sec			; A= 0 - name start offset
.bcc1	b5 24		lda $24,x			lda DStack+0,x
.bcc3	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bcc5	75 26		adc $26,x			adc DStack+2,x		; tmp2 = pattern nt
.bcc7	85 16		sta $16				sta tmp2+0
.bcc9	a9 ff		lda #$ff			lda #$ff
.bccb	75 27		adc $27,x			adc DStack+3,x
.bccd	85 17		sta $17				sta tmp2+1
.bccf	a9 7f		lda #$7f			lda #wh_NameLastChar
.bcd1	38		sec				sec
.bcd2	f5 24		sbc $24,x			sbc DStack+0,x
.bcd4	85 1a		sta $1a				sta tmp4+0
.bcd6	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcd8	b1 16		lda ($16),y			lda (tmp2),y
.bcda	0a		asl a				asl a
.bcdb	0a		asl a				asl a
.bcdc	0a		asl a				asl a
.bcdd	0a		asl a				asl a
.bcde	0a		asl a				asl a
.bcdf	15 24		ora $24,x			ora DStack+0,x
.bce1	85 18		sta $18				sta tmp3+0
.bce3	a9 00		lda #$00			lda #0			; assuming failure
.bce5	95 26		sta $26,x			sta DStack+2,x
.bce7	95 27		sta $27,x			sta DStack+3,x
.bce9	60		rts				rts
.bcea					fina_search_wordlist:
.bcea	86 19		stx $19				stx tmp3+1		; save data stack index
.bcec	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bced	a8		tay				tay
.bcee	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcf1	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcf4	d0 0f		bne $bd05			bne _word_3		;   not end-of-list?
.bcf6	08		php		_rts:		php
.bcf7	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcf9	28		plp				plp
.bcfa	60		rts				rts			; Z= end_of_list
.bcfb					_word_next:
.bcfb	a0 81		ldy #$81			ldy #wh_WordListLink	; tmp1= tmp1->Wh_WordListLink
.bcfd	b1 14		lda ($14),y			lda (tmp1),y
.bcff	aa		tax				tax
.bd00	c8		iny				iny
.bd01	b1 14		lda ($14),y			lda (tmp1),y
.bd03	f0 f1		beq $bcf6			beq _rts		; end of list?
.bd05	85 15		sta $15		_word_3:	sta tmp1+1
.bd07	86 14		stx $14				stx tmp1+0
.bd09	a0 80		ldy #$80			ldy #Wh_HNL		; Are hash & name length the same?
.bd0b	b1 14		lda ($14),y			lda (tmp1),y
.bd0d	c5 18		cmp $18				cmp tmp3+0
.bd0f	d0 ea		bne $bcfb			bne _word_next
.bd11	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd13	c8		iny		_char_next:	iny			; to next char
.bd14	30 e0		bmi $bcf6			bmi _rts		; end of string?
.bd16	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd18	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd1a	f0 f7		beq $bd13			beq _char_next		;   exact match?
.bd1c	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd1e	d0 db		bne $bcfb			bne _word_next
.bd20	b1 14		lda ($14),y			lda (tmp1),y		;   verify it is alpha char
.bd22	29 df		and #$df			and #$df
.bd24	e9 41		sbc #$41			sbc #'A'
.bd26	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd28	90 e9		bcc $bd13			bcc _char_next
.bd2a	b0 cf		bcs $bcfb			bcs _word_next
>bd2c	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
>bd34	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd35	02 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd37	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd38	18					.byte UF+NN	;wh_Flags	dictionary flags
=48308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd39					Int_To_Name:
.bd39	20 c9 b3	jsr $b3c9			jsr underflow_1
.bd3c	a9 7b		lda #$7b			lda #$100-Wh_xt		; convert xt on stack to proposed nt
.bd3e	20 da c9	jsr $c9da			jsr Minus_A
.bd41	b5 24		lda $24,x			lda DStack+0,x		; tmp3= proposed nt
.bd43	b4 25		ldy $25,x			ldy DStack+1,x
.bd45	85 18		sta $18				sta tmp3+0
.bd47	84 19		sty $19				sty tmp3+1
.bd49	86 14		stx $14				stx tmp1+0		; save data stack index
.bd4b	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd4d	85 15		sta $15				sta tmp1+1
.bd4f					_wordlist_next:
.bd4f	a4 15		ldy $15				ldy tmp1+1		; get next wordlist index
.bd51	c8		iny				iny
.bd52	c8		iny				iny
.bd53	84 15		sty $15				sty tmp1+1
.bd55	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd57	b0 22		bcs $bd7b			bcs _fail
.bd59	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bd5c	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd5f	4c 6e bd	jmp $bd6e			jmp _word_3
.bd62	86 16		stx $16		_word_next:	stx tmp2+0
.bd64	85 17		sta $17				sta tmp2+1
.bd66	a0 81		ldy #$81			ldy #wh_WordListLink	; follow wh_WordListLink to next word
.bd68	b1 16		lda ($16),y			lda (tmp2),y
.bd6a	aa		tax				tax
.bd6b	c8		iny				iny
.bd6c	b1 16		lda ($16),y			lda (tmp2),y
.bd6e	f0 df		beq $bd4f	_word_3:	beq _wordlist_next	;  end of list?
.bd70	c5 19		cmp $19				cmp tmp3+1		;  match?
.bd72	d0 ee		bne $bd62			bne _word_next
.bd74	e4 18		cpx $18				cpx tmp3+0
.bd76	d0 ea		bne $bd62			bne _word_next
.bd78	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd7a	60		rts				rts
.bd7b					_fail:
.bd7b	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.bd7d	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd7f	95 24		sta $24,x			sta DStack+0,x
.bd81	95 25		sta $25,x			sta DStack+1,x
.bd83	60		rts				rts
=75					CL	.var *-(WordListLink+wh_Xt)
=$bd84					en = *	; remember here
>bd37	4b					.byte CL	;wh_CodeLength
>bd84	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
>bd8c	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bd8d	b4 bc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bd8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bd90	18					.byte UF+NN	;wh_Flags	dictionary flags
=48396					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bd91					Name_To_Int:
.bd91	20 c9 b3	jsr $b3c9			jsr underflow_1
.bd94	a9 85		lda #$85			lda #wh_Xt
.bd96	4c 9a c9	jmp $c99a			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bd99					en = *	; remember here
>bd8f	08					.byte CL	;wh_CodeLength
>bd99	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bda1	69 6e 67
>bda4	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bda5	0c bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bda7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bda8	18					.byte UF+NN	;wh_Flags	dictionary flags
=48420					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bda9					Name_To_String:
.bda9	20 c9 b3	jsr $b3c9			jsr underflow_1
.bdac	b5 24		lda $24,x			lda DStack+0,x		; tmp1 = nt
.bdae	b4 25		ldy $25,x			ldy DStack+1,x
.bdb0	85 14		sta $14				sta tmp1+0
.bdb2	84 15		sty $15				sty tmp1+1
.bdb4	a0 80		ldy #$80			ldy #Wh_HNL
.bdb6	b1 14		lda ($14),y			lda (tmp1),y
.bdb8	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.bdba	48		pha				pha
.bdbb	49 ff		eor #$ff			eor #$ff
.bdbd	38		sec				sec
.bdbe	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc start offset
.bdc0	20 9a c9	jsr $c99a			jsr Plus_A		; calc start addr
.bdc3	68		pla				pla			; push length
.bdc4	4c 9b b7	jmp $b79b			jmp PushZA
=30					CL	.var *-(WordListLink+wh_Xt)
=$bdc7					en = *	; remember here
>bda7	1e					.byte CL	;wh_CodeLength
>bdc7	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
>bdcc	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdcd	24 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdcf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdd0	18					.byte UF+NN	;wh_Flags	dictionary flags
=48460					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdd1					To_Body:
.bdd1	20 c9 b3	jsr $b3c9			jsr underflow_1
.bdd4	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.bdd6	4c 9a c9	jmp $c99a			jmp Plus_A
=8					CL	.var *-(WordListLink+wh_Xt)
=$bdd9					en = *	; remember here
>bdcf	08					.byte CL	;wh_CodeLength
>bdd9	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
>bdde	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bddf	4c bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bde1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bde2	08					.byte NN	;wh_Flags	dictionary flags
=48478					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bde3					Erase:
.bde3	20 aa b7	jsr $b7aa			jsr Zero
.bde6	4c 02 be	jmp $be02			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bde9					en = *	; remember here
>bde1	06					.byte CL	;wh_CodeLength
>bde9	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
>bdee	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdef	5e bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bdf1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bdf2	08					.byte NN	;wh_Flags	dictionary flags
=48494					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bdf3					Blank:
.bdf3	20 c9 b7	jsr $b7c9			jsr Bl
.bdf6	4c 02 be	jmp $be02			jmp Fill
=6					CL	.var *-(WordListLink+wh_Xt)
=$bdf9					en = *	; remember here
>bdf1	06					.byte CL	;wh_CodeLength
>bdf9	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
>bdfd	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bdfe	6e bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be00	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be01	18					.byte UF+NN	;wh_Flags	dictionary flags
=48509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be02					Fill:
.be02	20 e3 b3	jsr $b3e3			jsr underflow_3
.be05	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be07	85 14		sta $14				sta tmp1+0
.be09	b5 29		lda $29,x			lda DStack+5,x
.be0b	85 15		sta $15				sta tmp1+1
.be0d	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be0f	85 16		sta $16				sta tmp2+0
.be11	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be13	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be15	a0 00		ldy #$00			ldy #0
.be17	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be19	f0 09		beq $be24			beq _test2
.be1b	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be1d	c8		iny				iny			; to next byte
.be1e	d0 f7		bne $be17			bne _loop
.be20	e6 15		inc $15				inc tmp1+1		; increment addr page
.be22	d0 f3		bne $be17			bne _loop
.be24	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be26	d0 f3		bne $be1b			bne _3
.be28	4c 07 ad	jmp $ad07			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-(WordListLink+wh_Xt)
=$be2b					en = *	; remember here
>be00	29					.byte CL	;wh_CodeLength
>be2b	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
>be33	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be34	7d bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be36	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be37	08					.byte NN	;wh_Flags	dictionary flags
=48563					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be38	20 74 c1	jsr $c174	Variable:	jsr Create		; compile word header & push PFA
.be3b	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be3d	a8		tay				tay
.be3e	4c ae cc	jmp $ccae			jmp Comma_YA
=9					CL	.var *-(WordListLink+wh_Xt)
=$be41					en = *	; remember here
>be36	09					.byte CL	;wh_CodeLength
>be41	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be49	65
>be4a	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be4b	b3 bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be4e	08					.byte NN	;wh_Flags	dictionary flags
=48586					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be4f	20 38 be	jsr $be38	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be52	4c ae cc	jmp $ccae			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-(WordListLink+wh_Xt)
=$be55					en = *	; remember here
>be4d	06					.byte CL	;wh_CodeLength
>be55	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
>be5d	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be5e	ca bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be60	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be61	18					.byte UF+NN	;wh_Flags	dictionary flags
=48605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be62					Constant:
.be62	20 c9 b3	jsr $b3c9			jsr underflow_1
.be65	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.be68	20 15 b7	jsr $b715			jsr LitCompile		; compile code to load registers, & pick a subroutine
.be6b	20 ea cc	jsr $ccea			jsr Jmp_Comma_YA	; compile code to JMP to the subroutine
.be6e	4c ae bb	jmp $bbae			jmp adjust_z		; fix word length
=15					CL	.var *-(WordListLink+wh_Xt)
=$be71					en = *	; remember here
>be60	0f					.byte CL	;wh_CodeLength
>be71	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>be79	74
>be7a	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be7b	dd bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be7d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be7e	18					.byte UF+NN	;wh_Flags	dictionary flags
=48634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be7f					Two_constant:
.be7f	20 de b3	jsr $b3de			jsr underflow_2
.be82	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.be85	20 13 cf	jsr $cf13			jsr Swap
.be88	20 0c b7	jsr $b70c			jsr Literal		; compile push lo cell
.be8b	20 15 b7	jsr $b715			jsr LitCompile		; compile push hi cell, YA=exit routine
.be8e	20 ea cc	jsr $ccea			jsr Jmp_Comma_YA	; compile JMP from above
.be91	4c ae bb	jmp $bbae			jmp adjust_z		; fix word length
=21					CL	.var *-(WordListLink+wh_Xt)
=$be94					en = *	; remember here
>be7d	15					.byte CL	;wh_CodeLength
>be94	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
>be99	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>be9a	fa bd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>be9c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>be9d	18					.byte UF+NN	;wh_Flags	dictionary flags
=48665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.be9e					Value:
.be9e	20 c9 b3	jsr $b3c9			jsr underflow_1
.bea1	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.bea4	20 3f b7	jsr $b73f			jsr ldya_immed_comma	; compile lda # & ldy #
.bea7	a9 59		lda #$59			lda #<PushYA		; compile jmp PushYA
.bea9	a0 b7		ldy #$b7			ldy #>PushYA
.beab	20 ea cc	jsr $ccea			jsr Jmp_Comma_YA
.beae	4c ae bb	jmp $bbae			jmp adjust_z		; fix word length
=19					CL	.var *-(WordListLink+wh_Xt)
=$beb1					en = *	; remember here
>be9c	13					.byte CL	;wh_CodeLength
>beb1	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
>beb7	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HNL
>beb8	19 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>beba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bebb	18					.byte UF+NN	;wh_Flags	dictionary flags
=48695					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bebc					TwoValue:
.bebc	20 de b3	jsr $b3de			jsr underflow_2
.bebf	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.bec2	a9 cf		lda #$cf			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bec4	a0 be		ldy #$be			ldy #>TwoValue_Runtime
.bec6	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.bec9	20 ae bb	jsr $bbae			jsr adjust_z		; fix word length
.becc	4c bc cc	jmp $ccbc			jmp Two_Comma		; compile the value, return
=19					CL	.var *-(WordListLink+wh_Xt)
=$becf					en = *	; remember here
>beba	13					.byte CL	;wh_CodeLength
.becf					TwoValue_Runtime:
.becf	68		pla				pla			; pop RTS addr, +1,
.bed0	18		clc				clc
.bed1	69 01		adc #$01			adc #1
.bed3	85 14		sta $14				sta tmp1+0
.bed5	68		pla				pla
.bed6	69 00		adc #$00			adc #0
.bed8	85 15		sta $15				sta tmp1+1
.beda	4c 32 c5	jmp $c532			jmp Two_Fetch_tmp1	; fetch the data, return
>bedd	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
>bedf	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bee0	37 be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bee2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bee3	0c					.byte NN+IM	;wh_Flags	dictionary flags
=48735					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bee4					To:
.bee4	20 11 bc	jsr $bc11			jsr Tick		; We always need the xt of the target word
.bee7	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bee9	b4 25		ldy $25,x			ldy DStack+1,x
.beeb	85 14		sta $14				sta tmp1+0
.beed	84 15		sty $15				sty tmp1+1
.beef	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bef1	b1 14		lda ($14),y			lda (tmp1),y
.bef3	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bef5	d0 38		bne $bf2f			bne _Test2
.bef7	a5 0a		lda $0a				lda state		; check compile state
.bef9	f0 20		beq $bf1b			beq _Value_interpret
.befb	a9 9f		lda #$9f			lda #<PopYA		; compile jsr PopYA
.befd	a0 b3		ldy #$b3			ldy #>PopYA
.beff	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.bf02	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf04	20 94 cc	jsr $cc94			jsr C_Comma_A
.bf07	20 eb c9	jsr $c9eb			jsr One_plus
.bf0a	20 f5 ce	jsr $cef5			jsr Dup
.bf0d	20 ab cc	jsr $ccab			jsr Comma
.bf10	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf12	20 94 cc	jsr $cc94			jsr C_Comma_A
.bf15	20 95 c9	jsr $c995			jsr Cell_Plus
.bf18	4c ab cc	jmp $ccab			jmp Comma
.bf1b					_Value_interpret:
.bf1b	20 de b3	jsr $b3de			jsr underflow_2		; ( n xt )
.bf1e	e8		inx				inx			; Drop xt
.bf1f	e8		inx				inx
.bf20	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf22	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf24	91 14		sta ($14),y			sta (tmp1),y
.bf26	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf28	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf2a	91 14		sta ($14),y			sta (tmp1),y
.bf2c	e8		inx				inx			; Drop n
.bf2d	e8		inx				inx
.bf2e	60		rts				rts
.bf2f	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf31	d0 33		bne $bf66			bne _Err
.bf33	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf35	20 9a c9	jsr $c99a			jsr Plus_A
.bf38	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf3a	b1 14		lda ($14),y			lda (tmp1),y
.bf3c	c9 cf		cmp #$cf			cmp #<TwoValue_Runtime
.bf3e	d0 11		bne $bf51			bne _Test3
.bf40	a5 0a		lda $0a				lda state		; check compile state
.bf42	f0 0a		beq $bf4e			beq _2Value_runtime
.bf44	20 3f b7	jsr $b73f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf47	a9 06		lda #$06			lda #<Two_Store_YA
.bf49	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf4b	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA	; compile JSR TwoValue_runtime; return
.bf4e	4c 00 c5	jmp $c500	_2Value_runtime: jmp Two_Store
.bf51					_Test3:
.bf51	c9 e4		cmp #$e4			cmp #<FValue_runtime
.bf53	d0 11		bne $bf66			bne _Err
.bf55	a5 0a		lda $0a				lda state		; check compile state
.bf57	f0 0a		beq $bf63			beq _FValue_interpret
.bf59	20 3f b7	jsr $b73f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf5c	a9 b0		lda #$b0			lda #<FStore_YA
.bf5e	a0 85		ldy #$85			ldy #>FStore_YA
.bf60	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA	; compile JSR FValue_runtime; return
.bf63	4c ad 85	jmp $85ad	_FValue_interpret: jmp FStore
.bf66	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bf68	20 28 b4	jsr $b428			jsr ThrowA
=135					CL	.var *-(WordListLink+wh_Xt)
=$bf6b					en = *	; remember here
>bee2	87					.byte CL	;wh_CodeLength
>bf6b	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
>bf6f	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf70	5f be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf73	08					.byte NN	;wh_Flags	dictionary flags
=48879					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf74	a9 80		lda #$80	DMax:		lda #$80
.bf76	d0 0b		bne $bf83			bne DMin3
=4					CL	.var *-(WordListLink+wh_Xt)
=$bf78					en = *	; remember here
>bf72	04					.byte CL	;wh_CodeLength
>bf78	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
>bf7c	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bf7d	ef be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bf7f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bf80	08					.byte NN	;wh_Flags	dictionary flags
=48892					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bf81	a9 00		lda #$00	DMin:		lda #0
.bf83	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bf85	20 e8 b3	jsr $b3e8			jsr underflow_4
.bf88	b5 26		lda $26,x			lda DStack+2,x	; compare
.bf8a	d5 2a		cmp $2a,x			cmp DStack+6,x
.bf8c	b5 27		lda $27,x			lda DStack+3,x
.bf8e	f5 2b		sbc $2b,x			sbc DStack+7,x
.bf90	b5 24		lda $24,x			lda DStack+0,x
.bf92	f5 28		sbc $28,x			sbc DStack+4,x
.bf94	b5 25		lda $25,x			lda DStack+1,x
.bf96	f5 29		sbc $29,x			sbc DStack+5,x
.bf98	50 02		bvc $bf9c			bvc +
.bf9a	49 80		eor #$80			eor #$80	; fix sign
.bf9c	45 16		eor $16		+		eor tmp2
.bf9e	30 0f		bmi $bfaf			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfa0	4c b6 c4	jmp $c4b6			jmp Two_Drop
=34					CL	.var *-(WordListLink+wh_Xt)
=$bfa3					en = *	; remember here
>bf7f	22					.byte CL	;wh_CodeLength
>bfa3	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
>bfa7	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfa8	fc be					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfaa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfab	18					.byte UF+NN	;wh_Flags	dictionary flags
=48935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfac	20 e8 b3	jsr $b3e8	TwoNip:		jsr underflow_4
.bfaf	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfb1	95 28		sta $28,x			sta DStack+4,x
.bfb3	b5 25		lda $25,x			lda DStack+1,x
.bfb5	95 29		sta $29,x			sta DStack+5,x
.bfb7	b5 26		lda $26,x			lda DStack+2,x
.bfb9	95 2a		sta $2a,x			sta DStack+6,x
.bfbb	b5 27		lda $27,x			lda DStack+3,x
.bfbd	95 2b		sta $2b,x			sta DStack+7,x
.bfbf	4c b6 c4	jmp $c4b6			jmp Two_Drop
=22					CL	.var *-(WordListLink+wh_Xt)
=$bfc2					en = *	; remember here
>bfaa	16					.byte CL	;wh_CodeLength
>bfc2	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
>bfc5	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfc6	27 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfc8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfc9	10					.byte UF	;wh_Flags	dictionary flags
=48965					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfca					S_To_D:
.bfca	20 c9 b3	jsr $b3c9			jsr underflow_1
.bfcd	a0 00		ldy #$00			ldy #0			; assume positive
.bfcf	b5 25		lda $25,x			lda DStack+1,x		; test n
.bfd1	10 01		bpl $bfd4			bpl +
.bfd3	88		dey				dey			; make negative
.bfd4					+
.bfd4	ca		dex				dex			; push new hi cell
.bfd5	ca		dex				dex
.bfd6	94 24		sty $24,x			sty DStack+0,x
.bfd8	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$bfda					en = *	; remember here
>bfc8	10					.byte CL	;wh_CodeLength
.bfda	60		rts				rts
>bfdb	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
>bfde	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfdf	45 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfe1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfe2	10					.byte UF	;wh_Flags	dictionary flags
=48990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bfe3					D_To_S:
.bfe3	20 de b3	jsr $b3de			jsr underflow_2
.bfe6	e8		inx				inx		; Drop hi cell
.bfe7	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$bfe8					en = *	; remember here
>bfe1	05					.byte CL	;wh_CodeLength
.bfe8	60		rts				rts
>bfe9	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
>bfeb	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>bfec	5e bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>bfee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>bfef	10					.byte UF	;wh_Flags	dictionary flags
=49003					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.bff0					D_Minus:
.bff0	20 e8 b3	jsr $b3e8			jsr underflow_4 ; two double numbers
.bff3	38		sec				sec
.bff4	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.bff6	f5 26		sbc $26,x			sbc DStack+2,x
.bff8	95 2a		sta $2a,x			sta DStack+6,x
.bffa	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.bffc	f5 27		sbc $27,x			sbc DStack+3,x
.bffe	95 2b		sta $2b,x			sta DStack+7,x
.c000	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c002	f5 24		sbc $24,x			sbc DStack+0,x
.c004	95 28		sta $28,x			sta DStack+4,x
.c006	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c008	f5 25		sbc $25,x			sbc DStack+1,x
.c00a	95 29		sta $29,x			sta DStack+5,x
.c00c	e8		inx				inx
.c00d	e8		inx				inx
.c00e	e8		inx				inx
.c00f	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c010					en = *	; remember here
>bfee	20					.byte CL	;wh_CodeLength
.c010	60		rts				rts
>c011	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
>c013	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c014	6b bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c016	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c017	10					.byte UF	;wh_Flags	dictionary flags
=49043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c018					D_Plus:
.c018	20 e8 b3	jsr $b3e8			jsr underflow_4 ; two double numbers
.c01b	18		clc				clc
.c01c	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c01e	75 2a		adc $2a,x			adc DStack+6,x
.c020	95 2a		sta $2a,x			sta DStack+6,x
.c022	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c024	75 2b		adc $2b,x			adc DStack+7,x
.c026	95 2b		sta $2b,x			sta DStack+7,x
.c028	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c02a	75 28		adc $28,x			adc DStack+4,x
.c02c	95 28		sta $28,x			sta DStack+4,x
.c02e	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c030	75 29		adc $29,x			adc DStack+5,x
.c032	95 29		sta $29,x			sta DStack+5,x
.c034	e8		inx				inx
.c035	e8		inx				inx
.c036	e8		inx				inx
.c037	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c038					en = *	; remember here
>c016	20					.byte CL	;wh_CodeLength
.c038	60		rts				rts
>c039	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
>c03c	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c03d	93 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c03f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c040	10					.byte UF	;wh_Flags	dictionary flags
=49084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c041	20 de b3	jsr $b3de	D1Plus:		jsr underflow_2
.c044	f6 26		inc $26,x			inc DStack+2,x
.c046	d0 0a		bne $c052			bne +
.c048	f6 27		inc $27,x			inc DStack+3,x
.c04a	d0 06		bne $c052			bne +
.c04c	f6 24		inc $24,x			inc DStack+0,x
.c04e	d0 02		bne $c052			bne +
.c050	f6 25		inc $25,x			inc DStack+1,x
.c052					+
=17					CL	.var *-(WordListLink+wh_Xt)
=$c052					en = *	; remember here
>c03f	11					.byte CL	;wh_CodeLength
.c052	60		rts				rts
>c053	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
>c056	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c057	bc bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c059	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c05a	10					.byte UF	;wh_Flags	dictionary flags
=49110					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c05b	20 de b3	jsr $b3de	D1Minus:	jsr underflow_2
.c05e	b5 26		lda $26,x			lda DStack+2,x
.c060	d0 0e		bne $c070			bne _1
.c062	b5 27		lda $27,x			lda DStack+3,x
.c064	d0 08		bne $c06e			bne _2
.c066	b5 24		lda $24,x			lda DStack+0,x
.c068	d0 02		bne $c06c			bne _3
.c06a	d6 25		dec $25,x			dec DStack+1,x
.c06c	d6 24		dec $24,x	_3:		dec DStack+0,x
.c06e	d6 27		dec $27,x	_2:		dec DStack+3,x
.c070	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$c072					en = *	; remember here
>c059	17					.byte CL	;wh_CodeLength
.c072	60		rts				rts
>c073	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
>c078	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c079	d6 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c07b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c07c	18					.byte UF+NN	;wh_Flags	dictionary flags
=49144					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c07d					Allot:
.c07d	20 c9 b3	jsr $b3c9			jsr underflow_1
.c080	18		clc				clc			; adjust cp
.c081	b5 24		lda $24,x			lda DStack+0,x
.c083	65 00		adc $00				adc cp+0
.c085	85 00		sta $00				sta cp+0
.c087	a8		tay				tay			;   save lo byte
.c088	b5 25		lda $25,x			lda DStack+1,x
.c08a	85 14		sta $14				sta tmp1
.c08c	65 01		adc $01				adc cp+1
.c08e	85 01		sta $01				sta cp+1
.c090	24 14		bit $14				bit tmp1
.c092	30 15		bmi $c0a9			bmi _release
.c094	b0 06		bcs $c09c			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c096	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c098	e9 7f		sbc #$7f			sbc #>_last
.c09a	90 2c		bcc $c0c8			bcc _done		; we're fine.
.c09c					_pos_err:
.c09c	a9 58		lda #$58			lda #<_last
.c09e	85 00		sta $00				sta cp+0
.c0a0	a9 7f		lda #$7f			lda #>_last
.c0a2	85 01		sta $01				sta cp+1
.c0a4	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0a6	4c 28 b4	jmp $b428			jmp ThrowA
.c0a9					_release:
.c0a9	90 06		bcc $c0b1			bcc _neg_err		; borrow indicates we've gone below 0
.c0ab	c0 66		cpy #$66			cpy #<cp0
.c0ad	e9 0b		sbc #$0b			sbc #>cp0
.c0af	b0 17		bcs $c0c8			bcs _done
.c0b1					_neg_err:
.c0b1	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0b3	85 00		sta $00				sta cp+0
.c0b5	a9 0b		lda #$0b			lda #>cp0
.c0b7	85 01		sta $01				sta cp+1
.c0b9	a9 ab		lda #$ab			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0bb	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0be	a9 ce		lda #$ce			lda #>forth_dictionary_start
.c0c0	8d 13 03	sta $0313			sta WordlistsV+1
.c0c3	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0c5	4c 28 b4	jmp $b428			jmp ThrowA
.c0c8					_done:
.c0c8	e8		inx				inx			; Drop n
.c0c9	e8		inx				inx
=77					CL	.var *-(WordListLink+wh_Xt)
=$c0ca					en = *	; remember here
>c07b	4d					.byte CL	;wh_CodeLength
.c0ca	60		rts				rts
>c0cb	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
>c0d2	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c0d3	f8 bf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c0d5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c0d6	08					.byte NN	;wh_Flags	dictionary flags
=49234					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c0d7					Header_Comma:
.c0d7	20 e5 c0	jsr $c0e5			jsr Header_Build
.c0da					Header_Link:
.c0da	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c0dc	85 10		sta $10				sta dp+0
.c0de	a5 0f		lda $0f				lda WorkWord+1
.c0e0	85 11		sta $11				sta dp+1
.c0e2	4c 2b ba	jmp $ba2b			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c0e5					Header_Build:
.c0e5	20 7b ba	jsr $ba7b			jsr parse_name_check	; get name string, throw error if empty string
.c0e8	20 4f cc	jsr $cc4f			jsr Two_dup		; ( addr u addr u )
.c0eb	20 c9 a0	jsr $a0c9			jsr Get_Current
.c0ee	20 69 a0	jsr $a069			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c0f1	e8		inx				inx			; pop flag.
.c0f2	e8		inx				inx
.c0f3	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c0f5	f0 21		beq $c118			beq _new_name		; We haven't seen this one before.
.c0f7	e8		inx				inx			; Drop xt
.c0f8	e8		inx				inx
.c0f9	24 0c		bit $0c				bit status		; Check bit 7
.c0fb	10 08		bpl $c105			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c0fd	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c0ff	05 0c		ora $0c				ora status
.c101	85 0c		sta $0c				sta status
.c103	d0 19		bne $c11e			bne _process_name
.c105					_redefined_name:
.c105	a9 66		lda #$66			lda #<str_redefined
.c107	a0 da		ldy #$da			ldy #>str_redefined
.c109	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.c10c	20 4f cc	jsr $cc4f			jsr Two_dup		 ; ( addr u addr u )
.c10f	20 7d cd	jsr $cd7d			jsr Type
.c112	20 70 cd	jsr $cd70			jsr Space
.c115	4c 1e c1	jmp $c11e			jmp _process_name
.c118					_new_name:
.c118	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c11a	25 0c		and $0c				and status
.c11c	85 0c		sta $0c				sta status
.c11e					_process_name:
.c11e	20 4f cc	jsr $cc4f			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c121	20 b7 c9	jsr $c9b7			jsr Here
.c124	20 13 cf	jsr $cf13			jsr Swap
.c127	20 5f ad	jsr $ad5f			jsr CMove
.c12a	20 f5 ce	jsr $cef5			jsr Dup		;   save length
.c12d	20 7d c0	jsr $c07d			jsr Allot
.c130	20 b7 c9	jsr $c9b7			jsr Here
.c133	20 c5 c9	jsr $c9c5			jsr One_Minus
.c136	a1 24		lda ($24,x)			lda (DStack+0,x)
.c138	0a		asl a				asl a
.c139	0a		asl a				asl a
.c13a	0a		asl a				asl a
.c13b	0a		asl a				asl a
.c13c	0a		asl a				asl a
.c13d	95 24		sta $24,x			sta DStack+0,x
.c13f	20 0d cb	jsr $cb0d			jsr Or
.c142	20 91 cc	jsr $cc91			jsr C_Comma		; compile wh_HNL
.c145	e8		inx				inx			; drop name string addr
.c146	e8		inx				inx
.c147	20 1b ba	jsr $ba1b			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c14a	a5 10		lda $10				lda dp+0		; compile wh_WordListLink
.c14c	a4 11		ldy $11				ldy dp+1
.c14e	20 ae cc	jsr $ccae			jsr Comma_YA
.c151	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c153	20 94 cc	jsr $cc94			jsr C_Comma_A
.c156	a9 08		lda #$08			lda #NN			; compile wh_Flags
.c158	20 94 cc	jsr $cc94			jsr C_Comma_A
.c15b	38		sec				sec			; WorkWord= nt
.c15c	a5 00		lda $00				lda cp+0
.c15e	e9 85		sbc #$85			sbc #wh_xt
.c160	85 0e		sta $0e				sta WorkWord+0
.c162	a5 01		lda $01				lda cp+1
.c164	e9 00		sbc #$00			sbc #0
.c166	85 0f		sta $0f				sta WorkWord+1
.c168	60		rts				rts
=146					CL	.var *-(WordListLink+wh_Xt)
=$c169					en = *	; remember here
>c0d5	92					.byte CL	;wh_CodeLength
>c169	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
>c16f	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c170	52 c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c172	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c173	08					.byte NN	;wh_Flags	dictionary flags
=49391					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c174					Create:
.c174	20 d7 c0	jsr $c0d7			jsr Header_Comma	; compile word header
.c177	a9 81		lda #$81			lda #<DoVar
.c179	a0 c1		ldy #$c1			ldy #>DoVar
.c17b	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.c17e	4c ae bb	jmp $bbae			jmp adjust_z
=13					CL	.var *-(WordListLink+wh_Xt)
=$c181					en = *	; remember here
>c172	0d					.byte CL	;wh_CodeLength
.c181					DoVar:
.c181	68		pla				pla		; Pull the return address off the machine's stack
.c182	18		clc				clc		;   +1 because of the way the JSR works
.c183	69 01		adc #$01			adc #1
.c185	ca		dex				dex		; push on data stack
.c186	ca		dex				dex
.c187	95 24		sta $24,x			sta DStack+0,x
.c189	68		pla				pla
.c18a	69 00		adc #$00			adc #0
.c18c	95 25		sta $25,x			sta DStack+1,x
.c18e	60		rts				rts		; takes us to the original caller of the
>c18f	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
>c194	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c195	ef c0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c197	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c198	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=49428					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c199					Does:
.c199	a0 c1		ldy #$c1			ldy #>_runtime
.c19b	a9 b3		lda #$b3			lda #<_runtime
.c19d	20 d3 cc	jsr $ccd3			jsr Jsr_Comma_YA
.c1a0	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1a2	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1a4	20 ae cc	jsr $ccae			jsr Comma_YA
.c1a7	a9 68		lda #$68			lda #$68		; compile PLA
.c1a9	20 94 cc	jsr $cc94			jsr C_Comma_A
.c1ac	a0 c1		ldy #$c1			ldy #>_dodoes
.c1ae	a9 c5		lda #$c5			lda #<_dodoes
.c1b0	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
=26					CL	.var *-(WordListLink+wh_Xt)
=$c1b3					en = *	; remember here
>c197	1a					.byte CL	;wh_CodeLength
.c1b3					_runtime:
.c1b3	20 1b ba	jsr $ba1b			jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.c1b6	18		clc				clc
.c1b7	68		pla				pla		; RTS addr LSB
.c1b8	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c1ba	a0 86		ldy #$86			ldy #Wh_xt+1
.c1bc	91 10		sta ($10),y			sta (dp),y
.c1be	68		pla				pla		; RTS addr MSB
.c1bf	69 00		adc #$00			adc #0
.c1c1	c8		iny				iny
.c1c2	91 10		sta ($10),y			sta (dp),y
.c1c4	60		rts				rts
.c1c5					_dodoes:
.c1c5	c8		iny				iny		; +1 for JSR behavior
.c1c6	d0 03		bne $c1cb			bne +
.c1c8	18		clc				clc
.c1c9	69 01		adc #$01			adc #1
.c1cb					+
.c1cb	4c 03 cf	jmp $cf03			jmp PushAY
>c1ce	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
>c1d4	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1d5	14 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1d7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1d8	00					.byte 0	;wh_Flags	dictionary flags
=49492					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1d9					Unused:
=32600					_last = cp_end-2*padoffset
.c1d9	ca		dex				dex
.c1da	ca		dex				dex
.c1db	38		sec				sec
.c1dc	a9 58		lda #$58			lda #<_last
.c1de	e5 00		sbc $00				sbc cp+0
.c1e0	95 24		sta $24,x			sta DStack+0,x
.c1e2	a9 7f		lda #$7f			lda #>_last
.c1e4	e5 01		sbc $01				sbc cp+1
.c1e6	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c1e8					en = *	; remember here
>c1d7	0f					.byte CL	;wh_CodeLength
.c1e8	60		rts				rts
>c1e9	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
>c1ee	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c1ef	54 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c1f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c1f2	08					.byte NN	;wh_Flags	dictionary flags
=49518					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c1f3					Depth:
.c1f3	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c1f5	86 1a		stx $1a				stx tmp4
.c1f7	38		sec				sec
.c1f8	e5 1a		sbc $1a				sbc tmp4
.c1fa	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c1fb	4c 9b b7	jmp $b79b			jmp PushZA
=11					CL	.var *-(WordListLink+wh_Xt)
=$c1fe					en = *	; remember here
>c1f1	0b					.byte CL	;wh_CodeLength
>c1fe	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
>c201	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c202	6e c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c204	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c205	08					.byte NN	;wh_Flags	dictionary flags
=49537					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c206	20 0c c2	jsr $c20c	Key:		jsr key_a		; returns char in A
.c209	4c 9b b7	jmp $b79b			jmp PushZA
=6					CL	.var *-(WordListLink+wh_Xt)
=$c20c					en = *	; remember here
>c204	06					.byte CL	;wh_CodeLength
.c20c					Key_A:
.c20c	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c20f	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
>c213	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c214	81 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c216	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c217	08					.byte NN	;wh_Flags	dictionary flags
=49555					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c218	20 1e c2	jsr $c21e	KeyQ:		jsr KeyQ_A
.c21b	4c 9b b7	jmp $b79b			jmp PushZA
.c21e	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c221	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
>c227	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c228	93 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c22a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c22b	08					.byte NN	;wh_Flags	dictionary flags
=49575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c22c					Refill:
.c22c	a9 00		lda #$00			lda #0			; show empty in case of error
.c22e	85 06		sta $06				sta ciblen+0
.c230	85 07		sta $07				sta ciblen+1
.c232	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c234	d0 24		bne $c25a			bne _src_not_kbd
.c236	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c238	a4 05		ldy $05				ldy cib+1
.c23a	20 59 b7	jsr $b759			jsr PushYA
.c23d	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c23f	20 9b b7	jsr $b79b			jsr PushZA		;  cheat: We only accept max 255
.c242	20 71 c2	jsr $c271			jsr Accept		; ( addr n1 -- n2)
.c245	b5 24		lda $24,x			lda DStack+0,x
.c247	85 06		sta $06				sta ciblen+0
.c249	b5 25		lda $25,x			lda DStack+1,x
.c24b	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c24d	a9 00		lda #$00			lda #0
.c24f	85 08		sta $08				sta toin+0
.c251	85 09		sta $09				sta toin+1
.c253	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c255	95 24		sta $24,x			sta DStack+0,x
.c257	95 25		sta $25,x			sta DStack+1,x
.c259	60		rts				rts
.c25a					_src_not_kbd:
.c25a	c9 ff		cmp #$ff			cmp #$ff
.c25c	d0 03		bne $c261			bne _src_not_string
.c25e	4c 8c b7	jmp $b78c			jmp False
.c261					_src_not_string:
.c261	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c263	20 28 b4	jsr $b428			jsr ThrowA
=58					CL	.var *-(WordListLink+wh_Xt)
=$c266					en = *	; remember here
>c22a	3a					.byte CL	;wh_CodeLength
>c266	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
>c26c	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c26d	a7 c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c26f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c270	18					.byte UF+NN	;wh_Flags	dictionary flags
=49644					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c271					Accept:
.c271	20 de b3	jsr $b3de			jsr underflow_2
.c274	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c276	15 25		ora $25,x			ora DStack+1,x
.c278	d0 09		bne $c283			bne _not_zero
.c27a	e8		inx				inx			; drop n
.c27b	e8		inx				inx
.c27c	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c27e	95 25		sta $25,x			sta DStack+1,x
.c280	4c 58 c3	jmp $c358			jmp accept_done
.c283					_not_zero:
.c283	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c285	85 16		sta $16				sta tmp2
.c287	a9 00		lda #$00			lda #0
.c289	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c28b	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c28d	85 14		sta $14				sta tmp1
.c28f	b5 27		lda $27,x			lda DStack+3,x
.c291	85 15		sta $15				sta tmp1+1
.c293	e8		inx				inx
.c294	e8		inx				inx
.c295	a0 00		ldy #$00			ldy #0
.c297	a5 0c		lda $0c				lda status
.c299	29 f7		and #$f7			and #$f7
.c29b	18		clc				clc
.c29c	69 01		adc #$01			adc #1
.c29e	09 08		ora #$08			ora #$08
.c2a0	85 0c		sta $0c				sta status
.c2a2					accept_loop:
.c2a2	20 0c c2	jsr $c20c			jsr key_a
.c2a5	c9 0a		cmp #$0a			cmp #AscLF
.c2a7	f0 20		beq $c2c9			beq _eol
.c2a9	c9 0d		cmp #$0d			cmp #AscCR
.c2ab	f0 1c		beq $c2c9			beq _eol
.c2ad	c9 08		cmp #$08			cmp #AscBS
.c2af	f0 24		beq $c2d5			beq _backspace
.c2b1	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2b3	f0 20		beq $c2d5			beq _backspace
.c2b5	c9 10		cmp #$10			cmp #AscCP
.c2b7	f0 37		beq $c2f0			beq _ctrl_p
.c2b9	c9 0e		cmp #$0e			cmp #AscCN
.c2bb	f0 46		beq $c303			beq _ctrl_n
.c2bd	91 14		sta ($14),y			sta (tmp1),y
.c2bf	c8		iny				iny
.c2c0	20 63 cd	jsr $cd63			jsr Emit_A
.c2c3	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c2c5	d0 db		bne $c2a2			bne accept_loop	      ; fall through if buffer limit reached
.c2c7	f0 03		beq $c2cc			beq _buffer_full
.c2c9					_eol:
.c2c9	20 70 cd	jsr $cd70			jsr Space	; print final space
.c2cc					_buffer_full:
.c2cc	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c2ce	a9 00		lda #$00			lda #0
.c2d0	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c2d2	4c 58 c3	jmp $c358			jmp accept_done
.c2d5					_backspace:
.c2d5	c0 00		cpy #$00			cpy #0		; buffer empty?
.c2d7	d0 06		bne $c2df			bne +
.c2d9	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c2db	20 63 cd	jsr $cd63			jsr Emit_A
.c2de	c8		iny				iny
.c2df					+
.c2df	88		dey				dey
.c2e0	a9 08		lda #$08			lda #AscBS	; move back one
.c2e2	20 63 cd	jsr $cd63			jsr Emit_A
.c2e5	20 70 cd	jsr $cd70			jsr Space	; print a space (rubout)
.c2e8	a9 08		lda #$08			lda #AscBS	; move back over space
.c2ea	20 63 cd	jsr $cd63			jsr Emit_A
.c2ed	4c a2 c2	jmp $c2a2			jmp accept_loop
.c2f0					_ctrl_p:
.c2f0	a5 0c		lda $0c				lda status
.c2f2	29 07		and #$07			and #7
.c2f4	d0 08		bne $c2fe			bne _ctrl_p_dec
.c2f6	a5 0c		lda $0c				lda status
.c2f8	09 07		ora #$07			ora #7
.c2fa	85 0c		sta $0c				sta status
.c2fc	d0 14		bne $c312			bne _recall_history
.c2fe					_ctrl_p_dec:
.c2fe	c6 0c		dec $0c				dec status
.c300	4c 12 c3	jmp $c312			jmp _recall_history
.c303					_ctrl_n:
.c303	a9 08		lda #$08			lda #$8
.c305	24 0c		bit $0c				bit status
.c307	d0 09		bne $c312			bne _recall_history
.c309	a5 0c		lda $0c				lda status
.c30b	29 f7		and #$f7			and #$f7
.c30d	18		clc				clc
.c30e	69 01		adc #$01			adc #1
.c310	85 0c		sta $0c				sta status
.c312					_recall_history:
.c312	a9 f7		lda #$f7			lda #$ff-%00001000
.c314	25 0c		and $0c				and status
.c316	85 0c		sta $0c				sta status
.c318	20 73 c3	jsr $c373			jsr accept_total_recall
.c31b	a9 0d		lda #$0d			lda #AscCR
.c31d	20 63 cd	jsr $cd63			jsr Emit_A
.c320					input_clear:
.c320	c0 00		cpy #$00			cpy #0
.c322	f0 07		beq $c32b			beq input_cleared
.c324	20 70 cd	jsr $cd70			jsr Space
.c327	88		dey				dey
.c328	4c 20 c3	jmp $c320			jmp input_clear
.c32b					input_cleared:
.c32b	a9 0d		lda #$0d			lda #AscCR
.c32d	20 63 cd	jsr $cd63			jsr Emit_A
.c330	b1 18		lda ($18),y			lda (tmp3),y
.c332	85 0d		sta $0d				sta status+1
.c334	e6 18		inc $18				inc tmp3
.c336	d0 02		bne $c33a			bne +		; Increment the upper byte on carry.
.c338	e6 19		inc $19				inc tmp3+1
.c33a					+
.c33a	a9 0d		lda #$0d			lda #AscCR
.c33c	20 63 cd	jsr $cd63			jsr Emit_A
.c33f					_history_loop:
.c33f	c4 0d		cpy $0d				cpy status+1
.c341	d0 03		bne $c346			bne +
.c343	4c a2 c2	jmp $c2a2			jmp accept_loop	      ; Needs a long jump
.c346					+
.c346	c4 16		cpy $16				cpy tmp2
.c348	f0 0a		beq $c354			beq _hist_filled_buffer
.c34a	b1 18		lda ($18),y			lda (tmp3),y
.c34c	91 14		sta ($14),y			sta (tmp1),y
.c34e	20 63 cd	jsr $cd63			jsr Emit_A
.c351	c8		iny				iny
.c352	d0 eb		bne $c33f			bne _history_loop
.c354					_hist_filled_buffer:
.c354	88		dey				dey
.c355	4c a2 c2	jmp $c2a2			jmp accept_loop
.c358					accept_done:
.c358	20 73 c3	jsr $c373			jsr accept_total_recall
.c35b	85 0d		sta $0d				sta status+1
.c35d	a0 00		ldy #$00			ldy #0
.c35f	91 18		sta ($18),y			sta (tmp3),y
.c361	e6 18		inc $18				inc tmp3
.c363	d0 02		bne $c367			bne +		; Increment the upper byte on carry.
.c365	e6 19		inc $19				inc tmp3+1
.c367					+
.c367					_save_history_loop:
.c367	c4 0d		cpy $0d				cpy status+1
.c369	f0 07		beq $c372			beq _save_history_done
.c36b	b1 14		lda ($14),y			lda (tmp1),y
.c36d	91 18		sta ($18),y			sta (tmp3),y
.c36f	c8		iny				iny
.c370	d0 f5		bne $c367			bne _save_history_loop
.c372					_save_history_done:
=257					CL	.var *-(WordListLink+wh_Xt)
=$ff					CL	 .var $ff
=$c372					en = *	; remember here
>c26f	ff					.byte CL	;wh_CodeLength
.c372	60		rts				rts
.c373					accept_total_recall:
.c373	a9 66		lda #$66			lda #<hist_buff
.c375	85 18		sta $18				sta tmp3
.c377	a9 07		lda #$07			lda #>hist_buff
.c379	85 19		sta $19				sta tmp3+1
.c37b	a5 0c		lda $0c				lda status
.c37d	6a		ror a				ror
.c37e	29 03		and #$03			and #3
.c380	18		clc				clc
.c381	65 19		adc $19				adc tmp3+1
.c383	85 19		sta $19				sta tmp3+1
.c385	a5 0c		lda $0c				lda status
.c387	6a		ror a				ror		; Rotate through carry into msb.
.c388	6a		ror a				ror
.c389	29 80		and #$80			and #$80
.c38b	18		clc				clc
.c38c	65 18		adc $18				adc tmp3
.c38e	85 18		sta $18				sta tmp3
.c390	90 02		bcc $c394			bcc +		; Increment the upper byte on carry.
.c392	e6 19		inc $19				inc tmp3+1
.c394					+
.c394	98		tya				tya
.c395	c9 80		cmp #$80			cmp #$80
.c397	90 02		bcc $c39b			bcc +
.c399	a9 7f		lda #$7f			lda #$7F
.c39b					+
.c39b	60		rts				rts
>c39c	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
>c3a3	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3a4	ec c1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3a6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3a7	08					.byte NN	;wh_Flags	dictionary flags
=49955					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3a8					Input_To_R:
.c3a8	68		pla				pla			; move it out of the way
.c3a9	85 14		sta $14				sta tmp1+0
.c3ab	68		pla				pla
.c3ac	85 15		sta $15				sta tmp1+1
.c3ae	a0 07		ldy #$07			ldy #7
.c3b0	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3b3	48		pha				pha
.c3b4	88		dey				dey
.c3b5	10 f9		bpl $c3b0			bpl _loop
.c3b7	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3b9	48		pha				pha
.c3ba	a5 14		lda $14				lda tmp1+0
.c3bc	48		pha				pha
=21					CL	.var *-(WordListLink+wh_Xt)
=$c3bd					en = *	; remember here
>c3a6	15					.byte CL	;wh_CodeLength
.c3bd	60		rts				rts
>c3be	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
>c3c5	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3c6	23 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3c9	08					.byte NN	;wh_Flags	dictionary flags
=49989					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3ca					R_To_Input:
.c3ca	68		pla				pla		 ; move it out of the way
.c3cb	85 14		sta $14				sta tmp1+0
.c3cd	68		pla				pla
.c3ce	85 15		sta $15				sta tmp1+1
.c3d0	a0 00		ldy #$00			ldy #0
.c3d2	68		pla		_loop:		pla
.c3d3	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c3d6	c8		iny				iny
.c3d7	c0 08		cpy #$08			cpy #8
.c3d9	d0 f7		bne $c3d2			bne _loop
.c3db	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c3dd	48		pha				pha
.c3de	a5 14		lda $14				lda tmp1+0
.c3e0	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$c3e1					en = *	; remember here
>c3c8	17					.byte CL	;wh_CodeLength
.c3e1	60		rts				rts
>c3e2	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
>c3e8	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c3e9	45 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c3eb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c3ec	10					.byte UF	;wh_Flags	dictionary flags
=50024					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c3ed					Bounds:
.c3ed	20 de b3	jsr $b3de			jsr underflow_2
.c3f0	18		clc				clc
.c3f1	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c3f3	a8		tay				tay
.c3f4	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c3f6	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c3f8	94 24		sty $24,x			sty DStack+0,x
.c3fa	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c3fc	a8		tay				tay
.c3fd	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c3ff	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c401	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-(WordListLink+wh_Xt)
=$c403					en = *	; remember here
>c3eb	16					.byte CL	;wh_CodeLength
.c403	60		rts				rts
>c404	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
>c40a	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c40b	68 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c40d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c40e	18					.byte UF+NN	;wh_Flags	dictionary flags
=50058					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c40f					Spaces:
.c40f	20 c9 b3	jsr $b3c9			jsr underflow_1
.c412	4c 18 c4	jmp $c418			jmp _test
.c415					_loop:
.c415	20 70 cd	jsr $cd70			jsr Space		; print a space
.c418	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c41a	10 f9		bpl $c415			bpl _loop
.c41c	e8		inx				inx			; Drop
.c41d	e8		inx				inx
=15					CL	.var *-(WordListLink+wh_Xt)
=$c41e					en = *	; remember here
>c40d	0f					.byte CL	;wh_CodeLength
.c41e	60		rts				rts
>c41f	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c427	67
>c428	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c429	8a c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c42b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c42c	18					.byte UF+NN	;wh_Flags	dictionary flags
=50088					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c42d					Minus_trailing:
.c42d	20 de b3	jsr $b3de			jsr underflow_2
.c430	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c432	85 14		sta $14				sta tmp1+0
.c434	b5 27		lda $27,x			lda DStack+3,x
.c436	18		clc				clc
.c437	75 25		adc $25,x			adc DStack+1,x
.c439	85 15		sta $15				sta tmp1+1
.c43b	b4 24		ldy $24,x			ldy DStack+0,x
.c43d	88		dey		_loop:		dey			; back 1 char
.c43e	c0 ff		cpy #$ff			cpy #$ff
.c440	d0 06		bne $c448			bne +
.c442	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c444	d6 25		dec $25,x			dec DStack+1,x
.c446	30 06		bmi $c44e			bmi _done
.c448					+
.c448	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c44a	c9 20		cmp #$20			cmp #AscSP
.c44c	f0 ef		beq $c43d			beq _loop
.c44e	c8		iny		_done:		iny			; forward 1 char
.c44f	d0 02		bne $c453			bne +
.c451	f6 25		inc $25,x			inc DStack+1,x
.c453	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-(WordListLink+wh_Xt)
=$c455					en = *	; remember here
>c42b	28					.byte CL	;wh_CodeLength
.c455	60		rts				rts
>c456	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
>c45e	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c45f	a8 c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c461	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c462	18					.byte UF+NN	;wh_Flags	dictionary flags
=50142					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c463					Minus_leading:
.c463	20 de b3	jsr $b3de			jsr underflow_2
.c466					_loop:
.c466	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c468	15 25		ora $25,x			ora DStack+1,x
.c46a	f0 0f		beq $c47b			beq _done
.c46c	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c46e	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c470	b0 09		bcs $c47b			bcs _done
.c472	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus
.c475	20 c8 c9	jsr $c9c8			jsr One_Minus_NoUF
.c478	4c 66 c4	jmp $c466			jmp _loop
.c47b					_done:
=24					CL	.var *-(WordListLink+wh_Xt)
=$c47b					en = *	; remember here
>c461	18					.byte CL	;wh_CodeLength
.c47b	60		rts				rts
>c47c	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
>c483	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c484	de c3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c486	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c487	18					.byte UF+NN	;wh_Flags	dictionary flags
=50179					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c488					Slash_String:
.c488	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c48a	b0 1d		bcs $c4a9		bcs Throw_Stack_20
.c48c	18		clc				clc		; addr += n
.c48d	b5 24		lda $24,x			lda DStack+0,x
.c48f	75 28		adc $28,x			adc DStack+4,x
.c491	95 28		sta $28,x			sta DStack+4,x
.c493	b5 25		lda $25,x			lda DStack+1,x
.c495	75 29		adc $29,x			adc DStack+5,x
.c497	95 29		sta $29,x			sta DStack+5,x
.c499	38		sec				sec		; u -= n
.c49a	b5 26		lda $26,x			lda DStack+2,x
.c49c	f5 24		sbc $24,x			sbc DStack+0,x
.c49e	95 26		sta $26,x			sta DStack+2,x
.c4a0	b5 27		lda $27,x			lda DStack+3,x
.c4a2	f5 25		sbc $25,x			sbc DStack+1,x
.c4a4	95 27		sta $27,x			sta DStack+3,x
.c4a6	e8		inx				inx		; Drop n
.c4a7	e8		inx				inx
=32					CL	.var *-(WordListLink+wh_Xt)
=$c4a8					en = *	; remember here
>c486	20					.byte CL	;wh_CodeLength
.c4a8	60		rts				rts
.c4a9	4c ed b3	jmp $b3ed	Throw_Stack_20: jmp Throw_Stack
>c4ac	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
>c4b1	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4b2	03 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4b5	10					.byte UF	;wh_Flags	dictionary flags
=50225					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4b6					Two_drop:
.c4b6	20 de b3	jsr $b3de			jsr underflow_2
.c4b9	e8		inx				inx
.c4ba	e8		inx				inx
.c4bb	e8		inx				inx
.c4bc	e8		inx				inx
=7					CL	.var *-(WordListLink+wh_Xt)
=$c4bd					en = *	; remember here
>c4b4	07					.byte CL	;wh_CodeLength
.c4bd	60		rts				rts
>c4be	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
>c4c3	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4c4	31 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4c6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4c7	08					.byte NN	;wh_Flags	dictionary flags
=50243					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4c8					Two_swap:
.c4c8	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4ca	b0 dd		bcs $c4a9		bcs Throw_Stack_20
.c4cc	86 14		stx $14				stx tmp1
.c4ce	ca		dex				dex
.c4cf	ca		dex				dex
.c4d0	ca		dex				dex
.c4d1	ca		dex				dex
.c4d2	e8		inx		_loop:		inx
.c4d3	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c4d5	b4 2b		ldy $2b,x			ldy DStack+7,x
.c4d7	95 2b		sta $2b,x			sta DStack+7,x
.c4d9	94 27		sty $27,x			sty DStack+3,x
.c4db	e4 14		cpx $14				cpx tmp1
.c4dd	90 f3		bcc $c4d2			bcc _loop
=23					CL	.var *-(WordListLink+wh_Xt)
=$c4df					en = *	; remember here
>c4c6	17					.byte CL	;wh_CodeLength
.c4df	60		rts				rts
>c4e0	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
>c4e5	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4e6	43 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4e9	18					.byte UF+NN	;wh_Flags	dictionary flags
=50277					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c4ea					Two_over:
.c4ea	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c4ec	b0 bb		bcs $c4a9		bcs Throw_Stack_20
.c4ee	a0 04		ldy #$04			ldy #4
.c4f0	ca		dex		_loop:		dex
.c4f1	b5 2c		lda $2c,x			lda DStack+8,x
.c4f3	95 24		sta $24,x			sta DStack+0,x
.c4f5	88		dey				dey
.c4f6	d0 f8		bne $c4f0			bne _loop
=14					CL	.var *-(WordListLink+wh_Xt)
=$c4f8					en = *	; remember here
>c4e8	0e					.byte CL	;wh_CodeLength
.c4f8	60		rts				rts
>c4f9	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
>c4fb	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c4fc	65 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c4fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c4ff	10					.byte UF	;wh_Flags	dictionary flags
=50299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c500					Two_Store:
.c500	20 e3 b3	jsr $b3e3			jsr underflow_3
.c503	20 9f b3	jsr $b39f			jsr PopYA
.c506	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c508	84 15		sty $15				sty tmp1+1
.c50a	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c50c	a0 00		ldy #$00			ldy #0
.c50e	91 14		sta ($14),y			sta (tmp1),y
.c510	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c512	c8		iny				iny
.c513	91 14		sta ($14),y			sta (tmp1),y
.c515	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c517	c8		iny				iny
.c518	91 14		sta ($14),y			sta (tmp1),y
.c51a	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c51c	c8		iny				iny
.c51d	91 14		sta ($14),y			sta (tmp1),y
.c51f	e8		inx				inx		; 2Drop
.c520	e8		inx				inx
.c521	e8		inx				inx
.c522	e8		inx				inx
=35					CL	.var *-(WordListLink+wh_Xt)
=$c523					en = *	; remember here
>c4fe	23					.byte CL	;wh_CodeLength
.c523	60		rts				rts
>c524	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
>c526	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c527	7b c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c529	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c52a	00					.byte 0	;wh_Flags	dictionary flags
=50342					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c52b	20 9f b3	jsr $b39f	Two_fetch:	jsr PopYA
.c52e	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c530	84 15		sty $15				sty tmp1+1
.c532					Two_Fetch_tmp1:
.c532	ca		dex				dex
.c533	ca		dex				dex
.c534	ca		dex				dex
.c535	ca		dex				dex
.c536	a0 00		ldy #$00			ldy #0		; copy LSB
.c538	b1 14		lda ($14),y			lda (tmp1),y
.c53a	95 24		sta $24,x			sta DStack+0,x
.c53c	c8		iny				iny		; copy next
.c53d	b1 14		lda ($14),y			lda (tmp1),y
.c53f	95 25		sta $25,x			sta DStack+1,x
.c541	c8		iny				iny		; copy next
.c542	b1 14		lda ($14),y			lda (tmp1),y
.c544	95 26		sta $26,x			sta DStack+2,x
.c546	c8		iny				iny		; copy next
.c547	b1 14		lda ($14),y			lda (tmp1),y
.c549	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c54b					en = *	; remember here
>c529	20					.byte CL	;wh_CodeLength
.c54b	60		rts				rts
>c54c	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
>c54e	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c54f	a6 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c551	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c552	08					.byte NN	;wh_Flags	dictionary flags
=50382					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c553	20 9f b3	jsr $b39f	DFetch:		jsr PopYA
.c556	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c558	84 15		sty $15				sty tmp1+1
.c55a	ca		dex				dex
.c55b	ca		dex				dex
.c55c	ca		dex				dex
.c55d	ca		dex				dex
.c55e	a0 00		ldy #$00			ldy #0
.c560	b1 14		lda ($14),y			lda (tmp1),y
.c562	95 26		sta $26,x			sta DStack+2,x
.c564	c8		iny				iny
.c565	b1 14		lda ($14),y			lda (tmp1),y
.c567	95 27		sta $27,x			sta DStack+3,x
.c569	c8		iny				iny
.c56a	b1 14		lda ($14),y			lda (tmp1),y
.c56c	95 24		sta $24,x			sta DStack+0,x
.c56e	c8		iny				iny
.c56f	b1 14		lda ($14),y			lda (tmp1),y
.c571	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-(WordListLink+wh_Xt)
=$c573					en = *	; remember here
>c551	20					.byte CL	;wh_CodeLength
.c573	60		rts				rts
>c574	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
>c577	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c578	ce c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c57a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c57b	09					.byte CO+NN	;wh_Flags	dictionary flags
=50423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c57c					Two_r_fetch:
.c57c	8a		txa				txa		; Y= return stack index
.c57d	ba		tsx				tsx
.c57e	86 14		stx $14				stx tmp1
.c580	a4 14		ldy $14				ldy tmp1
.c582	aa		tax				tax
.c583	ca		dex				dex		; make room on the Data Stack
.c584	ca		dex				dex
.c585	ca		dex				dex
.c586	ca		dex				dex
.c587	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c58a	95 24		sta $24,x			sta DStack+0,x
.c58c	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c58f	95 25		sta $25,x			sta DStack+1,x
.c591	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c594	95 26		sta $26,x			sta DStack+2,x
.c596	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c599	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-(WordListLink+wh_Xt)
=$c59b					en = *	; remember here
>c57a	1f					.byte CL	;wh_CodeLength
.c59b	60		rts				rts
>c59c	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
>c59f	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5a0	f7 c4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5a3	41					.byte CO+R6	;wh_Flags	dictionary flags
=50463					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5a4					Two_r_from:
.c5a4	68		pla				pla			; save the return address
.c5a5	85 14		sta $14				sta tmp1+0
.c5a7	68		pla				pla
.c5a8	85 15		sta $15				sta tmp1+1
.c5aa	ca		dex				dex			; make room on stack
.c5ab	ca		dex				dex
.c5ac	ca		dex				dex
.c5ad	ca		dex				dex
.c5ae	68		pla				pla			; LSB
.c5af	95 24		sta $24,x			sta DStack+0,x
.c5b1	68		pla				pla			; MSB
.c5b2	95 25		sta $25,x			sta DStack+1,x
.c5b4	68		pla				pla			; LSB
.c5b5	95 26		sta $26,x			sta DStack+2,x
.c5b7	68		pla				pla			; MSB
.c5b8	95 27		sta $27,x			sta DStack+3,x
.c5ba	a5 15		lda $15				lda tmp1+1		; restore return address
.c5bc	48		pha				pha
.c5bd	a5 14		lda $14				lda tmp1+0
.c5bf	48		pha				pha
=28					CL	.var *-(WordListLink+wh_Xt)
=$c5c0					en = *	; remember here
>c5a2	1c					.byte CL	;wh_CodeLength
.c5c0	60		rts				rts
>c5c1	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
>c5c4	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5c5	1f c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5c8	51					.byte CO+UF+R6	;wh_Flags	dictionary flags
=50500					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5c9					Two_to_r:
.c5c9	68		pla				pla		; save the return address
.c5ca	85 14		sta $14				sta tmp1+0
.c5cc	68		pla				pla
.c5cd	85 15		sta $15				sta tmp1+1
.c5cf	20 de b3	jsr $b3de			jsr underflow_2
.c5d2	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c5d4	48		pha				pha
.c5d5	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c5d7	48		pha				pha
.c5d8	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c5da	48		pha				pha
.c5db	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c5dd	48		pha				pha
.c5de	e8		inx				inx
.c5df	e8		inx				inx
.c5e0	e8		inx				inx
.c5e1	e8		inx				inx
.c5e2	a5 15		lda $15				lda tmp1+1	; restore return address
.c5e4	48		pha				pha
.c5e5	a5 14		lda $14				lda tmp1+0
.c5e7	48		pha				pha
=31					CL	.var *-(WordListLink+wh_Xt)
=$c5e8					en = *	; remember here
>c5c7	1f					.byte CL	;wh_CodeLength
.c5e8	60		rts				rts
>c5e9	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
>c5ef	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c5f0	44 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c5f2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c5f3	10					.byte UF	;wh_Flags	dictionary flags
=50543					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c5f4					Invert:
.c5f4	20 c9 b3	jsr $b3c9			jsr underflow_1
.c5f7	a9 ff		lda #$ff			lda #$FF
.c5f9	55 24		eor $24,x			eor DStack+0,x	; LSB
.c5fb	95 24		sta $24,x			sta DStack+0,x
.c5fd	a9 ff		lda #$ff			lda #$FF
.c5ff	55 25		eor $25,x			eor DStack+1,x	; MSB
.c601	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-(WordListLink+wh_Xt)
=$c603					en = *	; remember here
>c5f2	0f					.byte CL	;wh_CodeLength
.c603	60		rts				rts
>c604	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
>c60a	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c60b	6f c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c60d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c60e	10					.byte UF	;wh_Flags	dictionary flags
=50570					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c60f					Negate:
.c60f	20 c9 b3	jsr $b3c9			jsr underflow_1
.c612	38		sec		Negate3:	sec
.c613	a9 00		lda #$00	Negate4:	lda #0
.c615	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c617	95 24		sta $24,x			sta DStack+0,x
.c619	a9 00		lda #$00			lda #0
.c61b	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c61d	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c61f					en = *	; remember here
>c60d	10					.byte CL	;wh_CodeLength
.c61f	60		rts				rts
>c620	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
>c623	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c624	8a c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c626	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c627	08					.byte NN	;wh_Flags	dictionary flags
=50595					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c628					Abs:
.c628	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c62a	b0 05		bcs $c631		bcs Throw_Stack_17
.c62c	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c62e	30 e2		bmi $c612			bmi Negate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c630					en = *	; remember here
>c626	08					.byte CL	;wh_CodeLength
.c630	60		rts				rts
.c631	4c ed b3	jmp $b3ed	Throw_Stack_17: jmp Throw_Stack
>c634	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
>c63b	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c63c	a3 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c63e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c63f	08					.byte NN	;wh_Flags	dictionary flags
=50619					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c640					DNegate:
.c640	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c642	b0 ed		bcs $c631		bcs Throw_Stack_17
.c644	38		sec		DNegate3:	sec
.c645	a9 00		lda #$00			lda #0
.c647	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c649	95 26		sta $26,x			sta DStack+2,x
.c64b	a9 00		lda #$00			lda #0
.c64d	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c64f	95 27		sta $27,x			sta DStack+3,x
.c651	4c 13 c6	jmp $c613			jmp Negate4
=20					CL	.var *-(WordListLink+wh_Xt)
=$c654					en = *	; remember here
>c63e	14					.byte CL	;wh_CodeLength
>c654	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
>c658	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c659	bb c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c65b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c65c	08					.byte NN	;wh_Flags	dictionary flags
=50648					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c65d					DAbs:
.c65d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c65f	b0 d0		bcs $c631		bcs Throw_Stack_17
.c661	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c663	30 df		bmi $c644			bmi DNegate3
=8					CL	.var *-(WordListLink+wh_Xt)
=$c665					en = *	; remember here
>c65b	08					.byte CL	;wh_CodeLength
.c665	60		rts				rts
>c666	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
>c669	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c66a	d8 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c66c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c66d	08					.byte NN	;wh_Flags	dictionary flags
=50665					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c66e	20 7b c6	jsr $c67b	DNEq:		jsr DEqual
.c671	4c 76 c8	jmp $c876			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c674					en = *	; remember here
>c66c	06					.byte CL	;wh_CodeLength
>c674	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
>c676	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c677	e9 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c679	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c67a	08					.byte NN	;wh_Flags	dictionary flags
=50678					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c67b	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c67d	d5 26		cmp $26,x			cmp DStack+2,x
.c67f	d0 50		bne $c6d1			bne False3
.c681	b5 2b		lda $2b,x			lda DStack+7,x
.c683	d5 27		cmp $27,x			cmp DStack+3,x
.c685	d0 4a		bne $c6d1			bne False3
.c687	b5 24		lda $24,x			lda DStack+0,x
.c689	d5 28		cmp $28,x			cmp DStack+4,x
.c68b	d0 44		bne $c6d1			bne False3
.c68d	b5 25		lda $25,x			lda DStack+1,x
.c68f	d5 29		cmp $29,x			cmp DStack+5,x
.c691	d0 3e		bne $c6d1			bne False3
.c693	f0 62		beq $c6f7			beq True3
=26					CL	.var *-(WordListLink+wh_Xt)
=$c695					en = *	; remember here
>c679	1a					.byte CL	;wh_CodeLength
>c695	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
>c698	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c699	f6 c5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c69b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c69c	08					.byte NN	;wh_Flags	dictionary flags
=50712					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c69d	20 36 c7	jsr $c736	DUGt:		jsr DGtSub
.c6a0	90 55		bcc $c6f7			bcc True3
.c6a2	b0 2d		bcs $c6d1			bcs False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6a4					en = *	; remember here
>c69b	07					.byte CL	;wh_CodeLength
>c6a4	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
>c6a8	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6a9	18 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6ab	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ac	08					.byte NN	;wh_Flags	dictionary flags
=50728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6ad	20 36 c7	jsr $c736	DULe:		jsr DGtSub
.c6b0	b0 45		bcs $c6f7			bcs True3
.c6b2	90 1d		bcc $c6d1			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6b4					en = *	; remember here
>c6ab	07					.byte CL	;wh_CodeLength
>c6b4	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
>c6b8	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6b9	28 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6bc	08					.byte NN	;wh_Flags	dictionary flags
=50744					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6bd	20 04 c7	jsr $c704	DUGe:		jsr DLessSub
.c6c0	b0 35		bcs $c6f7			bcs True3
.c6c2	90 0d		bcc $c6d1			bcc False3
=7					CL	.var *-(WordListLink+wh_Xt)
=$c6c4					en = *	; remember here
>c6bb	07					.byte CL	;wh_CodeLength
>c6c4	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
>c6c7	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6c8	38 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6cb	08					.byte NN	;wh_Flags	dictionary flags
=50759					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6cc	20 04 c7	jsr $c704	DULess:		jsr DLessSub
.c6cf	90 26		bcc $c6f7			bcc True3
.c6d1	a9 00		lda #$00	False3:		lda #0
.c6d3	f0 24		beq $c6f9			beq DReturn3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6d5					en = *	; remember here
>c6ca	09					.byte CL	;wh_CodeLength
.c6d5	4c ed b3	jmp $b3ed	Throw_Stack_09: jmp Throw_Stack
>c6d8	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
>c6db	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6dc	47 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6df	08					.byte NN	;wh_Flags	dictionary flags
=50779					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6e0	20 04 c7	jsr $c704	DGEq:		jsr DLessSub
.c6e3	70 10		bvs $c6f5			bvs DLess3
.c6e5	10 10		bpl $c6f7	DGEq3:		bpl True3
.c6e7	30 e8		bmi $c6d1			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c6e9					en = *	; remember here
>c6de	09					.byte CL	;wh_CodeLength
>c6e9	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
>c6eb	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c6ec	5b c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c6ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c6ef	08					.byte NN	;wh_Flags	dictionary flags
=50795					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c6f0	20 04 c7	jsr $c704	DLess:		jsr DLessSub
.c6f3	70 f0		bvs $c6e5			bvs DGEq3
.c6f5	10 da		bpl $c6d1	DLess3:		bpl False3
.c6f7	a9 ff		lda #$ff	True3:		lda #$ff
.c6f9					DReturn3:
.c6f9	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c6fb	b0 d8		bcs $c6d5		bcs Throw_Stack_09
.c6fd	95 2a		sta $2a,x			sta DStack+6,x
.c6ff	95 2b		sta $2b,x			sta DStack+7,x
.c701	4c 07 ad	jmp $ad07			jmp ThreeDrop
=20					CL	.var *-(WordListLink+wh_Xt)
=$c704					en = *	; remember here
>c6ee	14					.byte CL	;wh_CodeLength
.c704	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c706	d5 26		cmp $26,x			cmp DStack+2,x
.c708	b5 2b		lda $2b,x			lda DStack+7,x
.c70a	f5 27		sbc $27,x			sbc DStack+3,x
.c70c	b5 28		lda $28,x			lda DStack+4,x
.c70e	f5 24		sbc $24,x			sbc DStack+0,x
.c710	b5 29		lda $29,x			lda DStack+5,x
.c712	f5 25		sbc $25,x			sbc DStack+1,x
.c714	60		rts				rts
>c715	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
>c718	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c719	6b c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c71b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c71c	08					.byte NN	;wh_Flags	dictionary flags
=50840					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c71d	20 36 c7	jsr $c736	DLe:		jsr DGtSub
.c720	70 10		bvs $c732			bvs DGt3
.c722	10 d3		bpl $c6f7	DLe3:		bpl True3
.c724	30 ab		bmi $c6d1			bmi False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c726					en = *	; remember here
>c71b	09					.byte CL	;wh_CodeLength
>c726	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
>c728	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c729	98 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c72b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c72c	08					.byte NN	;wh_Flags	dictionary flags
=50856					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c72d	20 36 c7	jsr $c736	DGt:		jsr DGtSub
.c730	70 f0		bvs $c722			bvs DLe3
.c732	30 c3		bmi $c6f7	DGt3:		bmi True3
.c734	10 9b		bpl $c6d1			bpl False3
=9					CL	.var *-(WordListLink+wh_Xt)
=$c736					en = *	; remember here
>c72b	09					.byte CL	;wh_CodeLength
.c736	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c738	d5 2a		cmp $2a,x			cmp DStack+6,x
.c73a	b5 27		lda $27,x			lda DStack+3,x
.c73c	f5 2b		sbc $2b,x			sbc DStack+7,x
.c73e	b5 24		lda $24,x			lda DStack+0,x
.c740	f5 28		sbc $28,x			sbc DStack+4,x
.c742	b5 25		lda $25,x			lda DStack+1,x
.c744	f5 29		sbc $29,x			sbc DStack+5,x
.c746	60		rts				rts
>c747	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
>c74b	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c74c	a8 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c74e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c74f	08					.byte NN	;wh_Flags	dictionary flags
=50891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c750	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c752	30 6b		bmi $c7bf			bmi True1
.c754	10 27		bpl $c77d			bpl D0Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c756					en = *	; remember here
>c74e	06					.byte CL	;wh_CodeLength
>c756	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
>c759	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c75a	cb c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c75c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c75d	08					.byte NN	;wh_Flags	dictionary flags
=50905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c75e	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c760	10 0c		bpl $c76e			bpl D0Ne
.c762	4c df c7	jmp $c7df			jmp False1
>c765	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
>c769	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c76a	d9 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c76c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c76d	08					.byte NN	;wh_Flags	dictionary flags
=50921					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c76e	20 84 c7	jsr $c784	D0Ne:		jsr D0EqSub
.c771	d0 4c		bne $c7bf			bne True1
.c773	f0 6a		beq $c7df			beq False1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c775					en = *	; remember here
>c76c	07					.byte CL	;wh_CodeLength
>c775	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
>c778	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c779	e9 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c77b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c77c	08					.byte NN	;wh_Flags	dictionary flags
=50936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c77d	20 84 c7	jsr $c784	D0Equal:	jsr D0EqSub
.c780	d0 5d		bne $c7df			bne False1
.c782	f0 3b		beq $c7bf			beq True1
=7					CL	.var *-(WordListLink+wh_Xt)
=$c784					en = *	; remember here
>c77b	07					.byte CL	;wh_CodeLength
.c784	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c786	15 27		ora $27,x			ora DStack+3,x
.c788	15 24		ora $24,x			ora DStack+0,x
.c78a	15 25		ora $25,x			ora DStack+1,x
.c78c	60		rts				rts
>c78d	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
>c790	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c791	f8 c6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c793	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c794	08					.byte NN	;wh_Flags	dictionary flags
=50960					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c795	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c797	30 26		bmi $c7bf			bmi True1
.c799	10 44		bpl $c7df			bpl False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c79b					en = *	; remember here
>c793	06					.byte CL	;wh_CodeLength
>c79b	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
>c79f	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7a0	10 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7a2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7a3	08					.byte NN	;wh_Flags	dictionary flags
=50975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7a4	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c7a6	10 17		bpl $c7bf			bpl True1
.c7a8	30 35		bmi $c7df			bmi False1
=6					CL	.var *-(WordListLink+wh_Xt)
=$c7aa					en = *	; remember here
>c7a2	06					.byte CL	;wh_CodeLength
.c7aa	4c ed b3	jmp $b3ed	Throw_Stack_08: jmp Throw_Stack
>c7ad	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
>c7ae	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7af	1f c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7b1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7b2	08					.byte NN	;wh_Flags	dictionary flags
=50990					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7b3	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c7b5	d5 26		cmp $26,x			cmp DStack+2,x
.c7b7	d0 26		bne $c7df			bne False1
.c7b9	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7bb	d5 27		cmp $27,x			cmp DStack+3,x
.c7bd	d0 20		bne $c7df			bne False1
.c7bf	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c7c1					Return1:
.c7c1	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c7c3	b0 e5		bcs $c7aa		bcs Throw_Stack_08
.c7c5	e8		inx				inx		; Drop
.c7c6	e8		inx				inx
.c7c7	95 24		sta $24,x			sta DStack+0,x	; store f
.c7c9	95 25		sta $25,x			sta DStack+1,x
.c7cb	60		rts				rts
=25					CL	.var *-(WordListLink+wh_Xt)
=$c7cc					en = *	; remember here
>c7b1	19					.byte CL	;wh_CodeLength
>c7cc	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
>c7ce	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7cf	2e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7d2	08					.byte NN	;wh_Flags	dictionary flags
=51022					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7d3	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c7d5	d5 26		cmp $26,x			cmp DStack+2,x
.c7d7	d0 e6		bne $c7bf			bne True1
.c7d9	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c7db	d5 27		cmp $27,x			cmp DStack+3,x
.c7dd	d0 e0		bne $c7bf			bne True1
.c7df	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c7e1	f0 de		beq $c7c1			beq Return1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7e3					en = *	; remember here
>c7d1	10					.byte CL	;wh_CodeLength
>c7e3	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
>c7e4	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7e5	4e c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7e7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7e8	08					.byte NN	;wh_Flags	dictionary flags
=51044					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c7e9	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c7eb	d5 24		cmp $24,x			cmp DStack+0,x
.c7ed	b5 27		lda $27,x			lda DStack+3,x
.c7ef	f5 25		sbc $25,x			sbc DStack+1,x
.c7f1	50 02		bvc $c7f5			bvc _c
.c7f3	49 80		eor #$80			eor #$80	; fix sign
.c7f5	10 e8		bpl $c7df	_c:		bpl False1
.c7f7	30 c6		bmi $c7bf			bmi True1
=16					CL	.var *-(WordListLink+wh_Xt)
=$c7f9					en = *	; remember here
>c7e7	10					.byte CL	;wh_CodeLength
>c7f9	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
>c7fb	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c7fc	64 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c7fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c7ff	08					.byte NN	;wh_Flags	dictionary flags
=51067					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c800	20 e9 c7	jsr $c7e9	Ge:		jsr Less_Than
.c803	4c 76 c8	jmp $c876			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c806					en = *	; remember here
>c7fe	06					.byte CL	;wh_CodeLength
>c806	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
>c808	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c809	7b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c80b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c80c	08					.byte NN	;wh_Flags	dictionary flags
=51080					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c80d	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c80f	d5 24		cmp $24,x			cmp DStack+0,x
.c811	b5 27		lda $27,x			lda DStack+3,x
.c813	f5 25		sbc $25,x			sbc DStack+1,x
.c815	b0 c8		bcs $c7df			bcs False1
.c817	90 a6		bcc $c7bf			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c819					en = *	; remember here
>c80b	0c					.byte CL	;wh_CodeLength
>c819	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
>c81b	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c81c	88 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c81e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c81f	08					.byte NN	;wh_Flags	dictionary flags
=51099					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c820	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c822	d5 26		cmp $26,x			cmp DStack+2,x
.c824	b5 25		lda $25,x			lda DStack+1,x
.c826	f5 27		sbc $27,x			sbc DStack+3,x
.c828	b0 b5		bcs $c7df			bcs False1
.c82a	90 93		bcc $c7bf			bcc True1
=12					CL	.var *-(WordListLink+wh_Xt)
=$c82c					en = *	; remember here
>c81e	0c					.byte CL	;wh_CodeLength
>c82c	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
>c82d	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c82e	9b c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c830	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c831	08					.byte NN	;wh_Flags	dictionary flags
=51117					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c832	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c834	d5 26		cmp $26,x			cmp DStack+2,x
.c836	b5 25		lda $25,x			lda DStack+1,x
.c838	f5 27		sbc $27,x			sbc DStack+3,x
.c83a	50 02		bvc $c83e			bvc _c
.c83c	49 80		eor #$80			eor #$80	; fix sign
.c83e	10 9f		bpl $c7df	_c:		bpl False1
.c840	4c bf c7	jmp $c7bf			jmp True1
=17					CL	.var *-(WordListLink+wh_Xt)
=$c843					en = *	; remember here
>c830	11					.byte CL	;wh_CodeLength
>c843	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
>c845	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c846	ad c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c848	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c849	08					.byte NN	;wh_Flags	dictionary flags
=51141					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c84a	20 32 c8	jsr $c832	Le:		jsr Greater_Than
.c84d	4c 76 c8	jmp $c876			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c850					en = *	; remember here
>c848	06					.byte CL	;wh_CodeLength
>c850	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
>c853	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c854	c5 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c856	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c857	08					.byte NN	;wh_Flags	dictionary flags
=51155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c858	20 0d c8	jsr $c80d	UGe:		jsr U_Less_Than
.c85b	4c 76 c8	jmp $c876			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c85e					en = *	; remember here
>c856	06					.byte CL	;wh_CodeLength
>c85e	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
>c861	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c862	d3 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c864	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c865	08					.byte NN	;wh_Flags	dictionary flags
=51169					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c866	20 20 c8	jsr $c820	ULe:		jsr U_Greater_Than
.c869	4c 76 c8	jmp $c876			jmp Zero_Equal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c86c					en = *	; remember here
>c864	06					.byte CL	;wh_CodeLength
.c86c	4c ed b3	jmp $b3ed	Throw_Stack_11: jmp Throw_Stack
>c86f	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
>c871	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c872	e1 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c874	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c875	08					.byte NN	;wh_Flags	dictionary flags
=51185					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c876	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c878	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c87a	d0 26		bne $c8a2			bne False0
.c87c	f0 0e		beq $c88c			beq True0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c87e					en = *	; remember here
>c874	08					.byte CL	;wh_CodeLength
>c87e	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
>c881	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c882	f1 c7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c884	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c885	08					.byte NN	;wh_Flags	dictionary flags
=51201					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c886	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c888	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c88a	f0 16		beq $c8a2			beq False0
.c88c	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c88e	95 24		sta $24,x	Return0:	sta DStack+0,x
.c890	95 25		sta $25,x			sta DStack+1,x
.c892	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c894	b0 39		bcs $c8cf		bcs Throw_Stack_05
.c896	60		rts				rts
=17					CL	.var *-(WordListLink+wh_Xt)
=$c897					en = *	; remember here
>c884	11					.byte CL	;wh_CodeLength
>c897	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
>c899	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c89a	01 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c89c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c89d	08					.byte NN	;wh_Flags	dictionary flags
=51225					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c89e	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c8a0	10 e6		bpl $c888			bpl ZNe3	; >= 0 ?
.c8a2	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c8a4	f0 e8		beq $c88e			beq Return0
=8					CL	.var *-(WordListLink+wh_Xt)
=$c8a6					en = *	; remember here
>c89c	08					.byte CL	;wh_CodeLength
>c8a6	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
>c8a9	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8aa	19 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ac	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8ad	08					.byte NN	;wh_Flags	dictionary flags
=51241					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8ae	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c8b0	30 da		bmi $c88c			bmi True0
.c8b2	10 c4		bpl $c878			bpl ZEq3
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8b4					en = *	; remember here
>c8ac	06					.byte CL	;wh_CodeLength
>c8b4	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
>c8b7	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8b8	29 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8ba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8bb	08					.byte NN	;wh_Flags	dictionary flags
=51255					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8bc	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c8be	10 cc		bpl $c88c			bpl True0
.c8c0	30 e0		bmi $c8a2			bmi False0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8c2					en = *	; remember here
>c8ba	06					.byte CL	;wh_CodeLength
>c8c2	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
>c8c4	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8c5	37 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8c8	08					.byte NN	;wh_Flags	dictionary flags
=51268					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8c9	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c8cb	10 d5		bpl $c8a2			bpl False0
.c8cd	30 bd		bmi $c88c			bmi True0
=6					CL	.var *-(WordListLink+wh_Xt)
=$c8cf					en = *	; remember here
>c8c7	06					.byte CL	;wh_CodeLength
.c8cf	4c ed b3	jmp $b3ed	Throw_Stack_05: jmp Throw_Stack
>c8d2	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
>c8d5	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8d6	44 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8d9	18					.byte UF+NN	;wh_Flags	dictionary flags
=51285					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8da					Min:
.c8da	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8dc	b0 f1		bcs $c8cf		bcs Throw_Stack_05
.c8de	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c8e0	d5 26		cmp $26,x			cmp DStack+2,x
.c8e2	b5 25		lda $25,x			lda DStack+1,x
.c8e4	f5 27		sbc $27,x			sbc DStack+3,x
.c8e6	70 1b		bvs $c903			bvs Max_3	; if overflow, the sign is backwards
.c8e8	30 29		bmi $c913	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c8ea	e8		inx				inx		; Drop n2
.c8eb	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c8ec					en = *	; remember here
>c8d8	12					.byte CL	;wh_CodeLength
.c8ec	60		rts				rts
>c8ed	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
>c8f0	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c8f1	55 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c8f3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c8f4	08					.byte NN	;wh_Flags	dictionary flags
=51312					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c8f5					Max:
.c8f5	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c8f7	b0 d6		bcs $c8cf		bcs Throw_Stack_05
.c8f9	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c8fb	d5 26		cmp $26,x			cmp DStack+2,x
.c8fd	b5 25		lda $25,x			lda DStack+1,x
.c8ff	f5 27		sbc $27,x			sbc DStack+3,x
.c901	70 e5		bvs $c8e8			bvs Min_3	; if overflow, the sign is backwards
.c903	10 0e		bpl $c913	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c905	e8		inx				inx		; Drop n2
.c906	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$c907					en = *	; remember here
>c8f3	12					.byte CL	;wh_CodeLength
.c907	60		rts				rts
>c908	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
>c90b	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c90c	70 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c90e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c90f	10					.byte UF	;wh_Flags	dictionary flags
=51339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c910					Nip:
.c910	20 de b3	jsr $b3de			jsr underflow_2
.c913	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c915	b4 25		ldy $25,x			ldy DStack+1,x
.c917	e8		inx				inx
.c918	e8		inx				inx
.c919	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c91b	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$c91d					en = *	; remember here
>c90e	0d					.byte CL	;wh_CodeLength
.c91d	60		rts				rts
>c91e	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
>c922	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c923	8b c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c925	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c926	00					.byte 0	;wh_Flags	dictionary flags
=51362					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c927					Pick:
.c927	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c929	8a		txa				txa
.c92a	75 24		adc $24,x			adc DStack+0,x
.c92c	a8		tay				tay
.c92d	b9 26 00	lda $0026,y			lda DStack+2,y
.c930	95 24		sta $24,x			sta DStack+0,x
.c932	b9 27 00	lda $0027,y			lda DStack+3,y
.c935	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-(WordListLink+wh_Xt)
=$c937					en = *	; remember here
>c925	10					.byte CL	;wh_CodeLength
.c937	60		rts				rts
>c938	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
>c93c	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c93d	a2 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c93f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c940	08					.byte NN	;wh_Flags	dictionary flags
=51388					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c941					Char:
.c941	20 7b ba	jsr $ba7b			jsr parse_name_check
.c944	e8		inx				inx		; Drop number of characters, leave addr
.c945	e8		inx				inx
.c946	4c f8 cc	jmp $ccf8			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-(WordListLink+wh_Xt)
=$c949					en = *	; remember here
>c93f	08					.byte CL	;wh_CodeLength
>c949	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
>c94f	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c950	bc c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c952	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c953	0d					.byte CO+IM+NN	;wh_Flags	dictionary flags
=51407					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c954	20 41 c9	jsr $c941	Bracket_Char:	jsr Char
.c957	4c 0c b7	jmp $b70c			jmp Literal
=6					CL	.var *-(WordListLink+wh_Xt)
=$c95a					en = *	; remember here
>c952	06					.byte CL	;wh_CodeLength
>c95a	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
>c95f	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c960	cf c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c962	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c963	00					.byte 0	;wh_Flags	dictionary flags
=51423					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c964					Char_Plus:
.c964	20 c9 b3	jsr $b3c9			jsr underflow_1
.c967	f6 24		inc $24,x			inc DStack+0,x
.c969	d0 02		bne $c96d			bne +
.c96b	f6 25		inc $25,x			inc DStack+1,x
.c96d					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c96d					en = *	; remember here
>c962	09					.byte CL	;wh_CodeLength
.c96d	60		rts				rts
>c96e	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
>c973	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c974	df c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c976	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c977	02					.byte AN	;wh_Flags	dictionary flags
=51443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c978					Chars:
=0					CL	.var *-(WordListLink+wh_Xt)
=$c978					en = *	; remember here
>c976	00					.byte CL	;wh_CodeLength
.c978	60		rts				rts
>c979	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
>c97e	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c97f	f3 c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c981	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c982	10					.byte UF	;wh_Flags	dictionary flags
=51454					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c983					Cells:
.c983	20 c9 b3	jsr $b3c9			jsr underflow_1
.c986	16 24		asl $24,x			asl DStack+0,x		; 2*
.c988	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$c98a					en = *	; remember here
>c981	07					.byte CL	;wh_CodeLength
.c98a	60		rts				rts
>c98b	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
>c990	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c991	fe c8					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c993	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c994	10					.byte UF	;wh_Flags	dictionary flags
=51472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c995					Cell_Plus:
.c995	20 c9 b3	jsr $b3c9			jsr underflow_1
.c998	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.c99a					Plus_A:
.c99a	18		clc				clc
.c99b	75 24		adc $24,x			adc DStack+0,x
.c99d	95 24		sta $24,x			sta DStack+0,x
.c99f	90 02		bcc $c9a3			bcc +
.c9a1	f6 25		inc $25,x			inc DStack+1,x
.c9a3					+
=14					CL	.var *-(WordListLink+wh_Xt)
=$c9a3					en = *	; remember here
>c993	0e					.byte CL	;wh_CodeLength
.c9a3	60		rts				rts
.c9a4					Nos_Plus_A:
.c9a4	18		clc				clc
.c9a5	75 26		adc $26,x			adc DStack+2,x
.c9a7	95 26		sta $26,x			sta DStack+2,x
.c9a9	90 02		bcc $c9ad			bcc +
.c9ab	f6 27		inc $27,x			inc DStack+3,x
.c9ad	60		rts		+		rts
>c9ae	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
>c9b2	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9b3	10 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9b6	08					.byte NN	;wh_Flags	dictionary flags
=51506					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9b7	a5 00		lda $00		Here:		lda cp+0
.c9b9	a4 01		ldy $01				ldy cp+1
.c9bb	4c 59 b7	jmp $b759			jmp PushYA
=7					CL	.var *-(WordListLink+wh_Xt)
=$c9be					en = *	; remember here
>c9b5	07					.byte CL	;wh_CodeLength
>c9be	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
>c9c0	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9c1	32 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9c4	10					.byte UF	;wh_Flags	dictionary flags
=51520					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9c5					One_Minus:
.c9c5	20 c9 b3	jsr $b3c9			jsr underflow_1
.c9c8					One_Minus_NoUf:
.c9c8	b5 24		lda $24,x			lda DStack+0,x
.c9ca	d0 02		bne $c9ce			bne +
.c9cc	d6 25		dec $25,x			dec DStack+1,x
.c9ce	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$c9d0					en = *	; remember here
>c9c3	0b					.byte CL	;wh_CodeLength
.c9d0	60		rts				rts
.c9d1					NOS_One_Minus:
.c9d1	b5 26		lda $26,x			lda DStack+2,x
.c9d3	d0 02		bne $c9d7			bne +
.c9d5	d6 27		dec $27,x			dec DStack+3,x
.c9d7	d6 26		dec $26,x	+		dec DStack+2,x
.c9d9	60		rts				rts
.c9da					Minus_A:
.c9da	18		clc				clc
.c9db	75 24		adc $24,x			adc DStack+0,x
.c9dd	95 24		sta $24,x			sta DStack+0,x
.c9df	b0 02		bcs $c9e3			bcs +
.c9e1	d6 25		dec $25,x			dec DStack+1,x
.c9e3	60		rts		+		rts
>c9e4	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
>c9e6	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>c9e7	40 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>c9e9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>c9ea	10					.byte UF	;wh_Flags	dictionary flags
=51558					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.c9eb					One_Plus:
.c9eb	20 c9 b3	jsr $b3c9			jsr underflow_1
.c9ee	f6 24		inc $24,x			inc DStack+0,x
.c9f0	d0 02		bne $c9f4			bne +
.c9f2	f6 25		inc $25,x			inc DStack+1,x
.c9f4					+
=9					CL	.var *-(WordListLink+wh_Xt)
=$c9f4					en = *	; remember here
>c9e9	09					.byte CL	;wh_CodeLength
.c9f4	60		rts				rts
.c9f5					NOS_One_Plus:
.c9f5	f6 26		inc $26,x			inc DStack+2,x
.c9f7	d0 02		bne $c9fb			bne +
.c9f9	f6 27		inc $27,x			inc DStack+3,x
.c9fb	60		rts		+		rts
>c9fc	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
>c9ff	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca00	66 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca02	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca03	00					.byte 0	;wh_Flags	dictionary flags
=51583					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca04	20 9f b3	jsr $b39f	UMPlus:		jsr PopYA
.ca07	18		clc				clc		; add n to d1.lo
.ca08	75 26		adc $26,x			adc DStack+2,x
.ca0a	95 26		sta $26,x			sta DStack+2,x
.ca0c	98		tya				tya
.ca0d	75 27		adc $27,x			adc DStack+3,x
.ca0f	95 27		sta $27,x			sta DStack+3,x
.ca11	90 06		bcc $ca19			bcc +		; propagate carry thru d1.hi
.ca13	f6 24		inc $24,x			inc DStack+0,x
.ca15	d0 02		bne $ca19			bne +
.ca17	f6 25		inc $25,x			inc DStack+1,x
.ca19					+
=21					CL	.var *-(WordListLink+wh_Xt)
=$ca19					en = *	; remember here
>ca02	15					.byte CL	;wh_CodeLength
.ca19	60		rts				rts
>ca1a	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
>ca1c	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca1d	7f c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca1f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca20	08					.byte NN	;wh_Flags	dictionary flags
=51612					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca21	20 04 ca	jsr $ca04	MPlus:		jsr UMPlus
.ca24	98		tya				tya		; if n negative
.ca25	30 a1		bmi $c9c8			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca27					en = *	; remember here
>ca1f	06					.byte CL	;wh_CodeLength
.ca27	60		rts				rts
>ca28	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
>ca2b	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca2c	9c c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca2f	10					.byte UF	;wh_Flags	dictionary flags
=51627					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca30	20 de b3	jsr $b3de	D2Star:		jsr underflow_2
.ca33	16 26		asl $26,x			asl DStack+2,x
.ca35	36 27		rol $27,x			rol DStack+3,x
.ca37	36 24		rol $24,x			rol DStack+0,x
.ca39	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-(WordListLink+wh_Xt)
=$ca3b					en = *	; remember here
>ca2e	0b					.byte CL	;wh_CodeLength
.ca3b	60		rts				rts
>ca3c	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
>ca3f	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca40	ab c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca42	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca43	10					.byte UF	;wh_Flags	dictionary flags
=51647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca44	20 de b3	jsr $b3de	D2Slash:	jsr underflow_2
.ca47	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.ca49	0a		asl a				asl a
.ca4a	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.ca4c	76 24		ror $24,x			ror DStack+0,x
.ca4e	76 27		ror $27,x			ror DStack+3,x
.ca50	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-(WordListLink+wh_Xt)
=$ca52					en = *	; remember here
>ca42	0e					.byte CL	;wh_CodeLength
.ca52	60		rts				rts
>ca53	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
>ca57	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca58	bf c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca5a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca5b	18					.byte UF+NN	;wh_Flags	dictionary flags
=51671					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca5c	20 de b3	jsr $b3de	DU2Slash:	jsr underflow_2
.ca5f	18		clc				clc
.ca60	90 e8		bcc $ca4a			bcc D2SlashU
=6					CL	.var *-(WordListLink+wh_Xt)
=$ca62					en = *	; remember here
>ca5a	06					.byte CL	;wh_CodeLength
>ca62	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
>ca64	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca65	d7 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca67	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca68	10					.byte UF	;wh_Flags	dictionary flags
=51684					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca69					Two_Star:
.ca69	20 c9 b3	jsr $b3c9			jsr underflow_1
.ca6c	16 24		asl $24,x			asl DStack+0,x
.ca6e	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca70					en = *	; remember here
>ca67	07					.byte CL	;wh_CodeLength
.ca70	60		rts				rts
>ca71	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
>ca73	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca74	e4 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca76	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca77	10					.byte UF	;wh_Flags	dictionary flags
=51699					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca78					Two_Slash:
.ca78	20 c9 b3	jsr $b3c9			jsr underflow_1
.ca7b	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.ca7d	0a		asl a				asl
.ca7e	76 25		ror $25,x			ror DStack+1,x
.ca80	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-(WordListLink+wh_Xt)
=$ca82					en = *	; remember here
>ca76	0a					.byte CL	;wh_CodeLength
.ca82	60		rts				rts
>ca83	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
>ca86	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca87	f3 c9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca89	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca8a	10					.byte UF	;wh_Flags	dictionary flags
=51718					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca8b					UTwo_Slash:
.ca8b	20 c9 b3	jsr $b3c9			jsr underflow_1
.ca8e	56 25		lsr $25,x			lsr DStack+1,x
.ca90	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-(WordListLink+wh_Xt)
=$ca92					en = *	; remember here
>ca89	07					.byte CL	;wh_CodeLength
.ca92	60		rts				rts
>ca93	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
>ca9a	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ca9b	06 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ca9d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ca9e	00					.byte 0	;wh_Flags	dictionary flags
=51738					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ca9f	20 83 b3	jsr $b383	DRShift:	jsr PopA	; pop u
.caa2	a8		tay		DRShiftA:	tay
.caa3	f0 0e		beq $cab3			beq _9
.caa5	b5 25		lda $25,x			lda DStack+1,x
.caa7	4a		lsr a		_2:		lsr a
.caa8	76 24		ror $24,x			ror DStack+0,x
.caaa	76 27		ror $27,x			ror DStack+3,x
.caac	76 26		ror $26,x			ror DStack+2,x
.caae	88		dey				dey
.caaf	d0 f6		bne $caa7			bne _2
.cab1	95 25		sta $25,x			sta DStack+1,x
.cab3					_9:
=20					CL	.var *-(WordListLink+wh_Xt)
=$cab3					en = *	; remember here
>ca9d	14					.byte CL	;wh_CodeLength
.cab3	60		rts				rts
>cab4	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
>caba	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cabb	1a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cabd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cabe	00					.byte 0	;wh_Flags	dictionary flags
=51770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cabf	20 8c b3	jsr $b38c	RShift:		jsr PopA2	; pop u, check for 2 params
.cac2	a8		tay		RShift_A:	tay		; get shift count
.cac3	f0 0a		beq $cacf			beq _done
.cac5	b5 25		lda $25,x			lda DStack+1,x
.cac7	4a		lsr a		_loop:		lsr a
.cac8	76 24		ror $24,x			ror DStack+0,x
.caca	88		dey				dey
.cacb	d0 fa		bne $cac7			bne _loop
.cacd	95 25		sta $25,x			sta DStack+1,x
.cacf					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$cacf					en = *	; remember here
>cabd	10					.byte CL	;wh_CodeLength
.cacf	60		rts				rts
>cad0	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
>cad6	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cad7	3a ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cad9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cada	00					.byte 0	;wh_Flags	dictionary flags
=51798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cadb	20 8c b3	jsr $b38c	LShift:		jsr PopA2	; pop u, check for 2 params
.cade	a8		tay		LShift_A:	tay		; get shift count
.cadf	f0 0a		beq $caeb			beq _done
.cae1	b5 25		lda $25,x			lda DStack+1,x
.cae3	16 24		asl $24,x	_loop:		asl DStack+0,x
.cae5	2a		rol a				rol a
.cae6	88		dey				dey
.cae7	d0 fa		bne $cae3			bne _loop
.cae9	95 25		sta $25,x			sta DStack+1,x
.caeb					_done:
=16					CL	.var *-(WordListLink+wh_Xt)
=$caeb					en = *	; remember here
>cad9	10					.byte CL	;wh_CodeLength
.caeb	60		rts				rts
>caec	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
>caef	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HNL
>caf0	56 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>caf2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>caf3	10					.byte UF	;wh_Flags	dictionary flags
=51823					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.caf4					And2:
.caf4	20 de b3	jsr $b3de			jsr underflow_2
.caf7	b5 24		lda $24,x			lda DStack+0,x
.caf9	35 26		and $26,x			and DStack+2,x
.cafb	95 26		sta $26,x			sta DStack+2,x
.cafd	b5 25		lda $25,x			lda DStack+1,x
.caff	35 27		and $27,x			and DStack+3,x
.cb01	95 27		sta $27,x			sta DStack+3,x
.cb03	e8		inx				inx		; Drop n2
.cb04	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb05					en = *	; remember here
>caf2	11					.byte CL	;wh_CodeLength
.cb05	60		rts				rts
>cb06	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
>cb08	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb09	6f ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb0b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb0c	10					.byte UF	;wh_Flags	dictionary flags
=51848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb0d					Or:
.cb0d	20 de b3	jsr $b3de			jsr underflow_2
.cb10	b5 24		lda $24,x			lda DStack+0,x
.cb12	15 26		ora $26,x			ora DStack+2,x
.cb14	95 26		sta $26,x			sta DStack+2,x
.cb16	b5 25		lda $25,x			lda DStack+1,x
.cb18	15 27		ora $27,x			ora DStack+3,x
.cb1a	95 27		sta $27,x			sta DStack+3,x
.cb1c	e8		inx				inx		; Drop n2
.cb1d	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb1e					en = *	; remember here
>cb0b	11					.byte CL	;wh_CodeLength
.cb1e	60		rts				rts
>cb1f	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
>cb22	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb23	88 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb25	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb26	10					.byte UF	;wh_Flags	dictionary flags
=51874					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb27					Xor:
.cb27	20 de b3	jsr $b3de			jsr underflow_2
.cb2a	b5 24		lda $24,x			lda DStack+0,x
.cb2c	55 26		eor $26,x			eor DStack+2,x
.cb2e	95 26		sta $26,x			sta DStack+2,x
.cb30	b5 25		lda $25,x			lda DStack+1,x
.cb32	55 27		eor $27,x			eor DStack+3,x
.cb34	95 27		sta $27,x			sta DStack+3,x
.cb36	e8		inx				inx		; Drop n2
.cb37	e8		inx				inx
=17					CL	.var *-(WordListLink+wh_Xt)
=$cb38					en = *	; remember here
>cb25	11					.byte CL	;wh_CodeLength
.cb38	60		rts				rts
>cb39	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
>cb3a	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb3b	a2 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb3d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb3e	10					.byte UF	;wh_Flags	dictionary flags
=51898					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb3f					Plus:
.cb3f	20 de b3	jsr $b3de			jsr underflow_2
.cb42	18		clc				clc
.cb43	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cb45	75 26		adc $26,x			adc DStack+2,x
.cb47	95 26		sta $26,x			sta DStack+2,x
.cb49	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cb4b	75 27		adc $27,x			adc DStack+3,x
.cb4d	95 27		sta $27,x			sta DStack+3,x
.cb4f	e8		inx				inx
.cb50	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb51					en = *	; remember here
>cb3d	12					.byte CL	;wh_CodeLength
.cb51	60		rts				rts
>cb52	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
>cb53	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb54	ba ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb56	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb57	10					.byte UF	;wh_Flags	dictionary flags
=51923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb58					Minus:
.cb58	20 de b3	jsr $b3de			jsr underflow_2
.cb5b	38		sec				sec
.cb5c	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cb5e	f5 24		sbc $24,x			sbc DStack+0,x
.cb60	95 26		sta $26,x			sta DStack+2,x
.cb62	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cb64	f5 25		sbc $25,x			sbc DStack+1,x
.cb66	95 27		sta $27,x			sta DStack+3,x
.cb68	e8		inx				inx		; Drop n2
.cb69	e8		inx				inx
=18					CL	.var *-(WordListLink+wh_Xt)
=$cb6a					en = *	; remember here
>cb56	12					.byte CL	;wh_CodeLength
.cb6a	60		rts				rts
>cb6b	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
>cb6c	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb6d	d3 ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb6f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb70	08					.byte NN	;wh_Flags	dictionary flags
=51948					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb71	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cb73	08		php				php
.cb74	20 28 c6	jsr $c628			jsr Abs			; ( u )
.cb77	20 aa b7	jsr $b7aa			jsr Zero		; ( ud )	u>d  cvt u to ud
.cb7a	4c 8a cb	jmp $cb8a			jmp fmt_d3
=12					CL	.var *-(WordListLink+wh_Xt)
=$cb7d					en = *	; remember here
>cb6f	0c					.byte CL	;wh_CodeLength
>cb7d	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
>cb7f	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cb80	ec ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cb82	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cb83	08					.byte NN	;wh_Flags	dictionary flags
=51967					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cb84	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cb86	08		php				php
.cb87	20 5d c6	jsr $c65d			jsr DAbs
.cb8a	20 54 ab	jsr $ab54	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cb8d	20 c7 ab	jsr $abc7			jsr Number_sign_s	; ( ud )	do all digits
.cb90	28		plp				plp			; ( ud )	do sign
.cb91	20 e2 ab	jsr $abe2			jsr Sign_P		; ( ud )
.cb94	20 61 ab	jsr $ab61			jsr Number_sign_greater	; ( addr u )	end formatting
.cb97	20 7d cd	jsr $cd7d			jsr Type
.cb9a	4c 70 cd	jmp $cd70			jmp Space
=25					CL	.var *-(WordListLink+wh_Xt)
=$cb9d					en = *	; remember here
>cb82	19					.byte CL	;wh_CodeLength
>cb9d	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
>cb9f	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cba0	ff ca					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cba2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cba3	18					.byte UF+NN	;wh_Flags	dictionary flags
=51999					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cba4	20 c9 b3	jsr $b3c9	U_Dot:		jsr underflow_1
.cba7	20 be cb	jsr $cbbe			jsr print_u
.cbaa	4c 70 cd	jmp $cd70			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbad					en = *	; remember here
>cba2	09					.byte CL	;wh_CodeLength
>cbad	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
>cbb0	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbb1	1f cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbb4	18					.byte UF+NN	;wh_Flags	dictionary flags
=52016					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbb5	20 de b3	jsr $b3de	UD_Dot:		jsr underflow_2 ; double number
.cbb8	20 c1 cb	jsr $cbc1			jsr print_ud
.cbbb	4c 70 cd	jmp $cd70			jmp Space
=9					CL	.var *-(WordListLink+wh_Xt)
=$cbbe					en = *	; remember here
>cbb3	09					.byte CL	;wh_CodeLength
.cbbe					print_u:
.cbbe	20 aa b7	jsr $b7aa			jsr Zero			; convert to ud
.cbc1					print_ud:
.cbc1	20 54 ab	jsr $ab54			jsr Less_Number_Sign		; <#	start formatting
.cbc4	20 c7 ab	jsr $abc7			jsr Number_sign_s		; #S	do all digits
.cbc7	20 61 ab	jsr $ab61			jsr Number_sign_greater		; #>	end formatting
.cbca	4c 7d cd	jmp $cd7d			jmp Type
>cbcd	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
>cbd0	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbd1	30 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbd3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbd4	08					.byte NN	;wh_Flags	dictionary flags
=52048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbd5	20 83 b3	jsr $b383	U_Dot_R:	jsr PopA		; save field width
.cbd8	48		pha		U_Dot_R_A:	pha
.cbd9	20 aa b7	jsr $b7aa			jsr Zero		; u>d  cvt u to ud
.cbdc	4c ec cb	jmp $cbec			jmp fmt_udr3
=10					CL	.var *-(WordListLink+wh_Xt)
=$cbdf					en = *	; remember here
>cbd3	0a					.byte CL	;wh_CodeLength
>cbdf	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
>cbe3	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cbe4	50 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cbe6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cbe7	08					.byte NN	;wh_Flags	dictionary flags
=52067					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cbe8	20 83 b3	jsr $b383	UD_Dot_R:	jsr PopA			; save field width
.cbeb	48		pha		UD_Dot_R_A:	pha
.cbec	20 54 ab	jsr $ab54	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cbef	20 c7 ab	jsr $abc7			jsr Number_sign_s		; do all digits
.cbf2	20 61 ab	jsr $ab61	fmt_r:		jsr Number_sign_greater		; finish formatted
.cbf5	68		pla				pla				; recover field width
.cbf6	38		sec				sec				; do leading spaces
.cbf7	f5 24		sbc $24,x			sbc DStack+0,x
.cbf9	90 06		bcc $cc01			bcc +
.cbfb	20 9b b7	jsr $b79b			jsr PushZA
.cbfe	20 0f c4	jsr $c40f			jsr Spaces
.cc01	4c 7d cd	jmp $cd7d	+		jmp Type			; type formatted
=28					CL	.var *-(WordListLink+wh_Xt)
=$cc04					en = *	; remember here
>cbe6	1c					.byte CL	;wh_CodeLength
>cc04	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
>cc06	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc07	63 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc0a	08					.byte NN	;wh_Flags	dictionary flags
=52102					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc0b	20 83 b3	jsr $b383	Dot_R:		jsr PopA		; save field width
.cc0e	48		pha		Dot_R_A:	pha
.cc0f	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc11	08		php				php
.cc12	20 28 c6	jsr $c628			jsr Abs
.cc15	20 aa b7	jsr $b7aa			jsr Zero		; u>d  cvt u to ud
.cc18	4c 2d cc	jmp $cc2d			jmp fmt_dr3
=16					CL	.var *-(WordListLink+wh_Xt)
=$cc1b					en = *	; remember here
>cc09	10					.byte CL	;wh_CodeLength
>cc1b	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
>cc1e	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc1f	86 cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc21	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc22	08					.byte NN	;wh_Flags	dictionary flags
=52126					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc23	20 83 b3	jsr $b383	D_Dot_R:	jsr PopA		; save field width
.cc26	48		pha		D_Dot_R_A:	pha
.cc27	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc29	08		php				php
.cc2a	20 5d c6	jsr $c65d			jsr DAbs
.cc2d	20 54 ab	jsr $ab54	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc30	20 c7 ab	jsr $abc7			jsr Number_sign_s	; do all digits
.cc33	28		plp				plp			; do the sign
.cc34	20 e2 ab	jsr $abe2			jsr Sign_P
.cc37	4c f2 cb	jmp $cbf2			jmp fmt_r
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc3a					en = *	; remember here
>cc21	17					.byte CL	;wh_CodeLength
>cc3a	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
>cc3b	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc3c	9e cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc3f	08					.byte NN	;wh_Flags	dictionary flags
=52155					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc40					Question:
.cc40	20 5f ce	jsr $ce5f			jsr Fetch
.cc43	4c 71 cb	jmp $cb71			jmp Dot
=6					CL	.var *-(WordListLink+wh_Xt)
=$cc46					en = *	; remember here
>cc3e	06					.byte CL	;wh_CodeLength
>cc46	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
>cc4a	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc4b	bb cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc4d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc4e	10					.byte UF	;wh_Flags	dictionary flags
=52170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc4f					Two_Dup:
.cc4f	20 de b3	jsr $b3de			jsr underflow_2
.cc52	ca		dex				dex
.cc53	ca		dex				dex
.cc54	ca		dex				dex
.cc55	ca		dex				dex
.cc56	b5 28		lda $28,x			lda DStack+4,x	; TOS
.cc58	95 24		sta $24,x			sta DStack+0,x
.cc5a	b5 29		lda $29,x			lda DStack+5,x
.cc5c	95 25		sta $25,x			sta DStack+1,x
.cc5e	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.cc60	95 26		sta $26,x			sta DStack+2,x
.cc62	b5 2b		lda $2b,x			lda DStack+7,x
.cc64	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-(WordListLink+wh_Xt)
=$cc66					en = *	; remember here
>cc4d	17					.byte CL	;wh_CodeLength
.cc66	60		rts				rts
>cc67	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
>cc6b	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc6c	ca cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc6e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc6f	10					.byte UF	;wh_Flags	dictionary flags
=52203					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc70					Tuck:
.cc70	20 de b3	jsr $b3de			jsr underflow_2
.cc73	ca		dex				dex
.cc74	ca		dex				dex
.cc75	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.cc77	b5 26		lda $26,x			lda DStack+2,x
.cc79	95 28		sta $28,x			sta DStack+4,x
.cc7b	94 26		sty $26,x			sty DStack+2,x
.cc7d	95 24		sta $24,x			sta DStack+0,x
.cc7f	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cc81	b5 27		lda $27,x			lda DStack+3,x
.cc83	95 29		sta $29,x			sta DStack+5,x
.cc85	94 27		sty $27,x			sty DStack+3,x
.cc87	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-(WordListLink+wh_Xt)
=$cc89					en = *	; remember here
>cc6e	19					.byte CL	;wh_CodeLength
.cc89	60		rts				rts
>cc8a	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
>cc8c	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cc8d	eb cb					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cc8f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cc90	08					.byte NN	;wh_Flags	dictionary flags
=52236					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cc91	20 83 b3	jsr $b383	C_Comma:	jsr PopA	; pop c, with underflow check
.cc94					C_Comma_A:
.cc94	ca		dex				dex
.cc95	94 24		sty $24,x			sty DStack+0,x	; save Y
.cc97	a0 00		ldy #$00			ldy #0		; store A
.cc99	91 00		sta ($00),y			sta (cp),y
.cc9b	e6 00		inc $00				inc cp+0	; increment cp
.cc9d	d0 02		bne $cca1			bne +
.cc9f	e6 01		inc $01				inc cp+1
.cca1					+
.cca1	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cca3	e8		inx				inx
=19					CL	.var *-(WordListLink+wh_Xt)
=$cca4					en = *	; remember here
>cc8f	13					.byte CL	;wh_CodeLength
.cca4	60		rts				rts
>cca5	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
>cca6	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HNL
>cca7	0c cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cca9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccaa	08					.byte NN	;wh_Flags	dictionary flags
=52262					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccab	20 9f b3	jsr $b39f	Comma:		jsr PopYA	; pop n, with underflow check
.ccae					Comma_YA:
.ccae	20 94 cc	jsr $cc94			jsr C_Comma_A	; compile LSB
.ccb1	98		tya				tya		; compile MSB
.ccb2	4c 94 cc	jmp $cc94			jmp C_Comma_A
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccb5					en = *	; remember here
>cca9	0a					.byte CL	;wh_CodeLength
>ccb5	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
>ccb7	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccb8	26 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccba	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccbb	08					.byte NN	;wh_Flags	dictionary flags
=52279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccbc	20 ab cc	jsr $ccab	Two_Comma:	jsr Comma
.ccbf	4c ab cc	jmp $ccab			jmp Comma
=6					CL	.var *-(WordListLink+wh_Xt)
=$ccc2					en = *	; remember here
>ccba	06					.byte CL	;wh_CodeLength
.ccc2	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.ccc4	a8		tay				tay
.ccc5	d0 e7		bne $ccae			bne Comma_YA
>ccc7	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
>cccb	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cccc	37 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cccf	08					.byte NN	;wh_Flags	dictionary flags
=52299					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccd0	20 9f b3	jsr $b39f	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ccd3	20 59 b7	jsr $b759	Jsr_Comma_YA:	jsr PushYA	; push addr
.ccd6	a9 20		lda #$20			lda #$20	; JSR abs opcode
.ccd8	20 94 cc	jsr $cc94	Jsr_Comma_3:	jsr C_Comma_A
.ccdb	4c ab cc	jmp $ccab			jmp Comma	; compile addr
=14					CL	.var *-(WordListLink+wh_Xt)
=$ccde					en = *	; remember here
>ccce	0e					.byte CL	;wh_CodeLength
>ccde	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
>cce2	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cce3	4b cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cce5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cce6	08					.byte NN	;wh_Flags	dictionary flags
=52322					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cce7	20 9f b3	jsr $b39f	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.ccea	20 59 b7	jsr $b759	Jmp_Comma_YA:	jsr PushYA	; push addr
.cced	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.ccef	d0 e7		bne $ccd8			bne Jsr_Comma_3
=10					CL	.var *-(WordListLink+wh_Xt)
=$ccf1					en = *	; remember here
>cce5	0a					.byte CL	;wh_CodeLength
>ccf1	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
>ccf3	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ccf4	62 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ccf6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ccf7	10					.byte UF	;wh_Flags	dictionary flags
=52339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ccf8	20 c9 b3	jsr $b3c9	C_Fetch:	jsr underflow_1
.ccfb	a1 24		lda ($24,x)			lda (DStack+0,x)
.ccfd	95 24		sta $24,x			sta DStack+0,x
.ccff	a9 00		lda #$00			lda #0
.cd01	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd03					en = *	; remember here
>ccf6	0b					.byte CL	;wh_CodeLength
.cd03	60		rts				rts
>cd04	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
>cd06	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd07	73 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd09	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd0a	10					.byte UF	;wh_Flags	dictionary flags
=52358					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd0b	20 de b3	jsr $b3de	C_Store:	jsr underflow_2
.cd0e	b5 26		lda $26,x			lda DStack+2,x
.cd10	81 24		sta ($24,x)			sta (DStack+0,x)
.cd12	e8		inx				inx
.cd13	e8		inx				inx
.cd14	e8		inx				inx
.cd15	e8		inx				inx
=11					CL	.var *-(WordListLink+wh_Xt)
=$cd16					en = *	; remember here
>cd09	0b					.byte CL	;wh_CodeLength
.cd16	60		rts				rts
>cd17	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
>cd1a	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd1b	86 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd1e	00					.byte 0	;wh_Flags	dictionary flags
=52378					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd1f					OnePlusStore:
.cd1f	a9 01		lda #$01			lda #1
.cd21	18		clc				clc
.cd22	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd24	81 24		sta ($24,x)			sta (DStack+0,x)
.cd26	90 0c		bcc $cd34			bcc _7			; if carry
.cd28	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd2a	d0 02		bne $cd2e			bne +
.cd2c	f6 25		inc $25,x			inc DStack+1,x
.cd2e					+
.cd2e	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd30	69 00		adc #$00			adc #0
.cd32	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd34					_7:
.cd34	e8		inx				inx			; Drop addr
.cd35	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$cd36					en = *	; remember here
>cd1d	17					.byte CL	;wh_CodeLength
.cd36	60		rts				rts
>cd37	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
>cd39	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd3a	9a cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd3c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd3d	18					.byte UF+NN	;wh_Flags	dictionary flags
=52409					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd3e					Plus_store:
.cd3e	20 de b3	jsr $b3de			jsr underflow_2
.cd41	18		clc				clc
.cd42	b5 26		lda $26,x			lda DStack+2,x
.cd44	61 24		adc ($24,x)			adc (DStack+0,x)
.cd46	81 24		sta ($24,x)			sta (DStack+0,x)
.cd48	f6 24		inc $24,x			inc DStack+0,x
.cd4a	d0 02		bne $cd4e			bne +
.cd4c	f6 25		inc $25,x			inc DStack+1,x
.cd4e					+
.cd4e	b5 27		lda $27,x			lda DStack+3,x
.cd50	61 24		adc ($24,x)			adc (DStack+0,x)
.cd52	81 24		sta ($24,x)			sta (DStack+0,x)
.cd54	4c b6 c4	jmp $c4b6			jmp Two_Drop
=25					CL	.var *-(WordListLink+wh_Xt)
=$cd57					en = *	; remember here
>cd3c	19					.byte CL	;wh_CodeLength
>cd57	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
>cd5b	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd5c	b9 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd5e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd5f	08					.byte NN	;wh_Flags	dictionary flags
=52443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd60	20 83 b3	jsr $b383	Emit:		jsr PopA		; pop char, with underflow check
.cd63					Emit_A:
.cd63	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-(WordListLink+wh_Xt)
=$cd66					en = *	; remember here
>cd5e	06					.byte CL	;wh_CodeLength
>cd66	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
>cd6b	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd6c	db cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd6e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd6f	08					.byte NN	;wh_Flags	dictionary flags
=52459					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd70	a9 20		lda #$20	Space:		lda #AscSP
.cd72	d0 ef		bne $cd63			bne Emit_A
=4					CL	.var *-(WordListLink+wh_Xt)
=$cd74					en = *	; remember here
>cd6e	04					.byte CL	;wh_CodeLength
>cd74	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
>cd78	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cd79	eb cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cd7b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cd7c	18					.byte UF+NN	;wh_Flags	dictionary flags
=52472					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cd7d					Type:
.cd7d	20 de b3	jsr $b3de			jsr underflow_2
.cd80	4c 8d cd	jmp $cd8d			jmp _test
.cd83					_loop:
.cd83	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cd85	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cd87	20 63 cd	jsr $cd63			jsr Emit_A
.cd8a	20 f5 c9	jsr $c9f5			jsr NOS_One_Plus	; increment address
.cd8d	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cd8f	d0 f2		bne $cd83			bne _loop
.cd91	d6 25		dec $25,x			dec DStack+1,x
.cd93	10 ee		bpl $cd83			bpl _loop
.cd95	4c b6 c4	jmp $c4b6			jmp Two_drop
=27					CL	.var *-(WordListLink+wh_Xt)
=$cd98					en = *	; remember here
>cd7b	1b					.byte CL	;wh_CodeLength
.cd98					Print_ASCIIZ_YA:
.cd98	20 9e cd	jsr $cd9e			jsr Print_ASCIIZ_YA_no_lf
.cd9b	4c d7 aa	jmp $aad7	                jmp CR
.cd9e					Print_ASCIIZ_YA_no_lf:
.cd9e	85 18		sta $18				sta tmp3+0		; save string address
.cda0	84 19		sty $19				sty tmp3+1
.cda2	a0 00		ldy #$00			ldy #0
.cda4					Print_ASCIIZ_tmp3_no_lf:
.cda4	b1 18		lda ($18),y			lda (tmp3),y
.cda6	f0 06		beq $cdae			beq _done		; end of string?
.cda8	20 63 cd	jsr $cd63			jsr emit_a
.cdab	c8		iny				iny
.cdac	d0 f6		bne $cda4			bne Print_ASCIIZ_tmp3_no_lf
.cdae					_done:
.cdae	60		rts				rts
>cdaf	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
>cdb6	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdb7	f8 cc					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdb9	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdba	08					.byte NN	;wh_Flags	dictionary flags
=52534					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdbb					Execute:
.cdbb	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.cdbd	b0 2f		bcs $cdee		bcs Throw_Stack_03
.cdbf	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.cdc1	48		pha				pha
.cdc2	b5 24		lda $24,x			lda DStack+0,x
.cdc4	48		pha				pha
.cdc5	e8		inx				inx		; drop addr
.cdc6	e8		inx				inx
.cdc7	08		php				php		; flags for RTI
.cdc8	40		rti				rti
=14					CL	.var *-(WordListLink+wh_Xt)
=$cdc9					en = *	; remember here
>cdb9	0e					.byte CL	;wh_CodeLength
>cdc9	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
>cdcd	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdce	36 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdd0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdd1	08					.byte NN	;wh_Flags	dictionary flags
=52557					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdd2					TwoRot:
.cdd2	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.cdd4	b0 18		bcs $cdee		bcs Throw_Stack_03
.cdd6	86 14		stx $14				stx tmp1+0
.cdd8	e8		inx				inx		; do 4 times
.cdd9	e8		inx				inx
.cdda	e8		inx				inx
.cddb	e8		inx				inx
.cddc	ca		dex		-		dex
.cddd	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.cddf	b5 28		lda $28,x			lda DStack+4,x
.cde1	95 2c		sta $2c,x			sta DStack+8,x
.cde3	b5 24		lda $24,x			lda DStack+0,x
.cde5	95 28		sta $28,x			sta DStack+4,x
.cde7	94 24		sty $24,x			sty DStack+0,x
.cde9	e4 14		cpx $14				cpx tmp1+0
.cdeb	d0 ef		bne $cddc			bne -
=27					CL	.var *-(WordListLink+wh_Xt)
=$cded					en = *	; remember here
>cdd0	1b					.byte CL	;wh_CodeLength
.cded	60		rts				rts
.cdee	4c ed b3	jmp $b3ed	Throw_Stack_03: jmp Throw_Stack
>cdf1	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
>cdf4	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cdf5	4d cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cdf7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cdf8	08					.byte NN	;wh_Flags	dictionary flags
=52596					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cdf9					Rot:
.cdf9	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.cdfb	b0 f1		bcs $cdee		bcs Throw_Stack_03
.cdfd	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.cdff	b5 27		lda $27,x			lda DStack+3,x
.ce01	95 29		sta $29,x			sta DStack+5,x
.ce03	b5 25		lda $25,x			lda DStack+1,x
.ce05	95 27		sta $27,x			sta DStack+3,x
.ce07	94 25		sty $25,x			sty DStack+1,x
.ce09	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce0b	b5 26		lda $26,x			lda DStack+2,x
.ce0d	95 28		sta $28,x			sta DStack+4,x
.ce0f	b5 24		lda $24,x			lda DStack+0,x
.ce11	95 26		sta $26,x			sta DStack+2,x
.ce13	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce15					en = *	; remember here
>cdf7	1c					.byte CL	;wh_CodeLength
.ce15	60		rts				rts
>ce16	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
>ce1a	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce1b	74 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce1d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce1e	08					.byte NN	;wh_Flags	dictionary flags
=52634					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce1f					Not_Rot:
.ce1f	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce21	b0 cb		bcs $cdee		bcs Throw_Stack_03
.ce23	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce25	b5 27		lda $27,x			lda DStack+3,x
.ce27	95 25		sta $25,x			sta DStack+1,x
.ce29	b5 29		lda $29,x			lda DStack+5,x
.ce2b	95 27		sta $27,x			sta DStack+3,x
.ce2d	94 29		sty $29,x			sty DStack+5,x
.ce2f	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce31	b5 26		lda $26,x			lda DStack+2,x
.ce33	95 24		sta $24,x			sta DStack+0,x
.ce35	b5 28		lda $28,x			lda DStack+4,x
.ce37	95 26		sta $26,x			sta DStack+2,x
.ce39	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-(WordListLink+wh_Xt)
=$ce3b					en = *	; remember here
>ce1d	1c					.byte CL	;wh_CodeLength
.ce3b	60		rts				rts
>ce3c	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
>ce3d	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce3e	9a cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce40	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce41	08					.byte NN	;wh_Flags	dictionary flags
=52669					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce42					Store:
.ce42	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ce44	b0 a8		bcs $cdee		bcs Throw_Stack_03
.ce46	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ce48	81 24		sta ($24,x)			sta (DStack+0,x)
.ce4a	f6 24		inc $24,x			inc DStack+0,x
.ce4c	d0 02		bne $ce50			bne +
.ce4e	f6 25		inc $25,x			inc DStack+1,x
.ce50					+
.ce50	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ce52	81 24		sta ($24,x)			sta (DStack+0,x)
.ce54	e8		inx				inx		; 2Drop
.ce55	e8		inx				inx
.ce56	e8		inx				inx
.ce57	e8		inx				inx
=22					CL	.var *-(WordListLink+wh_Xt)
=$ce58					en = *	; remember here
>ce40	16					.byte CL	;wh_CodeLength
.ce58	60		rts				rts
>ce59	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
>ce5a	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce5b	bd cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce5d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce5e	08					.byte NN	;wh_Flags	dictionary flags
=52698					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce5f					Fetch:
.ce5f	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce61	b0 8b		bcs $cdee		bcs Throw_Stack_03
.ce63	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ce65	a8		tay				tay
.ce66	f6 24		inc $24,x			inc DStack+0,x
.ce68	d0 02		bne $ce6c			bne +
.ce6a	f6 25		inc $25,x			inc DStack+1,x
.ce6c					+
.ce6c	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.ce6e	95 25		sta $25,x			sta DStack+1,x
.ce70	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$ce72					en = *	; remember here
>ce5d	13					.byte CL	;wh_CodeLength
.ce72	60		rts				rts
>ce73	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
>ce75	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce76	da cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce78	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce79	41					.byte CO+R6	;wh_Flags	dictionary flags
=52725					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce7a					To_R:
.ce7a	68		pla				pla		; move the return address out of the way
.ce7b	85 1c		sta $1c				sta tmp5+0
.ce7d	68		pla				pla
.ce7e	85 1d		sta $1d				sta tmp5+1
.ce80	20 c9 b3	jsr $b3c9			jsr underflow_1
.ce83	b5 25		lda $25,x			lda DStack+1,x	; MSB
.ce85	48		pha				pha
.ce86	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ce88	48		pha				pha
.ce89	e8		inx				inx
.ce8a	e8		inx				inx
.ce8b	a5 1d		lda $1d				lda tmp5+1	; move the return address back in
.ce8d	48		pha				pha
.ce8e	a5 1c		lda $1c				lda tmp5+0
.ce90	48		pha				pha
=23					CL	.var *-(WordListLink+wh_Xt)
=$ce91					en = *	; remember here
>ce78	17					.byte CL	;wh_CodeLength
.ce91	60		rts				rts
>ce92	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
>ce94	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ce95	f5 cd					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ce97	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ce98	41					.byte CO+R6	;wh_Flags	dictionary flags
=52756					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ce99					R_From:
.ce99	68		pla				pla		; Move the RTS addr out of the way
.ce9a	85 1c		sta $1c				sta tmp5+0
.ce9c	68		pla				pla
.ce9d	85 1d		sta $1d				sta tmp5+1
.ce9f	ca		dex				dex
.cea0	ca		dex				dex
.cea1	68		pla				pla		; LSB
.cea2	95 24		sta $24,x			sta DStack+0,x
.cea4	68		pla				pla		; MSB
.cea5	95 25		sta $25,x			sta DStack+1,x
.cea7	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cea9	48		pha				pha
.ceaa	a5 1c		lda $1c				lda tmp5+0
.ceac	48		pha				pha
=20					CL	.var *-(WordListLink+wh_Xt)
=$cead					en = *	; remember here
>ce97	14					.byte CL	;wh_CodeLength
.cead	60		rts				rts
>ceae	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
>ceb0	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HNL
>ceb1	14 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceb3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>ceb4	09					.byte NN+CO	;wh_Flags	dictionary flags
=52784					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.ceb5					R_Fetch:
.ceb5	86 14		stx $14				stx tmp1	; save data stack index
.ceb7	ba		tsx				tsx		; X= return stack index
.ceb8	bd 03 01	lda $0103,x			lda RStack+3,x
.cebb	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cebe	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cec0	4c 59 b7	jmp $b759			jmp PushYA
=14					CL	.var *-(WordListLink+wh_Xt)
=$cec3					en = *	; remember here
>ceb3	0e					.byte CL	;wh_CodeLength
>cec3	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
>cec7	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cec8	30 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>ceca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cecb	10					.byte UF	;wh_Flags	dictionary flags
=52807					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cecc					Over:
.cecc	20 de b3	jsr $b3de			jsr underflow_2
.cecf	b5 26		lda $26,x			lda DStack+2,x	; LSB
.ced1	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.ced3	ca		dex				dex		; PushYA
.ced4	ca		dex				dex
.ced5	95 24		sta $24,x			sta DStack+0,x
.ced7	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$ced9					en = *	; remember here
>ceca	0d					.byte CL	;wh_CodeLength
.ced9	60		rts				rts
>ceda	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
>cede	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cedf	47 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cee1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cee2	18					.byte UF+NN	;wh_Flags	dictionary flags
=52830					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cee3					Question_Dup:
.cee3	20 c9 b3	jsr $b3c9			jsr underflow_1
.cee6	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cee8	15 25		ora $25,x			ora DStack+1,x
.ceea	d0 0c		bne $cef8			bne Dup_NoUf
=9					CL	.var *-(WordListLink+wh_Xt)
=$ceec					en = *	; remember here
>cee1	09					.byte CL	;wh_CodeLength
.ceec	60		rts				rts
>ceed	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
>cef0	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cef1	5e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cef3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cef4	10					.byte UF	;wh_Flags	dictionary flags
=52848					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cef5					Dup:
.cef5	20 c9 b3	jsr $b3c9			jsr underflow_1
.cef8	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cefa	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cefc	ca		dex				dex
.cefd	ca		dex				dex
.cefe	95 24		sta $24,x			sta DStack+0,x
.cf00	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-(WordListLink+wh_Xt)
=$cf02					en = *	; remember here
>cef3	0d					.byte CL	;wh_CodeLength
.cf02	60		rts				rts
.cf03					PushAY:
.cf03	ca		dex				dex
.cf04	ca		dex				dex
.cf05	94 24		sty $24,x			sty DStack+0,x
.cf07	95 25		sta $25,x			sta DStack+1,x
.cf09	60		rts				rts
>cf0a	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
>cf0e	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf0f	70 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf11	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf12	10					.byte UF	;wh_Flags	dictionary flags
=52878					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf13					Swap:
.cf13	20 de b3	jsr $b3de			jsr underflow_2
.cf16	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf18	b4 26		ldy $26,x			ldy DStack+2,x
.cf1a	95 26		sta $26,x			sta DStack+2,x
.cf1c	94 24		sty $24,x			sty DStack+0,x
.cf1e	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf20	b4 27		ldy $27,x			ldy DStack+3,x
.cf22	95 27		sta $27,x			sta DStack+3,x
.cf24	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-(WordListLink+wh_Xt)
=$cf26					en = *	; remember here
>cf11	13					.byte CL	;wh_CodeLength
.cf26	60		rts				rts
>cf27	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
>cf2b	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf2c	8e ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf2e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf2f	10					.byte UF	;wh_Flags	dictionary flags
=52907					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf30					Drop:
.cf30	20 c9 b3	jsr $b3c9			jsr underflow_1
.cf33	e8		inx				inx
.cf34	e8		inx				inx
=5					CL	.var *-(WordListLink+wh_Xt)
=$cf35					en = *	; remember here
>cf2e	05					.byte CL	;wh_CodeLength
.cf35	60		rts				rts
=52907					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cf36	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
>cf3b	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf3c	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf3e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf3f	08					.byte NN	;wh_Flags	dictionary flags
=52923					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf40	4c 24 aa	jmp $aa24			jmp Words
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf43					en = *	; remember here
>cf3e	03					.byte CL	;wh_CodeLength
>cf43	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cf4b	72 64 6c 69 73 74
>cf51	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf52	bb ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf54	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf55	08					.byte NN	;wh_Flags	dictionary flags
=52945					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf56	4c 20 9f	jmp $9f20			jmp Forth_WordList
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf59					en = *	; remember here
>cf54	03					.byte CL	;wh_CodeLength
>cf59	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
>cf5e	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf5f	d1 ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf61	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf62	08					.byte NN	;wh_Flags	dictionary flags
=52958					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf63	4c 19 a0	jmp $a019			jmp Forth
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf66					en = *	; remember here
>cf61	03					.byte CL	;wh_CodeLength
>cf66	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cf6e	72
>cf6f	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cf70	de ce					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cf72	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cf73	08					.byte NN	;wh_Flags	dictionary flags
=52975					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cf74	4c dd a0	jmp $a0dd			jmp Set_Order
=3					CL	.var *-(WordListLink+wh_Xt)
=$cf77					en = *	; remember here
>cf72	03					.byte CL	;wh_CodeLength
=52975					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
.cf77					assembler:
=0					WordListLink .var 0
.cf77					asm_r:
.cf77	68		pla			pla		; pop RTS addr
.cf78	a8		tay			tay
.cf79	68		pla			pla
.cf7a	20 b9 cf	jsr $cfb9		jsr asm_op	; compile opcode
.cf7d	b5 25		lda $25,x		lda DStack+1,x	; check range
.cf7f	f0 09		beq $cf8a		beq _plus
.cf81	c9 ff		cmp #$ff		cmp #$ff
.cf83	f0 0b		beq $cf90		beq _minus
.cf85	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cf87	4c 28 b4	jmp $b428		jmp ThrowA
.cf8a	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cf8c	30 f7		bmi $cf85		bmi _err
.cf8e	10 04		bpl $cf94		bpl _store
.cf90	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cf92	10 f1		bpl $cf85		bpl _err
.cf94	4c 91 cc	jmp $cc91	_store:	jmp C_Comma
.cf97					asm_1:
.cf97	68		pla			pla		; pop RTS addr
.cf98	a8		tay			tay
.cf99	68		pla			pla
.cf9a	20 b9 cf	jsr $cfb9		jsr asm_op	; compile opcode
.cf9d	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.cf9f	f0 04		beq $cfa5		beq _store	;   unsigned byte?
.cfa1	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.cfa3	d0 03		bne $cfa8		bne _err
.cfa5	4c 91 cc	jmp $cc91	_store:	jmp C_Comma
.cfa8	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cfaa	4c 28 b4	jmp $b428		jmp ThrowA
.cfad					asm_2:
.cfad	68		pla			pla		; pop RTS addr
.cfae	a8		tay			tay
.cfaf	68		pla			pla
.cfb0	20 b9 cf	jsr $cfb9		jsr asm_op	; compile opcode
.cfb3	4c ab cc	jmp $ccab		jmp Comma	; compile operand
.cfb6					asm_0:
.cfb6	68		pla			pla		; pop RTS addr
.cfb7	a8		tay			tay
.cfb8	68		pla			pla
.cfb9	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.cfbb	85 15		sta $15			sta tmp1+1
.cfbd	a0 01		ldy #$01		ldy #1		; get opcode byte
.cfbf	b1 14		lda ($14),y		lda (tmp1),y
.cfc1	4c 94 cc	jmp $cc94		jmp C_Comma_A	; compile opcode
>cfc4	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
>cfc9	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfca	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfcc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfcd	08					.byte NN	;wh_Flags	dictionary flags
=53065					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfce	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfd1					en = *	; remember here
>cfcc	03					.byte CL	;wh_CodeLength
>cfd1	69					.byte $69
>cfd2	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
>cfd7	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfd8	49 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfda	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfdb	08					.byte NN	;wh_Flags	dictionary flags
=53079					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfdc	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfdf					en = *	; remember here
>cfda	03					.byte CL	;wh_CodeLength
>cfdf	7d					.byte $7d
>cfe0	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
>cfe5	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cfe6	57 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cfe8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cfe9	08					.byte NN	;wh_Flags	dictionary flags
=53093					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cfea	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$cfed					en = *	; remember here
>cfe8	03					.byte CL	;wh_CodeLength
>cfed	79					.byte $79
>cfee	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
>cff3	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>cff4	65 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>cff6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>cff7	08					.byte NN	;wh_Flags	dictionary flags
=53107					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.cff8	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$cffb					en = *	; remember here
>cff6	03					.byte CL	;wh_CodeLength
>cffb	65					.byte $65
>cffc	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d003	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d004	73 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d006	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d007	08					.byte NN	;wh_Flags	dictionary flags
=53123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d008	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d00b					en = *	; remember here
>d006	03					.byte CL	;wh_CodeLength
>d00b	71					.byte $71
>d00c	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d012	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d013	83 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d015	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d016	08					.byte NN	;wh_Flags	dictionary flags
=53138					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d017	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d01a					en = *	; remember here
>d015	03					.byte CL	;wh_CodeLength
>d01a	75					.byte $75
>d01b	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d022	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d023	92 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d025	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d026	08					.byte NN	;wh_Flags	dictionary flags
=53154					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d027	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d02a					en = *	; remember here
>d025	03					.byte CL	;wh_CodeLength
>d02a	61					.byte $61
>d02b	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
>d02f	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HNL
>d030	a2 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d032	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d033	08					.byte NN	;wh_Flags	dictionary flags
=53167					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d034	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d037					en = *	; remember here
>d032	03					.byte CL	;wh_CodeLength
>d037	2d					.byte $2d
>d038	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
>d03d	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d03e	af cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d040	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d041	08					.byte NN	;wh_Flags	dictionary flags
=53181					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d042	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d045					en = *	; remember here
>d040	03					.byte CL	;wh_CodeLength
>d045	29					.byte $29
>d046	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
>d04b	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d04c	bd cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d04e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d04f	08					.byte NN	;wh_Flags	dictionary flags
=53195					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d050	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d053					en = *	; remember here
>d04e	03					.byte CL	;wh_CodeLength
>d053	3d					.byte $3d
>d054	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
>d059	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d05a	cb cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d05c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d05d	08					.byte NN	;wh_Flags	dictionary flags
=53209					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d05e	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d061					en = *	; remember here
>d05c	03					.byte CL	;wh_CodeLength
>d061	39					.byte $39
>d062	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
>d067	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d068	d9 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d06a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d06b	08					.byte NN	;wh_Flags	dictionary flags
=53223					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d06c	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d06f					en = *	; remember here
>d06a	03					.byte CL	;wh_CodeLength
>d06f	25					.byte $25
>d070	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d077	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d078	e7 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d07a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d07b	08					.byte NN	;wh_Flags	dictionary flags
=53239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d07c	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d07f					en = *	; remember here
>d07a	03					.byte CL	;wh_CodeLength
>d07f	31					.byte $31
>d080	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
>d086	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d087	f7 cf					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d089	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d08a	08					.byte NN	;wh_Flags	dictionary flags
=53254					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d08b	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d08e					en = *	; remember here
>d089	03					.byte CL	;wh_CodeLength
>d08e	35					.byte $35
>d08f	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d096	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d097	06 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d099	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d09a	08					.byte NN	;wh_Flags	dictionary flags
=53270					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d09b	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d09e					en = *	; remember here
>d099	03					.byte CL	;wh_CodeLength
>d09e	21					.byte $21
>d09f	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
>d0a2	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0a3	16 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0a5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0a6	08					.byte NN	;wh_Flags	dictionary flags
=53282					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0a7	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0aa					en = *	; remember here
>d0a5	03					.byte CL	;wh_CodeLength
>d0aa	0e					.byte $0e
>d0ab	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
>d0b0	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0b1	22 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0b4	08					.byte NN	;wh_Flags	dictionary flags
=53296					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0b5	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0b8					en = *	; remember here
>d0b3	03					.byte CL	;wh_CodeLength
>d0b8	0a					.byte $0a
>d0b9	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
>d0be	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0bf	30 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0c2	08					.byte NN	;wh_Flags	dictionary flags
=53310					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0c3	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0c6					en = *	; remember here
>d0c1	03					.byte CL	;wh_CodeLength
>d0c6	1e					.byte $1e
>d0c7	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
>d0cc	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0cd	3e d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0d0	08					.byte NN	;wh_Flags	dictionary flags
=53324					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0d1	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0d4					en = *	; remember here
>d0cf	03					.byte CL	;wh_CodeLength
>d0d4	06					.byte $06
>d0d5	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
>d0db	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0dc	4c d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0de	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0df	08					.byte NN	;wh_Flags	dictionary flags
=53339					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0e0	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0e3					en = *	; remember here
>d0de	03					.byte CL	;wh_CodeLength
>d0e3	16					.byte $16
>d0e4	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
>d0e7	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0e8	5b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0eb	08					.byte NN	;wh_Flags	dictionary flags
=53351					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0ec	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0ef					en = *	; remember here
>d0ea	03					.byte CL	;wh_CodeLength
>d0ef	90					.byte $90
>d0f0	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
>d0f3	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d0f4	67 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d0f6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d0f7	08					.byte NN	;wh_Flags	dictionary flags
=53363					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d0f8	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d0fb					en = *	; remember here
>d0f6	03					.byte CL	;wh_CodeLength
>d0fb	b0					.byte $b0
>d0fc	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
>d0ff	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d100	73 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d102	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d103	08					.byte NN	;wh_Flags	dictionary flags
=53375					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d104	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d107					en = *	; remember here
>d102	03					.byte CL	;wh_CodeLength
>d107	f0					.byte $f0
>d108	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
>d10b	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d10c	7f d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d10e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d10f	08					.byte NN	;wh_Flags	dictionary flags
=53387					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d110	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d113					en = *	; remember here
>d10e	03					.byte CL	;wh_CodeLength
>d113	2c					.byte $2c
>d114	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
>d119	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d11a	8b d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d11c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d11d	08					.byte NN	;wh_Flags	dictionary flags
=53401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d11e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d121					en = *	; remember here
>d11c	03					.byte CL	;wh_CodeLength
>d121	24					.byte $24
>d122	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
>d125	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d126	99 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d128	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d129	08					.byte NN	;wh_Flags	dictionary flags
=53413					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d12a	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d12d					en = *	; remember here
>d128	03					.byte CL	;wh_CodeLength
>d12d	30					.byte $30
>d12e	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
>d131	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d132	a5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d134	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d135	08					.byte NN	;wh_Flags	dictionary flags
=53425					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d136	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d139					en = *	; remember here
>d134	03					.byte CL	;wh_CodeLength
>d139	d0					.byte $d0
>d13a	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
>d13d	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d13e	b1 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d140	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d141	08					.byte NN	;wh_Flags	dictionary flags
=53437					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d142	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d145					en = *	; remember here
>d140	03					.byte CL	;wh_CodeLength
>d145	10					.byte $10
>d146	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
>d149	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d14a	bd d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d14c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d14d	08					.byte NN	;wh_Flags	dictionary flags
=53449					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d14e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d151					en = *	; remember here
>d14c	03					.byte CL	;wh_CodeLength
>d151	00					.byte $00
>d152	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
>d155	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d156	c9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d158	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d159	08					.byte NN	;wh_Flags	dictionary flags
=53461					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d15a	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d15d					en = *	; remember here
>d158	03					.byte CL	;wh_CodeLength
>d15d	50					.byte $50
>d15e	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
>d161	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d162	d5 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d164	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d165	08					.byte NN	;wh_Flags	dictionary flags
=53473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d166	20 77 cf	jsr $cf77		jsr asm_r
=3					CL	.var *-(WordListLink+wh_Xt)
=$d169					en = *	; remember here
>d164	03					.byte CL	;wh_CodeLength
>d169	70					.byte $70
>d16a	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
>d16d	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d16e	e1 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d170	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d171	08					.byte NN	;wh_Flags	dictionary flags
=53485					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d172	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d175					en = *	; remember here
>d170	03					.byte CL	;wh_CodeLength
>d175	18					.byte $18
>d176	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
>d179	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d17a	ed d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d17c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d17d	08					.byte NN	;wh_Flags	dictionary flags
=53497					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d17e	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d181					en = *	; remember here
>d17c	03					.byte CL	;wh_CodeLength
>d181	d8					.byte $d8
>d182	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
>d185	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d186	f9 d0					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d188	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d189	08					.byte NN	;wh_Flags	dictionary flags
=53509					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d18a	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d18d					en = *	; remember here
>d188	03					.byte CL	;wh_CodeLength
>d18d	58					.byte $58
>d18e	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
>d191	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d192	05 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d194	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d195	08					.byte NN	;wh_Flags	dictionary flags
=53521					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d196	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d199					en = *	; remember here
>d194	03					.byte CL	;wh_CodeLength
>d199	b8					.byte $b8
>d19a	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
>d19d	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d19e	11 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1a1	08					.byte NN	;wh_Flags	dictionary flags
=53533					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1a2	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1a5					en = *	; remember here
>d1a0	03					.byte CL	;wh_CodeLength
>d1a5	cd					.byte $cd
>d1a6	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
>d1ab	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ac	1d d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ae	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1af	08					.byte NN	;wh_Flags	dictionary flags
=53547					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1b0	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1b3					en = *	; remember here
>d1ae	03					.byte CL	;wh_CodeLength
>d1b3	c9					.byte $c9
>d1b4	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
>d1b9	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1ba	2b d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1bd	08					.byte NN	;wh_Flags	dictionary flags
=53561					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1be	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1c1					en = *	; remember here
>d1bc	03					.byte CL	;wh_CodeLength
>d1c1	dd					.byte $dd
>d1c2	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
>d1c7	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1c8	39 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1ca	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1cb	08					.byte NN	;wh_Flags	dictionary flags
=53575					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1cc	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1cf					en = *	; remember here
>d1ca	03					.byte CL	;wh_CodeLength
>d1cf	d9					.byte $d9
>d1d0	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
>d1d5	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1d6	47 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1d8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1d9	08					.byte NN	;wh_Flags	dictionary flags
=53589					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1da	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1dd					en = *	; remember here
>d1d8	03					.byte CL	;wh_CodeLength
>d1dd	c5					.byte $c5
>d1de	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d1e5	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1e6	55 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1e8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1e9	08					.byte NN	;wh_Flags	dictionary flags
=53605					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1ea	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1ed					en = *	; remember here
>d1e8	03					.byte CL	;wh_CodeLength
>d1ed	d1					.byte $d1
>d1ee	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
>d1f4	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d1f5	65 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d1f7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d1f8	08					.byte NN	;wh_Flags	dictionary flags
=53620					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d1f9	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d1fc					en = *	; remember here
>d1f7	03					.byte CL	;wh_CodeLength
>d1fc	d5					.byte $d5
>d1fd	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d204	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d205	74 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d207	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d208	08					.byte NN	;wh_Flags	dictionary flags
=53636					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d209	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d20c					en = *	; remember here
>d207	03					.byte CL	;wh_CodeLength
>d20c	c1					.byte $c1
>d20d	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
>d210	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d211	84 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d213	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d214	08					.byte NN	;wh_Flags	dictionary flags
=53648					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d215	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d218					en = *	; remember here
>d213	03					.byte CL	;wh_CodeLength
>d218	ec					.byte $ec
>d219	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
>d21e	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d21f	90 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d221	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d222	08					.byte NN	;wh_Flags	dictionary flags
=53662					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d223	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d226					en = *	; remember here
>d221	03					.byte CL	;wh_CodeLength
>d226	e0					.byte $e0
>d227	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
>d22c	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d22d	9e d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d22f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d230	08					.byte NN	;wh_Flags	dictionary flags
=53676					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d231	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d234					en = *	; remember here
>d22f	03					.byte CL	;wh_CodeLength
>d234	e4					.byte $e4
>d235	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
>d238	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d239	ac d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d23b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d23c	08					.byte NN	;wh_Flags	dictionary flags
=53688					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d23d	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d240					en = *	; remember here
>d23b	03					.byte CL	;wh_CodeLength
>d240	cc					.byte $cc
>d241	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
>d246	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d247	b8 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d249	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d24a	08					.byte NN	;wh_Flags	dictionary flags
=53702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d24b	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d24e					en = *	; remember here
>d249	03					.byte CL	;wh_CodeLength
>d24e	c0					.byte $c0
>d24f	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
>d254	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d255	c6 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d257	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d258	08					.byte NN	;wh_Flags	dictionary flags
=53716					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d259	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d25c					en = *	; remember here
>d257	03					.byte CL	;wh_CodeLength
>d25c	c4					.byte $c4
>d25d	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
>d260	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d261	d4 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d263	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d264	08					.byte NN	;wh_Flags	dictionary flags
=53728					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d265	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d268					en = *	; remember here
>d263	03					.byte CL	;wh_CodeLength
>d268	ce					.byte $ce
>d269	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
>d26e	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d26f	e0 d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d271	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d272	08					.byte NN	;wh_Flags	dictionary flags
=53742					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d273	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d276					en = *	; remember here
>d271	03					.byte CL	;wh_CodeLength
>d276	3a					.byte $3a
>d277	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
>d27c	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d27d	ee d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d27f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d280	08					.byte NN	;wh_Flags	dictionary flags
=53756					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d281	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d284					en = *	; remember here
>d27f	03					.byte CL	;wh_CodeLength
>d284	de					.byte $de
>d285	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
>d28a	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d28b	fc d1					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d28d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d28e	08					.byte NN	;wh_Flags	dictionary flags
=53770					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d28f	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d292					en = *	; remember here
>d28d	03					.byte CL	;wh_CodeLength
>d292	c6					.byte $c6
>d293	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
>d299	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d29a	0a d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d29c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d29d	08					.byte NN	;wh_Flags	dictionary flags
=53785					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d29e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2a1					en = *	; remember here
>d29c	03					.byte CL	;wh_CodeLength
>d2a1	d6					.byte $d6
>d2a2	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
>d2a5	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2a6	19 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2a8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2a9	08					.byte NN	;wh_Flags	dictionary flags
=53797					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2aa	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ad					en = *	; remember here
>d2a8	03					.byte CL	;wh_CodeLength
>d2ad	ca					.byte $ca
>d2ae	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
>d2b1	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2b2	25 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2b4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2b5	08					.byte NN	;wh_Flags	dictionary flags
=53809					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2b6	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2b9					en = *	; remember here
>d2b4	03					.byte CL	;wh_CodeLength
>d2b9	88					.byte $88
>d2ba	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
>d2bd	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2be	31 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2c0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2c1	08					.byte NN	;wh_Flags	dictionary flags
=53821					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2c2	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2c5					en = *	; remember here
>d2c0	03					.byte CL	;wh_CodeLength
>d2c5	4d					.byte $4d
>d2c6	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
>d2cb	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2cc	3d d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ce	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2cf	08					.byte NN	;wh_Flags	dictionary flags
=53835					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2d0	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2d3					en = *	; remember here
>d2ce	03					.byte CL	;wh_CodeLength
>d2d3	49					.byte $49
>d2d4	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
>d2d9	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2da	4b d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2dc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2dd	08					.byte NN	;wh_Flags	dictionary flags
=53849					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2de	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2e1					en = *	; remember here
>d2dc	03					.byte CL	;wh_CodeLength
>d2e1	5d					.byte $5d
>d2e2	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
>d2e7	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2e8	59 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2ea	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2eb	08					.byte NN	;wh_Flags	dictionary flags
=53863					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2ec	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2ef					en = *	; remember here
>d2ea	03					.byte CL	;wh_CodeLength
>d2ef	59					.byte $59
>d2f0	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
>d2f5	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d2f6	67 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d2f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d2f9	08					.byte NN	;wh_Flags	dictionary flags
=53877					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d2fa	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d2fd					en = *	; remember here
>d2f8	03					.byte CL	;wh_CodeLength
>d2fd	45					.byte $45
>d2fe	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d305	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d306	75 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d308	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d309	08					.byte NN	;wh_Flags	dictionary flags
=53893					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d30a	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d30d					en = *	; remember here
>d308	03					.byte CL	;wh_CodeLength
>d30d	51					.byte $51
>d30e	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
>d314	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d315	85 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d317	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d318	08					.byte NN	;wh_Flags	dictionary flags
=53908					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d319	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d31c					en = *	; remember here
>d317	03					.byte CL	;wh_CodeLength
>d31c	55					.byte $55
>d31d	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d324	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d325	94 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d327	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d328	08					.byte NN	;wh_Flags	dictionary flags
=53924					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d329	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d32c					en = *	; remember here
>d327	03					.byte CL	;wh_CodeLength
>d32c	41					.byte $41
>d32d	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
>d330	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d331	a4 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d333	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d334	08					.byte NN	;wh_Flags	dictionary flags
=53936					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d335	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d338					en = *	; remember here
>d333	03					.byte CL	;wh_CodeLength
>d338	ee					.byte $ee
>d339	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
>d33e	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d33f	b0 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d341	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d342	08					.byte NN	;wh_Flags	dictionary flags
=53950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d343	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d346					en = *	; remember here
>d341	03					.byte CL	;wh_CodeLength
>d346	1a					.byte $1a
>d347	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
>d34c	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d34d	be d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d34f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d350	08					.byte NN	;wh_Flags	dictionary flags
=53964					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d351	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d354					en = *	; remember here
>d34f	03					.byte CL	;wh_CodeLength
>d354	fe					.byte $fe
>d355	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
>d35a	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d35b	cc d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d35d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d35e	08					.byte NN	;wh_Flags	dictionary flags
=53978					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d35f	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d362					en = *	; remember here
>d35d	03					.byte CL	;wh_CodeLength
>d362	e6					.byte $e6
>d363	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d369	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d36a	da d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d36c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d36d	08					.byte NN	;wh_Flags	dictionary flags
=53993					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d36e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d371					en = *	; remember here
>d36c	03					.byte CL	;wh_CodeLength
>d371	f6					.byte $f6
>d372	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
>d375	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d376	e9 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d378	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d379	08					.byte NN	;wh_Flags	dictionary flags
=54005					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d37a	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d37d					en = *	; remember here
>d378	03					.byte CL	;wh_CodeLength
>d37d	e8					.byte $e8
>d37e	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
>d381	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d382	f5 d2					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d384	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d385	08					.byte NN	;wh_Flags	dictionary flags
=54017					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d386	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d389					en = *	; remember here
>d384	03					.byte CL	;wh_CodeLength
>d389	c8					.byte $c8
>d38a	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
>d38d	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d38e	01 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d390	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d391	08					.byte NN	;wh_Flags	dictionary flags
=54029					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d392	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d395					en = *	; remember here
>d390	03					.byte CL	;wh_CodeLength
>d395	4c					.byte $4c
>d396	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
>d39b	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d39c	0d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d39e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d39f	08					.byte NN	;wh_Flags	dictionary flags
=54043					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3a0	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3a3					en = *	; remember here
>d39e	03					.byte CL	;wh_CodeLength
>d3a3	6c					.byte $6c
>d3a4	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
>d3a7	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3a8	1b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ab	08					.byte NN	;wh_Flags	dictionary flags
=54055					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3ac	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3af					en = *	; remember here
>d3aa	03					.byte CL	;wh_CodeLength
>d3af	20					.byte $20
>d3b0	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
>d3b3	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3b4	27 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3b6	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3b7	08					.byte NN	;wh_Flags	dictionary flags
=54067					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3b8	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3bb					en = *	; remember here
>d3b6	03					.byte CL	;wh_CodeLength
>d3bb	ad					.byte $ad
>d3bc	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
>d3c1	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3c2	33 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3c4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3c5	08					.byte NN	;wh_Flags	dictionary flags
=54081					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3c6	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3c9					en = *	; remember here
>d3c4	03					.byte CL	;wh_CodeLength
>d3c9	a9					.byte $a9
>d3ca	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
>d3cf	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3d0	41 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3d2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3d3	08					.byte NN	;wh_Flags	dictionary flags
=54095					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3d4	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3d7					en = *	; remember here
>d3d2	03					.byte CL	;wh_CodeLength
>d3d7	bd					.byte $bd
>d3d8	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
>d3dd	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3de	4f d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3e1	08					.byte NN	;wh_Flags	dictionary flags
=54109					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3e2	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3e5					en = *	; remember here
>d3e0	03					.byte CL	;wh_CodeLength
>d3e5	b9					.byte $b9
>d3e6	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
>d3eb	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3ec	5d d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ef	08					.byte NN	;wh_Flags	dictionary flags
=54123					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d3f0	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d3f3					en = *	; remember here
>d3ee	03					.byte CL	;wh_CodeLength
>d3f3	a5					.byte $a5
>d3f4	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d3fb	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d3fc	6b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d3fe	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d3ff	08					.byte NN	;wh_Flags	dictionary flags
=54139					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d400	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d403					en = *	; remember here
>d3fe	03					.byte CL	;wh_CodeLength
>d403	b1					.byte $b1
>d404	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
>d40a	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d40b	7b d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d40d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d40e	08					.byte NN	;wh_Flags	dictionary flags
=54154					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d40f	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d412					en = *	; remember here
>d40d	03					.byte CL	;wh_CodeLength
>d412	b5					.byte $b5
>d413	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d41a	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d41b	8a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d41d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d41e	08					.byte NN	;wh_Flags	dictionary flags
=54170					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d41f	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d422					en = *	; remember here
>d41d	03					.byte CL	;wh_CodeLength
>d422	a1					.byte $a1
>d423	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
>d426	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d427	9a d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d429	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d42a	08					.byte NN	;wh_Flags	dictionary flags
=54182					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d42b	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d42e					en = *	; remember here
>d429	03					.byte CL	;wh_CodeLength
>d42e	ae					.byte $ae
>d42f	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
>d434	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d435	a6 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d437	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d438	08					.byte NN	;wh_Flags	dictionary flags
=54196					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d439	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d43c					en = *	; remember here
>d437	03					.byte CL	;wh_CodeLength
>d43c	a2					.byte $a2
>d43d	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
>d442	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d443	b4 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d445	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d446	08					.byte NN	;wh_Flags	dictionary flags
=54210					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d447	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d44a					en = *	; remember here
>d445	03					.byte CL	;wh_CodeLength
>d44a	be					.byte $be
>d44b	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
>d450	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d451	c2 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d453	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d454	08					.byte NN	;wh_Flags	dictionary flags
=54224					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d455	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d458					en = *	; remember here
>d453	03					.byte CL	;wh_CodeLength
>d458	a6					.byte $a6
>d459	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d45f	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d460	d0 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d462	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d463	08					.byte NN	;wh_Flags	dictionary flags
=54239					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d464	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d467					en = *	; remember here
>d462	03					.byte CL	;wh_CodeLength
>d467	b6					.byte $b6
>d468	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
>d46b	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d46c	df d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d46e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d46f	08					.byte NN	;wh_Flags	dictionary flags
=54251					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d470	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d473					en = *	; remember here
>d46e	03					.byte CL	;wh_CodeLength
>d473	ac					.byte $ac
>d474	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
>d479	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d47a	eb d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d47c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d47d	08					.byte NN	;wh_Flags	dictionary flags
=54265					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d47e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d481					en = *	; remember here
>d47c	03					.byte CL	;wh_CodeLength
>d481	a0					.byte $a0
>d482	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
>d487	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d488	f9 d3					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d48a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d48b	08					.byte NN	;wh_Flags	dictionary flags
=54279					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d48c	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d48f					en = *	; remember here
>d48a	03					.byte CL	;wh_CodeLength
>d48f	bc					.byte $bc
>d490	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
>d495	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d496	07 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d498	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d499	08					.byte NN	;wh_Flags	dictionary flags
=54293					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d49a	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d49d					en = *	; remember here
>d498	03					.byte CL	;wh_CodeLength
>d49d	a4					.byte $a4
>d49e	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4a4	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4a5	15 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4a8	08					.byte NN	;wh_Flags	dictionary flags
=54308					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4a9	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4ac					en = *	; remember here
>d4a7	03					.byte CL	;wh_CodeLength
>d4ac	b4					.byte $b4
>d4ad	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
>d4b0	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4b1	24 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4b3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4b4	08					.byte NN	;wh_Flags	dictionary flags
=54320					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4b5	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4b8					en = *	; remember here
>d4b3	03					.byte CL	;wh_CodeLength
>d4b8	4e					.byte $4e
>d4b9	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
>d4be	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4bf	30 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4c1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4c2	08					.byte NN	;wh_Flags	dictionary flags
=54334					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4c3	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4c6					en = *	; remember here
>d4c1	03					.byte CL	;wh_CodeLength
>d4c6	4a					.byte $4a
>d4c7	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
>d4cc	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4cd	3e d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4cf	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4d0	08					.byte NN	;wh_Flags	dictionary flags
=54348					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4d1	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4d4					en = *	; remember here
>d4cf	03					.byte CL	;wh_CodeLength
>d4d4	5e					.byte $5e
>d4d5	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
>d4da	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4db	4c d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4dd	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4de	08					.byte NN	;wh_Flags	dictionary flags
=54362					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4df	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4e2					en = *	; remember here
>d4dd	03					.byte CL	;wh_CodeLength
>d4e2	46					.byte $46
>d4e3	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
>d4e9	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4ea	5a d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4ed	08					.byte NN	;wh_Flags	dictionary flags
=54377					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4ee	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4f1					en = *	; remember here
>d4ec	03					.byte CL	;wh_CodeLength
>d4f1	56					.byte $56
>d4f2	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
>d4f5	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d4f6	69 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d4f8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d4f9	08					.byte NN	;wh_Flags	dictionary flags
=54389					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d4fa	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d4fd					en = *	; remember here
>d4f8	03					.byte CL	;wh_CodeLength
>d4fd	ea					.byte $ea
>d4fe	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
>d501	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d502	75 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d504	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d505	08					.byte NN	;wh_Flags	dictionary flags
=54401					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d506	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d509					en = *	; remember here
>d504	03					.byte CL	;wh_CodeLength
>d509	0d					.byte $0d
>d50a	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
>d50f	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d510	81 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d512	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d513	08					.byte NN	;wh_Flags	dictionary flags
=54415					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d514	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d517					en = *	; remember here
>d512	03					.byte CL	;wh_CodeLength
>d517	09					.byte $09
>d518	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
>d51d	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d51e	8f d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d520	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d521	08					.byte NN	;wh_Flags	dictionary flags
=54429					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d522	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d525					en = *	; remember here
>d520	03					.byte CL	;wh_CodeLength
>d525	1d					.byte $1d
>d526	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
>d52b	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d52c	9d d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d52e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d52f	08					.byte NN	;wh_Flags	dictionary flags
=54443					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d530	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d533					en = *	; remember here
>d52e	03					.byte CL	;wh_CodeLength
>d533	19					.byte $19
>d534	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
>d539	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d53a	ab d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d53c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d53d	08					.byte NN	;wh_Flags	dictionary flags
=54457					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d53e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d541					en = *	; remember here
>d53c	03					.byte CL	;wh_CodeLength
>d541	05					.byte $05
>d542	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d549	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d54a	b9 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d54c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d54d	08					.byte NN	;wh_Flags	dictionary flags
=54473					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d54e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d551					en = *	; remember here
>d54c	03					.byte CL	;wh_CodeLength
>d551	11					.byte $11
>d552	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
>d558	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d559	c9 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d55b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d55c	08					.byte NN	;wh_Flags	dictionary flags
=54488					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d55d	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d560					en = *	; remember here
>d55b	03					.byte CL	;wh_CodeLength
>d560	15					.byte $15
>d561	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d568	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d569	d8 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d56b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d56c	08					.byte NN	;wh_Flags	dictionary flags
=54504					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d56d	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d570					en = *	; remember here
>d56b	03					.byte CL	;wh_CodeLength
>d570	01					.byte $01
>d571	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
>d574	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d575	e8 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d577	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d578	08					.byte NN	;wh_Flags	dictionary flags
=54516					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d579	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d57c					en = *	; remember here
>d577	03					.byte CL	;wh_CodeLength
>d57c	48					.byte $48
>d57d	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
>d580	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d581	f4 d4					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d583	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d584	08					.byte NN	;wh_Flags	dictionary flags
=54528					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d585	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d588					en = *	; remember here
>d583	03					.byte CL	;wh_CodeLength
>d588	08					.byte $08
>d589	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
>d58c	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d58d	00 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d58f	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d590	08					.byte NN	;wh_Flags	dictionary flags
=54540					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d591	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d594					en = *	; remember here
>d58f	03					.byte CL	;wh_CodeLength
>d594	68					.byte $68
>d595	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
>d598	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d599	0c d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d59b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d59c	08					.byte NN	;wh_Flags	dictionary flags
=54552					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d59d	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5a0					en = *	; remember here
>d59b	03					.byte CL	;wh_CodeLength
>d5a0	28					.byte $28
>d5a1	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
>d5a4	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5a5	18 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5a7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5a8	08					.byte NN	;wh_Flags	dictionary flags
=54564					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5a9	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ac					en = *	; remember here
>d5a7	03					.byte CL	;wh_CodeLength
>d5ac	2e					.byte $2e
>d5ad	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
>d5b2	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5b3	24 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5b5	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5b6	08					.byte NN	;wh_Flags	dictionary flags
=54578					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5b7	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ba					en = *	; remember here
>d5b5	03					.byte CL	;wh_CodeLength
>d5ba	2a					.byte $2a
>d5bb	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
>d5c0	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5c1	32 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5c3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5c4	08					.byte NN	;wh_Flags	dictionary flags
=54592					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5c5	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5c8					en = *	; remember here
>d5c3	03					.byte CL	;wh_CodeLength
>d5c8	3e					.byte $3e
>d5c9	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
>d5ce	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5cf	40 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5d1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5d2	08					.byte NN	;wh_Flags	dictionary flags
=54606					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5d3	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5d6					en = *	; remember here
>d5d1	03					.byte CL	;wh_CodeLength
>d5d6	26					.byte $26
>d5d7	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
>d5dd	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5de	4e d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5e1	08					.byte NN	;wh_Flags	dictionary flags
=54621					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5e2	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5e5					en = *	; remember here
>d5e0	03					.byte CL	;wh_CodeLength
>d5e5	36					.byte $36
>d5e6	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
>d5e9	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5ea	5d d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5ec	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5ed	08					.byte NN	;wh_Flags	dictionary flags
=54633					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5ee	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5f1					en = *	; remember here
>d5ec	03					.byte CL	;wh_CodeLength
>d5f1	6e					.byte $6e
>d5f2	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
>d5f7	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d5f8	69 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d5fa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d5fb	08					.byte NN	;wh_Flags	dictionary flags
=54647					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d5fc	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d5ff					en = *	; remember here
>d5fa	03					.byte CL	;wh_CodeLength
>d5ff	6a					.byte $6a
>d600	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
>d605	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d606	77 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d608	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d609	08					.byte NN	;wh_Flags	dictionary flags
=54661					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d60a	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d60d					en = *	; remember here
>d608	03					.byte CL	;wh_CodeLength
>d60d	7e					.byte $7e
>d60e	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
>d613	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d614	85 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d616	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d617	08					.byte NN	;wh_Flags	dictionary flags
=54675					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d618	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d61b					en = *	; remember here
>d616	03					.byte CL	;wh_CodeLength
>d61b	66					.byte $66
>d61c	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
>d622	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d623	93 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d625	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d626	08					.byte NN	;wh_Flags	dictionary flags
=54690					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d627	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d62a					en = *	; remember here
>d625	03					.byte CL	;wh_CodeLength
>d62a	76					.byte $76
>d62b	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
>d62e	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d62f	a2 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d631	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d632	08					.byte NN	;wh_Flags	dictionary flags
=54702					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d633	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d636					en = *	; remember here
>d631	03					.byte CL	;wh_CodeLength
>d636	40					.byte $40
>d637	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
>d63a	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d63b	ae d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d63d	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d63e	08					.byte NN	;wh_Flags	dictionary flags
=54714					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d63f	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d642					en = *	; remember here
>d63d	03					.byte CL	;wh_CodeLength
>d642	60					.byte $60
>d643	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
>d646	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d647	ba d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d649	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d64a	08					.byte NN	;wh_Flags	dictionary flags
=54726					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d64b	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d64e					en = *	; remember here
>d649	03					.byte CL	;wh_CodeLength
>d64e	ed					.byte $ed
>d64f	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
>d654	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d655	c6 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d657	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d658	08					.byte NN	;wh_Flags	dictionary flags
=54740					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d659	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d65c					en = *	; remember here
>d657	03					.byte CL	;wh_CodeLength
>d65c	e9					.byte $e9
>d65d	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
>d662	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d663	d4 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d665	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d666	08					.byte NN	;wh_Flags	dictionary flags
=54754					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d667	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d66a					en = *	; remember here
>d665	03					.byte CL	;wh_CodeLength
>d66a	fd					.byte $fd
>d66b	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
>d670	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d671	e2 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d673	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d674	08					.byte NN	;wh_Flags	dictionary flags
=54768					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d675	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d678					en = *	; remember here
>d673	03					.byte CL	;wh_CodeLength
>d678	f9					.byte $f9
>d679	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
>d67e	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d67f	f0 d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d681	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d682	08					.byte NN	;wh_Flags	dictionary flags
=54782					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d683	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d686					en = *	; remember here
>d681	03					.byte CL	;wh_CodeLength
>d686	e5					.byte $e5
>d687	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d68e	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d68f	fe d5					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d691	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d692	08					.byte NN	;wh_Flags	dictionary flags
=54798					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d693	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d696					en = *	; remember here
>d691	03					.byte CL	;wh_CodeLength
>d696	f1					.byte $f1
>d697	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
>d69d	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d69e	0e d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6a0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6a1	08					.byte NN	;wh_Flags	dictionary flags
=54813					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6a2	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6a5					en = *	; remember here
>d6a0	03					.byte CL	;wh_CodeLength
>d6a5	f5					.byte $f5
>d6a6	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d6ad	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ae	1d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6b0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6b1	08					.byte NN	;wh_Flags	dictionary flags
=54829					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6b2	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6b5					en = *	; remember here
>d6b0	03					.byte CL	;wh_CodeLength
>d6b5	e1					.byte $e1
>d6b6	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
>d6b9	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ba	2d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6bc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6bd	08					.byte NN	;wh_Flags	dictionary flags
=54841					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6be	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6c1					en = *	; remember here
>d6bc	03					.byte CL	;wh_CodeLength
>d6c1	38					.byte $38
>d6c2	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
>d6c5	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6c6	39 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6c8	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6c9	08					.byte NN	;wh_Flags	dictionary flags
=54853					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6ca	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6cd					en = *	; remember here
>d6c8	03					.byte CL	;wh_CodeLength
>d6cd	f8					.byte $f8
>d6ce	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
>d6d1	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6d2	45 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6d4	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6d5	08					.byte NN	;wh_Flags	dictionary flags
=54865					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6d6	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6d9					en = *	; remember here
>d6d4	03					.byte CL	;wh_CodeLength
>d6d9	78					.byte $78
>d6da	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
>d6dd	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6de	51 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6e0	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6e1	08					.byte NN	;wh_Flags	dictionary flags
=54877					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6e2	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6e5					en = *	; remember here
>d6e0	03					.byte CL	;wh_CodeLength
>d6e5	8d					.byte $8d
>d6e6	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
>d6eb	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6ec	5d d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6ee	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6ef	08					.byte NN	;wh_Flags	dictionary flags
=54891					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6f0	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d6f3					en = *	; remember here
>d6ee	03					.byte CL	;wh_CodeLength
>d6f3	9d					.byte $9d
>d6f4	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
>d6f9	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d6fa	6b d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d6fc	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d6fd	08					.byte NN	;wh_Flags	dictionary flags
=54905					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d6fe	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d701					en = *	; remember here
>d6fc	03					.byte CL	;wh_CodeLength
>d701	99					.byte $99
>d702	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
>d707	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d708	79 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d70a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d70b	08					.byte NN	;wh_Flags	dictionary flags
=54919					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d70c	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d70f					en = *	; remember here
>d70a	03					.byte CL	;wh_CodeLength
>d70f	85					.byte $85
>d710	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
>d717	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d718	87 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d71a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d71b	08					.byte NN	;wh_Flags	dictionary flags
=54935					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d71c	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d71f					en = *	; remember here
>d71a	03					.byte CL	;wh_CodeLength
>d71f	91					.byte $91
>d720	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
>d726	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d727	97 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d729	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d72a	08					.byte NN	;wh_Flags	dictionary flags
=54950					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d72b	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d72e					en = *	; remember here
>d729	03					.byte CL	;wh_CodeLength
>d72e	95					.byte $95
>d72f	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
>d736	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d737	a6 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d739	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d73a	08					.byte NN	;wh_Flags	dictionary flags
=54966					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d73b	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d73e					en = *	; remember here
>d739	03					.byte CL	;wh_CodeLength
>d73e	81					.byte $81
>d73f	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
>d742	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d743	b6 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d745	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d746	08					.byte NN	;wh_Flags	dictionary flags
=54978					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d747	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d74a					en = *	; remember here
>d745	03					.byte CL	;wh_CodeLength
>d74a	8e					.byte $8e
>d74b	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
>d750	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d751	c2 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d753	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d754	08					.byte NN	;wh_Flags	dictionary flags
=54992					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d755	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d758					en = *	; remember here
>d753	03					.byte CL	;wh_CodeLength
>d758	86					.byte $86
>d759	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
>d75f	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d760	d0 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d762	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d763	08					.byte NN	;wh_Flags	dictionary flags
=55007					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d764	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d767					en = *	; remember here
>d762	03					.byte CL	;wh_CodeLength
>d767	96					.byte $96
>d768	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
>d76b	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d76c	df d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d76e	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d76f	08					.byte NN	;wh_Flags	dictionary flags
=55019					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d770	20 ad cf	jsr $cfad		jsr asm_2
=3					CL	.var *-(WordListLink+wh_Xt)
=$d773					en = *	; remember here
>d76e	03					.byte CL	;wh_CodeLength
>d773	8c					.byte $8c
>d774	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
>d779	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d77a	eb d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d77c	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d77d	08					.byte NN	;wh_Flags	dictionary flags
=55033					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d77e	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d781					en = *	; remember here
>d77c	03					.byte CL	;wh_CodeLength
>d781	84					.byte $84
>d782	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
>d788	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d789	f9 d6					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d78b	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d78c	08					.byte NN	;wh_Flags	dictionary flags
=55048					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d78d	20 97 cf	jsr $cf97		jsr asm_1
=3					CL	.var *-(WordListLink+wh_Xt)
=$d790					en = *	; remember here
>d78b	03					.byte CL	;wh_CodeLength
>d790	94					.byte $94
>d791	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
>d794	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d795	08 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d797	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d798	08					.byte NN	;wh_Flags	dictionary flags
=55060					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d799	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d79c					en = *	; remember here
>d797	03					.byte CL	;wh_CodeLength
>d79c	aa					.byte $aa
>d79d	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
>d7a0	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7a1	14 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7a3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7a4	08					.byte NN	;wh_Flags	dictionary flags
=55072					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7a5	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7a8					en = *	; remember here
>d7a3	03					.byte CL	;wh_CodeLength
>d7a8	a8					.byte $a8
>d7a9	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
>d7ac	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ad	20 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7af	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7b0	08					.byte NN	;wh_Flags	dictionary flags
=55084					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7b1	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7b4					en = *	; remember here
>d7af	03					.byte CL	;wh_CodeLength
>d7b4	ba					.byte $BA
>d7b5	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
>d7b8	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7b9	2c d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7bb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7bc	08					.byte NN	;wh_Flags	dictionary flags
=55096					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7bd	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7c0					en = *	; remember here
>d7bb	03					.byte CL	;wh_CodeLength
>d7c0	8a					.byte $8a
>d7c1	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
>d7c4	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7c5	38 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7c7	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7c8	08					.byte NN	;wh_Flags	dictionary flags
=55108					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7c9	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7cc					en = *	; remember here
>d7c7	03					.byte CL	;wh_CodeLength
>d7cc	9a					.byte $9a
>d7cd	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
>d7d0	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7d1	44 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7d3	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7d4	08					.byte NN	;wh_Flags	dictionary flags
=55120					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7d5	20 b6 cf	jsr $cfb6		jsr asm_0
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7d8					en = *	; remember here
>d7d3	03					.byte CL	;wh_CodeLength
>d7d8	98					.byte $98
=55120					asm_table = WordListLink ; head of instruction word list for disassembler
>d7d9	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
>d7df	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7e0	50 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7e2	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7e3	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55135					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7e4	a9 9b		lda #$9b			lda #<PushZA
.d7e6	a0 b7		ldy #$b7			ldy #>PushZA
.d7e8	4c d3 cc	jmp $ccd3			jmp Jsr_Comma_YA
=7					CL	.var *-(WordListLink+wh_Xt)
=$d7eb					en = *	; remember here
>d7e2	07					.byte CL	;wh_CodeLength
>d7eb	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
>d7ee	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7ef	5f d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7f1	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7f2	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55150					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d7f3	4c b7 c9	jmp $c9b7			jmp Here
=3					CL	.var *-(WordListLink+wh_Xt)
=$d7f6					en = *	; remember here
>d7f1	03					.byte CL	;wh_CodeLength
>d7f6	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
>d7f8	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d7f9	6e d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d7fb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d7fc	04					.byte IM	;wh_Flags	dictionary flags
=55160					WordListLink ::= *-wh_xt ; remember the nt of this word for later
=0					CL	.var *-(WordListLink+wh_Xt)
=$d7fd					en = *	; remember here
>d7fb	00					.byte CL	;wh_CodeLength
.d7fd	60		rts				rts
>d7fe	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
>d800	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d801	78 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d803	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d804	0c					.byte IM+NN	;wh_Flags	dictionary flags
=55168					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d805					asm_back_branch:
.d805	20 b7 c9	jsr $c9b7			jsr Here		; ( addr-l addr-h )
.d808	20 58 cb	jsr $cb58			jsr Minus		; ( offset )
.d80b	a9 fe		lda #$fe			lda #$fe
.d80d	4c da c9	jmp $c9da			jmp Minus_A
=11					CL	.var *-(WordListLink+wh_Xt)
=$d810					en = *	; remember here
>d803	0b					.byte CL	;wh_CodeLength
>d810	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
>d816	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d817	80 d7					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d819	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d81a	08					.byte NN	;wh_Flags	dictionary flags
=55190					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d81b					DisAsm:
.d81b	20 ed c3	jsr $c3ed			jsr Bounds		; ( addr_end addr )
.d81e					_instr:
.d81e	20 de b3	jsr $b3de			jsr underflow_2
.d821	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d823	d5 26		cmp $26,x			cmp DStack+2,x
.d825	b5 25		lda $25,x			lda DStack+1,x
.d827	f5 27		sbc $27,x			sbc DStack+3,x
.d829	90 03		bcc $d82e			bcc +
.d82b	4c b6 c4	jmp $c4b6			jmp Two_drop		; discard parms & return
.d82e					+
.d82e	20 d7 aa	jsr $aad7			jsr CR			; new line
.d831	20 f5 ce	jsr $cef5			jsr Dup			; print address
.d834	20 6c a8	jsr $a86c			jsr Dot_Hex
.d837	20 70 cd	jsr $cd70			jsr Space
.d83a	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d83c	20 7d d9	jsr $d97d			jsr _print_a
.d83f	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d841	85 16		sta $16				sta tmp2
.d843	20 eb c9	jsr $c9eb			jsr One_plus
.d846	a9 50		lda #$50			lda #<asm_table		; for each asm opcode word
.d848	a0 d7		ldy #$d7			ldy #>asm_table
.d84a	85 14		sta $14				sta tmp1+0
.d84c	84 15		sty $15				sty tmp1+1
.d84e	d0 0f		bne $d85f			bne _WTest
.d850	a0 82		ldy #$82	_WNext:		ldy #wh_WordListLink+1	;   next entry
.d852	b1 14		lda ($14),y			lda (tmp1),y
.d854	f0 2e		beq $d884			beq _unknown
.d856	48		pha				pha
.d857	88		dey				dey
.d858	b1 14		lda ($14),y			lda (tmp1),y
.d85a	85 14		sta $14				sta tmp1+0
.d85c	68		pla				pla
.d85d	85 15		sta $15				sta tmp1+1
.d85f	a0 88		ldy #$88	_WTest:		ldy #wh_Xt+3		;   opcode match?
.d861	b1 14		lda ($14),y			lda (tmp1),y
.d863	c5 16		cmp $16				cmp tmp2
.d865	d0 e9		bne $d850			bne _WNext
.d867	a5 16		lda $16				lda tmp2		; save opcode
.d869	48		pha				pha
.d86a	a5 15		lda $15				lda tmp1+1		; save its nt
.d86c	48		pha				pha
.d86d	a5 14		lda $14				lda tmp1+0
.d86f	48		pha				pha
.d870	a0 86		ldy #$86			ldy #wh_xt+1		; get processor routine addr lo byte from JSR
.d872	b1 14		lda ($14),y			lda (tmp1),y
.d874	c9 b6		cmp #$b6			cmp #<asm_0		; goto disasm processor
.d876	f0 17		beq $d88f			beq _c0
.d878	c9 97		cmp #$97			cmp #<asm_1
.d87a	f0 49		beq $d8c5			beq _c1
.d87c	c9 ad		cmp #$ad			cmp #<asm_2
.d87e	f0 61		beq $d8e1			beq _c2
.d880	c9 77		cmp #$77			cmp #<asm_r
.d882	f0 18		beq $d89c			beq _cr
.d884					_unknown:
.d884	20 5e d9	jsr $d95e			jsr _tab		; to source area
.d887	a9 3f		lda #$3f			lda #'?'
.d889	20 63 cd	jsr $cd63			jsr Emit_A
.d88c	4c 1e d8	jmp $d81e			jmp _instr
.d88f					_c0:
.d88f	20 5e d9	jsr $d95e			jsr _tab		; to source area
.d892	68		pla				pla			; get opcode word nt
.d893	a8		tay				tay
.d894	68		pla				pla
.d895	20 63 d9	jsr $d963			jsr _print_opcode
.d898	68		pla				pla			; discard opcode
.d899	4c 1e d8	jmp $d81e			jmp _instr
.d89c					_cr:
.d89c	20 74 d9	jsr $d974			jsr _get_byte		; get displacement byte
.d89f	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d8a1	09 00		ora #$00			ora #0
.d8a3	10 01		bpl $d8a6			bpl +
.d8a5	88		dey				dey
.d8a6	20 59 b7	jsr $b759	+		jsr PushYA
.d8a9	20 f5 ce	jsr $cef5			jsr Dup			; save for TypeSymbol
.d8ac	20 5e d9	jsr $d95e			jsr _tab		; to source area
.d8af	20 a4 cb	jsr $cba4			jsr U_Dot		; print dest address
.d8b2	68		pla				pla			; get opcode word nt
.d8b3	a8		tay				tay
.d8b4	68		pla				pla
.d8b5	20 63 d9	jsr $d963			jsr _print_opcode
.d8b8	68		pla				pla			; discard opcode
.d8b9	20 cc ce	jsr $cecc			jsr Over		; calc dest addr
.d8bc	20 3f cb	jsr $cb3f			jsr Plus
.d8bf	20 9e 81	jsr $819e			jsr TypeSymbol		; print dest addr symbolic
.d8c2	4c 1e d8	jmp $d81e			jmp _instr
.d8c5					_c1:
.d8c5	20 74 d9	jsr $d974			jsr _get_byte		; get operand
.d8c8	20 9b b7	jsr $b79b			jsr PushZA
.d8cb	20 5e d9	jsr $d95e			jsr _tab		; to source area
.d8ce	20 f5 ce	jsr $cef5			jsr Dup
.d8d1	20 a4 cb	jsr $cba4			jsr U_Dot		; print operand
.d8d4	68		pla				pla			; get opcode word nt
.d8d5	a8		tay				tay
.d8d6	68		pla				pla
.d8d7	20 63 d9	jsr $d963			jsr _print_opcode
.d8da	68		pla				pla			; discard opcode
.d8db	20 9e 81	jsr $819e			jsr TypeSymbol
.d8de	4c 1e d8	jmp $d81e			jmp _instr
.d8e1					_c2:
.d8e1	20 74 d9	jsr $d974			jsr _get_byte		; get operand lo byte
.d8e4	48		pha				pha
.d8e5	20 74 d9	jsr $d974			jsr _get_byte		; get operand hi byte
.d8e8	ca		dex				dex			; push operand bytes
.d8e9	ca		dex				dex
.d8ea	95 25		sta $25,x			sta DStack+1,x
.d8ec	68		pla				pla
.d8ed	95 24		sta $24,x			sta DStack+0,x
.d8ef	20 5e d9	jsr $d95e			jsr _tab		; to source area
.d8f2	20 f5 ce	jsr $cef5			jsr Dup
.d8f5	20 a4 cb	jsr $cba4			jsr U_Dot		; print operand
.d8f8	68		pla				pla			; AY= opcode word nt
.d8f9	a8		tay				tay
.d8fa	68		pla				pla
.d8fb	20 63 d9	jsr $d963			jsr _print_opcode
.d8fe	20 f5 ce	jsr $cef5			jsr Dup
.d901	20 9e 81	jsr $819e			jsr TypeSymbol		; print operand as symbol
.d904	68		pla				pla			; get opcode
.d905	c9 20		cmp #$20			cmp #$20		;  JSR
.d907	f0 09		beq $d912			beq _jsr
.d909	e8		inx		_jdrop:		inx			; Drop operand
.d90a	e8		inx				inx
.d90b	4c 1e d8	jmp $d81e			jmp _instr		; ( addr_end addr )
.d90e	e8		inx		_2drop:		inx			; Drop jsr_nt
.d90f	e8		inx				inx
.d910	d0 f7		bne $d909			bne _jdrop
.d912					_jsr:
.d912	20 9f b3	jsr $b39f			jsr PopYA
.d915	c9 7a		cmp #$7a			cmp #<sliteral_runtime	; string literal?
.d917	d0 42		bne $d95b			bne _not_sliteral
.d919	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d91b	d0 3e		bne $d95b			bne _not_sliteral
.d91d	20 d7 aa	jsr $aad7			jsr CR
.d920	20 f5 ce	jsr $cef5			jsr Dup			; ( addr_end addr addr )
.d923	20 6c a8	jsr $a86c			jsr Dot_Hex
.d926	20 70 cd	jsr $cd70			jsr Space
.d929	20 f5 ce	jsr $cef5			jsr Dup			; ( addr_end ? addr )
.d92c	20 74 d9	jsr $d974			jsr _get_byte		; get JMP opcode
.d92f	20 74 d9	jsr $d974			jsr _get_byte		; get JMP addr lo byte
.d932	95 26		sta $26,x			sta DStack+2,x
.d934	20 74 d9	jsr $d974			jsr _get_byte		; get JMP addr hi byte
.d937	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d939	20 d7 aa	jsr $aad7			jsr CR
.d93c	20 f5 ce	jsr $cef5			jsr Dup
.d93f	20 6c a8	jsr $a86c			jsr Dot_Hex
.d942	20 70 cd	jsr $cd70			jsr Space
.d945	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d947	d5 26		cmp $26,x			cmp DStack+2,x
.d949	b5 25		lda $25,x			lda DStack+1,x
.d94b	f5 27		sbc $27,x			sbc DStack+3,x
.d94d	b0 06		bcs $d955			bcs _slit_19
.d94f	20 74 d9	jsr $d974			jsr _get_byte
.d952	4c 45 d9	jmp $d945			jmp _slit_11
.d955					_slit_19:
.d955	20 10 c9	jsr $c910			jsr Nip			; ( addr_end addr )
.d958	4c 1e d8	jmp $d81e			jmp _instr
.d95b					_not_sliteral:
.d95b	4c 1e d8	jmp $d81e			jmp _instr
.d95e					_tab:
.d95e	a9 09		lda #$09			lda #9
.d960	4c 63 cd	jmp $cd63			jmp Emit_A
.d963					_print_opcode:
.d963	20 03 cf	jsr $cf03			jsr PushAY		; save opcode word nt
.d966	20 70 cd	jsr $cd70			jsr Space
.d969	20 a9 bd	jsr $bda9			jsr Name_To_String	; get name string
.d96c	4c 7d cd	jmp $cd7d			jmp Type		; type word name
.d96f					_get_byte_silent:
.d96f	a1 24		lda ($24,x)			lda (DStack+0,x)
.d971	4c eb c9	jmp $c9eb			jmp One_plus
.d974					_get_byte:
.d974	20 6f d9	jsr $d96f			jsr _get_byte_silent
.d977	48		pha				pha
.d978	20 7d d9	jsr $d97d			jsr _print_a
.d97b	68		pla				pla
.d97c	60		rts				rts
.d97d					_print_a:
.d97d	20 9b b7	jsr $b79b			jsr PushZA
.d980	20 4a a8	jsr $a84a			jsr C_Dot_Hex
.d983	4c 70 cd	jmp $cd70			jmp Space
=55190					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d986	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
>d987	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d988	00 00					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d98a	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d98b	08					.byte NN	;wh_Flags	dictionary flags
=55559					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d98c	4c 15 a4	jmp $a415	Editor_l:	jmp ListScr
=3					CL	.var *-(WordListLink+wh_Xt)
=$d98f					en = *	; remember here
>d98a	03					.byte CL	;wh_CodeLength
.d98f					Editor_Screen_Helper:
.d98f	20 f5 ce	jsr $cef5			jsr Dup
.d992	20 19 a2	jsr $a219			jsr Scr
.d995	20 42 ce	jsr $ce42			jsr Store
.d998	4c 2d a3	jmp $a32d			jmp Buffer
>d99b	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9a3	72 65 65 6e
>d9a7	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9a8	07 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9aa	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9ab	08					.byte NN	;wh_Flags	dictionary flags
=55591					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9ac					Editor_Enter_Screen:
.d9ac	20 8f d9	jsr $d98f			jsr Editor_Screen_Helper
.d9af	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d9b1	95 24		sta $24,x	_loop:		sta DStack+0,x
.d9b3	20 9b b7	jsr $b79b			jsr PushZA		; Put the current line number on the stack.
.d9b6	20 1a da	jsr $da1a			jsr Editor_o		; prompt for overwrite.
.d9b9	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d9bb	b5 24		lda $24,x			lda DStack+0,x
.d9bd	c9 10		cmp #$10			cmp #16
.d9bf	90 f0		bcc $d9b1			bcc _loop
.d9c1	e8		inx				inx			; Drop work area
.d9c2	e8		inx				inx
=23					CL	.var *-(WordListLink+wh_Xt)
=$d9c3					en = *	; remember here
>d9aa	17					.byte CL	;wh_CodeLength
.d9c3	60		rts				rts
>d9c4	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
>d9c8	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9c9	27 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9cb	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9cc	08					.byte NN	;wh_Flags	dictionary flags
=55624					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9cd					Editor_line:
.d9cd	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d9cf	20 de ca	jsr $cade			jsr LShift_A	; *64 is same as left shift 6 times.
.d9d2	20 19 a2	jsr $a219			jsr Scr
.d9d5	20 5f ce	jsr $ce5f			jsr Fetch
.d9d8	20 c3 a2	jsr $a2c3			jsr Block
.d9db	4c 3f cb	jmp $cb3f			jmp Plus
=17					CL	.var *-(WordListLink+wh_Xt)
=$d9de					en = *	; remember here
>d9cb	11					.byte CL	;wh_CodeLength
>d9de	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9e6	72 65 65 6e
>d9ea	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HNL
>d9eb	48 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>d9ed	03					.byte 3		;wh_CodeLength  (with placeholder value)
>d9ee	08					.byte NN	;wh_Flags	dictionary flags
=55658					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.d9ef					Editor_Erase_Screen:
.d9ef	20 8f d9	jsr $d98f			jsr Editor_Screen_Helper
.d9f2	a9 00		lda #$00			lda #<1024
.d9f4	a0 04		ldy #$04			ldy #>1024
.d9f6	20 59 b7	jsr $b759			jsr PushYA
.d9f9	20 f3 bd	jsr $bdf3			jsr Blank		; Erase the entire block (fill with spaces).
.d9fc	4c 19 a3	jmp $a319			jmp Update		; Mark buffer as updated.
=16					CL	.var *-(WordListLink+wh_Xt)
=$d9ff					en = *	; remember here
>d9ed	10					.byte CL	;wh_CodeLength
>d9ff	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
>da01	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da02	6a d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da04	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da05	08					.byte NN	;wh_Flags	dictionary flags
=55681					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da06					Editor_el:
.da06	20 cd d9	jsr $d9cd			jsr Editor_line
.da09	a9 40		lda #$40			lda #64			;(# of chars/line)
.da0b	20 9b b7	jsr $b79b			jsr PushZA
.da0e	20 f3 bd	jsr $bdf3			jsr Blank		; Fill with spaces.
.da11	4c 19 a3	jmp $a319			jmp Update		; Mark buffer as updated.
=14					CL	.var *-(WordListLink+wh_Xt)
=$da14					en = *	; remember here
>da04	0e					.byte CL	;wh_CodeLength
>da14	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
>da15	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HNL
>da16	81 d9					.word WordListLink ;wh_WordListLink	link to previous word in dictionary chain (0=end)
>da18	03					.byte 3		;wh_CodeLength  (with placeholder value)
>da19	08					.byte NN	;wh_Flags	dictionary flags
=55701					WordListLink ::= *-wh_xt ; remember the nt of this word for later
.da1a					Editor_o:
.da1a	20 d7 aa	jsr $aad7			jsr CR
.da1d	20 f5 ce	jsr $cef5			jsr Dup
.da20	a9 02		lda #$02			lda #2
.da22	20 d8 cb	jsr $cbd8			jsr U_Dot_R_A
.da25	20 70 cd	jsr $cd70			jsr Space
.da28	a9 2a		lda #$2a			lda #'*'
.da2a	20 63 cd	jsr $cd63			jsr Emit_A
.da2d	20 70 cd	jsr $cd70			jsr Space
.da30	20 cd d9	jsr $d9cd			jsr Editor_line
.da33	20 f5 ce	jsr $cef5			jsr Dup		; Save a copy of the line address for later.
.da36	a9 40		lda #$40			lda #64		; chars/line
.da38	20 9b b7	jsr $b79b			jsr PushZA
.da3b	20 71 c2	jsr $c271			jsr Accept
.da3e	20 f5 ce	jsr $cef5			jsr Dup
.da41	20 1f ce	jsr $ce1f			jsr Not_Rot
.da44	20 3f cb	jsr $cb3f			jsr Plus
.da47	a9 40		lda #$40			lda #64		; chars/line
.da49	20 9b b7	jsr $b79b			jsr PushZA
.da4c	20 f9 cd	jsr $cdf9			jsr Rot
.da4f	20 58 cb	jsr $cb58			jsr Minus
.da52	20 f3 bd	jsr $bdf3			jsr Blank
.da55	4c 19 a3	jmp $a319			jmp Update
=62					CL	.var *-(WordListLink+wh_Xt)
=$da58					en = *	; remember here
>da18	3e					.byte CL	;wh_CodeLength
=55701					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da58	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da5c	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da64	64 00
>da66	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da6e	64 20 00
>da71	41 73 73 65 6d 62 6c 65		str_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>da79	72 20 00
>da7c	45 64 69 74 6f 72 20 00		str_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>da84	46 6f 72 74 68 20 00		str_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>da8b	52 6f 6f 74 20 00		str_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>da91	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da98	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da9e	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>daa4	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.daac					Exception_Text_List:
>daac	ff 00					.text $100+err_Abort,0
>daae	fe 00					.text $100+err_AbortQuote,0
>dab0	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>dab8	76 65 72 66 6c 6f 77 00
>dac0	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>dac8	6e 64 65 72 66 6c 6f 77 00
>dad1	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>dad9	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>dae9	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>daf9	74 69 6f 6e 00
>dafe	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>db06	62 79 20 30 00
>db0b	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>db13	72 61 6e 67 65 00
>db19	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>db21	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>db31	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>db39	65 64 20 77 6f 72 64 00
>db41	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>db49	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db59	6f 6e 6c 79 20 77 6f 72 64 00
>db63	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db6b	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db7a	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db82	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db92	74 63 68 00
>db96	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db9e	20 6e 61 6d 65 00
>dba4	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>dbac	65 61 64 00
>dbb0	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>dbb8	72 69 74 65 00
>dbbd	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>dbc5	64 65 20 62 79 20 7a 65 72 6f 00
>dbd0	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>dbd8	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>dbe8	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>dbf0	6b 20 6f 76 65 72 66 6c 6f 77 00
>dbfb	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dc03	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dc0f	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dc17	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dc24	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dc2c	72 66 6c 6f 77 00
>dc32	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dc3a	45 00
>dc3c	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dc42	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dc4a	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dc52	6f 74 20 73 65 74 00
>dc59	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc61	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc6f	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc77	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc82	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc8a	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc9a	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 28 b4	jmp $b428			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 28 b4	jsr $b428			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
