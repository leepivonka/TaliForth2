
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output TaliForth-py65mon.bin platform/platform-py65mon.asm
; Mon Jul 01 19:26:05 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0100					RStack = $0100 ; begin of 6502 Return stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end = $8000 ; LastRAM byte available for Data
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	21 f1					.word kernel_putc	; output
>8017	14 f1					.word kernel_getc	; input
>8019	1d f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	1c cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	5b d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	68 d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	5d cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   to align the last char of name
=127					wh_NameLastChar	= *-1		; |		  |   Note string is not zero-terminated
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask =		    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask =		    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 ee b4	jsr $b4ee			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 f5 a1	jsr $a1f5			jsr BlockInit
.806b	20 75 ab	jsr $ab75			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 b8 b7	jsr $b7b8			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 b8 b7	jsr $b7b8			jsr PushYA
.807c	20 0a b0	jsr $b00a			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c a0 b4	jmp $b4a0			jmp Abort_Core2	;Quit
=80					CL	.var *-XtPtr1
=$809c					en = *	; remember here
>8049	50					.byte CL	;wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-XtPtr1
=$8178					en = *	; remember here
>8174	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			L1:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	03					.byte 3	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement
>8180	26 f1					  .word platform_CCAT
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	03					.byte 3	;wh_CodeLength
>8188	09					  .byte LinkDisplacement
>8189	25 f1					  .word platform_bye
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 07 b8	jsr $b807	TypeSymbol:	jsr Two
.819c	20 a2 c4	jsr $c4a2			jsr Spaces
.819f	a9 28		lda #$28			lda #'('
.81a1	20 d1 cd	jsr $cdd1			jsr Emit_A
.81a4	20 dd cd	jsr $cddd			jsr Space
.81a7	20 67 cf	jsr $cf67			jsr Dup
.81aa	a9 24		lda #$24			lda #'$'
.81ac	20 d1 cd	jsr $cdd1			jsr Emit_A
.81af	20 15 a9	jsr $a915			jsr Dot_Hex
.81b2	20 dd cd	jsr $cddd			jsr Space
.81b5	20 dc 81	jsr $81dc			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b8	20 f5 bd	jsr $bdf5			jsr Name_To_String	; Change nt into the name
.81bb	20 e9 cd	jsr $cde9			jsr Type		; print it.
.81be	20 dd cd	jsr $cddd			jsr Space
.81c1	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c3	15 25		ora $25,x			ora DStack+1,x
.81c5	f0 0b		beq $81d2			beq +
.81c7	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c9	20 d1 cd	jsr $cdd1			jsr Emit_A
.81cc	20 67 cf	jsr $cf67			jsr Dup
.81cf	20 0f cc	jsr $cc0f			jsr U_Dot
.81d2	e8		inx		+		inx
.81d3	e8		inx				inx
.81d4	a9 29		lda #$29			lda #')'
.81d6	20 d1 cd	jsr $cdd1			jsr Emit_A
.81d9	4c dd cd	jmp $cddd			jmp Space
=67					CL	.var *-XtPtr1
=$81dc					en = *	; remember here
>8197	43					.byte CL	;wh_CodeLength
.81dc					DictSearchXt:
.81dc	ca		dex				dex
.81dd	ca		dex				dex
.81de	20 40 cf	jsr $cf40			jsr Over
.81e1	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e3	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e5	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e7	48		pha				pha
.81e8	68		pla		_ListNext:	pla
.81e9	18		clc				clc
.81ea	69 02		adc #$02			adc #2			; to next wordlist
.81ec	c9 18		cmp #$18			cmp #max_wordlists*2
.81ee	b0 10		bcs $8200			bcs _ListDone
.81f0	48		pha				pha
.81f1	a8		tay				tay
.81f2	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f5	85 14		sta $14				sta tmp1+0
.81f7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fa	85 15		sta $15				sta tmp1+1
.81fc	d0 0a		bne $8208			bne _WordTest
.81fe	f0 e8		beq $81e8			beq _ListNext		;   empty list
.8200	e8		inx		_ListDone:	inx			; Drop pattern xt
.8201	e8		inx				inx			; ( offset nt )
.8202	60		rts				rts
.8203	20 9b 82	jsr $829b	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8206	f0 e0		beq $81e8			beq _ListNext		; end of Dictionary?
.8208	20 b9 bd	jsr $bdb9	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.820b	38		sec				sec			; tmp3 = xt offset for this word
.820c	b5 24		lda $24,x			lda DStack+0,x
.820e	e5 16		sbc $16				sbc tmp2+0
.8210	85 18		sta $18				sta tmp3+0
.8212	b5 25		lda $25,x			lda DStack+1,x
.8214	e5 17		sbc $17				sbc tmp2+1
.8216	85 19		sta $19				sta tmp3+1
.8218	20 80 82	jsr $8280			jsr _test
.821b	a0 00		ldy #$00			ldy #0			; is this word a constant?
.821d	b1 16		lda ($16),y			lda (tmp2),y
.821f	c9 a0		cmp #$a0			cmp #$a0
.8221	f0 2a		beq $824d			beq _PushYA
.8223	c9 a9		cmp #$a9			cmp #$a9
.8225	f0 02		beq $8229			beq _PushZA
.8227	d0 da		bne $8203			bne _WordNext
.8229	c8		iny		_PushZA:	iny			; get lda # operand
.822a	b5 24		lda $24,x			lda DStack+0,x
.822c	f1 16		sbc ($16),y			sbc (tmp2),y
.822e	85 18		sta $18				sta tmp3+0
.8230	b5 25		lda $25,x			lda DStack+1,x
.8232	e9 00		sbc #$00			sbc #0
.8234	85 19		sta $19				sta tmp3+1
.8236	c8		iny				iny			; check jmp opcode
.8237	b1 16		lda ($16),y			lda (tmp2),y
.8239	c9 4c		cmp #$4c			cmp #$4c
.823b	d0 c6		bne $8203			bne _WordNext
.823d	c8		iny				iny			; check jmp operand lo
.823e	b1 16		lda ($16),y			lda (tmp2),y
.8240	c9 e7		cmp #$e7			cmp #<PushZA
.8242	d0 bf		bne $8203			bne _WordNext
.8244	c8		iny				iny			; check jmp operand hi
.8245	b1 16		lda ($16),y			lda (tmp2),y
.8247	c9 b7		cmp #$b7			cmp #>PushZA
.8249	f0 2f		beq $827a			beq _KTest
.824b	d0 b6		bne $8203			bne _WordNext
.824d	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824f	b1 16		lda ($16),y			lda (tmp2),y
.8251	c9 a9		cmp #$a9			cmp #$a9
.8253	d0 ae		bne $8203			bne _WordNext
.8255	c8		iny				iny			; get lda # operand
.8256	b5 24		lda $24,x			lda DStack+0,x
.8258	f1 16		sbc ($16),y			sbc (tmp2),y
.825a	85 18		sta $18				sta tmp3+0
.825c	a0 01		ldy #$01			ldy #1			; get LDY # operand
.825e	b5 25		lda $25,x			lda DStack+1,x
.8260	f1 16		sbc ($16),y			sbc (tmp2),y
.8262	85 19		sta $19				sta tmp3+1
.8264	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8266	b1 16		lda ($16),y			lda (tmp2),y
.8268	c9 4c		cmp #$4c			cmp #$4c
.826a	d0 97		bne $8203			bne _WordNext
.826c	c8		iny				iny			; check JMP operand lo
.826d	b1 16		lda ($16),y			lda (tmp2),y
.826f	c9 b8		cmp #$b8			cmp #<PushYA
.8271	d0 0a		bne $827d			bne _WordNext3
.8273	c8		iny				iny			; check JMP operand hi
.8274	b1 16		lda ($16),y			lda (tmp2),y
.8276	c9 b7		cmp #$b7			cmp #>PushYA
.8278	d0 03		bne $827d			bne _WordNext3
.827a	20 80 82	jsr $8280	_KTest:		jsr _test
.827d	4c 03 82	jmp $8203	_WordNext3:	jmp _WordNext
.8280					_test:
.8280	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.8282	d5 28		cmp $28,x			cmp DStack+4,x
.8284	a5 19		lda $19				lda tmp3+1
.8286	f5 29		sbc $29,x			sbc DStack+5,x
.8288	b0 10		bcs $829a			bcs _trts
.828a	a5 18		lda $18				lda tmp3+0		;   save this better offset
.828c	a4 19		ldy $19				ldy tmp3+1
.828e	95 28		sta $28,x			sta DStack+4,x
.8290	94 29		sty $29,x			sty DStack+5,x
.8292	a5 14		lda $14				lda tmp1+0		;   save this better nt
.8294	a4 15		ldy $15				ldy tmp1+1
.8296	95 26		sta $26,x			sta DStack+2,x
.8298	94 27		sty $27,x			sty DStack+3,x
.829a	60		rts		_trts:		rts
.829b					LinkNext:
.829b	a0 81		ldy #$81			ldy #wh_Flags
.829d	b1 14		lda ($14),y			lda (tmp1),y
.829f	29 01		and #$01			and #FP
.82a1	f0 0e		beq $82b1			beq _LinkShort
.82a3	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a5	b1 14		lda ($14),y			lda (tmp1),y
.82a7	48		pha				pha
.82a8	88		dey				dey
.82a9	b1 14		lda ($14),y			lda (tmp1),y
.82ab	85 14		sta $14				sta tmp1+0
.82ad	68		pla				pla
.82ae	85 15		sta $15				sta tmp1+1
.82b0	60		rts				rts
.82b1	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82b3	38		sec				sec
.82b4	a5 14		lda $14				lda tmp1+0
.82b6	f1 14		sbc ($14),y			sbc (tmp1),y
.82b8	85 14		sta $14				sta tmp1+0
.82ba	a5 15		lda $15				lda tmp1+1
.82bc	e9 00		sbc #$00			sbc #0
.82be	85 15		sta $15				sta tmp1+1
.82c0	60		rts				rts
>82c1	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=33351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c7	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=306					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c8	11					.byte WordFlags	;wh_Flags
>82c9	03					.byte 3	;wh_CodeLength
>82ca	15 81					  .word WordListLink
=$82cc					XtPtr1 ::= *
=33351					WordListLink ::= Nt0 ; remember the nt of this word for later
.82cc	a9 24		lda #$24			lda #DStack
.82ce	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$82d1					en = *	; remember here
>82c9	05					.byte CL	;wh_CodeLength
>82d1	52 53 74 61 63 6b		L1:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=33367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d7	66					.byte (("RStack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d8	10					.byte WordFlags	;wh_Flags
>82d9	03					.byte 3	;wh_CodeLength
>82da	10					  .byte LinkDisplacement
=$82db					XtPtr1 ::= *
=33367					WordListLink ::= Nt0 ; remember the nt of this word for later
.82db	a0 01		ldy #$01			ldy #>RStack
.82dd	a9 00		lda #$00			lda #<RStack
.82df	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$82e2					en = *	; remember here
>82d9	07					.byte CL	;wh_CodeLength
>82e2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=33386					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82ea	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82eb	10					.byte WordFlags	;wh_Flags
>82ec	03					.byte 3	;wh_CodeLength
>82ed	13					  .byte LinkDisplacement
=$82ee					XtPtr1 ::= *
=33386					WordListLink ::= Nt0 ; remember the nt of this word for later
.82ee	a0 03		ldy #$03			ldy #>RndState
.82f0	a9 35		lda #$35			lda #<RndState
.82f2	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$82f5					en = *	; remember here
>82ec	07					.byte CL	;wh_CodeLength
>82f5	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=33401					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f9	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82fa	00					.byte WordFlags	;wh_Flags
>82fb	03					.byte 3	;wh_CodeLength
>82fc	0f					  .byte LinkDisplacement
=$82fd					XtPtr1 ::= *
=33401					WordListLink ::= Nt0 ; remember the nt of this word for later
.82fd					Rand:
.82fd	4e 36 03	lsr $0336			lsr RndState+1
.8300	6e 35 03	ror $0335			ror RndState+0
.8303	6e 38 03	ror $0338			ror RndState+3
.8306	6e 37 03	ror $0337			ror RndState+2
.8309	90 10		bcc $831b			bcc _19			;  IfCs,
.830b	ad 36 03	lda $0336			lda RndState+1
.830e	49 d0		eor #$d0			eor #$d0
.8310	8d 36 03	sta $0336			sta RndState+1
.8313	ad 37 03	lda $0337			lda RndState+2
.8316	49 01		eor #$01			eor #$01
.8318	8d 37 03	sta $0337			sta RndState+2
.831b					_19:
.831b	ad 37 03	lda $0337			lda RndState+2
.831e	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-XtPtr1
=$8321					en = *	; remember here
>82fb	24					.byte CL	;wh_CodeLength
.8321	60		rts				rts
>8322	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=33447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8327	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8328	10					.byte WordFlags	;wh_Flags
>8329	03					.byte 3	;wh_CodeLength
>832a	2e					  .byte LinkDisplacement
=$832b					XtPtr1 ::= *
=33447					WordListLink ::= Nt0 ; remember the nt of this word for later
.832b	20 67 cf	jsr $cf67	RandM:		jsr Dup		; ( umod umod )
.832e	20 fd 82	jsr $82fd			jsr Rand
.8331	4a		lsr a				lsr a		; make positive
.8332	95 27		sta $27,x			sta DStack+3,x
.8334	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8336	4c 80 af	jmp $af80			jmp Mod
=14					CL	.var *-XtPtr1
=$8339					en = *	; remember here
>8329	0e					.byte CL	;wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8339	46 49 6e 64 65 78		L1:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=33471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833f	06					.byte (("FIndex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8340	10					.byte WordFlags	;wh_Flags
>8341	03					.byte 3	;wh_CodeLength
>8342	18					  .byte LinkDisplacement
=$8343					XtPtr1 ::= *
=33471					WordListLink ::= Nt0 ; remember the nt of this word for later
.8343	a9 4c		lda #$4c			lda #FIndex
.8345	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8348					en = *	; remember here
>8341	05					.byte CL	;wh_CodeLength
>8348	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=33484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>834c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>834d	10					.byte WordFlags	;wh_Flags
>834e	03					.byte 3	;wh_CodeLength
>834f	0d					  .byte LinkDisplacement
=$8350					XtPtr1 ::= *
=33484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8350	a9 0a		lda #$0a			lda #FDim
.8352	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8355					en = *	; remember here
>834e	05					.byte CL	;wh_CodeLength
>8355	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=33498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>835a	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>835b	10					.byte WordFlags	;wh_Flags
>835c	03					.byte 3	;wh_CodeLength
>835d	0e					  .byte LinkDisplacement
=$835e					XtPtr1 ::= *
=33498					WordListLink ::= Nt0 ; remember the nt of this word for later
.835e	a9 4d		lda #$4d			lda #FSExp
.8360	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8363					en = *	; remember here
>835c	05					.byte CL	;wh_CodeLength
>8363	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=33514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>836a	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>836b	10					.byte WordFlags	;wh_Flags
>836c	03					.byte 3	;wh_CodeLength
>836d	10					  .byte LinkDisplacement
=$836e					XtPtr1 ::= *
=33514					WordListLink ::= Nt0 ; remember the nt of this word for later
.836e	a9 57		lda #$57			lda #FSMant0
.8370	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8373					en = *	; remember here
>836c	05					.byte CL	;wh_CodeLength
>8373	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=33530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>837a	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>837b	10					.byte WordFlags	;wh_Flags
>837c	03					.byte 3	;wh_CodeLength
>837d	10					  .byte LinkDisplacement
=$837e					XtPtr1 ::= *
=33530					WordListLink ::= Nt0 ; remember the nt of this word for later
.837e	a9 61		lda #$61			lda #FSMant1
.8380	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8383					en = *	; remember here
>837c	05					.byte CL	;wh_CodeLength
>8383	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=33546					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>838a	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>838b	10					.byte WordFlags	;wh_Flags
>838c	03					.byte 3	;wh_CodeLength
>838d	10					  .byte LinkDisplacement
=$838e					XtPtr1 ::= *
=33546					WordListLink ::= Nt0 ; remember the nt of this word for later
.838e	a9 6b		lda #$6b			lda #FSMant2
.8390	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$8393					en = *	; remember here
>838c	05					.byte CL	;wh_CodeLength
>8393	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=33562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>839a	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>839b	10					.byte WordFlags	;wh_Flags
>839c	03					.byte 3	;wh_CodeLength
>839d	10					  .byte LinkDisplacement
=$839e					XtPtr1 ::= *
=33562					WordListLink ::= Nt0 ; remember the nt of this word for later
.839e	a9 75		lda #$75			lda #FSMant3
.83a0	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$83a3					en = *	; remember here
>839c	05					.byte CL	;wh_CodeLength
>83a3	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=33577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a9	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83aa	10					.byte WordFlags	;wh_Flags
>83ab	03					.byte 3	;wh_CodeLength
>83ac	0f					  .byte LinkDisplacement
=$83ad					XtPtr1 ::= *
=33577					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ad	a9 05		lda #$05	FloatPlus:	lda #5
.83af	4c 1b ca	jmp $ca1b			jmp Plus_A
=5					CL	.var *-XtPtr1
=$83b2					en = *	; remember here
>83ab	05					.byte CL	;wh_CodeLength
>83b2	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=33592					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b8	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b9	10					.byte WordFlags	;wh_Flags
>83ba	03					.byte 3	;wh_CodeLength
>83bb	0f					  .byte LinkDisplacement
=$83bc					XtPtr1 ::= *
=33592					WordListLink ::= Nt0 ; remember the nt of this word for later
.83bc	a9 05		lda #$05	Floats:		lda #5
.83be	20 e7 b7	jsr $b7e7			jsr PushZA
.83c1	4c 96 ae	jmp $ae96			jmp Star
=8					CL	.var *-XtPtr1
=$83c4					en = *	; remember here
>83ba	08					.byte CL	;wh_CodeLength
>83c4	46 41 6c 69 67 6e		L1:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=33610					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83ca	c6					.byte (("FAlign"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83cb	00					.byte WordFlags	;wh_Flags
>83cc	03					.byte 3	;wh_CodeLength
>83cd	12					  .byte LinkDisplacement
=$83ce					XtPtr1 ::= *
=33610					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ce					FAlign:
=0					CL	.var *-XtPtr1
=$83ce					en = *	; remember here
>83cc	00					.byte CL	;wh_CodeLength
.83ce	60		rts				rts
>83cf	46 41 6c 69 67 6e 65 64		L1:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=33623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d7	88					.byte (("FAligned"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d8	00					.byte WordFlags	;wh_Flags
>83d9	03					.byte 3	;wh_CodeLength
>83da	0d					  .byte LinkDisplacement
=$83db					XtPtr1 ::= *
=33623					WordListLink ::= Nt0 ; remember the nt of this word for later
.83db					FAligned:
=0					CL	.var *-XtPtr1
=$83db					en = *	; remember here
>83d9	00					.byte CL	;wh_CodeLength
.83db	60		rts				rts
>83dc	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=33633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83e1	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83e2	10					.byte WordFlags	;wh_Flags
>83e3	03					.byte 3	;wh_CodeLength
>83e4	0a					  .byte LinkDisplacement
=$83e5					XtPtr1 ::= *
=33633					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e5	20 c2 84	jsr $84c2	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83ea	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83ec	20 e0 b3	jsr $b3e0			jsr PopA		; pop n_exp
.83ef	99 4d 00	sta $004d,y			sta FSExp,y
.83f2	b5 25		lda $25,x			lda DStack+1,x
.83f4	99 57 00	sta $0057,y			sta FSMant0,y
.83f7	b5 24		lda $24,x			lda DStack+0,x
.83f9	99 61 00	sta $0061,y			sta FSMant1,y
.83fc	b5 27		lda $27,x			lda DStack+3,x
.83fe	99 6b 00	sta $006b,y			sta FSMant2,y
.8401	b5 26		lda $26,x			lda DStack+2,x
.8403	99 75 00	sta $0075,y			sta FSMant3,y
.8406	4c 45 c5	jmp $c545			jmp Two_Drop
=36					CL	.var *-XtPtr1
=$8409					en = *	; remember here
>83e3	24					.byte CL	;wh_CodeLength
>8409	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=33678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>840e	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840f	10					.byte WordFlags	;wh_Flags
>8410	03					.byte 3	;wh_CodeLength
>8411	2d					  .byte LinkDisplacement
=$8412					XtPtr1 ::= *
=33678					WordListLink ::= Nt0 ; remember the nt of this word for later
.8412	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.8414	ca		dex				dex
.8415	ca		dex				dex
.8416	ca		dex				dex
.8417	ca		dex				dex
.8418	ca		dex				dex
.8419	ca		dex				dex
.841a	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.841d	95 27		sta $27,x			sta DStack+3,x
.841f	b9 61 00	lda $0061,y			lda FSMant1,y
.8422	95 26		sta $26,x			sta DStack+2,x
.8424	b9 6b 00	lda $006b,y			lda FSMant2,y
.8427	95 29		sta $29,x			sta DStack+5,x
.8429	b9 75 00	lda $0075,y			lda FSMant3,y
.842c	95 28		sta $28,x			sta DStack+4,x
.842e	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8431	95 24		sta $24,x			sta DStack+0,x
.8433	29 80		and #$80			and #$80	;   sign extend
.8435	f0 02		beq $8439			beq +
.8437	a9 ff		lda #$ff			lda #$ff
.8439	95 25		sta $25,x	+		sta DStack+1,x
.843b	e6 4c		inc $4c				inc FIndex	; FDrop
.843d	60		rts				rts
=44					CL	.var *-XtPtr1
=$843e					en = *	; remember here
>8410	2c					.byte CL	;wh_CodeLength
>843e	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=33731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8443	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>8444	10					.byte WordFlags	;wh_Flags
>8445	03					.byte 3	;wh_CodeLength
>8446	35					  .byte LinkDisplacement
=$8447					XtPtr1 ::= *
=33731					WordListLink ::= Nt0 ; remember the nt of this word for later
.8447	20 12 84	jsr $8412	FDotHex:	jsr FToHex	; get parts of r
.844a	20 87 ce	jsr $ce87			jsr Not_Rot
.844d	20 15 a9	jsr $a915			jsr Dot_Hex	; do mantissa
.8450	20 15 a9	jsr $a915			jsr Dot_Hex
.8453	a9 3a		lda #$3a			lda #':'
.8455	20 d1 cd	jsr $cdd1			jsr Emit_A
.8458	4c f4 a8	jmp $a8f4			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-XtPtr1
=$845b					en = *	; remember here
>8445	14					.byte CL	;wh_CodeLength
>845b	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=33760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8460	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8461	10					.byte WordFlags	;wh_Flags
>8462	03					.byte 3	;wh_CodeLength
>8463	1d					  .byte LinkDisplacement
=$8464					XtPtr1 ::= *
=33760					WordListLink ::= Nt0 ; remember the nt of this word for later
.8464	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8466	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8468	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.846a	f0 35		beq $84a1			beq _r2Zero
.846c	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.846e	f0 2b		beq $849b			beq _r1Zero
.8470	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8472	30 3d		bmi $84b1			bmi _MantissaSignDifferent
.8474	38		sec				sec			; compare exponent
.8475	b5 4e		lda $4e,x			lda FSExp+1,x
.8477	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8479	d0 2b		bne $84a6			bne _ExponentDifferent
.847b	98		tya				tya			; compare mantissa MSB
.847c	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.847e	d0 17		bne $8497			bne _13
.8480	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8482	f5 61		sbc $61,x			sbc FSMant1+0,x
.8484	d0 0c		bne $8492			bne _12
.8486	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8488	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.848a	d0 06		bne $8492			bne _12
.848c	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.848e	f5 75		sbc $75,x			sbc FSMant3+0,x
.8490	f0 05		beq $8497			beq _13
.8492	6a		ror a		_12:		ror a
.8493	49 80		eor #$80	_14:		eor #$80
.8495	09 01		ora #$01			ora #1
.8497	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8499	a8		tay				tay			; set CPU flags
.849a	60		rts				rts
.849b	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.849d	d0 f4		bne $8493			bne _14
.849f	f0 f6		beq $8497			beq _13
.84a1	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.84a3	4c 97 84	jmp $8497			jmp _13
.84a6					_ExponentDifferent:
.84a6	50 02		bvc $84aa			bvc +
.84a8	49 80		eor #$80			eor #$80
.84aa					+
.84aa	55 57		eor $57,x			eor FSMant0+0,x
.84ac	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84ae	09 01		ora #$01			ora #1			; set CPU flags
.84b0	60		rts				rts
.84b1					_MantissaSignDifferent:
.84b1	98		tya				tya
.84b2	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84b4	09 01		ora #$01			ora #1
.84b6	60		rts				rts
=83					CL	.var *-XtPtr1
=$84b7					en = *	; remember here
>8462	53					.byte CL	;wh_CodeLength
>84b7	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=33854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84be	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84bf	10					.byte WordFlags	;wh_Flags
>84c0	03					.byte 3	;wh_CodeLength
>84c1	5e					  .byte LinkDisplacement
=$84c2					XtPtr1 ::= *
=33854					WordListLink ::= Nt0 ; remember the nt of this word for later
.84c2	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84c4	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c6	ca		dex				dex		; alloc FP stack entry
.84c7	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c9	b0 03		bcs $84ce			bcs _err
.84cb	86 4c		stx $4c				stx FIndex
.84cd	60		rts				rts		; return X= FP stack index
.84ce	08		php		_err:		php		; save sign bit
.84cf	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84d1	28		plp				plp		; restore sign bit
.84d2	4c 51 b4	jmp $b451			jmp Throw_FPStack
=19					CL	.var *-XtPtr1
=$84d5					en = *	; remember here
>84c0	13					.byte CL	;wh_CodeLength
>84d5	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=33881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d9	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84da	10					.byte WordFlags	;wh_Flags
>84db	03					.byte 3	;wh_CodeLength
>84dc	1b					  .byte LinkDisplacement
=$84dd					XtPtr1 ::= *
=33881					WordListLink ::= Nt0 ; remember the nt of this word for later
.84dd	20 64 84	jsr $8464	FMax:		jsr FCmpA
.84e0	10 2c		bpl $850e			bpl FDrop
.84e2	30 44		bmi $8528			bmi FNip
=7					CL	.var *-XtPtr1
=$84e4					en = *	; remember here
>84db	07					.byte CL	;wh_CodeLength
>84e4	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=33896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e8	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e9	10					.byte WordFlags	;wh_Flags
>84ea	03					.byte 3	;wh_CodeLength
>84eb	0f					  .byte LinkDisplacement
=$84ec					XtPtr1 ::= *
=33896					WordListLink ::= Nt0 ; remember the nt of this word for later
.84ec	20 64 84	jsr $8464	FMin:		jsr FCmpA
.84ef	30 1d		bmi $850e			bmi FDrop
.84f1	10 35		bpl $8528			bpl FNip
=7					CL	.var *-XtPtr1
=$84f3					en = *	; remember here
>84ea	07					.byte CL	;wh_CodeLength
>84f3	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=33913					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f9	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84fa	10					.byte WordFlags	;wh_Flags
>84fb	03					.byte 3	;wh_CodeLength
>84fc	11					  .byte LinkDisplacement
=$84fd					XtPtr1 ::= *
=33913					WordListLink ::= Nt0 ; remember the nt of this word for later
.84fd	a9 0a		lda #$0a	FDepth:		lda #FDim
.84ff	38		sec				sec
.8500	e5 4c		sbc $4c				sbc FIndex
.8502	4c e7 b7	jmp $b7e7			jmp PushZA
=8					CL	.var *-XtPtr1
=$8505					en = *	; remember here
>84fb	08					.byte CL	;wh_CodeLength
>8505	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=33930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>850a	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>850b	00					.byte WordFlags	;wh_Flags
>850c	03					.byte 3	;wh_CodeLength
>850d	11					  .byte LinkDisplacement
=$850e					XtPtr1 ::= *
=33930					WordListLink ::= Nt0 ; remember the nt of this word for later
.850e	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CL	.var *-XtPtr1
=$8510					en = *	; remember here
>850c	02					.byte CL	;wh_CodeLength
.8510	60		rts				rts
>8511	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=33943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8517	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8518	00					.byte WordFlags	;wh_Flags
>8519	03					.byte 3	;wh_CodeLength
>851a	0d					  .byte LinkDisplacement
=$851b					XtPtr1 ::= *
=33943					WordListLink ::= Nt0 ; remember the nt of this word for later
.851b	e6 4c		inc $4c		F2Drop:		inc FIndex
.851d	e6 4c		inc $4c				inc FIndex
=4					CL	.var *-XtPtr1
=$851f					en = *	; remember here
>8519	04					.byte CL	;wh_CodeLength
.851f	60		rts				rts
>8520	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=33956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8524	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8525	00					.byte WordFlags	;wh_Flags
>8526	03					.byte 3	;wh_CodeLength
>8527	0d					  .byte LinkDisplacement
=$8528					XtPtr1 ::= *
=33956					WordListLink ::= Nt0 ; remember the nt of this word for later
.8528	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.852a	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.852c	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.852e	95 4e		sta $4e,x			sta FSExp+1,x
.8530	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8532	95 58		sta $58,x			sta FSMant0+1,x
.8534	b5 61		lda $61,x			lda FSMant1+0,x
.8536	95 62		sta $62,x			sta FSMant1+1,x
.8538	b5 6b		lda $6b,x			lda FSMant2+0,x
.853a	95 6c		sta $6c,x			sta FSMant2+1,x
.853c	b5 75		lda $75,x			lda FSMant3+0,x
.853e	95 76		sta $76,x			sta FSMant3+1,x
.8540	e6 4c		inc $4c				inc FIndex		; FDrop
.8542	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-XtPtr1
=$8544					en = *	; remember here
>8526	1c					.byte CL	;wh_CodeLength
.8544	60		rts				rts
>8545	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=33993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8549	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>854a	00					.byte WordFlags	;wh_Flags
>854b	03					.byte 3	;wh_CodeLength
>854c	25					  .byte LinkDisplacement
=$854d					XtPtr1 ::= *
=33993					WordListLink ::= Nt0 ; remember the nt of this word for later
.854d	20 c2 84	jsr $84c2	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8550	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8552	95 4d		sta $4d,x			sta FSExp+0,x
.8554	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8556	95 57		sta $57,x			sta FSMant0+0,x
.8558	b5 62		lda $62,x			lda FSMant1+1,x
.855a	95 61		sta $61,x			sta FSMant1+0,x
.855c	b5 6c		lda $6c,x			lda FSMant2+1,x
.855e	95 6b		sta $6b,x			sta FSMant2+0,x
.8560	b5 76		lda $76,x			lda FSMant3+1,x
.8562	95 75		sta $75,x			sta FSMant3+0,x
.8564	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-XtPtr1
=$8566					en = *	; remember here
>854b	19					.byte CL	;wh_CodeLength
.8566	60		rts				rts
>8567	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=34028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>856c	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>856d	00					.byte WordFlags	;wh_Flags
>856e	03					.byte 3	;wh_CodeLength
>856f	23					  .byte LinkDisplacement
=$8570					XtPtr1 ::= *
=34028					WordListLink ::= Nt0 ; remember the nt of this word for later
.8570	20 c2 84	jsr $84c2	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8573	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8575	95 4d		sta $4d,x			sta FSExp+0,x
.8577	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8579	95 57		sta $57,x			sta FSMant0+0,x
.857b	b5 63		lda $63,x			lda FSMant1+2,x
.857d	95 61		sta $61,x			sta FSMant1+0,x
.857f	b5 6d		lda $6d,x			lda FSMant2+2,x
.8581	95 6b		sta $6b,x			sta FSMant2+0,x
.8583	b5 77		lda $77,x			lda FSMant3+2,x
.8585	95 75		sta $75,x			sta FSMant3+0,x
.8587	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-XtPtr1
=$8589					en = *	; remember here
>856e	19					.byte CL	;wh_CodeLength
.8589	60		rts				rts
>858a	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=34063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858f	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8590	00					.byte WordFlags	;wh_Flags
>8591	03					.byte 3	;wh_CodeLength
>8592	23					  .byte LinkDisplacement
=$8593					XtPtr1 ::= *
=34063					WordListLink ::= Nt0 ; remember the nt of this word for later
.8593	20 e0 b3	jsr $b3e0	FPick:		jsr PopA		; pop u (desired entry #)
.8596	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8597	65 4c		adc $4c				adc FIndex
.8599	a8		tay		FPick3:		tay
.859a	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.859d	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.85a0	95 4d		sta $4d,x			sta FSExp,x
.85a2	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a5	95 57		sta $57,x			sta FSMant0,x
.85a7	b9 61 00	lda $0061,y			lda FSMant1,y
.85aa	95 61		sta $61,x			sta FSMant1,x
.85ac	b9 6b 00	lda $006b,y			lda FSMant2,y
.85af	95 6b		sta $6b,x			sta FSMant2,x
.85b1	b9 75 00	lda $0075,y			lda FSMant3,y
.85b4	95 75		sta $75,x			sta FSMant3,x
.85b6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-XtPtr1
=$85b8					en = *	; remember here
>8591	25					.byte CL	;wh_CodeLength
.85b8	60		rts				rts
>85b9	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=34110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85be	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85bf	10					.byte WordFlags	;wh_Flags
>85c0	03					.byte 3	;wh_CodeLength
>85c1	2f					  .byte LinkDisplacement
=$85c2					XtPtr1 ::= *
=34110					WordListLink ::= Nt0 ; remember the nt of this word for later
.85c2	20 70 85	jsr $8570	F2Dup:		jsr FOver
.85c5	4c 70 85	jmp $8570			jmp FOver
=6					CL	.var *-XtPtr1
=$85c8					en = *	; remember here
>85c0	06					.byte CL	;wh_CodeLength
>85c8	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=34125					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85cd	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85ce	00					.byte WordFlags	;wh_Flags
>85cf	03					.byte 3	;wh_CodeLength
>85d0	0f					  .byte LinkDisplacement
=$85d1					XtPtr1 ::= *
=34125					WordListLink ::= Nt0 ; remember the nt of this word for later
.85d1	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85d3	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d5	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d7	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d9	95 4e		sta $4e,x			sta FSExp+1,x
.85db	94 4d		sty $4d,x			sty FSExp+0,x
.85dd	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85df	b4 58		ldy $58,x			ldy FSMant0+1,x
.85e1	95 58		sta $58,x			sta FSMant0+1,x
.85e3	94 57		sty $57,x			sty FSMant0+0,x
.85e5	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e7	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e9	95 62		sta $62,x			sta FSMant1+1,x
.85eb	94 61		sty $61,x			sty FSMant1+0,x
.85ed	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ef	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85f1	95 6c		sta $6c,x			sta FSMant2+1,x
.85f3	94 6b		sty $6b,x			sty FSMant2+0,x
.85f5	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f7	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f9	95 76		sta $76,x			sta FSMant3+1,x
.85fb	94 75		sty $75,x			sty FSMant3+0,x
.85fd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CL	.var *-XtPtr1
=$85ff					en = *	; remember here
>85cf	2e					.byte CL	;wh_CodeLength
.85ff	60		rts				rts
>8600	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=34181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8605	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8606	10					.byte WordFlags	;wh_Flags
>8607	03					.byte 3	;wh_CodeLength
>8608	38					  .byte LinkDisplacement
=$8609					XtPtr1 ::= *
=34181					WordListLink ::= Nt0 ; remember the nt of this word for later
.8609	20 d1 85	jsr $85d1	FTuck:		jsr FSwap
.860c	4c 70 85	jmp $8570			jmp FOver
=6					CL	.var *-XtPtr1
=$860f					en = *	; remember here
>8607	06					.byte CL	;wh_CodeLength
>860f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=34195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8613	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8614	00					.byte WordFlags	;wh_Flags
>8615	03					.byte 3	;wh_CodeLength
>8616	0e					  .byte LinkDisplacement
=$8617					XtPtr1 ::= *
=34195					WordListLink ::= Nt0 ; remember the nt of this word for later
.8617	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8619	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.861b	18		clc				clc
.861c	69 28		adc #$28			adc #4*FDim
.861e	d0 03		bne $8623			bne _3
.8620	8a		txa		_2:		txa			;    next byte
.8621	e9 0a		sbc #$0a			sbc #FDim
.8623	aa		tax		_3:		tax
.8624	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8626	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8628	94 4f		sty $4f,x			sty FSExp+2,x
.862a	b4 4d		ldy $4d,x			ldy FSExp+0,x
.862c	94 4e		sty $4e,x			sty FSExp+1,x
.862e	95 4d		sta $4d,x			sta FSExp+0,x
.8630	e4 4c		cpx $4c				cpx FIndex		; done?
.8632	d0 ec		bne $8620			bne _2
.8634	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-XtPtr1
=$8636					en = *	; remember here
>8615	1f					.byte CL	;wh_CodeLength
.8636	60		rts				rts
>8637	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=34236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>863c	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>863d	10					.byte WordFlags	;wh_Flags
>863e	03					.byte 3	;wh_CodeLength
>863f	29					  .byte LinkDisplacement
=$8640					XtPtr1 ::= *
=34236					WordListLink ::= Nt0 ; remember the nt of this word for later
.8640	20 17 86	jsr $8617	FMRot:		jsr FRot
.8643	4c 17 86	jmp $8617			jmp FRot
=6					CL	.var *-XtPtr1
=$8646					en = *	; remember here
>863e	06					.byte CL	;wh_CodeLength
>8646	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=34248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8648	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8649	00					.byte WordFlags	;wh_Flags
>864a	03					.byte 3	;wh_CodeLength
>864b	0c					  .byte LinkDisplacement
=$864c					XtPtr1 ::= *
=34248					WordListLink ::= Nt0 ; remember the nt of this word for later
.864c	20 fb b3	jsr $b3fb	FAt:		jsr PopYA		; pop addr
.864f	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8651	84 17		sty $17				sty tmp2+1
.8653	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8655	20 c2 84	jsr $84c2	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8658	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.865a	95 75		sta $75,x			sta FSMant3,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 6b		sta $6b,x			sta FSMant2,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 61		sta $61,x			sta FSMant1,x
.8666	c8		iny				iny
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 57		sta $57,x			sta FSMant0,x
.866b	c8		iny				iny			; copy exponent
.866c	b1 16		lda ($16),y			lda (tmp2),y
.866e	95 4d		sta $4d,x			sta FSExp,x
.8670	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-XtPtr1
=$8672					en = *	; remember here
>864a	26					.byte CL	;wh_CodeLength
.8672	60		rts				rts
>8673	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=34293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8675	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8676	00					.byte WordFlags	;wh_Flags
>8677	03					.byte 3	;wh_CodeLength
>8678	2d					  .byte LinkDisplacement
=$8679					XtPtr1 ::= *
=34293					WordListLink ::= Nt0 ; remember the nt of this word for later
.8679	20 fb b3	jsr $b3fb	FStore:		jsr PopYA		; pop addr
.867c	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867e	84 15		sty $15				sty tmp1+1
.8680	a0 00		ldy #$00			ldy #0
.8682	86 16		stx $16				stx tmp2		; save data stack index
.8684	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8686	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 6b		lda $6b,x			lda FSMant2,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 61		lda $61,x			lda FSMant1,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 57		lda $57,x			lda FSMant0,x
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869b	c8		iny				iny
.869c	91 14		sta ($14),y			sta (tmp1),y
.869e	e6 4c		inc $4c				inc FIndex		; FDrop
.86a0	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-XtPtr1
=$86a2					en = *	; remember here
>8677	29					.byte CL	;wh_CodeLength
.86a2	60		rts				rts
>86a3	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=34341					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a5	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a6	10					.byte WordFlags	;wh_Flags
>86a7	03					.byte 3	;wh_CodeLength
>86a8	30					  .byte LinkDisplacement
=$86a9					XtPtr1 ::= *
=34341					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7c 86	jsr $867c			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 e7 b7	jsr $b7e7			jsr PushZA
.86b5	4c b1 c0	jmp $c0b1			jmp Allot
=15					CL	.var *-XtPtr1
=$86b8					en = *	; remember here
>86a7	0f					.byte CL	;wh_CodeLength
>86b8	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=34363					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86bb	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86bc	10					.byte WordFlags	;wh_Flags
>86bd	03					.byte 3	;wh_CodeLength
>86be	16					  .byte LinkDisplacement
=$86bf					XtPtr1 ::= *
=34363					WordListLink ::= Nt0 ; remember the nt of this word for later
.86bf	20 ab 88	jsr $88ab	FZStore:	jsr F0
.86c2	4c 79 86	jmp $8679			jmp FStore
=6					CL	.var *-XtPtr1
=$86c5					en = *	; remember here
>86bd	06					.byte CL	;wh_CodeLength
>86c5	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=34376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c8	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c9	10					.byte WordFlags	;wh_Flags
>86ca	03					.byte 3	;wh_CodeLength
>86cb	0d					  .byte LinkDisplacement
=$86cc					XtPtr1 ::= *
=34376					WordListLink ::= Nt0 ; remember the nt of this word for later
.86cc	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86ce	b9 57 00	lda $0057,y			lda FSMant0,y
.86d1	d0 24		bne $86f7			bne FFalse1
.86d3					FTrue1:
.86d3	e6 4c		inc $4c				inc FIndex	; FDrop
.86d5	4c c7 b7	jmp $b7c7			jmp True	; return true
=12					CL	.var *-XtPtr1
=$86d8					en = *	; remember here
>86ca	0c					.byte CL	;wh_CodeLength
>86d8	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=34396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86dc	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86dd	10					.byte WordFlags	;wh_Flags
>86de	03					.byte 3	;wh_CodeLength
>86df	14					  .byte LinkDisplacement
=$86e0					XtPtr1 ::= *
=34396					WordListLink ::= Nt0 ; remember the nt of this word for later
.86e0	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86e2	b9 57 00	lda $0057,y			lda FSMant0,y
.86e5	d0 ec		bne $86d3			bne FTrue1
.86e7	f0 0e		beq $86f7			beq FFalse1
=9					CL	.var *-XtPtr1
=$86e9					en = *	; remember here
>86de	09					.byte CL	;wh_CodeLength
>86e9	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=34412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86ec	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86ed	10					.byte WordFlags	;wh_Flags
>86ee	03					.byte 3	;wh_CodeLength
>86ef	10					  .byte LinkDisplacement
=$86f0					XtPtr1 ::= *
=34412					WordListLink ::= Nt0 ; remember the nt of this word for later
.86f0	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86f2	b9 57 00	lda $0057,y			lda FSMant0,y
.86f5	30 dc		bmi $86d3			bmi FTrue1
.86f7					FFalse1:
.86f7	e6 4c		inc $4c				inc FIndex	; FDrop
.86f9	4c d9 b7	jmp $b7d9			jmp False	; return false
=12					CL	.var *-XtPtr1
=$86fc					en = *	; remember here
>86ee	0c					.byte CL	;wh_CodeLength
>86fc	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=34432					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8700	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>8701	10					.byte WordFlags	;wh_Flags
>8702	03					.byte 3	;wh_CodeLength
>8703	14					  .byte LinkDisplacement
=$8704					XtPtr1 ::= *
=34432					WordListLink ::= Nt0 ; remember the nt of this word for later
.8704	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8706	b9 57 00	lda $0057,y			lda FSMant0,y
.8709	10 c8		bpl $86d3			bpl FTrue1
.870b	30 ea		bmi $86f7			bmi FFalse1
=9					CL	.var *-XtPtr1
=$870d					en = *	; remember here
>8702	09					.byte CL	;wh_CodeLength
>870d	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=34448					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8710	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8711	10					.byte WordFlags	;wh_Flags
>8712	03					.byte 3	;wh_CodeLength
>8713	10					  .byte LinkDisplacement
=$8714					XtPtr1 ::= *
=34448					WordListLink ::= Nt0 ; remember the nt of this word for later
.8714	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8716	b9 57 00	lda $0057,y			lda FSMant0,y
.8719	30 dc		bmi $86f7			bmi FFalse1
.871b	d0 b6		bne $86d3			bne FTrue1
.871d	f0 d8		beq $86f7			beq FFalse1
=11					CL	.var *-XtPtr1
=$871f					en = *	; remember here
>8712	0b					.byte CL	;wh_CodeLength
>871f	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=34467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8723	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8724	10					.byte WordFlags	;wh_Flags
>8725	03					.byte 3	;wh_CodeLength
>8726	13					  .byte LinkDisplacement
=$8727					XtPtr1 ::= *
=34467					WordListLink ::= Nt0 ; remember the nt of this word for later
.8727	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8729	b9 57 00	lda $0057,y			lda FSMant0,y
.872c	30 a5		bmi $86d3			bmi FTrue1
.872e	d0 c7		bne $86f7			bne FFalse1
.8730	f0 a1		beq $86d3			beq FTrue1
=11					CL	.var *-XtPtr1
=$8732					en = *	; remember here
>8725	0b					.byte CL	;wh_CodeLength
>8732	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=34484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8734	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8735	10					.byte WordFlags	;wh_Flags
>8736	03					.byte 3	;wh_CodeLength
>8737	11					  .byte LinkDisplacement
=$8738					XtPtr1 ::= *
=34484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8738	20 64 84	jsr $8464	FLt:		jsr FCmpA
.873b	30 32		bmi $876f			bmi FTrue2
.873d					FFalse2:
.873d	e6 4c		inc $4c				inc FIndex	; FDrop
.873f	e6 4c		inc $4c				inc FIndex	; FDrop
.8741	4c d9 b7	jmp $b7d9			jmp False	; return False
=12					CL	.var *-XtPtr1
=$8744					en = *	; remember here
>8736	0c					.byte CL	;wh_CodeLength
>8744	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=34503					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8747	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8748	10					.byte WordFlags	;wh_Flags
>8749	03					.byte 3	;wh_CodeLength
>874a	13					  .byte LinkDisplacement
=$874b					XtPtr1 ::= *
=34503					WordListLink ::= Nt0 ; remember the nt of this word for later
.874b	20 64 84	jsr $8464	FGe:		jsr FCmpA
.874e	10 1f		bpl $876f			bpl FTrue2
.8750	30 eb		bmi $873d			bmi FFalse2
=7					CL	.var *-XtPtr1
=$8752					en = *	; remember here
>8749	07					.byte CL	;wh_CodeLength
>8752	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=34516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8754	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8755	10					.byte WordFlags	;wh_Flags
>8756	03					.byte 3	;wh_CodeLength
>8757	0d					  .byte LinkDisplacement
=$8758					XtPtr1 ::= *
=34516					WordListLink ::= Nt0 ; remember the nt of this word for later
.8758	20 64 84	jsr $8464	FGt:		jsr FCmpA
.875b	30 e0		bmi $873d			bmi FFalse2
.875d	d0 10		bne $876f			bne FTrue2
.875f	f0 dc		beq $873d			beq FFalse2
=9					CL	.var *-XtPtr1
=$8761					en = *	; remember here
>8756	09					.byte CL	;wh_CodeLength
>8761	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=34532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8764	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8765	10					.byte WordFlags	;wh_Flags
>8766	03					.byte 3	;wh_CodeLength
>8767	10					  .byte LinkDisplacement
=$8768					XtPtr1 ::= *
=34532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8768	20 64 84	jsr $8464	FLe:		jsr FCmpA
.876b	30 02		bmi $876f			bmi FTrue2
.876d	d0 ce		bne $873d			bne FFalse2
.876f					FTrue2:
.876f	e6 4c		inc $4c				inc FIndex	; FDrop
.8771	e6 4c		inc $4c				inc FIndex	; FDrop
.8773	4c c7 b7	jmp $b7c7			jmp True	; return True
=14					CL	.var *-XtPtr1
=$8776					en = *	; remember here
>8766	0e					.byte CL	;wh_CodeLength
>8776	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=34553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8779	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>877a	10					.byte WordFlags	;wh_Flags
>877b	03					.byte 3	;wh_CodeLength
>877c	15					  .byte LinkDisplacement
=$877d					XtPtr1 ::= *
=34553					WordListLink ::= Nt0 ; remember the nt of this word for later
.877d	20 64 84	jsr $8464	FNe:		jsr FCmpA
.8780	d0 ed		bne $876f			bne FTrue2
.8782	f0 b9		beq $873d			beq FFalse2
=7					CL	.var *-XtPtr1
=$8784					en = *	; remember here
>877b	07					.byte CL	;wh_CodeLength
>8784	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=34566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8786	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8787	10					.byte WordFlags	;wh_Flags
>8788	03					.byte 3	;wh_CodeLength
>8789	0d					  .byte LinkDisplacement
=$878a					XtPtr1 ::= *
=34566					WordListLink ::= Nt0 ; remember the nt of this word for later
.878a	20 64 84	jsr $8464	FEq:		jsr FCmpA
.878d	d0 ae		bne $873d			bne FFalse2
.878f	f0 de		beq $876f			beq FTrue2
=7					CL	.var *-XtPtr1
=$8791					en = *	; remember here
>8788	07					.byte CL	;wh_CodeLength
>8791	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=34582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8796	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8797	10					.byte WordFlags	;wh_Flags
>8798	03					.byte 3	;wh_CodeLength
>8799	10					  .byte LinkDisplacement
=$879a					XtPtr1 ::= *
=34582					WordListLink ::= Nt0 ; remember the nt of this word for later
.879a	20 40 86	jsr $8640	FTAbs:		jsr FMRot
.879d	20 55 8b	jsr $8b55			jsr FMinus
.87a0	20 b0 8b	jsr $8bb0			jsr FAbs
.87a3	4c 58 87	jmp $8758			jmp FGt
=12					CL	.var *-XtPtr1
=$87a6					en = *	; remember here
>8798	0c					.byte CL	;wh_CodeLength
>87a6	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=34603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ab	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87ac	10					.byte WordFlags	;wh_Flags
>87ad	03					.byte 3	;wh_CodeLength
>87ae	15					  .byte LinkDisplacement
=$87af					XtPtr1 ::= *
=34603					WordListLink ::= Nt0 ; remember the nt of this word for later
.87af	20 70 85	jsr $8570	FTRel:		jsr FOver
.87b2	a9 03		lda #$03			lda #3
.87b4	20 96 85	jsr $8596			jsr FPickA
.87b7	20 15 8b	jsr $8b15			jsr FPlus
.87ba	20 b0 8b	jsr $8bb0			jsr FAbs
.87bd	20 e3 8b	jsr $8be3			jsr FStar		; r1 r2 r3*|r1+r2|
.87c0	20 40 86	jsr $8640			jsr FMRot		; r3*|r1+r2| r1 r2
.87c3	20 55 8b	jsr $8b55			jsr FMinus
.87c6	20 b0 8b	jsr $8bb0			jsr FAbs
.87c9	4c 58 87	jmp $8758			jmp FGt
=29					CL	.var *-XtPtr1
=$87cc					en = *	; remember here
>87ad	1d					.byte CL	;wh_CodeLength
>87cc	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=34638					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ce	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87cf	10					.byte WordFlags	;wh_Flags
>87d0	03					.byte 3	;wh_CodeLength
>87d1	23					  .byte LinkDisplacement
=$87d2					XtPtr1 ::= *
=34638					WordListLink ::= Nt0 ; remember the nt of this word for later
.87d2	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87d4	b9 57 00	lda $0057,y			lda FSMant0,y
.87d7	30 06		bmi $87df			bmi _10			; r3<0
.87d9	d0 bf		bne $879a			bne FTAbs		; r3>0
.87db	e6 4c		inc $4c				inc FIndex		; r3=0
.87dd	d0 ab		bne $878a			bne FEq
.87df	20 8a 8b	jsr $8b8a	_10:		jsr FNegate
.87e2	4c af 87	jmp $87af			jmp FTRel
=19					CL	.var *-XtPtr1
=$87e5					en = *	; remember here
>87d0	13					.byte CL	;wh_CodeLength
>87e5	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87ed	65
=34670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ee	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ef	18					.byte WordFlags	;wh_Flags
>87f0	03					.byte 3	;wh_CodeLength
>87f1	20					  .byte LinkDisplacement
=$87f2					XtPtr1 ::= *
=34670					WordListLink ::= Nt0 ; remember the nt of this word for later
.87f2	20 b8 c1	jsr $c1b8	FVariable:	jsr Create		; compile word header & push PFA adr
.87f5	20 d5 bb	jsr $bbd5			jsr adjust_z		; fix word code length
.87f8	20 ab 88	jsr $88ab			jsr F0			; alloc & init data
.87fb	4c a9 86	jmp $86a9			jmp FComma
=12					CL	.var *-XtPtr1
=$87fe					en = *	; remember here
>87f0	0c					.byte CL	;wh_CodeLength
>87fe	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=34694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8806	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8807	18					.byte WordFlags	;wh_Flags
>8808	03					.byte 3	;wh_CodeLength
>8809	18					  .byte LinkDisplacement
=$880a					XtPtr1 ::= *
=34694					WordListLink ::= Nt0 ; remember the nt of this word for later
.880a	20 1f 88	jsr $881f	FLiteral:	jsr FLitTest
.880d	f0 0a		beq $8819			beq _Short
.880f	a9 48		lda #$48			lda #<FLitI		; compile JSR FLitI
.8811	a0 88		ldy #$88			ldy #>FLitI
.8813	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.8816	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.8819	20 2b 88	jsr $882b	_Short:		jsr FLitShort
.881c	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-XtPtr1
=$881f					en = *	; remember here
>8808	15					.byte CL	;wh_CodeLength
.881f					FLitTest:
.881f	a4 4c		ldy $4c				ldy FIndex
.8821	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8824	19 6b 00	ora $006b,y			ora FSMant2,y
.8827	19 75 00	ora $0075,y			ora FSMant3,y
.882a	60		rts				rts
.882b					FLitShort:
.882b	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.882d	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.8830	b9 57 00	lda $0057,y			lda FSMant0,y
.8833	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.8836	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8838	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.883b	b9 4d 00	lda $004d,y			lda FSExp,y
.883e	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.8841	e6 4c		inc $4c				inc FIndex		; FDrop
.8843	a9 92		lda #$92			lda #<FLitYA		; point at FLitYA
.8845	a0 88		ldy #$88			ldy #>FLitYA
.8847	60		rts				rts
.8848					FLitI:
.8848	68		pla				pla			; tmp2= RTS addr
.8849	85 16		sta $16				sta tmp2+0
.884b	18		clc				clc			; bump RTS addr over inline float data
.884c	69 05		adc #$05			adc #5
.884e	a8		tay				tay
.884f	68		pla				pla
.8850	85 17		sta $17				sta tmp2+1
.8852	69 00		adc #$00			adc #0
.8854	48		pha				pha
.8855	98		tya				tya
.8856	48		pha				pha
.8857	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8859	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
>885c	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8864	74
=34789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8865	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8866	10					.byte WordFlags	;wh_Flags
>8867	03					.byte 3	;wh_CodeLength
>8868	5f					  .byte LinkDisplacement
=$8869					XtPtr1 ::= *
=34789					WordListLink ::= Nt0 ; remember the nt of this word for later
.8869	20 0a c1	jsr $c10a	FConstant:	jsr Header_Comma	; compile word header
.886c	20 1f 88	jsr $881f			jsr FLitTest		; will short work?
.886f	f0 0d		beq $887e			beq _Short
.8871	a9 87		lda #$87			lda #<FConstantRun	; compile call
.8873	a0 88		ldy #$88			ldy #>FConstantRun
.8875	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.8878	20 d5 bb	jsr $bbd5			jsr adjust_z
.887b	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.887e					_Short:
.887e	20 2b 88	jsr $882b			jsr FLitShort		; compile load value
.8881	20 48 cd	jsr $cd48			jsr Jmp_Comma_YA	; compile JMP
.8884	4c d5 bb	jmp $bbd5			jmp adjust_z
=30					CL	.var *-XtPtr1
=$8887					en = *	; remember here
>8867	1e					.byte CL	;wh_CodeLength
.8887					FConstantRun:
.8887	68		pla				pla			; tmp2= pop RTS addr
.8888	85 16		sta $16				sta tmp2+0
.888a	68		pla				pla
.888b	85 17		sta $17				sta tmp2+1
.888d	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888f	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
.8892					FLitYA:
.8892	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8895	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8897	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8899	a9 00		lda #$00			lda #0
.889b	95 61		sta $61,x			sta FSMant1,x
.889d	95 6b		sta $6b,x			sta FSMant2,x
.889f	95 75		sta $75,x			sta FSMant3,x
.88a1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88a3	60		rts				rts
>88a4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=34855					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a8	10					.byte WordFlags	;wh_Flags
>88a9	03					.byte 3	;wh_CodeLength
>88aa	42					  .byte LinkDisplacement
=$88ab					XtPtr1 ::= *
=34855					WordListLink ::= Nt0 ; remember the nt of this word for later
.88ab	a9 00		lda #$00	F0:		lda #0
.88ad	a0 80		ldy #$80			ldy #$80
.88af	d0 e1		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88b1					en = *	; remember here
>88a9	06					.byte CL	;wh_CodeLength
>88b1	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=34871					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b7	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b8	10					.byte WordFlags	;wh_Flags
>88b9	03					.byte 3	;wh_CodeLength
>88ba	10					  .byte LinkDisplacement
=$88bb					XtPtr1 ::= *
=34871					WordListLink ::= Nt0 ; remember the nt of this word for later
.88bb	a9 7d		lda #$7d	F1000:		lda #$7d
.88bd	a0 0a		ldy #$0a			ldy #10
.88bf	d0 d1		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88c1					en = *	; remember here
>88b9	06					.byte CL	;wh_CodeLength
>88c1	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=34885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c5	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c6	10					.byte WordFlags	;wh_Flags
>88c7	03					.byte 3	;wh_CodeLength
>88c8	0e					  .byte LinkDisplacement
=$88c9					XtPtr1 ::= *
=34885					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c9	a9 50		lda #$50	F10:		lda #$50
.88cb	a0 04		ldy #$04			ldy #4
.88cd	d0 c3		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88cf					en = *	; remember here
>88c7	06					.byte CL	;wh_CodeLength
>88cf	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=34898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88d2	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88d3	10					.byte WordFlags	;wh_Flags
>88d4	03					.byte 3	;wh_CodeLength
>88d5	0d					  .byte LinkDisplacement
=$88d6					XtPtr1 ::= *
=34898					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d6	a9 40		lda #$40	F2:		lda #$40
.88d8	a0 02		ldy #$02			ldy #2
.88da	d0 b6		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88dc					en = *	; remember here
>88d4	06					.byte CL	;wh_CodeLength
>88dc	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=34911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88df	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e0	10					.byte WordFlags	;wh_Flags
>88e1	03					.byte 3	;wh_CodeLength
>88e2	0d					  .byte LinkDisplacement
=$88e3					XtPtr1 ::= *
=34911					WordListLink ::= Nt0 ; remember the nt of this word for later
.88e3	a9 40		lda #$40	F1:		lda #$40
.88e5	a0 01		ldy #$01			ldy #1
.88e7	d0 a9		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88e9					en = *	; remember here
>88e1	06					.byte CL	;wh_CodeLength
>88e9	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=34924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88ec	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ed	10					.byte WordFlags	;wh_Flags
>88ee	03					.byte 3	;wh_CodeLength
>88ef	0d					  .byte LinkDisplacement
=$88f0					XtPtr1 ::= *
=34924					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f0	20 87 88	jsr $8887	F10th:		jsr FConstantRun
>88f3	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$88f8					en = *	; remember here
>88ee	08					.byte CL	;wh_CodeLength
>88f8	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=34938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88fa	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88fb	10					.byte WordFlags	;wh_Flags
>88fc	03					.byte 3	;wh_CodeLength
>88fd	0e					  .byte LinkDisplacement
=$88fe					XtPtr1 ::= *
=34938					WordListLink ::= Nt0 ; remember the nt of this word for later
.88fe	20 87 88	jsr $8887	FPi:		jsr FConstantRun
>8901	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8905	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8906					en = *	; remember here
>88fc	08					.byte CL	;wh_CodeLength
>8906	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=34954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>890a	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>890b	10					.byte WordFlags	;wh_Flags
>890c	03					.byte 3	;wh_CodeLength
>890d	10					  .byte LinkDisplacement
=$890e					XtPtr1 ::= *
=34954					WordListLink ::= Nt0 ; remember the nt of this word for later
.890e	20 87 88	jsr $8887	FPiH:		jsr FConstantRun
>8911	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8915	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8916					en = *	; remember here
>890c	08					.byte CL	;wh_CodeLength
>8916	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=34970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>891a	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>891b	10					.byte WordFlags	;wh_Flags
>891c	03					.byte 3	;wh_CodeLength
>891d	10					  .byte LinkDisplacement
=$891e					XtPtr1 ::= *
=34970					WordListLink ::= Nt0 ; remember the nt of this word for later
.891e	20 87 88	jsr $8887	FPiQ:		jsr FConstantRun
>8921	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8925	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8926					en = *	; remember here
>891c	08					.byte CL	;wh_CodeLength
>8926	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=34985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8929	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>892a	10					.byte WordFlags	;wh_Flags
>892b	03					.byte 3	;wh_CodeLength
>892c	0f					  .byte LinkDisplacement
=$892d					XtPtr1 ::= *
=34985					WordListLink ::= Nt0 ; remember the nt of this word for later
.892d	20 87 88	jsr $8887	F2Pi:		jsr FConstantRun
>8930	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8934	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8935					en = *	; remember here
>892b	08					.byte CL	;wh_CodeLength
>8935	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=35000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8938	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8939	10					.byte WordFlags	;wh_Flags
>893a	03					.byte 3	;wh_CodeLength
>893b	0f					  .byte LinkDisplacement
=$893c					XtPtr1 ::= *
=35000					WordListLink ::= Nt0 ; remember the nt of this word for later
.893c	20 87 88	jsr $8887	FE:		jsr FConstantRun
>893f	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8943	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8944					en = *	; remember here
>893a	08					.byte CL	;wh_CodeLength
>8944	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=35018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>894a	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>894b	18					.byte WordFlags	;wh_Flags
>894c	03					.byte 3	;wh_CodeLength
>894d	12					  .byte LinkDisplacement
=$894e					XtPtr1 ::= *
=35018					WordListLink ::= Nt0 ; remember the nt of this word for later
.894e	20 0a c1	jsr $c10a	FValue:		jsr Header_Comma	; compile word header
.8951	a9 5e		lda #$5e			lda #<FValue_runtime	; compile JSR FValue_runtime
.8953	a0 89		ldy #$89			ldy #>FValue_runtime
.8955	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.8958	20 d5 bb	jsr $bbd5			jsr adjust_z		; fix word length
.895b	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CL	.var *-XtPtr1
=$895e					en = *	; remember here
>894c	10					.byte CL	;wh_CodeLength
.895e					FValue_runtime:
.895e	4c 87 88	jmp $8887			jmp FConstantRun
>8961	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=35047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8967	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8968	10					.byte WordFlags	;wh_Flags
>8969	03					.byte 3	;wh_CodeLength
>896a	1d					  .byte LinkDisplacement
=$896b					XtPtr1 ::= *
=35047					WordListLink ::= Nt0 ; remember the nt of this word for later
.896b	20 e0 b3	jsr $b3e0	FScale:		jsr PopA		; pop n
.896e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8970	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8972	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8974	f0 07		beq $897d			beq _8
.8976	18		clc				clc
.8977	75 4d		adc $4d,x			adc FSExp,x
.8979	95 4d		sta $4d,x			sta FSExp,x
.897b	70 03		bvs $8980			bvs _overflow		; overflow or underflow?
.897d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897f	60		rts				rts
.8980					_overflow:
.8980	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8982	20 5b b4	jsr $b45b			jsr Throw_FpOutOfRange
=26					CL	.var *-XtPtr1
=$8985					en = *	; remember here
>8969	1a					.byte CL	;wh_CodeLength
>8985	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=35080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8988	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8989	10					.byte WordFlags	;wh_Flags
>898a	03					.byte 3	;wh_CodeLength
>898b	21					  .byte LinkDisplacement
=$898c					XtPtr1 ::= *
=35080					WordListLink ::= Nt0 ; remember the nt of this word for later
.898c	a9 01		lda #$01	F2Star:		lda #1
.898e	d0 de		bne $896e			bne FScaleA
=4					CL	.var *-XtPtr1
=$8990					en = *	; remember here
>898a	04					.byte CL	;wh_CodeLength
>8990	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=35091					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8993	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>8994	10					.byte WordFlags	;wh_Flags
>8995	03					.byte 3	;wh_CodeLength
>8996	0b					  .byte LinkDisplacement
=$8997					XtPtr1 ::= *
=35091					WordListLink ::= Nt0 ; remember the nt of this word for later
.8997	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8999	d0 d3		bne $896e			bne FScaleA
=4					CL	.var *-XtPtr1
=$899b					en = *	; remember here
>8995	04					.byte CL	;wh_CodeLength
>899b	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=35104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>89a0	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>89a1	10					.byte WordFlags	;wh_Flags
>89a2	03					.byte 3	;wh_CodeLength
>89a3	0d					  .byte LinkDisplacement
=$89a4					XtPtr1 ::= *
=35104					WordListLink ::= Nt0 ; remember the nt of this word for later
.89a4	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a6	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a9	10 19		bpl $89c4			bpl _a
.89ab	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89ae	10 14		bpl $89c4			bpl _a
.89b0	a9 80		lda #$80			lda #$80		; return -1
.89b2	99 57 00	sta $0057,y			sta FSMant0,y
.89b5	a9 00		lda #$00			lda #0
.89b7	99 4d 00	sta $004d,y			sta FSExp,y
.89ba	99 61 00	sta $0061,y			sta FSMant1,y
.89bd	99 6b 00	sta $006b,y			sta FSMant2,y
.89c0	99 75 00	sta $0075,y			sta FSMant3,y
.89c3	60		rts				rts
.89c4	a9 1f		lda #$1f	_a:		lda #31
.89c6	20 cc 89	jsr $89cc			jsr FShiftA
.89c9	4c 8f 8a	jmp $8a8f			jmp FNormX
=40					CL	.var *-XtPtr1
=$89cc					en = *	; remember here
>89a2	28					.byte CL	;wh_CodeLength
.89cc	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89ce	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89d0	a8		tay		FShiftAX:	tay			; save desired alignment
.89d1	38		sec				sec			; calc bit shift count
.89d2	f5 4d		sbc $4d,x			sbc FSExp,x
.89d4	f0 2e		beq $8a04			beq _leave
.89d6	70 1e		bvs $89f6			bvs _overflow
.89d8	30 2a		bmi $8a04			bmi _leave
.89da	c9 20		cmp #$20			cmp #32
.89dc	b0 1a		bcs $89f8			bcs _zero
.89de	94 4d		sty $4d,x			sty FSExp,x
.89e0	a8		tay				tay
.89e1	b5 57		lda $57,x			lda FSMant0,x
.89e3	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e5	6a		ror a				ror a
.89e6	76 61		ror $61,x			ror FSMant1,x
.89e8	76 6b		ror $6b,x			ror FSMant2,x
.89ea	76 75		ror $75,x			ror FSMant3,x
.89ec	88		dey				dey
.89ed	d0 f4		bne $89e3			bne _12
.89ef	95 57		sta $57,x			sta FSMant0,x
.89f1	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89f3	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f5	60		rts				rts
.89f6	10 0c		bpl $8a04	_overflow:	bpl _leave
.89f8	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89fa	a9 00		lda #$00			lda #0
.89fc	95 57		sta $57,x			sta FSMant0,x
.89fe	95 61		sta $61,x			sta FSMant1,x
.8a00	95 6b		sta $6b,x			sta FSMant2,x
.8a02	95 75		sta $75,x			sta FSMant3,x
.8a04	18		clc		_leave:		clc
.8a05	90 ea		bcc $89f1			bcc _30
>8a07	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=35213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a0d	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a0e	10					.byte WordFlags	;wh_Flags
>8a0f	03					.byte 3	;wh_CodeLength
>8a10	6d					  .byte LinkDisplacement
=$8a11					XtPtr1 ::= *
=35213					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a11	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a13	b9 57 00	lda $0057,y			lda FSMant0,y
.8a16	10 8c		bpl $89a4			bpl Floor
.8a18	20 8a 8b	jsr $8b8a			jsr FNegate
.8a1b	20 a4 89	jsr $89a4			jsr Floor
.8a1e	4c 8a 8b	jmp $8b8a			jmp FNegate
>8a21	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=35239					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a27	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a28	10					.byte WordFlags	;wh_Flags
>8a29	03					.byte 3	;wh_CodeLength
>8a2a	1a					  .byte LinkDisplacement
=$8a2b					XtPtr1 ::= *
=35239					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a2b	a9 1f		lda #$1f	FRound:		lda #31
.8a2d	20 cc 89	jsr $89cc			jsr FShiftA
.8a30	90 05		bcc $8a37			bcc _15
.8a32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a34	4c 49 8b	jmp $8b49			jmp F1Plus
.8a37	4c 8f 8a	jmp $8a8f	_15:		jmp FNormX
=15					CL	.var *-XtPtr1
=$8a3a					en = *	; remember here
>8a29	0f					.byte CL	;wh_CodeLength
>8a3a	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=35265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a41	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a42	10					.byte WordFlags	;wh_Flags
>8a43	03					.byte 3	;wh_CodeLength
>8a44	1a					  .byte LinkDisplacement
=$8a45					XtPtr1 ::= *
=35265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a45	20 4d 85	jsr $854d	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a48	20 a4 89	jsr $89a4			jsr Floor	; ( r1 rint )
.8a4b	20 09 86	jsr $8609			jsr FTuck	; ( rint r1 rint )
.8a4e	20 55 8b	jsr $8b55			jsr FMinus	; ( rint rfrac )
.8a51	4c d1 85	jmp $85d1			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-XtPtr1
=$8a54					en = *	; remember here
>8a43	0f					.byte CL	;wh_CodeLength
>8a54	46 4d 41 6c 69 67 6e 58		L1:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=35292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a5c	08					.byte (("FMAlignX"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a5d	10					.byte WordFlags	;wh_Flags
>8a5e	03					.byte 3	;wh_CodeLength
>8a5f	1b					  .byte LinkDisplacement
=$8a60					XtPtr1 ::= *
=35292					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a60	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a62	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a64	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a66	b0 19		bcs $8a81			bcs Throw_FPStack_3
.8a68	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a6a	38		sec				sec
.8a6b	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a6d	30 03		bmi $8a72			bmi _1		; r1 smaller?
.8a6f	d0 08		bne $8a79			bne _2		; r2 smaller?
.8a71	60		rts				rts
.8a72					_1:
.8a72	70 07		bvs $8a7b			bvs _2b		; was this a big positive #?
.8a74	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a76	4c d0 89	jmp $89d0			jmp FShiftAX
.8a79					_2:
.8a79	70 f7		bvs $8a72			bvs _1		; was this a big negative #?
.8a7b	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a7d	e8		inx				inx
.8a7e	4c d0 89	jmp $89d0			jmp FShiftAX
=33					CL	.var *-XtPtr1
=$8a81					en = *	; remember here
>8a5e	21					.byte CL	;wh_CodeLength
.8a81	20 51 b4	jsr $b451	Throw_FPStack_3: jsr Throw_FPStack
>8a84	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=35337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a89	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a8a	10					.byte WordFlags	;wh_Flags
>8a8b	03					.byte 3	;wh_CodeLength
>8a8c	2d					  .byte LinkDisplacement
=$8a8d					XtPtr1 ::= *
=35337					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a8d	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8f	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a91	b4 4d		ldy $4d,x			ldy FSExp,x
.8a93	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a95	30 2d		bmi $8ac4			bmi _Neg
.8a97	d0 0f		bne $8aa8			bne _Pos2		; do byte shift
.8a99	20 f7 8a	jsr $8af7			jsr _ShiftB
.8a9c	d0 0a		bne $8aa8			bne _Pos2
.8a9e	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa1	d0 05		bne $8aa8			bne _Pos2
.8aa3	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa6	f0 43		beq $8aeb			beq _zero		; no significant bits left?
.8aa8	18		clc		_Pos2:		clc
.8aa9	30 0a		bmi $8ab5			bmi _RShft
.8aab	88		dey		_Pos3:		dey			; do bit shift
.8aac	16 75		asl $75,x			asl FSMant3,x
.8aae	36 6b		rol $6b,x			rol FSMant2,x
.8ab0	36 61		rol $61,x			rol FSMant1,x
.8ab2	2a		rol a				rol a
.8ab3	10 f6		bpl $8aab			bpl _Pos3
.8ab5					_RShft:
.8ab5	c8		iny				iny
.8ab6	6a		ror a				ror a
.8ab7	76 61		ror $61,x			ror FSMant1,x
.8ab9	76 6b		ror $6b,x			ror FSMant2,x
.8abb	76 75		ror $75,x			ror FSMant3,x
.8abd					_28:
.8abd	95 57		sta $57,x			sta FSMant0,x
.8abf	94 4d		sty $4d,x			sty FSExp,x
.8ac1	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ac3	60		rts				rts
.8ac4					_Neg:
.8ac4	c9 ff		cmp #$ff			cmp #$ff
.8ac6	d0 11		bne $8ad9			bne _Neg2	; do byte shift
.8ac8	20 f7 8a	jsr $8af7			jsr _ShiftB
.8acb	c9 ff		cmp #$ff			cmp #$ff
.8acd	d0 0a		bne $8ad9			bne _Neg2
.8acf	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad2	c9 ff		cmp #$ff			cmp #$ff
.8ad4	d0 03		bne $8ad9			bne _Neg2
.8ad6	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad9	c9 00		cmp #$00	_Neg2:		cmp #0
.8adb	10 d8		bpl $8ab5			bpl _RShft
.8add	88		dey		_Neg3:		dey
.8ade	16 75		asl $75,x			asl FSMant3,x
.8ae0	36 6b		rol $6b,x			rol FSMant2,x
.8ae2	36 61		rol $61,x			rol FSMant1,x
.8ae4	2a		rol a				rol a
.8ae5	30 f6		bmi $8add			bmi _Neg3
.8ae7	10 cc		bpl $8ab5			bpl _RShft
.8ae9	68		pla		_Zerop:		pla
.8aea	68		pla				pla		; pop rts addr from _ShiftB
.8aeb	a9 00		lda #$00	_zero:		lda #0
.8aed	95 75		sta $75,x			sta FSMant3,x
.8aef	95 6b		sta $6b,x			sta FSMant2,x
.8af1	95 61		sta $61,x			sta FSMant1,x
.8af3	a0 80		ldy #$80			ldy #$80
.8af5	d0 c6		bne $8abd			bne _28
.8af7					_ShiftB:
.8af7	98		tya				tya		; exponent -= 8
.8af8	38		sec				sec
.8af9	e9 08		sbc #$08			sbc #8
.8afb	a8		tay				tay
.8afc	70 eb		bvs $8ae9			bvs _zerop	;is this useful? do we need more of them?
.8afe	b5 61		lda $61,x			lda FSMant1,x
.8b00	48		pha				pha
.8b01	b5 6b		lda $6b,x			lda FSMant2,x
.8b03	95 61		sta $61,x			sta FSMant1,x
.8b05	b5 75		lda $75,x			lda FSMant3,x
.8b07	95 6b		sta $6b,x			sta FSMant2,x
.8b09	a9 00		lda #$00			lda #0
.8b0b	95 75		sta $75,x			sta FSMant3,x
.8b0d	68		pla				pla
.8b0e	60		rts				rts
=130					CL	.var *-XtPtr1
=$8b0f					en = *	; remember here
>8a8b	82					.byte CL	;wh_CodeLength
>8b0f	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=35473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b11	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b12	10					.byte WordFlags	;wh_Flags
>8b13	03					.byte 3	;wh_CodeLength
>8b14	88					  .byte LinkDisplacement
=$8b15					XtPtr1 ::= *
=35473					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b15	20 60 8a	jsr $8a60	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b18	18		clc				clc		; add mantissas
.8b19	b5 76		lda $76,x			lda FSMant3+1,x
.8b1b	75 75		adc $75,x			adc FSMant3+0,x
.8b1d	95 76		sta $76,x			sta FSMant3+1,x
.8b1f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b21	75 6b		adc $6b,x			adc FSMant2+0,x
.8b23	95 6c		sta $6c,x			sta FSMant2+1,x
.8b25	b5 62		lda $62,x			lda FSMant1+1,x
.8b27	75 61		adc $61,x			adc FSMant1+0,x
.8b29	95 62		sta $62,x			sta FSMant1+1,x
.8b2b	b5 58		lda $58,x			lda FSMant0+1,x
.8b2d	75 57		adc $57,x			adc FSMant0+0,x
.8b2f					FPlusFin:
.8b2f	e8		inx				inx		; FDrop r2
.8b30	86 4c		stx $4c				stx FIndex
.8b32	50 09		bvc $8b3d	FPlusFin3:	bvc _19		; if overflow
.8b34	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b35	76 61		ror $61,x			ror FSMant1,x
.8b37	76 6b		ror $6b,x			ror FSMant2,x
.8b39	76 75		ror $75,x			ror FSMant3,x
.8b3b	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b3d					_19:
.8b3d	95 57		sta $57,x			sta FSMant0,x
.8b3f	4c 8f 8a	jmp $8a8f			jmp FNormX	; normalize, return
=45					CL	.var *-XtPtr1
=$8b42					en = *	; remember here
>8b13	2d					.byte CL	;wh_CodeLength
>8b42	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=35525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b45	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b46	10					.byte WordFlags	;wh_Flags
>8b47	03					.byte 3	;wh_CodeLength
>8b48	34					  .byte LinkDisplacement
=$8b49					XtPtr1 ::= *
=35525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b49	20 e3 88	jsr $88e3	F1Plus:		jsr F1
.8b4c	4c 15 8b	jmp $8b15			jmp FPlus
=6					CL	.var *-XtPtr1
=$8b4f					en = *	; remember here
>8b47	06					.byte CL	;wh_CodeLength
>8b4f	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=35537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b51	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b52	10					.byte WordFlags	;wh_Flags
>8b53	03					.byte 3	;wh_CodeLength
>8b54	0c					  .byte LinkDisplacement
=$8b55					XtPtr1 ::= *
=35537					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b55	20 60 8a	jsr $8a60	FMinus:		jsr FMAlignX	; align mantissas
.8b58	38		sec				sec		; subtract mantissas
.8b59	b5 76		lda $76,x			lda FSMant3+1,x
.8b5b	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b5d	95 76		sta $76,x			sta FSMant3+1,x
.8b5f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b61	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b63	95 6c		sta $6c,x			sta FSMant2+1,x
.8b65	b5 62		lda $62,x			lda FSMant1+1,x
.8b67	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b69	95 62		sta $62,x			sta FSMant1+1,x
.8b6b	b5 58		lda $58,x			lda FSMant0+1,x
.8b6d	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6f	4c 2f 8b	jmp $8b2f			jmp FPlusFin
=29					CL	.var *-XtPtr1
=$8b72					en = *	; remember here
>8b53	1d					.byte CL	;wh_CodeLength
>8b72	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=35573					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b75	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b76	10					.byte WordFlags	;wh_Flags
>8b77	03					.byte 3	;wh_CodeLength
>8b78	24					  .byte LinkDisplacement
=$8b79					XtPtr1 ::= *
=35573					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b79	20 e3 88	jsr $88e3	F1Minus:	jsr F1
.8b7c	4c 55 8b	jmp $8b55			jmp FMinus
=6					CL	.var *-XtPtr1
=$8b7f					en = *	; remember here
>8b77	06					.byte CL	;wh_CodeLength
>8b7f	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=35590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b86	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b87	10					.byte WordFlags	;wh_Flags
>8b88	03					.byte 3	;wh_CodeLength
>8b89	11					  .byte LinkDisplacement
=$8b8a					XtPtr1 ::= *
=35590					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b8a	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b8c	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b8e	38		sec				sec		; mantissa = 0 - mantissa
.8b8f	a9 00		lda #$00			lda #0
.8b91	f5 75		sbc $75,x			sbc FSMant3,x
.8b93	95 75		sta $75,x			sta FSMant3,x
.8b95	a9 00		lda #$00			lda #0
.8b97	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b99	95 6b		sta $6b,x			sta FSMant2,x
.8b9b	a9 00		lda #$00			lda #0
.8b9d	f5 61		sbc $61,x			sbc FSMant1,x
.8b9f	95 61		sta $61,x			sta FSMant1,x
.8ba1	a9 00		lda #$00			lda #0
.8ba3	f5 57		sbc $57,x			sbc FSMant0,x
.8ba5	4c 32 8b	jmp $8b32			jmp FPlusFin3	; finish up, return
=30					CL	.var *-XtPtr1
=$8ba8					en = *	; remember here
>8b88	1e					.byte CL	;wh_CodeLength
>8ba8	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=35628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bac	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8bad	10					.byte WordFlags	;wh_Flags
>8bae	03					.byte 3	;wh_CodeLength
>8baf	26					  .byte LinkDisplacement
=$8bb0					XtPtr1 ::= *
=35628					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bb0	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bb2	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb5	30 d3		bmi $8b8a			bmi FNegate
.8bb7	60		rts				rts
=8					CL	.var *-XtPtr1
=$8bb8					en = *	; remember here
>8bae	08					.byte CL	;wh_CodeLength
.8bb8	4c 51 b4	jmp $b451	Throw_FPStack_4: jmp Throw_FPStack
.8bbb	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bbd	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bbf	b0 f7		bcs $8bb8			bcs Throw_FPStack_4
.8bc1	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bc4	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc7	08		php				php
.8bc8	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bcb	10 07		bpl $8bd4			bpl +
.8bcd	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bcf	20 8a 8b	jsr $8b8a			jsr FNegate		;   negate NOS
.8bd2	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bd4					+
.8bd4	20 b0 8b	jsr $8bb0			jsr FAbs		; abs TOS
.8bd7	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd9	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bdb	28		plp				plp			; restore sign flag
.8bdc	60		rts				rts
>8bdd	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=35679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bdf	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8be0	10					.byte WordFlags	;wh_Flags
>8be1	03					.byte 3	;wh_CodeLength
>8be2	33					  .byte LinkDisplacement
=$8be3					XtPtr1 ::= *
=35679					WordListLink ::= Nt0 ; remember the nt of this word for later
.8be3					FStar:
.8be3	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive,
.8be6	08		php				php			;   save r3 sign
.8be7	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be9	38		sec				sec
.8bea	75 4e		adc $4e,x			adc FSExp+1,x
.8bec	95 4e		sta $4e,x			sta FSExp+1,x
.8bee	50 12		bvc $8c02			bvc _49			; IfVs,
.8bf0	b0 06		bcs $8bf8			bcs _zero		;   underflow?
.8bf2	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bf4	28		plp				plp			; RDrop sign flag
.8bf5	20 5b b4	jsr $b45b			jsr Throw_FpOutOfRange
.8bf8	e8		inx		_zero:		inx			; F2Drop
.8bf9	e8		inx				inx
.8bfa	86 4c		stx $4c				stx FIndex
.8bfc	28		plp				plp			; rdrop saved result sign
.8bfd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bff	4c ab 88	jmp $88ab			jmp F0			; return zero
.8c02					_49:
.8c02	a9 00		lda #$00			lda #0			; tmp32= 0
.8c04	85 16		sta $16				sta tmp2+0
.8c06	85 17		sta $17				sta tmp2+1
.8c08	85 18		sta $18				sta tmp3+0
.8c0a	85 19		sta $19				sta tmp3+1
.8c0c	b5 76		lda $76,x			lda FSMant3+1,x
.8c0e	20 3d 8c	jsr $8c3d			jsr _Byte		; do bytes of r1 mantissa
.8c11	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c13	20 3d 8c	jsr $8c3d			jsr _Byte
.8c16	b5 62		lda $62,x			lda FSMant1+1,x
.8c18	20 3d 8c	jsr $8c3d			jsr _Byte
.8c1b	b5 58		lda $58,x			lda FSMant0+1,x
.8c1d	20 3d 8c	jsr $8c3d			jsr _Byte
.8c20	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c22	95 76		sta $76,x			sta FSMant3+1,x
.8c24	a5 17		lda $17				lda tmp2+1
.8c26	95 6c		sta $6c,x			sta FSMant2+1,x
.8c28	a5 18		lda $18				lda tmp3+0
.8c2a	95 62		sta $62,x			sta FSMant1+1,x
.8c2c	a5 19		lda $19				lda tmp3+1
.8c2e	95 58		sta $58,x			sta FSMant0+1,x
.8c30	e6 4c		inc $4c				inc FIndex		; FDrop
.8c32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c34	28		plp				plp			; fix result sign
.8c35	10 03		bpl $8c3a			bpl +
.8c37	4c 8a 8b	jmp $8b8a			jmp FNegate
.8c3a					+
.8c3a	4c 8d 8a	jmp $8a8d			jmp FNorm
.8c3d					_Byte:
.8c3d	49 ff		eor #$ff			eor #$ff
.8c3f	85 15		sta $15				sta tmp1+1
.8c41	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c43	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c45	b0 18		bcs $8c5f			bcs _b3
.8c47	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c49	75 75		adc $75,x			adc FSMant3+0,x
.8c4b	85 16		sta $16				sta tmp2+0
.8c4d	a5 17		lda $17				lda tmp2+1
.8c4f	75 6b		adc $6b,x			adc FSMant2+0,x
.8c51	85 17		sta $17				sta tmp2+1
.8c53	a5 18		lda $18				lda tmp3+0
.8c55	75 61		adc $61,x			adc FSMant1+0,x
.8c57	85 18		sta $18				sta tmp3+0
.8c59	a5 19		lda $19				lda tmp3+1
.8c5b	75 57		adc $57,x			adc FSMant0+0,x
.8c5d	85 19		sta $19				sta tmp3+1
.8c5f	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c61	66 18		ror $18				ror tmp3+0
.8c63	66 17		ror $17				ror tmp2+1
.8c65	66 16		ror $16				ror tmp2+0
.8c67	88		dey				dey			;  next bit
.8c68	d0 d9		bne $8c43			bne _b1
.8c6a	60		rts				rts
=136					CL	.var *-XtPtr1
=$8c6b					en = *	; remember here
>8be1	88					.byte CL	;wh_CodeLength
>8c6b	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=35823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6f	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c70	10					.byte WordFlags	;wh_Flags
>8c71	03					.byte 3	;wh_CodeLength
>8c72	90					  .byte LinkDisplacement
=$8c73					XtPtr1 ::= *
=35823					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c73	20 4d 85	jsr $854d	FSqr:		jsr FDup
.8c76	4c e3 8b	jmp $8be3			jmp FStar
=6					CL	.var *-XtPtr1
=$8c79					en = *	; remember here
>8c71	06					.byte CL	;wh_CodeLength
>8c79	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=35837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c7d	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c7e	10					.byte WordFlags	;wh_Flags
>8c7f	03					.byte 3	;wh_CodeLength
>8c80	0e					  .byte LinkDisplacement
=$8c81					XtPtr1 ::= *
=35837					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c81	20 4d 85	jsr $854d	F10Star:	jsr FDup
.8c84	a4 4c		ldy $4c				ldy FIndex
.8c86	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c89	18		clc				clc
.8c8a	69 01		adc #$01			adc #1
.8c8c	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8f	18		clc				clc
.8c90	69 02		adc #$02			adc #2
.8c92	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c95	4c 15 8b	jmp $8b15			jmp FPlus
=23					CL	.var *-XtPtr1
=$8c98					en = *	; remember here
>8c7f	17					.byte CL	;wh_CodeLength
>8c98	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=35866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c9a	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c9b	10					.byte WordFlags	;wh_Flags
>8c9c	03					.byte 3	;wh_CodeLength
>8c9d	1d					  .byte LinkDisplacement
=$8c9e					XtPtr1 ::= *
=35866					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c9e	20 bb 8b	jsr $8bbb	FSlash:		jsr FPos		; make r1 & r2 positive
.8ca1	08		php				php			;   save result sign
.8ca2	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8ca4	18		clc				clc
.8ca5	69 01		adc #$01			adc #1
.8ca7	38		sec				sec
.8ca8	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8caa	95 4e		sta $4e,x			sta FSExp+1,x
.8cac	50 12		bvc $8cc0			bvc _49			;  IfVs
.8cae	b0 06		bcs $8cb6			bcs _Zero		; underflow?
.8cb0	28		plp				plp			; drop saved result sign
.8cb1	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cb3	20 5b b4	jsr $b45b			jsr Throw_FpOutOfRange	; overflow
.8cb6	e8		inx		_Zero:		inx			; F2Drop
.8cb7	e8		inx				inx
.8cb8	86 4c		stx $4c				stx FIndex
.8cba	28		plp				plp			; drop saved result sign
.8cbb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cbd	4c ab 88	jmp $88ab			jmp F0			; return 0
.8cc0					_49:
.8cc0	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cc2	85 16		sta $16				sta tmp2+0
.8cc4	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc6	85 17		sta $17				sta tmp2+1
.8cc8	b5 62		lda $62,x			lda FSMant1+1,x
.8cca	85 18		sta $18				sta tmp3+0
.8ccc	b5 58		lda $58,x			lda FSMant0+1,x
.8cce	85 19		sta $19				sta tmp3+1
.8cd0	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd3	95 58		sta $58,x			sta FSMant0+1,x
.8cd5	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd8	95 62		sta $62,x			sta FSMant1+1,x
.8cda	20 f9 8c	jsr $8cf9			jsr _Byte
.8cdd	95 6c		sta $6c,x			sta FSMant2+1,x
.8cdf	20 f9 8c	jsr $8cf9			jsr _Byte
.8ce2	95 76		sta $76,x			sta FSMant3+1,x
.8ce4	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce6	76 62		ror $62,x			ror FSMant1+1,x
.8ce8	76 6c		ror $6c,x			ror FSMant2+1,x
.8cea	76 76		ror $76,x			ror FSMant3+1,x
.8cec	e6 4c		inc $4c				inc FIndex		; FDrop
.8cee	a6 14		ldx $14				ldx tmp1+0		; restore X
.8cf0	28		plp				plp			; fix sign
.8cf1	10 03		bpl $8cf6			bpl +
.8cf3	20 8a 8b	jsr $8b8a			jsr FNegate
.8cf6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
.8cf9					_Byte:
.8cf9	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cfb					_1:
.8cfb	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cfd	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cff	d0 10		bne $8d11			bne _4
.8d01	a5 18		lda $18				lda tmp3+0
.8d03	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d05	d0 0a		bne $8d11			bne _4
.8d07	a5 17		lda $17				lda tmp2+1
.8d09	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d0b	d0 04		bne $8d11			bne _4
.8d0d	a5 16		lda $16				lda tmp2+0
.8d0f	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d11	90 18		bcc $8d2b	_4:		bcc _2
.8d13	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d15	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d17	85 16		sta $16				sta tmp2+0
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d1d	85 17		sta $17				sta tmp2+1
.8d1f	a5 18		lda $18				lda tmp3+0
.8d21	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d23	85 18		sta $18				sta tmp3+0
.8d25	a5 19		lda $19				lda tmp3+1
.8d27	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d29	85 19		sta $19				sta tmp3+1
.8d2b	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d2d	06 16		asl $16				asl tmp2+0
.8d2f	26 17		rol $17				rol tmp2+1
.8d31	26 18		rol $18				rol tmp3+0
.8d33	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d35	88		dey				dey			;  next
.8d36	d0 c3		bne $8cfb			bne _1
.8d38	a5 15		lda $15				lda tmp1+1		; return bits
.8d3a	60		rts				rts
=157					CL	.var *-XtPtr1
=$8d3b					en = *	; remember here
>8c9c	9d					.byte CL	;wh_CodeLength
>8d3b	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=36030					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d3e	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3f	10					.byte WordFlags	;wh_Flags
>8d40	03					.byte 3	;wh_CodeLength
>8d41	a4					  .byte LinkDisplacement
=$8d42					XtPtr1 ::= *
=36030					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d42	20 e3 88	jsr $88e3	F1Slash:	jsr F1
.8d45	20 d1 85	jsr $85d1			jsr FSwap
.8d48	4c 9e 8c	jmp $8c9e			jmp FSlash
=9					CL	.var *-XtPtr1
=$8d4b					en = *	; remember here
>8d40	09					.byte CL	;wh_CodeLength
>8d4b	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=36045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d4d	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d4e	10					.byte WordFlags	;wh_Flags
>8d4f	03					.byte 3	;wh_CodeLength
>8d50	0f					  .byte LinkDisplacement
=$8d51					XtPtr1 ::= *
=36045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d51					EStar:
.8d51	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive
.8d54	08		php				php			;   remember result sign
.8d55	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d57	38		sec				sec
.8d58	75 4e		adc $4e,x			adc FSExp+1,x
.8d5a	95 4e		sta $4e,x			sta FSExp+1,x
.8d5c	70 15		bvs $8d73			bvs _ExpOvfl
.8d5e	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d60	48		pha				pha
.8d61	b5 62		lda $62,x			lda FSMant1+1,x
.8d63	a0 00		ldy #$00			ldy #0
.8d65	94 58		sty $58,x			sty FSMant0+1,x
.8d67	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d69	20 82 8d	jsr $8d82			jsr _Byte		; do FSMant1+1 byte
.8d6c	68		pla				pla
.8d6d	20 82 8d	jsr $8d82			jsr _Byte		; do FSMant0+1 byte
.8d70	4c 9f 8d	jmp $8d9f			jmp EFix3		; finish
.8d73					_ExpOvfl:
.8d73	b0 05		bcs $8d7a			bcs _Zero		;underflow?
.8d75	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d77	20 5b b4	jsr $b45b			jsr Throw_FpOutOfRange	;overflow
.8d7a	a9 00		lda #$00	_Zero:		lda #0
.8d7c	95 62		sta $62,x			sta FSMant1+1,x
.8d7e	95 58		sta $58,x			sta FSMant0+1,x
.8d80	f0 1d		beq $8d9f			beq EFix3
.8d82					_Byte:
.8d82	85 15		sta $15				sta tmp1+1
.8d84	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d86	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d88	90 0d		bcc $8d97			bcc _b5
.8d8a	18		clc				clc			;     r3 += r2
.8d8b	b5 61		lda $61,x			lda FSMant1+0,x
.8d8d	75 62		adc $62,x			adc FSMant1+1,x
.8d8f	95 62		sta $62,x			sta FSMant1+1,x
.8d91	b5 57		lda $57,x			lda FSMant0+0,x
.8d93	75 58		adc $58,x			adc FSMant0+1,x
.8d95	95 58		sta $58,x			sta FSMant0+1,x
.8d97					_b5:
.8d97	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8d99	76 62		ror $62,x			ror FSMant1+1,x
.8d9b	88		dey				dey			;  next bit
.8d9c	d0 e8		bne $8d86			bne _b1
.8d9e	60		rts				rts
=78					CL	.var *-XtPtr1
=$8d9f					en = *	; remember here
>8d4f	4e					.byte CL	;wh_CodeLength
.8d9f					EFix3:
.8d9f	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da1	95 6c		sta $6c,x			sta FSMant2+1,x
.8da3	95 76		sta $76,x			sta FSMant3+1,x
.8da5	e6 4c		inc $4c				inc FIndex		; FDrop
.8da7	a6 14		ldx $14				ldx tmp1+0		; restore X
.8da9	28		plp				plp			;fix result sign
.8daa	10 03		bpl $8daf			bpl +
.8dac	4c 8a 8b	jmp $8b8a			jmp FNegate
.8daf	4c 8d 8a	jmp $8a8d	+		jmp FNorm
>8db2	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=36150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8db6	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>8db7	10					.byte WordFlags	;wh_Flags
>8db8	03					.byte 3	;wh_CodeLength
>8db9	69					  .byte LinkDisplacement
=$8dba					XtPtr1 ::= *
=36150					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dba	20 4d 85	jsr $854d	ESqr:		jsr FDup
.8dbd	4c 51 8d	jmp $8d51			jmp EStar
=6					CL	.var *-XtPtr1
=$8dc0					en = *	; remember here
>8db8	06					.byte CL	;wh_CodeLength
>8dc0	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=36162					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc2	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dc3	10					.byte WordFlags	;wh_Flags
>8dc4	03					.byte 3	;wh_CodeLength
>8dc5	0c					  .byte LinkDisplacement
=$8dc6					XtPtr1 ::= *
=36162					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc6	20 bb 8b	jsr $8bbb	ESlash:		jsr FPos	; make r1 & r2 positive
.8dc9	08		php				php		; remember result sign
.8dca	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dcc	38		sec				sec
.8dcd	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dcf	70 17		bvs $8de8			bvs _ExpOvfl
.8dd1	18		clc				clc
.8dd2	69 01		adc #$01			adc #1
.8dd4	95 4e		sta $4e,x			sta FSExp+1,x
.8dd6	20 ee 8d	jsr $8dee			jsr _Byte		; gen quotient hi byte
.8dd9	48		pha				pha
.8dda	20 ee 8d	jsr $8dee			jsr _Byte		; gen quotient lo byte
.8ddd	95 62		sta $62,x			sta FSMant1+1,x
.8ddf	68		pla				pla
.8de0	4a		lsr a				lsr a
.8de1	95 58		sta $58,x			sta FSMant0+1,x
.8de3	76 62		ror $62,x			ror FSMant1+1,x
.8de5	4c 9f 8d	jmp $8d9f			jmp EFix3
.8de8					_ExpOvfl:
.8de8	28		plp				plp			; rdrop saved result sign
.8de9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8deb	20 5b b4	jsr $b45b			jsr Throw_FpOutOfRange	; overflow
.8dee					_Byte:
.8dee	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df0	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df2	d5 61		cmp $61,x			cmp FSMant1+0,x
.8df4	b5 58		lda $58,x			lda FSMant0+1,x
.8df6	f5 57		sbc $57,x			sbc FSMant0+0,x
.8df8	90 09		bcc $8e03			bcc _b5
.8dfa	95 58		sta $58,x			sta FSMant0+1,x
.8dfc	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8dfe	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e00	95 62		sta $62,x			sta FSMant1+1,x
.8e02	38		sec				sec
.8e03					_b5:
.8e03	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e05	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e07	36 58		rol $58,x			rol FSMant0+1,x
.8e09	88		dey				dey			;  next bit
.8e0a	d0 e4		bne $8df0			bne _b1
.8e0c	a5 15		lda $15				lda tmp1+1		; return bits
.8e0e	60		rts				rts
=73					CL	.var *-XtPtr1
=$8e0f					en = *	; remember here
>8dc4	49					.byte CL	;wh_CodeLength
>8e0f	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=36242					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e12	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e13	10					.byte WordFlags	;wh_Flags
>8e14	03					.byte 3	;wh_CodeLength
>8e15	50					  .byte LinkDisplacement
=$8e16					XtPtr1 ::= *
=36242					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e16	20 e3 88	jsr $88e3	E1Slash:	jsr F1
.8e19	20 d1 85	jsr $85d1			jsr FSwap
.8e1c	4c c6 8d	jmp $8dc6			jmp ESlash
=9					CL	.var *-XtPtr1
=$8e1f					en = *	; remember here
>8e14	09					.byte CL	;wh_CodeLength
>8e1f	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=36258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e22	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e23	10					.byte WordFlags	;wh_Flags
>8e24	03					.byte 3	;wh_CodeLength
>8e25	10					  .byte LinkDisplacement
=$8e26					XtPtr1 ::= *
=36258					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e26	20 fb b3	jsr $b3fb	SToF:		jsr PopYA		; pop n
.8e29	20 c2 84	jsr $84c2	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e2c	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e2e	95 61		sta $61,x			sta FSMant1,x
.8e30	a9 00		lda #$00			lda #0			; pad mantissa
.8e32	95 6b		sta $6b,x			sta FSMant2,x
.8e34	95 75		sta $75,x			sta FSMant3,x
.8e36	a9 0f		lda #$0f			lda #15			; set exponent
.8e38	95 4d		sta $4d,x			sta FSExp,x
.8e3a	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=23					CL	.var *-XtPtr1
=$8e3d					en = *	; remember here
>8e24	17					.byte CL	;wh_CodeLength
>8e3d	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=36288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e40	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e41	10					.byte WordFlags	;wh_Flags
>8e42	03					.byte 3	;wh_CodeLength
>8e43	1e					  .byte LinkDisplacement
=$8e44					XtPtr1 ::= *
=36288					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e44	20 c2 84	jsr $84c2	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e47	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e49	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e4b	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e4d	99 75 00	sta $0075,y			sta FSMant3,y
.8e50	b5 27		lda $27,x			lda DStack+3,x
.8e52	99 6b 00	sta $006b,y			sta FSMant2,y
.8e55	b5 24		lda $24,x			lda DStack+0,x
.8e57	99 61 00	sta $0061,y			sta FSMant1,y
.8e5a	b5 25		lda $25,x			lda DStack+1,x
.8e5c	99 57 00	sta $0057,y			sta FSMant0,y
.8e5f	a9 1f		lda #$1f			lda #31			; set exponent
.8e61	99 4d 00	sta $004d,y			sta FSExp,y
.8e64	20 45 c5	jsr $c545			jsr Two_Drop
.8e67	4c 8d 8a	jmp $8a8d			jmp FNorm		; normalize, return
=38					CL	.var *-XtPtr1
=$8e6a					en = *	; remember here
>8e42	26					.byte CL	;wh_CodeLength
>8e6a	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=36333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e6d	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e6e	10					.byte WordFlags	;wh_Flags
>8e6f	03					.byte 3	;wh_CodeLength
>8e70	2d					  .byte LinkDisplacement
=$8e71					XtPtr1 ::= *
=36333					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e71	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e73	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e76	08		php				php
.8e77	10 03		bpl $8e7c			bpl +
.8e79	20 8a 8b	jsr $8b8a			jsr FNegate
.8e7c					+
.8e7c	a9 0f		lda #$0f			lda #15
.8e7e	20 cc 89	jsr $89cc			jsr FShiftA
.8e81	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e83	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e85	b0 17		bcs $8e9e			bcs _overflow
.8e87	a4 4c		ldy $4c				ldy FIndex
.8e89	ca		dex				dex
.8e8a	ca		dex				dex
.8e8b	b9 57 00	lda $0057,y			lda FSMant0,y
.8e8e	95 25		sta $25,x			sta DStack+1,x
.8e90	b9 61 00	lda $0061,y			lda FSMant1,y
.8e93	95 24		sta $24,x			sta DStack+0,x
.8e95	e6 4c		inc $4c				inc FIndex		; FDrop
.8e97	28		plp				plp			; apply saved sign
.8e98	30 01		bmi $8e9b			bmi +
.8e9a	60		rts				rts
.8e9b	4c b9 c6	jmp $c6b9	+		jmp Negate
.8e9e	28		plp		_overflow:	plp			; RDrop saved sign
.8e9f	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea1	20 80 b4	jsr $b480			jsr ThrowA
=51					CL	.var *-XtPtr1
=$8ea4					en = *	; remember here
>8e6f	33					.byte CL	;wh_CodeLength
>8ea4	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=36391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ea7	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8ea8	10					.byte WordFlags	;wh_Flags
>8ea9	03					.byte 3	;wh_CodeLength
>8eaa	3a					  .byte LinkDisplacement
=$8eab					XtPtr1 ::= *
=36391					WordListLink ::= Nt0 ; remember the nt of this word for later
.8eab	a4 4c		ldy $4c		FToD:		ldy FIndex
.8ead	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb0	08		php				php
.8eb1	10 03		bpl $8eb6			bpl +
.8eb3	20 8a 8b	jsr $8b8a			jsr FNegate
.8eb6					+
.8eb6	a9 1f		lda #$1f			lda #31
.8eb8	20 cc 89	jsr $89cc			jsr FShiftA
.8ebb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebd	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ebf	b0 23		bcs $8ee4			bcs _overflow
.8ec1	a4 4c		ldy $4c				ldy FIndex
.8ec3	ca		dex				dex			; d= mantissa
.8ec4	ca		dex				dex
.8ec5	ca		dex				dex
.8ec6	ca		dex				dex
.8ec7	b9 57 00	lda $0057,y			lda FSMant0,y
.8eca	95 25		sta $25,x			sta DStack+1,x
.8ecc	b9 61 00	lda $0061,y			lda FSMant1,y
.8ecf	95 24		sta $24,x			sta DStack+0,x
.8ed1	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ed4	95 27		sta $27,x			sta DStack+3,x
.8ed6	b9 75 00	lda $0075,y			lda FSMant3,y
.8ed9	95 26		sta $26,x			sta DStack+2,x
.8edb	e6 4c		inc $4c				inc FIndex		; FDrop
.8edd	28		plp				plp			; apply saved sign
.8ede	30 01		bmi $8ee1			bmi +
.8ee0	60		rts				rts
.8ee1	4c e8 c6	jmp $c6e8	+		jmp DNegate
.8ee4	28		plp		_overflow:	plp			; RDrop sign
.8ee5	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ee7	20 80 b4	jsr $b480			jsr ThrowA
=63					CL	.var *-XtPtr1
=$8eea					en = *	; remember here
>8ea9	3f					.byte CL	;wh_CodeLength
>8eea	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=36462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8eee	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8eef	10					.byte WordFlags	;wh_Flags
>8ef0	03					.byte 3	;wh_CodeLength
>8ef1	47					  .byte LinkDisplacement
=$8ef2					XtPtr1 ::= *
=36462					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef2	20 fd 82	jsr $82fd	FRnd:		jsr Rand		; generate next RndState
.8ef5	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.8ef8	4a		lsr a				lsr a			;   make positive
.8ef9	95 57		sta $57,x			sta FSMant0,x
.8efb	94 61		sty $61,x			sty FSMant1,x
.8efd	ad 35 03	lda $0335			lda RndState+0
.8f00	95 6b		sta $6b,x			sta FSMant2,x
.8f02	ad 36 03	lda $0336			lda RndState+1
.8f05	95 75		sta $75,x			sta FSMant3,x
.8f07	a9 00		lda #$00			lda #0			; exponent=0
.8f09	95 4d		sta $4d,x			sta FSExp,x
.8f0b	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=28					CL	.var *-XtPtr1
=$8f0e					en = *	; remember here
>8ef0	1c					.byte CL	;wh_CodeLength
>8f0e	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=36499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f13	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f14	10					.byte WordFlags	;wh_Flags
>8f15	03					.byte 3	;wh_CodeLength
>8f16	25					  .byte LinkDisplacement
=$8f17					XtPtr1 ::= *
=36499					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f17	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f19	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f1c	d0 01		bne $8f1f			bne +
.8f1e	60		rts				rts			;   just return the zero
.8f1f					+
.8f1f	20 4d 85	jsr $854d			jsr FDup		; get trial value
.8f22	a4 4c		ldy $4c				ldy FIndex
.8f24	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f27	c9 80		cmp #$80			cmp #$80
.8f29	6a		ror a				ror a
.8f2a	99 4d 00	sta $004d,y			sta FSExp,y
.8f2d	a9 09		lda #$09			lda #9			; for 9 iterations
.8f2f	48		pha		_3:		pha
.8f30	20 c2 85	jsr $85c2			jsr F2Dup		;   calc new trial value
.8f33	20 9e 8c	jsr $8c9e			jsr FSlash
.8f36	20 15 8b	jsr $8b15			jsr FPlus
.8f39	20 97 89	jsr $8997			jsr F2Slash
.8f3c	68		pla				pla			;  next
.8f3d	38		sec				sec
.8f3e	e9 01		sbc #$01			sbc #1
.8f40	d0 ed		bne $8f2f			bne _3
.8f42	4c 28 85	jmp $8528			jmp FNip		; return trial value
=46					CL	.var *-XtPtr1
=$8f45					en = *	; remember here
>8f15	2e					.byte CL	;wh_CodeLength
>8f45	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f4d	6e
=36558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f4e	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f4f	10					.byte WordFlags	;wh_Flags
>8f50	03					.byte 3	;wh_CodeLength
>8f51	3b					  .byte LinkDisplacement
=$8f52					XtPtr1 ::= *
=36558					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f52	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f55	4c e7 b7	jmp $b7e7			jmp PushZA
=6					CL	.var *-XtPtr1
=$8f58					en = *	; remember here
>8f50	06					.byte CL	;wh_CodeLength
.8f58	60		rts				rts
>8f59	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f61	69 73 69 6f 6e
=36582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f66	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f67	10					.byte WordFlags	;wh_Flags
>8f68	03					.byte 3	;wh_CodeLength
>8f69	18					  .byte LinkDisplacement
=$8f6a					XtPtr1 ::= *
=36582					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f6a	20 e0 b3	jsr $b3e0			jsr PopA
.8f6d	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-XtPtr1
=$8f70					en = *	; remember here
>8f68	06					.byte CL	;wh_CodeLength
.8f70	60		rts				rts
>8f71	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=36597					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f75	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f76	10					.byte WordFlags	;wh_Flags
>8f77	03					.byte 3	;wh_CodeLength
>8f78	0f					  .byte LinkDisplacement
=$8f79					XtPtr1 ::= *
=36597					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f79	20 f6 8f	jsr $8ff6	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f7c	20 82 8f	jsr $8f82			jsr PFDotSub
.8f7f	4c 14 90	jmp $9014			jmp pfcen
.8f82					PFDotSub:
.8f82	20 52 8f	jsr $8f52			jsr Precision	;alloc & init work area
.8f85	20 fe b7	jsr $b7fe			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f88	20 d6 8f	jsr $8fd6			jsr FLt10		; scale down to <10, counting exponent
.8f8b					_c:
.8f8b	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f8d	d0 05		bne $8f94			bne _c2
.8f8f	a9 2e		lda #$2e			lda #'.'
.8f91	20 0b 90	jsr $900b			jsr pfch
.8f94	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f96	20 4d 85	jsr $854d			jsr FDup		;  do a digit
.8f99	20 71 8e	jsr $8e71			jsr FToS		; ( work n )
.8f9c	b5 24		lda $24,x			lda DStack+0,x
.8f9e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa0	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa2	f0 08		beq $8fac			beq _c7
.8fa4	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fa6	10 04		bpl $8fac			bpl +
.8fa8	e8		inx				inx			;    drop integer
.8fa9	e8		inx				inx
.8faa	d0 17		bne $8fc3			bne _d
.8fac					+
.8fac	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fae	09 30		ora #$30			ora #'0'
.8fb0	20 0b 90	jsr $900b			jsr pfch
.8fb3	20 26 8e	jsr $8e26			jsr SToF		; ( work )
.8fb6	20 55 8b	jsr $8b55			jsr FMinus
.8fb9	20 81 8c	jsr $8c81			jsr F10Star
.8fbc	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fbe	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc1	d0 c8		bne $8f8b			bne _c
.8fc3	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fc5	30 08		bmi $8fcf			bmi _d9
.8fc7	a9 30		lda #$30			lda #'0'
.8fc9	20 0b 90	jsr $900b			jsr pfch
.8fcc	4c c3 8f	jmp $8fc3			jmp _d
.8fcf					_d9:
.8fcf	e8		inx				inx			; drop work area
.8fd0	e8		inx				inx
.8fd1	e8		inx				inx
.8fd2	e8		inx				inx
.8fd3	e6 4c		inc $4c				inc FIndex		; FDrop
.8fd5	60		rts				rts
=93					CL	.var *-XtPtr1
=$8fd6					en = *	; remember here
>8f77	5d					.byte CL	;wh_CodeLength
.8fd6					FLt10:
.8fd6	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fd8	b9 4d 00	lda $004d,y			lda FSExp,y
.8fdb	30 18		bmi $8ff5			bmi _9			;   exponent negative?
.8fdd	c9 04		cmp #$04			cmp #4
.8fdf	90 14		bcc $8ff5			bcc _9			;   < 4 ?
.8fe1	d0 07		bne $8fea			bne _2			;   > 4 ?
.8fe3	b9 57 00	lda $0057,y			lda FSMant0,y
.8fe6	c9 50		cmp #$50			cmp #$50
.8fe8	90 0b		bcc $8ff5			bcc _9
.8fea	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8fec	20 c9 88	jsr $88c9			jsr F10			;   r /= 10
.8fef	20 9e 8c	jsr $8c9e			jsr FSlash
.8ff2	4c d6 8f	jmp $8fd6			jmp _1
.8ff5	60		rts		_9:		rts
.8ff6					pfcst:
.8ff6	a9 01		lda #$01			lda #1
.8ff8	8d 34 03	sta $0334			sta ToHold
.8ffb	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.8ffd	b9 57 00	lda $0057,y			lda FSMant0,y
.9000	10 08		bpl $900a			bpl _19
.9002	a9 2d		lda #$2d			lda #'-'		;   append sign
.9004	20 0b 90	jsr $900b			jsr pfch
.9007	4c 8a 8b	jmp $8b8a			jmp FNegate		;   make positive, return
.900a	60		rts		_19:		rts
.900b					pfch:
.900b	ac 34 03	ldy $0334			ldy ToHold
.900e	91 00		sta ($00),y			sta (cp),y
.9010	ee 34 03	inc $0334			inc ToHold
.9013	60		rts				rts
.9014					pfcen:
.9014	ad 34 03	lda $0334			lda ToHold
.9017	38		sec				sec
.9018	e9 01		sbc #$01			sbc #1
.901a	a0 00		ldy #$00			ldy #0
.901c	91 00		sta ($00),y			sta (cp),y		; fill in length
.901e	4c 37 ca	jmp $ca37			jmp Here		; push start addr
.9021					pfciA:
.9021	a8		tay				tay
.9022	10 0a		bpl $902e			bpl _15			; IfMi,
.9024	49 ff		eor #$ff			eor #$ff
.9026	18		clc				clc
.9027	69 01		adc #$01			adc #1
.9029	48		pha				pha
.902a	a9 2d		lda #$2d			lda #'-'
.902c	d0 03		bne $9031			bne _19
.902e	48		pha		_15:		pha
.902f	a9 2b		lda #$2b			lda #'+'
.9031					_19:
.9031	20 0b 90	jsr $900b			jsr pfch
.9034	68		pla				pla
.9035	a0 2f		ldy #$2f			ldy #'0'-1
.9037	c8		iny		_20:		iny
.9038	38		sec				sec
.9039	e9 0a		sbc #$0a			sbc #10
.903b	b0 fa		bcs $9037			bcs _20
.903d	69 0a		adc #$0a			adc #10
.903f	48		pha				pha
.9040	98		tya				tya
.9041	20 0b 90	jsr $900b			jsr pfch
.9044	68		pla				pla
.9045	09 30		ora #$30			ora #'0'
.9047	d0 c2		bne $900b			bne pfch
>9049	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=36811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>904b	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>904c	10					.byte WordFlags	;wh_Flags
>904d	03					.byte 3	;wh_CodeLength
>904e	d6					  .byte LinkDisplacement
=$904f					XtPtr1 ::= *
=36811					WordListLink ::= Nt0 ; remember the nt of this word for later
.904f	20 79 8f	jsr $8f79	FDot:		jsr PFDot
.9052	20 f3 b1	jsr $b1f3	FDot2:		jsr Count
.9055	20 e9 cd	jsr $cde9			jsr Type
.9058	4c dd cd	jmp $cddd			jmp Space
=12					CL	.var *-XtPtr1
=$905b					en = *	; remember here
>904d	0c					.byte CL	;wh_CodeLength
>905b	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=36830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>905e	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>905f	10					.byte WordFlags	;wh_Flags
>9060	03					.byte 3	;wh_CodeLength
>9061	13					  .byte LinkDisplacement
=$9062					XtPtr1 ::= *
=36830					WordListLink ::= Nt0 ; remember the nt of this word for later
.9062	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9064	d0 0b		bne $9071			bne _8
.9066	48		pha		_2:		pha
.9067	20 99 85	jsr $8599			jsr FPick3	;   print it
.906a	20 4f 90	jsr $904f			jsr FDot
.906d	68		pla				pla		;  next
.906e	38		sec				sec
.906f	e9 01		sbc #$01			sbc #1
.9071	c5 4c		cmp $4c		_8:		cmp FIndex
.9073	b0 f1		bcs $9066			bcs _2
=19					CL	.var *-XtPtr1
=$9075					en = *	; remember here
>9060	13					.byte CL	;wh_CodeLength
.9075	60		rts				rts
>9076	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=36859					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>907b	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>907c	10					.byte WordFlags	;wh_Flags
>907d	03					.byte 3	;wh_CodeLength
>907e	1d					  .byte LinkDisplacement
=$907f					XtPtr1 ::= *
=36859					WordListLink ::= Nt0 ; remember the nt of this word for later
.907f	20 f5 b7	jsr $b7f5	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9082	20 f6 8f	jsr $8ff6			jsr pfcst		; start collecting chars, make r positive
.9085	20 d6 8f	jsr $8fd6			jsr FLt10		; scale down to <10
.9088	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.908a	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.908d	f0 0f		beq $909e			beq _c9
.908f	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9092	f0 02		beq $9096			beq _c2
.9094	10 08		bpl $909e			bpl _c9
.9096	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.9098	20 81 8c	jsr $8c81			jsr F10Star		;  r *= 10
.909b	4c 88 90	jmp $9088			jmp _c1
.909e					_c9:
.909e	20 82 8f	jsr $8f82	PFSDotM:	jsr PFDotSub		; do mantissa
.90a1	a9 45		lda #$45			lda #'E'
.90a3	20 0b 90	jsr $900b			jsr pfch		; do exponent
.90a6	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90a8	20 21 90	jsr $9021			jsr pfciA
.90ab	e8		inx				inx			; Drop work area
.90ac	e8		inx				inx
.90ad	4c 14 90	jmp $9014			jmp pfcen		; finish string
=49					CL	.var *-XtPtr1
=$90b0					en = *	; remember here
>907d	31					.byte CL	;wh_CodeLength
>90b0	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=36915					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90b3	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90b4	10					.byte WordFlags	;wh_Flags
>90b5	03					.byte 3	;wh_CodeLength
>90b6	38					  .byte LinkDisplacement
=$90b7					XtPtr1 ::= *
=36915					WordListLink ::= Nt0 ; remember the nt of this word for later
.90b7	20 7f 90	jsr $907f	FSDot:		jsr PFSDot
.90ba	4c 52 90	jmp $9052			jmp FDot2
=6					CL	.var *-XtPtr1
=$90bd					en = *	; remember here
>90b5	06					.byte CL	;wh_CodeLength
>90bd	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=36930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c2	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90c3	10					.byte WordFlags	;wh_Flags
>90c4	03					.byte 3	;wh_CodeLength
>90c5	0f					  .byte LinkDisplacement
=$90c6					XtPtr1 ::= *
=36930					WordListLink ::= Nt0 ; remember the nt of this word for later
.90c6	20 f5 b7	jsr $b7f5	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90c9	20 f6 8f	jsr $8ff6			jsr pfcst		; start collecting chars, make r positive
.90cc	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90ce	b9 57 00	lda $0057,y			lda FSMant0,y
.90d1	f0 16		beq $90e9			beq _39
.90d3	b9 4d 00	lda $004d,y			lda FSExp,y
.90d6	f0 02		beq $90da			beq _31
.90d8	10 0f		bpl $90e9			bpl _39
.90da	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90dc	d6 24		dec $24,x			dec _exp,x
.90de	d6 24		dec $24,x			dec _exp,x
.90e0	20 bb 88	jsr $88bb			jsr F1000		;  r *= 1000
.90e3	20 e3 8b	jsr $8be3			jsr FStar
.90e6	4c cc 90	jmp $90cc			jmp _30
.90e9					_39:
.90e9	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90eb	b9 4d 00	lda $004d,y			lda FSExp,y
.90ee	30 1c		bmi $910c			bmi _a9			; exponent negative?
.90f0	c9 0a		cmp #$0a			cmp #10
.90f2	90 18		bcc $910c			bcc _a9			;   < 10 ?
.90f4	d0 07		bne $90fd			bne _a2			;   > 10 ?
.90f6	b9 57 00	lda $0057,y			lda FSMant0,y
.90f9	c9 7d		cmp #$7d			cmp #$7d
.90fb	90 0f		bcc $910c			bcc _a9
.90fd	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.90ff	f6 24		inc $24,x			inc _exp,x
.9101	f6 24		inc $24,x			inc _exp,x
.9103	20 bb 88	jsr $88bb			jsr F1000		;   r /= 1000
.9106	20 9e 8c	jsr $8c9e			jsr FSlash
.9109	4c e9 90	jmp $90e9			jmp _a
.910c					_a9:
.910c	4c 9e 90	jmp $909e			jmp PFSDotM
=73					CL	.var *-XtPtr1
=$910f					en = *	; remember here
>90c4	49					.byte CL	;wh_CodeLength
>910f	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=37010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9112	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9113	10					.byte WordFlags	;wh_Flags
>9114	03					.byte 3	;wh_CodeLength
>9115	50					  .byte LinkDisplacement
=$9116					XtPtr1 ::= *
=37010					WordListLink ::= Nt0 ; remember the nt of this word for later
.9116	20 c6 90	jsr $90c6	FEDot:		jsr PFEDot
.9119	4c 52 90	jmp $9052			jmp FDot2
=6					CL	.var *-XtPtr1
=$911c					en = *	; remember here
>9114	06					.byte CL	;wh_CodeLength
>911c	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=37022					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>911e	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>911f	18					.byte WordFlags	;wh_Flags
>9120	03					.byte 3	;wh_CodeLength
>9121	0c					  .byte LinkDisplacement
=$9122					XtPtr1 ::= *
=37022					WordListLink ::= Nt0 ; remember the nt of this word for later
.9122	20 77 ba	jsr $ba77	FQuote:		jsr Parse_Name		; get string
.9125	20 45 91	jsr $9145			jsr ToFloat		; convert
.9128	b5 24		lda $24,x			lda DStack+0,x		; error?
.912a	f0 0a		beq $9136			beq _Err
.912c	e8		inx				inx
.912d	e8		inx				inx
.912e	a5 0a		lda $0a				lda State		; compiling?
.9130	d0 01		bne $9133			bne _compile
.9132	60		rts				rts
.9133	4c 0a 88	jmp $880a	_compile:	jmp FLiteral		; compile a FP literal
.9136	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.9138	20 80 b4	jsr $b480			jsr ThrowA
=25					CL	.var *-XtPtr1
=$913b					en = *	; remember here
>9120	19					.byte CL	;wh_CodeLength
>913b	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=37057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9141	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9142	10					.byte WordFlags	;wh_Flags
>9143	03					.byte 3	;wh_CodeLength
>9144	23					  .byte LinkDisplacement
=$9145					XtPtr1 ::= *
=37057					WordListLink ::= Nt0 ; remember the nt of this word for later
.9145					ToFloat:
.9145	20 f5 b7	jsr $b7f5			jsr Zero	; alloc & init workspace
.9148	20 f5 b7	jsr $b7f5			jsr Zero
.914b	20 f5 b7	jsr $b7f5			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.914e	20 ab 88	jsr $88ab			jsr F0			; init result
.9151	20 23 92	jsr $9223	_11:		jsr _GetChar		; get mantissa prefix
.9154	b0 57		bcs $91ad			bcs _trueb ;_finishb
.9156	c9 20		cmp #$20			cmp #' '
.9158	f0 f7		beq $9151			beq _11
.915a	c9 2b		cmp #$2b			cmp #'+'
.915c	f0 06		beq $9164			beq _20
.915e	c9 2d		cmp #$2d			cmp #'-'
.9160	d0 07		bne $9169			bne _21
.9162	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9164	20 23 92	jsr $9223	_20:		jsr _GetChar		; do next mantissa digits
.9167	b0 47		bcs $91b0			bcs _finishb
.9169	c9 2e		cmp #$2e	_21:		cmp #'.'
.916b	f0 31		beq $919e			beq _27
.916d	c9 45		cmp #$45			cmp #'E'
.916f	f0 42		beq $91b3			beq _30
.9171	c9 65		cmp #$65			cmp #'e'
.9173	f0 3e		beq $91b3			beq _30
.9175	c9 44		cmp #$44			cmp #'D'
.9177	f0 3a		beq $91b3			beq _30
.9179	c9 64		cmp #$64			cmp #'d'
.917b	f0 36		beq $91b3			beq _30
.917d	38		sec				sec			;   a digit?
.917e	e9 30		sbc #$30			sbc #'0'
.9180	90 24		bcc $91a6			bcc _fail
.9182	c9 0a		cmp #$0a			cmp #9+1
.9184	b0 20		bcs $91a6			bcs _fail
.9186	48		pha				pha			; append digit to mantissa
.9187	20 81 8c	jsr $8c81			jsr F10Star
.918a	68		pla				pla
.918b	a0 00		ldy #$00			ldy #0
.918d	20 29 8e	jsr $8e29			jsr SToFYA
.9190	20 15 8b	jsr $8b15			jsr FPlus
.9193	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9195	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9197	f0 02		beq $919b			beq +
.9199	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.919b					+
.919b	4c 64 91	jmp $9164			jmp _20
.919e					_27:
.919e	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a0	d0 04		bne $91a6			bne _fail
.91a2	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91a4	f0 be		beq $9164			beq _20
.91a6					_fail:
.91a6	20 0e 85	jsr $850e			jsr FDrop
.91a9	a9 00		lda #$00			lda #0			;return false
.91ab	f0 69		beq $9216			beq _return
.91ad	4c 14 92	jmp $9214	_trueb:		jmp _true
.91b0	4c e1 91	jmp $91e1	_finishb:	jmp _finish
.91b3					_30:
.91b3	20 23 92	jsr $9223			jsr _GetChar
.91b6	b0 29		bcs $91e1			bcs _finish
.91b8	c9 2b		cmp #$2b			cmp #'+'
.91ba	f0 06		beq $91c2			beq _40
.91bc	c9 2d		cmp #$2d			cmp #'-'
.91be	d0 07		bne $91c7			bne _41
.91c0	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c2	20 23 92	jsr $9223	_40:		jsr _GetChar		;get exponent digits
.91c5	b0 1a		bcs $91e1			bcs _finish
.91c7	38		sec		_41:		sec			;  digit?
.91c8	e9 30		sbc #$30			sbc #'0'
.91ca	90 da		bcc $91a6			bcc _fail
.91cc	c9 0a		cmp #$0a			cmp #9+1
.91ce	b0 d6		bcs $91a6			bcs _fail
.91d0	85 14		sta $14				sta tmp1
.91d2	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91d4	b5 28		lda $28,x			lda _exponent,x
.91d6	0a		asl a				asl a
.91d7	0a		asl a				asl a
.91d8	75 28		adc $28,x			adc _exponent,x
.91da	65 14		adc $14				adc tmp1		;  + digit
.91dc	95 28		sta $28,x			sta _exponent,x
.91de	4c c2 91	jmp $91c2			jmp _40
.91e1					_finish:
.91e1	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91e3	f0 c1		beq $91a6			beq _fail
.91e5	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91e7	f0 07		beq $91f0			beq +
.91e9	a9 00		lda #$00			lda #0
.91eb	38		sec				sec
.91ec	f5 28		sbc $28,x			sbc _exponent,x
.91ee	95 28		sta $28,x			sta _exponent,x
.91f0					+
.91f0	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f2	18		clc				clc
.91f3	75 27		adc $27,x			adc _decimalPos,x
.91f5	95 28		sta $28,x			sta _exponent,x
.91f7	4c ff 91	jmp $91ff			jmp _93
.91fa	20 81 8c	jsr $8c81	_93b:		jsr F10Star		;apply exponent to mantissa
.91fd	d6 28		dec $28,x			dec _exponent,x
.91ff	f0 0a		beq $920b	_93:		beq _94
.9201	10 f7		bpl $91fa			bpl _93b
.9203	20 c9 88	jsr $88c9	_94b:		jsr F10
.9206	20 9e 8c	jsr $8c9e			jsr FSlash
.9209	f6 28		inc $28,x			inc _exponent,x
.920b	30 f6		bmi $9203	_94:		bmi _94b
.920d					_95:
.920d	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.920f	f0 03		beq $9214			beq +
.9211	20 8a 8b	jsr $8b8a			jsr FNegate
.9214					+
.9214	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9216					_return:
.9216	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9218	95 2d		sta $2d,x			sta _addr+1,x
.921a	e8		inx				inx			; Drop work
.921b	e8		inx				inx
.921c	e8		inx				inx			; 2Drop work
.921d	e8		inx				inx
.921e	e8		inx				inx
.921f	e8		inx				inx
.9220	e8		inx				inx			; Drop len
.9221	e8		inx				inx
.9222	60		rts				rts
.9223					_GetChar:
.9223	38		sec				sec
.9224	b5 2a		lda $2a,x			lda _len,x
.9226	f0 0b		beq $9233			beq _gc_rts		; if end, return C=1
.9228	d6 2a		dec $2a,x			dec _len,x
.922a	a1 2c		lda ($2c,x)			lda (_addr,x)
.922c	f6 2c		inc $2c,x			inc _addr+0,x
.922e	d0 02		bne $9232			bne +
.9230	f6 2d		inc $2d,x			inc _addr+1,x
.9232					+
.9232	18		clc				clc			; get char, return C=0
.9233	60		rts		_gc_rts:	rts
>9234	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=37304					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9238	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>9239	10					.byte WordFlags	;wh_Flags
>923a	03					.byte 3	;wh_CodeLength
>923b	f7					  .byte LinkDisplacement
=$923c					XtPtr1 ::= *
=37304					WordListLink ::= Nt0 ; remember the nt of this word for later
.923c					FKey:
.923c	20 37 ca	jsr $ca37			jsr Here		; ( addr )
.923f	20 37 ca	jsr $ca37			jsr Here		; ( addr addr )
.9242	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9244	20 e7 b7	jsr $b7e7			jsr PushZA
.9247	20 b9 c2	jsr $c2b9			jsr Accept		; ( addr len )
.924a	20 45 91	jsr $9145			jsr ToFloat		; ( true | false)
.924d	e8		inx				inx			; err?
.924e	e8		inx				inx
.924f	b5 22		lda $22,x			lda DStack-2,x
.9251	f0 01		beq $9254			beq _err
.9253	60		rts				rts
.9254	20 ac b8	jsr $b8ac	_err:		jsr SLiteral_runtime
.9257	4c 5d 92	jmp $925d			  jmp +
>925a	20 3f 20					  .text " ? "
.925d	20 e9 cd	jsr $cde9	+		jsr Type
.9260	4c 3c 92	jmp $923c			jmp FKey
>9263	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=37350					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9266	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>9267	10					.byte WordFlags	;wh_Flags
>9268	03					.byte 3	;wh_CodeLength
>9269	2e					  .byte LinkDisplacement
=$926a					XtPtr1 ::= *
=37350					WordListLink ::= Nt0 ; remember the nt of this word for later
.926a	20 fb b3	jsr $b3fb	SFAt:		jsr PopYA		; pop sf_addr
.926d	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.926f	84 17		sty $17				sty tmp2+1
.9271	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.9274	a0 01		ldy #$01			ldy #1			; copy exponent
.9276	b1 16		lda ($16),y			lda (tmp2),y
.9278	0a		asl a				asl a
.9279	88		dey				dey
.927a	b1 16		lda ($16),y			lda (tmp2),y
.927c	2a		rol a				rol a
.927d	38		sec				sec
.927e	e9 7e		sbc #$7e			sbc #126
.9280	95 4d		sta $4d,x			sta FSExp,x
.9282	a0 01		ldy #$01			ldy #1			; copy mantissa
.9284	b1 16		lda ($16),y			lda (tmp2),y
.9286	09 80		ora #$80			ora #$80
.9288	4a		lsr a				lsr a
.9289	95 57		sta $57,x			sta FSMant0,x
.928b	c8		iny				iny
.928c	b1 16		lda ($16),y			lda (tmp2),y
.928e	6a		ror a				ror a
.928f	95 61		sta $61,x			sta FSMant1,x
.9291	c8		iny				iny
.9292	b1 16		lda ($16),y			lda (tmp2),y
.9294	6a		ror a				ror a
.9295	95 6b		sta $6b,x			sta FSMant2,x
.9297	a9 00		lda #$00			lda #0
.9299	6a		ror a				ror a
.929a	95 75		sta $75,x			sta FSMant3,x
.929c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.929e	a0 00		ldy #$00			ldy #0			; get sign
.92a0	b1 16		lda ($16),y			lda (tmp2),y
.92a2	10 03		bpl $92a7			bpl +
.92a4	20 8a 8b	jsr $8b8a			jsr FNegate
.92a7					+
=61					CL	.var *-XtPtr1
=$92a7					en = *	; remember here
>9268	3d					.byte CL	;wh_CodeLength
.92a7	60		rts				rts
>92a8	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=37419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92ab	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92ac	10					.byte WordFlags	;wh_Flags
>92ad	03					.byte 3	;wh_CodeLength
>92ae	45					  .byte LinkDisplacement
=$92af					XtPtr1 ::= *
=37419					WordListLink ::= Nt0 ; remember the nt of this word for later
.92af	20 fb b3	jsr $b3fb	SFStore:	jsr PopYA		; pop sf_addr
.92b2	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92b4	84 17		sty $17				sty tmp2+1
.92b6	a4 4c		ldy $4c				ldy FIndex		; negative?
.92b8	b9 57 00	lda $0057,y			lda FSMant0,y
.92bb	29 80		and #$80			and #$80		;  save sign
.92bd	85 19		sta $19				sta tmp3+1
.92bf	10 03		bpl $92c4			bpl +
.92c1	20 8a 8b	jsr $8b8a			jsr FNegate
.92c4					+
.92c4	86 14		stx $14				stx tmp1+0		; save data stack index
.92c6	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92c8	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92ca	18		clc				clc
.92cb	69 7e		adc #$7e			adc #126
.92cd	95 4d		sta $4d,x			sta FSExp,x
.92cf	16 75		asl $75,x			asl FSMant3,x
.92d1	b5 6b		lda $6b,x			lda FSMant2,x
.92d3	2a		rol a				rol a
.92d4	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92d6	91 16		sta ($16),y			sta (tmp2),y
.92d8	b5 61		lda $61,x			lda FSMant1,x
.92da	2a		rol a				rol a
.92db	88		dey				dey			; +2 IEEE
.92dc	91 16		sta ($16),y			sta (tmp2),y
.92de	b5 57		lda $57,x			lda FSMant0,x
.92e0	2a		rol a				rol a
.92e1	2a		rol a				rol a
.92e2	56 4d		lsr $4d,x			lsr FSExp,x
.92e4	6a		ror a				ror a
.92e5	88		dey				dey			; +1 IEEE
.92e6	91 16		sta ($16),y			sta (tmp2),y
.92e8	b5 4d		lda $4d,x			lda FSExp,x
.92ea	05 19		ora $19				ora tmp3+1		;  insert sign
.92ec	88		dey				dey			; +0 IEEE
.92ed	91 16		sta ($16),y			sta (tmp2),y
.92ef	e6 4c		inc $4c				inc FIndex		; FDrop
.92f1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-XtPtr1
=$92f3					en = *	; remember here
>92ad	44					.byte CL	;wh_CodeLength
.92f3	60		rts				rts
>92f4	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=37499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92fb	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>92fc	10					.byte WordFlags	;wh_Flags
>92fd	03					.byte 3	;wh_CodeLength
>92fe	50					  .byte LinkDisplacement
=$92ff					XtPtr1 ::= *
=37499					WordListLink ::= Nt0 ; remember the nt of this word for later
.92ff	a9 04		lda #$04	SFloatPlus:	lda #4
.9301	4c 1b ca	jmp $ca1b			jmp Plus_A
=5					CL	.var *-XtPtr1
=$9304					en = *	; remember here
>92fd	05					.byte CL	;wh_CodeLength
>9304	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=37515					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>930b	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>930c	10					.byte WordFlags	;wh_Flags
>930d	03					.byte 3	;wh_CodeLength
>930e	10					  .byte LinkDisplacement
=$930f					XtPtr1 ::= *
=37515					WordListLink ::= Nt0 ; remember the nt of this word for later
.930f	a9 02		lda #$02	SFloats:	lda #2
.9311	4c 51 cb	jmp $cb51			jmp LShift_A
=5					CL	.var *-XtPtr1
=$9314					en = *	; remember here
>930d	05					.byte CL	;wh_CodeLength
>9314	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=37527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9317	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9318	10					.byte WordFlags	;wh_Flags
>9319	03					.byte 3	;wh_CodeLength
>931a	0c					  .byte LinkDisplacement
=$931b					XtPtr1 ::= *
=37527					WordListLink ::= Nt0 ; remember the nt of this word for later
.931b	20 fb b3	jsr $b3fb	DFStore:	jsr PopYA		; pop df_addr
.931e	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9320	84 17		sty $17				sty tmp2+1
.9322	a4 4c		ldy $4c				ldy FIndex		; negative?
.9324	b9 57 00	lda $0057,y			lda FSMant0,y
.9327	29 80		and #$80			and #$80		; remember sign
.9329	85 19		sta $19				sta tmp3+1
.932b	10 03		bpl $9330			bpl +			; make positive
.932d	20 8a 8b	jsr $8b8a			jsr FNegate
.9330					+
.9330	86 14		stx $14				stx tmp1+0		; save data stack index
.9332	a6 4c		ldx $4c				ldx FIndex
.9334	a9 00		lda #$00			lda #0
.9336	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	88		dey				dey			; +6 IEEE
.933b	91 16		sta ($16),y			sta (tmp2),y
.933d	20 85 93	jsr $9385			jsr _shift		; shift mantissa
.9340	20 85 93	jsr $9385			jsr _shift
.9343	88		dey				dey			; +5 IEEE
.9344	91 16		sta ($16),y			sta (tmp2),y
.9346	b5 75		lda $75,x			lda FSMant3,x
.9348	88		dey				dey			; +4 IEEE
.9349	91 16		sta ($16),y			sta (tmp2),y
.934b	b5 6b		lda $6b,x			lda FSMant2,x
.934d	88		dey				dey			; +3 IEEE
.934e	91 16		sta ($16),y			sta (tmp2),y
.9350	b5 61		lda $61,x			lda FSMant1,x
.9352	88		dey				dey			; +2 IEEE
.9353	91 16		sta ($16),y			sta (tmp2),y
.9355	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.9357	29 0f		and #$0f			and #$f
.9359	95 57		sta $57,x			sta FSMant0,x
.935b	b5 4d		lda $4d,x			lda FSExp,x
.935d	38		sec				sec
.935e	e9 02		sbc #$02			sbc #2
.9360	95 4d		sta $4d,x			sta FSExp,x
.9362	0a		asl a				asl a
.9363	0a		asl a				asl a
.9364	0a		asl a				asl a
.9365	0a		asl a				asl a
.9366	15 57		ora $57,x			ora FSMant0,x
.9368	88		dey				dey			; +1 IEEE
.9369	91 16		sta ($16),y			sta (tmp2),y
.936b	b5 4d		lda $4d,x			lda FSExp,x
.936d	08		php				php
.936e	4a		lsr a				lsr a
.936f	4a		lsr a				lsr a
.9370	4a		lsr a				lsr a
.9371	4a		lsr a				lsr a
.9372	18		clc				clc
.9373	69 30		adc #$30			adc #$30
.9375	28		plp				plp
.9376	30 03		bmi $937b			bmi +
.9378	18		clc				clc
.9379	69 10		adc #$10			adc #$10
.937b	05 19		ora $19		+		ora tmp3+1		; add sign bit
.937d	88		dey				dey			; +0 IEEE
.937e	91 16		sta ($16),y			sta (tmp2),y
.9380	e6 4c		inc $4c				inc FIndex		; FDrop
.9382	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.9384	60		rts				rts
.9385	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.9387	76 61		ror $61,x			ror FSMant1,x
.9389	76 6b		ror $6b,x			ror FSMant2,x
.938b	76 75		ror $75,x			ror FSMant3,x
.938d	6a		ror a				ror a
=115					CL	.var *-XtPtr1
=$938e					en = *	; remember here
>9319	73					.byte CL	;wh_CodeLength
.938e	60		rts				rts
>938f	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=37650					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9392	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>9393	10					.byte WordFlags	;wh_Flags
>9394	03					.byte 3	;wh_CodeLength
>9395	7b					  .byte LinkDisplacement
=$9396					XtPtr1 ::= *
=37650					WordListLink ::= Nt0 ; remember the nt of this word for later
.9396	20 fb b3	jsr $b3fb	DFAt:		jsr PopYA		; pop df_addr
.9399	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.939b	84 17		sty $17				sty tmp2+1
.939d	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.93a0	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a2	b1 16		lda ($16),y			lda (tmp2),y
.93a4	95 4d		sta $4d,x			sta FSExp,x
.93a6	c8		iny				iny			; +1 IEEE byte
.93a7	b1 16		lda ($16),y			lda (tmp2),y
.93a9	95 57		sta $57,x			sta FSMant0,x
.93ab	c8		iny				iny			; +2 IEEE byte
.93ac	b1 16		lda ($16),y			lda (tmp2),y
.93ae	95 61		sta $61,x			sta FSMant1,x
.93b0	c8		iny				iny			; +3 IEEE byte
.93b1	b1 16		lda ($16),y			lda (tmp2),y
.93b3	95 6b		sta $6b,x			sta FSMant2,x
.93b5	c8		iny				iny			; +4 IEEE byte
.93b6	b1 16		lda ($16),y			lda (tmp2),y
.93b8	95 75		sta $75,x			sta FSMant3,x
.93ba	c8		iny				iny			; +5 IEEE byte
.93bb	b1 16		lda ($16),y			lda (tmp2),y
.93bd	20 e6 93	jsr $93e6			jsr _shifta		; shift exponent & mantissa bits into place
.93c0	20 e6 93	jsr $93e6			jsr _shifta
.93c3	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93c5	0a		asl a				asl a
.93c6	36 4d		rol $4d,x			rol FSExp,x
.93c8	0a		asl a				asl a
.93c9	36 4d		rol $4d,x			rol FSExp,x
.93cb	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93cd	18		clc				clc
.93ce	69 02		adc #$02			adc #2
.93d0	95 4d		sta $4d,x			sta FSExp,x
.93d2	b5 57		lda $57,x			lda FSMant0,x
.93d4	29 7f		and #$7f			and #$7f
.93d6	09 40		ora #$40			ora #$40		;   insert implied 1
.93d8	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93da	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93dc	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93de	b1 16		lda ($16),y			lda (tmp2),y
.93e0	10 03		bpl $93e5			bpl +
.93e2	20 8a 8b	jsr $8b8a			jsr FNegate
.93e5					+
.93e5	60		rts				rts
.93e6	0a		asl a		_shifta:	asl a
.93e7	36 75		rol $75,x			rol FSMant3,x
.93e9	36 6b		rol $6b,x			rol FSMant2,x
.93eb	36 61		rol $61,x			rol FSMant1,x
.93ed	36 57		rol $57,x			rol FSMant0,x
.93ef	36 4d		rol $4d,x			rol FSExp,x
.93f1	60		rts				rts
=92					CL	.var *-XtPtr1
=$93f2					en = *	; remember here
>9394	5c					.byte CL	;wh_CodeLength
>93f2	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=37753					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>93f9	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>93fa	10					.byte WordFlags	;wh_Flags
>93fb	03					.byte 3	;wh_CodeLength
>93fc	67					  .byte LinkDisplacement
=$93fd					XtPtr1 ::= *
=37753					WordListLink ::= Nt0 ; remember the nt of this word for later
.93fd	a9 08		lda #$08	DFloatPlus:	lda #8
.93ff	4c 1b ca	jmp $ca1b			jmp Plus_A
=5					CL	.var *-XtPtr1
=$9402					en = *	; remember here
>93fb	05					.byte CL	;wh_CodeLength
>9402	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=37769					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9409	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>940a	10					.byte WordFlags	;wh_Flags
>940b	03					.byte 3	;wh_CodeLength
>940c	10					  .byte LinkDisplacement
=$940d					XtPtr1 ::= *
=37769					WordListLink ::= Nt0 ; remember the nt of this word for later
.940d	a9 03		lda #$03	DFloats:	lda #3
.940f	4c 51 cb	jmp $cb51			jmp LShift_A
=5					CL	.var *-XtPtr1
=$9412					en = *	; remember here
>940b	05					.byte CL	;wh_CodeLength
>9412	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=37784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9418	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9419	10					.byte WordFlags	;wh_Flags
>941a	03					.byte 3	;wh_CodeLength
>941b	0f					  .byte LinkDisplacement
=$941c					XtPtr1 ::= *
=37784					WordListLink ::= Nt0 ; remember the nt of this word for later
.941c	20 fb b3	jsr $b3fb	FMPoly:		jsr PopYA
.941f	20 b8 b7	jsr $b7b8	FMPolyYA:	jsr PushYA		; push coefficent addr
.9422	20 4f 86	jsr $864f			jsr FAt_YA		; fetch 1st coefficent
.9425	4c 38 94	jmp $9438			jmp _4
.9428	20 70 85	jsr $8570	_2:		jsr FOver
.942b	20 e3 8b	jsr $8be3			jsr FStar
.942e	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9430	b4 25		ldy $25,x			ldy DStack+1,x
.9432	20 4f 86	jsr $864f			jsr FAt_YA
.9435	20 15 8b	jsr $8b15			jsr FPlus
.9438	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943a	20 1b ca	jsr $ca1b			jsr Plus_A
.943d	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.943f	d0 e7		bne $9428			bne _2
.9441	e8		inx				inx			; Drop coefficent ptr
.9442	e8		inx				inx
=39					CL	.var *-XtPtr1
=$9443					en = *	; remember here
>941a	27					.byte CL	;wh_CodeLength
.9443	60		rts				rts
>9444	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=37836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>944c	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>944d	10					.byte WordFlags	;wh_Flags
>944e	03					.byte 3	;wh_CodeLength
>944f	34					  .byte LinkDisplacement
=$9450					XtPtr1 ::= *
=37836					WordListLink ::= Nt0 ; remember the nt of this word for later
.9450	a9 5a		lda #$5a	FLog2M1M:	lda #<_c
.9452	a0 94		ldy #$94			ldy #>_c
.9454	20 1f 94	jsr $941f			jsr FMPolyYA
.9457	4c e3 8b	jmp $8be3			jmp FStar
=10					CL	.var *-XtPtr1
=$945a					en = *	; remember here
>944e	0a					.byte CL	;wh_CodeLength
.945a					_c:
>945a	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>945e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>945f	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9463	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9464	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9468	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9469	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946d	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>946e	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9472	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9473	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9477	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9478	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947c	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947d	00 00						.word 0
>947f	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=37892					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9484	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>9485	10					.byte WordFlags	;wh_Flags
>9486	03					.byte 3	;wh_CodeLength
>9487	38					  .byte LinkDisplacement
=$9488					XtPtr1 ::= *
=37892					WordListLink ::= Nt0 ; remember the nt of this word for later
.9488	a4 4c		ldy $4c		FLog2:		ldy FIndex
.948a	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.948d	30 20		bmi $94af			bmi _OutOfRange
.948f	f0 1e		beq $94af			beq _OutOfRange
.9491	b9 4d 00	lda $004d,y			lda FSExp,y
.9494	48		pha				pha		; remember orig exponent
.9495	a9 01		lda #$01			lda #1
.9497	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.949a	20 79 8b	jsr $8b79			jsr F1Minus
.949d	20 50 94	jsr $9450			jsr FLog2M1M
.94a0	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a2	68		pla				pla
.94a3	38		sec				sec
.94a4	e9 01		sbc #$01			sbc #1
.94a6	10 01		bpl $94a9			bpl +
.94a8	88		dey				dey
.94a9					+
.94a9	20 29 8e	jsr $8e29			jsr SToFYA
.94ac	4c 15 8b	jmp $8b15			jmp FPlus
.94af	4c 5b b4	jmp $b45b	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-XtPtr1
=$94b2					en = *	; remember here
>9486	2a					.byte CL	;wh_CodeLength
>94b2	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=37941					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94b5	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94b6	10					.byte WordFlags	;wh_Flags
>94b7	03					.byte 3	;wh_CodeLength
>94b8	31					  .byte LinkDisplacement
=$94b9					XtPtr1 ::= *
=37941					WordListLink ::= Nt0 ; remember the nt of this word for later
.94b9	20 88 94	jsr $9488	FLn:		jsr FLog2
.94bc	20 48 88	jsr $8848			jsr FLitI
>94bf	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c3	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c4	4c e3 8b	jmp $8be3			jmp FStar
=14					CL	.var *-XtPtr1
=$94c7					en = *	; remember here
>94b7	0e					.byte CL	;wh_CodeLength
>94c7	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=37964					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94cc	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94cd	10					.byte WordFlags	;wh_Flags
>94ce	03					.byte 3	;wh_CodeLength
>94cf	17					  .byte LinkDisplacement
=$94d0					XtPtr1 ::= *
=37964					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d0	20 49 8b	jsr $8b49	FlnP1:		jsr F1Plus
.94d3	4c b9 94	jmp $94b9			jmp FLn
=6					CL	.var *-XtPtr1
=$94d6					en = *	; remember here
>94ce	06					.byte CL	;wh_CodeLength
>94d6	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=37978					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94da	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94db	10					.byte WordFlags	;wh_Flags
>94dc	03					.byte 3	;wh_CodeLength
>94dd	0e					  .byte LinkDisplacement
=$94de					XtPtr1 ::= *
=37978					WordListLink ::= Nt0 ; remember the nt of this word for later
.94de	20 88 94	jsr $9488	FLog:		jsr FLog2
.94e1	20 48 88	jsr $8848			jsr FLitI
>94e4	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e8	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94e9	4c e3 8b	jmp $8be3			jmp FStar
=14					CL	.var *-XtPtr1
=$94ec					en = *	; remember here
>94dc	0e					.byte CL	;wh_CodeLength
>94ec	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=38004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94f4	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94f5	10					.byte WordFlags	;wh_Flags
>94f6	03					.byte 3	;wh_CodeLength
>94f7	1a					  .byte LinkDisplacement
=$94f8					XtPtr1 ::= *
=38004					WordListLink ::= Nt0 ; remember the nt of this word for later
.94f8	a9 02		lda #$02	FExp2M1M:	lda #<_c
.94fa	a0 95		ldy #$95			ldy #>_c
.94fc	20 1f 94	jsr $941f			jsr FMPolyYA
.94ff	4c e3 8b	jmp $8be3			jmp FStar
=10					CL	.var *-XtPtr1
=$9502					en = *	; remember here
>94f6	0a					.byte CL	;wh_CodeLength
.9502					_c:
>9502	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9506	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>9507	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950b	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>950c	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9510	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9511	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9515	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9516	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951a	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>951b	00						.byte 0
>951c	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=38049					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9521	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9522	10					.byte WordFlags	;wh_Flags
>9523	03					.byte 3	;wh_CodeLength
>9524	2d					  .byte LinkDisplacement
=$9525					XtPtr1 ::= *
=38049					WordListLink ::= Nt0 ; remember the nt of this word for later
.9525	20 45 8a	jsr $8a45	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9528	20 71 8e	jsr $8e71			jsr FToS
.952b	20 f8 94	jsr $94f8			jsr FExp2M1M
.952e	20 49 8b	jsr $8b49			jsr F1Plus
.9531	20 e0 b3	jsr $b3e0			jsr PopA
.9534	a4 4c		ldy $4c				ldy FIndex
.9536	18		clc				clc
.9537	79 4d 00	adc $004d,y			adc FSExp,y
.953a	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-XtPtr1
=$953d					en = *	; remember here
>9523	18					.byte CL	;wh_CodeLength
.953d	60		rts				rts
>953e	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=38082					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9542	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>9543	10					.byte WordFlags	;wh_Flags
>9544	03					.byte 3	;wh_CodeLength
>9545	21					  .byte LinkDisplacement
=$9546					XtPtr1 ::= *
=38082					WordListLink ::= Nt0 ; remember the nt of this word for later
.9546					FExp:
.9546	20 48 88	jsr $8848			jsr FLitI
>9549	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>954d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.954e	20 e3 8b	jsr $8be3			jsr FStar
.9551	4c 25 95	jmp $9525			jmp FExp2
=14					CL	.var *-XtPtr1
=$9554					en = *	; remember here
>9544	0e					.byte CL	;wh_CodeLength
>9554	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=38106					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>955a	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>955b	10					.byte WordFlags	;wh_Flags
>955c	03					.byte 3	;wh_CodeLength
>955d	18					  .byte LinkDisplacement
=$955e					XtPtr1 ::= *
=38106					WordListLink ::= Nt0 ; remember the nt of this word for later
.955e	20 46 95	jsr $9546	FExpM1:		jsr FExp
.9561	4c 79 8b	jmp $8b79			jmp F1Minus
=6					CL	.var *-XtPtr1
=$9564					en = *	; remember here
>955c	06					.byte CL	;wh_CodeLength
>9564	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=38121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9569	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>956a	10					.byte WordFlags	;wh_Flags
>956b	03					.byte 3	;wh_CodeLength
>956c	0f					  .byte LinkDisplacement
=$956d					XtPtr1 ::= *
=38121					WordListLink ::= Nt0 ; remember the nt of this word for later
.956d					FALog:
.956d	20 48 88	jsr $8848			jsr FLitI
>9570	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9574	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9575	20 e3 8b	jsr $8be3			jsr FStar
.9578	4c 25 95	jmp $9525			jmp FExp2
=14					CL	.var *-XtPtr1
=$957b					en = *	; remember here
>956b	0e					.byte CL	;wh_CodeLength
>957b	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=38142					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>957e	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>957f	10					.byte WordFlags	;wh_Flags
>9580	03					.byte 3	;wh_CodeLength
>9581	15					  .byte LinkDisplacement
=$9582					XtPtr1 ::= *
=38142					WordListLink ::= Nt0 ; remember the nt of this word for later
.9582	20 d1 85	jsr $85d1	FPower:		jsr FSwap
.9585	20 88 94	jsr $9488			jsr FLog2
.9588	20 e3 8b	jsr $8be3			jsr FStar
.958b	4c 25 95	jmp $9525			jmp FExp2
=12					CL	.var *-XtPtr1
=$958e					en = *	; remember here
>9580	0c					.byte CL	;wh_CodeLength
>958e	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=38165					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9595	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>9596	10					.byte WordFlags	;wh_Flags
>9597	03					.byte 3	;wh_CodeLength
>9598	17					  .byte LinkDisplacement
=$9599					XtPtr1 ::= *
=38165					WordListLink ::= Nt0 ; remember the nt of this word for later
.9599					Deg2Rad:
.9599	20 48 88	jsr $8848			jsr FLitI
>959c	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a0	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a1	4c e3 8b	jmp $8be3			jmp FStar
=11					CL	.var *-XtPtr1
=$95a4					en = *	; remember here
>9597	0b					.byte CL	;wh_CodeLength
>95a4	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=38187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95ab	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95ac	10					.byte WordFlags	;wh_Flags
>95ad	03					.byte 3	;wh_CodeLength
>95ae	16					  .byte LinkDisplacement
=$95af					XtPtr1 ::= *
=38187					WordListLink ::= Nt0 ; remember the nt of this word for later
.95af					Rad2Deg:
.95af	20 48 88	jsr $8848			jsr FLitI
>95b2	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95b6	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95b7	4c e3 8b	jmp $8be3			jmp FStar
=11					CL	.var *-XtPtr1
=$95ba					en = *	; remember here
>95ad	0b					.byte CL	;wh_CodeLength
>95ba	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=38210					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c2	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95c3	10					.byte WordFlags	;wh_Flags
>95c4	03					.byte 3	;wh_CodeLength
>95c5	17					  .byte LinkDisplacement
=$95c6					XtPtr1 ::= *
=38210					WordListLink ::= Nt0 ; remember the nt of this word for later
.95c6	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95c8	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95cb	f0 2f		beq $95fc			beq _ok
.95cd	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d0	30 2a		bmi $95fc			bmi _ok			; small?
.95d2	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95d4	30 26		bmi $95fc			bmi _ok			;if exponent <=0
.95d6	f0 24		beq $95fc			beq _ok
.95d8	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95da	b0 22		bcs $95fe			bcs _exp2
.95dc	b9 57 00	lda $0057,y			lda FSMant0,y
.95df	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e1	90 19		bcc $95fc			bcc _ok
.95e3	c9 9b		cmp #$9b			cmp #$100-$65
.95e5	b0 15		bcs $95fc			bcs _ok
.95e7					_mir:
.95e7	20 fe 88	jsr $88fe			jsr FPi
.95ea	a4 4c		ldy $4c				ldy FIndex
.95ec	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95ef	10 03		bpl $95f4			bpl _3
.95f1	20 8a 8b	jsr $8b8a			jsr FNegate
.95f4	20 d1 85	jsr $85d1	_3:		jsr FSwap
.95f7	20 55 8b	jsr $8b55			jsr FMinus
.95fa	38		sec				sec		; mirrored
.95fb	60		rts				rts
.95fc	18		clc		_ok:		clc		; not mirrored
.95fd	60		rts				rts
.95fe	d0 0b		bne $960b	_exp2:		bne _rot	;if exp>2 then fix
.9600	b9 57 00	lda $0057,y			lda FSMant0,y
.9603	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9605	90 e0		bcc $95e7			bcc _mir
.9607	c9 9b		cmp #$9b			cmp #$100-$65
.9609	b0 dc		bcs $95e7			bcs _mir
.960b	20 2d 89	jsr $892d	_rot:		jsr F2Pi
.960e	20 9e 8c	jsr $8c9e			jsr FSlash
.9611	20 45 8a	jsr $8a45			jsr FIntFrc
.9614	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.9616	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.9618	b9 4d 00	lda $004d,y			lda FSExp,y
.961b	a8		tay				tay
.961c	30 03		bmi $9621			bmi _rot4
.961e	20 79 8b	jsr $8b79			jsr F1Minus	;  subtract 1
.9621	20 2d 89	jsr $892d	_rot4:		jsr F2Pi
.9624	20 e3 8b	jsr $8be3			jsr FStar
.9627	4c c6 95	jmp $95c6			jmp FAReduce	; rotate done, look again
=100					CL	.var *-XtPtr1
=$962a					en = *	; remember here
>95c4	64					.byte CL	;wh_CodeLength
>962a	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=38318					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>962e	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>962f	10					.byte WordFlags	;wh_Flags
>9630	03					.byte 3	;wh_CodeLength
>9631	6c					  .byte LinkDisplacement
=$9632					XtPtr1 ::= *
=38318					WordListLink ::= Nt0 ; remember the nt of this word for later
.9632	20 c6 95	jsr $95c6	FSin:		jsr FAReduce
.9635	4c 38 96	jmp $9638			jmp FSinM
=6					CL	.var *-XtPtr1
=$9638					en = *	; remember here
>9630	06					.byte CL	;wh_CodeLength
.9638	20 4d 85	jsr $854d	FSinM:		jsr FDup
.963b	20 73 8c	jsr $8c73			jsr FSqr	; x x^2
.963e	a9 4e		lda #$4e			lda #<_c
.9640	a0 96		ldy #$96			ldy #>_c
.9642	20 1f 94	jsr $941f			jsr FMPolyYA
.9645	20 e3 8b	jsr $8be3			jsr FStar
.9648	20 49 8b	jsr $8b49			jsr F1Plus	; C0 +1.0
.964b	4c e3 8b	jmp $8be3			jmp FStar
.964e					_c:
>964e	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9652	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>9653	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9657	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>9658	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965c	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>965d	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9661	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9662	00						.byte 0
>9663	46 43 73 63			L1:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=38375					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9667	64					.byte (("FCsc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>9668	10					.byte WordFlags	;wh_Flags
>9669	03					.byte 3	;wh_CodeLength
>966a	39					  .byte LinkDisplacement
=$966b					XtPtr1 ::= *
=38375					WordListLink ::= Nt0 ; remember the nt of this word for later
.966b	20 32 96	jsr $9632	FCsc:		jsr FSin
.966e	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/SIN(r1)
=6					CL	.var *-XtPtr1
=$9671					en = *	; remember here
>9669	06					.byte CL	;wh_CodeLength
>9671	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=38389					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9675	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>9676	10					.byte WordFlags	;wh_Flags
>9677	03					.byte 3	;wh_CodeLength
>9678	0e					  .byte LinkDisplacement
=$9679					XtPtr1 ::= *
=38389					WordListLink ::= Nt0 ; remember the nt of this word for later
.9679	20 0e 89	jsr $890e	FCos:		jsr FPiH
.967c	20 15 8b	jsr $8b15			jsr FPlus
.967f	4c 32 96	jmp $9632			jmp FSin
=9					CL	.var *-XtPtr1
=$9682					en = *	; remember here
>9677	09					.byte CL	;wh_CodeLength
>9682	46 53 65 63			L1:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=38406					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9686	64					.byte (("FSec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9687	10					.byte WordFlags	;wh_Flags
>9688	03					.byte 3	;wh_CodeLength
>9689	11					  .byte LinkDisplacement
=$968a					XtPtr1 ::= *
=38406					WordListLink ::= Nt0 ; remember the nt of this word for later
.968a	20 79 96	jsr $9679	FSec:		jsr FCos
.968d	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/COS(r1)
=6					CL	.var *-XtPtr1
=$9690					en = *	; remember here
>9688	06					.byte CL	;wh_CodeLength
>9690	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=38423					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9697	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9698	10					.byte WordFlags	;wh_Flags
>9699	03					.byte 3	;wh_CodeLength
>969a	11					  .byte LinkDisplacement
=$969b					XtPtr1 ::= *
=38423					WordListLink ::= Nt0 ; remember the nt of this word for later
.969b	20 4d 85	jsr $854d	FSinCos:	jsr FDup
.969e	20 32 96	jsr $9632			jsr FSin
.96a1	20 d1 85	jsr $85d1			jsr FSwap
.96a4	4c 79 96	jmp $9679			jmp FCos
=12					CL	.var *-XtPtr1
=$96a7					en = *	; remember here
>9699	0c					.byte CL	;wh_CodeLength
>96a7	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=38443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96ab	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96ac	10					.byte WordFlags	;wh_Flags
>96ad	03					.byte 3	;wh_CodeLength
>96ae	14					  .byte LinkDisplacement
=$96af					XtPtr1 ::= *
=38443					WordListLink ::= Nt0 ; remember the nt of this word for later
.96af	20 c6 95	jsr $95c6	FTan:		jsr FAReduce
.96b2	90 06		bcc $96ba			bcc _30
.96b4	20 ba 96	jsr $96ba			jsr _30
.96b7	4c 8a 8b	jmp $8b8a			jmp FNegate
.96ba					_30:
.96ba	20 4d 85	jsr $854d			jsr FDup
.96bd	20 b0 8b	jsr $8bb0			jsr FAbs
.96c0	20 1e 89	jsr $891e			jsr FPiQ
.96c3	20 68 87	jsr $8768			jsr FLe
.96c6	e8		inx				inx			; pop f
.96c7	e8		inx				inx
.96c8	b5 24		lda $24,x			lda DStack+0,x
.96ca	d0 19		bne $96e5			bne FTanM
.96cc	20 0e 89	jsr $890e			jsr FPiH
.96cf	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d1	b9 57 00	lda $0057,y			lda FSMant0,y
.96d4	10 03		bpl $96d9			bpl +
.96d6	20 8a 8b	jsr $8b8a			jsr FNegate
.96d9					+
.96d9	20 d1 85	jsr $85d1			jsr FSwap
.96dc	20 55 8b	jsr $8b55			jsr FMinus
.96df	20 e5 96	jsr $96e5			jsr FTanM
.96e2	4c 42 8d	jmp $8d42			jmp F1Slash
=54					CL	.var *-XtPtr1
=$96e5					en = *	; remember here
>96ad	36					.byte CL	;wh_CodeLength
.96e5	20 4d 85	jsr $854d	FTanM:		jsr FDup
.96e8	20 73 8c	jsr $8c73			jsr FSqr		; x x^2
.96eb	a9 fb		lda #$fb			lda #<_c
.96ed	a0 96		ldy #$96			ldy #>_c
.96ef	20 1f 94	jsr $941f			jsr FMPolyYA
.96f2	20 e3 8b	jsr $8be3			jsr FStar
.96f5	20 49 8b	jsr $8b49			jsr F1Plus		; c0 1.0
.96f8	4c e3 8b	jmp $8be3			jmp FStar
.96fb					_c:
>96fb	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ff	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9700	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9704	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9705	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9709	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>970a	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970e	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>970f	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9713	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9714	00						.byte 0
>9715	46 43 6f 74			L1:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=38553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9719	84					.byte (("FCot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>971a	10					.byte WordFlags	;wh_Flags
>971b	03					.byte 3	;wh_CodeLength
>971c	6e					  .byte LinkDisplacement
=$971d					XtPtr1 ::= *
=38553					WordListLink ::= Nt0 ; remember the nt of this word for later
.971d	20 af 96	jsr $96af	FCot:		jsr FTan
.9720	4c 42 8d	jmp $8d42			jmp F1Slash	; =1/TAN(r1)
=6					CL	.var *-XtPtr1
=$9723					en = *	; remember here
>971b	06					.byte CL	;wh_CodeLength
>9723	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=38568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9728	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9729	10					.byte WordFlags	;wh_Flags
>972a	03					.byte 3	;wh_CodeLength
>972b	0f					  .byte LinkDisplacement
=$972c					XtPtr1 ::= *
=38568					WordListLink ::= Nt0 ; remember the nt of this word for later
.972c	a4 4c		ldy $4c		FACos:		ldy FIndex
.972e	b9 57 00	lda $0057,y			lda FSMant0,y
.9731	08		php				php			; save sign
.9732	20 b0 8b	jsr $8bb0			jsr FAbs
.9735	a9 58		lda #$58			lda #<_c
.9737	a0 97		ldy #$97			ldy #>_c
.9739	20 1f 94	jsr $941f			jsr FMPolyYA
.973c	20 d1 85	jsr $85d1			jsr FSwap
.973f	20 8a 8b	jsr $8b8a			jsr FNegate
.9742	20 49 8b	jsr $8b49			jsr F1Plus
.9745	20 17 8f	jsr $8f17			jsr FSqrt
.9748	20 e3 8b	jsr $8be3			jsr FStar
.974b	28		plp				plp			; was r1 negative?
.974c	10 09		bpl $9757			bpl +
.974e	20 fe 88	jsr $88fe			jsr FPi
.9751	20 d1 85	jsr $85d1			jsr FSwap
.9754	20 55 8b	jsr $8b55			jsr FMinus
.9757					+
=43					CL	.var *-XtPtr1
=$9757					en = *	; remember here
>972a	2b					.byte CL	;wh_CodeLength
.9757	60		rts				rts
.9758					_c:
>9758	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975c	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975d	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9761	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9762	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9766	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9767	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976c	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9770	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9771	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9775	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9776	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977a	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>977b	00						.byte 0
>977c	46 41 53 65 63			L1:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=38657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9781	65					.byte (("FASec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9782	10					.byte WordFlags	;wh_Flags
>9783	03					.byte 3	;wh_CodeLength
>9784	59					  .byte LinkDisplacement
=$9785					XtPtr1 ::= *
=38657					WordListLink ::= Nt0 ; remember the nt of this word for later
.9785	20 42 8d	jsr $8d42	FASec:		jsr F1Slash
.9788	4c 2c 97	jmp $972c			jmp FACos
=6					CL	.var *-XtPtr1
=$978b					en = *	; remember here
>9783	06					.byte CL	;wh_CodeLength
>978b	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=38672					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9790	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9791	10					.byte WordFlags	;wh_Flags
>9792	03					.byte 3	;wh_CodeLength
>9793	0f					  .byte LinkDisplacement
=$9794					XtPtr1 ::= *
=38672					WordListLink ::= Nt0 ; remember the nt of this word for later
.9794	20 2c 97	jsr $972c	FASin:		jsr FACos
.9797	20 8a 8b	jsr $8b8a			jsr FNegate
.979a	20 0e 89	jsr $890e			jsr FPiH
.979d	4c 15 8b	jmp $8b15			jmp FPlus
=12					CL	.var *-XtPtr1
=$97a0					en = *	; remember here
>9792	0c					.byte CL	;wh_CodeLength
>97a0	46 41 43 73 63			L1:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=38693					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97a5	65					.byte (("FACsc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97a6	10					.byte WordFlags	;wh_Flags
>97a7	03					.byte 3	;wh_CodeLength
>97a8	15					  .byte LinkDisplacement
=$97a9					XtPtr1 ::= *
=38693					WordListLink ::= Nt0 ; remember the nt of this word for later
.97a9	20 42 8d	jsr $8d42	FACsc:		jsr F1Slash
.97ac	4c 94 97	jmp $9794			jmp FASin
=6					CL	.var *-XtPtr1
=$97af					en = *	; remember here
>97a7	06					.byte CL	;wh_CodeLength
>97af	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=38708					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97b4	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97b5	10					.byte WordFlags	;wh_Flags
>97b6	03					.byte 3	;wh_CodeLength
>97b7	0f					  .byte LinkDisplacement
=$97b8					XtPtr1 ::= *
=38708					WordListLink ::= Nt0 ; remember the nt of this word for later
.97b8					FATan:
.97b8	a4 4c		ldy $4c				ldy FIndex
.97ba	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97bd	30 1b		bmi $97da			bmi FATanM
.97bf	f0 19		beq $97da			beq FATanM
.97c1	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97c4	08		php				php
.97c5	20 42 8d	jsr $8d42			jsr F1Slash
.97c8	20 da 97	jsr $97da			jsr FATanM
.97cb	20 8a 8b	jsr $8b8a			jsr FNegate
.97ce	20 0e 89	jsr $890e			jsr FPiH
.97d1	28		plp				plp
.97d2	10 03		bpl $97d7			bpl _18
.97d4	20 8a 8b	jsr $8b8a			jsr FNegate
.97d7	4c 15 8b	jmp $8b15	_18:		jmp FPlus
.97da	20 4d 85	jsr $854d	FATanM:		jsr FDup		; x x
.97dd	20 73 8c	jsr $8c73			jsr FSqr		; x xsqr
.97e0	a9 f0		lda #$f0			lda #<_c
.97e2	a0 97		ldy #$97			ldy #>_c
.97e4	20 1f 94	jsr $941f			jsr FMPolyYA
.97e7	20 e3 8b	jsr $8be3			jsr FStar		; x poly
.97ea	20 49 8b	jsr $8b49			jsr F1Plus		; x poly
.97ed	4c e3 8b	jmp $8be3			jmp FStar
.97f0					_c:
>97f0	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97f5	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97fa	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fe	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97ff	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9803	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9804	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9808	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9809	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980d	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>980e	00						.byte 0
>980f	46 41 43 6f 74			L1:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=38804					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9814	85					.byte (("FACot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>9815	10					.byte WordFlags	;wh_Flags
>9816	03					.byte 3	;wh_CodeLength
>9817	60					  .byte LinkDisplacement
=$9818					XtPtr1 ::= *
=38804					WordListLink ::= Nt0 ; remember the nt of this word for later
.9818	20 42 8d	jsr $8d42	FACot:		jsr F1Slash
.981b	4c b8 97	jmp $97b8			jmp FATan
=6					CL	.var *-XtPtr1
=$981e					en = *	; remember here
>9816	06					.byte CL	;wh_CodeLength
>981e	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=38820					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9824	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9825	10					.byte WordFlags	;wh_Flags
>9826	03					.byte 3	;wh_CodeLength
>9827	10					  .byte LinkDisplacement
=$9828					XtPtr1 ::= *
=38820					WordListLink ::= Nt0 ; remember the nt of this word for later
.9828	a4 4c		ldy $4c		FATan2:		ldy FIndex
.982a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.982d	f0 1c		beq $984b			beq _rxzero
.982f	0a		asl a				asl a		;   C=rx sign
.9830	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9833	08		php				php		; save signs
.9834	20 9e 8c	jsr $8c9e			jsr FSlash
.9837	20 b8 97	jsr $97b8			jsr FATan
.983a	28		plp				plp		; pop signs
.983b	b0 01		bcs $983e			bcs _rxneg
.983d	60		rts		_rts:		rts
.983e	08		php		_rxneg:		php
.983f	20 fe 88	jsr $88fe			jsr FPi
.9842	28		plp				plp
.9843	10 03		bpl $9848			bpl +
.9845	20 8a 8b	jsr $8b8a			jsr FNegate
.9848	4c 15 8b	jmp $8b15	+		jmp FPlus
.984b	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.984d	b9 57 00	lda $0057,y			lda FSMant0,y
.9850	08		php				php
.9851	e6 4c		inc $4c				inc FIndex	; FDrop ry
.9853	20 0e 89	jsr $890e			jsr FPiH
.9856	28		plp				plp
.9857	10 e4		bpl $983d			bpl _rts
.9859	4c 8a 8b	jmp $8b8a			jmp FNegate
=52					CL	.var *-XtPtr1
=$985c					en = *	; remember here
>9826	34					.byte CL	;wh_CodeLength
>985c	46 53 67 6e			L1:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=38880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9860	c4					.byte (("FSgn"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9861	10					.byte WordFlags	;wh_Flags
>9862	03					.byte 3	;wh_CodeLength
>9863	3c					  .byte LinkDisplacement
=$9864					XtPtr1 ::= *
=38880					WordListLink ::= Nt0 ; remember the nt of this word for later
.9864	a4 4c		ldy $4c		FSgn:		ldy FIndex
.9866	b9 57 00	lda $0057,y			lda FSMant0,y
.9869	f0 0a		beq $9875			beq _zero
.986b	e6 4c		inc $4c				inc FIndex
.986d	b9 57 00	lda $0057,y			lda FSMant0,y
.9870	30 04		bmi $9876			bmi FM1
.9872	4c e3 88	jmp $88e3			jmp F1
.9875	60		rts		_zero:		rts
=18					CL	.var *-XtPtr1
=$9876					en = *	; remember here
>9862	12					.byte CL	;wh_CodeLength
.9876	a9 80		lda #$80	FM1:		lda #$80
.9878	a0 00		ldy #$00			ldy #0
.987a	4c 92 88	jmp $8892			jmp FLitYA
>987d	46 53 69 6e 48			L1:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=38914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9882	05					.byte (("FSinH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>9883	10					.byte WordFlags	;wh_Flags
>9884	03					.byte 3	;wh_CodeLength
>9885	22					  .byte LinkDisplacement
=$9886					XtPtr1 ::= *
=38914					WordListLink ::= Nt0 ; remember the nt of this word for later
.9886	20 4d 85	jsr $854d	FSinH:		jsr FDup
.9889	20 46 95	jsr $9546			jsr FExp
.988c	20 d1 85	jsr $85d1			jsr FSwap
.988f	20 8a 8b	jsr $8b8a			jsr FNegate
.9892	20 46 95	jsr $9546			jsr FExp
.9895	20 55 8b	jsr $8b55			jsr FMinus
.9898	4c 97 89	jmp $8997			jmp F2Slash
=21					CL	.var *-XtPtr1
=$989b					en = *	; remember here
>9884	15					.byte CL	;wh_CodeLength
>989b	46 43 73 63 48			L1:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=38944					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a0	05					.byte (("FCscH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a1	10					.byte WordFlags	;wh_Flags
>98a2	03					.byte 3	;wh_CodeLength
>98a3	1e					  .byte LinkDisplacement
=$98a4					XtPtr1 ::= *
=38944					WordListLink ::= Nt0 ; remember the nt of this word for later
.98a4	20 86 98	jsr $9886	FCscH:		jsr FSinH
.98a7	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$98aa					en = *	; remember here
>98a2	06					.byte CL	;wh_CodeLength
>98aa	46 43 6f 73 48			L1:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=38959					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98af	05					.byte (("FCosH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b0	10					.byte WordFlags	;wh_Flags
>98b1	03					.byte 3	;wh_CodeLength
>98b2	0f					  .byte LinkDisplacement
=$98b3					XtPtr1 ::= *
=38959					WordListLink ::= Nt0 ; remember the nt of this word for later
.98b3	20 4d 85	jsr $854d	FCosH:		jsr FDup
.98b6	20 46 95	jsr $9546			jsr FExp
.98b9	20 d1 85	jsr $85d1			jsr FSwap
.98bc	20 8a 8b	jsr $8b8a			jsr FNegate
.98bf	20 46 95	jsr $9546			jsr FExp
.98c2	20 15 8b	jsr $8b15			jsr FPlus
.98c5	4c 97 89	jmp $8997			jmp F2Slash
=21					CL	.var *-XtPtr1
=$98c8					en = *	; remember here
>98b1	15					.byte CL	;wh_CodeLength
>98c8	46 53 65 63 48			L1:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=38989					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98cd	05					.byte (("FSecH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98ce	10					.byte WordFlags	;wh_Flags
>98cf	03					.byte 3	;wh_CodeLength
>98d0	1e					  .byte LinkDisplacement
=$98d1					XtPtr1 ::= *
=38989					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d1	20 b3 98	jsr $98b3	FSecH:		jsr FCosH
.98d4	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$98d7					en = *	; remember here
>98cf	06					.byte CL	;wh_CodeLength
>98d7	46 54 61 6e 48			L1:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=39004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98dc	05					.byte (("FTanH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98dd	10					.byte WordFlags	;wh_Flags
>98de	03					.byte 3	;wh_CodeLength
>98df	0f					  .byte LinkDisplacement
=$98e0					XtPtr1 ::= *
=39004					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e0	20 4d 85	jsr $854d	FTanH:		jsr FDup
.98e3	20 8a 8b	jsr $8b8a			jsr FNegate	; X -X
.98e6	20 46 95	jsr $9546			jsr FExp	; X Exp(-X)
.98e9	20 d1 85	jsr $85d1			jsr FSwap	; Exp(-X) X
.98ec	20 46 95	jsr $9546			jsr FExp	; Exp(-X) Exp(X)
.98ef	20 70 85	jsr $8570			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f2	20 15 8b	jsr $8b15			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98f5	20 9e 8c	jsr $8c9e			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98f8	20 8c 89	jsr $898c			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.98fb	20 8a 8b	jsr $8b8a			jsr FNegate
.98fe	4c 49 8b	jmp $8b49			jmp F1Plus
=33					CL	.var *-XtPtr1
=$9901					en = *	; remember here
>98de	21					.byte CL	;wh_CodeLength
>9901	46 43 6f 74 48			L1:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=39046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9906	05					.byte (("FCotH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>9907	10					.byte WordFlags	;wh_Flags
>9908	03					.byte 3	;wh_CodeLength
>9909	2a					  .byte LinkDisplacement
=$990a					XtPtr1 ::= *
=39046					WordListLink ::= Nt0 ; remember the nt of this word for later
.990a	20 e0 98	jsr $98e0	FCotH:		jsr FTanH
.990d	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$9910					en = *	; remember here
>9908	06					.byte CL	;wh_CodeLength
>9910	46 41 53 69 6e 48		L1:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=39062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9916	06					.byte (("FASinH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9917	10					.byte WordFlags	;wh_Flags
>9918	03					.byte 3	;wh_CodeLength
>9919	10					  .byte LinkDisplacement
=$991a					XtPtr1 ::= *
=39062					WordListLink ::= Nt0 ; remember the nt of this word for later
.991a	20 4d 85	jsr $854d	FASinH:		jsr FDup	; X X
.991d	20 73 8c	jsr $8c73			jsr FSqr	; X X*X
.9920	20 49 8b	jsr $8b49			jsr F1Plus	; X X*X+1
.9923	20 17 8f	jsr $8f17			jsr FSqrt	; X sqrt(X*X+1)
.9926	20 15 8b	jsr $8b15			jsr FPlus	;
.9929	4c b9 94	jmp $94b9			jmp FLn
=18					CL	.var *-XtPtr1
=$992c					en = *	; remember here
>9918	12					.byte CL	;wh_CodeLength
>992c	46 41 43 73 63 48		L1:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=39090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9932	06					.byte (("FACscH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9933	10					.byte WordFlags	;wh_Flags
>9934	03					.byte 3	;wh_CodeLength
>9935	1c					  .byte LinkDisplacement
=$9936					XtPtr1 ::= *
=39090					WordListLink ::= Nt0 ; remember the nt of this word for later
.9936	20 42 8d	jsr $8d42	FACscH:		jsr F1Slash
.9939	4c 1a 99	jmp $991a			jmp FASinH
=6					CL	.var *-XtPtr1
=$993c					en = *	; remember here
>9934	06					.byte CL	;wh_CodeLength
>993c	46 41 43 6f 73 48		L1:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=39106					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9942	06					.byte (("FACosH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9943	10					.byte WordFlags	;wh_Flags
>9944	03					.byte 3	;wh_CodeLength
>9945	10					  .byte LinkDisplacement
=$9946					XtPtr1 ::= *
=39106					WordListLink ::= Nt0 ; remember the nt of this word for later
.9946	20 4d 85	jsr $854d	FACosH:		jsr FDup
.9949	20 73 8c	jsr $8c73			jsr FSqr
.994c	20 79 8b	jsr $8b79			jsr F1Minus
.994f	20 17 8f	jsr $8f17			jsr FSqrt
.9952	20 15 8b	jsr $8b15			jsr FPlus
.9955	4c b9 94	jmp $94b9			jmp FLn
=18					CL	.var *-XtPtr1
=$9958					en = *	; remember here
>9944	12					.byte CL	;wh_CodeLength
>9958	46 41 53 65 63 48		L1:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=39134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>995e	06					.byte (("FASecH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>995f	10					.byte WordFlags	;wh_Flags
>9960	03					.byte 3	;wh_CodeLength
>9961	1c					  .byte LinkDisplacement
=$9962					XtPtr1 ::= *
=39134					WordListLink ::= Nt0 ; remember the nt of this word for later
.9962	20 42 8d	jsr $8d42	FASecH:		jsr F1Slash
.9965	4c 46 99	jmp $9946			jmp FACosH
=6					CL	.var *-XtPtr1
=$9968					en = *	; remember here
>9960	06					.byte CL	;wh_CodeLength
>9968	46 41 54 61 6e 48		L1:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=39150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>996e	06					.byte (("FATanH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>996f	10					.byte WordFlags	;wh_Flags
>9970	03					.byte 3	;wh_CodeLength
>9971	10					  .byte LinkDisplacement
=$9972					XtPtr1 ::= *
=39150					WordListLink ::= Nt0 ; remember the nt of this word for later
.9972	20 4d 85	jsr $854d	FAtanH:		jsr FDup	; x x
.9975	20 49 8b	jsr $8b49			jsr F1Plus	; x x+1
.9978	20 d1 85	jsr $85d1			jsr FSwap	; 1+x x
.997b	20 e3 88	jsr $88e3			jsr F1
.997e	20 d1 85	jsr $85d1			jsr FSwap
.9981	20 55 8b	jsr $8b55			jsr FMinus	; 1+x 1-x
.9984	20 9e 8c	jsr $8c9e			jsr FSlash	; (1+x)/(1-x)
.9987	20 b9 94	jsr $94b9			jsr FLn
.998a	4c 97 89	jmp $8997			jmp F2Slash
=27					CL	.var *-XtPtr1
=$998d					en = *	; remember here
>9970	1b					.byte CL	;wh_CodeLength
>998d	46 41 43 6f 74 48		L1:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=39187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9993	06					.byte (("FACotH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>9994	10					.byte WordFlags	;wh_Flags
>9995	03					.byte 3	;wh_CodeLength
>9996	25					  .byte LinkDisplacement
=$9997					XtPtr1 ::= *
=39187					WordListLink ::= Nt0 ; remember the nt of this word for later
.9997	20 42 8d	jsr $8d42	FACotH: 	jsr F1Slash
.999a	4c 72 99	jmp $9972			jmp FATanH
=6					CL	.var *-XtPtr1
=$999d					en = *	; remember here
>9995	06					.byte CL	;wh_CodeLength
>999d	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=39199					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>999f	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a0	10					.byte WordFlags	;wh_Flags
>99a1	03					.byte 3	;wh_CodeLength
>99a2	0c					  .byte LinkDisplacement
=$99a3					XtPtr1 ::= *
=39199					WordListLink ::= Nt0 ; remember the nt of this word for later
.99a3	4c a6 99	jmp $99a6	Ed:		jmp ed6502
=3					CL	.var *-XtPtr1
=$99a6					en = *	; remember here
>99a1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99a6					ed6502:
.99a6	ad 00 03	lda $0300			lda base
.99a9	85 23		sta $23				sta editor3+1
.99ab	20 d0 b1	jsr $b1d0			jsr Decimal
.99ae	a9 00		lda #$00			lda #0
.99b0	85 1e		sta $1e				sta ed_head
.99b2	85 1f		sta $1f				sta ed_head+1
.99b4	85 20		sta $20				sta ed_cur
.99b6	85 21		sta $21				sta ed_cur+1
.99b8	85 22		sta $22				sta ed_flags
.99ba	20 f5 b7	jsr $b7f5			jsr Zero
.99bd	20 f5 b7	jsr $b7f5			jsr Zero		; ( addr-t u-t )
.99c0	20 75 ab	jsr $ab75			jsr CR
.99c3					ed_input_loop:
.99c3	a9 7e		lda #$7e			lda #$ff-%10000001
.99c5	25 22		and $22				and ed_flags
.99c7	85 22		sta $22				sta ed_flags
.99c9	20 6b 9e	jsr $9e6b			jsr ed_get_input
.99cc	a5 06		lda $06				lda ciblen+0
.99ce	d0 1e		bne $99ee			bne _command_mode
.99d0	a5 20		lda $20				lda ed_cur+0
.99d2	a4 21		ldy $21				ldy ed_cur+1
.99d4	20 b8 b7	jsr $b7b8			jsr PushYA		; ( addr-t u-t u )
.99d7	a9 80		lda #$80			lda #%10000000
.99d9	05 22		ora $22				ora ed_flags
.99db	85 22		sta $22				sta ed_flags
.99dd	20 69 ca	jsr $ca69			jsr One_Plus		; ( addr-t u-t u+1 )
.99e0	20 86 9e	jsr $9e86			jsr ed_is_valid_line
.99e3	b0 03		bcs $99e8			bcs +
.99e5	4c 5b 9e	jmp $9e5b			jmp ed_error_1drop	; New line number is not legal, abort
.99e8					+
.99e8	20 f5 b7	jsr $b7f5			jsr Zero		; ( addr-t u-t u+1 0 )
.99eb	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.99ee					_command_mode:
.99ee	20 f5 b7	jsr $b7f5			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f1	20 f5 b7	jsr $b7f5			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99f4	a0 00		ldy #$00			ldy #0			; get char
.99f6	b1 04		lda ($04),y			lda (cib),y
.99f8	c9 2e		cmp #$2e			cmp #'.'
.99fa	d0 31		bne $9a2d			bne _prefix_dollar
.99fc	20 7a 9e	jsr $9e7a			jsr ed_have_text
.99ff	a5 20		lda $20				lda ed_cur
.9a01	95 26		sta $26,x			sta DStack+2,x
.9a03	a5 21		lda $21				lda ed_cur+1
.9a05	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a07	a9 80		lda #$80			lda #%10000000
.9a09	05 22		ora $22				ora ed_flags
.9a0b	85 22		sta $22				sta ed_flags
.9a0d	a5 06		lda $06				lda ciblen
.9a0f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a11	d0 03		bne $9a16			bne +
.9a13	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.9a16					+
.9a16	a5 04		lda $04				lda cib+0
.9a18	a4 05		ldy $05				ldy cib+1
.9a1a	20 b8 b7	jsr $b7b8			jsr PushYA
.9a1d	a5 06		lda $06				lda ciblen+0
.9a1f	a4 07		ldy $07				ldy ciblen+1
.9a21	20 b8 b7	jsr $b7b8			jsr PushYA
.9a24	20 44 ca	jsr $ca44			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a27	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a2a	4c ff 9a	jmp $9aff			jmp _check_for_para2
.9a2d					_prefix_dollar:
.9a2d	c9 24		cmp #$24			cmp #'$'
.9a2f	d0 1f		bne $9a50			bne _prefix_percent
.9a31	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a34	e8		inx				inx
.9a35	e8		inx				inx			; ( addr-t u-t 0 )
.9a36	20 a7 9e	jsr $9ea7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a39	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t para1 0 )
.9a3c	a9 80		lda #$80			lda #%10000000
.9a3e	05 22		ora $22				ora ed_flags
.9a40	85 22		sta $22				sta ed_flags
.9a42	a5 06		lda $06				lda ciblen
.9a44	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a46	d0 03		bne $9a4b			bne +
.9a48	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.9a4b					+
.9a4b	a0 01		ldy #$01			ldy #1
.9a4d	4c 75 9b	jmp $9b75			jmp _check_command
.9a50					_prefix_percent:
.9a50	c9 25		cmp #$25			cmp #'%'
.9a52	f0 04		beq $9a58			beq _whole_text
.9a54	c9 2c		cmp #$2c			cmp #','
.9a56	d0 1b		bne $9a73			bne _prefix_semicolon
.9a58					_whole_text:
.9a58	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a5b	a9 01		lda #$01			lda #1
.9a5d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a5f	a9 00		lda #$00			lda #0
.9a61	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a63					_semicolon_entry:
.9a63	e8		inx				inx
.9a64	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a65	20 a7 9e	jsr $9ea7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a68	a9 80		lda #$80			lda #%10000000
.9a6a	05 22		ora $22				ora ed_flags
.9a6c	85 22		sta $22				sta ed_flags
.9a6e	a0 01		ldy #$01			ldy #1
.9a70	4c 75 9b	jmp $9b75			jmp _check_command
.9a73					_prefix_semicolon:
.9a73	c9 3b		cmp #$3b			cmp #';'
.9a75	d0 0e		bne $9a85			bne _prefix_number
.9a77	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a7a	a5 20		lda $20				lda ed_cur
.9a7c	95 26		sta $26,x			sta DStack+2,x
.9a7e	a5 21		lda $21				lda ed_cur+1
.9a80	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a82	4c 63 9a	jmp $9a63			jmp _semicolon_entry
.9a85					_prefix_number:
.9a85	20 f5 b7	jsr $b7f5			jsr Zero
.9a88	20 f5 b7	jsr $b7f5			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a8b	a5 04		lda $04				lda cib+0
.9a8d	a4 05		ldy $05				ldy cib+1
.9a8f	20 b8 b7	jsr $b7b8			jsr PushYA
.9a92	a5 06		lda $06				lda ciblen+0
.9a94	a4 07		ldy $07				ldy ciblen+1
.9a96	20 b8 b7	jsr $b7b8			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9a99	20 54 b0	jsr $b054			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9a9c	b5 24		lda $24,x			lda DStack+0,x
.9a9e	15 25		ora $25,x			ora DStack+1,x
.9aa0	d0 25		bne $9ac7			bne _have_unconverted_chars
.9aa2	20 45 c5	jsr $c545			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aa5	20 1c c0	jsr $c01c			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aa8	20 87 ce	jsr $ce87			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9aab	e8		inx				inx
.9aac	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9aad					_line_number_only_from_external:
.9aad	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t 0 u )
.9ab0	20 86 9e	jsr $9e86			jsr ed_is_valid_line
.9ab3	b0 03		bcs $9ab8			bcs +
.9ab5	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9ab8					+
.9ab8	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t u 0 )
.9abb	20 e6 9e	jsr $9ee6			jsr ed_para1_to_cur
.9abe	a9 80		lda #$80			lda #%10000000
.9ac0	05 22		ora $22				ora ed_flags
.9ac2	85 22		sta $22				sta ed_flags
.9ac4	4c 44 9d	jmp $9d44			jmp ed_cmd_p_from_external
.9ac7					_have_unconverted_chars:
.9ac7	a5 06		lda $06				lda ciblen+0
.9ac9	d5 24		cmp $24,x			cmp DStack+0,x
.9acb	d0 16		bne $9ae3			bne _no_command_yet
.9acd	a5 07		lda $07				lda ciblen+1
.9acf	d5 25		cmp $25,x			cmp DStack+1,x
.9ad1	d0 10		bne $9ae3			bne _no_command_yet
.9ad3	8a		txa				txa
.9ad4	18		clc				clc
.9ad5	69 08		adc #$08			adc #8
.9ad7	aa		tax				tax			; ( addr-t u-t 0 0 )
.9ad8	a9 7f		lda #$7f			lda #$ff-%10000000
.9ada	25 22		and $22				and ed_flags
.9adc	85 22		sta $22				sta ed_flags
.9ade	a0 00		ldy #$00			ldy #0
.9ae0	4c 75 9b	jmp $9b75			jmp _check_command
.9ae3					_no_command_yet:
.9ae3	20 f1 ce	jsr $cef1			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9ae6	20 87 ce	jsr $ce87			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9ae9	20 1c c0	jsr $c01c			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9aec	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9aee	95 2a		sta $2a,x			sta DStack+6,x
.9af0	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af2	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9af4	e8		inx				inx
.9af5	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9af6	20 0f cf	jsr $cf0f			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9af9	a9 80		lda #$80			lda #%10000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff					_check_for_para2:
.9aff	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b01	c9 2c		cmp #$2c			cmp #','
.9b03	f0 0c		beq $9b11			beq _got_comma
.9b05	38		sec				sec
.9b06	a5 06		lda $06				lda ciblen
.9b08	f5 24		sbc $24,x			sbc DStack+0,x
.9b0a	a8		tay				tay
.9b0b	20 45 c5	jsr $c545			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b0e	4c 75 9b	jmp $9b75			jmp _check_command
.9b11					_got_comma:
.9b11	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b14	20 44 ca	jsr $ca44			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b17	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b19	c9 24		cmp #$24			cmp #'$'
.9b1b	d0 16		bne $9b33			bne _para2_not_dollar
.9b1d	38		sec				sec
.9b1e	a5 06		lda $06				lda ciblen
.9b20	f5 26		sbc $26,x			sbc DStack+2,x
.9b22	a8		tay				tay
.9b23	c8		iny				iny
.9b24	98		tya				tya
.9b25	48		pha				pha
.9b26	8a		txa				txa
.9b27	18		clc				clc
.9b28	69 06		adc #$06			adc #6
.9b2a	aa		tax				tax			; ( addr-t u-t para1 )
.9b2b	20 a7 9e	jsr $9ea7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b2e	68		pla				pla
.9b2f	a8		tay				tay
.9b30	4c 75 9b	jmp $9b75			jmp _check_command
.9b33					_para2_not_dollar:
.9b33	20 f1 ce	jsr $cef1			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b36	20 f5 b7	jsr $b7f5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b39	20 f5 b7	jsr $b7f5			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b3c	20 62 ce	jsr $ce62			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b3f	20 0f cf	jsr $cf0f			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b42	20 67 cf	jsr $cf67			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b45	20 f1 ce	jsr $cef1			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b48	20 54 b0	jsr $b054			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b4b	20 67 cf	jsr $cf67			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b4e	20 0f cf	jsr $cf0f			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b51	20 4d c8	jsr $c84d			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b54	b5 24		lda $24,x			lda DStack+0,x
.9b56	15 25		ora $25,x			ora DStack+1,x
.9b58	f0 08		beq $9b62			beq _second_number
.9b5a	8a		txa				txa
.9b5b	18		clc				clc
.9b5c	69 0c		adc #$0c			adc #12
.9b5e	aa		tax				tax			; back to ( addr-t u-t )
.9b5f	4c 5d 9e	jmp $9e5d			jmp ed_error
.9b62					_second_number:
.9b62	e8		inx				inx
.9b63	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b64	38		sec				sec
.9b65	a5 06		lda $06				lda ciblen
.9b67	f5 24		sbc $24,x			sbc DStack+0,x
.9b69	48		pha				pha
.9b6a	20 45 c5	jsr $c545			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b6d	20 1c c0	jsr $c01c			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b70	20 9f c9	jsr $c99f			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b73	68		pla				pla
.9b74	a8		tay				tay
.9b75					_check_command:
.9b75	24 22		bit $22				bit ed_flags
.9b77	30 08		bmi $9b81			bmi _check_command_have_arg
.9b79	a5 20		lda $20				lda ed_cur+0
.9b7b	95 26		sta $26,x			sta DStack+2,x
.9b7d	a5 21		lda $21				lda ed_cur+1
.9b7f	95 27		sta $27,x			sta DStack+3,x
.9b81					_check_command_have_arg:
.9b81	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b83	85 14		sta $14				sta tmp1+0
.9b85	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b87	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b89	e8		inx		_cmd_loop:	inx			;   next char
.9b8a	bd 0a 9f	lda $9f0a,x			lda ed_cmd_list,x
.9b8d	f0 13		beq $9ba2			beq _illegal_command	;   end of list?
.9b8f	c5 14		cmp $14				cmp tmp1+0
.9b91	d0 f6		bne $9b89			bne _cmd_loop		;   not found?
.9b93	8a		txa				txa
.9b94	0a		asl a				asl
.9b95	aa		tax				tax			; X * 2 for table
.9b96	bd 16 9f	lda $9f16,x			lda ed_cmd_table+1,x
.9b99	48		pha				pha
.9b9a	bd 15 9f	lda $9f15,x			lda ed_Cmd_table+0,x
.9b9d	48		pha				pha
.9b9e	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba0	08		php				php
.9ba1	40		rti				rti			; jump to command routine
.9ba2					_illegal_command:
.9ba2	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9ba5					ed_next_command:
.9ba5	20 45 c5	jsr $c545			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ba8					_next_command_empty:
.9ba8	4c c3 99	jmp $99c3			jmp ed_input_loop
.9bab					ed_all_done:
.9bab	a9 00		lda #$00			lda #0
.9bad	85 06		sta $06				sta ciblen
.9baf	85 07		sta $07				sta ciblen+1
.9bb1	20 45 c5	jsr $c545			jsr Two_drop			; ( addr-t u-t )
.9bb4	a5 23		lda $23				lda editor3+1
.9bb6	8d 00 03	sta $0300			sta base
.9bb9	60		rts				rts
.9bba					ed_cmd_a:
.9bba	e8		inx				inx
.9bbb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbc					ed_entry_cmd_i:
.9bbc					ed_cmd_a_have_para:
.9bbc	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bbf	20 75 ab	jsr $ab75			jsr CR
.9bc2					_next_string_loop:
.9bc2	20 6b 9e	jsr $9e6b			jsr ed_get_input
.9bc5	a0 00		ldy #$00			ldy #0
.9bc7	b1 04		lda ($04),y			lda (cib),y
.9bc9	c9 2e		cmp #$2e			cmp #'.'
.9bcb	d0 18		bne $9be5			bne _add_line
.9bcd	a4 06		ldy $06				ldy ciblen
.9bcf	c0 01		cpy #$01			cpy #1
.9bd1	d0 12		bne $9be5			bne _add_line
.9bd3	a4 07		ldy $07				ldy ciblen+1
.9bd5	d0 0e		bne $9be5			bne _add_line
.9bd7	e8		inx				inx
.9bd8	e8		inx				inx
.9bd9	a9 40		lda #$40			lda #%01000000
.9bdb	05 22		ora $22				ora ed_flags
.9bdd	85 22		sta $22				sta ed_flags
.9bdf	20 75 ab	jsr $ab75			jsr CR
.9be2	4c c3 99	jmp $99c3			jmp ed_input_loop
.9be5					_add_line:
.9be5	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9be8	20 37 ca	jsr $ca37			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9beb	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bee	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf1	20 0c cd	jsr $cd0c			jsr Comma		; ( addr-t u-t addr1 here )
.9bf4	20 d3 cc	jsr $ccd3			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bf7	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t here here addr1 )
.9bfa	20 c2 ce	jsr $cec2			jsr Store		; ( addr-t u-t here )
.9bfd	20 37 ca	jsr $ca37			jsr Here		; HERE ( addr-t u-t here here2)
.9c00	a9 04		lda #$04			lda #4
.9c02	20 e7 b7	jsr $b7e7			jsr PushZA
.9c05	20 b1 c0	jsr $c0b1			jsr Allot
.9c08	e6 20		inc $20				inc ed_cur
.9c0a	d0 02		bne $9c0e			bne +
.9c0c	e6 21		inc $21				inc ed_cur+1
.9c0e					+
.9c0e	20 37 ca	jsr $ca37			jsr Here	; ( addr-t u-t here here2 here3 )
.9c11	a5 04		lda $04				lda cib+0
.9c13	a4 05		ldy $05				ldy cib+1
.9c15	20 b8 b7	jsr $b7b8			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c18	20 40 cf	jsr $cf40			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c1b	a5 06		lda $06				lda ciblen+0
.9c1d	a4 07		ldy $07				ldy ciblen+1
.9c1f	20 b8 b7	jsr $b7b8			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c22	20 84 ad	jsr $ad84			jsr Move	; ( addr-t u-t here here2 here3 )
.9c25	18		clc				clc
.9c26	a5 00		lda $00				lda cp
.9c28	65 06		adc $06				adc ciblen
.9c2a	85 00		sta $00				sta cp
.9c2c	90 06		bcc $9c34			bcc +
.9c2e	a5 01		lda $01				lda cp+1
.9c30	65 07		adc $07				adc ciblen+1
.9c32	85 01		sta $01				sta cp+1
.9c34					+
.9c34	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c37	20 c2 ce	jsr $cec2			jsr Store		; ( addr-t u-t here here2 )
.9c3a	20 19 ca	jsr $ca19			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c3d	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c40	a5 06		lda $06				lda ciblen
.9c42	95 26		sta $26,x			sta DStack+2,x
.9c44	a5 07		lda $07				lda ciblen+1
.9c46	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c48	20 c2 ce	jsr $cec2			jsr Store		; ( addr-t u-t here )
.9c4b	20 75 ab	jsr $ab75			jsr CR			; Add a line feed for visuals
.9c4e	4c c2 9b	jmp $9bc2			jmp _next_string_loop
.9c51					ed_cmd_d:
.9c51	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9c54	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9c57	b5 24		lda $24,x			lda DStack+0,x
.9c59	15 25		ora $25,x			ora DStack+1,x
.9c5b	d0 09		bne $9c66			bne +
.9c5d	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c60	20 9b 9c	jsr $9c9b			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c63	4c 8f 9c	jmp $9c8f			jmp _cmd_d_done
.9c66					+
.9c66	20 86 9e	jsr $9e86			jsr ed_is_valid_line	  ; result is in C flag
.9c69	b0 03		bcs $9c6e			bcs _cmd_d_loop
.9c6b	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9c6e					_cmd_d_loop:
.9c6e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c70	d5 26		cmp $26,x			cmp DStack+2,x
.9c72	b5 25		lda $25,x			lda DStack+1,x
.9c74	f5 27		sbc $27,x			sbc DStack+3,x
.9c76	90 0c		bcc $9c84			bcc _cmd_d_done_with_flag
.9c78	20 67 cf	jsr $cf67			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c7b	20 9b 9c	jsr $9c9b			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c7e	20 44 ca	jsr $ca44			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c81	4c 6e 9c	jmp $9c6e			jmp _cmd_d_loop
.9c84					_cmd_d_done_with_flag:
.9c84	20 50 ca	jsr $ca50			jsr NOS_One_Minus
.9c87	b5 26		lda $26,x			lda DStack+2,x
.9c89	85 20		sta $20				sta ed_cur
.9c8b	b5 27		lda $27,x			lda DStack+3,x
.9c8d	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c8f					_cmd_d_done:
.9c8f	a9 40		lda #$40			lda #%01000000
.9c91	05 22		ora $22				ora ed_flags
.9c93	85 22		sta $22				sta ed_flags
.9c95	20 75 ab	jsr $ab75			jsr CR
.9c98	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9c9b					_cmd_d_common:
.9c9b	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u-t u u )
.9c9e	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca1	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr-t u-t u addr1 )
.9ca4	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t addr1 u )
.9ca7	20 44 ca	jsr $ca44			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9caa	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9cad	4c c2 ce	jmp $cec2			jmp Store		; ( addr-t u-t )
.9cb0					ed_cmd_equ:
.9cb0	a5 1e		lda $1e				lda ed_head
.9cb2	05 1f		ora $1f				ora ed_head+1
.9cb4	d0 06		bne $9cbc			bne _cmd_equ_have_text
.9cb6	20 f5 b7	jsr $b7f5			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cb9	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done
.9cbc					_cmd_equ_have_text:
.9cbc	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9cbf	24 22		bit $22				bit ed_flags
.9cc1	30 0a		bmi $9ccd			bmi _cmd_equ_have_para
.9cc3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9cc5	a4 21		ldy $21				ldy ed_cur+1
.9cc7	20 b8 b7	jsr $b7b8			jsr PushYA
.9cca	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9ccd					_cmd_equ_have_para:
.9ccd	b5 24		lda $24,x			lda DStack+0,x
.9ccf	15 25		ora $25,x			ora DStack+1,x
.9cd1	d0 06		bne $9cd9			bne _cmd_equ_two_paras
.9cd3	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cd6	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done
.9cd9					_cmd_equ_two_paras:
.9cd9	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9cdc					_cmd_equ_done:
.9cdc	20 75 ab	jsr $ab75			jsr CR			; number goes on new line
.9cdf	20 0f cc	jsr $cc0f			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce2	20 75 ab	jsr $ab75			jsr CR
.9ce5	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9ce8					ed_cmd_f:
.9ce8	24 22		bit $22				bit ed_flags
.9cea	30 18		bmi $9d04			bmi _cmd_f_have_para
.9cec	20 75 ab	jsr $ab75			jsr CR
.9cef	20 f1 ce	jsr $cef1			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf2	20 62 ce	jsr $ce62			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cf5	20 67 cf	jsr $cf67			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cf8	20 0f cc	jsr $cc0f			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9cfb	20 87 ce	jsr $ce87			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9cfe	20 0f cf	jsr $cf0f			jsr R_From		; ( addr-t u-t 0 0 )
.9d01	4c 15 9d	jmp $9d15			jmp _cmd_f_done
.9d04					_cmd_f_have_para:
.9d04	20 40 cf	jsr $cf40			jsr Over
.9d07	20 75 ab	jsr $ab75			jsr CR
.9d0a	20 0f cc	jsr $cc0f			jsr U_Dot
.9d0d	b5 26		lda $26,x			lda DStack+2,x
.9d0f	95 2a		sta $2a,x			sta DStack+6,x
.9d11	b5 27		lda $27,x			lda DStack+3,x
.9d13	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d15					_cmd_f_done:
.9d15	20 75 ab	jsr $ab75			jsr CR
.9d18	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9d1b					ed_cmd_i:
.9d1b	e8		inx				inx
.9d1c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d1d	24 22		bit $22				bit ed_flags
.9d1f	30 08		bmi $9d29			bmi _cmd_i_have_para
.9d21	a5 20		lda $20				lda ed_cur
.9d23	95 24		sta $24,x			sta DStack+0,x
.9d25	a5 21		lda $21				lda ed_cur+1
.9d27	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d29					_cmd_i_have_para:
.9d29	b5 24		lda $24,x			lda DStack+0,x
.9d2b	15 25		ora $25,x			ora DStack+1,x
.9d2d	f0 09		beq $9d38			beq _cmd_i_done
.9d2f	20 44 ca	jsr $ca44			jsr One_minus		; ( addr-t u-t para1-1 )
.9d32	20 f5 b7	jsr $b7f5			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d35	20 85 c9	jsr $c985			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d38					_cmd_i_done:
.9d38	4c bc 9b	jmp $9bbc			jmp ed_entry_cmd_i
.9d3b					ed_cmd_n:
.9d3b	a9 01		lda #$01			lda #%00000001
.9d3d	05 22		ora $22				ora ed_flags
.9d3f	85 22		sta $22				sta ed_flags
.9d41	4c 4a 9d	jmp $9d4a			jmp ed_cmd_p_entry_for_cmd_n
.9d44					ed_cmd_p:
.9d44					ed_cmd_p_from_external:
.9d44	a9 fe		lda #$fe			lda #$ff-%00000001
.9d46	25 22		and $22				and ed_flags
.9d48	85 22		sta $22				sta ed_flags
.9d4a					ed_cmd_p_entry_for_cmd_n:
.9d4a	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9d4d	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9d50	20 75 ab	jsr $ab75			jsr CR
.9d53	b5 24		lda $24,x			lda DStack+0,x
.9d55	15 25		ora $25,x			ora DStack+1,x
.9d57	d0 11		bne $9d6a			bne _cmd_p_loop
.9d59	b5 26		lda $26,x			lda DStack+2,x
.9d5b	85 20		sta $20				sta ed_cur
.9d5d	b5 27		lda $27,x			lda DStack+3,x
.9d5f	85 21		sta $21				sta ed_cur+1
.9d61	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d64	20 8b 9d	jsr $9d8b			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d67	4c 88 9d	jmp $9d88			jmp _cmd_p_all_done
.9d6a					_cmd_p_loop:
.9d6a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d6c	d5 26		cmp $26,x			cmp DStack+2,x
.9d6e	b5 25		lda $25,x			lda DStack+1,x
.9d70	f5 27		sbc $27,x			sbc DStack+3,x
.9d72	90 0c		bcc $9d80			bcc _cmd_p_done
.9d74	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d77	20 8b 9d	jsr $9d8b			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d7a	20 73 ca	jsr $ca73			jsr NOS_One_Plus
.9d7d	4c 6a 9d	jmp $9d6a			jmp _cmd_p_loop
.9d80					_cmd_p_done:
.9d80	b5 24		lda $24,x			lda DStack+0,x
.9d82	85 20		sta $20				sta ed_cur
.9d84	b5 25		lda $25,x			lda DStack+1,x
.9d86	85 21		sta $21				sta ed_cur+1
.9d88					_cmd_p_all_done:
.9d88	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9d8b					_cmd_p_common:
.9d8b	a5 22		lda $22				lda ed_flags
.9d8d	4a		lsr a				lsr			; bit 0 now in carry
.9d8e	90 0b		bcc $9d9b			bcc _cmd_p_common_no_num
.9d90	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u-t para1 para1 )
.9d93	20 0f cc	jsr $cc0f			jsr U_Dot		; ( addr-t u-t para1 )
.9d96	a9 09		lda #$09			lda #AscHT
.9d98	20 d1 cd	jsr $cdd1			jsr Emit_A
.9d9b					_cmd_p_common_no_num:
.9d9b	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9d9e	4c ef 9e	jmp $9eef			jmp ed_print_addr
.9da1					ed_cmd_q:
.9da1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9da3	50 03		bvc $9da8			bvc +
.9da5	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9da8					+
.9da8	4c ab 9b	jmp $9bab			jmp ed_all_done		   ; can't fall thru because of PLX
.9dab					ed_cmd_qq:
.9dab	4c ab 9b	jmp $9bab			jmp ed_all_done
.9dae					ed_cmd_w:
.9dae	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9db1	24 22		bit $22				bit ed_flags		; parameter given?
.9db3	30 12		bmi $9dc7			bmi _cmd_w_have_para
.9db5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9db7	d0 03		bne $9dbc			bne +
.9db9	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9dbc					+
.9dbc	b5 2a		lda $2a,x			lda DStack+6,x
.9dbe	95 26		sta $26,x			sta DStack+2,x
.9dc0	b5 2b		lda $2b,x			lda DStack+7,x
.9dc2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dc4	4c cf 9d	jmp $9dcf			jmp _cmd_w_para_ready
.9dc7					_cmd_w_have_para:
.9dc7	b5 26		lda $26,x			lda DStack+2,x
.9dc9	95 2a		sta $2a,x			sta DStack+6,x
.9dcb	b5 27		lda $27,x			lda DStack+3,x
.9dcd	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dcf					_cmd_w_para_ready:
.9dcf	a9 1e		lda #$1e			lda #<ed_head
.9dd1	95 24		sta $24,x			sta DStack+0,x
.9dd3	a9 00		lda #$00			lda #>ed_head
.9dd5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dd7	20 40 cf	jsr $cf40			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9dda	20 f1 ce	jsr $cef1			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9ddd					_cmd_w_loop:
.9ddd	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de0	b5 24		lda $24,x			lda DStack+0,x
.9de2	15 25		ora $25,x			ora DStack+1,x
.9de4	f0 4d		beq $9e33			beq _cmd_w_eol
.9de6	20 b3 cc	jsr $ccb3			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9de9	20 75 c6	jsr $c675			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9dec	20 19 ca	jsr $ca19			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9def	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df2	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9df5	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9df8	20 19 ca	jsr $ca19			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9dfb	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9dfe	20 87 ce	jsr $ce87			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e01	20 84 cf	jsr $cf84			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e04	20 62 ce	jsr $ce62			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e07	20 67 cf	jsr $cf67			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e0a	20 f1 ce	jsr $cef1			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e0d	20 84 ad	jsr $ad84			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e10	20 0f cf	jsr $cf0f			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e13	20 51 c6	jsr $c651			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e16	20 87 ce	jsr $ce87			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e19	20 ae cb	jsr $cbae			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e1c	20 67 cf	jsr $cf67			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e1f	a9 0a		lda #$0a			lda #AscLF
.9e21	20 e7 b7	jsr $b7e7			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e24	20 84 cf	jsr $cf84			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e27	20 c2 ce	jsr $cec2			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e2a	20 69 ca	jsr $ca69			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e2d	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e30	4c dd 9d	jmp $9ddd			jmp _cmd_w_loop
.9e33					_cmd_w_eol:
.9e33	20 84 cf	jsr $cf84			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e36	20 0f cf	jsr $cf0f			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e39	20 c6 cb	jsr $cbc6			jsr Minus		; ( addr-t u-t addr-n u )
.9e3c	b5 24		lda $24,x			lda DStack+0,x
.9e3e	95 28		sta $28,x			sta DStack+4,x
.9e40	b5 25		lda $25,x			lda DStack+1,x
.9e42	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e44	20 75 ab	jsr $ab75			jsr CR
.9e47	20 67 cf	jsr $cf67			jsr Dup			; ( addr-t u addr-n u u )
.9e4a	20 0f cc	jsr $cc0f			jsr U_Dot		; ( addr-t u addr-n u )
.9e4d	20 75 ab	jsr $ab75			jsr CR
.9e50	a9 bf		lda #$bf			lda #$ff-%01000000
.9e52	25 22		and $22				and ed_flags
.9e54	85 22		sta $22				sta ed_flags
.9e56	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9e59					ed_error_2drop:
.9e59	e8		inx				inx			; Drop para2
.9e5a	e8		inx				inx
.9e5b					ed_error_1drop:
.9e5b	e8		inx				inx			; Drop para1
.9e5c	e8		inx				inx
.9e5d					ed_error:
.9e5d	20 75 ab	jsr $ab75			jsr CR
.9e60	a9 3f		lda #$3f			lda #'?'
.9e62	20 d1 cd	jsr $cdd1			jsr Emit_A
.9e65	20 75 ab	jsr $ab75			jsr CR
.9e68	4c c3 99	jmp $99c3			jmp ed_input_loop
.9e6b					ed_get_input:
.9e6b	20 75 c2	jsr $c275			jsr Refill		;  ( addr-t u-t f )
.9e6e	b5 24		lda $24,x			lda DStack+0,x
.9e70	d0 05		bne $9e77			bne +
.9e72	68		pla				pla
.9e73	68		pla				pla
.9e74	4c 5b 9e	jmp $9e5b			jmp ed_error_1drop
.9e77					+
.9e77	e8		inx				inx
.9e78	e8		inx				inx
.9e79	60		rts				rts
.9e7a					ed_have_text:
.9e7a	a5 1e		lda $1e				lda ed_head
.9e7c	05 1f		ora $1f				ora ed_head+1
.9e7e	d0 05		bne $9e85			bne +
.9e80	68		pla				pla
.9e81	68		pla				pla
.9e82	4c 5d 9e	jmp $9e5d			jmp ed_error
.9e85					+
.9e85	60		rts				rts
.9e86					ed_is_valid_line:
.9e86	38		sec				sec				; default is legal line number
.9e87	b5 24		lda $24,x			lda DStack+0,x
.9e89	15 25		ora $25,x			ora DStack+1,x
.9e8b	f0 18		beq $9ea5			beq _nope_zero	; ( n )
.9e8d	20 67 cf	jsr $cf67			jsr Dup				; ( n n )
.9e90	20 a7 9e	jsr $9ea7			jsr ed_last_line		; ( n n last )
.9e93	20 84 cf	jsr $cf84			jsr Swap			; ( n last n )
.9e96	20 81 c8	jsr $c881			jsr Less_Than			; ( n f )
.9e99	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9e9b	15 25		ora $25,x			ora DStack+1,x
.9e9d	d0 04		bne $9ea3			bne _too_small
.9e9f	e8		inx				inx
.9ea0	e8		inx				inx			; DROP flag ( n )
.9ea1	38		sec				sec			; signal valid
.9ea2	60		rts				rts
.9ea3					_too_small:
.9ea3	e8		inx				inx
.9ea4	e8		inx				inx
.9ea5					_nope_zero:
.9ea5	18		clc				clc			; signal not valid
.9ea6	60		rts				rts
.9ea7					ed_last_line:
.9ea7	20 f5 b7	jsr $b7f5			jsr Zero		; Set counter to zero
.9eaa	a9 1e		lda #$1e			lda #ed_head
.9eac	20 e7 b7	jsr $b7e7			jsr PushZA		; ( count addr )
.9eaf					_loop:
.9eaf	20 a9 ce	jsr $cea9			jsr Fetch		; ( count addr|0 )
.9eb2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9eb4	f0 06		beq $9ebc			beq _done
.9eb6	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; Increase counter
.9eb9	4c af 9e	jmp $9eaf			jmp _loop		; continue
.9ebc					_done:
.9ebc	60		rts				rts
.9ebd					ed_no_line_zero:
.9ebd	b5 26		lda $26,x			lda DStack+2,x
.9ebf	15 27		ora $27,x			ora DStack+3,x
.9ec1	d0 07		bne $9eca			bne _done
.9ec3	24 22		bit $22				bit ed_flags
.9ec5	10 03		bpl $9eca			bpl _done
.9ec7	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9eca					_done:
.9eca	60		rts				rts
.9ecb					ed_num_to_addr:
.9ecb	a9 1e		lda #$1e			lda #ed_head
.9ecd	20 e7 b7	jsr $b7e7			jsr PushZA		; ( u addr-h )
.9ed0	4c dd 9e	jmp $9edd			jmp _test
.9ed3					_loop:
.9ed3	20 a9 ce	jsr $cea9			jsr Fetch		; @ ( u addr1 )
.9ed6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9ed8	f0 09		beq $9ee3			beq _finished
.9eda	20 50 ca	jsr $ca50			jsr NOS_One_Minus	; decrement the line count
.9edd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9edf	15 27		ora $27,x			ora DStack+3,x
.9ee1	d0 f0		bne $9ed3			bne _loop
.9ee3					_finished:
.9ee3	4c 9f c9	jmp $c99f			jmp Nip			; ( addr )
.9ee6					ed_para1_to_cur:
.9ee6	b5 26		lda $26,x			lda DStack+2,x
.9ee8	85 20		sta $20				sta ed_cur
.9eea	b5 27		lda $27,x			lda DStack+3,x
.9eec	85 21		sta $21				sta ed_cur+1
.9eee	60		rts				rts
.9eef					ed_print_addr:
.9eef	20 16 ca	jsr $ca16			jsr Cell_Plus		; ( addr+2 )
.9ef2	20 67 cf	jsr $cf67			jsr Dup			; ( addr+2 addr+2 )
.9ef5	20 16 ca	jsr $ca16			jsr Cell_Plus		; ( addr+2 addr+4 )
.9ef8	20 a9 ce	jsr $cea9			jsr Fetch		; ( addr+2 u-s )
.9efb	20 84 cf	jsr $cf84			jsr Swap		; ( u-s addr+2 )
.9efe	20 a9 ce	jsr $cea9			jsr Fetch		; ( u-s addr-s )
.9f01	20 84 cf	jsr $cf84			jsr Swap		; ( addr-s u-s )
.9f04	20 e9 cd	jsr $cde9			jsr Type
.9f07	4c 75 ab	jmp $ab75			jmp CR
>9f0a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f12	71 51 00
.9f15					ed_cmd_table:
>9f15	ba 9b e8 9c 1b 9d 51 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f1d	44 9d 3b 9d
>9f21	b0 9c ae 9d a1 9d ab 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f29					ed6502_end:
>9f29	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=40620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f2c	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f2d	11					.byte WordFlags	;wh_Flags
>9f2e	03					.byte 3	;wh_CodeLength
>9f2f	1f 99					  .word WordListLink
=$9f31					XtPtr1 ::= *
=40620					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f31					See:
.9f31	20 41 bc	jsr $bc41			jsr Tick_Nt		; ( nt )
.9f34	20 75 ab	jsr $ab75			jsr CR
.9f37	ad 00 03	lda $0300			lda base		; Save the current number base
.9f3a	48		pha				pha
.9f3b	a9 3d		lda #$3d			lda #<str_see_nt	; print nt
.9f3d	a0 da		ldy #$da			ldy #>str_see_nt
.9f3f	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.9f42	20 67 cf	jsr $cf67			jsr Dup			; ( nt nt )
.9f45	20 15 a9	jsr $a915			jsr Dot_Hex
.9f48	20 dd cd	jsr $cddd			jsr Space		; ( nt )
.9f4b	20 67 cf	jsr $cf67			jsr Dup			; ( nt nt )
.9f4e	20 ac bd	jsr $bdac			jsr Name_To_Int		; ( nt xt )
.9f51	a9 43		lda #$43			lda #<str_see_xt	; print xt
.9f53	a0 da		ldy #$da			ldy #>str_see_xt
.9f55	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.9f58	20 67 cf	jsr $cf67			jsr Dup			; ( nt xt xt )
.9f5b	20 15 a9	jsr $a915			jsr Dot_Hex
.9f5e	20 75 ab	jsr $ab75			jsr CR			; ( nt xt )
.9f61	a9 36		lda #$36			lda #<str_see_flags
.9f63	a0 da		ldy #$da			ldy #>str_see_flags
.9f65	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.9f68	20 40 cf	jsr $cf40			jsr Over		; ( nt xt nt )
.9f6b	a9 81		lda #$81			lda #Wh_Flags
.9f6d	20 1b ca	jsr $ca1b			jsr Plus_A		; ( nt xt ^flags )
.9f70	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f72	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f74	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f76	20 dd cd	jsr $cddd	_flag_loop:	jsr Space
.9f79	b9 dd 9f	lda $9fdd,y			lda _FlagLabels+0,y	;   print label
.9f7c	20 d1 cd	jsr $cdd1			jsr Emit_A
.9f7f	b9 de 9f	lda $9fde,y			lda _FlagLabels+1,y
.9f82	20 d1 cd	jsr $cdd1			jsr Emit_A
.9f85	a9 3d		lda #$3d			lda #'='
.9f87	20 d1 cd	jsr $cdd1			jsr Emit_A
.9f8a	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f8c	a9 00		lda #$00			lda #0
.9f8e	69 30		adc #$30			adc #'0'
.9f90	20 d1 cd	jsr $cdd1			jsr Emit_A
.9f93	88		dey				dey
.9f94	88		dey				dey
.9f95	10 df		bpl $9f76			bpl _flag_loop
.9f97	e8		inx				inx
.9f98	e8		inx				inx			; ( nt xt )
.9f99	20 75 ab	jsr $ab75			jsr CR
.9f9c	a9 49		lda #$49			lda #<str_see_size	; print size
.9f9e	a0 da		ldy #$da			ldy #>str_see_size
.9fa0	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.9fa3	20 84 cf	jsr $cf84			jsr Swap		; ( xt nt )
.9fa6	20 2e ab	jsr $ab2e			jsr WordSize		; ( xt u )
.9fa9	20 d0 b1	jsr $b1d0			jsr Decimal
.9fac	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fae	c9 ff		cmp #$ff			cmp #$ff
.9fb0	d0 11		bne $9fc3			bne _size5
.9fb2	20 ac b8	jsr $b8ac			jsr sliteral_runtime	;   type "large"
.9fb5	4c bd 9f	jmp $9fbd			  jmp _size2
>9fb8	6c 61 72 67 65					  .text "large"
.9fbd	20 e9 cd	jsr $cde9	_size2:		jsr Type
.9fc0	4c c9 9f	jmp $9fc9			jmp _size9		;  else
.9fc3	20 67 cf	jsr $cf67	_size5:		jsr Dup			;    type size
.9fc6	20 0f cc	jsr $cc0f			jsr U_Dot
.9fc9					_size9:
.9fc9	20 75 ab	jsr $ab75			jsr CR
.9fcc	68		pla				pla			; restore base
.9fcd	8d 00 03	sta $0300			sta base
.9fd0	20 b3 cc	jsr $ccb3			jsr Two_dup
.9fd3	20 6f a8	jsr $a86f			jsr Dump		; dump
.9fd6	20 75 ab	jsr $ab75			jsr CR
.9fd9	20 ec d7	jsr $d7ec			jsr DisAsm		; disassemble
=171					CL	.var *-XtPtr1
=$9fdc					en = *	; remember here
>9f2e	ab					.byte CL	;wh_CodeLength
.9fdc	60		rts				rts
>9fdd	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fe5	4e 4e 41 4e 55 46 5f 5f
>9fed	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ff5	72 64 4c 69 73 74
=40827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9ffb	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>9ffc	10					.byte WordFlags	;wh_Flags
>9ffd	03					.byte 3	;wh_CodeLength
>9ffe	cf					  .byte LinkDisplacement
=$9fff					XtPtr1 ::= *
=40827					WordListLink ::= Nt0 ; remember the nt of this word for later
.9fff	4c f5 b7	jmp $b7f5	Forth_WordList:	jmp Zero
=3					CL	.var *-XtPtr1
=$a002					en = *	; remember here
>9ffd	03					.byte CL	;wh_CodeLength
>a002	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a00a	6f 72 64 4c 69 73 74
=40849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a011	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a012	10					.byte WordFlags	;wh_Flags
>a013	03					.byte 3	;wh_CodeLength
>a014	16					  .byte LinkDisplacement
=$a015					XtPtr1 ::= *
=40849					WordListLink ::= Nt0 ; remember the nt of this word for later
.a015					Editor_WordList:
.a015	4c fe b7	jmp $b7fe			jmp One
=3					CL	.var *-XtPtr1
=$a018					en = *	; remember here
>a013	03					.byte CL	;wh_CodeLength
>a018	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a020	72 2d 57 6f 72 64 4c 69 73 74
=40874					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a02a	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a02b	10					.byte WordFlags	;wh_Flags
>a02c	03					.byte 3	;wh_CodeLength
>a02d	19					  .byte LinkDisplacement
=$a02e					XtPtr1 ::= *
=40874					WordListLink ::= Nt0 ; remember the nt of this word for later
.a02e					Assembler_WordList:
.a02e	4c 07 b8	jmp $b807			jmp Two
=3					CL	.var *-XtPtr1
=$a031					en = *	; remember here
>a02c	03					.byte CL	;wh_CodeLength
>a031	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a039	64 6c 69 73 74
=40894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a03e	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a03f	10					.byte WordFlags	;wh_Flags
>a040	03					.byte 3	;wh_CodeLength
>a041	14					  .byte LinkDisplacement
=$a042					XtPtr1 ::= *
=40894					WordListLink ::= Nt0 ; remember the nt of this word for later
.a042	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a044	4c e7 b7	jmp $b7e7			jmp PushZA
=5					CL	.var *-XtPtr1
=$a047					en = *	; remember here
>a040	05					.byte CL	;wh_CodeLength
>a047	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=40907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a04b	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a04c	10					.byte WordFlags	;wh_Flags
>a04d	03					.byte 3	;wh_CodeLength
>a04e	0d					  .byte LinkDisplacement
=$a04f					XtPtr1 ::= *
=40907					WordListLink ::= Nt0 ; remember the nt of this word for later
.a04f	20 c7 b7	jsr $b7c7	Only:		jsr True	; Push -1
.a052	4c 6f a1	jmp $a16f			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-XtPtr1
=$a055					en = *	; remember here
>a04d	06					.byte CL	;wh_CodeLength
>a055	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=40921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a059	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a05a	10					.byte WordFlags	;wh_Flags
>a05b	03					.byte 3	;wh_CodeLength
>a05c	0e					  .byte LinkDisplacement
=$a05d					XtPtr1 ::= *
=40921					WordListLink ::= Nt0 ; remember the nt of this word for later
.a05d	20 9f a1	jsr $a19f	Also:		jsr Get_Order
.a060	20 40 cf	jsr $cf40			jsr Over
.a063	20 84 cf	jsr $cf84			jsr Swap
.a066	20 69 ca	jsr $ca69			jsr One_plus
.a069	4c 6f a1	jmp $a16f			jmp Set_Order
=15					CL	.var *-XtPtr1
=$a06c					en = *	; remember here
>a05b	0f					.byte CL	;wh_CodeLength
>a06c	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=40948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a074	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a075	10					.byte WordFlags	;wh_Flags
>a076	03					.byte 3	;wh_CodeLength
>a077	1b					  .byte LinkDisplacement
=$a078					XtPtr1 ::= *
=40948					WordListLink ::= Nt0 ; remember the nt of this word for later
.a078	20 9f a1	jsr $a19f	Previous:	jsr Get_Order
.a07b	20 9f c9	jsr $c99f			jsr Nip
.a07e	20 44 ca	jsr $ca44			jsr One_minus
.a081	4c 6f a1	jmp $a16f			jmp Set_Order
=12					CL	.var *-XtPtr1
=$a084					en = *	; remember here
>a076	0c					.byte CL	;wh_CodeLength
>a084	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=40970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a08a	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a08b	10					.byte WordFlags	;wh_Flags
>a08c	03					.byte 3	;wh_CodeLength
>a08d	16					  .byte LinkDisplacement
=$a08e					XtPtr1 ::= *
=40970					WordListLink ::= Nt0 ; remember the nt of this word for later
.a08e					To_Order:
.a08e	20 f1 ce	jsr $cef1			jsr To_R		; Put the wid on the return stack for now.
.a091	20 9f a1	jsr $a19f			jsr Get_Order		; Get the current search order.
.a094	20 0f cf	jsr $cf0f			jsr R_From		; Get back the wid and add it to the list.
.a097	20 84 cf	jsr $cf84			jsr Swap
.a09a	20 69 ca	jsr $ca69			jsr One_plus
.a09d	4c 6f a1	jmp $a16f			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-XtPtr1
=$a0a0					en = *	; remember here
>a08c	12					.byte CL	;wh_CodeLength
>a0a0	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=40997					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0a5	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0a6	10					.byte WordFlags	;wh_Flags
>a0a7	03					.byte 3	;wh_CodeLength
>a0a8	1b					  .byte LinkDisplacement
=$a0a9					XtPtr1 ::= *
=40997					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0a9					Order:
.a0a9	20 75 ab	jsr $ab75			jsr CR
.a0ac	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0ae	f0 0b		beq $a0bb			beq _test
.a0b0	98		tya		_loop:		tya
.a0b1	48		pha				pha
.a0b2	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0b5	20 c6 a0	jsr $a0c6			jsr print_wid_stringA	; internal helper function
.a0b8	68		pla				pla
.a0b9	a8		tay				tay
.a0ba	c8		iny				iny			;  next
.a0bb	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0be	90 f0		bcc $a0b0			bcc _loop
.a0c0	20 75 ab	jsr $ab75			jsr CR
.a0c3	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0c6					print_wid_stringA:
.a0c6	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0c8	90 06		bcc $a0d0			bcc _string
.a0ca	20 e7 b7	jsr $b7e7			jsr PushZA		; print the WID number
.a0cd	4c 0f cc	jmp $cc0f			jmp U_Dot		; JSR/RTS
.a0d0	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d1	a8		tay				tay
.a0d2	ca		dex				dex			; TOS= word nt
.a0d3	ca		dex				dex
.a0d4	b9 ec a0	lda $a0ec,y			lda _wid_Table+0,y
.a0d7	95 24		sta $24,x			sta DStack+0,x
.a0d9	b9 ed a0	lda $a0ed,y			lda _wid_Table+1,y
.a0dc	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0de	20 f5 bd	jsr $bdf5			jsr Name_To_String	; ( addr u )
.a0e1	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0e3	20 59 ca	jsr $ca59			jsr Minus_A
.a0e6	20 e9 cd	jsr $cde9			jsr Type		; Print
.a0e9	4c dd cd	jmp $cddd			jmp Space
=67					CL	.var *-XtPtr1
=$a0ec					en = *	; remember here
>a0a7	43					.byte CL	;wh_CodeLength
.a0ec					_wid_Table:
>a0ec	7b 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0ee	91 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f0	aa 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f2	be 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0f4	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=41081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0f9	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a0fa	10					.byte WordFlags	;wh_Flags
>a0fb	03					.byte 3	;wh_CodeLength
>a0fc	54					  .byte LinkDisplacement
=$a0fd					XtPtr1 ::= *
=41081					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0fd	a9 00		lda #$00	Forth:		lda #wid_Forth
.a0ff	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-XtPtr1
=$a102					en = *	; remember here
>a0fb	05					.byte CL	;wh_CodeLength
.a102	60		rts				rts
>a103	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a10b	6f 6e 73
=41102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a10e	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a10f	10					.byte WordFlags	;wh_Flags
>a110	03					.byte 3	;wh_CodeLength
>a111	15					  .byte LinkDisplacement
=$a112					XtPtr1 ::= *
=41102					WordListLink ::= Nt0 ; remember the nt of this word for later
.a112	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a115	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-XtPtr1
=$a118					en = *	; remember here
>a110	06					.byte CL	;wh_CodeLength
.a118	60		rts				rts
>a119	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=41121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a121	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a122	10					.byte WordFlags	;wh_Flags
>a123	03					.byte 3	;wh_CodeLength
>a124	13					  .byte LinkDisplacement
=$a125					XtPtr1 ::= *
=41121					WordListLink ::= Nt0 ; remember the nt of this word for later
.a125					WordList:
.a125	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a128	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a12a	90 05		bcc $a131			bcc +
.a12c	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a12e	4c 80 b4	jmp $b480			jmp ThrowA
.a131					+
.a131	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a134	4c e7 b7	jmp $b7e7			jmp PushZA		; and put it on the stack.
=18					CL	.var *-XtPtr1
=$a137					en = *	; remember here
>a123	12					.byte CL	;wh_CodeLength
>a137	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a13f	65 6e 74
=41154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a142	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a143	00					.byte WordFlags	;wh_Flags
>a144	03					.byte 3	;wh_CodeLength
>a145	21					  .byte LinkDisplacement
=$a146					XtPtr1 ::= *
=41154					WordListLink ::= Nt0 ; remember the nt of this word for later
.a146	20 e0 b3	jsr $b3e0	Set_Current:	jsr PopA	; pop wid
.a149	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-XtPtr1
=$a14c					en = *	; remember here
>a144	06					.byte CL	;wh_CodeLength
.a14c	60		rts				rts
>a14d	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a155	65 6e 74
=41176					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a158	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a159	10					.byte WordFlags	;wh_Flags
>a15a	03					.byte 3	;wh_CodeLength
>a15b	16					  .byte LinkDisplacement
=$a15c					XtPtr1 ::= *
=41176					WordListLink ::= Nt0 ; remember the nt of this word for later
.a15c					Get_Current:
.a15c	ad 10 03	lda $0310			lda CurrentV
.a15f	4c e7 b7	jmp $b7e7			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-XtPtr1
=$a162					en = *	; remember here
>a15a	06					.byte CL	;wh_CodeLength
>a162	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a16a	72
=41195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a16b	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a16c	10					.byte WordFlags	;wh_Flags
>a16d	03					.byte 3	;wh_CodeLength
>a16e	13					  .byte LinkDisplacement
=$a16f					XtPtr1 ::= *
=41195					WordListLink ::= Nt0 ; remember the nt of this word for later
.a16f					Set_Order:
.a16f	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a171	10 08		bpl $a17b			bpl _start
.a173	e8		inx				inx			; Drop
.a174	e8		inx				inx
.a175	20 42 a0	jsr $a042			jsr Root_Wordlist	; wid
.a178	20 fe b7	jsr $b7fe			jsr One			; Count is 1.
.a17b					_start:
.a17b	20 e0 b3	jsr $b3e0			jsr PopA	; pop count
.a17e	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a181	a0 00		ldy #$00			ldy #0
.a183	f0 07		beq $a18c			beq _test
.a185					_loop:
.a185	20 e0 b3	jsr $b3e0			jsr PopA		; The search order is a byte array
.a188	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a18b	c8		iny				iny
.a18c					_test:
.a18c	cc 2a 03	cpy $032a			cpy Num_orderV
.a18f	d0 f4		bne $a185			bne _loop
=34					CL	.var *-XtPtr1
=$a191					en = *	; remember here
>a16d	22					.byte CL	;wh_CodeLength
.a191	60		rts				rts
>a192	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a19a	72
=41243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a19b	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a19c	10					.byte WordFlags	;wh_Flags
>a19d	03					.byte 3	;wh_CodeLength
>a19e	30					  .byte LinkDisplacement
=$a19f					XtPtr1 ::= *
=41243					WordListLink ::= Nt0 ; remember the nt of this word for later
.a19f					Get_Order:
.a19f	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a2	f0 09		beq $a1ad			beq _done	; If zero, there are no wordlists.
.a1a4					_loop:
.a1a4	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1a7	20 e7 b7	jsr $b7e7			jsr PushZA
.a1aa	88		dey				dey
.a1ab	d0 f7		bne $a1a4			bne _loop		; See if that was the last one to process (first in the list).
.a1ad					_done:
.a1ad	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b0	4c e7 b7	jmp $b7e7			jmp PushZA
=20					CL	.var *-XtPtr1
=$a1b3					en = *	; remember here
>a19d	14					.byte CL	;wh_CodeLength
>a1b3	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1bb	6f 72 64 6c 69 73 74
=41282					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c2	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1c3	10					.byte WordFlags	;wh_Flags
>a1c4	03					.byte 3	;wh_CodeLength
>a1c5	27					  .byte LinkDisplacement
=$a1c6					XtPtr1 ::= *
=41282					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1c6					Search_WordList:
.a1c6	20 e0 b3	jsr $b3e0			jsr PopA		; Pop wid
.a1c9	48		pha				pha
.a1ca	20 97 bc	jsr $bc97			jsr swl_prepare 	; ( 0 u )
.a1cd	e8		inx				inx
.a1ce	e8		inx				inx			; ( 0 )
.a1cf	68		pla				pla			; pop wid
.a1d0	20 c4 bc	jsr $bcc4			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1d3	f0 1f		beq $a1f4			beq _NotFound
.a1d5	a0 81		ldy #$81			ldy #wh_Flags
.a1d7	b1 14		lda ($14),y			lda (tmp1),y
.a1d9	29 03		and #$03			and #FP+DB
.a1db	18		clc				clc
.a1dc	69 82		adc #$82			adc #wh_LinkNt-1
.a1de	65 14		adc $14				adc tmp1+0		; TOS= xt
.a1e0	95 24		sta $24,x			sta DStack+0,x
.a1e2	a9 00		lda #$00			lda #0
.a1e4	65 15		adc $15				adc tmp1+1
.a1e6	95 25		sta $25,x			sta DStack+1,x
.a1e8	b1 14		lda ($14),y			lda (tmp1),y
.a1ea	29 08		and #$08			and #IM
.a1ec	d0 03		bne $a1f1			bne _immediate		; bit set, we're immediate
.a1ee	4c c7 b7	jmp $b7c7			jmp True		; We're not immediate, return -1
.a1f1	4c fe b7	jmp $b7fe	_immediate:	jmp One			; We're immediate, return 1
.a1f4					_NotFound:
.a1f4	60		rts				rts
=47					CL	.var *-XtPtr1
=$a1f5					en = *	; remember here
>a1c4	2f					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1f5					BlockInit:
.a1f5	a9 00		lda #$00			lda #0
.a1f7	8d 3f 03	sta $033f			sta BuffStatusV
.a1fa	a9 45		lda #$45			lda #<Platform_Block_Read
.a1fc	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a1fe	8d 39 03	sta $0339			sta BlockReadV+0
.a201	8c 3a 03	sty $033a			sty BlockReadV+1
.a204	a9 70		lda #$70			lda #<Platform_Block_Write
.a206	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a208	8d 3b 03	sta $033b			sta BlockWriteV+0
.a20b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a20e	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a20f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a217	6d 44 72 69 76 65 2d 49 6e 69 74
=41378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a222	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>a223	50					.byte WordFlags	;wh_Flags
>a224	03					.byte 3	;wh_CodeLength
>a225	60					  .byte LinkDisplacement
=$a226					XtPtr1 ::= *
=41378					WordListLink ::= Nt0 ; remember the nt of this word for later
.a226					Block_RamDrive_Init:
.a226	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a228	20 e7 b7	jsr $b7e7			jsr PushZA
.a22b	20 4e cb	jsr $cb4e			jsr LShift
.a22e	20 37 ca	jsr $ca37			jsr Here		; ( size addr )
.a231	8d 41 07	sta $0741			sta RamDriveV+0
.a234	8c 42 07	sty $0742			sty RamDriveV+1
.a237	20 40 cf	jsr $cf40			jsr Over
.a23a	20 b1 c0	jsr $c0b1			jsr Allot		; Create ramdrive buffer
.a23d	20 84 cf	jsr $cf84			jsr Swap		; blank the buffer
.a240	20 3c be	jsr $be3c			jsr Blank
.a243	a9 58		lda #$58			lda #<_read		; set block read vector
.a245	a0 a2		ldy #$a2			ldy #>_read
.a247	8d 39 03	sta $0339			sta BlockReadV+0
.a24a	8c 3a 03	sty $033a			sty BlockReadV+1
.a24d	a9 68		lda #$68			lda #<_write		; set block write vector
.a24f	a0 a2		ldy #$a2			ldy #>_write
.a251	8d 3b 03	sta $033b			sta BlockWriteV+0
.a254	8c 3c 03	sty $033c			sty BlockWriteV+1
.a257	60		rts				rts
=50					CL	.var *-XtPtr1
=$a258					en = *	; remember here
>a224	32					.byte CL	;wh_CodeLength
.a258					_read:
.a258	20 75 a2	jsr $a275			jsr _addr
.a25b	20 84 cf	jsr $cf84			jsr Swap
.a25e	a9 00		lda #$00			lda #0
.a260	a0 04		ldy #$04			ldy #>1024
.a262	20 b8 b7	jsr $b7b8			jsr PushYA
.a265	4c 84 ad	jmp $ad84			jmp Move
.a268					_write:
.a268	20 75 a2	jsr $a275			jsr _addr
.a26b	a9 00		lda #$00			lda #0
.a26d	a0 04		ldy #$04			ldy #>1024
.a26f	20 b8 b7	jsr $b7b8			jsr PushYA
.a272	4c 84 ad	jmp $ad84			jmp Move
.a275					_addr:
.a275	a9 0a		lda #$0a			lda #10
.a277	20 e7 b7	jsr $b7e7			jsr PushZA
.a27a	20 4e cb	jsr $cb4e			jsr LShift
.a27d	20 8f a2	jsr $a28f			jsr RamDrive
.a280	4c ae cb	jmp $cbae			jmp Plus
>a283	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=41483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a28b	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a28c	10					.byte WordFlags	;wh_Flags
>a28d	03					.byte 3	;wh_CodeLength
>a28e	69					  .byte LinkDisplacement
=$a28f					XtPtr1 ::= *
=41483					WordListLink ::= Nt0 ; remember the nt of this word for later
.a28f	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a292	ac 42 07	ldy $0742			ldy RamDriveV+1
.a295	4c b8 b7	jmp $b7b8			jmp PushYA
=9					CL	.var *-XtPtr1
=$a298					en = *	; remember here
>a28d	09					.byte CL	;wh_CodeLength
>a298	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a2a0	75 73
=41506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2a2	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2a3	10					.byte WordFlags	;wh_Flags
>a2a4	03					.byte 3	;wh_CodeLength
>a2a5	17					  .byte LinkDisplacement
=$a2a6					XtPtr1 ::= *
=41506					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2a6	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a2a8	a9 3f		lda #$3f			lda #<BuffStatusV
.a2aa	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2ad					en = *	; remember here
>a2a4	07					.byte CL	;wh_CodeLength
>a2ad	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2b5	6b 4e 75 6d
=41529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2b9	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2ba	10					.byte WordFlags	;wh_Flags
>a2bb	03					.byte 3	;wh_CodeLength
>a2bc	17					  .byte LinkDisplacement
=$a2bd					XtPtr1 ::= *
=41529					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2bd	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2bf	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2c1	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2c4					en = *	; remember here
>a2bb	07					.byte CL	;wh_CodeLength
>a2c4	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2cc	72
=41549					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2cd	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2ce	10					.byte WordFlags	;wh_Flags
>a2cf	03					.byte 3	;wh_CodeLength
>a2d0	14					  .byte LinkDisplacement
=$a2d1					XtPtr1 ::= *
=41549					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d1	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2d3	a9 41		lda #$41			lda #<BlockBuffer
.a2d5	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2d8					en = *	; remember here
>a2cf	07					.byte CL	;wh_CodeLength
>a2d8	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=41563					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2db	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2dc	10					.byte WordFlags	;wh_Flags
>a2dd	03					.byte 3	;wh_CodeLength
>a2de	0e					  .byte LinkDisplacement
=$a2df					XtPtr1 ::= *
=41563					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2df	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2e1	a9 0e		lda #$0e			lda #<ScrV
.a2e3	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2e6					en = *	; remember here
>a2dd	07					.byte CL	;wh_CodeLength
>a2e6	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=41577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2e9	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2ea	10					.byte WordFlags	;wh_Flags
>a2eb	03					.byte 3	;wh_CodeLength
>a2ec	0e					  .byte LinkDisplacement
=$a2ed					XtPtr1 ::= *
=41577					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2ed	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2ef	a9 0c		lda #$0c			lda #<BlkV
.a2f1	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2f4					en = *	; remember here
>a2eb	07					.byte CL	;wh_CodeLength
>a2f4	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a2fc	69 74 65
=41599					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2ff	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a300	10					.byte WordFlags	;wh_Flags
>a301	03					.byte 3	;wh_CodeLength
>a302	16					  .byte LinkDisplacement
=$a303					XtPtr1 ::= *
=41599					WordListLink ::= Nt0 ; remember the nt of this word for later
.a303	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-XtPtr1
=$a306					en = *	; remember here
>a301	03					.byte CL	;wh_CodeLength
>a306	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a30e	69 74 65 2d 56 65 63 74 6f 72
=41624					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a318	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a319	10					.byte WordFlags	;wh_Flags
>a31a	03					.byte 3	;wh_CodeLength
>a31b	19					  .byte LinkDisplacement
=$a31c					XtPtr1 ::= *
=41624					WordListLink ::= Nt0 ; remember the nt of this word for later
.a31c					Block_Write_Vector:
.a31c	a0 03		ldy #$03			ldy #>BlockWriteV
.a31e	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a320	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a323					en = *	; remember here
>a31a	07					.byte CL	;wh_CodeLength
>a323	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a32b	61 64
=41645					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a32d	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a32e	10					.byte WordFlags	;wh_Flags
>a32f	03					.byte 3	;wh_CodeLength
>a330	15					  .byte LinkDisplacement
=$a331					XtPtr1 ::= *
=41645					WordListLink ::= Nt0 ; remember the nt of this word for later
.a331	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-XtPtr1
=$a334					en = *	; remember here
>a32f	03					.byte CL	;wh_CodeLength
>a334	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a33c	61 64 2d 56 65 63 74 6f 72
=41669					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a345	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a346	10					.byte WordFlags	;wh_Flags
>a347	03					.byte 3	;wh_CodeLength
>a348	18					  .byte LinkDisplacement
=$a349					XtPtr1 ::= *
=41669					WordListLink ::= Nt0 ; remember the nt of this word for later
.a349					Block_Read_Vector:
.a349	a0 03		ldy #$03			ldy #>BlockReadV
.a34b	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a34d	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a350					en = *	; remember here
>a347	07					.byte CL	;wh_CodeLength
>a350	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a358	66 65 72 73
=41692					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a35c	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a35d	00					.byte WordFlags	;wh_Flags
>a35e	03					.byte 3	;wh_CodeLength
>a35f	17					  .byte LinkDisplacement
=$a360					XtPtr1 ::= *
=41692					WordListLink ::= Nt0 ; remember the nt of this word for later
.a360					Save_Buffers:
.a360	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a363	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a365	d0 11		bne $a378			bne _done	; Either not used or not dirty = done!
.a367	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a36a	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a36d	20 a9 ce	jsr $cea9			jsr Fetch
.a370	20 03 a3	jsr $a303			jsr Block_Write
.a373	a9 01		lda #$01			lda #1
.a375	8d 3f 03	sta $033f			sta BuffStatusV+0
.a378					_done:
=24					CL	.var *-XtPtr1
=$a378					en = *	; remember here
>a35e	18					.byte CL	;wh_CodeLength
.a378	60		rts				rts
>a379	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=41726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a37e	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a37f	00					.byte WordFlags	;wh_Flags
>a380	03					.byte 3	;wh_CodeLength
>a381	22					  .byte LinkDisplacement
=$a382					XtPtr1 ::= *
=41726					WordListLink ::= Nt0 ; remember the nt of this word for later
.a382					Block:
.a382	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a385	d5 24		cmp $24,x			cmp DStack+0,x
.a387	d0 0e		bne $a397			bne _not_in_buffer
.a389	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a38c	d5 25		cmp $25,x			cmp DStack+1,x
.a38e	d0 07		bne $a397			bne _not_in_buffer
.a390	ad 3f 03	lda $033f			lda BuffStatusV+0
.a393	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a395	d0 2d		bne $a3c4			bne _done	; It's already in the buffer and in use.
.a397					_not_in_buffer:
.a397	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a39a	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a39c	d0 0c		bne $a3aa			bne _buffer_available ; Unused or not dirty = available
.a39e	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3a1	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a3a4	20 a9 ce	jsr $cea9			jsr Fetch
.a3a7	20 03 a3	jsr $a303			jsr Block_Write
.a3aa					_buffer_available:
.a3aa	b5 24		lda $24,x			lda DStack+0,x
.a3ac	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3af	b5 25		lda $25,x			lda DStack+1,x
.a3b1	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3b4	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3b7	20 84 cf	jsr $cf84			jsr Swap
.a3ba	20 31 a3	jsr $a331			jsr Block_Read
.a3bd	a9 01		lda #$01			lda #1
.a3bf	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3c2	ca		dex				dex
.a3c3	ca		dex				dex
.a3c4					_done:
.a3c4	a9 41		lda #$41			lda #<BlockBuffer
.a3c6	95 24		sta $24,x			sta DStack+0,x
.a3c8	a9 03		lda #$03			lda #>BlockBuffer
.a3ca	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-XtPtr1
=$a3cc					en = *	; remember here
>a380	4a					.byte CL	;wh_CodeLength
.a3cc	60		rts				rts
>a3cd	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=41811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3d3	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3d4	00					.byte WordFlags	;wh_Flags
>a3d5	03					.byte 3	;wh_CodeLength
>a3d6	55					  .byte LinkDisplacement
=$a3d7					XtPtr1 ::= *
=41811					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3d7					Update:
.a3d7	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3da	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3dc	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-XtPtr1
=$a3df					en = *	; remember here
>a3d5	08					.byte CL	;wh_CodeLength
.a3df	60		rts				rts
>a3e0	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=41830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3e6	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3e7	10					.byte WordFlags	;wh_Flags
>a3e8	03					.byte 3	;wh_CodeLength
>a3e9	13					  .byte LinkDisplacement
=$a3ea					XtPtr1 ::= *
=41830					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3ea					Buffer:
.a3ea	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3ed	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3ef	d0 0c		bne $a3fd			bne _buffer_available ; Unused or not dirty = available
.a3f1	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3f4	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a3f7	20 a9 ce	jsr $cea9			jsr Fetch
.a3fa	20 03 a3	jsr $a303			jsr Block_Write
.a3fd					_buffer_available:
.a3fd	b5 24		lda $24,x			lda DStack+0,x
.a3ff	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a402	b5 25		lda $25,x			lda DStack+1,x
.a404	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a407	a9 01		lda #$01			lda #1
.a409	8d 3f 03	sta $033f			sta BuffStatusV+0
.a40c					_done:
.a40c	a9 41		lda #$41			lda #<BlockBuffer
.a40e	95 24		sta $24,x			sta DStack+0,x
.a410	a9 03		lda #$03			lda #>BlockBuffer
.a412	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-XtPtr1
=$a414					en = *	; remember here
>a3e8	2a					.byte CL	;wh_CodeLength
.a414	60		rts				rts
>a415	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a41d	66 66 65 72 73
=41890					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a422	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a423	10					.byte WordFlags	;wh_Flags
>a424	03					.byte 3	;wh_CodeLength
>a425	3c					  .byte LinkDisplacement
=$a426					XtPtr1 ::= *
=41890					WordListLink ::= Nt0 ; remember the nt of this word for later
.a426	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a428	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-XtPtr1
=$a42b					en = *	; remember here
>a424	05					.byte CL	;wh_CodeLength
.a42b	60		rts				rts
>a42c	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=41905					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a431	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a432	10					.byte WordFlags	;wh_Flags
>a433	03					.byte 3	;wh_CodeLength
>a434	0f					  .byte LinkDisplacement
=$a435					XtPtr1 ::= *
=41905					WordListLink ::= Nt0 ; remember the nt of this word for later
.a435	20 60 a3	jsr $a360	Flush:		jsr Save_Buffers
.a438	4c 26 a4	jmp $a426			jmp Empty_Buffers
=6					CL	.var *-XtPtr1
=$a43b					en = *	; remember here
>a433	06					.byte CL	;wh_CodeLength
>a43b	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=41919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a43f	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a440	40					.byte WordFlags	;wh_Flags
>a441	03					.byte 3	;wh_CodeLength
>a442	0e					  .byte LinkDisplacement
=$a443					XtPtr1 ::= *
=41919					WordListLink ::= Nt0 ; remember the nt of this word for later
.a443					Load:
.a443	20 24 b4	jsr $b424			jsr underflow_1
.a446	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a449	48		pha				pha
.a44a	ad 0c 03	lda $030c			lda BlkV+0
.a44d	48		pha				pha
.a44e	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a450	8d 0c 03	sta $030c			sta BlkV+0
.a453	b5 25		lda $25,x			lda DStack+1,x
.a455	8d 0d 03	sta $030d			sta BlkV+1
.a458	20 82 a3	jsr $a382			jsr Block		; Load that block into a buffer
.a45b	a9 00		lda #$00			lda #<1024		; block length.
.a45d	a0 04		ldy #$04			ldy #>1024
.a45f	20 b8 b7	jsr $b7b8			jsr PushYA
.a462	38		sec				sec		; Set a flag to not zero BLK
.a463	20 0b b0	jsr $b00b			jsr load_evaluate
.a466	68		pla				pla
.a467	8d 0c 03	sta $030c			sta BlkV+0
.a46a	68		pla				pla
.a46b	8d 0d 03	sta $030d			sta BlkV+1
.a46e	0d 0c 03	ora $030c			ora BlkV+0
.a471	f0 13		beq $a486			beq _done
.a473	ad 0c 03	lda $030c			lda BlkV+0
.a476	ac 0d 03	ldy $030d			ldy BlkV+1
.a479	20 b8 b7	jsr $b7b8			jsr PushYA
.a47c	20 82 a3	jsr $a382			jsr Block
.a47f	20 fb b3	jsr $b3fb			jsr PopYA	; Pop the buffer address.
.a482	85 04		sta $04				sta cib+0
.a484	84 05		sty $05				sty cib+1
.a486					_done:
=67					CL	.var *-XtPtr1
=$a486					en = *	; remember here
>a441	43					.byte CL	;wh_CodeLength
.a486	60		rts				rts
>a487	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=41995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a48b	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a48c	50					.byte WordFlags	;wh_Flags
>a48d	03					.byte 3	;wh_CodeLength
>a48e	4c					  .byte LinkDisplacement
=$a48f					XtPtr1 ::= *
=41995					WordListLink ::= Nt0 ; remember the nt of this word for later
.a48f					Thru:
.a48f	20 38 b4	jsr $b438			jsr underflow_2
.a492	20 f1 ce	jsr $cef1			jsr To_R
.a495					_loop:
.a495	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a497	48		pha				pha
.a498	b5 24		lda $24,x			lda DStack+0,x
.a49a	48		pha				pha
.a49b	20 43 a4	jsr $a443			jsr Load		; Load this screen.
.a49e	20 0f cf	jsr $cf0f			jsr R_From		; Get the screen # we just loaded.
.a4a1	20 69 ca	jsr $ca69			jsr One_plus		; increment
.a4a4	86 14		stx $14				stx tmp1
.a4a6	ba		tsx				tsx
.a4a7	8a		txa				txa
.a4a8	a8		tay				tay
.a4a9	a6 14		ldx $14				ldx tmp1
.a4ab	b9 01 01	lda $0101,y			lda RStack+1,y
.a4ae	d5 24		cmp $24,x			cmp DStack+0,x
.a4b0	b9 02 01	lda $0102,y			lda RStack+2,y
.a4b3	f5 25		sbc $25,x			sbc DStack+1,x
.a4b5	b0 de		bcs $a495			bcs _loop
.a4b7	e8		inx				inx			; Drop index
.a4b8	e8		inx				inx
.a4b9	68		pla				pla			; RDrop limit
.a4ba	68		pla				pla
=44					CL	.var *-XtPtr1
=$a4bb					en = *	; remember here
>a48d	2c					.byte CL	;wh_CodeLength
.a4bb	60		rts				rts
>a4bc	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=42048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4c0	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4c1	10					.byte WordFlags	;wh_Flags
>a4c2	03					.byte 3	;wh_CodeLength
>a4c3	35					  .byte LinkDisplacement
=$a4c4					XtPtr1 ::= *
=42048					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4c4	20 fb b3	jsr $b3fb	List:		jsr PopYA	; Save the screen number
.a4c7	8d 0e 03	sta $030e			sta ScrV+0
.a4ca	8c 0f 03	sty $030f			sty ScrV+1
.a4cd					ListScr:
.a4cd	20 df a2	jsr $a2df			jsr Scr
.a4d0	20 a9 ce	jsr $cea9			jsr Fetch
.a4d3	20 82 a3	jsr $a382			jsr Block	; Get the current screen contents.
.a4d6	20 75 ab	jsr $ab75			jsr CR
.a4d9	20 ac b8	jsr $b8ac			jsr SLiteral_Runtime
.a4dc	4c e7 a4	jmp $a4e7			  jmp +				; for SLiteral_Runtime
>a4df	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4e7					+
.a4e7	20 e9 cd	jsr $cde9			jsr Type
.a4ea	20 df a2	jsr $a2df			jsr Scr		; print screen number
.a4ed	20 a9 ce	jsr $cea9			jsr Fetch
.a4f0	a9 04		lda #$04			lda #4		;    in 4 positions
.a4f2	20 41 cc	jsr $cc41			jsr U_Dot_R_A
.a4f5	a9 00		lda #$00			lda #0			; line #
.a4f7					_line_loop:
.a4f7	48		pha				pha
.a4f8	20 75 ab	jsr $ab75			jsr CR
.a4fb	68		pla				pla		; Print the line number
.a4fc	48		pha				pha
.a4fd	20 e7 b7	jsr $b7e7			jsr PushZA
.a500	a9 02		lda #$02			lda #2		;   in 2 positions
.a502	20 41 cc	jsr $cc41			jsr U_Dot_R_A
.a505	20 dd cd	jsr $cddd			jsr Space
.a508	20 67 cf	jsr $cf67			jsr Dup		; Print one line using the address on the stack.
.a50b	a9 40		lda #$40			lda #64
.a50d	20 e7 b7	jsr $b7e7			jsr PushZA
.a510	20 e9 cd	jsr $cde9			jsr Type
.a513	a9 40		lda #$40			lda #64		; move address to the next line.
.a515	20 1b ca	jsr $ca1b			jsr Plus_A
.a518	68		pla				pla		; Increment the line number
.a519	18		clc				clc
.a51a	69 01		adc #$01			adc #1
.a51c	c9 10		cmp #$10			cmp #16		; See if we are done.
.a51e	d0 d7		bne $a4f7			bne _line_loop
.a520	e8		inx				inx		; Drop the address
.a521	e8		inx				inx
.a522	4c 75 ab	jmp $ab75			jmp CR
=97					CL	.var *-XtPtr1
=$a525					en = *	; remember here
>a4c2	61					.byte CL	;wh_CodeLength
>a525	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=42154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a52a	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a52b	10					.byte WordFlags	;wh_Flags
>a52c	03					.byte 3	;wh_CodeLength
>a52d	6a					  .byte LinkDisplacement
=$a52e					XtPtr1 ::= *
=42154					WordListLink ::= Nt0 ; remember the nt of this word for later
.a52e					Defer:
.a52e	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.a531	a9 3b		lda #$3b			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a533	a0 a5		ldy #$a5			ldy #>_undefined
.a535	20 48 cd	jsr $cd48			jsr Jmp_Comma_YA
.a538	4c d5 bb	jmp $bbd5			jmp adjust_z		; set word length
=13					CL	.var *-XtPtr1
=$a53b					en = *	; remember here
>a52c	0d					.byte CL	;wh_CodeLength
.a53b					_undefined:
.a53b	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a53d	4c 80 b4	jmp $b480			jmp ThrowA
>a540	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=42182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a546	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a547	10					.byte WordFlags	;wh_Flags
>a548	03					.byte 3	;wh_CodeLength
>a549	1c					  .byte LinkDisplacement
=$a54a					XtPtr1 ::= *
=42182					WordListLink ::= Nt0 ; remember the nt of this word for later
.a54a	20 fb b3	jsr $b3fb	Defer_Store:	jsr PopYA
.a54d	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a54f	84 15		sty $15				sty tmp1+1
.a551	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a553	a0 01		ldy #$01			ldy #1
.a555	91 14		sta ($14),y			sta (tmp1),y
.a557	b5 25		lda $25,x			lda DStack+1,x
.a559	c8		iny				iny
.a55a	91 14		sta ($14),y			sta (tmp1),y
.a55c	4c a0 cf	jmp $cfa0			jmp Drop		; Drop xt2
=21					CL	.var *-XtPtr1
=$a55f					en = *	; remember here
>a548	15					.byte CL	;wh_CodeLength
>a55f	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=42213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a565	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a566	10					.byte WordFlags	;wh_Flags
>a567	03					.byte 3	;wh_CodeLength
>a568	1f					  .byte LinkDisplacement
=$a569					XtPtr1 ::= *
=42213					WordListLink ::= Nt0 ; remember the nt of this word for later
.a569	20 fb b3	jsr $b3fb	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a56c	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a56e	84 15		sty $15				sty tmp1+1
.a570	ca		dex				dex		; push DEFERs JMP abs operand
.a571	ca		dex				dex
.a572	a0 01		ldy #$01			ldy #1
.a574	b1 14		lda ($14),y			lda (tmp1),y
.a576	95 24		sta $24,x			sta DStack+0,x
.a578	c8		iny				iny
.a579	b1 14		lda ($14),y			lda (tmp1),y
.a57b	95 25		sta $25,x			sta DStack+1,x
.a57d	60		rts				rts
=21					CL	.var *-XtPtr1
=$a57e					en = *	; remember here
>a567	15					.byte CL	;wh_CodeLength
>a57e	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=42240					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a580	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a581	18					.byte WordFlags	;wh_Flags
>a582	03					.byte 3	;wh_CodeLength
>a583	1b					  .byte LinkDisplacement
=$a584					XtPtr1 ::= *
=42240					WordListLink ::= Nt0 ; remember the nt of this word for later
.a584					Is:
.a584	20 3b bc	jsr $bc3b			jsr Tick		; get xt of "name"
.a587	a5 0a		lda $0a				lda state		; Check STATE
.a589	f0 bf		beq $a54a			beq Defer_Store		; interpreting, put xt in the DEFER word
.a58b					_compiling:
.a58b	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a58e	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a590	a9 4d		lda #$4d			lda #<Defer_Store_YA
.a592	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=17					CL	.var *-XtPtr1
=$a595					en = *	; remember here
>a582	11					.byte CL	;wh_CodeLength
>a595	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a59d	66
=42270					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a59e	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a59f	18					.byte WordFlags	;wh_Flags
>a5a0	03					.byte 3	;wh_CodeLength
>a5a1	1e					  .byte LinkDisplacement
=$a5a2					XtPtr1 ::= *
=42270					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5a2					Action_Of:
.a5a2	20 3b bc	jsr $bc3b			jsr Tick		; get xt of "name"
.a5a5	a5 0a		lda $0a				lda state		; Check STATE
.a5a7	f0 c0		beq $a569			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a5a9					_compiling:
.a5a9	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5ac	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5ae	a9 6c		lda #$6c			lda #<Defer_Fetch_YA
.a5b0	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=17					CL	.var *-XtPtr1
=$a5b3					en = *	; remember here
>a5a0	11					.byte CL	;wh_CodeLength
>a5b3	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=42299					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5bb	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5bc	10					.byte WordFlags	;wh_Flags
>a5bd	03					.byte 3	;wh_CodeLength
>a5be	1d					  .byte LinkDisplacement
=$a5bf					XtPtr1 ::= *
=42299					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5bf	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5c1	a9 ff		lda #$ff			lda #<User0
.a5c3	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$a5c6					en = *	; remember here
>a5bd	07					.byte CL	;wh_CodeLength
>a5c6	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=42317					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5cd	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5ce	10					.byte WordFlags	;wh_Flags
>a5cf	03					.byte 3	;wh_CodeLength
>a5d0	12					  .byte LinkDisplacement
=$a5d1					XtPtr1 ::= *
=42317					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d1	20 b8 c1	jsr $c1b8	Buffer_Colon:	jsr Create
.a5d4	4c b1 c0	jmp $c0b1			jmp Allot
=6					CL	.var *-XtPtr1
=$a5d7					en = *	; remember here
>a5cf	06					.byte CL	;wh_CodeLength
>a5d7	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=42331					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5db	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5dc	1c					.byte WordFlags	;wh_Flags
>a5dd	03					.byte 3	;wh_CodeLength
>a5de	0e					  .byte LinkDisplacement
=$a5df					XtPtr1 ::= *
=42331					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5df					Case:
.a5df	4c f5 b7	jmp $b7f5			jmp Zero	; init jmp fixup chain
=3					CL	.var *-XtPtr1
=$a5e2					en = *	; remember here
>a5dd	03					.byte CL	;wh_CodeLength
>a5e2	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=42345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5e9	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5ea	1c					.byte WordFlags	;wh_Flags
>a5eb	03					.byte 3	;wh_CodeLength
>a5ec	0e					  .byte LinkDisplacement
=$a5ed					XtPtr1 ::= *
=42345					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5ed					EndCase:
.a5ed	20 22 cd	jsr $cd22			jsr Drop_Comma
.a5f0					_loop:
.a5f0	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5f2	f0 06		beq $a5fa			beq _done
.a5f4	20 6f a6	jsr $a66f			jsr Then	;   fixup another one
.a5f7	4c f0 a5	jmp $a5f0			jmp _loop
.a5fa					_done:
.a5fa	e8		inx				inx		; Drop the 0
.a5fb	e8		inx				inx
=15					CL	.var *-XtPtr1
=$a5fc					en = *	; remember here
>a5eb	0f					.byte CL	;wh_CodeLength
.a5fc	60		rts				rts
>a5fd	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=42367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5ff	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a600	1c					.byte WordFlags	;wh_Flags
>a601	03					.byte 3	;wh_CodeLength
>a602	16					  .byte LinkDisplacement
=$a603					XtPtr1 ::= *
=42367					WordListLink ::= Nt0 ; remember the nt of this word for later
.a603					Of:
.a603	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a605	a9 18		lda #$18			lda #<_runtime
.a607	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.a60a	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a60c	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.a60f	20 37 ca	jsr $ca37			jsr Here		; Put the origination address on the stack for else/then
.a612	20 f5 b7	jsr $b7f5			jsr Zero
.a615	4c 0c cd	jmp $cd0c			jmp Comma
=21					CL	.var *-XtPtr1
=$a618					en = *	; remember here
>a601	15					.byte CL	;wh_CodeLength
.a618					_runtime:
.a618	e8		inx				inx		; Drop x2
.a619	e8		inx				inx
.a61a	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a61c	d5 24		cmp $24,x			cmp DStack+0,x
.a61e	d0 06		bne $a626			bne _NotEq
.a620	b5 23		lda $23,x			lda DStack-1,x
.a622	d5 25		cmp $25,x			cmp DStack+1,x
.a624	f0 31		beq $a657			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a626	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a627	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=42412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a62c	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a62d	1c					.byte WordFlags	;wh_Flags
>a62e	03					.byte 3	;wh_CodeLength
>a62f	2d					  .byte LinkDisplacement
=$a630					XtPtr1 ::= *
=42412					WordListLink ::= Nt0 ; remember the nt of this word for later
.a630	4c 80 a6	jmp $a680	EndOf:		jmp Else
=3					CL	.var *-XtPtr1
=$a633					en = *	; remember here
>a62e	03					.byte CL	;wh_CodeLength
>a633	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=42421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a635	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a636	1c					.byte WordFlags	;wh_Flags
>a637	03					.byte 3	;wh_CodeLength
>a638	09					  .byte LinkDisplacement
=$a639					XtPtr1 ::= *
=42421					WordListLink ::= Nt0 ; remember the nt of this word for later
.a639					If:
.a639	20 4a a6	jsr $a64a	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a63c					zbranch_jmp0_comma:
.a63c	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a63e	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.a641	20 37 ca	jsr $ca37			jsr Here		; save ptr to address for else/then
.a644	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a646	a8		tay				tay			; THEN or ELSE will fix it later.
.a647	4c 0f cd	jmp $cd0f			jmp Comma_YA
=17					CL	.var *-XtPtr1
=$a64a					en = *	; remember here
>a637	11					.byte CL	;wh_CodeLength
=$cd45					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a64a					zbranch_jsr_comma:
.a64a	a0 a6		ldy #$a6			ldy #>_runtime
.a64c	a9 51		lda #$51			lda #<_runtime
.a64e	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
.a651					_runtime:
.a651	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a653	15 25		ora $25,x			ora DStack+1,x
.a655	f0 0d		beq $a664			beq zbranch_run_done
.a657	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a658	68		pla				pla
.a659	69 03		adc #$03			adc #3
.a65b	90 06		bcc $a663			bcc +
.a65d	a8		tay				tay
.a65e	68		pla				pla
.a65f	69 00		adc #$00			adc #0
.a661	48		pha				pha
.a662	98		tya				tya
.a663	48		pha		+		pha
.a664					zbranch_run_done:
.a664	e8		inx				inx			; Drop f
.a665	e8		inx				inx
.a666	60		rts				rts
>a667	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=42475					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a66b	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a66c	1c					.byte WordFlags	;wh_Flags
>a66d	03					.byte 3	;wh_CodeLength
>a66e	36					  .byte LinkDisplacement
=$a66f					XtPtr1 ::= *
=42475					WordListLink ::= Nt0 ; remember the nt of this word for later
.a66f					Then:
.a66f	20 37 ca	jsr $ca37			jsr Here
.a672	20 84 cf	jsr $cf84			jsr Swap
.a675	4c c2 ce	jmp $cec2			jmp Store
=9					CL	.var *-XtPtr1
=$a678					en = *	; remember here
>a66d	09					.byte CL	;wh_CodeLength
>a678	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=42492					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a67c	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a67d	1c					.byte WordFlags	;wh_Flags
>a67e	03					.byte 3	;wh_CodeLength
>a67f	11					  .byte LinkDisplacement
=$a680					XtPtr1 ::= *
=42492					WordListLink ::= Nt0 ; remember the nt of this word for later
.a680					Else:
.a680	20 3c a6	jsr $a63c			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a683	20 37 ca	jsr $ca37			jsr Here
.a686	20 62 ce	jsr $ce62			jsr Rot
.a689	4c c2 ce	jmp $cec2			jmp Store
=12					CL	.var *-XtPtr1
=$a68c					en = *	; remember here
>a67e	0c					.byte CL	;wh_CodeLength
>a68c	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=42513					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a691	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a692	1c					.byte WordFlags	;wh_Flags
>a693	03					.byte 3	;wh_CodeLength
>a694	15					  .byte LinkDisplacement
=$a695					XtPtr1 ::= *
=42513					WordListLink ::= Nt0 ; remember the nt of this word for later
.a695	20 37 ca	jsr $ca37	Begin:		jsr Here	; remember the loop starting location
.a698	a9 95		lda #$95			lda #<Begin	; pairing marker
.a69a	4c e7 b7	jmp $b7e7			jmp PushZA
=8					CL	.var *-XtPtr1
=$a69d					en = *	; remember here
>a693	08					.byte CL	;wh_CodeLength
>a69d	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=42530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6a2	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6a3	5c					.byte WordFlags	;wh_Flags
>a6a4	03					.byte 3	;wh_CodeLength
>a6a5	11					  .byte LinkDisplacement
=$a6a6					XtPtr1 ::= *
=42530					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6a6	20 38 b4	jsr $b438	Again:		jsr underflow_2
.a6a9	a9 95		lda #$95			lda #<Begin	; check pairing
.a6ab	20 0e b2	jsr $b20e			jsr QPairCtlA
.a6ae	4c 45 cd	jmp $cd45			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-XtPtr1
=$a6b1					en = *	; remember here
>a6a4	0b					.byte CL	;wh_CodeLength
>a6b1	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=42550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6b6	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6b7	1c					.byte WordFlags	;wh_Flags
>a6b8	03					.byte 3	;wh_CodeLength
>a6b9	14					  .byte LinkDisplacement
=$a6ba					XtPtr1 ::= *
=42550					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ba	a9 95		lda #$95	Until:		lda #<Begin		; check pairing
.a6bc	20 0e b2	jsr $b20e			jsr QPairCtlA
.a6bf	4c f6 a6	jmp $a6f6			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-XtPtr1
=$a6c2					en = *	; remember here
>a6b8	08					.byte CL	;wh_CodeLength
>a6c2	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=42567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6c7	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6c8	1c					.byte WordFlags	;wh_Flags
>a6c9	03					.byte 3	;wh_CodeLength
>a6ca	11					  .byte LinkDisplacement
=$a6cb					XtPtr1 ::= *
=42567					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6cb	a9 95		lda #$95	While:		lda #<Begin	; check pairing
.a6cd	20 0e b2	jsr $b20e			jsr QPairCtlA
.a6d0	20 39 a6	jsr $a639			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6d3	20 84 cf	jsr $cf84			jsr Swap	; Swap the two addresses on the stack.
.a6d6	a9 95		lda #$95			lda #<Begin	; pairing marker
.a6d8	4c e7 b7	jmp $b7e7			jmp PushZA
=16					CL	.var *-XtPtr1
=$a6db					en = *	; remember here
>a6c9	10					.byte CL	;wh_CodeLength
>a6db	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=42593					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6e1	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6e2	1c					.byte WordFlags	;wh_Flags
>a6e3	03					.byte 3	;wh_CodeLength
>a6e4	1a					  .byte LinkDisplacement
=$a6e5					XtPtr1 ::= *
=42593					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6e5	a9 95		lda #$95	Repeat:		lda #<Begin	; check pairing
.a6e7	20 0e b2	jsr $b20e			jsr QPairCtlA
.a6ea	20 45 cd	jsr $cd45			jsr Jmp_Comma	; compile the jmp back
.a6ed	20 37 ca	jsr $ca37			jsr Here	; patch the WHILE jmp operand
.a6f0	20 84 cf	jsr $cf84			jsr Swap
.a6f3	4c c2 ce	jmp $cec2			jmp Store
=17					CL	.var *-XtPtr1
=$a6f6					en = *	; remember here
>a6e3	11					.byte CL	;wh_CodeLength
.a6f6					ZBranch_Comma:
.a6f6	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6f8	a8		tay				tay
.a6f9	20 0f cd	jsr $cd0f			jsr Comma_YA
.a6fc	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a6fe	a0 22		ldy #$22			ldy #DStack-2
.a700	20 0f cd	jsr $cd0f			jsr Comma_YA
.a703	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a705	a0 23		ldy #$23			ldy #DStack-1
.a707	20 0f cd	jsr $cd0f			jsr Comma_YA
.a70a	a9 f0		lda #$f0			lda #$f0		; BEQ
.a70c	d0 0e		bne $a71c			bne Branch_CommaA
>a70e	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=42645					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a715	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a716	10					.byte WordFlags	;wh_Flags
>a717	03					.byte 3	;wh_CodeLength
>a718	34					  .byte LinkDisplacement
=$a719					XtPtr1 ::= *
=42645					WordListLink ::= Nt0 ; remember the nt of this word for later
.a719	20 e0 b3	jsr $b3e0			jsr PopA		; pop opcode to A
.a71c					Branch_CommaA:
.a71c	48		pha				pha			; save branch opcode
.a71d	38		sec				sec			; AY= displacement+2
.a71e	b5 24		lda $24,x			lda DStack+0,x
.a720	e5 00		sbc $00				sbc cp+0
.a722	a8		tay				tay
.a723	b5 25		lda $25,x			lda DStack+1,x
.a725	e5 01		sbc $01				sbc cp+1
.a727	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a729	f0 0b		beq $a736			beq _rev
.a72b	68		pla		_2byte:		pla			; restore branch opcode
.a72c	49 20		eor #$20			eor #$20		; reverse branch sense
.a72e	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a730	20 0f cd	jsr $cd0f			jsr Comma_YA
.a733	4c 45 cd	jmp $cd45			jmp Jmp_Comma		; compile JMP abs
.a736	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a738	90 f1		bcc $a72b			bcc _2byte
.a73a	e8		inx		_1byte:		inx			; Drop address
.a73b	e8		inx				inx
.a73c	88		dey				dey			; fix displacement
.a73d	88		dey				dey
.a73e	68		pla				pla			; restore branch opcode
.a73f	4c 0f cd	jmp $cd0f			jmp Comma_YA		; compile Bcc
>a742	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=42694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a746	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a747	50					.byte WordFlags	;wh_Flags
>a748	03					.byte 3	;wh_CodeLength
>a749	31					  .byte LinkDisplacement
=$a74a					XtPtr1 ::= *
=42694					WordListLink ::= Nt0 ; remember the nt of this word for later
.a74a					Word:
.a74a	20 24 b4	jsr $b424			jsr underflow_1
.a74d	a4 08		ldy $08				ldy toin+0		; >IN
.a74f	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a751	f0 09		beq $a75c			beq _found_char
.a753	b1 04		lda ($04),y			lda (cib),y
.a755	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a757	d0 03		bne $a75c			bne _found_char
.a759	c8		iny				iny
.a75a	d0 f3		bne $a74f			bne _DelimLoop
.a75c					_found_char:
.a75c	84 08		sty $08				sty toin+0		; Save index of where word starts
.a75e	20 be ba	jsr $babe			jsr Parse		; The real work is done by parse
.a761	20 e0 b3	jsr $b3e0			jsr PopA		; pop u
.a764	85 16		sta $16				sta tmp2+0
.a766	20 06 b4	jsr $b406			jsr PopTmp1		; pop addr
.a769	20 37 ca	jsr $ca37			jsr Here		; Return caddr
.a76c	a5 16		lda $16				lda tmp2+0
.a76e	a0 00		ldy #$00			ldy #0			; Save length of string
.a770	f0 03		beq $a775			beq _CopyStart
.a772	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a774	c8		iny				iny
.a775	20 f6 cc	jsr $ccf6	_CopyStart:	jsr C_Comma_A
.a778	c4 16		cpy $16				cpy tmp2+0
.a77a	90 f6		bcc $a772			bcc _CopyLoop
=50					CL	.var *-XtPtr1
=$a77c					en = *	; remember here
>a748	32					.byte CL	;wh_CodeLength
.a77c	60		rts				rts
>a77d	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=42750					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a77e	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a77f	18					.byte WordFlags	;wh_Flags
>a780	03					.byte 3	;wh_CodeLength
>a781	38					  .byte LinkDisplacement
=$a782					XtPtr1 ::= *
=42750					WordListLink ::= Nt0 ; remember the nt of this word for later
.a782	a9 29		lda #$29	Paren:		lda #')'		; separator
.a784	20 c1 ba	jsr $bac1			jsr Parse_A		; Call parse.
.a787	4c 45 c5	jmp $c545			jmp Two_drop		; 2Drop the result.
=8					CL	.var *-XtPtr1
=$a78a					en = *	; remember here
>a780	08					.byte CL	;wh_CodeLength
>a78a	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=42764					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a78c	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a78d	18					.byte WordFlags	;wh_Flags
>a78e	03					.byte 3	;wh_CodeLength
>a78f	0e					  .byte LinkDisplacement
=$a790					XtPtr1 ::= *
=42764					WordListLink ::= Nt0 ; remember the nt of this word for later
.a790	a9 29		lda #$29	Dot_paren:	lda #')'
.a792	20 c1 ba	jsr $bac1			jsr Parse_A
.a795	4c e9 cd	jmp $cde9			jmp Type
=8					CL	.var *-XtPtr1
=$a798					en = *	; remember here
>a78e	08					.byte CL	;wh_CodeLength
>a798	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=42780					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a79c	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a79d	10					.byte WordFlags	;wh_Flags
>a79e	03					.byte 3	;wh_CodeLength
>a79f	10					  .byte LinkDisplacement
=$a7a0					XtPtr1 ::= *
=42780					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7a0	20 e0 b3	jsr $b3e0	Hash:		jsr PopA		; save length
.a7a3	85 16		sta $16				sta tmp2+0
.a7a5	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a7a7	b4 25		ldy $25,x			ldy DStack+1,x
.a7a9	85 14		sta $14				sta tmp1+0
.a7ab	84 15		sty $15				sty tmp1+1
.a7ad	a9 b3		lda #$b3			lda #$b3		; init hash
.a7af	95 24		sta $24,x			sta DStack+0,x
.a7b1	95 25		sta $25,x			sta DStack+1,x
.a7b3	a0 00		ldy #$00			ldy #0			; for each char
.a7b5	f0 15		beq $a7cc			beq _next
.a7b7	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7b9	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7bb	90 06		bcc $a7c3			bcc _3
.a7bd	c9 7b		cmp #$7b			cmp #'z'+1
.a7bf	b0 02		bcs $a7c3			bcs _3
.a7c1	29 df		and #$df			and #$df
.a7c3	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7c5	36 25		rol $25,x			rol DStack+1,x
.a7c7	75 24		adc $24,x			adc DStack+0,x
.a7c9	95 24		sta $24,x			sta DStack+0,x
.a7cb	c8		iny				iny
.a7cc	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7ce	90 e7		bcc $a7b7			bcc _loop
=48					CL	.var *-XtPtr1
=$a7d0					en = *	; remember here
>a79e	30					.byte CL	;wh_CodeLength
.a7d0	60		rts				rts
>a7d1	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7d9	65 6e 74 3f
=42845					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7dd	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7de	10					.byte WordFlags	;wh_Flags
>a7df	03					.byte 3	;wh_CodeLength
>a7e0	41					  .byte LinkDisplacement
=$a7e1					XtPtr1 ::= *
=42845					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7e1					Environment_Q:
.a7e1	20 a0 a7	jsr $a7a0			jsr Hash		; ( hash )
.a7e4	a0 00		ldy #$00			ldy #0			; Y= table index
.a7e6	f0 0a		beq $a7f2			beq _entry_test
.a7e8	98		tya		_entry_next:	tya
.a7e9	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7eb	90 02		bcc $a7ef			bcc +
.a7ed	69 01		adc #$01			adc #6-4-1		;   skip double
.a7ef	69 04		adc #$04	+		adc #4			;   skip single
.a7f1	a8		tay		_3:		tay
.a7f2	b9 26 a8	lda $a826,y	_entry_test:	lda _Table+0,y		; match?
.a7f5	f0 28		beq $a81f			beq _notfound
.a7f7	d5 24		cmp $24,x			cmp DStack+0,x
.a7f9	d0 ed		bne $a7e8			bne _entry_next
.a7fb	b9 27 a8	lda $a827,y			lda _Table+1,y
.a7fe	d5 25		cmp $25,x			cmp DStack+1,x
.a800	d0 e6		bne $a7e8			bne _entry_next
.a802	b9 28 a8	lda $a828,y			lda _Table+2,y
.a805	95 24		sta $24,x			sta DStack+0,x
.a807	b9 29 a8	lda $a829,y			lda _Table+3,y
.a80a	95 25		sta $25,x			sta DStack+1,x
.a80c	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a80e	90 0c		bcc $a81c			bcc _single
.a810	ca		dex				dex			;  push 2nd cell
.a811	ca		dex				dex
.a812	b9 2a a8	lda $a82a,y			lda _Table+4,y
.a815	95 24		sta $24,x			sta DStack+0,x
.a817	b9 2b a8	lda $a82b,y			lda _Table+5,y
.a81a	95 25		sta $25,x			sta DStack+1,x
.a81c					_single:
.a81c	4c c7 b7	jmp $b7c7			jmp True		; return True
.a81f					_notfound:
.a81f	a9 00		lda #$00			lda #0			; return 0
.a821	95 24		sta $24,x			sta DStack+0,x
.a823	95 25		sta $25,x			sta DStack+1,x
.a825	60		rts				rts
=69					CL	.var *-XtPtr1
=$a826					en = *	; remember here
>a7df	45					.byte CL	;wh_CodeLength
.a826					_Table:
>a826	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a82a	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a82e	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a832	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a836	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a83a	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a83e	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a842	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a846	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a84a	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a84e	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a852	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a856	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a85a	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a860	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a866	00					.byte 0		; end of list
>a867	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=42987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a86b	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a86c	50					.byte WordFlags	;wh_Flags
>a86d	03					.byte 3	;wh_CodeLength
>a86e	8e					  .byte LinkDisplacement
=$a86f					XtPtr1 ::= *
=42987					WordListLink ::= Nt0 ; remember the nt of this word for later
.a86f					Dump:
.a86f	20 38 b4	jsr $b438			jsr underflow_2
.a872	ca		dex				dex			; alloc work area
.a873	ca		dex				dex
.a874					_row:
.a874	20 75 ab	jsr $ab75			jsr CR
.a877	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a879	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a87c	b5 28		lda $28,x			lda DStack+4,x
.a87e	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a881	20 dd cd	jsr $cddd			jsr Space
.a884	20 dd cd	jsr $cddd			jsr Space
.a887	a9 00		lda #$00			lda #0
.a889	95 24		sta $24,x			sta DStack+0,x
.a88b					_loop:
.a88b	b5 26		lda $26,x			lda DStack+2,x
.a88d	15 27		ora $27,x			ora DStack+3,x
.a88f	f0 36		beq $a8c7			beq _all_printed
.a891	a1 28		lda ($28,x)			lda (DStack+4,x)
.a893	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a896	20 dd cd	jsr $cddd			jsr Space
.a899	a1 28		lda ($28,x)			lda (DStack+4,x)
.a89b	20 1d a9	jsr $a91d			jsr is_printable
.a89e	b0 02		bcs $a8a2			bcs _printable
.a8a0	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a8a2					_printable:
.a8a2	b4 24		ldy $24,x			ldy DStack+0,x
.a8a4	91 00		sta ($00),y			sta (cp),y
.a8a6	c0 07		cpy #$07			cpy #7
.a8a8	d0 03		bne $a8ad			bne +
.a8aa	20 dd cd	jsr $cddd			jsr Space
.a8ad					+
.a8ad	f6 28		inc $28,x			inc DStack+4,x
.a8af	d0 02		bne $a8b3			bne +
.a8b1	f6 29		inc $29,x			inc DStack+5,x
.a8b3					+
.a8b3	20 50 ca	jsr $ca50			jsr NOS_One_Minus	; loop counter
.a8b6	f6 24		inc $24,x			inc DStack+0,x
.a8b8	b5 24		lda $24,x			lda DStack+0,x
.a8ba	c9 10		cmp #$10			cmp #16
.a8bc	90 cd		bcc $a88b			bcc _loop		; next byte
.a8be	20 dd cd	jsr $cddd			jsr Space
.a8c1	20 d6 a8	jsr $a8d6			jsr dump_print_ascii
.a8c4	4c 74 a8	jmp $a874			jmp _row		; new row
.a8c7					_all_printed:
.a8c7	b5 24		lda $24,x			lda DStack+0,x
.a8c9	f0 06		beq $a8d1			beq _done
.a8cb	20 dd cd	jsr $cddd			jsr Space
.a8ce	20 d6 a8	jsr $a8d6			jsr dump_print_ascii
.a8d1					_done:
.a8d1	e8		inx				inx			; drop work area
.a8d2	e8		inx				inx
.a8d3	4c 45 c5	jmp $c545			jmp Two_drop		; one byte less than 4x INX
.a8d6					dump_print_ascii:
.a8d6	a0 00		ldy #$00			ldy #0
.a8d8					_loop:
.a8d8	b1 00		lda ($00),y			lda (cp),y
.a8da	20 d1 cd	jsr $cdd1			jsr Emit_A
.a8dd	c8		iny				iny
.a8de	c0 08		cpy #$08			cpy #8
.a8e0	d0 03		bne $a8e5			bne +
.a8e2	20 dd cd	jsr $cddd			jsr Space
.a8e5					+
.a8e5	98		tya				tya
.a8e6	d5 24		cmp $24,x			cmp DStack+0,x
.a8e8	90 ee		bcc $a8d8			bcc _loop
.a8ea	60		rts				rts
=124					CL	.var *-XtPtr1
=$a8eb					en = *	; remember here
>a86d	7c					.byte CL	;wh_CodeLength
>a8eb	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=43120					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8f0	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8f1	10					.byte WordFlags	;wh_Flags
>a8f2	03					.byte 3	;wh_CodeLength
>a8f3	85					  .byte LinkDisplacement
=$a8f4					XtPtr1 ::= *
=43120					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8f4	20 e0 b3	jsr $b3e0	C_Dot_Hex:	jsr PopA
.a8f7	48		pha		C_Dot_Hex_A:	pha
.a8f8	4a		lsr a				lsr		; convert high nibble first
.a8f9	4a		lsr a				lsr
.a8fa	4a		lsr a				lsr
.a8fb	4a		lsr a				lsr
.a8fc	20 00 a9	jsr $a900			jsr _nibble_to_ascii
.a8ff	68		pla				pla
.a900					_nibble_to_ascii:
.a900	29 0f		and #$0f			and #$0F	; only use lower nibble
.a902	c9 0a		cmp #$0a			cmp #9+1
.a904	90 02		bcc $a908			bcc +
.a906	69 06		adc #$06			adc #6
.a908	69 30		adc #$30	+		adc #'0'
.a90a	4c d1 cd	jmp $cdd1			jmp Emit_A
=25					CL	.var *-XtPtr1
=$a90d					en = *	; remember here
>a8f2	19					.byte CL	;wh_CodeLength
>a90d	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=43153					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a911	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a912	10					.byte WordFlags	;wh_Flags
>a913	03					.byte 3	;wh_CodeLength
>a914	21					  .byte LinkDisplacement
=$a915					XtPtr1 ::= *
=43153					WordListLink ::= Nt0 ; remember the nt of this word for later
.a915	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a917	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a91a	4c f4 a8	jmp $a8f4			jmp C_Dot_Hex	; do lo byte
=8					CL	.var *-XtPtr1
=$a91d					en = *	; remember here
>a913	08					.byte CL	;wh_CodeLength
.a91d					is_printable:
.a91d	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a91f	90 07		bcc $a928	                bcc _done
.a921	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a923	b0 02		bcs $a927	                bcs _failed
.a925	38		sec		                sec
.a926	60		rts		                rts
.a927	18		clc		_failed:	clc
.a928	60		rts		_done:		rts
>a929	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=43179					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a92b	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a92c	10					.byte WordFlags	;wh_Flags
>a92d	03					.byte 3	;wh_CodeLength
>a92e	1a					  .byte LinkDisplacement
=$a92f					XtPtr1 ::= *
=43179					WordListLink ::= Nt0 ; remember the nt of this word for later
.a92f					Dot_s:
.a92f	a9 3c		lda #$3c			lda #'<'
.a931	20 d1 cd	jsr $cdd1			jsr Emit_A
.a934	20 3f c2	jsr $c23f			jsr Depth	; ( -- u )
.a937	20 28 cc	jsr $cc28			jsr print_u
.a93a	a9 3e		lda #$3e			lda #'>'
.a93c	20 d1 cd	jsr $cdd1			jsr Emit_A
.a93f	20 dd cd	jsr $cddd			jsr Space
.a942	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a944	88		dey		_loop:		dey
.a945	88		dey				dey
.a946	86 14		stx $14				stx tmp1
.a948	c4 14		cpy $14				cpy tmp1
.a94a	90 15		bcc $a961			bcc _done
.a94c	98		tya				tya			; save index
.a94d	48		pha				pha
.a94e	ca		dex				dex			; push stack[index]
.a94f	ca		dex				dex
.a950	b9 24 00	lda $0024,y			lda DStack+0,y
.a953	95 24		sta $24,x			sta DStack+0,x
.a955	b9 25 00	lda $0025,y			lda DStack+1,y
.a958	95 25		sta $25,x			sta DStack+1,x
.a95a	20 de cb	jsr $cbde			jsr Dot
.a95d	68		pla				pla			; restore index
.a95e	a8		tay				tay
.a95f	d0 e3		bne $a944			bne _loop
.a961					_done:
=50					CL	.var *-XtPtr1
=$a961					en = *	; remember here
>a92d	32					.byte CL	;wh_CodeLength
.a961	60		rts				rts
>a962	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=43241					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a969	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a96a	50					.byte WordFlags	;wh_Flags
>a96b	03					.byte 3	;wh_CodeLength
>a96c	3e					  .byte LinkDisplacement
=$a96d					XtPtr1 ::= *
=43241					WordListLink ::= Nt0 ; remember the nt of this word for later
.a96d					Compare:
.a96d	20 42 b4	jsr $b442			jsr underflow_4
.a970	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a972	85 19		sta $19				sta tmp3+1
.a974	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a976	b4 27		ldy $27,x			ldy DStack+3,x
.a978	85 16		sta $16				sta tmp2+0
.a97a	84 17		sty $17				sty tmp2+1
.a97c	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a97e	85 18		sta $18				sta tmp3+0
.a980	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a982	b4 2b		ldy $2b,x			ldy DStack+7,x
.a984	85 14		sta $14				sta tmp1+0
.a986	84 15		sty $15				sty tmp1+1
.a988	a0 00		ldy #$00			ldy #0		; for each char
.a98a					_loop:
.a98a	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a98c	f0 13		beq $a9a1			beq _str1
.a98e					_L1:
.a98e	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a990	f0 27		beq $a9b9			beq _str2
.a992					_L2:
.a992	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a994	d1 16		cmp ($16),y			cmp (tmp2),y
.a996	d0 19		bne $a9b1			bne _neq
.a998	c8		iny				iny		; to next char
.a999	d0 ef		bne $a98a			bne _loop
.a99b	e6 15		inc $15				inc tmp1+1	; to next page
.a99d	e6 17		inc $17				inc tmp2+1
.a99f	d0 e9		bne $a98a			bne _loop
.a9a1	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a9a3	10 e9		bpl $a98e			bpl _L1
.a9a5	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a9a7	d0 0a		bne $a9b3			bne _less
.a9a9	b5 25		lda $25,x			lda DStack+1,x
.a9ab	d0 06		bne $a9b3			bne _less
.a9ad	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9af	f0 0e		beq $a9bf			beq _gt2
.a9b1	b0 0a		bcs $a9bd	_neq:		bcs _greater
.a9b3	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9b5	95 2a		sta $2a,x			sta DStack+6,x
.a9b7	d0 0a		bne $a9c3			bne _done
.a9b9	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9bb	10 d5		bpl $a992			bpl _L2
.a9bd	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9bf	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9c1	a9 00		lda #$00			lda #0
.a9c3	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9c5	8a		txa				txa		; Remove all but the result from the stack.
.a9c6	18		clc				clc
.a9c7	69 06		adc #$06			adc #6
.a9c9	aa		tax				tax
=93					CL	.var *-XtPtr1
=$a9ca					en = *	; remember here
>a96b	5d					.byte CL	;wh_CodeLength
.a9ca	60		rts				rts
>a9cb	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=43345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9d1	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9d2	50					.byte WordFlags	;wh_Flags
>a9d3	03					.byte 3	;wh_CodeLength
>a9d4	68					  .byte LinkDisplacement
=$a9d5					XtPtr1 ::= *
=43345					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9d5					Search:
.a9d5	20 42 b4	jsr $b442			jsr underflow_4
.a9d8	b5 24		lda $24,x			lda DStack+0,x
.a9da	15 25		ora $25,x			ora DStack+1,x
.a9dc	d0 09		bne $a9e7			bne _start_search
.a9de	e8		inx				inx		; Drop u2
.a9df	e8		inx				inx
.a9e0	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9e2	95 24		sta $24,x			sta DStack+0,x
.a9e4	95 25		sta $25,x			sta DStack+1,x
.a9e6	60		rts				rts
.a9e7					_start_search:
.a9e7	20 f5 b7	jsr $b7f5			jsr Zero
.a9ea					_search_loop:
.a9ea	18		clc				clc
.a9eb	b5 24		lda $24,x			lda DStack+0,x
.a9ed	75 26		adc $26,x			adc DStack+2,x
.a9ef	85 14		sta $14				sta tmp1+0
.a9f1	b5 25		lda $25,x			lda DStack+1,x
.a9f3	75 27		adc $27,x			adc DStack+3,x
.a9f5	85 15		sta $15				sta tmp1+1
.a9f7	d5 2b		cmp $2b,x			cmp DStack+7,x
.a9f9	90 13		bcc $aa0e			bcc _init_comparison ; Obviously less
.a9fb	d0 06		bne $aa03			bne _not_found
.a9fd	b5 2a		lda $2a,x			lda DStack+6,x
.a9ff	c5 14		cmp $14				cmp tmp1
.aa01	b0 0b		bcs $aa0e			bcs _init_comparison
.aa03					_not_found:
.aa03	e8		inx				inx		; Remove offset
.aa04	e8		inx				inx
.aa05	e8		inx				inx		; Remove u2
.aa06	e8		inx				inx
.aa07	a9 00		lda #$00			lda #0
.aa09	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aa0b	95 25		sta $25,x			sta DStack+1,x
.aa0d	60		rts				rts
.aa0e					_init_comparison:
.aa0e	18		clc				clc
.aa0f	b5 2c		lda $2c,x			lda DStack+8,x
.aa11	75 24		adc $24,x			adc DStack+0,x
.aa13	85 14		sta $14				sta tmp1
.aa15	b5 2d		lda $2d,x			lda DStack+9,x
.aa17	75 25		adc $25,x			adc DStack+1,x
.aa19	85 15		sta $15				sta tmp1+1
.aa1b	b5 28		lda $28,x			lda DStack+4,x
.aa1d	85 16		sta $16				sta tmp2
.aa1f	b5 29		lda $29,x			lda DStack+5,x
.aa21	85 17		sta $17				sta tmp2+1
.aa23	b5 26		lda $26,x			lda DStack+2,x
.aa25	85 18		sta $18				sta tmp3+0
.aa27	b5 27		lda $27,x			lda DStack+3,x
.aa29	85 19		sta $19				sta tmp3+1
.aa2b					_comparison_loop:
.aa2b	a0 00		ldy #$00			ldy #0
.aa2d	b1 14		lda ($14),y			lda (tmp1),y
.aa2f	d1 16		cmp ($16),y			cmp (tmp2),y
.aa31	f0 06		beq $aa39			beq _letters_match
.aa33	20 69 ca	jsr $ca69			jsr One_plus
.aa36	4c ea a9	jmp $a9ea			jmp _search_loop
.aa39					_letters_match:
.aa39	e6 14		inc $14				inc tmp1
.aa3b	d0 02		bne $aa3f			bne +
.aa3d	e6 15		inc $15				inc tmp1+1
.aa3f					+
.aa3f	e6 16		inc $16				inc tmp2
.aa41	d0 02		bne $aa45			bne +
.aa43	e6 17		inc $17				inc tmp2+1
.aa45					+
.aa45	a5 18		lda $18				lda tmp3
.aa47	d0 02		bne $aa4b			bne +
.aa49	c6 19		dec $19				dec tmp3+1
.aa4b					+
.aa4b	c6 18		dec $18				dec tmp3
.aa4d	a5 18		lda $18				lda tmp3
.aa4f	05 19		ora $19				ora tmp3+1
.aa51	d0 d8		bne $aa2b			bne _comparison_loop ; Check the next letter
.aa53	18		clc				clc
.aa54	b5 24		lda $24,x			lda DStack+0,x
.aa56	75 2c		adc $2c,x			adc DStack+8,x
.aa58	95 2c		sta $2c,x			sta DStack+8,x
.aa5a	b5 25		lda $25,x			lda DStack+1,x
.aa5c	75 2d		adc $2d,x			adc DStack+9,x
.aa5e	95 2d		sta $2d,x			sta DStack+9,x
.aa60	38		sec				sec
.aa61	b5 2a		lda $2a,x			lda DStack+6,x
.aa63	f5 24		sbc $24,x			sbc DStack+0,x
.aa65	95 2a		sta $2a,x			sta DStack+6,x
.aa67	b5 2b		lda $2b,x			lda DStack+7,x
.aa69	f5 25		sbc $25,x			sbc DStack+1,x
.aa6b	95 2b		sta $2b,x			sta DStack+7,x
.aa6d	e8		inx				inx		; drop offset
.aa6e	e8		inx				inx
.aa6f	e8		inx				inx		; drop u2
.aa70	e8		inx				inx
.aa71	a9 ff		lda #$ff			lda #$FF
.aa73	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa75	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-XtPtr1
=$aa77					en = *	; remember here
>a9d3	a2					.byte CL	;wh_CodeLength
.aa77	60		rts				rts
>aa78	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=43518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa7e	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa7f	18					.byte WordFlags	;wh_Flags
>aa80	03					.byte 3	;wh_CodeLength
>aa81	ad					  .byte LinkDisplacement
=$aa82					XtPtr1 ::= *
=43518					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa82					Marker:
.aa82	20 37 ca	jsr $ca37			jsr Here		; Save original CP, which
.aa85	20 18 c1	jsr $c118			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa88	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa8a	a9 a2		lda #$a2			lda #<_runtime
.aa8c	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.aa8f	20 0c cd	jsr $cd0c			jsr Comma		; Append original CP
.aa92	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa94	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa97	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.aa9a	c8		iny				iny
.aa9b	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa9d	90 f5		bcc $aa94			bcc _loop
.aa9f	4c 0d c1	jmp $c10d			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-XtPtr1
=$aaa2					en = *	; remember here
>aa80	20					.byte CL	;wh_CodeLength
.aaa2					_runtime:
.aaa2	68		pla				pla		; Pop the RTS address off the stack
.aaa3	85 14		sta $14				sta tmp1+0
.aaa5	68		pla				pla
.aaa6	85 15		sta $15				sta tmp1+1
.aaa8	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aaaa	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aaac	85 00		sta $00				sta cp+0
.aaae	c8		iny				iny
.aaaf	b1 14		lda ($14),y			lda (tmp1),y
.aab1	85 01		sta $01				sta cp+1
.aab3	c8		iny				iny
.aab4					_rloop:
.aab4	b1 14		lda ($14),y			lda (tmp1),y
.aab6	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aab9	c8		iny				iny
.aaba	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aabc	90 f6		bcc $aab4			bcc _rloop
.aabe	60		rts				rts
>aabf	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=43588					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aac4	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aac5	10					.byte WordFlags	;wh_Flags
>aac6	03					.byte 3	;wh_CodeLength
>aac7	46					  .byte LinkDisplacement
=$aac8					XtPtr1 ::= *
=43588					WordListLink ::= Nt0 ; remember the nt of this word for later
.aac8					Words:
.aac8	a9 ff		lda #$ff			lda #$ff
.aaca	20 e7 b7	jsr $b7e7			jsr PushZA		; Alloc space for line size & wordlist #
.aacd	ca		dex				dex			; Alloc space for a nt
.aace	ca		dex				dex
.aacf					_wordlist_next:
.aacf	20 75 ab	jsr $ab75			jsr CR			; start wordlist on new line
.aad2	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aad4	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aad6	cc 2a 03	cpy $032a			cpy Num_OrderV
.aad9	b0 44		bcs $ab1f			bcs _wordslist_done	; ran out of search wordlist entries?
.aadb	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aade	0a		asl a				asl			; TOS= WORDLISTS[A]
.aadf	a8		tay				tay
.aae0	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aae3	95 24		sta $24,x			sta DStack+0,x
.aae5	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aae8	95 25		sta $25,x			sta DStack+1,x
.aaea	f0 e3		beq $aacf			beq _wordlist_next	; end of list?
.aaec					_word_loop:
.aaec	20 67 cf	jsr $cf67			jsr Dup			; ( wordlist# nt nt )
.aaef	20 f5 bd	jsr $bdf5			jsr Name_To_String	; ( wordlist# nt addr u )
.aaf2	b5 2b		lda $2b,x			lda DStack+7,x
.aaf4	38		sec				sec			; don't forget the space between words
.aaf5	75 24		adc $24,x			adc DStack+0,x
.aaf7	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aaf9	90 05		bcc $ab00			bcc +
.aafb	20 75 ab	jsr $ab75			jsr CR
.aafe	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.ab00	95 2b		sta $2b,x	+		sta DStack+7,x
.ab02	20 e9 cd	jsr $cde9			jsr Type		; ( wordlist# nt )
.ab05	20 dd cd	jsr $cddd			jsr Space
.ab08	b5 24		lda $24,x			lda DStack+0,x
.ab0a	85 14		sta $14				sta tmp1+0
.ab0c	b5 25		lda $25,x			lda DStack+1,x
.ab0e	85 15		sta $15				sta tmp1+1
.ab10	20 9b 82	jsr $829b			jsr LinkNext		; tmp1= next word nt in list
.ab13	a5 14		lda $14				lda tmp1+0
.ab15	95 24		sta $24,x			sta DStack+0,x
.ab17	a5 15		lda $15				lda tmp1+1
.ab19	95 25		sta $25,x			sta DStack+1,x
.ab1b	d0 cf		bne $aaec			bne _word_loop		; end of list?
.ab1d	f0 b0		beq $aacf			beq _wordlist_next
.ab1f					_wordslist_done:
.ab1f	4c 45 c5	jmp $c545			jmp Two_Drop
=90					CL	.var *-XtPtr1
=$ab22					en = *	; remember here
>aac6	5a					.byte CL	;wh_CodeLength
>ab22	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=43690					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab2a	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab2b	10					.byte WordFlags	;wh_Flags
>ab2c	03					.byte 3	;wh_CodeLength
>ab2d	66					  .byte LinkDisplacement
=$ab2e					XtPtr1 ::= *
=43690					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab2e	20 06 b4	jsr $b406	WordSize:	jsr PopTmp1
.ab31	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab33	b1 14		lda ($14),y			lda (tmp1),y
.ab35	4c e7 b7	jmp $b7e7			jmp PushZA
=10					CL	.var *-XtPtr1
=$ab38					en = *	; remember here
>ab2c	0a					.byte CL	;wh_CodeLength
>ab38	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=43711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab3f	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab40	00					.byte WordFlags	;wh_Flags
>ab41	03					.byte 3	;wh_CodeLength
>ab42	15					  .byte LinkDisplacement
=$ab43					XtPtr1 ::= *
=43711					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab43					Aligned:
=0					CL	.var *-XtPtr1
=$ab43					en = *	; remember here
>ab41	00					.byte CL	;wh_CodeLength
.ab43	60		rts				rts
>ab44	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=43721					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab49	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab4a	00					.byte WordFlags	;wh_Flags
>ab4b	03					.byte 3	;wh_CodeLength
>ab4c	0a					  .byte LinkDisplacement
=$ab4d					XtPtr1 ::= *
=43721					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4d					Align:
=0					CL	.var *-XtPtr1
=$ab4d					en = *	; remember here
>ab4b	00					.byte CL	;wh_CodeLength
.ab4d	60		rts				rts
>ab4e	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=43732					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab54	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab55	10					.byte WordFlags	;wh_Flags
>ab56	03					.byte 3	;wh_CodeLength
>ab57	0b					  .byte LinkDisplacement
=$ab58					XtPtr1 ::= *
=43732					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab58					xt_output:
.ab58	a0 03		ldy #$03			ldy #>output
.ab5a	a9 06		lda #$06			lda #<output
.ab5c	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$ab5f					en = *	; remember here
>ab56	07					.byte CL	;wh_CodeLength
>ab5f	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=43748					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab64	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab65	10					.byte WordFlags	;wh_Flags
>ab66	03					.byte 3	;wh_CodeLength
>ab67	10					  .byte LinkDisplacement
=$ab68					XtPtr1 ::= *
=43748					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab68	a0 03		ldy #$03	xt_input:	ldy #>input
.ab6a	a9 08		lda #$08			lda #<input
.ab6c	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$ab6f					en = *	; remember here
>ab66	07					.byte CL	;wh_CodeLength
>ab6f	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=43761					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab71	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab72	10					.byte WordFlags	;wh_Flags
>ab73	03					.byte 3	;wh_CodeLength
>ab74	0d					  .byte LinkDisplacement
=$ab75					XtPtr1 ::= *
=43761					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab75					CR:
.ab75	a9 0a		lda #$0a			lda #AscLF
.ab77	20 d1 cd	jsr $cdd1			jsr Emit_A
=5					CL	.var *-XtPtr1
=$ab7a					en = *	; remember here
>ab73	05					.byte CL	;wh_CodeLength
.ab7a	60		rts				rts
>ab7b	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=43775					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab7f	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ab80	10					.byte WordFlags	;wh_Flags
>ab81	03					.byte 3	;wh_CodeLength
>ab82	0e					  .byte LinkDisplacement
=$ab83					XtPtr1 ::= *
=43775					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab83	20 ac b8	jsr $b8ac	Page:		jsr SLiteral_Runtime
.ab86	4c 93 ab	jmp $ab93			  jmp +
>ab89	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab8d	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab93	4c e9 cd	jmp $cde9	+		jmp Type
=19					CL	.var *-XtPtr1
=$ab96					en = *	; remember here
>ab81	13					.byte CL	;wh_CodeLength
>ab96	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=43803					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab9b	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ab9c	50					.byte WordFlags	;wh_Flags
>ab9d	03					.byte 3	;wh_CodeLength
>ab9e	1c					  .byte LinkDisplacement
=$ab9f					XtPtr1 ::= *
=43803					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab9f					At_XY:
.ab9f	20 38 b4	jsr $b438			jsr underflow_2
.aba2	ad 00 03	lda $0300			lda base	; Save the BASE
.aba5	48		pha				pha
.aba6	20 d0 b1	jsr $b1d0			jsr Decimal	; ANSI escape code values need to be in decimal.
.aba9	a9 1b		lda #$1b			lda #AscESC
.abab	20 d1 cd	jsr $cdd1			jsr Emit_A
.abae	a9 5b		lda #$5b			lda #'['
.abb0	20 d1 cd	jsr $cdd1			jsr Emit_A
.abb3	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abb5	20 28 cc	jsr $cc28			jsr print_u
.abb8	a9 3b		lda #$3b			lda #';'
.abba	20 d1 cd	jsr $cdd1			jsr Emit_A
.abbd	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abbf	20 28 cc	jsr $cc28			jsr print_u
.abc2	a9 48		lda #$48			lda #'H'
.abc4	20 d1 cd	jsr $cdd1			jsr Emit_A
.abc7	68		pla				pla		; Restore the base
.abc8	8d 00 03	sta $0300			sta base
=44					CL	.var *-XtPtr1
=$abcb					en = *	; remember here
>ab9d	2c					.byte CL	;wh_CodeLength
.abcb	60		rts				rts
>abcc	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=43855					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abcf	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abd0	00					.byte WordFlags	;wh_Flags
>abd1	03					.byte 3	;wh_CodeLength
>abd2	34					  .byte LinkDisplacement
=$abd3					XtPtr1 ::= *
=43855					WordListLink ::= Nt0 ; remember the nt of this word for later
.abd3	ca		dex		Pad:		dex		; push cp+PadOffset
.abd4	ca		dex				dex
.abd5	18		clc				clc
.abd6	a5 00		lda $00				lda cp+0
.abd8	69 54		adc #$54			adc #PadOffset
.abda	95 24		sta $24,x			sta DStack+0,x
.abdc	a5 01		lda $01				lda cp+1
.abde	69 00		adc #$00			adc #0
.abe0	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$abe2					en = *	; remember here
>abd1	0f					.byte CL	;wh_CodeLength
.abe2	60		rts				rts
>abe3	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=43877					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abe5	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abe6	00					.byte WordFlags	;wh_Flags
>abe7	03					.byte 3	;wh_CodeLength
>abe8	16					  .byte LinkDisplacement
=$abe9					XtPtr1 ::= *
=43877					WordListLink ::= Nt0 ; remember the nt of this word for later
.abe9					Less_Number_Sign:
.abe9	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abeb	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-XtPtr1
=$abee					en = *	; remember here
>abe7	05					.byte CL	;wh_CodeLength
.abee	60		rts				rts
>abef	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=43889					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abf1	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abf2	40					.byte WordFlags	;wh_Flags
>abf3	03					.byte 3	;wh_CodeLength
>abf4	0c					  .byte LinkDisplacement
=$abf5					XtPtr1 ::= *
=43889					WordListLink ::= Nt0 ; remember the nt of this word for later
.abf5					Number_Sign_Greater:
.abf5	20 38 b4	jsr $b438			jsr underflow_2		; double number
.abf8	18		clc				clc			; addr= cp + ToHold
.abf9	a5 00		lda $00				lda cp+0
.abfb	6d 34 03	adc $0334			adc ToHold
.abfe	95 26		sta $26,x			sta DStack+2,x
.ac00	a5 01		lda $01				lda cp+1
.ac02	69 00		adc #$00			adc #0
.ac04	95 27		sta $27,x			sta DStack+3,x
.ac06	38		sec				sec			; u= PadOffset - ToHold
.ac07	a9 54		lda #$54			lda #PadOffset
.ac09	ed 34 03	sbc $0334			sbc ToHold
.ac0c	95 24		sta $24,x			sta DStack+0,x
.ac0e	a9 00		lda #$00			lda #0
.ac10	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-XtPtr1
=$ac12					en = *	; remember here
>abf3	1d					.byte CL	;wh_CodeLength
.ac12	60		rts				rts
>ac13	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=43927					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac17	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac18	00					.byte WordFlags	;wh_Flags
>ac19	03					.byte 3	;wh_CodeLength
>ac1a	26					  .byte LinkDisplacement
=$ac1b					XtPtr1 ::= *
=43927					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac1b	20 e0 b3	jsr $b3e0	Hold:		jsr PopA
.ac1e	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac21	ac 34 03	ldy $0334			ldy ToHold
.ac24	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-XtPtr1
=$ac26					en = *	; remember here
>ac19	0b					.byte CL	;wh_CodeLength
.ac26	60		rts				rts
>ac27	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=43944					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac28	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac29	50					.byte WordFlags	;wh_Flags
>ac2a	03					.byte 3	;wh_CodeLength
>ac2b	11					  .byte LinkDisplacement
=$ac2c					XtPtr1 ::= *
=43944					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac2c					Number_Sign:
.ac2c	20 38 b4	jsr $b438			jsr underflow_2		; double number
.ac2f	a9 00		lda #$00			lda #0			;   init remainder
.ac31	18		clc				clc
.ac32	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac34					_11:
.ac34	2a		rol a				rol a			;   shift remainder
.ac35	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac38	90 03		bcc $ac3d			bcc _27
.ac3a	ed 00 03	sbc $0300			sbc base
.ac3d					_27:
.ac3d	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac3f	36 27		rol $27,x			rol DStack+3,x
.ac41	36 24		rol $24,x			rol DStack+0,x
.ac43	36 25		rol $25,x			rol DStack+1,x
.ac45	88		dey				dey
.ac46	d0 ec		bne $ac34			bne _11
.ac48	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac4a	90 02		bcc $ac4e			bcc +
.ac4c	69 06		adc #$06			adc #7-1
.ac4e	69 30		adc #$30	+		adc #'0'
.ac50	d0 cc		bne $ac1e			bne Hold_A
=38					CL	.var *-XtPtr1
=$ac52					en = *	; remember here
>ac2a	26					.byte CL	;wh_CodeLength
>ac52	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=43988					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac54	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac55	00					.byte WordFlags	;wh_Flags
>ac56	03					.byte 3	;wh_CodeLength
>ac57	2c					  .byte LinkDisplacement
=$ac58					XtPtr1 ::= *
=43988					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac58					Number_Sign_S:
.ac58					_loop:
.ac58	20 2c ac	jsr $ac2c			jsr Number_sign	; convert a single number ("#")
.ac5b	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac5d	15 25		ora $25,x			ora DStack+1,x
.ac5f	15 26		ora $26,x			ora DStack+2,x
.ac61	15 27		ora $27,x			ora DStack+3,x
.ac63	d0 f3		bne $ac58			bne _loop
=13					CL	.var *-XtPtr1
=$ac65					en = *	; remember here
>ac56	0d					.byte CL	;wh_CodeLength
.ac65	60		rts				rts
>ac66	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=44010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac6a	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac6b	10					.byte WordFlags	;wh_Flags
>ac6c	03					.byte 3	;wh_CodeLength
>ac6d	16					  .byte LinkDisplacement
=$ac6e					XtPtr1 ::= *
=44010					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac6e	20 fb b3	jsr $b3fb	Sign:		jsr PopYA
.ac71	98		tya				tya		; test MSB of TOS
.ac72					Sign_P:
.ac72	30 01		bmi $ac75			bmi _minus
.ac74	60		rts				rts
.ac75	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac77	d0 a5		bne $ac1e			bne hold_a
=11					CL	.var *-XtPtr1
=$ac79					en = *	; remember here
>ac6c	0b					.byte CL	;wh_CodeLength
>ac79	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=44031					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac7f	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac80	50					.byte WordFlags	;wh_Flags
>ac81	03					.byte 3	;wh_CodeLength
>ac82	15					  .byte LinkDisplacement
=$ac83					XtPtr1 ::= *
=44031					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac83					Cleave:
.ac83	20 38 b4	jsr $b438			jsr underflow_2
.ac86	20 f4 c4	jsr $c4f4			jsr Minus_leading	; -LEADING ( addr u )
.ac89	20 f0 c3	jsr $c3f0			jsr Input_To_R	; save old imput state
.ac8c	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac8e	85 06		sta $06				sta ciblen
.ac90	b5 25		lda $25,x			lda DStack+1,x
.ac92	85 07		sta $07				sta ciblen+1
.ac94	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac96	85 04		sta $04				sta cib
.ac98	b5 27		lda $27,x			lda DStack+3,x
.ac9a	85 05		sta $05				sta cib+1
.ac9c	a9 00		lda #$00			lda #0
.ac9e	85 08		sta $08				sta toin	; >IN pointer is zero
.aca0	85 09		sta $09				sta toin+1
.aca2	20 77 ba	jsr $ba77			jsr parse_name	; ( addr u addr-s u-s )
.aca5	b5 24		lda $24,x			lda DStack+0,x
.aca7	15 25		ora $25,x			ora DStack+1,x
.aca9	f0 23		beq $acce			beq _done
.acab	38		sec				sec
.acac	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.acae	f5 24		sbc $24,x			sbc DStack+0,x
.acb0	95 28		sta $28,x			sta DStack+4,x
.acb2	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.acb4	f5 25		sbc $25,x			sbc DStack+1,x
.acb6	95 29		sta $29,x			sta DStack+5,x
.acb8	18		clc				clc
.acb9	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acbb	75 24		adc $24,x			adc DStack+0,x
.acbd	95 2a		sta $2a,x			sta DStack+6,x
.acbf	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.acc1	75 25		adc $25,x			adc DStack+1,x
.acc3	95 2b		sta $2b,x			sta DStack+7,x
.acc5	20 56 c5	jsr $c556			jsr Two_swap		; ( addr-s u-s addr u )
.acc8	20 f4 c4	jsr $c4f4			jsr Minus_leading
.accb	20 56 c5	jsr $c556			jsr Two_swap		; ( addr u addr-s u-s )
.acce					_done:
.acce	20 11 c4	jsr $c411			jsr R_To_Input
=78					CL	.var *-XtPtr1
=$acd1					en = *	; remember here
>ac81	4e					.byte CL	;wh_CodeLength
.acd1	60		rts				rts
>acd2	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=44122					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>acda	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>acdb	50					.byte WordFlags	;wh_Flags
>acdc	03					.byte 3	;wh_CodeLength
>acdd	5b					  .byte LinkDisplacement
=$acde					XtPtr1 ::= *
=44122					WordListLink ::= Nt0 ; remember the nt of this word for later
.acde					Hexstore:
.acde	20 3d b4	jsr $b43d			jsr underflow_3
.ace1	20 67 cf	jsr $cf67			jsr Dup		; Save copy of original address
.ace4	20 75 c6	jsr $c675			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.ace7					_loop:
.ace7	b5 24		lda $24,x			lda DStack+0,x
.ace9	15 25		ora $25,x			ora DStack+1,x
.aceb	f0 37		beq $ad24			beq _done
.aced	20 83 ac	jsr $ac83			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.acf0	20 75 c6	jsr $c675			jsr Two_to_r
.acf3	20 f5 b7	jsr $b7f5			jsr Zero
.acf6	20 f5 b7	jsr $b7f5			jsr Zero
.acf9	20 51 c6	jsr $c651			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.acfc	20 54 b0	jsr $b054			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.acff	b5 24		lda $24,x			lda DStack+0,x
.ad01	15 25		ora $25,x			ora DStack+1,x
.ad03	d0 18		bne $ad1d			bne _have_chars_left
.ad05	20 45 c5	jsr $c545			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ad08	20 1c c0	jsr $c01c			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ad0b	20 2a cf	jsr $cf2a			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad0e	20 70 cd	jsr $cd70			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad11	20 0f cf	jsr $cf0f			jsr R_From		; R>
.ad14	20 69 ca	jsr $ca69			jsr One_plus		; 1+
.ad17	20 f1 ce	jsr $cef1			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad1a	4c e7 ac	jmp $ace7			jmp _loop
.ad1d					_have_chars_left:
.ad1d	8a		txa				txa
.ad1e	18		clc				clc
.ad1f	69 08		adc #$08			adc #8
.ad21	aa		tax				tax
.ad22	d0 c3		bne $ace7			bne _loop
.ad24					_done:
.ad24	e8		inx				inx
.ad25	e8		inx				inx
.ad26	e8		inx				inx
.ad27	e8		inx				inx			; 2DROP
.ad28	20 51 c6	jsr $c651			jsr Two_r_from		; ( addr2+n addr2 )
.ad2b	20 84 cf	jsr $cf84			jsr Swap
.ad2e	4c c6 cb	jmp $cbc6			jmp Minus		; ( n )
=83					CL	.var *-XtPtr1
=$ad31					en = *	; remember here
>acdc	53					.byte CL	;wh_CodeLength
>ad31	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=44215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad37	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad38	50					.byte WordFlags	;wh_Flags
>ad39	03					.byte 3	;wh_CodeLength
>ad3a	5d					  .byte LinkDisplacement
=$ad3b					XtPtr1 ::= *
=44215					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad3b					Within:
.ad3b	20 3d b4	jsr $b43d			jsr underflow_3
.ad3e	20 40 cf	jsr $cf40			jsr Over
.ad41	20 c6 cb	jsr $cbc6			jsr Minus
.ad44	20 f1 ce	jsr $cef1			jsr To_R
.ad47	20 c6 cb	jsr $cbc6			jsr Minus
.ad4a	20 0f cf	jsr $cf0f			jsr R_From
.ad4d	4c a3 c8	jmp $c8a3			jmp U_Less_Than
=21					CL	.var *-XtPtr1
=$ad50					en = *	; remember here
>ad39	15					.byte CL	;wh_CodeLength
>ad50	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=44241					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad51	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad52	18					.byte WordFlags	;wh_Flags
>ad53	03					.byte 3	;wh_CodeLength
>ad54	1a					  .byte LinkDisplacement
=$ad55					XtPtr1 ::= *
=44241					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad55					Backslash:
.ad55	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad58	0d 0d 03	ora $030d			ora BlkV+1
.ad5b	f0 16		beq $ad73			beq _not_block
.ad5d	a5 08		lda $08				lda toin+0
.ad5f	29 3f		and #$3f			and #$3F
.ad61	c9 02		cmp #$02			cmp #2
.ad63	90 16		bcc $ad7b			bcc _rts
.ad65	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad67	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad69	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad6a	69 40		adc #$40	                adc #$40
.ad6c	85 08		sta $08		                sta toin+0
.ad6e	90 0b		bcc $ad7b	                bcc _rts
.ad70	e6 09		inc $09		                inc toin+1
.ad72	60		rts				rts
.ad73					_not_block:
.ad73	a5 06		lda $06		                lda ciblen+0
.ad75	85 08		sta $08		                sta toin+0
.ad77	a5 07		lda $07		                lda ciblen+1
.ad79	85 09		sta $09		                sta toin+1
=38					CL	.var *-XtPtr1
=$ad7b					en = *	; remember here
>ad53	26					.byte CL	;wh_CodeLength
.ad7b	60		rts		_rts:		rts
>ad7c	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=44288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad80	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifyable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad81	50					.byte WordFlags	;wh_Flags
>ad82	03					.byte 3	;wh_CodeLength
>ad83	2f					  .byte LinkDisplacement
=$ad84					XtPtr1 ::= *
=44288					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad84					Move:
.ad84	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad86	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad88	d0 04		bne $ad8e			bne _ne
.ad8a	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad8c	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad8e	90 58		bcc $ade8	_ne:		bcc CMove
.ad90	d0 10		bne $ada2			bne CMove_up
.ad92	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad93	18		clc				clc
.ad94	69 06		adc #$06			adc #6
.ad96	aa		tax				tax
=19					CL	.var *-XtPtr1
=$ad97					en = *	; remember here
>ad82	13					.byte CL	;wh_CodeLength
.ad97	60		rts				rts
>ad98	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=44318					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad9e	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>ad9f	50					.byte WordFlags	;wh_Flags
>ada0	03					.byte 3	;wh_CodeLength
>ada1	1e					  .byte LinkDisplacement
=$ada2					XtPtr1 ::= *
=44318					WordListLink ::= Nt0 ; remember the nt of this word for later
.ada2					CMove_up:
.ada2	20 3d b4	jsr $b43d			jsr underflow_3
.ada5	b5 26		lda $26,x			lda DStack+2,x
.ada7	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.ada9	b5 27		lda $27,x			lda DStack+3,x
.adab	18		clc				clc
.adac	75 25		adc $25,x			adc DStack+1,x
.adae	85 17		sta $17				sta tmp2+1	; point to last page of destination
.adb0	b5 28		lda $28,x			lda DStack+4,x
.adb2	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adb4	b5 29		lda $29,x			lda DStack+5,x
.adb6	18		clc				clc
.adb7	75 25		adc $25,x			adc DStack+1,x
.adb9	85 15		sta $15				sta tmp1+1	; point to last page of source
.adbb	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adbd	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adbf	f0 10		beq $add1			beq _nopartial
.adc1					_outerloop:
.adc1	88		dey				dey
.adc2	f0 07		beq $adcb			beq _finishpage
.adc4					_innerloop:
.adc4	b1 14		lda ($14),y			lda (tmp1),y
.adc6	91 16		sta ($16),y			sta (tmp2),y
.adc8	88		dey				dey
.adc9	d0 f9		bne $adc4			bne _innerloop
.adcb					_finishpage:
.adcb	a0 00		ldy #$00			ldy #0
.adcd	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.adcf	91 16		sta ($16),y			sta (tmp2),y
.add1					_nopartial:
.add1	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.add3	c6 17		dec $17				dec tmp2+1
.add5	d6 25		dec $25,x			dec DStack+1,x
.add7	d0 e8		bne $adc1			bne _outerloop
.add9					_done:
.add9	4c 92 ad	jmp $ad92			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-XtPtr1
=$addc					en = *	; remember here
>ada0	3a					.byte CL	;wh_CodeLength
.addc	4c 47 b4	jmp $b447	Throw_Stack_14: jmp Throw_Stack
>addf	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=44388					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ade4	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>ade5	50					.byte WordFlags	;wh_Flags
>ade6	03					.byte 3	;wh_CodeLength
>ade7	46					  .byte LinkDisplacement
=$ade8					XtPtr1 ::= *
=44388					WordListLink ::= Nt0 ; remember the nt of this word for later
.ade8					CMove:
.ade8	20 3d b4	jsr $b43d			jsr underflow_3
.adeb	b5 26		lda $26,x			lda DStack+2,x
.aded	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adef	b5 27		lda $27,x			lda DStack+3,x
.adf1	85 17		sta $17				sta tmp2+1
.adf3	b5 28		lda $28,x			lda DStack+4,x
.adf5	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adf7	b5 29		lda $29,x			lda DStack+5,x
.adf9	85 15		sta $15				sta tmp1+1
.adfb	a0 00		ldy #$00			ldy #0
.adfd	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.adff	f0 0f		beq $ae10			beq _dopartial
.ae01					_page:
.ae01	b1 14		lda ($14),y			lda (tmp1),y
.ae03	91 16		sta ($16),y			sta (tmp2),y
.ae05	c8		iny				iny
.ae06	d0 f9		bne $ae01			bne _page
.ae08	e6 15		inc $15				inc tmp1+1
.ae0a	e6 17		inc $17				inc tmp2+1
.ae0c	d6 25		dec $25,x			dec DStack+1,x
.ae0e	d0 f1		bne $ae01			bne _page
.ae10					_dopartial:
.ae10	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae12	f0 09		beq $ae1d			beq _done
.ae14					_partial:
.ae14	b1 14		lda ($14),y			lda (tmp1),y
.ae16	91 16		sta ($16),y			sta (tmp2),y
.ae18	c8		iny				iny
.ae19	d6 24		dec $24,x			dec DStack+0,x
.ae1b	d0 f7		bne $ae14			bne _partial
.ae1d	4c 92 ad	jmp $ad92	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-XtPtr1
=$ae20					en = *	; remember here
>ade6	38					.byte CL	;wh_CodeLength
>ae20	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=44451					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae23	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae24	10					.byte WordFlags	;wh_Flags
>ae25	03					.byte 3	;wh_CodeLength
>ae26	3f					  .byte LinkDisplacement
=$ae27					XtPtr1 ::= *
=44451					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae27					UM_Star:
.ae27	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae29	b0 b1		bcs $addc		bcs Throw_Stack_14
.ae2b	18		clc				clc		; tmp2= divsor-1
.ae2c	b5 24		lda $24,x			lda DStack+0,x
.ae2e	e9 00		sbc #$00			sbc #0
.ae30	85 16		sta $16				sta tmp2+0
.ae32	b5 25		lda $25,x			lda DStack+1,x
.ae34	e9 00		sbc #$00			sbc #0
.ae36	85 17		sta $17				sta tmp2+1
.ae38	90 2e		bcc $ae68			bcc _zero	; is divisor zero?
.ae3a	a9 00		lda #$00			lda #0
.ae3c	85 14		sta $14				sta tmp1
.ae3e	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae40	ca		dex				dex
.ae41	ca		dex				dex
.ae42					_outer_loop:
.ae42	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae44	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae46					_inner_loop:
.ae46	90 0c		bcc $ae54			bcc _no_add
.ae48	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae4a	a5 14		lda $14				lda tmp1
.ae4c	65 16		adc $16				adc tmp2
.ae4e	85 14		sta $14				sta tmp1
.ae50	a5 15		lda $15				lda tmp1+1
.ae52	65 17		adc $17				adc tmp2+1
.ae54					_no_add:
.ae54	6a		ror a				ror
.ae55	66 14		ror $14				ror tmp1
.ae57	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae59	88		dey				dey
.ae5a	d0 ea		bne $ae46			bne _inner_loop ; go back for one more shift?
.ae5c	e8		inx				inx
.ae5d	e4 18		cpx $18				cpx tmp3
.ae5f	d0 e1		bne $ae42			bne _outer_loop ; go back for eight more shifts?
.ae61	95 25		sta $25,x			sta DStack+1,x
.ae63	a5 14		lda $14				lda tmp1
.ae65	95 24		sta $24,x			sta DStack+0,x
.ae67	60		rts				rts
.ae68	a9 00		lda #$00	_zero:		lda #0
.ae6a	95 26		sta $26,x			sta DStack+2,x
.ae6c	95 27		sta $27,x			sta DStack+3,x
.ae6e	60		rts				rts
=72					CL	.var *-XtPtr1
=$ae6f					en = *	; remember here
>ae25	48					.byte CL	;wh_CodeLength
>ae6f	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=44529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae71	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae72	10					.byte WordFlags	;wh_Flags
>ae73	03					.byte 3	;wh_CodeLength
>ae74	4e					  .byte LinkDisplacement
=$ae75					XtPtr1 ::= *
=44529					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae75					M_Star:
.ae75	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae77	b0 6b		bcs $aee4		bcs Throw_Stack_15
.ae79	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae7b	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae7d	08		php				php
.ae7e	20 d1 c6	jsr $c6d1			jsr Abs
.ae81	20 84 cf	jsr $cf84			jsr Swap
.ae84	20 d1 c6	jsr $c6d1			jsr Abs
.ae87	20 27 ae	jsr $ae27			jsr UM_Star		; ( d )
.ae8a	28		plp				plp			; handle the sign
.ae8b	10 03		bpl $ae90			bpl +
.ae8d	4c e8 c6	jmp $c6e8			jmp DNegate
.ae90					+
=27					CL	.var *-XtPtr1
=$ae90					en = *	; remember here
>ae73	1b					.byte CL	;wh_CodeLength
.ae90	60		rts				rts
>ae91	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=44562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae92	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae93	00					.byte WordFlags	;wh_Flags
>ae94	03					.byte 3	;wh_CodeLength
>ae95	21					  .byte LinkDisplacement
=$ae96					XtPtr1 ::= *
=44562					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae96					Star:
.ae96	20 27 ae	jsr $ae27			jsr UM_Star
.ae99	e8		inx				inx		; D>S	drop hi cell
.ae9a	e8		inx				inx
=5					CL	.var *-XtPtr1
=$ae9b					en = *	; remember here
>ae94	05					.byte CL	;wh_CodeLength
.ae9b	60		rts				rts
>ae9c	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44578					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aea2	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>aea3	10					.byte WordFlags	;wh_Flags
>aea4	03					.byte 3	;wh_CodeLength
>aea5	10					  .byte LinkDisplacement
=$aea6					XtPtr1 ::= *
=44578					WordListLink ::= Nt0 ; remember the nt of this word for later
.aea6					UM_Slash_Mod:
.aea6	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aea8	b0 3a		bcs $aee4		bcs Throw_Stack_15
.aeaa	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aeac	15 25		ora $25,x			ora DStack+1,x
.aeae	f0 2f		beq $aedf			beq _DivByZero
.aeb0	a0 10		ldy #$10			ldy #16			; for 16 bits
.aeb2					_loop:
.aeb2	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aeb4	36 29		rol $29,x			rol DStack+5,x
.aeb6	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aeb8	36 27		rol $27,x			rol DStack+3,x
.aeba	b0 0a		bcs $aec6			bcs _subtract		;   overflow?
.aebc	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aebe	d5 24		cmp $24,x			cmp DStack+0,x
.aec0	b5 27		lda $27,x			lda DStack+3,x
.aec2	f5 25		sbc $25,x			sbc DStack+1,x
.aec4	90 0d		bcc $aed3			bcc _next
.aec6	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aec8	f5 24		sbc $24,x			sbc DStack+0,x
.aeca	95 26		sta $26,x			sta DStack+2,x
.aecc	b5 27		lda $27,x			lda DStack+3,x
.aece	f5 25		sbc $25,x			sbc DStack+1,x
.aed0	95 27		sta $27,x			sta DStack+3,x
.aed2	38		sec				sec			;   it always fits
.aed3	88		dey		_next:		dey			;  next
.aed4	d0 dc		bne $aeb2			bne _loop
.aed6	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aed8	36 29		rol $29,x			rol DStack+5,x
.aeda	e8		inx				inx			; drop divisor
.aedb	e8		inx				inx
.aedc	4c 84 cf	jmp $cf84			jmp Swap
.aedf	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aee1	4c 80 b4	jmp $b480			jmp ThrowA
=62					CL	.var *-XtPtr1
=$aee4					en = *	; remember here
>aea4	3e					.byte CL	;wh_CodeLength
.aee4	4c 47 b4	jmp $b447	Throw_Stack_15: jmp Throw_Stack
>aee7	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=44653					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aeed	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aeee	10					.byte WordFlags	;wh_Flags
>aeef	03					.byte 3	;wh_CodeLength
>aef0	4b					  .byte LinkDisplacement
=$aef1					XtPtr1 ::= *
=44653					WordListLink ::= Nt0 ; remember the nt of this word for later
.aef1					SM_Slash_Rem:
.aef1	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aef3	b0 ef		bcs $aee4		bcs Throw_Stack_15
.aef5	b5 27		lda $27,x			lda DStack+3,x
.aef7	08		php				php
.aef8	55 25		eor $25,x			eor DStack+1,x
.aefa	08		php				php
.aefb	20 d1 c6	jsr $c6d1			jsr Abs
.aefe	e8		inx				inx		; pretend we pushed n1 to R
.aeff	e8		inx				inx
.af00	20 04 c7	jsr $c704			jsr DAbs
.af03	ca		dex				dex
.af04	ca		dex				dex
.af05	20 a6 ae	jsr $aea6			jsr UM_Slash_Mod	; UM/MOD
.af08	28		plp				plp
.af09	10 03		bpl $af0e			bpl +
.af0b	20 b9 c6	jsr $c6b9			jsr Negate
.af0e					+
.af0e	28		plp				plp
.af0f	10 07		bpl $af18			bpl _done
.af11	e8		inx				inx		; pretend we pushed quotient to R
.af12	e8		inx				inx
.af13	20 b9 c6	jsr $c6b9			jsr Negate
.af16	ca		dex				dex
.af17	ca		dex				dex
.af18					_done:
=39					CL	.var *-XtPtr1
=$af18					en = *	; remember here
>aeef	27					.byte CL	;wh_CodeLength
.af18	60		rts				rts
>af19	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44703					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af1f	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af20	10					.byte WordFlags	;wh_Flags
>af21	03					.byte 3	;wh_CodeLength
>af22	32					  .byte LinkDisplacement
=$af23					XtPtr1 ::= *
=44703					WordListLink ::= Nt0 ; remember the nt of this word for later
.af23					FM_Slash_Mod:
.af23	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af25	b0 bd		bcs $aee4		bcs Throw_Stack_15
.af27	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af29	08		php				php		;  save sign
.af2a	10 0a		bpl $af36			bpl +
.af2c	20 b9 c6	jsr $c6b9			jsr Negate	; NEGATE
.af2f	e8		inx				inx
.af30	e8		inx				inx
.af31	20 e8 c6	jsr $c6e8			jsr DNegate	; DNEGATE
.af34	ca		dex				dex
.af35	ca		dex				dex
.af36					+
.af36	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af38	10 0d		bpl $af47			bpl +
.af3a	18		clc				clc
.af3b	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af3d	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af3f	95 26		sta $26,x			sta DStack+2,x
.af41	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af43	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af45	95 27		sta $27,x			sta DStack+3,x
.af47					+
.af47	20 a6 ae	jsr $aea6			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af4a	28		plp				plp
.af4b	10 07		bpl $af54			bpl +
.af4d	e8		inx				inx		; pretend that we SWAP
.af4e	e8		inx				inx
.af4f	20 b9 c6	jsr $c6b9			jsr Negate
.af52	ca		dex				dex
.af53	ca		dex				dex
.af54					+
=49					CL	.var *-XtPtr1
=$af54					en = *	; remember here
>af21	31					.byte CL	;wh_CodeLength
.af54	60		rts				rts
>af55	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44761					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af59	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af5a	10					.byte WordFlags	;wh_Flags
>af5b	03					.byte 3	;wh_CodeLength
>af5c	3a					  .byte LinkDisplacement
=$af5d					XtPtr1 ::= *
=44761					WordListLink ::= Nt0 ; remember the nt of this word for later
.af5d	20 67 cf	jsr $cf67	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af60	a0 00		ldy #$00			ldy #0			; sign extend n1
.af62	b5 29		lda $29,x			lda DStack+5,x
.af64	10 01		bpl $af67			bpl +
.af66	88		dey				dey
.af67	94 26		sty $26,x	+		sty DStack+2,x
.af69	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af6b	4c f1 ae	jmp $aef1			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-XtPtr1
=$af6e					en = *	; remember here
>af5b	11					.byte CL	;wh_CodeLength
>af6e	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=44783					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af6f	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af70	10					.byte WordFlags	;wh_Flags
>af71	03					.byte 3	;wh_CodeLength
>af72	16					  .byte LinkDisplacement
=$af73					XtPtr1 ::= *
=44783					WordListLink ::= Nt0 ; remember the nt of this word for later
.af73	20 5d af	jsr $af5d	Slash:		jsr Slash_Mod
.af76	4c 9f c9	jmp $c99f			jmp Nip		; Nip remainder
=6					CL	.var *-XtPtr1
=$af79					en = *	; remember here
>af71	06					.byte CL	;wh_CodeLength
>af79	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=44796					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af7c	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af7d	00					.byte WordFlags	;wh_Flags
>af7e	03					.byte 3	;wh_CodeLength
>af7f	0d					  .byte LinkDisplacement
=$af80					XtPtr1 ::= *
=44796					WordListLink ::= Nt0 ; remember the nt of this word for later
.af80	20 5d af	jsr $af5d	Mod:		jsr Slash_Mod
.af83	e8		inx				inx		; Drop quotient
.af84	e8		inx				inx
=5					CL	.var *-XtPtr1
=$af85					en = *	; remember here
>af7e	05					.byte CL	;wh_CodeLength
.af85	60		rts				rts
>af86	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af8b	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af8c	50					.byte WordFlags	;wh_Flags
>af8d	03					.byte 3	;wh_CodeLength
>af8e	0f					  .byte LinkDisplacement
=$af8f					XtPtr1 ::= *
=44811					WordListLink ::= Nt0 ; remember the nt of this word for later
.af8f					Star_Slash_Mod:
.af8f	20 3d b4	jsr $b43d			jsr underflow_3
.af92	20 f1 ce	jsr $cef1			jsr To_R
.af95	20 75 ae	jsr $ae75			jsr M_Star
.af98	20 0f cf	jsr $cf0f			jsr R_From
.af9b	4c f1 ae	jmp $aef1			jmp SM_Slash_Rem
=15					CL	.var *-XtPtr1
=$af9e					en = *	; remember here
>af8d	0f					.byte CL	;wh_CodeLength
>af9e	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=44832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afa0	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>afa1	10					.byte WordFlags	;wh_Flags
>afa2	03					.byte 3	;wh_CodeLength
>afa3	15					  .byte LinkDisplacement
=$afa4					XtPtr1 ::= *
=44832					WordListLink ::= Nt0 ; remember the nt of this word for later
.afa4					Star_Slash:
.afa4	20 8f af	jsr $af8f			jsr Star_Slash_Mod
.afa7	4c 9f c9	jmp $c99f			jmp Nip			; mod
=6					CL	.var *-XtPtr1
=$afaa					en = *	; remember here
>afa2	06					.byte CL	;wh_CodeLength
>afaa	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=44845					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afad	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afae	10					.byte WordFlags	;wh_Flags
>afaf	03					.byte 3	;wh_CodeLength
>afb0	0d					  .byte LinkDisplacement
=$afb1					XtPtr1 ::= *
=44845					WordListLink ::= Nt0 ; remember the nt of this word for later
.afb1					m_star_slash:
.afb1	20 42 b4	jsr $b442	                jsr underflow_4
.afb4	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afb6	55 27		eor $27,x			eor DStack+3,x
.afb8	55 29		eor $29,x			eor DStack+5,x
.afba	08		php				php
.afbb	20 d1 c6	jsr $c6d1	                jsr Abs			; Abs
.afbe	20 f1 ce	jsr $cef1	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afc1	20 d1 c6	jsr $c6d1	                jsr Abs			; Abs
.afc4	20 f1 ce	jsr $cef1	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afc7	20 04 c7	jsr $c704	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afca	20 84 cf	jsr $cf84	                jsr Swap		; Swap
.afcd	20 2a cf	jsr $cf2a	                jsr R_Fetch		; R@
.afd0	20 27 ae	jsr $ae27	                jsr UM_Star		; UM*
.afd3	20 62 ce	jsr $ce62	                jsr Rot			; Rot
.afd6	20 0f cf	jsr $cf0f	                jsr R_From		; R>
.afd9	20 27 ae	jsr $ae27	                jsr UM_Star		; UM*
.afdc	20 62 ce	jsr $ce62	                jsr Rot			; Rot
.afdf	20 81 ca	jsr $ca81	                jsr UMPlus		; 0 D+
.afe2	20 2a cf	jsr $cf2a	                jsr R_Fetch		; R@
.afe5	20 a6 ae	jsr $aea6	                jsr UM_Slash_Mod	; UM/Mod
.afe8	20 87 ce	jsr $ce87	                jsr Not_Rot		; Rot Rot
.afeb	20 0f cf	jsr $cf0f	                jsr R_From		; R>
.afee	20 a6 ae	jsr $aea6	                jsr UM_Slash_Mod	; UM/Mod
.aff1	20 9f c9	jsr $c99f	                jsr Nip			; Swap Drop
.aff4	20 84 cf	jsr $cf84	                jsr Swap		; Swap
.aff7	28		plp				plp
.aff8	10 03		bpl $affd			bpl _rts		; ... 0< if ...
.affa	4c e8 c6	jmp $c6e8	                jmp DNegate
.affd	60		rts		_rts:		rts
=77					CL	.var *-XtPtr1
=$affe					en = *	; remember here
>afaf	4d					.byte CL	;wh_CodeLength
>affe	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=44934					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b006	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>b007	10					.byte WordFlags	;wh_Flags
>b008	03					.byte 3	;wh_CodeLength
>b009	59					  .byte LinkDisplacement
=$b00a					XtPtr1 ::= *
=44934					WordListLink ::= Nt0 ; remember the nt of this word for later
.b00a					Evaluate:
.b00a	18		clc				clc			; signal to zero BLK.
.b00b					load_evaluate:
.b00b	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b00e	48		pha				pha
.b00f	ad 0c 03	lda $030c			lda BlkV+0
.b012	48		pha				pha
.b013	b0 08		bcs $b01d			bcs +		; See if we should zero BLK.
.b015	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b017	8d 0c 03	sta $030c			sta BlkV+0
.b01a	8d 0d 03	sta $030d			sta BlkV+1
.b01d					+
.b01d	20 f0 c3	jsr $c3f0			jsr Input_To_R	; Save the input state to the Return Stack
.b020	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b022	85 02		sta $02				sta insrc+0
.b024	85 03		sta $03				sta insrc+1
.b026	a9 00		lda #$00			lda #0		; >IN= zero
.b028	85 08		sta $08				sta toin+0
.b02a	85 09		sta $09				sta toin+1
.b02c	20 fb b3	jsr $b3fb			jsr PopYA	; ciblen= string length (u)
.b02f	85 06		sta $06				sta ciblen+0
.b031	84 07		sty $07				sty ciblen+1
.b033	20 fb b3	jsr $b3fb			jsr PopYA	; cib= string addr
.b036	85 04		sta $04				sta cib+0
.b038	84 05		sty $05				sty cib+1
.b03a	20 38 b5	jsr $b538			jsr interpret	; ( -- )
.b03d	20 11 c4	jsr $c411			jsr R_To_Input	; restore input state
.b040	68		pla				pla		; Restore BLK from the return stack.
.b041	8d 0c 03	sta $030c			sta BlkV+0
.b044	68		pla				pla
.b045	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-XtPtr1
=$b048					en = *	; remember here
>b008	3e					.byte CL	;wh_CodeLength
.b048	60		rts				rts
>b049	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=45008					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b050	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b051	50					.byte WordFlags	;wh_Flags
>b052	03					.byte 3	;wh_CodeLength
>b053	4a					  .byte LinkDisplacement
=$b054					XtPtr1 ::= *
=45008					WordListLink ::= Nt0 ; remember the nt of this word for later
.b054					To_Number:
.b054	20 42 b4	jsr $b442			jsr underflow_4
.b057	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b059	f0 72		beq $b0cd			beq _done
.b05b					_Char_loop:
.b05b	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b05d	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b05f	90 6c		bcc $b0cd			bcc _done
.b061	c9 3a		cmp #$3a			cmp #'9'+1
.b063	90 08		bcc $b06d			bcc _digit
.b065	29 df		and #$df			and #$df		;   ASCII uppercase
.b067	c9 41		cmp #$41			cmp #'A'
.b069	90 62		bcc $b0cd			bcc _done
.b06b	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b06d	38		sec		_digit:		sec
.b06e	e9 30		sbc #$30			sbc #'0'
.b070	cd 00 03	cmp $0300			cmp base		; must be < base
.b073	b0 58		bcs $b0cd			bcs _done
.b075	48		pha				pha			; Save char value
.b076	20 77 c5	jsr $c577			jsr Two_Over		;   copy ud to work (multiplicand)
.b079	a9 00		lda #$00			lda #0			;   zero ud (product)
.b07b	95 2c		sta $2c,x			sta DStack+8,x
.b07d	95 2d		sta $2d,x			sta DStack+9,x
.b07f	95 2e		sta $2e,x			sta DStack+10,x
.b081	95 2f		sta $2f,x			sta DStack+11,x
.b083	ad 00 03	lda $0300			lda base		;   get multiplier
.b086	d0 23		bne $b0ab			bne _Mul_Test
.b088	48		pha		_Mul_Add:	pha			;   save multiplier
.b089	18		clc				clc			;   ud += work
.b08a	b5 26		lda $26,x			lda DStack+2,x
.b08c	75 2e		adc $2e,x			adc DStack+10,x
.b08e	95 2e		sta $2e,x			sta DStack+10,x
.b090	b5 27		lda $27,x			lda DStack+3,x
.b092	75 2f		adc $2f,x			adc DStack+11,x
.b094	95 2f		sta $2f,x			sta DStack+11,x
.b096	b5 24		lda $24,x			lda DStack+0,x
.b098	75 2c		adc $2c,x			adc DStack+8,x
.b09a	95 2c		sta $2c,x			sta DStack+8,x
.b09c	b5 25		lda $25,x			lda DStack+1,x
.b09e	75 2d		adc $2d,x			adc DStack+9,x
.b0a0	95 2d		sta $2d,x			sta DStack+9,x
.b0a2	68		pla				pla			;   restore multiplier
.b0a3	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b0a5	36 27		rol $27,x			rol DStack+3,x
.b0a7	36 24		rol $24,x			rol DStack+0,x
.b0a9	36 25		rol $25,x			rol DStack+1,x
.b0ab	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0ac	b0 da		bcs $b088			bcs _Mul_Add
.b0ae	d0 f3		bne $b0a3			bne _Mul_Shift
.b0b0	e8		inx				inx			;   2Drop work
.b0b1	e8		inx				inx
.b0b2	e8		inx				inx
.b0b3	e8		inx				inx
.b0b4	68		pla				pla			; recover value
.b0b5	18		clc				clc			; add to ud
.b0b6	75 2a		adc $2a,x			adc DStack+6,x
.b0b8	95 2a		sta $2a,x			sta DStack+6,x
.b0ba	90 0a		bcc $b0c6			bcc +
.b0bc	f6 2b		inc $2b,x			inc DStack+7,x
.b0be	d0 06		bne $b0c6			bne +
.b0c0	f6 28		inc $28,x			inc DStack+4,x
.b0c2	d0 02		bne $b0c6			bne +
.b0c4	f6 29		inc $29,x			inc DStack+5,x
.b0c6					+
.b0c6	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; consume the char
.b0c9	d6 24		dec $24,x			dec DStack+0,x
.b0cb	d0 8e		bne $b05b			bne _Char_loop
.b0cd					_done:
=121					CL	.var *-XtPtr1
=$b0cd					en = *	; remember here
>b052	79					.byte CL	;wh_CodeLength
.b0cd	60		rts				rts
>b0ce	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=45140					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0d4	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0d5	50					.byte WordFlags	;wh_Flags
>b0d6	03					.byte 3	;wh_CodeLength
>b0d7	84					  .byte LinkDisplacement
=$b0d8					XtPtr1 ::= *
=45140					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0d8					Number:
.b0d8	20 38 b4	jsr $b438			jsr underflow_2
.b0db	a9 00		lda #$00			lda #0
.b0dd	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0df	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0e1	ad 00 03	lda $0300			lda base
.b0e4	48		pha				pha
.b0e5	20 b3 cc	jsr $ccb3			jsr Two_dup		; ( addr u addr u )
.b0e8	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0ea	20 ac b1	jsr $b1ac			jsr _MinusCheck		; a minus sign?
.b0ed	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0ef	c9 23		cmp #$23			cmp #'#'
.b0f1	f0 35		beq $b128			beq _base_changed
.b0f3	a0 10		ldy #$10			ldy #16			; hex?
.b0f5	c9 24		cmp #$24			cmp #'$'
.b0f7	f0 2f		beq $b128			beq _base_changed
.b0f9	a0 02		ldy #$02			ldy #2			; binary?
.b0fb	c9 25		cmp #$25			cmp #'%'
.b0fd	f0 29		beq $b128			beq _base_changed
.b0ff	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b101	d0 2f		bne $b132			bne _check_dot
.b103	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b105	c9 03		cmp #$03			cmp #3
.b107	d0 1c		bne $b125			bne _not_a_char
.b109	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b10b	85 1c		sta $1c				sta tmp5
.b10d	b5 27		lda $27,x			lda DStack+3,x
.b10f	85 1d		sta $1d				sta tmp5+1
.b111	a0 02		ldy #$02			ldy #2
.b113	b1 1c		lda ($1c),y			lda (tmp5),y
.b115	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b117	d0 0c		bne $b125			bne _not_a_char
.b119	88		dey				dey		; The char we want is between the single quotes.
.b11a	b1 1c		lda ($1c),y			lda (tmp5),y
.b11c	95 26		sta $26,x			sta DStack+2,x
.b11e	a9 00		lda #$00			lda #0
.b120	95 27		sta $27,x			sta DStack+3,x
.b122	4c 81 b1	jmp $b181			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b125					_not_a_char:
.b125	4c 5e b1	jmp $b15e			jmp _number_error
.b128					_base_changed:
.b128	8c 00 03	sty $0300			sty base	; Switch to the new base
.b12b	20 73 ca	jsr $ca73			jsr NOS_One_Plus ; start one character later
.b12e	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b130	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b132					_check_dot:
.b132	20 ac b1	jsr $b1ac			jsr _MinusCheck
.b135	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b137	85 1c		sta $1c				sta tmp5
.b139	b5 27		lda $27,x			lda DStack+3,x
.b13b	85 1d		sta $1d				sta tmp5+1
.b13d	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b13f	88		dey				dey		; but we need the last character
.b140	b1 1c		lda ($1c),y			lda (tmp5),y
.b142	c9 2e		cmp #$2e			cmp #'.'
.b144	d0 04		bne $b14a			bne _main
.b146	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b148	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b14a					_main:
.b14a	20 b3 cc	jsr $ccb3			jsr Two_Dup
.b14d	a9 00		lda #$00			lda #0
.b14f	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b151	95 29		sta $29,x			sta DStack+5,x
.b153	95 2a		sta $2a,x			sta DStack+6,x
.b155	95 2b		sta $2b,x			sta DStack+7,x
.b157	20 54 b0	jsr $b054			jsr To_Number	; ( ud addr u -- ud addr u )
.b15a	b5 24		lda $24,x			lda DStack+0,x
.b15c	f0 1f		beq $b17d			beq _all_converted
.b15e					_number_error:
.b15e	20 45 c5	jsr $c545			jsr Two_drop	; >NUMBER modified addr u
.b161	20 45 c5	jsr $c545			jsr Two_drop	; ud   (partially converted number)
.b164	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b166	20 d1 cd	jsr $cdd1			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b169	20 e9 cd	jsr $cde9			jsr Type
.b16c	a9 3c		lda #$3c			lda #'<'
.b16e	20 d1 cd	jsr $cdd1			jsr Emit_A
.b171	20 dd cd	jsr $cddd			jsr Space
.b174	68		pla				pla		; restore base
.b175	8d 00 03	sta $0300			sta base
.b178	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b17a	4c 80 b4	jmp $b480			jmp ThrowA
.b17d					_all_converted:
.b17d	e8		inx				inx		; Drop the current addr u
.b17e	e8		inx				inx
.b17f	e8		inx				inx
.b180	e8		inx				inx
.b181					_drop_original_string:
.b181	20 e7 bf	jsr $bfe7			jsr TwoNip	 ; Drop the original addr u
.b184	a5 1a		lda $1a				lda tmp4	; flag for double
.b186	f0 10		beq $b198			beq _single
.b188	a9 20		lda #$20			lda #%00100000
.b18a	05 0c		ora $0c				ora status
.b18c	85 0c		sta $0c				sta status
.b18e	a5 1b		lda $1b				lda tmp4+1
.b190	f0 15		beq $b1a7			beq _done	; no minus, all done
.b192	20 e8 c6	jsr $c6e8			jsr DNegate
.b195	4c a7 b1	jmp $b1a7			jmp _done
.b198					_single:
.b198	e8		inx				inx		; convert ud to u
.b199	e8		inx				inx
.b19a	a9 df		lda #$df			lda #$ff-%00100000
.b19c	25 0c		and $0c				and status
.b19e	85 0c		sta $0c				sta status
.b1a0	a5 1b		lda $1b				lda tmp4+1
.b1a2	f0 03		beq $b1a7			beq _done	; no minus, all done
.b1a4	20 b9 c6	jsr $c6b9			jsr Negate
.b1a7					_done:
.b1a7	68		pla				pla
.b1a8	8d 00 03	sta $0300			sta base
=211					CL	.var *-XtPtr1
=$b1ab					en = *	; remember here
>b0d6	d3					.byte CL	;wh_CodeLength
.b1ab	60		rts				rts
.b1ac					_MinusCheck:
.b1ac	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1ae	d0 09		bne $b1b9			bne +
.b1b0	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1b2	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; start one character later
.b1b5	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1b7	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1b9	60		rts		+		rts
>b1ba	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=45373					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1bd	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1be	10					.byte WordFlags	;wh_Flags
>b1bf	03					.byte 3	;wh_CodeLength
>b1c0	e9					  .byte LinkDisplacement
=$b1c1					XtPtr1 ::= *
=45373					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1c1	a9 10		lda #$10	Hex:		lda #16
.b1c3	d0 0d		bne $b1d2			bne decimal_a
=4					CL	.var *-XtPtr1
=$b1c5					en = *	; remember here
>b1bf	04					.byte CL	;wh_CodeLength
>b1c5	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=45388					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1cc	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1cd	00					.byte WordFlags	;wh_Flags
>b1ce	03					.byte 3	;wh_CodeLength
>b1cf	0f					  .byte LinkDisplacement
=$b1d0					XtPtr1 ::= *
=45388					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1d0	a9 0a		lda #$0a	Decimal:	lda #10
.b1d2	8d 00 03	sta $0300	decimal_a:	sta base+0
.b1d5	a9 00		lda #$00			lda #0
.b1d7	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-XtPtr1
=$b1da					en = *	; remember here
>b1ce	0a					.byte CL	;wh_CodeLength
.b1da	60		rts				rts
>b1db	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=45407					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1df	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1e0	10					.byte WordFlags	;wh_Flags
>b1e1	03					.byte 3	;wh_CodeLength
>b1e2	13					  .byte LinkDisplacement
=$b1e3					XtPtr1 ::= *
=45407					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1e3	a0 03		ldy #$03			ldy #>base
.b1e5	a9 00		lda #$00			lda #<base
.b1e7	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$b1ea					en = *	; remember here
>b1e1	07					.byte CL	;wh_CodeLength
>b1ea	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=45423					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1ef	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1f0	50					.byte WordFlags	;wh_Flags
>b1f1	03					.byte 3	;wh_CodeLength
>b1f2	10					  .byte LinkDisplacement
=$b1f3					XtPtr1 ::= *
=45423					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1f3					Count:
.b1f3	20 24 b4	jsr $b424			jsr underflow_1
.b1f6	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b1f8	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b1fa	d0 02		bne $b1fe			bne +
.b1fc	f6 25		inc $25,x			inc DStack+1,x
.b1fe					+
.b1fe	4c e7 b7	jmp $b7e7			jmp PushZA		; push number of characters, return
=14					CL	.var *-XtPtr1
=$b201					en = *	; remember here
>b1f1	0e					.byte CL	;wh_CodeLength
>b201	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b209	41
=45450					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b20a	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b20b	10					.byte WordFlags	;wh_Flags
>b20c	03					.byte 3	;wh_CodeLength
>b20d	1b					  .byte LinkDisplacement
=$b20e					XtPtr1 ::= *
=45450					WordListLink ::= Nt0 ; remember the nt of this word for later
.b20e	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b210	f0 05		beq $b217			beq _8
.b212	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b214	4c 80 b4	jmp $b480			jmp ThrowA
.b217	e8		inx		_8:		inx
.b218	e8		inx				inx	; Drop n
.b219	60		rts				rts
=12					CL	.var *-XtPtr1
=$b21a					en = *	; remember here
>b20c	0c					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b21a	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=45469					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b21d	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b21e	1c					.byte WordFlags	;wh_Flags
>b21f	03					.byte 3	;wh_CodeLength
>b220	13					  .byte LinkDisplacement
=$b221					XtPtr1 ::= *
=45469					WordListLink ::= Nt0 ; remember the nt of this word for later
.b221					Question_Do:
.b221	20 5d b3	jsr $b35d			jsr Do_Leave_Init
.b224	a9 38		lda #$38			lda #<_runtime
.b226	a0 b2		ldy #$b2			ldy #>_runtime
.b228	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA	; compile JSR _runtime
.b22b	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b22d	a0 03		ldy #$03			ldy #3
.b22f	20 0f cd	jsr $cd0f			jsr Comma_YA
.b232	20 40 b3	jsr $b340			jsr Leave		; compile JMP leave
.b235	4c 55 b2	jmp $b255			jmp Do_8		; finish
=23					CL	.var *-XtPtr1
=$b238					en = *	; remember here
>b21f	17					.byte CL	;wh_CodeLength
.b238					_runtime:
.b238	20 5d b2	jsr $b25d			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b23b	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b23d	f0 01		beq $b240			beq _2
.b23f	60		rts				rts		; return Z=0 to signal continue
.b240	a5 13		lda $13		_2:		lda DoIndex+1
.b242	c9 80		cmp #$80			cmp #$80
.b244	60		rts				rts		; return Z
>b245	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=45511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b247	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b248	1c					.byte WordFlags	;wh_Flags
>b249	03					.byte 3	;wh_CodeLength
>b24a	2a					  .byte LinkDisplacement
=$b24b					XtPtr1 ::= *
=45511					WordListLink ::= Nt0 ; remember the nt of this word for later
.b24b					Do:
.b24b	20 5d b3	jsr $b35d			jsr Do_Leave_Init
.b24e	a9 5d		lda #$5d			lda #<Do_runtime
.b250	a0 b2		ldy #$b2			ldy #>Do_runtime
.b252	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA	; compile JSR _runtime
.b255	20 37 ca	jsr $ca37	Do_8:		jsr Here		; remember loop body start addr
.b258	a9 4b		lda #$4b			lda #<Do		; identifier
.b25a	4c e7 b7	jmp $b7e7			jmp PushZA
=18					CL	.var *-XtPtr1
=$b25d					en = *	; remember here
>b249	12					.byte CL	;wh_CodeLength
.b25d					Do_Runtime:
.b25d	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b260	ac 45 07	ldy $0745			ldy DoStkIndex
.b263	30 2d		bmi $b292			bmi _TooDeep
.b265	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b267	99 46 07	sta $0746,y			sta DoIndexL,y
.b26a	a5 13		lda $13				lda DoIndex+1
.b26c	99 4e 07	sta $074e,y			sta DoIndexH,y
.b26f	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b270	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b272	f5 26		sbc $26,x			sbc DStack+2,x
.b274	99 56 07	sta $0756,y			sta DoFuFaL,y
.b277	a9 80		lda #$80			lda #$80
.b279	f5 27		sbc $27,x			sbc DStack+3,x
.b27b	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b27e	18		clc				clc			; index= FUFA plus original index
.b27f	b5 24		lda $24,x			lda DStack+0,x
.b281	79 56 07	adc $0756,y			adc DoFuFaL,y
.b284	85 12		sta $12				sta DoIndex+0
.b286	b5 25		lda $25,x			lda DStack+1,x
.b288	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b28b	85 13		sta $13				sta DoIndex+1
.b28d	e8		inx				inx			; Drop orig index
.b28e	e8		inx				inx
.b28f	e8		inx				inx			; Drop orig limit
.b290	e8		inx				inx
.b291	60		rts				rts			; return
.b292	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b294	20 80 b4	jsr $b480			jsr ThrowA
>b297	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=45595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b29b	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b29c	1c					.byte WordFlags	;wh_Flags
>b29d	03					.byte 3	;wh_CodeLength
>b29e	54					  .byte LinkDisplacement
=$b29f					XtPtr1 ::= *
=45595					WordListLink ::= Nt0 ; remember the nt of this word for later
.b29f					Loop:
.b29f	a9 a6		lda #$a6			lda #<_Runtime
.b2a1	a0 b2		ldy #$b2			ldy #>_Runtime
.b2a3	4c c1 b2	jmp $b2c1			jmp Plus_Loop_5
=7					CL	.var *-XtPtr1
=$b2a6					en = *	; remember here
>b29d	07					.byte CL	;wh_CodeLength
.b2a6					_Runtime:
.b2a6	e6 12		inc $12				inc DoIndex+0
.b2a8	f0 02		beq $b2ac			beq _Runtime2
.b2aa	b8		clv				clv			; return V=0 to signal loop back
.b2ab	60		rts				rts
.b2ac	18		clc		_Runtime2:	clc
.b2ad	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2af	69 01		adc #$01			adc #1
.b2b1	85 13		sta $13				sta DoIndex+1
.b2b3	60		rts				rts			; return V to signal loop back
>b2b4	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=45625					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2b9	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2ba	1c					.byte WordFlags	;wh_Flags
>b2bb	03					.byte 3	;wh_CodeLength
>b2bc	1e					  .byte LinkDisplacement
=$b2bd					XtPtr1 ::= *
=45625					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2bd					Plus_Loop:
.b2bd	a9 cb		lda #$cb			lda #<Plus_Loop_Runtime
.b2bf	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2c1	20 e2 b2	jsr $b2e2	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2c4	a9 a2		lda #$a2			lda #<(Unloop-wh_LinkNt-1)
.b2c6	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2c8	4c bd b6	jmp $b6bd			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CL	.var *-XtPtr1
=$b2cb					en = *	; remember here
>b2bb	0e					.byte CL	;wh_CodeLength
.b2cb					Plus_Loop_Runtime:
.b2cb	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b2cd	b0 10		bcs $b2df		bcs Throw_Stack_12
.b2cf	18		clc				clc			; DoIndex += step
.b2d0	b5 24		lda $24,x			lda DStack+0,x
.b2d2	65 12		adc $12				adc DoIndex+0
.b2d4	85 12		sta $12				sta DoIndex+0
.b2d6	b5 25		lda $25,x			lda DStack+1,x
.b2d8	65 13		adc $13				adc DoIndex+1
.b2da	85 13		sta $13				sta DoIndex+1
.b2dc	e8		inx				inx			; Drop step
.b2dd	e8		inx				inx
.b2de	60		rts				rts			; return V=0 to signal loop back
.b2df	4c 47 b4	jmp $b447	Throw_Stack_12: jmp Throw_Stack
.b2e2					Loop_End:
.b2e2	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA	; compile JSR runtime
.b2e5	a9 4b		lda #$4b			lda #<Do		; check id
.b2e7	20 0e b2	jsr $b20e	Loop_End_3:	jsr QPairCtlA
.b2ea	a9 50		lda #$50			lda #$50		; compile BVC body
.b2ec	20 1c a7	jsr $a71c			jsr Branch_CommaA
.b2ef	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2f2	ad 44 07	lda $0744			lda DoLeave+1
.b2f5	f0 1b		beq $b312			beq _p9
.b2f7	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b2f9	85 15		sta $15				sta tmp1+1
.b2fb	a0 01		ldy #$01			ldy #1			;   save link
.b2fd	b1 14		lda ($14),y			lda (tmp1),y
.b2ff	48		pha				pha
.b300	88		dey				dey
.b301	b1 14		lda ($14),y			lda (tmp1),y
.b303	48		pha				pha
.b304	a5 00		lda $00				lda cp+0		;   patch addr
.b306	91 14		sta ($14),y			sta (tmp1),y
.b308	a5 01		lda $01				lda cp+1
.b30a	c8		iny				iny
.b30b	91 14		sta ($14),y			sta (tmp1),y
.b30d	68		pla				pla			;   get saved link
.b30e	a8		tay				tay
.b30f	68		pla				pla
.b310	d0 e5		bne $b2f7			bne _p1
.b312					_p9:
.b312	20 fb b3	jsr $b3fb			jsr PopYA		; restore DoLeave
.b315	8d 43 07	sta $0743			sta DoLeave+0
.b318	8c 44 07	sty $0744			sty DoLeave+1
.b31b	60		rts				rts
>b31c	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=45730					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b322	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b323	04					.byte WordFlags	;wh_Flags
>b324	03					.byte 3	;wh_CodeLength
>b325	69					  .byte LinkDisplacement
=$b326					XtPtr1 ::= *
=45730					WordListLink ::= Nt0 ; remember the nt of this word for later
.b326					Unloop:
.b326	ac 45 07	ldy $0745			ldy DoStkIndex
.b329	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b32c	85 12		sta $12				sta DoIndex+0
.b32e	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b331	85 13		sta $13				sta DoIndex+1
.b333	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-XtPtr1
=$b336					en = *	; remember here
>b324	10					.byte CL	;wh_CodeLength
.b336	60		rts				rts
>b337	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=45756					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b33c	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b33d	1c					.byte WordFlags	;wh_Flags
>b33e	03					.byte 3	;wh_CodeLength
>b33f	1a					  .byte LinkDisplacement
=$b340					XtPtr1 ::= *
=45756					WordListLink ::= Nt0 ; remember the nt of this word for later
.b340					Leave:
.b340	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b342	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.b345	a5 01		lda $01				lda cp+1	; save cp
.b347	48		pha				pha
.b348	a5 00		lda $00				lda cp+0
.b34a	48		pha				pha
.b34b	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b34e	ac 44 07	ldy $0744			ldy DoLeave+1
.b351	20 0f cd	jsr $cd0f			jsr Comma_YA
.b354	68		pla				pla		; update DoLeave
.b355	8d 43 07	sta $0743			sta DoLeave+0
.b358	68		pla				pla
.b359	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-XtPtr1
=$b35c					en = *	; remember here
>b33e	1c					.byte CL	;wh_CodeLength
.b35c	60		rts				rts
.b35d					Do_Leave_Init:
.b35d	ad 43 07	lda $0743			lda DoLeave+0
.b360	ac 44 07	ldy $0744			ldy DoLeave+1
.b363	20 b8 b7	jsr $b7b8			jsr PushYA	; save old leave head
.b366	a9 00		lda #$00			lda #0		; init
.b368	8d 44 07	sta $0744			sta DoLeave+1
.b36b	60		rts				rts
>b36c	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=45805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b36d	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b36e	04					.byte WordFlags	;wh_Flags
>b36f	03					.byte 3	;wh_CodeLength
>b370	31					  .byte LinkDisplacement
=$b371					XtPtr1 ::= *
=45805					WordListLink ::= Nt0 ; remember the nt of this word for later
.b371	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b374	ca		dex				dex
.b375	ca		dex				dex
.b376	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b377	a5 12		lda $12				lda DoIndex+0
.b379	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b37c	95 24		sta $24,x			sta DStack+0,x
.b37e	a5 13		lda $13				lda DoIndex+1
.b380	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b383	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-XtPtr1
=$b385					en = *	; remember here
>b36f	14					.byte CL	;wh_CodeLength
.b385	60		rts				rts
>b386	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=45831					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b387	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b388	04					.byte WordFlags	;wh_Flags
>b389	03					.byte 3	;wh_CodeLength
>b38a	1a					  .byte LinkDisplacement
=$b38b					XtPtr1 ::= *
=45831					WordListLink ::= Nt0 ; remember the nt of this word for later
.b38b	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b38e	ca		dex				dex
.b38f	ca		dex				dex
.b390	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b391	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b394	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b397	95 24		sta $24,x			sta DStack+0,x
.b399	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b39c	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b39f	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-XtPtr1
=$b3a1					en = *	; remember here
>b389	16					.byte CL	;wh_CodeLength
.b3a1	60		rts				rts
>b3a2	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=45864					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3a8	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b3a9	1c					.byte WordFlags	;wh_Flags
>b3aa	03					.byte 3	;wh_CodeLength
>b3ab	21					  .byte LinkDisplacement
=$b3ac					XtPtr1 ::= *
=45864					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3ac					Abort_Quote:
.b3ac	20 f3 b8	jsr $b8f3			jsr S_Quote		; compile the string literal
.b3af	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3b1	a9 b6		lda #$b6			lda #<_runtime
.b3b3	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=10					CL	.var *-XtPtr1
=$b3b6					en = *	; remember here
>b3aa	0a					.byte CL	;wh_CodeLength
.b3b6					_runtime:
.b3b6	b5 28		lda $28,x			lda DStack+4,x
.b3b8	15 29		ora $29,x			ora DStack+5,x
.b3ba	d0 03		bne $b3bf			bne _do_abort	; true?
.b3bc	4c 92 ad	jmp $ad92			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3bf					_do_abort:
.b3bf	20 e9 cd	jsr $cde9			jsr Type	; print string
.b3c2	20 75 ab	jsr $ab75			jsr CR		; We follow Gforth in going to a new line
.b3c5	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3c7	4c 80 b4	jmp $b480			jmp ThrowA
>b3ca	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=45903					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3cf	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3d0	10					.byte WordFlags	;wh_Flags
>b3d1	03					.byte 3	;wh_CodeLength
>b3d2	27					  .byte LinkDisplacement
=$b3d3					XtPtr1 ::= *
=45903					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3d3	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3d5	4c 80 b4	jmp $b480			jmp ThrowA
=5					CL	.var *-XtPtr1
=$b3d8					en = *	; remember here
>b3d1	05					.byte CL	;wh_CodeLength
>b3d8	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=45916					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3dc	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3dd	10					.byte WordFlags	;wh_Flags
>b3de	03					.byte 3	;wh_CodeLength
>b3df	0d					  .byte LinkDisplacement
=$b3e0					XtPtr1 ::= *
=45916					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3e0					PopA:
.b3e0	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3e2	b0 63		bcs $b447		bcs Throw_Stack
.b3e4	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3e6	e8		inx				inx
.b3e7	e8		inx				inx
=8					CL	.var *-XtPtr1
=$b3e8					en = *	; remember here
>b3de	08					.byte CL	;wh_CodeLength
.b3e8	60		rts		                rts
.b3e9					PopA2:
.b3e9	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3eb	b0 5a		bcs $b447		bcs Throw_Stack
.b3ed	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3ef	e8		inx				inx
.b3f0	e8		inx				inx
.b3f1	60		rts		                rts
>b3f2	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=45943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3f7	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b3f8	10					.byte WordFlags	;wh_Flags
>b3f9	03					.byte 3	;wh_CodeLength
>b3fa	1b					  .byte LinkDisplacement
=$b3fb					XtPtr1 ::= *
=45943					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3fb					PopYA:
.b3fb	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3fd	b0 48		bcs $b447		bcs Throw_Stack
.b3ff	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b401	b4 25		ldy $25,x			ldy DStack+1,x
.b403	e8		inx				inx
.b404	e8		inx				inx
=10					CL	.var *-XtPtr1
=$b405					en = *	; remember here
>b3f9	0a					.byte CL	;wh_CodeLength
.b405	60		rts				rts
.b406					PopTmp1:
.b406	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b408	b0 3d		bcs $b447		bcs Throw_Stack
.b40a	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b40c	b4 25		ldy $25,x			ldy DStack+1,x
.b40e	e8		inx				inx
.b40f	e8		inx				inx
.b410	85 14		sta $14				sta tmp1+0
.b412	84 15		sty $15				sty tmp1+1
.b414	60		rts				rts
>b415	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b41d	77 5f 31
=45984					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b420	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b421	10					.byte WordFlags	;wh_Flags
>b422	03					.byte 3	;wh_CodeLength
>b423	29					  .byte LinkDisplacement
=$b424					XtPtr1 ::= *
=45984					WordListLink ::= Nt0 ; remember the nt of this word for later
.b424					underflow_1:
.b424	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b426	b0 1f		bcs $b447		bcs Throw_Stack
=4					CL	.var *-XtPtr1
=$b428					en = *	; remember here
>b422	04					.byte CL	;wh_CodeLength
.b428	60		rts				rts
>b429	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b431	77 5f 32
=46004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b434	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b435	10					.byte WordFlags	;wh_Flags
>b436	03					.byte 3	;wh_CodeLength
>b437	14					  .byte LinkDisplacement
=$b438					XtPtr1 ::= *
=46004					WordListLink ::= Nt0 ; remember the nt of this word for later
.b438					underflow_2:
.b438	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b43a	b0 0b		bcs $b447		bcs Throw_Stack
=4					CL	.var *-XtPtr1
=$b43c					en = *	; remember here
>b436	04					.byte CL	;wh_CodeLength
.b43c	60		rts		                rts
.b43d					underflow_3:
.b43d	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b43f	b0 06		bcs $b447		bcs Throw_Stack
.b441	60		rts		                rts
.b442					underflow_4:
.b442	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b444	b0 01		bcs $b447		bcs Throw_Stack
.b446	60		rts		                rts
.b447					Throw_Stack:
.b447	30 04		bmi $b44d			bmi _over
.b449	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b44b	d0 33		bne $b480			bne ThrowA
.b44d	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b44f	d0 2f		bne $b480			bne ThrowA
.b451					Throw_FPStack:
.b451	30 04		bmi $b457			bmi _over
.b453	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b455	d0 29		bne $b480			bne ThrowA
.b457	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b459	d0 25		bne $b480			bne ThrowA
.b45b					Throw_FpOutOfRange:
.b45b	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b45d	d0 21		bne $b480			bne ThrowA
>b45f	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=46053					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b465	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b466	10					.byte WordFlags	;wh_Flags
>b467	03					.byte 3	;wh_CodeLength
>b468	31					  .byte LinkDisplacement
=$b469					XtPtr1 ::= *
=46053					WordListLink ::= Nt0 ; remember the nt of this word for later
.b469					QStack:
.b469	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b46b	b0 da		bcs $b447		bcs Throw_Stack
.b46d	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b46f	c0 0b		cpy #$0b			cpy #FDim+1
.b471	b0 de		bcs $b451			bcs Throw_FPStack
=10					CL	.var *-XtPtr1
=$b473					en = *	; remember here
>b467	0a					.byte CL	;wh_CodeLength
.b473	60		rts				rts			; all OK
>b474	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=46073					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b479	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b47a	10					.byte WordFlags	;wh_Flags
>b47b	03					.byte 3	;wh_CodeLength
>b47c	14					  .byte LinkDisplacement
=$b47d					XtPtr1 ::= *
=46073					WordListLink ::= Nt0 ; remember the nt of this word for later
.b47d	20 e0 b3	jsr $b3e0	Throw:		jsr PopA		; pop n
.b480	20 ab b4	jsr $b4ab	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b483	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b485					Abort_Core:
.b485	20 ac b8	jsr $b8ac			jsr SLiteral_runtime
.b488	4c 8e b4	jmp $b48e			  jmp +
>b48b	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b48e	20 e9 cd	jsr $cde9	+		jsr Type
.b491	20 0f cf	jsr $cf0f			jsr R_From		; show return stack TOS
.b494	20 99 81	jsr $8199			jsr TypeSymbol
.b497	20 2a cf	jsr $cf2a			jsr R_Fetch		; show return stack NOS
.b49a	20 99 81	jsr $8199			jsr TypeSymbol
.b49d	20 75 ab	jsr $ab75			jsr CR
.b4a0					Abort_Core2:
.b4a0	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b4a2	8d 45 07	sta $0745			sta DoStkIndex
.b4a5	20 ee b4	jsr $b4ee			jsr Empty_Stack		; empty the Data Stack & FP stack
.b4a8	4c fd b4	jmp $b4fd			jmp Quit		; continue into QUIT.
.b4ab					Type_Exception_Text_A:
.b4ab	85 16		sta $16				sta tmp2+0	; save error code
.b4ad	a9 51		lda #$51			lda #<Exception_Text_List
.b4af	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4b1	85 18		sta $18				sta tmp3+0
.b4b3	84 19		sty $19				sty tmp3+1
.b4b5	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4b7	b1 18		lda ($18),y			lda (tmp3),y
.b4b9	f0 1a		beq $b4d5			beq _NotFound
.b4bb	c5 16		cmp $16				cmp tmp2+0
.b4bd	f0 11		beq $b4d0			beq _Found
.b4bf	c8		iny		-		iny		;   step to end of entry
.b4c0	b1 18		lda ($18),y			lda (tmp3),y
.b4c2	d0 fb		bne $b4bf			bne -
.b4c4	98		tya				tya		;   step to next entry
.b4c5	38		sec				sec
.b4c6	65 18		adc $18				adc tmp3+0
.b4c8	85 18		sta $18				sta tmp3+0
.b4ca	90 e9		bcc $b4b5			bcc _TestEntry
.b4cc	e6 19		inc $19				inc tmp3+1
.b4ce	d0 e5		bne $b4b5			bne _TestEntry
.b4d0					_Found:
.b4d0	a0 01		ldy #$01			ldy #1
.b4d2	4c 0a ce	jmp $ce0a			jmp Print_ASCIIZ_tmp3_no_lf
.b4d5	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4d7	a5 16		lda $16				lda tmp2+0
.b4d9	20 b8 b7	jsr $b7b8			jsr PushYA
.b4dc	4c de cb	jmp $cbde			jmp Dot
=98					CL	.var *-XtPtr1
=$b4df					en = *	; remember here
>b47b	62					.byte CL	;wh_CodeLength
>b4df	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4e7	61 63 6b
=46186					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4ea	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4eb	10					.byte WordFlags	;wh_Flags
>b4ec	03					.byte 3	;wh_CodeLength
>b4ed	71					  .byte LinkDisplacement
=$b4ee					XtPtr1 ::= *
=46186					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4ee	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4f0	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4f2	85 4c		sta $4c				sta FIndex
=6					CL	.var *-XtPtr1
=$b4f4					en = *	; remember here
>b4ec	06					.byte CL	;wh_CodeLength
.b4f4	60		rts				rts
>b4f5	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=46201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4f9	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b4fa	10					.byte WordFlags	;wh_Flags
>b4fb	03					.byte 3	;wh_CodeLength
>b4fc	0f					  .byte LinkDisplacement
=$b4fd					XtPtr1 ::= *
=46201					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4fd					Quit:
.b4fd	8a		txa				txa		; Save the DStack that we just defined
.b4fe	a2 ff		ldx #$ff			ldx #rsp0
.b500	9a		txs				txs
.b501	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b502	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b504	85 02		sta $02				sta insrc+0
.b506	85 03		sta $03				sta insrc+1
.b508	20 49 b7	jsr $b749			jsr Left_Bracket_NoCheck ; switch to interpret state
.b50b					_get_line:
.b50b	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b50d	85 04		sta $04				sta cib+0
.b50f	a9 02		lda #$02			lda #>buffer0
.b511	85 05		sta $05				sta cib+1
.b513	20 75 c2	jsr $c275			jsr Refill		; ( -- f )
.b516	b5 24		lda $24,x			lda DStack+0,x
.b518	d0 05		bne $b51f			bne +
.b51a	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b51c	4c 80 b4	jmp $b480			jmp ThrowA
.b51f	e8		inx		+		inx			; drop the flag
.b520	e8		inx				inx
.b521	20 38 b5	jsr $b538			jsr interpret
.b524	a5 0a		lda $0a				lda state
.b526	d0 06		bne $b52e			bne _print_compiled
.b528	a9 1d		lda #$1d			lda #<str_ok
.b52a	a0 da		ldy #$da			ldy #>str_ok
.b52c	d0 04		bne $b532			bne _print
.b52e	a9 21		lda #$21	_print_compiled: lda #<str_compiled	; "compile" string
.b530	a0 da		ldy #$da			ldy #>str_compiled
.b532	20 15 ce	jsr $ce15	_print:		jsr Print_ASCIIZ_YA
.b535	4c 0b b5	jmp $b50b			jmp _get_line
=59					CL	.var *-XtPtr1
=$b538					en = *	; remember here
>b4fb	3b					.byte CL	;wh_CodeLength
.b538					Interpret:
.b538					_loop:
.b538	20 69 b4	jsr $b469			jsr QStack		; check stack bounds
.b53b	20 77 ba	jsr $ba77			jsr parse_name		; ( "string" -- addr u )
.b53e	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b540	f0 53		beq $b595	                beq _line_done
.b542	20 b3 cc	jsr $ccb3			jsr Two_dup		; ( addr u -- addr u addr u )
.b545	20 61 bc	jsr $bc61			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b548	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b54a	d0 1b		bne $b567			bne _got_name_token
.b54c	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b54d	e8		inx		                inx
.b54e	20 d8 b0	jsr $b0d8	                jsr Number           ; ( addr u -- u|d )
.b551	a5 0a		lda $0a		                lda state		; interpreting?
.b553	f0 e3		beq $b538	                beq _loop		;   we're done
.b555	a9 20		lda #$20	                lda #$20		; double cell number?
.b557	24 0c		bit $0c		                bit status
.b559	f0 06		beq $b561	                beq _single_number
.b55b	20 53 b8	jsr $b853			jsr Two_literal		; compile a double number
.b55e	4c 38 b5	jmp $b538			jmp _loop
.b561	20 6d b7	jsr $b76d	_single_number:	jsr Literal		; compile a single number
.b564	4c 38 b5	jmp $b538			jmp _loop
.b567					_got_name_token:
.b567	20 9f c9	jsr $c99f			jsr Nip
.b56a	20 9f c9	jsr $c99f			jsr Nip			; ( nt )
.b56d	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b56f	84 15		sty $15				sty tmp1+1
.b571	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b573	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b575	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b577	d0 12		bne $b58b			bne _compile
.b579	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b57b	f0 05		beq $b582			beq _execute
.b57d	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b57f	20 80 b4	jsr $b480			jsr ThrowA
.b582	20 ac bd	jsr $bdac	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b585	20 26 ce	jsr $ce26			jsr Execute		; EXECUTE the xt that is TOS
.b588	4c 38 b5	jmp $b538	                jmp _loop
.b58b					_compile:
.b58b	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b58d	d0 f3		bne $b582			bne _execute		;   IMMEDIATE word, execute now
.b58f	20 ba b6	jsr $b6ba			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b592	4c 38 b5	jmp $b538			jmp _loop
.b595					_line_done:
.b595	e8		inx				inx			; drop stuff from PARSE_NAME
.b596	e8		inx				inx
.b597	e8		inx				inx
.b598	e8		inx				inx
.b599	60		rts				rts
>b59a	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b5a2	65
=46371					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5a3	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b5a4	10					.byte WordFlags	;wh_Flags
>b5a5	03					.byte 3	;wh_CodeLength
>b5a6	aa					  .byte LinkDisplacement
=$b5a7					XtPtr1 ::= *
=46371					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5a7	a9 08		lda #$08	Immediate:	lda #IM
.b5a9	48		pha		SetFlag:	pha
.b5aa	20 49 ba	jsr $ba49			jsr current_to_dp
.b5ad	a0 81		ldy #$81			ldy #Wh_Flags
.b5af	68		pla				pla
.b5b0	11 10		ora ($10),y			ora (dp),y
.b5b2	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b5b4					en = *	; remember here
>b5a5	0d					.byte CL	;wh_CodeLength
.b5b4	60		rts				rts
>b5b5	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5bd	6f 6e 6c 79
=46401					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5c1	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5c2	10					.byte WordFlags	;wh_Flags
>b5c3	03					.byte 3	;wh_CodeLength
>b5c4	1e					  .byte LinkDisplacement
=$b5c5					XtPtr1 ::= *
=46401					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5c5	a9 04		lda #$04	Compile_Only:	lda #CO
.b5c7	d0 e0		bne $b5a9			bne SetFlag
=4					CL	.var *-XtPtr1
=$b5c9					en = *	; remember here
>b5c3	04					.byte CL	;wh_CodeLength
>b5c9	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5d1	74 69 76 65
=46421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5d5	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5d6	10					.byte WordFlags	;wh_Flags
>b5d7	03					.byte 3	;wh_CodeLength
>b5d8	14					  .byte LinkDisplacement
=$b5d9					XtPtr1 ::= *
=46421					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5d9	20 49 ba	jsr $ba49	Never_Native:	jsr current_to_dp
.b5dc	a0 81		ldy #$81			ldy #Wh_Flags
.b5de	b1 10		lda ($10),y			lda (dp),y
.b5e0	09 10		ora #$10			ora #NN		; set NN flag
.b5e2	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5e4	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b5e6					en = *	; remember here
>b5d7	0d					.byte CL	;wh_CodeLength
.b5e6	60		rts				rts
>b5e7	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5ef	61 74 69 76 65
=46452					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5f4	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b5f5	10					.byte WordFlags	;wh_Flags
>b5f6	03					.byte 3	;wh_CodeLength
>b5f7	1f					  .byte LinkDisplacement
=$b5f8					XtPtr1 ::= *
=46452					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5f8	20 49 ba	jsr $ba49	Always_Native:	jsr current_to_dp
.b5fb	a0 81		ldy #$81			ldy #Wh_Flags
.b5fd	b1 10		lda ($10),y			lda (dp),y
.b5ff	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b601	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b603	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b605					en = *	; remember here
>b5f6	0d					.byte CL	;wh_CodeLength
.b605	60		rts				rts
>b606	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b60e	74 69 76 65
=46482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b612	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b613	10					.byte WordFlags	;wh_Flags
>b614	03					.byte 3	;wh_CodeLength
>b615	1e					  .byte LinkDisplacement
=$b616					XtPtr1 ::= *
=46482					WordListLink ::= Nt0 ; remember the nt of this word for later
.b616	20 49 ba	jsr $ba49	Allow_Native:	jsr current_to_dp
.b619	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b61b	b1 10		lda ($10),y			lda (dp),y
.b61d	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b61f	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-XtPtr1
=$b621					en = *	; remember here
>b614	0b					.byte CL	;wh_CodeLength
.b621	60		rts				rts
>b622	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=46506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b62a	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b62b	10					.byte WordFlags	;wh_Flags
>b62c	03					.byte 3	;wh_CodeLength
>b62d	18					  .byte LinkDisplacement
=$b62e					XtPtr1 ::= *
=46506					WordListLink ::= Nt0 ; remember the nt of this word for later
.b62e	a0 03		ldy #$03			ldy #>nc_limit
.b630	a9 02		lda #$02			lda #<nc_limit
.b632	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$b635					en = *	; remember here
>b62c	07					.byte CL	;wh_CodeLength
>b635	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b63d	64 65 72 66 6c 6f 77
=46532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b644	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b645	10					.byte WordFlags	;wh_Flags
>b646	03					.byte 3	;wh_CodeLength
>b647	1a					  .byte LinkDisplacement
=$b648					XtPtr1 ::= *
=46532					WordListLink ::= Nt0 ; remember the nt of this word for later
.b648	a0 03		ldy #$03			ldy #>uf_strip
.b64a	a9 04		lda #$04			lda #<uf_strip
.b64c	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$b64f					en = *	; remember here
>b646	07					.byte CL	;wh_CodeLength
>b64f	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=46551					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b657	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b658	1c					.byte WordFlags	;wh_Flags
>b659	03					.byte 3	;wh_CodeLength
>b65a	13					  .byte LinkDisplacement
=$b65b					XtPtr1 ::= *
=46551					WordListLink ::= Nt0 ; remember the nt of this word for later
.b65b					Postpone:
.b65b	20 a8 ba	jsr $baa8			jsr parse_name_check	; get name string
.b65e	20 8a bc	jsr $bc8a			jsr find_name_check	; lookup name
.b661	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b663	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b665	29 08		and #$08			and #IM
.b667	f0 03		beq $b66c			beq _not_immediate
.b669	4c ba b6	jmp $b6ba			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b66c					_not_immediate:
.b66c	20 9f b7	jsr $b79f			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b66f	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b671	a9 bd		lda #$bd			lda #<Compile_Comma_NT_YA
.b673	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=27					CL	.var *-XtPtr1
=$b676					en = *	; remember here
>b659	1b					.byte CL	;wh_CodeLength
>b676	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=46589					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b67d	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b67e	1c					.byte WordFlags	;wh_Flags
>b67f	03					.byte 3	;wh_CodeLength
>b680	26					  .byte LinkDisplacement
=$b681					XtPtr1 ::= *
=46589					WordListLink ::= Nt0 ; remember the nt of this word for later
.b681					Recurse:
.b681	a5 0e		lda $0e				lda WorkWord+0
.b683	a4 0f		ldy $0f				ldy WorkWord+1
.b685	20 b8 b7	jsr $b7b8			jsr PushYA
.b688	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b68a	50 10		bvc $b69c			bvc _xt
.b68c	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b68e	b1 0e		lda ($0e),y			lda (WorkWord),y
.b690	29 20		and #$20			and #AN
.b692	f0 05		beq $b699			beq _NotAn
.b694	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b696	20 80 b4	jsr $b480			jsr ThrowA
.b699					_NotAN:
.b699	20 ac bd	jsr $bdac			jsr Name_To_Int		; convert nt to xt
.b69c					_xt:
.b69c	4c 2f cd	jmp $cd2f			jmp Jsr_Comma		; compile JSR xt, return
=30					CL	.var *-XtPtr1
=$b69f					en = *	; remember here
>b67f	1e					.byte CL	;wh_CodeLength
>b69f	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=46631					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b6a7	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b6a8	10					.byte WordFlags	;wh_Flags
>b6a9	03					.byte 3	;wh_CodeLength
>b6aa	2a					  .byte LinkDisplacement
=$b6ab					XtPtr1 ::= *
=46631					WordListLink ::= Nt0 ; remember the nt of this word for later
.b6ab					Compile_Comma:
.b6ab	20 67 cf	jsr $cf67			jsr Dup			; ( xt xt )
.b6ae	20 5b bd	jsr $bd5b			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6b1	e8		inx				inx			; drop nt
.b6b2	e8		inx				inx
.b6b3	a5 15		lda $15				lda tmp1+1
.b6b5	d0 0a		bne $b6c1			bne Compile_Comma_NT_Tmp1
.b6b7	4c 2f cd	jmp $cd2f			jmp Jsr_Comma		; compile jsr, return
.b6ba					Compile_Comma_NT:
.b6ba	20 fb b3	jsr $b3fb			jsr PopYA
.b6bd					Compile_Comma_NT_YA:
.b6bd	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6bf	84 15		sty $15				sty tmp1+1
.b6c1					Compile_Comma_NT_Tmp1:
.b6c1	20 b9 bd	jsr $bdb9			jsr NameToIntTmp	; tmp2= xt
.b6c4	a5 16		lda $16				lda tmp2+0
.b6c6	a4 17		ldy $17				ldy tmp2+1
.b6c8	20 b8 b7	jsr $b7b8			jsr PushYA		; ( xt )
.b6cb	a0 82		ldy #$82			ldy #wh_CodeLength
.b6cd	b1 14		lda ($14),y			lda (tmp1),y
.b6cf	20 e7 b7	jsr $b7e7			jsr PushZA		; ( xt u )
.b6d2	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6d4	b1 14		lda ($14),y			lda (tmp1),y
.b6d6	29 30		and #$30			and #ST
.b6d8	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6da	f0 2d		beq $b709			beq _strip
.b6dc	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6de	f0 12		beq $b6f2			beq _jsr_opt
.b6e0	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6e2	f0 2f		beq $b713			beq _inline
.b6e4	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6e7	d0 2a		bne $b713			bne _inline
.b6e9	ad 02 03	lda $0302			lda nc_limit+0
.b6ec	d5 24		cmp $24,x			cmp DStack+0,x
.b6ee	f0 02		beq $b6f2			beq _jsr_opt
.b6f0	b0 21		bcs $b713			bcs _inline
.b6f2					_jsr_opt:
.b6f2	ad 04 03	lda $0304			lda uf_strip
.b6f5	f0 0d		beq $b704			beq _jsr
.b6f7	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b6f9	b1 14		lda ($14),y			lda (tmp1),y
.b6fb	29 40		and #$40			and #UF
.b6fd	d0 05		bne $b704			bne _jsr
.b6ff	a9 03		lda #$03			lda #3			;   strip the underflow check
.b701	20 25 ca	jsr $ca25			jsr Nos_Plus_A
.b704					_jsr:
.b704	e8		inx				inx			; Drop len
.b705	e8		inx				inx
.b706	4c 2f cd	jmp $cd2f			jmp Jsr_Comma		; compile jsr, return
.b709					_strip:
.b709	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b70b	20 25 ca	jsr $ca25			jsr Nos_Plus_A
.b70e	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b710	20 59 ca	jsr $ca59			jsr minus_a
.b713					_inline:
.b713	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b716	f0 10		beq $b728			beq +
.b718	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b71a	29 40		and #$40			and #UF
.b71c	f0 0a		beq $b728			beq +
.b71e	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b720	20 25 ca	jsr $ca25			jsr Nos_Plus_A
.b723	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b725	20 59 ca	jsr $ca59			jsr minus_a
.b728					+
.b728	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b72a	f0 0c		beq $b738			beq _copy_end
.b72c	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b72e	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.b731	20 73 ca	jsr $ca73			jsr NOS_One_Plus
.b734	d6 24		dec $24,x			dec DStack+0,x
.b736	d0 f4		bne $b72c			bne _copy_loop
.b738					_copy_end:
.b738	4c 45 c5	jmp $c545			jmp Two_drop
=144					CL	.var *-XtPtr1
=$b73b					en = *	; remember here
>b6a9	90					.byte CL	;wh_CodeLength
>b73b	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=46780					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b73c	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=149					LinkDisplacement = Nt0-WordListLink
>b73d	1c					.byte WordFlags	;wh_Flags
>b73e	03					.byte 3	;wh_CodeLength
>b73f	95					  .byte LinkDisplacement
=$b740					XtPtr1 ::= *
=46780					WordListLink ::= Nt0 ; remember the nt of this word for later
.b740	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b742	d0 05		bne $b749			bne Left_Bracket_NoCheck
.b744	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b746	4c 80 b4	jmp $b480			jmp ThrowA
.b749					Left_Bracket_NoCheck:
.b749	a9 00		lda #$00			lda #0
.b74b	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b74d	85 0b		sta $0b				sta state+1
=15					CL	.var *-XtPtr1
=$b74f					en = *	; remember here
>b73e	0f					.byte CL	;wh_CodeLength
.b74f	60		rts				rts
>b750	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=46801					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b751	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b752	18					.byte WordFlags	;wh_Flags
>b753	03					.byte 3	;wh_CodeLength
>b754	15					  .byte LinkDisplacement
=$b755					XtPtr1 ::= *
=46801					WordListLink ::= Nt0 ; remember the nt of this word for later
.b755					Right_Bracket:
.b755	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b757	f0 05		beq $b75e			beq +
.b759	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b75b	4c 80 b4	jmp $b480			jmp ThrowA
.b75e					+
.b75e	a9 ff		lda #$ff			lda #$FF
.b760	d0 e9		bne $b74b			bne Left_Bracket_3
=13					CL	.var *-XtPtr1
=$b762					en = *	; remember here
>b753	0d					.byte CL	;wh_CodeLength
>b762	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=46825					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b769	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b76a	5c					.byte WordFlags	;wh_Flags
>b76b	03					.byte 3	;wh_CodeLength
>b76c	18					  .byte LinkDisplacement
=$b76d					XtPtr1 ::= *
=46825					WordListLink ::= Nt0 ; remember the nt of this word for later
.b76d					Literal:
.b76d	20 24 b4	jsr $b424			jsr underflow_1
.b770	20 76 b7	jsr $b776			jsr LitCompile		; compile load regs, choose a runtime routine
.b773	4c bd b6	jmp $b6bd			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CL	.var *-XtPtr1
=$b776					en = *	; remember here
>b76b	09					.byte CL	;wh_CodeLength
.b776					LitCompile:
.b776	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b778	f0 08		beq $b782			beq _ZByte
.b77a	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b77d	a9 34		lda #$34			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b77f	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b781	60		rts				rts
.b782					_ZByte:
.b782	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b784	f0 08		beq $b78e			beq _zero
.b786	20 a6 b7	jsr $b7a6			jsr lda_immed_comma	; compile "lda #" using TOS
.b789	a9 63		lda #$63			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b78b	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b78d	60		rts				rts
.b78e	e8		inx		_zero:		inx			; drop
.b78f	e8		inx				inx
.b790	a9 71		lda #$71			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b792	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b794	60		rts				rts
>b795	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=46875					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b79b	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b79c	10					.byte WordFlags	;wh_Flags
>b79d	03					.byte 3	;wh_CodeLength
>b79e	32					  .byte LinkDisplacement
=$b79f					XtPtr1 ::= *
=46875					WordListLink ::= Nt0 ; remember the nt of this word for later
.b79f					ldya_immed_comma:
.b79f	a9 a0		lda #$a0			lda #$a0		; ldy #
.b7a1	b4 25		ldy $25,x			ldy DStack+1,x
.b7a3	20 0f cd	jsr $cd0f			jsr Comma_YA
.b7a6					lda_immed_comma:
.b7a6	a9 a9		lda #$a9			lda #$a9		; lda #
.b7a8	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.b7ab	4c f3 cc	jmp $ccf3			jmp C_Comma
=15					CL	.var *-XtPtr1
=$b7ae					en = *	; remember here
>b79d	0f					.byte CL	;wh_CodeLength
>b7ae	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=46900					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7b4	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7b5	00					.byte WordFlags	;wh_Flags
>b7b6	03					.byte 3	;wh_CodeLength
>b7b7	19					  .byte LinkDisplacement
=$b7b8					XtPtr1 ::= *
=46900					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7b8	ca		dex		PushYA:		dex
.b7b9	ca		dex				dex
.b7ba	95 24		sta $24,x			sta DStack+0,x
.b7bc	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-XtPtr1
=$b7be					en = *	; remember here
>b7b6	06					.byte CL	;wh_CodeLength
.b7be	60		rts				rts
>b7bf	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=46915					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7c3	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7c4	00					.byte WordFlags	;wh_Flags
>b7c5	03					.byte 3	;wh_CodeLength
>b7c6	0f					  .byte LinkDisplacement
=$b7c7					XtPtr1 ::= *
=46915					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7c7	a9 ff		lda #$ff	True:		lda #$FF
.b7c9	ca		dex		PushAA:		dex
.b7ca	ca		dex				dex
.b7cb	95 24		sta $24,x			sta DStack+0,x
.b7cd	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-XtPtr1
=$b7cf					en = *	; remember here
>b7c5	08					.byte CL	;wh_CodeLength
.b7cf	60		rts				rts
>b7d0	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=46933					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7d5	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7d6	10					.byte WordFlags	;wh_Flags
>b7d7	03					.byte 3	;wh_CodeLength
>b7d8	12					  .byte LinkDisplacement
=$b7d9					XtPtr1 ::= *
=46933					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7d9	a9 00		lda #$00	False:		lda #0
.b7db	f0 0a		beq $b7e7			beq PushZA
=4					CL	.var *-XtPtr1
=$b7dd					en = *	; remember here
>b7d7	04					.byte CL	;wh_CodeLength
>b7dd	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=46947					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7e3	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7e4	00					.byte WordFlags	;wh_Flags
>b7e5	03					.byte 3	;wh_CodeLength
>b7e6	0e					  .byte LinkDisplacement
=$b7e7					XtPtr1 ::= *
=46947					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7e7	ca		dex		PushZA:		dex
.b7e8	ca		dex				dex
.b7e9	95 24		sta $24,x			sta DStack+0,x
.b7eb	a9 00		lda #$00			lda #0
.b7ed	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-XtPtr1
=$b7ef					en = *	; remember here
>b7e5	08					.byte CL	;wh_CodeLength
.b7ef	60		rts				rts
>b7f0	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=46961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f1	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7f2	10					.byte WordFlags	;wh_Flags
>b7f3	03					.byte 3	;wh_CodeLength
>b7f4	0e					  .byte LinkDisplacement
=$b7f5					XtPtr1 ::= *
=46961					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7f5	a9 00		lda #$00	Zero:		lda #0
.b7f7	f0 ee		beq $b7e7			beq PushZA
=4					CL	.var *-XtPtr1
=$b7f9					en = *	; remember here
>b7f3	04					.byte CL	;wh_CodeLength
>b7f9	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=46970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7fa	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b7fb	10					.byte WordFlags	;wh_Flags
>b7fc	03					.byte 3	;wh_CodeLength
>b7fd	09					  .byte LinkDisplacement
=$b7fe					XtPtr1 ::= *
=46970					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7fe	a9 01		lda #$01	One:		lda #1
.b800	d0 e5		bne $b7e7			bne PushZA
=4					CL	.var *-XtPtr1
=$b802					en = *	; remember here
>b7fc	04					.byte CL	;wh_CodeLength
>b802	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=46979					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b803	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b804	10					.byte WordFlags	;wh_Flags
>b805	03					.byte 3	;wh_CodeLength
>b806	09					  .byte LinkDisplacement
=$b807					XtPtr1 ::= *
=46979					WordListLink ::= Nt0 ; remember the nt of this word for later
.b807	a9 02		lda #$02	Two:		lda #2
.b809	d0 dc		bne $b7e7			bne PushZA
=4					CL	.var *-XtPtr1
=$b80b					en = *	; remember here
>b805	04					.byte CL	;wh_CodeLength
>b80b	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=46989					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b80d	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b80e	10					.byte WordFlags	;wh_Flags
>b80f	03					.byte 3	;wh_CodeLength
>b810	0a					  .byte LinkDisplacement
=$b811					XtPtr1 ::= *
=46989					WordListLink ::= Nt0 ; remember the nt of this word for later
.b811	a9 20		lda #$20	Bl:		lda #AscSP
.b813	d0 d2		bne $b7e7			bne PushZA
=4					CL	.var *-XtPtr1
=$b815					en = *	; remember here
>b80f	04					.byte CL	;wh_CodeLength
>b815	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=47000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b818	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b819	10					.byte WordFlags	;wh_Flags
>b81a	03					.byte 3	;wh_CodeLength
>b81b	0b					  .byte LinkDisplacement
=$b81c					XtPtr1 ::= *
=47000					WordListLink ::= Nt0 ; remember the nt of this word for later
.b81c	a9 08		lda #$08			lda #ToIn
.b81e	4c e7 b7	jmp $b7e7			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b821					en = *	; remember here
>b81a	05					.byte CL	;wh_CodeLength
>b821	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=47014					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b826	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b827	10					.byte WordFlags	;wh_Flags
>b828	03					.byte 3	;wh_CodeLength
>b829	0e					  .byte LinkDisplacement
=$b82a					XtPtr1 ::= *
=47014					WordListLink ::= Nt0 ; remember the nt of this word for later
.b82a	a9 0a		lda #$0a			lda #state
.b82c	4c e7 b7	jmp $b7e7			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b82f					en = *	; remember here
>b828	05					.byte CL	;wh_CodeLength
>b82f	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=47025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b831	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b832	10					.byte WordFlags	;wh_Flags
>b833	03					.byte 3	;wh_CodeLength
>b834	0b					  .byte LinkDisplacement
=$b835					XtPtr1 ::= *
=47025					WordListLink ::= Nt0 ; remember the nt of this word for later
.b835	a9 10		lda #$10			lda #dp
.b837	4c e7 b7	jmp $b7e7			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b83a					en = *	; remember here
>b833	05					.byte CL	;wh_CodeLength
>b83a	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=47038					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b83e	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b83f	10					.byte WordFlags	;wh_Flags
>b840	03					.byte 3	;wh_CodeLength
>b841	0d					  .byte LinkDisplacement
=$b842					XtPtr1 ::= *
=47038					WordListLink ::= Nt0 ; remember the nt of this word for later
.b842	a9 14		lda #$14			lda #tmp1
.b844	4c e7 b7	jmp $b7e7			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b847					en = *	; remember here
>b840	05					.byte CL	;wh_CodeLength
>b847	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=47055					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b84f	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b850	58					.byte WordFlags	;wh_Flags
>b851	03					.byte 3	;wh_CodeLength
>b852	11					  .byte LinkDisplacement
=$b853					XtPtr1 ::= *
=47055					WordListLink ::= Nt0 ; remember the nt of this word for later
.b853					Two_literal:
.b853	20 38 b4	jsr $b438			jsr underflow_2 ; check double number
.b856	20 84 cf	jsr $cf84			jsr Swap
.b859	20 6d b7	jsr $b76d			jsr Literal	; do lo cell
.b85c	4c 6d b7	jmp $b76d			jmp Literal	; do hi cell
=12					CL	.var *-XtPtr1
=$b85f					en = *	; remember here
>b851	0c					.byte CL	;wh_CodeLength
>b85f	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=47079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b867	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b868	5c					.byte WordFlags	;wh_Flags
>b869	03					.byte 3	;wh_CodeLength
>b86a	18					  .byte LinkDisplacement
=$b86b					XtPtr1 ::= *
=47079					WordListLink ::= Nt0 ; remember the nt of this word for later
.b86b					SLiteral:
.b86b	20 38 b4	jsr $b438			jsr underflow_2
.b86e	20 8e b8	jsr $b88e			jsr SLiteral_Start	; compile header
.b871	4c 82 b8	jmp $b882			jmp _Move_Test
.b874	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b876	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.b879	f6 28		inc $28,x			inc DStack+4,x
.b87b	d0 02		bne $b87f			bne +
.b87d	f6 29		inc $29,x			inc DStack+5,x
.b87f					+
.b87f	20 50 ca	jsr $ca50			jsr NOS_One_Minus
.b882	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b884	15 27		ora $27,x			ora DStack+3,x
.b886	d0 ec		bne $b874			bne _Move_Loop
.b888	20 9b b8	jsr $b89b			jsr SLiteral_End
.b88b	4c 45 c5	jmp $c545			jmp Two_Drop		; clean up and leave
=35					CL	.var *-XtPtr1
=$b88e					en = *	; remember here
>b869	23					.byte CL	;wh_CodeLength
.b88e					SLiteral_Start:
.b88e	a9 ac		lda #$ac			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b890	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b892	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.b895	20 37 ca	jsr $ca37			jsr Here		; push addr of start of JMP
.b898	4c 48 cd	jmp $cd48			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b89b					SLiteral_End:
.b89b	20 69 ca	jsr $ca69			jsr One_Plus
.b89e	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b8a0	81 24		sta ($24,x)			sta (DStack+0,x)
.b8a2	20 69 ca	jsr $ca69			jsr One_Plus
.b8a5	a5 01		lda $01				lda cp+1
.b8a7	81 24		sta ($24,x)			sta (DStack+0,x)
.b8a9	e8		inx				inx			; drop herej
.b8aa	e8		inx				inx
.b8ab	60		rts				rts
.b8ac					SLiteral_Runtime:
.b8ac	86 16		stx $16				stx tmp2	; save data stack index
.b8ae	ba		tsx				tsx
.b8af	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8b2	85 14		sta $14				sta tmp1+0
.b8b4	bd 02 01	lda $0102,x			lda RStack+2,x
.b8b7	85 15		sta $15				sta tmp1+1
.b8b9	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8bb	ca		dex				dex		; push string addr
.b8bc	ca		dex				dex
.b8bd	18		clc				clc
.b8be	a5 14		lda $14				lda tmp1+0
.b8c0	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8c2	95 24		sta $24,x			sta DStack+0,x
.b8c4	a5 15		lda $15				lda tmp1+1
.b8c6	69 00		adc #$00			adc #0
.b8c8	95 25		sta $25,x			sta DStack+1,x
.b8ca	ca		dex				dex		; push string length
.b8cb	ca		dex				dex
.b8cc	38		sec				sec
.b8cd	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8cf	b1 14		lda ($14),y			lda (tmp1),y
.b8d1	f5 26		sbc $26,x			sbc DStack+2,x
.b8d3	95 24		sta $24,x			sta DStack+0,x
.b8d5	c8		iny				iny
.b8d6	b1 14		lda ($14),y			lda (tmp1),y
.b8d8	f5 27		sbc $27,x			sbc DStack+3,x
.b8da	95 25		sta $25,x			sta DStack+1,x
.b8dc	60		rts				rts
>b8dd	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=47199					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8df	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8e0	1c					.byte WordFlags	;wh_Flags
>b8e1	03					.byte 3	;wh_CodeLength
>b8e2	78					  .byte LinkDisplacement
=$b8e3					XtPtr1 ::= *
=47199					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8e3					Dot_quote:
.b8e3	20 f3 b8	jsr $b8f3			jsr S_Quote		; compile the string literal
.b8e6	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8e8	a9 e9		lda #$e9			lda #<Type
.b8ea	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=10					CL	.var *-XtPtr1
=$b8ed					en = *	; remember here
>b8e1	0a					.byte CL	;wh_CodeLength
>b8ed	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=47215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8ef	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b8f0	18					.byte WordFlags	;wh_Flags
>b8f1	03					.byte 3	;wh_CodeLength
>b8f2	10					  .byte LinkDisplacement
=$b8f3					XtPtr1 ::= *
=47215					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8f3					S_Quote:
.b8f3	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8f5					S_Quote_start:
.b8f5	48		pha				pha			; save "handle escaped chars" flag
.b8f6	a5 0a		lda $0a				lda state		; compiling?
.b8f8	f0 06		beq $b900			beq _15
.b8fa	20 8e b8	jsr $b88e			jsr SLiteral_Start	; compile SLiteral header
.b8fd	4c 03 b9	jmp $b903			jmp _19
.b900	20 37 ca	jsr $ca37	_15:		jsr Here		; remember start addr
.b903					_19:
.b903	68		pla				pla			; init t2 flags
.b904	20 e7 b7	jsr $b7e7			jsr PushZA
.b907	20 f5 b7	jsr $b7f5			jsr Zero		; init t3 flags
.b90a					_savechars_loop:
.b90a	a5 08		lda $08				lda toin+0		; LSB
.b90c	c5 06		cmp $06				cmp ciblen+0
.b90e	a5 09		lda $09				lda toin+1		; MSB
.b910	e5 07		sbc $07				sbc ciblen+1
.b912	90 10		bcc $b924			bcc _input_fine		; input buffer empty?
.b914	20 75 c2	jsr $c275			jsr Refill		; Refill it  ( -- f )
.b917	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b919	d0 05		bne $b920			bne +
.b91b	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b91d	4c 80 b4	jmp $b480			jmp ThrowA
.b920	e8		inx		+		inx			; Drop the refill flag
.b921	e8		inx				inx
.b922	d0 e6		bne $b90a			bne _savechars_loop	; jump back up to the empty check, just in
.b924					_input_fine:
.b924	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b925	a5 04		lda $04				lda cib+0
.b927	85 14		sta $14				sta tmp1+0
.b929	a5 05		lda $05				lda cib+1
.b92b	65 09		adc $09				adc toin+1
.b92d	85 15		sta $15				sta tmp1+1
.b92f	a4 08		ldy $08				ldy ToIn
.b931	b1 14		lda ($14),y			lda (tmp1),y
.b933	85 14		sta $14				sta tmp1
.b935	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b937	d0 02		bne $b93b			bne +
.b939	e6 09		inc $09				inc toin+1
.b93b					+
.b93b	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b93d	30 03		bmi $b942			bmi +
.b93f	4c e5 b9	jmp $b9e5			jmp _regular_char
.b942					+
.b942	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b944	30 03		bmi $b949			bmi +
.b946	4c db b9	jmp $b9db			jmp _not_escaped
.b949					+
.b949	84 15		sty $15				sty tmp1+1
.b94b	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b94d	70 25		bvs $b974			bvs _check_esc_chars
.b94f	a9 01		lda #$01			lda #1
.b951	24 15		bit $15				bit tmp1+1
.b953	d0 11		bne $b966			bne _esc_x_second_digit
.b955	c8		iny				iny			; Adjust flag for second digit next time.
.b956	94 27		sty $27,x			sty DStack+3,x
.b958	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b95a	20 08 ba	jsr $ba08			jsr convert_hex_value	; Convert to hex
.b95d	0a		asl a				asl			; This is the upper nybble, so move it up.
.b95e	0a		asl a				asl
.b95f	0a		asl a				asl
.b960	0a		asl a				asl
.b961	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b963	4c ec b9	jmp $b9ec			jmp _next_character
.b966					_esc_x_second_digit:
.b966	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b968	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b96a	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b96c	20 08 ba	jsr $ba08			jsr convert_hex_value
.b96f	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b971	4c e9 b9	jmp $b9e9			jmp _save_character
.b974					_check_esc_chars:
.b974	a0 00		ldy #$00			ldy #0
.b976	94 27		sty $27,x			sty DStack+3,x
.b978	a8		tay				tay
.b979	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b97b	c0 61		cpy #$61			cpy #'a'
.b97d	f0 6a		beq $b9e9			beq _save_character
.b97f	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b981	c0 62		cpy #$62			cpy #'b'
.b983	f0 64		beq $b9e9			beq _save_character
.b985	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b987	c0 65		cpy #$65			cpy #'e'
.b989	f0 5e		beq $b9e9			beq _save_character
.b98b	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b98d	c0 66		cpy #$66			cpy #'f'
.b98f	f0 58		beq $b9e9			beq _save_character
.b991	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b993	c0 6c		cpy #$6c			cpy #'l'
.b995	f0 52		beq $b9e9			beq _save_character
.b997	c0 6e		cpy #$6e			cpy #'n'
.b999	f0 4e		beq $b9e9			beq _save_character
.b99b	c0 6d		cpy #$6d			cpy #'m'
.b99d	d0 09		bne $b9a8			bne +
.b99f	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9a1	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.b9a4	a9 0a		lda #$0a			lda #AscLF
.b9a6	d0 41		bne $b9e9			bne _save_character
.b9a8					+
.b9a8	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9aa	c0 71		cpy #$71			cpy #'q'
.b9ac	f0 3b		beq $b9e9			beq _save_character
.b9ae	c0 22		cpy #$22			cpy #AscDQuote
.b9b0	f0 37		beq $b9e9			beq _save_character
.b9b2	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9b4	c0 72		cpy #$72			cpy #'r'
.b9b6	f0 31		beq $b9e9			beq _save_character
.b9b8	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9ba	c0 74		cpy #$74			cpy #'t'
.b9bc	f0 2b		beq $b9e9			beq _save_character
.b9be	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9c0	c0 76		cpy #$76			cpy #'v'
.b9c2	f0 25		beq $b9e9			beq _save_character
.b9c4	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9c6	c0 7a		cpy #$7a			cpy #'z'
.b9c8	f0 1f		beq $b9e9			beq _save_character
.b9ca					_check_esc_x:
.b9ca	c0 78		cpy #$78			cpy #'x'
.b9cc	d0 06		bne $b9d4			bne +
.b9ce	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9d0	95 27		sta $27,x			sta DStack+3,x
.b9d2	d0 18		bne $b9ec			bne _next_character
.b9d4					+
.b9d4	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9d6	c0 5c		cpy #$5c			cpy #AscBackslash
.b9d8	f0 0f		beq $b9e9			beq _save_character
.b9da	98		tya				tya
.b9db					_not_escaped:
.b9db	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9dd	d0 06		bne $b9e5			bne _regular_char
.b9df	a9 ff		lda #$ff			lda #$FF
.b9e1	95 27		sta $27,x			sta DStack+3,x
.b9e3	d0 07		bne $b9ec			bne _next_character
.b9e5					_regular_char:
.b9e5	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9e7	f0 06		beq $b9ef			beq _found_string_end
.b9e9					_save_character:
.b9e9	20 f6 cc	jsr $ccf6			jsr C_Comma_A		; compile this character into the dictionary
.b9ec					_next_character:
.b9ec	4c 0a b9	jmp $b90a			jmp _savechars_loop
.b9ef					_found_string_end:
.b9ef	e8		inx				inx			; Drop t3
.b9f0	e8		inx				inx
.b9f1	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9f3	d0 0e		bne $ba03			bne _cmpl		; that's the way it works at the moment).
.b9f5	38		sec				sec			; TOS= length of string = Here - start_addr
.b9f6	a5 00		lda $00				lda cp+0
.b9f8	f5 26		sbc $26,x			sbc DStack+2,x
.b9fa	95 24		sta $24,x			sta DStack+0,x		;   LSB
.b9fc	a5 01		lda $01				lda cp+1
.b9fe	f5 27		sbc $27,x			sbc DStack+3,x
.ba00	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba02	60		rts				rts			; ( startaddr u )
.ba03					_cmpl:
.ba03	e8		inx				inx			; Drop t2
.ba04	e8		inx				inx
.ba05	4c 9b b8	jmp $b89b			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-XtPtr1
=$ff					CL	 .var $ff
=$ba08					en = *	; remember here
>b8f1	ff					.byte CL	;wh_CodeLength
.ba08					convert_hex_value:
.ba08	c9 41		cmp #$41			cmp #'A'
.ba0a	90 05		bcc $ba11			bcc _digit
.ba0c	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba0e	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba10	60		rts				rts
.ba11					_digit:
.ba11	e9 2f		sbc #$2f			sbc #'0'-1
.ba13	60		rts				rts
>ba14	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=47511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba17	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=296					LinkDisplacement = Nt0-WordListLink
=25						  WordFlags ::= WordFlags | FP
>ba18	19					.byte WordFlags	;wh_Flags
>ba19	03					.byte 3	;wh_CodeLength
>ba1a	6f b8					  .word WordListLink
=$ba1c					XtPtr1 ::= *
=47511					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba1c					S_Backslash_Quote:
.ba1c	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.ba1e	4c f5 b8	jmp $b8f5			jmp S_Quote_start
=5					CL	.var *-XtPtr1
=$ba21					en = *	; remember here
>ba19	05					.byte CL	;wh_CodeLength
>ba21	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=47529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba29	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba2a	10					.byte WordFlags	;wh_Flags
>ba2b	03					.byte 3	;wh_CodeLength
>ba2c	12					  .byte LinkDisplacement
=$ba2d					XtPtr1 ::= *
=47529					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba2d	20 3f ba	jsr $ba3f	LatestXt:	jsr LatestNt	; ( nt )
.ba30	4c ac bd	jmp $bdac			jmp Name_To_Int	; ( xt )
=6					CL	.var *-XtPtr1
=$ba33					en = *	; remember here
>ba2b	06					.byte CL	;wh_CodeLength
>ba33	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=47547					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba3b	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba3c	10					.byte WordFlags	;wh_Flags
>ba3d	03					.byte 3	;wh_CodeLength
>ba3e	12					  .byte LinkDisplacement
=$ba3f					XtPtr1 ::= *
=47547					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba3f	20 49 ba	jsr $ba49	LatestNt:	jsr current_to_dp
.ba42	a5 10		lda $10				lda dp+0
.ba44	a4 11		ldy $11				ldy dp+1
.ba46	4c b8 b7	jmp $b7b8			jmp PushYA
=10					CL	.var *-XtPtr1
=$ba49					en = *	; remember here
>ba3d	0a					.byte CL	;wh_CodeLength
.ba49					current_to_dp:
.ba49	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba4c	0a		asl a				asl			; dp= wordlists[A]
.ba4d	a8		tay				tay
.ba4e	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba51	85 10		sta $10				sta dp+0
.ba53	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba56	85 11		sta $11				sta dp+1
.ba58	60		rts				rts
.ba59					dp_to_current:
.ba59	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba5c	0a		asl a		                asl			; wordlists[A]=dp
.ba5d	a8		tay		                tay
.ba5e	a5 10		lda $10		                lda dp+0
.ba60	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba63	a5 11		lda $11		                lda dp+1
.ba65	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba68	60		rts		                rts
>ba69	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba71	6d 65
=47603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba73	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba74	10					.byte WordFlags	;wh_Flags
>ba75	03					.byte 3	;wh_CodeLength
>ba76	38					  .byte LinkDisplacement
=$ba77					XtPtr1 ::= *
=47603					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba77					Parse_Name:
.ba77	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba79	85 16		sta $16				sta tmp2+0
.ba7b	18		clc				clc
.ba7c	a5 05		lda $05				lda cib+1
.ba7e	65 09		adc $09				adc toin+1
.ba80	85 17		sta $17				sta tmp2+1
.ba82	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba84					_skip_loop:
.ba84	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba86	a5 09		lda $09				lda toin+1
.ba88	e5 07		sbc $07				sbc ciblen+1
.ba8a	b0 11		bcs $ba9d			bcs _empty_line
.ba8c	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba8e	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba90	b0 10		bcs $baa2			bcs _char_found
.ba92	c8		iny				iny			; increment toin
.ba93	84 08		sty $08				sty toin+0
.ba95	d0 ed		bne $ba84			bne _skip_loop
.ba97	e6 09		inc $09				inc toin+1
.ba99	e6 17		inc $17				inc tmp2+1
.ba9b	d0 e7		bne $ba84			bne _skip_loop
.ba9d					_empty_line:
.ba9d	ca		dex				dex			; junk address
.ba9e	ca		dex				dex
.ba9f	4c f5 b7	jmp $b7f5			jmp Zero		; length=0
.baa2					_char_found:
.baa2	20 11 b8	jsr $b811			jsr Bl			; push delimiter char
.baa5	4c be ba	jmp $babe			jmp Parse
=49					CL	.var *-XtPtr1
=$baa8					en = *	; remember here
>ba75	31					.byte CL	;wh_CodeLength
.baa8					parse_name_check:
.baa8	20 77 ba	jsr $ba77			jsr parse_name		; get character from string
.baab	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.baad	f0 01		beq $bab0			beq _empty
.baaf	60		rts				rts
.bab0	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.bab2	4c 80 b4	jmp $b480			jmp ThrowA
>bab5	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=47674					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>baba	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>babb	10					.byte WordFlags	;wh_Flags
>babc	03					.byte 3	;wh_CodeLength
>babd	47					  .byte LinkDisplacement
=$babe					XtPtr1 ::= *
=47674					WordListLink ::= Nt0 ; remember the nt of this word for later
.babe	20 e0 b3	jsr $b3e0	Parse:		jsr PopA		; pop c (check for underflow)
.bac1	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bac3	ca		dex				dex			; alloc space for addr
.bac4	ca		dex				dex
.bac5	ca		dex				dex			; alloc space for length
.bac6	ca		dex				dex
.bac7	18		clc				clc			; addr= cib+toin
.bac8	a5 08		lda $08				lda toin+0
.baca	65 04		adc $04				adc cib+0
.bacc	95 26		sta $26,x			sta DStack+2,x
.bace	a5 09		lda $09				lda toin+1
.bad0	65 05		adc $05				adc cib+1
.bad2	95 27		sta $27,x			sta DStack+3,x
.bad4	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.bad6	84 14		sty $14				sty tmp1+0
.bad8	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.bada	85 16		sta $16				sta tmp2+0
.badc	18		clc				clc
.badd	a5 09		lda $09				lda toin+1		; tmp1= toin
.badf	85 15		sta $15				sta tmp1+1
.bae1	65 05		adc $05				adc cib+1
.bae3	85 17		sta $17				sta tmp2+1
.bae5	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.bae7	85 1d		sta $1d				sta tmp5+1
.bae9					_loop:
.bae9	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baeb	a5 09		lda $09				lda toin+1
.baed	e5 07		sbc $07				sbc ciblen+1
.baef	b0 1d		bcs $bb0e			bcs _eol
.baf1	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.baf3	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.baf5	d0 08		bne $baff			bne _not_whitespace
.baf7	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.baf9	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bafb	90 0f		bcc $bb0c			bcc _found_delimiter
.bafd	b0 04		bcs $bb03			bcs _not_delimiter
.baff	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bb01	f0 09		beq $bb0c			beq _found_delimiter
.bb03					_not_delimiter:
.bb03	c8		iny				iny			; next character
.bb04	d0 e3		bne $bae9			bne _loop
.bb06	e6 09		inc $09				inc toin+1
.bb08	e6 17		inc $17				inc tmp2+1
.bb0a	d0 dd		bne $bae9			bne _loop
.bb0c					_found_delimiter:
.bb0c	e6 1d		inc $1d				inc tmp5+1
.bb0e					_eol:
.bb0e	38		sec				sec			; length = toin - tmp1
.bb0f	98		tya				tya
.bb10	e5 14		sbc $14				sbc tmp1+0
.bb12	95 24		sta $24,x			sta DStack+0,x
.bb14	a5 09		lda $09				lda toin+1
.bb16	e5 15		sbc $15				sbc tmp1+1
.bb18	95 25		sta $25,x			sta DStack+1,x
.bb1a	18		clc				clc			; toin = toin + delimiter_offset
.bb1b	98		tya				tya
.bb1c	65 1d		adc $1d				adc tmp5+1
.bb1e	85 08		sta $08				sta toin+0
.bb20	90 02		bcc $bb24			bcc +
.bb22	e6 09		inc $09				inc toin+1
.bb24					+
=102					CL	.var *-XtPtr1
=$bb24					en = *	; remember here
>babc	66					.byte CL	;wh_CodeLength
.bb24	60		rts				rts
>bb25	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb2d	50 61 72 73 69 6e 67
=47796					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb34	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb35	50					.byte WordFlags	;wh_Flags
>bb36	03					.byte 3	;wh_CodeLength
>bb37	7a					  .byte LinkDisplacement
=$bb38					XtPtr1 ::= *
=47796					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb38					Execute_parsing:
.bb38	20 3d b4	jsr $b43d			jsr underflow_3
.bb3b	20 f0 c3	jsr $c3f0			jsr Input_To_R		; save existing input for later
.bb3e	20 87 ce	jsr $ce87			jsr Not_Rot		; -ROT ( xt addr u )
.bb41	20 fb b3	jsr $b3fb			jsr PopYA		; TOS is new ciblen
.bb44	85 06		sta $06				sta ciblen+0
.bb46	84 07		sty $07				sty ciblen+1
.bb48	20 fb b3	jsr $b3fb			jsr PopYA		; NOS is new cib
.bb4b	85 04		sta $04				sta cib+0
.bb4d	84 05		sty $05				sty cib+1
.bb4f	a9 00		lda #$00			lda #0
.bb51	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb53	85 09		sta $09				sta toin+1
.bb55	20 26 ce	jsr $ce26			jsr Execute
.bb58	20 11 c4	jsr $c411			jsr R_To_Input		; restore
=35					CL	.var *-XtPtr1
=$bb5b					en = *	; remember here
>bb36	23					.byte CL	;wh_CodeLength
.bb5b	60		rts				rts
>bb5c	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=47842					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb62	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb63	10					.byte WordFlags	;wh_Flags
>bb64	03					.byte 3	;wh_CodeLength
>bb65	2e					  .byte LinkDisplacement
=$bb66					XtPtr1 ::= *
=47842					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb66					Source:
.bb66	a5 04		lda $04				lda cib+0	; push address
.bb68	a4 05		ldy $05				ldy cib+1
.bb6a	20 b8 b7	jsr $b7b8			jsr PushYA
.bb6d	a5 06		lda $06				lda ciblen+0	; push size, return
.bb6f	a4 07		ldy $07				ldy ciblen+1
.bb71	4c b8 b7	jmp $b7b8			jmp PushYA
=14					CL	.var *-XtPtr1
=$bb74					en = *	; remember here
>bb64	0e					.byte CL	;wh_CodeLength
>bb74	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb7c	64
=47869					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb7d	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb7e	10					.byte WordFlags	;wh_Flags
>bb7f	03					.byte 3	;wh_CodeLength
>bb80	1b					  .byte LinkDisplacement
=$bb81					XtPtr1 ::= *
=47869					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb81	a5 02		lda $02		Source_Id:	lda insrc+0
.bb83	a4 03		ldy $03				ldy insrc+1
.bb85	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$bb88					en = *	; remember here
>bb7f	07					.byte CL	;wh_CodeLength
>bb88	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=47884					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb8c	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb8d	24					.byte WordFlags	;wh_Flags
>bb8e	03					.byte 3	;wh_CodeLength
>bb8f	0f					  .byte LinkDisplacement
=$bb90					XtPtr1 ::= *
=47884					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb90					Exit:
.bb90	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CL	.var *-XtPtr1
=$bb91					en = *	; remember here
>bb8e	01					.byte CL	;wh_CodeLength
>bb91	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=47890					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb92	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bb93	1c					.byte WordFlags	;wh_Flags
>bb94	03					.byte 3	;wh_CodeLength
>bb95	06					  .byte LinkDisplacement
=$bb96					XtPtr1 ::= *
=47890					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb96					Semicolon:
.bb96	20 40 b7	jsr $b740			jsr Left_Bracket	; switch to interpret state
.bb99	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bb9b	70 0c		bvs $bba9			bvs _colonword
.bb9d	a9 60		lda #$60			lda #$60		; compile an RTS
.bb9f	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.bba2	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bba4	a4 0f		ldy $0f				ldy WorkWord+1
.bba6	4c b8 b7	jmp $b7b8			jmp PushYA
.bba9					_colonword:
.bba9	24 0c		bit $0c				bit status
.bbab	10 1d		bpl $bbca			bpl _new_word	; Bit 7 is clear = new word
.bbad	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bbaf	a4 0f		ldy $0f				ldy WorkWord+1
.bbb1	20 b8 b7	jsr $b7b8			jsr PushYA
.bbb4	20 f5 bd	jsr $bdf5			jsr Name_To_String	; get our name string
.bbb7	a9 2b		lda #$2b			lda #<str_redefined	; string "redefined"
.bbb9	a0 da		ldy #$da			ldy #>str_redefined
.bbbb	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.bbbe	20 e9 cd	jsr $cde9			jsr Type		; print the ofWordEnding word.
.bbc1	20 dd cd	jsr $cddd			jsr Space
.bbc4	a9 7f		lda #$7f			lda #$ff-%10000000
.bbc6	25 0c		and $0c				and status
.bbc8	85 0c		sta $0c				sta status
.bbca					_new_word:
.bbca	20 0d c1	jsr $c10d			jsr Header_Link		; finish linking into current dictionary
.bbcd	20 d5 bb	jsr $bbd5			jsr adjust_z		; fix word length
.bbd0	a9 60		lda #$60			lda #$60		; compile an RTS
.bbd2	4c f6 cc	jmp $ccf6			jmp C_Comma_A
=63					CL	.var *-XtPtr1
=$bbd5					en = *	; remember here
>bb94	3f					.byte CL	;wh_CodeLength
.bbd5					adjust_z:
.bbd5	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbd7	b1 10		lda ($10),y			lda (dp),y
.bbd9	29 03		and #$03			and #FP+DB
.bbdb	18		clc				clc
.bbdc	69 84		adc #$84			adc #wh_LinkNt+1
.bbde	65 10		adc $10				adc dp+0
.bbe0	85 14		sta $14				sta tmp1+0
.bbe2	a9 00		lda #$00			lda #0
.bbe4	65 11		adc $11				adc dp+1
.bbe6	85 15		sta $15				sta tmp1+1
.bbe8	38		sec				sec			; length= cp-xt
.bbe9	a5 00		lda $00				lda cp+0
.bbeb	e5 14		sbc $14				sbc tmp1+0
.bbed	a8		tay				tay
.bbee	a5 01		lda $01				lda cp+1
.bbf0	e5 15		sbc $15				sbc tmp1+1
.bbf2	f0 0c		beq $bc00			beq _short		; length > $ff ?
.bbf4	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bbf6	b1 10		lda ($10),y			lda (dp),y
.bbf8	29 df		and #$df			and #$ff-AN
.bbfa	09 10		ora #$10			ora #NN
.bbfc	91 10		sta ($10),y			sta (dp),y
.bbfe	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bc00	98		tya		_short:		tya			; fill in length in header
.bc01	a0 82		ldy #$82			ldy #Wh_CodeLength
.bc03	91 10		sta ($10),y			sta (dp),y
.bc05	60		rts				rts
>bc06	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=48007					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc07	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bc08	10					.byte WordFlags	;wh_Flags
>bc09	03					.byte 3	;wh_CodeLength
>bc0a	75					  .byte LinkDisplacement
=$bc0b					XtPtr1 ::= *
=48007					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc0b					Colon:
.bc0b	20 55 b7	jsr $b755			jsr Right_Bracket	; switch to compile state
.bc0e	a5 0c		lda $0c				lda status
.bc10	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bc12	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc14	85 0c		sta $0c				sta status
.bc16	4c 18 c1	jmp $c118			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-XtPtr1
=$bc19					en = *	; remember here
>bc09	0e					.byte CL	;wh_CodeLength
>bc19	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=48032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc20	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc21	10					.byte WordFlags	;wh_Flags
>bc22	03					.byte 3	;wh_CodeLength
>bc23	19					  .byte LinkDisplacement
=$bc24					XtPtr1 ::= *
=48032					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc24					Colon_NoName:
.bc24	20 55 b7	jsr $b755			jsr Right_Bracket	; switch to compile state
.bc27	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc29	25 0c		and $0c				and status		; a :NONAME word.
.bc2b	85 0c		sta $0c				sta status
.bc2d	a5 00		lda $00				lda cp+0
.bc2f	85 0e		sta $0e				sta WorkWord+0
.bc31	a5 01		lda $01				lda cp+1
.bc33	85 0f		sta $0f				sta WorkWord+1
=17					CL	.var *-XtPtr1
=$bc35					en = *	; remember here
>bc22	11					.byte CL	;wh_CodeLength
.bc35	60		rts				rts
>bc36	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=48055					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc37	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc38	10					.byte WordFlags	;wh_Flags
>bc39	03					.byte 3	;wh_CodeLength
>bc3a	17					  .byte LinkDisplacement
=$bc3b					XtPtr1 ::= *
=48055					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc3b	20 41 bc	jsr $bc41	Tick:		jsr Tick_Nt
.bc3e	4c ac bd	jmp $bdac			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-XtPtr1
=$bc41					en = *	; remember here
>bc39	06					.byte CL	;wh_CodeLength
.bc41	20 a8 ba	jsr $baa8	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc44	4c 8a bc	jmp $bc8a			jmp find_name_check	; ( addr u -- nt )
>bc47	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=48074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc4a	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc4b	1c					.byte WordFlags	;wh_Flags
>bc4c	03					.byte 3	;wh_CodeLength
>bc4d	13					  .byte LinkDisplacement
=$bc4e					XtPtr1 ::= *
=48074					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc4e	20 3b bc	jsr $bc3b	Bracket_Tick:	jsr Tick
.bc51	4c 6d b7	jmp $b76d			jmp Literal
=6					CL	.var *-XtPtr1
=$bc54					en = *	; remember here
>bc4c	06					.byte CL	;wh_CodeLength
>bc54	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc5c	65
=48093					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc5d	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc5e	10					.byte WordFlags	;wh_Flags
>bc5f	03					.byte 3	;wh_CodeLength
>bc60	13					  .byte LinkDisplacement
=$bc61					XtPtr1 ::= *
=48093					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc61					find_name:
.bc61	20 97 bc	jsr $bc97			jsr swl_prepare 	; setup for search
.bc64	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc66	95 25		sta $25,x			sta DStack+1,x
.bc68					_wordlist_next:
.bc68	f6 25		inc $25,x			inc DStack+1,x
.bc6a	b4 25		ldy $25,x			ldy DStack+1,x
.bc6c	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc6f	90 06		bcc $bc77			bcc _nextS
.bc71	d0 14		bne $bc87			bne _fail
.bc73	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc75	d0 03		bne $bc7a			bne _nextA
.bc77	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc7a	20 c4 bc	jsr $bcc4	_nextA:		jsr swl_search_wordlist
.bc7d	f0 e9		beq $bc68			beq _wordlist_next
.bc7f	a5 14		lda $14				lda tmp1+0		; NOS= nt
.bc81	95 26		sta $26,x			sta DStack+2,x
.bc83	a5 15		lda $15				lda tmp1+1
.bc85	95 27		sta $27,x			sta DStack+3,x
.bc87					_fail:
.bc87	e8		inx				inx			; Drop work cell
.bc88	e8		inx				inx
=40					CL	.var *-XtPtr1
=$bc89					en = *	; remember here
>bc5f	28					.byte CL	;wh_CodeLength
.bc89	60		rts				rts
.bc8a					find_name_check:
.bc8a	20 61 bc	jsr $bc61			jsr find_name
.bc8d	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc8f	f0 01		beq $bc92			beq _NotFound
.bc91	60		rts				rts
.bc92	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bc94	4c 80 b4	jmp $b480			jmp ThrowA
.bc97					swl_prepare:
.bc97	20 38 b4	jsr $b438			jsr underflow_2
.bc9a	38		sec				sec			; A= 0 - name start offset
.bc9b	b5 24		lda $24,x			lda DStack+0,x
.bc9d	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bc9f	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bca1	85 16		sta $16				sta tmp2+0
.bca3	a9 ff		lda #$ff			lda #$ff
.bca5	75 27		adc $27,x			adc DStack+3,x
.bca7	85 17		sta $17				sta tmp2+1
.bca9	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bcab	38		sec				sec
.bcac	f5 24		sbc $24,x			sbc DStack+0,x
.bcae	85 1a		sta $1a				sta tmp4+0
.bcb0	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcb2	b1 16		lda ($16),y			lda (tmp2),y
.bcb4	0a		asl a				asl a
.bcb5	0a		asl a				asl a
.bcb6	0a		asl a				asl a
.bcb7	0a		asl a				asl a
.bcb8	0a		asl a				asl a
.bcb9	15 24		ora $24,x			ora DStack+0,x
.bcbb	85 18		sta $18				sta tmp3+0
.bcbd	a9 00		lda #$00			lda #0			; assuming failure
.bcbf	95 26		sta $26,x			sta DStack+2,x
.bcc1	95 27		sta $27,x			sta DStack+3,x
.bcc3	60		rts				rts
.bcc4					swl_search_wordlist:
.bcc4	86 19		stx $19				stx tmp3+1		; save data stack index
.bcc6	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bcc7	a8		tay				tay
.bcc8	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bccb	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcce	d0 15		bne $bce5			bne _word_3		;   not end-of-list?
.bcd0	08		php		_rts:		php
.bcd1	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcd3	28		plp				plp
.bcd4	60		rts				rts			; Z= end_of_list
.bcd5					_word_next:
.bcd5	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bcd7	b1 14		lda ($14),y			lda (tmp1),y
.bcd9	a0 83		ldy #$83			ldy #wh_LinkNt
.bcdb	29 01		and #$01			and #FP
.bcdd	f0 0e		beq $bced			beq _LinkShort
.bcdf	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bce1	aa		tax				tax
.bce2	c8		iny				iny
.bce3	b1 14		lda ($14),y			lda (tmp1),y
.bce5	85 15		sta $15		_word_3:	sta tmp1+1
.bce7	86 14		stx $14				stx tmp1+0
.bce9	d0 0d		bne $bcf8			bne _Test
.bceb	f0 e3		beq $bcd0			beq _rts
.bced	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bcef	38		sec				sec
.bcf0	f1 14		sbc ($14),y			sbc (tmp1),y
.bcf2	85 14		sta $14				sta tmp1+0
.bcf4	b0 02		bcs $bcf8			bcs +
.bcf6	c6 15		dec $15				dec tmp1+1
.bcf8					+
.bcf8	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bcfa	b1 14		lda ($14),y			lda (tmp1),y
.bcfc	c5 18		cmp $18				cmp tmp3+0
.bcfe	d0 d5		bne $bcd5			bne _word_next
.bd00	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd02	c8		iny		_char_next:	iny			; to next char
.bd03	30 cb		bmi $bcd0			bmi _rts		; end of string?
.bd05	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd07	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd09	f0 f7		beq $bd02			beq _char_next		;   exact match?
.bd0b	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd0d	d0 c6		bne $bcd5			bne _word_next
.bd0f	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd11	29 df		and #$df			and #$df
.bd13	e9 41		sbc #$41			sbc #'A'
.bd15	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd17	90 e9		bcc $bd02			bcc _char_next
.bd19	b0 ba		bcs $bcd5			bcs _word_next
>bd1b	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=48287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd1f	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=194					LinkDisplacement = Nt0-WordListLink
>bd20	10					.byte WordFlags	;wh_Flags
>bd21	03					.byte 3	;wh_CodeLength
>bd22	c2					  .byte LinkDisplacement
=$bd23					XtPtr1 ::= *
=48287					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd23					Find:
.bd23	b5 25		lda $25,x			lda DStack+1,x		; Save caddr in case conversion fails.
.bd25	48		pha				pha
.bd26	b5 24		lda $24,x			lda DStack+0,x
.bd28	48		pha				pha
.bd29	20 f3 b1	jsr $b1f3			jsr Count		; ( caddr -- addr u )
.bd2c	20 61 bc	jsr $bc61			jsr find_name		; ( addr u -- nt | 0 )
.bd2f	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd31	d0 09		bne $bd3c			bne _found_word
.bd33	68		pla				pla			; restore caddr
.bd34	95 24		sta $24,x			sta DStack+0,x
.bd36	68		pla				pla
.bd37	95 25		sta $25,x			sta DStack+1,x
.bd39	4c d9 b7	jmp $b7d9			jmp False		; ( addr 0 )
.bd3c					_found_word:
.bd3c	68		pla				pla			; RDrop saved caddr
.bd3d	68		pla				pla
.bd3e	20 ac bd	jsr $bdac			jsr Name_To_Int		; convert the return values to FIND's format
.bd41	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.bd43	b1 14		lda ($14),y			lda (tmp1),y
.bd45	29 08		and #$08			and #IM
.bd47	d0 03		bne $bd4c			bne _immediate
.bd49	4c c7 b7	jmp $b7c7			jmp True		; We're not immediate, return -1
.bd4c	4c fe b7	jmp $b7fe	_immediate:	jmp One			; We're immediate, return 1
=44					CL	.var *-XtPtr1
=$bd4f					en = *	; remember here
>bd21	2c					.byte CL	;wh_CodeLength
>bd4f	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=48343					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd57	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>bd58	50					.byte WordFlags	;wh_Flags
>bd59	03					.byte 3	;wh_CodeLength
>bd5a	38					  .byte LinkDisplacement
=$bd5b					XtPtr1 ::= *
=48343					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd5b					Int_To_Name:
.bd5b	20 24 b4	jsr $b424			jsr underflow_1
.bd5e	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd60	85 19		sta $19				sta tmp3+1
.bd62					_wordlist_next:
.bd62	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd64	c8		iny				iny
.bd65	c8		iny				iny
.bd66	84 19		sty $19				sty tmp3+1
.bd68	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd6a	b0 2b		bcs $bd97			bcs _fail
.bd6c	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd6f	85 14		sta $14				sta tmp1+0
.bd71	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd74	85 15		sta $15				sta tmp1+1
.bd76	d0 07		bne $bd7f			bne _calc
.bd78	f0 e8		beq $bd62			beq _wordlist_next
.bd7a	20 9b 82	jsr $829b	_word_next:	jsr LinkNext		; step to next word
.bd7d	f0 e3		beq $bd62			beq _wordlist_next
.bd7f	20 b9 bd	jsr $bdb9	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd82	a5 16		lda $16				lda tmp2+0
.bd84	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd86	d0 f2		bne $bd7a			bne _word_next
.bd88	a5 17		lda $17				lda tmp2+1
.bd8a	d5 25		cmp $25,x			cmp DStack+1,x
.bd8c	d0 ec		bne $bd7a			bne _word_next
.bd8e	a5 14		lda $14				lda tmp1+0
.bd90	95 24		sta $24,x			sta DStack+0,x
.bd92	a5 15		lda $15				lda tmp1+1
.bd94	95 25		sta $25,x			sta DStack+1,x
.bd96	60		rts				rts			; return P.Z=0
.bd97					_fail:
.bd97	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd99	95 24		sta $24,x			sta DStack+0,x
.bd9b	95 25		sta $25,x			sta DStack+1,x
.bd9d	85 15		sta $15				sta tmp1+1
.bd9f	60		rts				rts			; return P.Z=1
=69					CL	.var *-XtPtr1
=$bda0					en = *	; remember here
>bd59	45					.byte CL	;wh_CodeLength
>bda0	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=48424					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bda8	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bda9	10					.byte WordFlags	;wh_Flags
>bdaa	03					.byte 3	;wh_CodeLength
>bdab	51					  .byte LinkDisplacement
=$bdac					XtPtr1 ::= *
=48424					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdac	20 06 b4	jsr $b406	Name_To_Int:	jsr PopTmp1
.bdaf	20 b9 bd	jsr $bdb9			jsr NameToIntTmp
.bdb2	a5 16		lda $16				lda tmp2+0
.bdb4	a4 17		ldy $17				ldy tmp2+1
.bdb6	4c b8 b7	jmp $b7b8			jmp PushYA
=13					CL	.var *-XtPtr1
=$bdb9					en = *	; remember here
>bdaa	0d					.byte CL	;wh_CodeLength
.bdb9					NameToIntTmp:
.bdb9	a0 81		ldy #$81			ldy #wh_Flags
.bdbb	b1 14		lda ($14),y			lda (tmp1),y
.bdbd	29 02		and #$02			and #DB			; has XT ptr?
.bdbf	d0 12		bne $bdd3			bne _HasXtPtr
.bdc1	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdc3	29 03		and #$03			and #DB+FP
.bdc5	18		clc				clc
.bdc6	69 84		adc #$84			adc #wh_LinkNt+1
.bdc8	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdca	85 16		sta $16				sta tmp2+0
.bdcc	a9 00		lda #$00			lda #0
.bdce	65 15		adc $15				adc tmp1+1
.bdd0	85 17		sta $17				sta tmp2+1
.bdd2	60		rts				rts
.bdd3	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bdd5	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bdd7	29 01		and #$01			and #FP			; has long LinkNt ?
.bdd9	f0 01		beq $bddc			beq _short
.bddb	c8		iny				iny			;   skip extra byte
.bddc	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bdde	85 16		sta $16				sta tmp2+0
.bde0	c8		iny				iny
.bde1	b1 14		lda ($14),y			lda (tmp1),y
.bde3	85 17		sta $17				sta tmp2+1
.bde5	60		rts				rts
>bde6	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdee	69 6e 67
=48497					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdf1	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>bdf2	50					.byte WordFlags	;wh_Flags
>bdf3	03					.byte 3	;wh_CodeLength
>bdf4	49					  .byte LinkDisplacement
=$bdf5					XtPtr1 ::= *
=48497					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdf5					Name_To_String:
.bdf5	20 24 b4	jsr $b424			jsr underflow_1
.bdf8	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.bdfa	b4 25		ldy $25,x			ldy DStack+1,x
.bdfc	85 14		sta $14				sta tmp1+0
.bdfe	84 15		sty $15				sty tmp1+1		; ( nt )
.be00	a0 80		ldy #$80			ldy #Wh_HashNameLen
.be02	b1 14		lda ($14),y			lda (tmp1),y
.be04	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.be06	48		pha				pha
.be07	49 ff		eor #$ff			eor #$ff
.be09	38		sec				sec
.be0a	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.be0c	20 1b ca	jsr $ca1b			jsr Plus_A		; calc string start addr
.be0f	68		pla				pla			; push string length
.be10	4c e7 b7	jmp $b7e7			jmp PushZA
=30					CL	.var *-XtPtr1
=$be13					en = *	; remember here
>bdf3	1e					.byte CL	;wh_CodeLength
>be13	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=48536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be18	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be19	50					.byte WordFlags	;wh_Flags
>be1a	03					.byte 3	;wh_CodeLength
>be1b	27					  .byte LinkDisplacement
=$be1c					XtPtr1 ::= *
=48536					WordListLink ::= Nt0 ; remember the nt of this word for later
.be1c					To_Body:
.be1c	20 24 b4	jsr $b424			jsr underflow_1
.be1f	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be21	4c 1b ca	jmp $ca1b			jmp Plus_A
=8					CL	.var *-XtPtr1
=$be24					en = *	; remember here
>be1a	08					.byte CL	;wh_CodeLength
>be24	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=48553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be29	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be2a	10					.byte WordFlags	;wh_Flags
>be2b	03					.byte 3	;wh_CodeLength
>be2c	11					  .byte LinkDisplacement
=$be2d					XtPtr1 ::= *
=48553					WordListLink ::= Nt0 ; remember the nt of this word for later
.be2d					Erase:
.be2d	20 f5 b7	jsr $b7f5			jsr Zero
.be30	4c 4a be	jmp $be4a			jmp Fill
=6					CL	.var *-XtPtr1
=$be33					en = *	; remember here
>be2b	06					.byte CL	;wh_CodeLength
>be33	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=48568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be38	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be39	10					.byte WordFlags	;wh_Flags
>be3a	03					.byte 3	;wh_CodeLength
>be3b	0f					  .byte LinkDisplacement
=$be3c					XtPtr1 ::= *
=48568					WordListLink ::= Nt0 ; remember the nt of this word for later
.be3c					Blank:
.be3c	20 11 b8	jsr $b811			jsr Bl
.be3f	4c 4a be	jmp $be4a			jmp Fill
=6					CL	.var *-XtPtr1
=$be42					en = *	; remember here
>be3a	06					.byte CL	;wh_CodeLength
>be42	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=48582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be46	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be47	50					.byte WordFlags	;wh_Flags
>be48	03					.byte 3	;wh_CodeLength
>be49	0e					  .byte LinkDisplacement
=$be4a					XtPtr1 ::= *
=48582					WordListLink ::= Nt0 ; remember the nt of this word for later
.be4a					Fill:
.be4a	20 3d b4	jsr $b43d			jsr underflow_3
.be4d	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be4f	85 14		sta $14				sta tmp1+0
.be51	b5 29		lda $29,x			lda DStack+5,x
.be53	85 15		sta $15				sta tmp1+1
.be55	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be57	85 16		sta $16				sta tmp2+0
.be59	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be5b	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be5d	a0 00		ldy #$00			ldy #0
.be5f	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be61	f0 09		beq $be6c			beq _test2
.be63	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be65	c8		iny				iny			; to next byte
.be66	d0 f7		bne $be5f			bne _loop
.be68	e6 15		inc $15				inc tmp1+1		; increment addr page
.be6a	d0 f3		bne $be5f			bne _loop
.be6c	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be6e	d0 f3		bne $be63			bne _3
.be70	4c 92 ad	jmp $ad92			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-XtPtr1
=$be73					en = *	; remember here
>be48	29					.byte CL	;wh_CodeLength
>be73	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=48635					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be7b	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be7c	10					.byte WordFlags	;wh_Flags
>be7d	03					.byte 3	;wh_CodeLength
>be7e	35					  .byte LinkDisplacement
=$be7f					XtPtr1 ::= *
=48635					WordListLink ::= Nt0 ; remember the nt of this word for later
.be7f	20 b8 c1	jsr $c1b8	Variable:	jsr Create		; compile word header & push PFA
.be82	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be84	a8		tay				tay
.be85	4c 0f cd	jmp $cd0f			jmp Comma_YA
=9					CL	.var *-XtPtr1
=$be88					en = *	; remember here
>be7d	09					.byte CL	;wh_CodeLength
>be88	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be90	65
=48657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be91	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>be92	10					.byte WordFlags	;wh_Flags
>be93	03					.byte 3	;wh_CodeLength
>be94	16					  .byte LinkDisplacement
=$be95					XtPtr1 ::= *
=48657					WordListLink ::= Nt0 ; remember the nt of this word for later
.be95	20 7f be	jsr $be7f	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be98	4c 0f cd	jmp $cd0f			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-XtPtr1
=$be9b					en = *	; remember here
>be93	06					.byte CL	;wh_CodeLength
>be9b	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=48675					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bea3	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>bea4	50					.byte WordFlags	;wh_Flags
>bea5	03					.byte 3	;wh_CodeLength
>bea6	12					  .byte LinkDisplacement
=$bea7					XtPtr1 ::= *
=48675					WordListLink ::= Nt0 ; remember the nt of this word for later
.bea7					Constant:
.bea7	20 24 b4	jsr $b424			jsr underflow_1
.beaa	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.bead	20 76 b7	jsr $b776			jsr LitCompile		; compile code to load registers, & pick a subroutine
.beb0	20 4f cd	jsr $cd4f			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.beb3	4c d5 bb	jmp $bbd5			jmp adjust_z		; fix word length
=15					CL	.var *-XtPtr1
=$beb6					en = *	; remember here
>bea5	0f					.byte CL	;wh_CodeLength
>beb6	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bebe	74
=48703					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bebf	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>bec0	50					.byte WordFlags	;wh_Flags
>bec1	03					.byte 3	;wh_CodeLength
>bec2	1c					  .byte LinkDisplacement
=$bec3					XtPtr1 ::= *
=48703					WordListLink ::= Nt0 ; remember the nt of this word for later
.bec3					Two_constant:
.bec3	20 38 b4	jsr $b438			jsr underflow_2
.bec6	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.bec9	20 84 cf	jsr $cf84			jsr Swap
.becc	20 6d b7	jsr $b76d			jsr Literal		; compile push lo cell
.becf	20 76 b7	jsr $b776			jsr LitCompile		; compile push hi cell, YA=exit routine
.bed2	20 4f cd	jsr $cd4f			jsr Jmp_Comma_NT_YA	; compile JMP from above
.bed5	4c d5 bb	jmp $bbd5			jmp adjust_z		; fix word length
=21					CL	.var *-XtPtr1
=$bed8					en = *	; remember here
>bec1	15					.byte CL	;wh_CodeLength
>bed8	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=48733					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bedd	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>bede	50					.byte WordFlags	;wh_Flags
>bedf	03					.byte 3	;wh_CodeLength
>bee0	1e					  .byte LinkDisplacement
=$bee1					XtPtr1 ::= *
=48733					WordListLink ::= Nt0 ; remember the nt of this word for later
.bee1					Value:
.bee1	20 24 b4	jsr $b424			jsr underflow_1
.bee4	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.bee7	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile lda # & ldy #
.beea	a9 b8		lda #$b8			lda #<PushYA		; compile jmp PushYA
.beec	a0 b7		ldy #$b7			ldy #>PushYA
.beee	20 48 cd	jsr $cd48			jsr Jmp_Comma_YA
.bef1	4c d5 bb	jmp $bbd5			jmp adjust_z		; fix word length
=19					CL	.var *-XtPtr1
=$bef4					en = *	; remember here
>bedf	13					.byte CL	;wh_CodeLength
>bef4	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=48762					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>befa	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>befb	50					.byte WordFlags	;wh_Flags
>befc	03					.byte 3	;wh_CodeLength
>befd	1d					  .byte LinkDisplacement
=$befe					XtPtr1 ::= *
=48762					WordListLink ::= Nt0 ; remember the nt of this word for later
.befe					TwoValue:
.befe	20 38 b4	jsr $b438			jsr underflow_2
.bf01	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.bf04	a9 11		lda #$11			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bf06	a0 bf		ldy #$bf			ldy #>TwoValue_Runtime
.bf08	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.bf0b	20 d5 bb	jsr $bbd5			jsr adjust_z		; fix word length
.bf0e	4c 1c cd	jmp $cd1c			jmp Two_Comma		; compile the value, return
=19					CL	.var *-XtPtr1
=$bf11					en = *	; remember here
>befc	13					.byte CL	;wh_CodeLength
.bf11					TwoValue_Runtime:
.bf11	68		pla				pla			; pop RTS addr
.bf12	85 14		sta $14				sta tmp1+0
.bf14	68		pla				pla
.bf15	85 15		sta $15				sta tmp1+1
.bf17	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf19	4c bf c5	jmp $c5bf			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf1c	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=48798					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf1e	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf1f	18					.byte WordFlags	;wh_Flags
>bf20	03					.byte 3	;wh_CodeLength
>bf21	24					  .byte LinkDisplacement
=$bf22					XtPtr1 ::= *
=48798					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf22					To:
.bf22	20 3b bc	jsr $bc3b			jsr Tick		; We always need the xt of the target word
.bf25	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf27	b4 25		ldy $25,x			ldy DStack+1,x
.bf29	85 14		sta $14				sta tmp1+0
.bf2b	84 15		sty $15				sty tmp1+1
.bf2d	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf2f	b1 14		lda ($14),y			lda (tmp1),y
.bf31	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf33	d0 38		bne $bf6d			bne _Test2
.bf35	a5 0a		lda $0a				lda state		; check compile state
.bf37	f0 20		beq $bf59			beq _Value_interpret
.bf39	a9 fb		lda #$fb			lda #<PopYA		; compile jsr PopYA
.bf3b	a0 b3		ldy #$b3			ldy #>PopYA
.bf3d	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.bf40	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf42	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.bf45	20 69 ca	jsr $ca69			jsr One_plus
.bf48	20 67 cf	jsr $cf67			jsr Dup
.bf4b	20 0c cd	jsr $cd0c			jsr Comma
.bf4e	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf50	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.bf53	20 16 ca	jsr $ca16			jsr Cell_Plus
.bf56	4c 0c cd	jmp $cd0c			jmp Comma
.bf59					_Value_interpret:
.bf59	20 38 b4	jsr $b438			jsr underflow_2		; ( n xt )
.bf5c	e8		inx				inx			; Drop xt
.bf5d	e8		inx				inx
.bf5e	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf60	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf62	91 14		sta ($14),y			sta (tmp1),y
.bf64	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf66	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf68	91 14		sta ($14),y			sta (tmp1),y
.bf6a	e8		inx				inx			; Drop n
.bf6b	e8		inx				inx
.bf6c	60		rts				rts
.bf6d	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf6f	d0 33		bne $bfa4			bne _Err
.bf71	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf73	20 1b ca	jsr $ca1b			jsr Plus_A
.bf76	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf78	b1 14		lda ($14),y			lda (tmp1),y
.bf7a	c9 11		cmp #$11			cmp #<TwoValue_Runtime
.bf7c	d0 11		bne $bf8f			bne _Test3
.bf7e	a5 0a		lda $0a				lda state		; check compile state
.bf80	f0 0a		beq $bf8c			beq _2Value_runtime
.bf82	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf85	a9 92		lda #$92			lda #<Two_Store_YA
.bf87	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf89	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf8c	4c 8c c5	jmp $c58c	_2Value_runtime: jmp Two_Store
.bf8f					_Test3:
.bf8f	c9 5e		cmp #$5e			cmp #<FValue_runtime
.bf91	d0 11		bne $bfa4			bne _Err
.bf93	a5 0a		lda $0a				lda state		; check compile state
.bf95	f0 0a		beq $bfa1			beq _FValue_interpret
.bf97	20 9f b7	jsr $b79f			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf9a	a9 7c		lda #$7c			lda #<FStore_YA
.bf9c	a0 86		ldy #$86			ldy #>FStore_YA
.bf9e	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bfa1	4c 79 86	jmp $8679	_FValue_interpret: jmp FStore
.bfa4	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bfa6	20 80 b4	jsr $b480			jsr ThrowA
=135					CL	.var *-XtPtr1
=$bfa9					en = *	; remember here
>bf20	87					.byte CL	;wh_CodeLength
>bfa9	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=48941					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfad	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bfae	10					.byte WordFlags	;wh_Flags
>bfaf	03					.byte 3	;wh_CodeLength
>bfb0	8f					  .byte LinkDisplacement
=$bfb1					XtPtr1 ::= *
=48941					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfb1	a9 80		lda #$80	DMax:		lda #$80
.bfb3	d0 0a		bne $bfbf			bne DMin3
=4					CL	.var *-XtPtr1
=$bfb5					en = *	; remember here
>bfaf	04					.byte CL	;wh_CodeLength
>bfb5	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=48953					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfb9	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfba	10					.byte WordFlags	;wh_Flags
>bfbb	03					.byte 3	;wh_CodeLength
>bfbc	0c					  .byte LinkDisplacement
=$bfbd					XtPtr1 ::= *
=48953					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfbd	a9 00		lda #$00	DMin:		lda #0
.bfbf	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfc1	20 42 b4	jsr $b442			jsr underflow_4
.bfc4	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfc6	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfc8	b5 27		lda $27,x			lda DStack+3,x
.bfca	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfcc	b5 24		lda $24,x			lda DStack+0,x
.bfce	f5 28		sbc $28,x			sbc DStack+4,x
.bfd0	b5 25		lda $25,x			lda DStack+1,x
.bfd2	f5 29		sbc $29,x			sbc DStack+5,x
.bfd4	50 02		bvc $bfd8			bvc +
.bfd6	49 80		eor #$80			eor #$80	; fix sign
.bfd8	45 16		eor $16		+		eor tmp2
.bfda	30 0e		bmi $bfea			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfdc	4c 45 c5	jmp $c545			jmp Two_Drop
=34					CL	.var *-XtPtr1
=$bfdf					en = *	; remember here
>bfbb	22					.byte CL	;wh_CodeLength
>bfdf	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=48995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfe3	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bfe4	50					.byte WordFlags	;wh_Flags
>bfe5	03					.byte 3	;wh_CodeLength
>bfe6	2a					  .byte LinkDisplacement
=$bfe7					XtPtr1 ::= *
=48995					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfe7	20 42 b4	jsr $b442	TwoNip:		jsr underflow_4
.bfea	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bfec	95 28		sta $28,x			sta DStack+4,x
.bfee	b5 25		lda $25,x			lda DStack+1,x
.bff0	95 29		sta $29,x			sta DStack+5,x
.bff2	b5 26		lda $26,x			lda DStack+2,x
.bff4	95 2a		sta $2a,x			sta DStack+6,x
.bff6	b5 27		lda $27,x			lda DStack+3,x
.bff8	95 2b		sta $2b,x			sta DStack+7,x
.bffa	4c 45 c5	jmp $c545			jmp Two_Drop
=22					CL	.var *-XtPtr1
=$bffd					en = *	; remember here
>bfe5	16					.byte CL	;wh_CodeLength
>bffd	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=49024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c000	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c001	40					.byte WordFlags	;wh_Flags
>c002	03					.byte 3	;wh_CodeLength
>c003	1d					  .byte LinkDisplacement
=$c004					XtPtr1 ::= *
=49024					WordListLink ::= Nt0 ; remember the nt of this word for later
.c004					S_To_D:
.c004	20 24 b4	jsr $b424			jsr underflow_1
.c007	a0 00		ldy #$00			ldy #0			; assume positive
.c009	b5 25		lda $25,x			lda DStack+1,x		; test n
.c00b	10 01		bpl $c00e			bpl +
.c00d	88		dey				dey			; make negative
.c00e					+
.c00e	ca		dex				dex			; push new hi cell
.c00f	ca		dex				dex
.c010	94 24		sty $24,x			sty DStack+0,x
.c012	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-XtPtr1
=$c014					en = *	; remember here
>c002	10					.byte CL	;wh_CodeLength
.c014	60		rts				rts
>c015	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=49048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c018	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c019	40					.byte WordFlags	;wh_Flags
>c01a	03					.byte 3	;wh_CodeLength
>c01b	18					  .byte LinkDisplacement
=$c01c					XtPtr1 ::= *
=49048					WordListLink ::= Nt0 ; remember the nt of this word for later
.c01c					D_To_S:
.c01c	20 38 b4	jsr $b438			jsr underflow_2
.c01f	e8		inx				inx		; Drop hi cell
.c020	e8		inx				inx
=5					CL	.var *-XtPtr1
=$c021					en = *	; remember here
>c01a	05					.byte CL	;wh_CodeLength
.c021	60		rts				rts
>c022	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=49060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c024	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c025	40					.byte WordFlags	;wh_Flags
>c026	03					.byte 3	;wh_CodeLength
>c027	0c					  .byte LinkDisplacement
=$c028					XtPtr1 ::= *
=49060					WordListLink ::= Nt0 ; remember the nt of this word for later
.c028					D_Minus:
.c028	20 42 b4	jsr $b442			jsr underflow_4 ; two double numbers
.c02b	38		sec				sec
.c02c	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c02e	f5 26		sbc $26,x			sbc DStack+2,x
.c030	95 2a		sta $2a,x			sta DStack+6,x
.c032	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c034	f5 27		sbc $27,x			sbc DStack+3,x
.c036	95 2b		sta $2b,x			sta DStack+7,x
.c038	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c03a	f5 24		sbc $24,x			sbc DStack+0,x
.c03c	95 28		sta $28,x			sta DStack+4,x
.c03e	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c040	f5 25		sbc $25,x			sbc DStack+1,x
.c042	95 29		sta $29,x			sta DStack+5,x
.c044	e8		inx				inx
.c045	e8		inx				inx
.c046	e8		inx				inx
.c047	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c048					en = *	; remember here
>c026	20					.byte CL	;wh_CodeLength
.c048	60		rts				rts
>c049	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=49099					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c04b	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c04c	40					.byte WordFlags	;wh_Flags
>c04d	03					.byte 3	;wh_CodeLength
>c04e	27					  .byte LinkDisplacement
=$c04f					XtPtr1 ::= *
=49099					WordListLink ::= Nt0 ; remember the nt of this word for later
.c04f					D_Plus:
.c04f	20 42 b4	jsr $b442			jsr underflow_4 ; two double numbers
.c052	18		clc				clc
.c053	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c055	75 2a		adc $2a,x			adc DStack+6,x
.c057	95 2a		sta $2a,x			sta DStack+6,x
.c059	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c05b	75 2b		adc $2b,x			adc DStack+7,x
.c05d	95 2b		sta $2b,x			sta DStack+7,x
.c05f	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c061	75 28		adc $28,x			adc DStack+4,x
.c063	95 28		sta $28,x			sta DStack+4,x
.c065	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c067	75 29		adc $29,x			adc DStack+5,x
.c069	95 29		sta $29,x			sta DStack+5,x
.c06b	e8		inx				inx
.c06c	e8		inx				inx
.c06d	e8		inx				inx
.c06e	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c06f					en = *	; remember here
>c04d	20					.byte CL	;wh_CodeLength
.c06f	60		rts				rts
>c070	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=49139					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c073	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c074	40					.byte WordFlags	;wh_Flags
>c075	03					.byte 3	;wh_CodeLength
>c076	28					  .byte LinkDisplacement
=$c077					XtPtr1 ::= *
=49139					WordListLink ::= Nt0 ; remember the nt of this word for later
.c077	20 38 b4	jsr $b438	D1Plus:		jsr underflow_2
.c07a	f6 26		inc $26,x			inc DStack+2,x
.c07c	d0 0a		bne $c088			bne +
.c07e	f6 27		inc $27,x			inc DStack+3,x
.c080	d0 06		bne $c088			bne +
.c082	f6 24		inc $24,x			inc DStack+0,x
.c084	d0 02		bne $c088			bne +
.c086	f6 25		inc $25,x			inc DStack+1,x
.c088					+
=17					CL	.var *-XtPtr1
=$c088					en = *	; remember here
>c075	11					.byte CL	;wh_CodeLength
.c088	60		rts				rts
>c089	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=49164					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c08c	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c08d	40					.byte WordFlags	;wh_Flags
>c08e	03					.byte 3	;wh_CodeLength
>c08f	19					  .byte LinkDisplacement
=$c090					XtPtr1 ::= *
=49164					WordListLink ::= Nt0 ; remember the nt of this word for later
.c090	20 38 b4	jsr $b438	D1Minus:	jsr underflow_2
.c093	b5 26		lda $26,x			lda DStack+2,x
.c095	d0 0e		bne $c0a5			bne _1
.c097	b5 27		lda $27,x			lda DStack+3,x
.c099	d0 08		bne $c0a3			bne _2
.c09b	b5 24		lda $24,x			lda DStack+0,x
.c09d	d0 02		bne $c0a1			bne _3
.c09f	d6 25		dec $25,x			dec DStack+1,x
.c0a1	d6 24		dec $24,x	_3:		dec DStack+0,x
.c0a3	d6 27		dec $27,x	_2:		dec DStack+3,x
.c0a5	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-XtPtr1
=$c0a7					en = *	; remember here
>c08e	17					.byte CL	;wh_CodeLength
.c0a7	60		rts				rts
>c0a8	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=49197					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0ad	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c0ae	50					.byte WordFlags	;wh_Flags
>c0af	03					.byte 3	;wh_CodeLength
>c0b0	21					  .byte LinkDisplacement
=$c0b1					XtPtr1 ::= *
=49197					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0b1					Allot:
.c0b1	20 24 b4	jsr $b424			jsr underflow_1
.c0b4	18		clc				clc			; adjust cp
.c0b5	b5 24		lda $24,x			lda DStack+0,x
.c0b7	65 00		adc $00				adc cp+0
.c0b9	85 00		sta $00				sta cp+0
.c0bb	a8		tay				tay			;   save lo byte
.c0bc	b5 25		lda $25,x			lda DStack+1,x
.c0be	85 14		sta $14				sta tmp1
.c0c0	65 01		adc $01				adc cp+1
.c0c2	85 01		sta $01				sta cp+1
.c0c4	24 14		bit $14				bit tmp1
.c0c6	30 15		bmi $c0dd			bmi _release
.c0c8	b0 06		bcs $c0d0			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0ca	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0cc	e9 7f		sbc #$7f			sbc #>_last
.c0ce	90 2c		bcc $c0fc			bcc _done		; we're fine.
.c0d0					_pos_err:
.c0d0	a9 58		lda #$58			lda #<_last
.c0d2	85 00		sta $00				sta cp+0
.c0d4	a9 7f		lda #$7f			lda #>_last
.c0d6	85 01		sta $01				sta cp+1
.c0d8	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0da	4c 80 b4	jmp $b480			jmp ThrowA
.c0dd					_release:
.c0dd	90 06		bcc $c0e5			bcc _neg_err		; borrow indicates we've gone below 0
.c0df	c0 66		cpy #$66			cpy #<cp0
.c0e1	e9 0b		sbc #$0b			sbc #>cp0
.c0e3	b0 17		bcs $c0fc			bcs _done
.c0e5					_neg_err:
.c0e5	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0e7	85 00		sta $00				sta cp+0
.c0e9	a9 0b		lda #$0b			lda #>cp0
.c0eb	85 01		sta $01				sta cp+1
.c0ed	a9 1c		lda #$1c			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0ef	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0f2	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c0f4	8d 13 03	sta $0313			sta WordlistsV+1
.c0f7	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0f9	4c 80 b4	jmp $b480			jmp ThrowA
.c0fc					_done:
.c0fc	e8		inx				inx			; Drop n
.c0fd	e8		inx				inx
=77					CL	.var *-XtPtr1
=$c0fe					en = *	; remember here
>c0af	4d					.byte CL	;wh_CodeLength
.c0fe	60		rts				rts
>c0ff	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=49286					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c106	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c107	10					.byte WordFlags	;wh_Flags
>c108	03					.byte 3	;wh_CodeLength
>c109	59					  .byte LinkDisplacement
=$c10a					XtPtr1 ::= *
=49286					WordListLink ::= Nt0 ; remember the nt of this word for later
.c10a					Header_Comma:
.c10a	20 18 c1	jsr $c118			jsr Header_Build
.c10d					Header_Link:
.c10d	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c10f	85 10		sta $10				sta dp+0
.c111	a5 0f		lda $0f				lda WorkWord+1
.c113	85 11		sta $11				sta dp+1
.c115	4c 59 ba	jmp $ba59			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c118					Header_Build:
.c118	20 a8 ba	jsr $baa8			jsr parse_name_check	; get name string, throw error if empty string
.c11b	20 b3 cc	jsr $ccb3			jsr Two_dup		; ( addr u addr u )
.c11e	20 5c a1	jsr $a15c			jsr Get_Current
.c121	20 c6 a1	jsr $a1c6			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c124	e8		inx				inx			; pop flag.
.c125	e8		inx				inx
.c126	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c128	f0 21		beq $c14b			beq _new_name		; We haven't seen this one before.
.c12a	e8		inx				inx			; Drop xt
.c12b	e8		inx				inx
.c12c	24 0c		bit $0c				bit status		; Check bit 7
.c12e	10 08		bpl $c138			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c130	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c132	05 0c		ora $0c				ora status
.c134	85 0c		sta $0c				sta status
.c136	d0 19		bne $c151			bne _process_name
.c138					_redefined_name:
.c138	a9 2b		lda #$2b			lda #<str_redefined
.c13a	a0 da		ldy #$da			ldy #>str_redefined
.c13c	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.c13f	20 b3 cc	jsr $ccb3			jsr Two_dup		 ; ( addr u addr u )
.c142	20 e9 cd	jsr $cde9			jsr Type
.c145	20 dd cd	jsr $cddd			jsr Space
.c148	4c 51 c1	jmp $c151			jmp _process_name
.c14b					_new_name:
.c14b	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c14d	25 0c		and $0c				and status
.c14f	85 0c		sta $0c				sta status
.c151					_process_name:
.c151	20 b3 cc	jsr $ccb3			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c154	20 37 ca	jsr $ca37			jsr Here
.c157	20 84 cf	jsr $cf84			jsr Swap
.c15a	20 e8 ad	jsr $ade8			jsr CMove
.c15d	20 67 cf	jsr $cf67			jsr Dup			;   save length
.c160	20 b1 c0	jsr $c0b1			jsr Allot
.c163	38		sec				sec
.c164	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c166	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c168	85 0e		sta $0e				sta WorkWord+0
.c16a	a5 01		lda $01				lda cp+1
.c16c	e9 00		sbc #$00			sbc #0
.c16e	85 0f		sta $0f				sta WorkWord+1
.c170	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c172	b1 0e		lda ($0e),y			lda (WorkWord),y
.c174	0a		asl a				asl a
.c175	0a		asl a				asl a
.c176	0a		asl a				asl a
.c177	0a		asl a				asl a
.c178	0a		asl a				asl a
.c179	15 24		ora $24,x			ora DStack+0,x
.c17b	95 24		sta $24,x			sta DStack+0,x
.c17d	20 f3 cc	jsr $ccf3			jsr C_Comma		; compile wh_HashNameLen
.c180	e8		inx				inx			; drop name string addr
.c181	e8		inx				inx
.c182	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c184	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.c187	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c189	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.c18c	20 49 ba	jsr $ba49			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c18f	38		sec				sec
.c190	a5 0e		lda $0e				lda WorkWord+0
.c192	e5 10		sbc $10				sbc dp+0
.c194	a8		tay				tay
.c195	a5 0f		lda $0f				lda WorkWord+1
.c197	e5 11		sbc $11				sbc dp+1
.c199	f0 0f		beq $c1aa			beq _LinkShort
.c19b	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c19d	b1 0e		lda ($0e),y			lda (WorkWord),y
.c19f	09 01		ora #$01			ora #FP
.c1a1	91 0e		sta ($0e),y			sta (WorkWord),y
.c1a3	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c1a5	a4 11		ldy $11				ldy dp+1
.c1a7	4c 0f cd	jmp $cd0f			jmp Comma_YA
.c1aa	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c1ab	4c f6 cc	jmp $ccf6			jmp C_Comma_A
=164					CL	.var *-XtPtr1
=$c1ae					en = *	; remember here
>c108	a4					.byte CL	;wh_CodeLength
>c1ae	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=49460					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1b4	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1b5	10					.byte WordFlags	;wh_Flags
>c1b6	03					.byte 3	;wh_CodeLength
>c1b7	ae					  .byte LinkDisplacement
=$c1b8					XtPtr1 ::= *
=49460					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1b8					Create:
.c1b8	20 0a c1	jsr $c10a			jsr Header_Comma	; compile word header
.c1bb	a9 c5		lda #$c5			lda #<DoVar		; compile JSR DoVar
.c1bd	a0 c1		ldy #$c1			ldy #>DoVar
.c1bf	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.c1c2	4c d5 bb	jmp $bbd5			jmp adjust_z
=13					CL	.var *-XtPtr1
=$c1c5					en = *	; remember here
>c1b6	0d					.byte CL	;wh_CodeLength
.c1c5					DoVar:
.c1c5	68		pla				pla		; Pull the return address off the machine's stack
.c1c6	18		clc				clc		;   +1 because of the way the JSR works
.c1c7	69 01		adc #$01			adc #1
.c1c9	ca		dex				dex		; push on data stack
.c1ca	ca		dex				dex
.c1cb	95 24		sta $24,x			sta DStack+0,x
.c1cd	68		pla				pla
.c1ce	69 00		adc #$00			adc #0
.c1d0	95 25		sta $25,x			sta DStack+1,x
.c1d2	60		rts				rts		; takes us to the original caller of the
>c1d3	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=49496					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1d8	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1d9	1c					.byte WordFlags	;wh_Flags
>c1da	03					.byte 3	;wh_CodeLength
>c1db	24					  .byte LinkDisplacement
=$c1dc					XtPtr1 ::= *
=49496					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1dc					Does:
.c1dc	a0 c1		ldy #$c1			ldy #>_runtime		; compile JSR _runtime
.c1de	a9 f6		lda #$f6			lda #<_runtime
.c1e0	20 32 cd	jsr $cd32			jsr Jsr_Comma_YA
.c1e3	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1e5	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1e7	20 0f cd	jsr $cd0f			jsr Comma_YA
.c1ea	a9 68		lda #$68			lda #$68		; compile PLA
.c1ec	20 f6 cc	jsr $ccf6			jsr C_Comma_A
.c1ef	a0 c2		ldy #$c2			ldy #>_DoDoes		; compile JSR _DoDoes
.c1f1	a9 13		lda #$13			lda #<_DoDoes
.c1f3	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=26					CL	.var *-XtPtr1
=$c1f6					en = *	; remember here
>c1da	1a					.byte CL	;wh_CodeLength
.c1f6					_runtime:
.c1f6	20 49 ba	jsr $ba49			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c1f9	a5 10		lda $10				lda dp+0		; tmp1= dp
.c1fb	a4 11		ldy $11				ldy dp+1
.c1fd	85 14		sta $14				sta tmp1+0
.c1ff	84 15		sty $15				sty tmp1+1
.c201	20 b9 bd	jsr $bdb9			jsr NameToIntTmp	; tmp2= xt
.c204	18		clc				clc
.c205	68		pla				pla		; RTS addr LSB
.c206	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c208	a0 01		ldy #$01			ldy #1
.c20a	91 16		sta ($16),y			sta (tmp2),y
.c20c	68		pla				pla		; RTS addr MSB
.c20d	69 00		adc #$00			adc #0
.c20f	c8		iny				iny
.c210	91 16		sta ($16),y			sta (tmp2),y
.c212	60		rts				rts
.c213					_DoDoes:
.c213	c8		iny				iny		; +1 for JSR behavior
.c214	d0 03		bne $c219			bne +
.c216	18		clc				clc
.c217	69 01		adc #$01			adc #1
.c219					+
.c219	4c 75 cf	jmp $cf75			jmp PushAY
>c21c	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=49570					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c222	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c223	00					.byte WordFlags	;wh_Flags
>c224	03					.byte 3	;wh_CodeLength
>c225	4a					  .byte LinkDisplacement
=$c226					XtPtr1 ::= *
=49570					WordListLink ::= Nt0 ; remember the nt of this word for later
.c226					Unused:
=32600					_last = cp_end-2*padoffset
.c226	ca		dex				dex
.c227	ca		dex				dex
.c228	38		sec				sec
.c229	a9 58		lda #$58			lda #<_last
.c22b	e5 00		sbc $00				sbc cp+0
.c22d	95 24		sta $24,x			sta DStack+0,x
.c22f	a9 7f		lda #$7f			lda #>_last
.c231	e5 01		sbc $01				sbc cp+1
.c233	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$c235					en = *	; remember here
>c224	0f					.byte CL	;wh_CodeLength
.c235	60		rts				rts
>c236	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=49595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c23b	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c23c	10					.byte WordFlags	;wh_Flags
>c23d	03					.byte 3	;wh_CodeLength
>c23e	19					  .byte LinkDisplacement
=$c23f					XtPtr1 ::= *
=49595					WordListLink ::= Nt0 ; remember the nt of this word for later
.c23f					Depth:
.c23f	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c241	86 1a		stx $1a				stx tmp4
.c243	38		sec				sec
.c244	e5 1a		sbc $1a				sbc tmp4
.c246	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c247	4c e7 b7	jmp $b7e7			jmp PushZA
=11					CL	.var *-XtPtr1
=$c24a					en = *	; remember here
>c23d	0b					.byte CL	;wh_CodeLength
>c24a	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=49613					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c24d	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c24e	10					.byte WordFlags	;wh_Flags
>c24f	03					.byte 3	;wh_CodeLength
>c250	12					  .byte LinkDisplacement
=$c251					XtPtr1 ::= *
=49613					WordListLink ::= Nt0 ; remember the nt of this word for later
.c251	20 57 c2	jsr $c257	Key:		jsr key_a		; returns char in A
.c254	4c e7 b7	jmp $b7e7			jmp PushZA
=6					CL	.var *-XtPtr1
=$c257					en = *	; remember here
>c24f	06					.byte CL	;wh_CodeLength
.c257					Key_A:
.c257	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c25a	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=49630					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c25e	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c25f	10					.byte WordFlags	;wh_Flags
>c260	03					.byte 3	;wh_CodeLength
>c261	11					  .byte LinkDisplacement
=$c262					XtPtr1 ::= *
=49630					WordListLink ::= Nt0 ; remember the nt of this word for later
.c262	20 68 c2	jsr $c268	KeyQ:		jsr KeyQ_A
.c265	4c e7 b7	jmp $b7e7			jmp PushZA
.c268	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c26b	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=49649					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c271	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c272	10					.byte WordFlags	;wh_Flags
>c273	03					.byte 3	;wh_CodeLength
>c274	13					  .byte LinkDisplacement
=$c275					XtPtr1 ::= *
=49649					WordListLink ::= Nt0 ; remember the nt of this word for later
.c275					Refill:
.c275	a9 00		lda #$00			lda #0			; show empty in case of error
.c277	85 06		sta $06				sta ciblen+0
.c279	85 07		sta $07				sta ciblen+1
.c27b	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c27d	d0 24		bne $c2a3			bne _src_not_kbd
.c27f	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c281	a4 05		ldy $05				ldy cib+1
.c283	20 b8 b7	jsr $b7b8			jsr PushYA
.c286	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c288	20 e7 b7	jsr $b7e7			jsr PushZA		;  cheat: We only accept max 255
.c28b	20 b9 c2	jsr $c2b9			jsr Accept		; ( addr n1 -- n2)
.c28e	b5 24		lda $24,x			lda DStack+0,x
.c290	85 06		sta $06				sta ciblen+0
.c292	b5 25		lda $25,x			lda DStack+1,x
.c294	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c296	a9 00		lda #$00			lda #0
.c298	85 08		sta $08				sta toin+0
.c29a	85 09		sta $09				sta toin+1
.c29c	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c29e	95 24		sta $24,x			sta DStack+0,x
.c2a0	95 25		sta $25,x			sta DStack+1,x
.c2a2	60		rts				rts
.c2a3					_src_not_kbd:
.c2a3	c9 ff		cmp #$ff			cmp #$ff
.c2a5	d0 03		bne $c2aa			bne _src_not_string
.c2a7	4c d9 b7	jmp $b7d9			jmp False
.c2aa					_src_not_string:
.c2aa	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c2ac	20 80 b4	jsr $b480			jsr ThrowA
=58					CL	.var *-XtPtr1
=$c2af					en = *	; remember here
>c273	3a					.byte CL	;wh_CodeLength
>c2af	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=49717					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2b5	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2b6	50					.byte WordFlags	;wh_Flags
>c2b7	03					.byte 3	;wh_CodeLength
>c2b8	44					  .byte LinkDisplacement
=$c2b9					XtPtr1 ::= *
=49717					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2b9					Accept:
.c2b9	20 38 b4	jsr $b438			jsr underflow_2
.c2bc	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2be	15 25		ora $25,x			ora DStack+1,x
.c2c0	d0 09		bne $c2cb			bne _not_zero
.c2c2	e8		inx				inx			; drop n
.c2c3	e8		inx				inx
.c2c4	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2c6	95 25		sta $25,x			sta DStack+1,x
.c2c8	4c a0 c3	jmp $c3a0			jmp accept_done
.c2cb					_not_zero:
.c2cb	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2cd	85 16		sta $16				sta tmp2
.c2cf	a9 00		lda #$00			lda #0
.c2d1	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2d3	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2d5	85 14		sta $14				sta tmp1
.c2d7	b5 27		lda $27,x			lda DStack+3,x
.c2d9	85 15		sta $15				sta tmp1+1
.c2db	e8		inx				inx
.c2dc	e8		inx				inx
.c2dd	a0 00		ldy #$00			ldy #0
.c2df	a5 0c		lda $0c				lda status
.c2e1	29 f7		and #$f7			and #$f7
.c2e3	18		clc				clc
.c2e4	69 01		adc #$01			adc #1
.c2e6	09 08		ora #$08			ora #$08
.c2e8	85 0c		sta $0c				sta status
.c2ea					accept_loop:
.c2ea	20 57 c2	jsr $c257			jsr key_a
.c2ed	c9 0a		cmp #$0a			cmp #AscLF
.c2ef	f0 20		beq $c311			beq _eol
.c2f1	c9 0d		cmp #$0d			cmp #AscCR
.c2f3	f0 1c		beq $c311			beq _eol
.c2f5	c9 08		cmp #$08			cmp #AscBS
.c2f7	f0 24		beq $c31d			beq _backspace
.c2f9	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c2fb	f0 20		beq $c31d			beq _backspace
.c2fd	c9 10		cmp #$10			cmp #AscCP
.c2ff	f0 37		beq $c338			beq _ctrl_p
.c301	c9 0e		cmp #$0e			cmp #AscCN
.c303	f0 46		beq $c34b			beq _ctrl_n
.c305	91 14		sta ($14),y			sta (tmp1),y
.c307	c8		iny				iny
.c308	20 d1 cd	jsr $cdd1			jsr Emit_A
.c30b	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c30d	d0 db		bne $c2ea			bne accept_loop	      ; fall through if buffer limit reached
.c30f	f0 03		beq $c314			beq _buffer_full
.c311					_eol:
.c311	20 dd cd	jsr $cddd			jsr Space	; print final space
.c314					_buffer_full:
.c314	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c316	a9 00		lda #$00			lda #0
.c318	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c31a	4c a0 c3	jmp $c3a0			jmp accept_done
.c31d					_backspace:
.c31d	c0 00		cpy #$00			cpy #0		; buffer empty?
.c31f	d0 06		bne $c327			bne +
.c321	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c323	20 d1 cd	jsr $cdd1			jsr Emit_A
.c326	c8		iny				iny
.c327					+
.c327	88		dey				dey
.c328	a9 08		lda #$08			lda #AscBS	; move back one
.c32a	20 d1 cd	jsr $cdd1			jsr Emit_A
.c32d	20 dd cd	jsr $cddd			jsr Space	; print a space (rubout)
.c330	a9 08		lda #$08			lda #AscBS	; move back over space
.c332	20 d1 cd	jsr $cdd1			jsr Emit_A
.c335	4c ea c2	jmp $c2ea			jmp accept_loop
.c338					_ctrl_p:
.c338	a5 0c		lda $0c				lda status
.c33a	29 07		and #$07			and #7
.c33c	d0 08		bne $c346			bne _ctrl_p_dec
.c33e	a5 0c		lda $0c				lda status
.c340	09 07		ora #$07			ora #7
.c342	85 0c		sta $0c				sta status
.c344	d0 14		bne $c35a			bne _recall_history
.c346					_ctrl_p_dec:
.c346	c6 0c		dec $0c				dec status
.c348	4c 5a c3	jmp $c35a			jmp _recall_history
.c34b					_ctrl_n:
.c34b	a9 08		lda #$08			lda #$8
.c34d	24 0c		bit $0c				bit status
.c34f	d0 09		bne $c35a			bne _recall_history
.c351	a5 0c		lda $0c				lda status
.c353	29 f7		and #$f7			and #$f7
.c355	18		clc				clc
.c356	69 01		adc #$01			adc #1
.c358	85 0c		sta $0c				sta status
.c35a					_recall_history:
.c35a	a9 f7		lda #$f7			lda #$ff-%00001000
.c35c	25 0c		and $0c				and status
.c35e	85 0c		sta $0c				sta status
.c360	20 bb c3	jsr $c3bb			jsr accept_total_recall
.c363	a9 0d		lda #$0d			lda #AscCR
.c365	20 d1 cd	jsr $cdd1			jsr Emit_A
.c368					input_clear:
.c368	c0 00		cpy #$00			cpy #0
.c36a	f0 07		beq $c373			beq input_cleared
.c36c	20 dd cd	jsr $cddd			jsr Space
.c36f	88		dey				dey
.c370	4c 68 c3	jmp $c368			jmp input_clear
.c373					input_cleared:
.c373	a9 0d		lda #$0d			lda #AscCR
.c375	20 d1 cd	jsr $cdd1			jsr Emit_A
.c378	b1 18		lda ($18),y			lda (tmp3),y
.c37a	85 0d		sta $0d				sta status+1
.c37c	e6 18		inc $18				inc tmp3
.c37e	d0 02		bne $c382			bne +		; Increment the upper byte on carry.
.c380	e6 19		inc $19				inc tmp3+1
.c382					+
.c382	a9 0d		lda #$0d			lda #AscCR
.c384	20 d1 cd	jsr $cdd1			jsr Emit_A
.c387					_history_loop:
.c387	c4 0d		cpy $0d				cpy status+1
.c389	d0 03		bne $c38e			bne +
.c38b	4c ea c2	jmp $c2ea			jmp accept_loop	      ; Needs a long jump
.c38e					+
.c38e	c4 16		cpy $16				cpy tmp2
.c390	f0 0a		beq $c39c			beq _hist_filled_buffer
.c392	b1 18		lda ($18),y			lda (tmp3),y
.c394	91 14		sta ($14),y			sta (tmp1),y
.c396	20 d1 cd	jsr $cdd1			jsr Emit_A
.c399	c8		iny				iny
.c39a	d0 eb		bne $c387			bne _history_loop
.c39c					_hist_filled_buffer:
.c39c	88		dey				dey
.c39d	4c ea c2	jmp $c2ea			jmp accept_loop
.c3a0					accept_done:
.c3a0	20 bb c3	jsr $c3bb			jsr accept_total_recall
.c3a3	85 0d		sta $0d				sta status+1
.c3a5	a0 00		ldy #$00			ldy #0
.c3a7	91 18		sta ($18),y			sta (tmp3),y
.c3a9	e6 18		inc $18				inc tmp3
.c3ab	d0 02		bne $c3af			bne +		; Increment the upper byte on carry.
.c3ad	e6 19		inc $19				inc tmp3+1
.c3af					+
.c3af					_save_history_loop:
.c3af	c4 0d		cpy $0d				cpy status+1
.c3b1	f0 07		beq $c3ba			beq _save_history_done
.c3b3	b1 14		lda ($14),y			lda (tmp1),y
.c3b5	91 18		sta ($18),y			sta (tmp3),y
.c3b7	c8		iny				iny
.c3b8	d0 f5		bne $c3af			bne _save_history_loop
.c3ba					_save_history_done:
=257					CL	.var *-XtPtr1
=$ff					CL	 .var $ff
=$c3ba					en = *	; remember here
>c2b7	ff					.byte CL	;wh_CodeLength
.c3ba	60		rts				rts
.c3bb					accept_total_recall:
.c3bb	a9 66		lda #$66			lda #<hist_buff
.c3bd	85 18		sta $18				sta tmp3
.c3bf	a9 07		lda #$07			lda #>hist_buff
.c3c1	85 19		sta $19				sta tmp3+1
.c3c3	a5 0c		lda $0c				lda status
.c3c5	6a		ror a				ror
.c3c6	29 03		and #$03			and #3
.c3c8	18		clc				clc
.c3c9	65 19		adc $19				adc tmp3+1
.c3cb	85 19		sta $19				sta tmp3+1
.c3cd	a5 0c		lda $0c				lda status
.c3cf	6a		ror a				ror		; Rotate through carry into msb.
.c3d0	6a		ror a				ror
.c3d1	29 80		and #$80			and #$80
.c3d3	18		clc				clc
.c3d4	65 18		adc $18				adc tmp3
.c3d6	85 18		sta $18				sta tmp3
.c3d8	90 02		bcc $c3dc			bcc +		; Increment the upper byte on carry.
.c3da	e6 19		inc $19				inc tmp3+1
.c3dc					+
.c3dc	98		tya				tya
.c3dd	c9 80		cmp #$80			cmp #$80
.c3df	90 02		bcc $c3e3			bcc +
.c3e1	a9 7f		lda #$7f			lda #$7F
.c3e3					+
.c3e3	60		rts				rts
>c3e4	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=50027					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3eb	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifyable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3ec	31					.byte WordFlags	;wh_Flags
>c3ed	03					.byte 3	;wh_CodeLength
>c3ee	35 c2					  .word WordListLink
=$c3f0					XtPtr1 ::= *
=50027					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3f0					Input_To_R:
.c3f0	68		pla				pla			; move it out of the way
.c3f1	85 14		sta $14				sta tmp1+0
.c3f3	68		pla				pla
.c3f4	85 15		sta $15				sta tmp1+1
.c3f6	a0 07		ldy #$07			ldy #7
.c3f8	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c3fb	48		pha				pha
.c3fc	88		dey				dey
.c3fd	10 f9		bpl $c3f8			bpl _loop
.c3ff	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c401	48		pha				pha
.c402	a5 14		lda $14				lda tmp1+0
.c404	48		pha				pha
=21					CL	.var *-XtPtr1
=$c405					en = *	; remember here
>c3ed	15					.byte CL	;wh_CodeLength
.c405	60		rts				rts
>c406	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=50061					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c40d	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c40e	30					.byte WordFlags	;wh_Flags
>c40f	03					.byte 3	;wh_CodeLength
>c410	22					  .byte LinkDisplacement
=$c411					XtPtr1 ::= *
=50061					WordListLink ::= Nt0 ; remember the nt of this word for later
.c411					R_To_Input:
.c411	68		pla				pla		 ; move RTS addr out of the way
.c412	85 14		sta $14				sta tmp1+0
.c414	68		pla				pla
.c415	85 15		sta $15				sta tmp1+1
.c417	a0 00		ldy #$00			ldy #0
.c419	68		pla		_loop:		pla
.c41a	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c41d	c8		iny				iny
.c41e	c0 08		cpy #$08			cpy #8
.c420	d0 f7		bne $c419			bne _loop
.c422	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c424	48		pha				pha
.c425	a5 14		lda $14				lda tmp1+0
.c427	48		pha				pha
=23					CL	.var *-XtPtr1
=$c428					en = *	; remember here
>c40f	17					.byte CL	;wh_CodeLength
.c428	60		rts				rts
>c429	49 4b 65 79			L1:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=50093					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c42d	24					.byte (("IKey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c42e	10					.byte WordFlags	;wh_Flags
>c42f	03					.byte 3	;wh_CodeLength
>c430	20					  .byte LinkDisplacement
=$c431					XtPtr1 ::= *
=50093					WordListLink ::= Nt0 ; remember the nt of this word for later
.c431					IKey:
.c431	20 f5 b7	jsr $b7f5	_again:		jsr Zero
.c434	20 f5 b7	jsr $b7f5			jsr Zero	; ( ud )
.c437	20 37 ca	jsr $ca37			jsr Here
.c43a	20 67 cf	jsr $cf67			jsr Dup		; get text
.c43d	a9 10		lda #$10			lda #16
.c43f	20 e7 b7	jsr $b7e7			jsr PushZA
.c442	20 b9 c2	jsr $c2b9			jsr Accept	; ( ud addr len )
.c445	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c447	c9 2d		cmp #$2d			cmp #'-'
.c449	08		php				php		;  save sign
.c44a	d0 06		bne $c452			bne +
.c44c	20 73 ca	jsr $ca73			jsr NOS_One_Plus ;   eat the '-'
.c44f	20 44 ca	jsr $ca44			jsr One_Minus
.c452					+
.c452	20 54 b0	jsr $b054			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c455	e8		inx				inx		; Drop len
.c456	e8		inx				inx
.c457	e8		inx				inx		; Drop addr
.c458	e8		inx				inx
.c459	e8		inx				inx		; UD>S
.c45a	e8		inx				inx
.c45b	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c45d	f0 11		beq $c470			beq _ok
.c45f	e8		inx		_err:		inx		; Drop u
.c460	e8		inx				inx
.c461	28		plp				plp		; RDrop saved sign
.c462	20 dd cd	jsr $cddd			jsr Space	; prompt again
.c465	a9 3f		lda #$3f			lda #'?'
.c467	20 d1 cd	jsr $cdd1			jsr Emit_A
.c46a	20 dd cd	jsr $cddd			jsr Space
.c46d	4c 31 c4	jmp $c431			jmp _again	; try it again
.c470	28		plp		_ok:		plp		; apply sign
.c471	d0 03		bne $c476			bne +
.c473	20 b9 c6	jsr $c6b9			jsr Negate
.c476					+
.c476	60		rts				rts
=70					CL	.var *-XtPtr1
=$c477					en = *	; remember here
>c42f	46					.byte CL	;wh_CodeLength
>c477	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=50173					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c47d	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c47e	40					.byte WordFlags	;wh_Flags
>c47f	03					.byte 3	;wh_CodeLength
>c480	50					  .byte LinkDisplacement
=$c481					XtPtr1 ::= *
=50173					WordListLink ::= Nt0 ; remember the nt of this word for later
.c481					Bounds:
.c481	20 38 b4	jsr $b438			jsr underflow_2
.c484	18		clc				clc
.c485	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c487	a8		tay				tay
.c488	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c48a	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c48c	94 24		sty $24,x			sty DStack+0,x
.c48e	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c490	a8		tay				tay
.c491	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c493	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c495	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-XtPtr1
=$c497					en = *	; remember here
>c47f	16					.byte CL	;wh_CodeLength
.c497	60		rts				rts
>c498	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=50206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c49e	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c49f	50					.byte WordFlags	;wh_Flags
>c4a0	03					.byte 3	;wh_CodeLength
>c4a1	21					  .byte LinkDisplacement
=$c4a2					XtPtr1 ::= *
=50206					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4a2					 Spaces:
.c4a2	20 24 b4	jsr $b424			jsr underflow_1
.c4a5	4c ab c4	jmp $c4ab			jmp _test
.c4a8					_loop:
.c4a8	20 dd cd	jsr $cddd			jsr Space		; print a space
.c4ab	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c4ad	10 f9		bpl $c4a8			bpl _loop
.c4af	e8		inx				inx			; Drop
.c4b0	e8		inx				inx
=15					CL	.var *-XtPtr1
=$c4b1					en = *	; remember here
>c4a0	0f					.byte CL	;wh_CodeLength
.c4b1	60		rts				rts
>c4b2	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4ba	67
=50235					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4bb	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4bc	50					.byte WordFlags	;wh_Flags
>c4bd	03					.byte 3	;wh_CodeLength
>c4be	1d					  .byte LinkDisplacement
=$c4bf					XtPtr1 ::= *
=50235					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4bf					Minus_trailing:
.c4bf	20 38 b4	jsr $b438			jsr underflow_2
.c4c2	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4c4	85 14		sta $14				sta tmp1+0
.c4c6	b5 27		lda $27,x			lda DStack+3,x
.c4c8	18		clc				clc
.c4c9	75 25		adc $25,x			adc DStack+1,x
.c4cb	85 15		sta $15				sta tmp1+1
.c4cd	b4 24		ldy $24,x			ldy DStack+0,x
.c4cf	88		dey		_loop:		dey			; back 1 char
.c4d0	c0 ff		cpy #$ff			cpy #$ff
.c4d2	d0 06		bne $c4da			bne +
.c4d4	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4d6	d6 25		dec $25,x			dec DStack+1,x
.c4d8	30 06		bmi $c4e0			bmi _done
.c4da					+
.c4da	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4dc	c9 20		cmp #$20			cmp #AscSP
.c4de	f0 ef		beq $c4cf			beq _loop
.c4e0	c8		iny		_done:		iny			; forward 1 char
.c4e1	d0 02		bne $c4e5			bne +
.c4e3	f6 25		inc $25,x			inc DStack+1,x
.c4e5	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-XtPtr1
=$c4e7					en = *	; remember here
>c4bd	28					.byte CL	;wh_CodeLength
.c4e7	60		rts				rts
>c4e8	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=50288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4f0	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4f1	50					.byte WordFlags	;wh_Flags
>c4f2	03					.byte 3	;wh_CodeLength
>c4f3	35					  .byte LinkDisplacement
=$c4f4					XtPtr1 ::= *
=50288					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4f4					Minus_leading:
.c4f4	20 38 b4	jsr $b438			jsr underflow_2
.c4f7					_loop:
.c4f7	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c4f9	15 25		ora $25,x			ora DStack+1,x
.c4fb	f0 0f		beq $c50c			beq _done
.c4fd	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c4ff	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c501	b0 09		bcs $c50c			bcs _done
.c503	20 73 ca	jsr $ca73			jsr NOS_One_Plus
.c506	20 47 ca	jsr $ca47			jsr One_Minus_NoUF
.c509	4c f7 c4	jmp $c4f7			jmp _loop
.c50c					_done:
=24					CL	.var *-XtPtr1
=$c50c					en = *	; remember here
>c4f2	18					.byte CL	;wh_CodeLength
.c50c	60		rts				rts
>c50d	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=50324					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c514	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c515	50					.byte WordFlags	;wh_Flags
>c516	03					.byte 3	;wh_CodeLength
>c517	24					  .byte LinkDisplacement
=$c518					XtPtr1 ::= *
=50324					WordListLink ::= Nt0 ; remember the nt of this word for later
.c518					Slash_String:
.c518	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c51a	b0 1d		bcs $c539		bcs Throw_Stack_20
.c51c	18		clc				clc		; addr += n
.c51d	b5 24		lda $24,x			lda DStack+0,x
.c51f	75 28		adc $28,x			adc DStack+4,x
.c521	95 28		sta $28,x			sta DStack+4,x
.c523	b5 25		lda $25,x			lda DStack+1,x
.c525	75 29		adc $29,x			adc DStack+5,x
.c527	95 29		sta $29,x			sta DStack+5,x
.c529	38		sec				sec		; u -= n
.c52a	b5 26		lda $26,x			lda DStack+2,x
.c52c	f5 24		sbc $24,x			sbc DStack+0,x
.c52e	95 26		sta $26,x			sta DStack+2,x
.c530	b5 27		lda $27,x			lda DStack+3,x
.c532	f5 25		sbc $25,x			sbc DStack+1,x
.c534	95 27		sta $27,x			sta DStack+3,x
.c536	e8		inx				inx		; Drop n
.c537	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c538					en = *	; remember here
>c516	20					.byte CL	;wh_CodeLength
.c538	60		rts				rts
.c539	4c 47 b4	jmp $b447	Throw_Stack_20: jmp Throw_Stack
>c53c	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=50369					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c541	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c542	40					.byte WordFlags	;wh_Flags
>c543	03					.byte 3	;wh_CodeLength
>c544	2d					  .byte LinkDisplacement
=$c545					XtPtr1 ::= *
=50369					WordListLink ::= Nt0 ; remember the nt of this word for later
.c545					Two_drop:
.c545	20 38 b4	jsr $b438			jsr underflow_2
.c548	e8		inx				inx
.c549	e8		inx				inx
.c54a	e8		inx				inx
.c54b	e8		inx				inx
=7					CL	.var *-XtPtr1
=$c54c					en = *	; remember here
>c543	07					.byte CL	;wh_CodeLength
.c54c	60		rts				rts
>c54d	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=50386					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c552	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c553	10					.byte WordFlags	;wh_Flags
>c554	03					.byte 3	;wh_CodeLength
>c555	11					  .byte LinkDisplacement
=$c556					XtPtr1 ::= *
=50386					WordListLink ::= Nt0 ; remember the nt of this word for later
.c556					Two_Swap:
.c556	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c558	b0 df		bcs $c539		bcs Throw_Stack_20
.c55a	86 14		stx $14				stx tmp1
.c55c	ca		dex				dex
.c55d	ca		dex				dex
.c55e	ca		dex				dex
.c55f	ca		dex				dex
.c560	e8		inx		_loop:		inx
.c561	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c563	b4 2b		ldy $2b,x			ldy DStack+7,x
.c565	95 2b		sta $2b,x			sta DStack+7,x
.c567	94 27		sty $27,x			sty DStack+3,x
.c569	e4 14		cpx $14				cpx tmp1
.c56b	90 f3		bcc $c560			bcc _loop
=23					CL	.var *-XtPtr1
=$c56d					en = *	; remember here
>c554	17					.byte CL	;wh_CodeLength
.c56d	60		rts				rts
>c56e	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=50419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c573	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c574	50					.byte WordFlags	;wh_Flags
>c575	03					.byte 3	;wh_CodeLength
>c576	21					  .byte LinkDisplacement
=$c577					XtPtr1 ::= *
=50419					WordListLink ::= Nt0 ; remember the nt of this word for later
.c577					Two_over:
.c577	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c579	b0 be		bcs $c539		bcs Throw_Stack_20
.c57b	a0 04		ldy #$04			ldy #4
.c57d	ca		dex		_loop:		dex
.c57e	b5 2c		lda $2c,x			lda DStack+8,x
.c580	95 24		sta $24,x			sta DStack+0,x
.c582	88		dey				dey
.c583	d0 f8		bne $c57d			bne _loop
=14					CL	.var *-XtPtr1
=$c585					en = *	; remember here
>c575	0e					.byte CL	;wh_CodeLength
.c585	60		rts				rts
>c586	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=50440					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c588	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c589	40					.byte WordFlags	;wh_Flags
>c58a	03					.byte 3	;wh_CodeLength
>c58b	15					  .byte LinkDisplacement
=$c58c					XtPtr1 ::= *
=50440					WordListLink ::= Nt0 ; remember the nt of this word for later
.c58c					Two_Store:
.c58c	20 3d b4	jsr $b43d			jsr underflow_3
.c58f	20 fb b3	jsr $b3fb			jsr PopYA
.c592	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c594	84 15		sty $15				sty tmp1+1
.c596	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c598	a0 00		ldy #$00			ldy #0
.c59a	91 14		sta ($14),y			sta (tmp1),y
.c59c	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c59e	c8		iny				iny
.c59f	91 14		sta ($14),y			sta (tmp1),y
.c5a1	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c5a3	c8		iny				iny
.c5a4	91 14		sta ($14),y			sta (tmp1),y
.c5a6	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c5a8	c8		iny				iny
.c5a9	91 14		sta ($14),y			sta (tmp1),y
.c5ab	e8		inx				inx		; 2Drop
.c5ac	e8		inx				inx
.c5ad	e8		inx				inx
.c5ae	e8		inx				inx
=35					CL	.var *-XtPtr1
=$c5af					en = *	; remember here
>c58a	23					.byte CL	;wh_CodeLength
.c5af	60		rts				rts
>c5b0	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=50482					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5b2	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c5b3	00					.byte WordFlags	;wh_Flags
>c5b4	03					.byte 3	;wh_CodeLength
>c5b5	2a					  .byte LinkDisplacement
=$c5b6					XtPtr1 ::= *
=50482					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5b6	20 fb b3	jsr $b3fb	Two_fetch:	jsr PopYA
.c5b9	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5bb	84 15		sty $15				sty tmp1+1
.c5bd	a0 00		ldy #$00			ldy #0
.c5bf					Two_Fetch_Tmp1Y:
.c5bf	ca		dex				dex
.c5c0	ca		dex				dex
.c5c1	ca		dex				dex
.c5c2	ca		dex				dex
.c5c3	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5c5	95 24		sta $24,x			sta DStack+0,x
.c5c7	c8		iny				iny		; copy next
.c5c8	b1 14		lda ($14),y			lda (tmp1),y
.c5ca	95 25		sta $25,x			sta DStack+1,x
.c5cc	c8		iny				iny		; copy next
.c5cd	b1 14		lda ($14),y			lda (tmp1),y
.c5cf	95 26		sta $26,x			sta DStack+2,x
.c5d1	c8		iny				iny		; copy next
.c5d2	b1 14		lda ($14),y			lda (tmp1),y
.c5d4	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-XtPtr1
=$c5d6					en = *	; remember here
>c5b4	20					.byte CL	;wh_CodeLength
.c5d6	60		rts				rts
>c5d7	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=50521					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5d9	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5da	10					.byte WordFlags	;wh_Flags
>c5db	03					.byte 3	;wh_CodeLength
>c5dc	27					  .byte LinkDisplacement
=$c5dd					XtPtr1 ::= *
=50521					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5dd	20 fb b3	jsr $b3fb	DFetch:		jsr PopYA
.c5e0	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5e2	84 15		sty $15				sty tmp1+1
.c5e4	ca		dex				dex
.c5e5	ca		dex				dex
.c5e6	ca		dex				dex
.c5e7	ca		dex				dex
.c5e8	a0 00		ldy #$00			ldy #0
.c5ea	b1 14		lda ($14),y			lda (tmp1),y
.c5ec	95 26		sta $26,x			sta DStack+2,x
.c5ee	c8		iny				iny
.c5ef	b1 14		lda ($14),y			lda (tmp1),y
.c5f1	95 27		sta $27,x			sta DStack+3,x
.c5f3	c8		iny				iny
.c5f4	b1 14		lda ($14),y			lda (tmp1),y
.c5f6	95 24		sta $24,x			sta DStack+0,x
.c5f8	c8		iny				iny
.c5f9	b1 14		lda ($14),y			lda (tmp1),y
.c5fb	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-XtPtr1
=$c5fd					en = *	; remember here
>c5db	20					.byte CL	;wh_CodeLength
.c5fd	60		rts				rts
>c5fe	44 21				L1:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=50560					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c600	22					.byte (("D!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c601	10					.byte WordFlags	;wh_Flags
>c602	03					.byte 3	;wh_CodeLength
>c603	27					  .byte LinkDisplacement
=$c604					XtPtr1 ::= *
=50560					WordListLink ::= Nt0 ; remember the nt of this word for later
.c604	20 fb b3	jsr $b3fb	DStore:		jsr PopYA
.c607	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c609	84 15		sty $15				sty tmp1+1
.c60b	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c60d	a0 00		ldy #$00			ldy #0
.c60f	91 14		sta ($14),y			sta (tmp1),y
.c611	b5 27		lda $27,x			lda DStack+3,x
.c613	c8		iny				iny
.c614	91 14		sta ($14),y			sta (tmp1),y
.c616	b5 24		lda $24,x			lda DStack+0,x
.c618	c8		iny				iny
.c619	91 14		sta ($14),y			sta (tmp1),y
.c61b	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c61d	c8		iny				iny
.c61e	91 14		sta ($14),y			sta (tmp1),y
.c620	4c 45 c5	jmp $c545			jmp Two_Drop	; also check underflow, return
=31					CL	.var *-XtPtr1
=$c623					en = *	; remember here
>c602	1f					.byte CL	;wh_CodeLength
>c623	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=50598					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c626	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c627	14					.byte WordFlags	;wh_Flags
>c628	03					.byte 3	;wh_CodeLength
>c629	26					  .byte LinkDisplacement
=$c62a					XtPtr1 ::= *
=50598					WordListLink ::= Nt0 ; remember the nt of this word for later
.c62a					Two_r_fetch:
.c62a	8a		txa				txa		; Y= return stack index
.c62b	ba		tsx				tsx
.c62c	86 14		stx $14				stx tmp1
.c62e	a4 14		ldy $14				ldy tmp1
.c630	aa		tax				tax
.c631	ca		dex				dex		; make room on the Data Stack
.c632	ca		dex				dex
.c633	ca		dex				dex
.c634	ca		dex				dex
.c635	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c638	95 24		sta $24,x			sta DStack+0,x
.c63a	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c63d	95 25		sta $25,x			sta DStack+1,x
.c63f	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c642	95 26		sta $26,x			sta DStack+2,x
.c644	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c647	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-XtPtr1
=$c649					en = *	; remember here
>c628	1f					.byte CL	;wh_CodeLength
.c649	60		rts				rts
>c64a	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=50637					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c64d	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c64e	34					.byte WordFlags	;wh_Flags
>c64f	03					.byte 3	;wh_CodeLength
>c650	27					  .byte LinkDisplacement
=$c651					XtPtr1 ::= *
=50637					WordListLink ::= Nt0 ; remember the nt of this word for later
.c651					Two_r_from:
.c651	68		pla				pla			; save the return address
.c652	85 14		sta $14				sta tmp1+0
.c654	68		pla				pla
.c655	85 15		sta $15				sta tmp1+1
.c657	ca		dex				dex			; make room on stack
.c658	ca		dex				dex
.c659	ca		dex				dex
.c65a	ca		dex				dex
.c65b	68		pla				pla			; LSB
.c65c	95 24		sta $24,x			sta DStack+0,x
.c65e	68		pla				pla			; MSB
.c65f	95 25		sta $25,x			sta DStack+1,x
.c661	68		pla				pla			; LSB
.c662	95 26		sta $26,x			sta DStack+2,x
.c664	68		pla				pla			; MSB
.c665	95 27		sta $27,x			sta DStack+3,x
.c667	a5 15		lda $15				lda tmp1+1		; restore return address
.c669	48		pha				pha
.c66a	a5 14		lda $14				lda tmp1+0
.c66c	48		pha				pha
=28					CL	.var *-XtPtr1
=$c66d					en = *	; remember here
>c64f	1c					.byte CL	;wh_CodeLength
.c66d	60		rts				rts
>c66e	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=50673					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c671	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c672	74					.byte WordFlags	;wh_Flags
>c673	03					.byte 3	;wh_CodeLength
>c674	24					  .byte LinkDisplacement
=$c675					XtPtr1 ::= *
=50673					WordListLink ::= Nt0 ; remember the nt of this word for later
.c675					Two_to_r:
.c675	68		pla				pla		; save the return address
.c676	85 14		sta $14				sta tmp1+0
.c678	68		pla				pla
.c679	85 15		sta $15				sta tmp1+1
.c67b	20 38 b4	jsr $b438			jsr underflow_2
.c67e	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c680	48		pha				pha
.c681	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c683	48		pha				pha
.c684	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c686	48		pha				pha
.c687	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c689	48		pha				pha
.c68a	e8		inx				inx
.c68b	e8		inx				inx
.c68c	e8		inx				inx
.c68d	e8		inx				inx
.c68e	a5 15		lda $15				lda tmp1+1	; restore return address
.c690	48		pha				pha
.c691	a5 14		lda $14				lda tmp1+0
.c693	48		pha				pha
=31					CL	.var *-XtPtr1
=$c694					en = *	; remember here
>c673	1f					.byte CL	;wh_CodeLength
.c694	60		rts				rts
>c695	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=50715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c69b	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c69c	40					.byte WordFlags	;wh_Flags
>c69d	03					.byte 3	;wh_CodeLength
>c69e	2a					  .byte LinkDisplacement
=$c69f					XtPtr1 ::= *
=50715					WordListLink ::= Nt0 ; remember the nt of this word for later
.c69f					Invert:
.c69f	20 24 b4	jsr $b424			jsr underflow_1
.c6a2	a9 ff		lda #$ff			lda #$FF
.c6a4	55 24		eor $24,x			eor DStack+0,x	; LSB
.c6a6	95 24		sta $24,x			sta DStack+0,x
.c6a8	a9 ff		lda #$ff			lda #$FF
.c6aa	55 25		eor $25,x			eor DStack+1,x	; MSB
.c6ac	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$c6ae					en = *	; remember here
>c69d	0f					.byte CL	;wh_CodeLength
.c6ae	60		rts				rts
>c6af	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=50741					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6b5	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6b6	40					.byte WordFlags	;wh_Flags
>c6b7	03					.byte 3	;wh_CodeLength
>c6b8	1a					  .byte LinkDisplacement
=$c6b9					XtPtr1 ::= *
=50741					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6b9					Negate:
.c6b9	20 24 b4	jsr $b424			jsr underflow_1
.c6bc	38		sec		Negate3:	sec
.c6bd	a9 00		lda #$00	Negate4:	lda #0
.c6bf	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6c1	95 24		sta $24,x			sta DStack+0,x
.c6c3	a9 00		lda #$00			lda #0
.c6c5	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6c7	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-XtPtr1
=$c6c9					en = *	; remember here
>c6b7	10					.byte CL	;wh_CodeLength
.c6c9	60		rts				rts
>c6ca	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=50765					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6cd	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6ce	10					.byte WordFlags	;wh_Flags
>c6cf	03					.byte 3	;wh_CodeLength
>c6d0	18					  .byte LinkDisplacement
=$c6d1					XtPtr1 ::= *
=50765					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6d1					Abs:
.c6d1	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6d3	b0 05		bcs $c6da		bcs Throw_Stack_17
.c6d5	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6d7	30 e3		bmi $c6bc			bmi Negate3
=8					CL	.var *-XtPtr1
=$c6d9					en = *	; remember here
>c6cf	08					.byte CL	;wh_CodeLength
.c6d9	60		rts				rts
.c6da	4c 47 b4	jmp $b447	Throw_Stack_17: jmp Throw_Stack
>c6dd	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=50788					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6e4	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6e5	10					.byte WordFlags	;wh_Flags
>c6e6	03					.byte 3	;wh_CodeLength
>c6e7	17					  .byte LinkDisplacement
=$c6e8					XtPtr1 ::= *
=50788					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6e8					DNegate:
.c6e8	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c6ea	b0 ee		bcs $c6da		bcs Throw_Stack_17
.c6ec	38		sec		DNegate3:	sec
.c6ed	a9 00		lda #$00			lda #0
.c6ef	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6f1	95 26		sta $26,x			sta DStack+2,x
.c6f3	a9 00		lda #$00			lda #0
.c6f5	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c6f7	95 27		sta $27,x			sta DStack+3,x
.c6f9	4c bd c6	jmp $c6bd			jmp Negate4
=20					CL	.var *-XtPtr1
=$c6fc					en = *	; remember here
>c6e6	14					.byte CL	;wh_CodeLength
>c6fc	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=50816					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c700	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c701	10					.byte WordFlags	;wh_Flags
>c702	03					.byte 3	;wh_CodeLength
>c703	1c					  .byte LinkDisplacement
=$c704					XtPtr1 ::= *
=50816					WordListLink ::= Nt0 ; remember the nt of this word for later
.c704					DAbs:
.c704	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c706	b0 d2		bcs $c6da		bcs Throw_Stack_17
.c708	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c70a	30 e0		bmi $c6ec			bmi DNegate3
=8					CL	.var *-XtPtr1
=$c70c					en = *	; remember here
>c702	08					.byte CL	;wh_CodeLength
.c70c	60		rts				rts
>c70d	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=50832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c710	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c711	10					.byte WordFlags	;wh_Flags
>c712	03					.byte 3	;wh_CodeLength
>c713	10					  .byte LinkDisplacement
=$c714					XtPtr1 ::= *
=50832					WordListLink ::= Nt0 ; remember the nt of this word for later
.c714	20 20 c7	jsr $c720	DNEq:		jsr DEqual
.c717	4c 0e c9	jmp $c90e			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c71a					en = *	; remember here
>c712	06					.byte CL	;wh_CodeLength
>c71a	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=50844					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c71c	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c71d	10					.byte WordFlags	;wh_Flags
>c71e	03					.byte 3	;wh_CodeLength
>c71f	0c					  .byte LinkDisplacement
=$c720					XtPtr1 ::= *
=50844					WordListLink ::= Nt0 ; remember the nt of this word for later
.c720	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c722	d5 26		cmp $26,x			cmp DStack+2,x
.c724	d0 4c		bne $c772			bne False3
.c726	b5 2b		lda $2b,x			lda DStack+7,x
.c728	d5 27		cmp $27,x			cmp DStack+3,x
.c72a	d0 46		bne $c772			bne False3
.c72c	b5 24		lda $24,x			lda DStack+0,x
.c72e	d5 28		cmp $28,x			cmp DStack+4,x
.c730	d0 40		bne $c772			bne False3
.c732	b5 25		lda $25,x			lda DStack+1,x
.c734	d5 29		cmp $29,x			cmp DStack+5,x
.c736	d0 3a		bne $c772			bne False3
.c738	f0 5c		beq $c796			beq True3
=26					CL	.var *-XtPtr1
=$c73a					en = *	; remember here
>c71e	1a					.byte CL	;wh_CodeLength
>c73a	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=50877					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c73d	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c73e	10					.byte WordFlags	;wh_Flags
>c73f	03					.byte 3	;wh_CodeLength
>c740	21					  .byte LinkDisplacement
=$c741					XtPtr1 ::= *
=50877					WordListLink ::= Nt0 ; remember the nt of this word for later
.c741	20 d7 c7	jsr $c7d7	DUGt:		jsr DGtSub
.c744	90 50		bcc $c796			bcc True3
.c746	b0 2a		bcs $c772			bcs False3
=7					CL	.var *-XtPtr1
=$c748					en = *	; remember here
>c73f	07					.byte CL	;wh_CodeLength
>c748	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=50892					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c74c	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c74d	10					.byte WordFlags	;wh_Flags
>c74e	03					.byte 3	;wh_CodeLength
>c74f	0f					  .byte LinkDisplacement
=$c750					XtPtr1 ::= *
=50892					WordListLink ::= Nt0 ; remember the nt of this word for later
.c750	20 d7 c7	jsr $c7d7	DULe:		jsr DGtSub
.c753	b0 41		bcs $c796			bcs True3
.c755	90 1b		bcc $c772			bcc False3
=7					CL	.var *-XtPtr1
=$c757					en = *	; remember here
>c74e	07					.byte CL	;wh_CodeLength
>c757	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=50907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c75b	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c75c	10					.byte WordFlags	;wh_Flags
>c75d	03					.byte 3	;wh_CodeLength
>c75e	0f					  .byte LinkDisplacement
=$c75f					XtPtr1 ::= *
=50907					WordListLink ::= Nt0 ; remember the nt of this word for later
.c75f	20 a7 c7	jsr $c7a7	DUGe:		jsr DLessSub
.c762	b0 32		bcs $c796			bcs True3
.c764	90 0c		bcc $c772			bcc False3
=7					CL	.var *-XtPtr1
=$c766					en = *	; remember here
>c75d	07					.byte CL	;wh_CodeLength
>c766	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=50921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c769	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c76a	10					.byte WordFlags	;wh_Flags
>c76b	03					.byte 3	;wh_CodeLength
>c76c	0e					  .byte LinkDisplacement
=$c76d					XtPtr1 ::= *
=50921					WordListLink ::= Nt0 ; remember the nt of this word for later
.c76d	20 a7 c7	jsr $c7a7	DULess:		jsr DLessSub
.c770	90 24		bcc $c796			bcc True3
.c772	a9 00		lda #$00	False3:		lda #0
.c774	f0 22		beq $c798			beq DReturn3
=9					CL	.var *-XtPtr1
=$c776					en = *	; remember here
>c76b	09					.byte CL	;wh_CodeLength
.c776	4c 47 b4	jmp $b447	Throw_Stack_09: jmp Throw_Stack
>c779	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=50940					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c77c	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c77d	10					.byte WordFlags	;wh_Flags
>c77e	03					.byte 3	;wh_CodeLength
>c77f	13					  .byte LinkDisplacement
=$c780					XtPtr1 ::= *
=50940					WordListLink ::= Nt0 ; remember the nt of this word for later
.c780	20 a7 c7	jsr $c7a7	DGEq:		jsr DLessSub
.c783	70 0f		bvs $c794			bvs DLess3
.c785	10 0f		bpl $c796	DGEq3:		bpl True3
.c787	30 e9		bmi $c772			bmi False3
=9					CL	.var *-XtPtr1
=$c789					en = *	; remember here
>c77e	09					.byte CL	;wh_CodeLength
>c789	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=50955					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c78b	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c78c	10					.byte WordFlags	;wh_Flags
>c78d	03					.byte 3	;wh_CodeLength
>c78e	0f					  .byte LinkDisplacement
=$c78f					XtPtr1 ::= *
=50955					WordListLink ::= Nt0 ; remember the nt of this word for later
.c78f	20 a7 c7	jsr $c7a7	DLess:		jsr DLessSub
.c792	70 f1		bvs $c785			bvs DGEq3
.c794	10 dc		bpl $c772	DLess3:		bpl False3
.c796	a9 ff		lda #$ff	True3:		lda #$ff
.c798					DReturn3:
.c798	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c79a	b0 da		bcs $c776		bcs Throw_Stack_09
.c79c	95 2a		sta $2a,x			sta DStack+6,x
.c79e	95 2b		sta $2b,x			sta DStack+7,x
.c7a0	e8		inx				inx			; preserve A, don't use ThreeDrop
.c7a1	e8		inx				inx
.c7a2	e8		inx				inx
.c7a3	e8		inx				inx
.c7a4	e8		inx				inx
.c7a5	e8		inx				inx
.c7a6	60		rts				rts
=24					CL	.var *-XtPtr1
=$c7a7					en = *	; remember here
>c78d	18					.byte CL	;wh_CodeLength
.c7a7	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c7a9	d5 26		cmp $26,x			cmp DStack+2,x
.c7ab	b5 2b		lda $2b,x			lda DStack+7,x
.c7ad	f5 27		sbc $27,x			sbc DStack+3,x
.c7af	b5 28		lda $28,x			lda DStack+4,x
.c7b1	f5 24		sbc $24,x			sbc DStack+0,x
.c7b3	b5 29		lda $29,x			lda DStack+5,x
.c7b5	f5 25		sbc $25,x			sbc DStack+1,x
.c7b7	60		rts				rts
>c7b8	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=51003					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7bb	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7bc	10					.byte WordFlags	;wh_Flags
>c7bd	03					.byte 3	;wh_CodeLength
>c7be	30					  .byte LinkDisplacement
=$c7bf					XtPtr1 ::= *
=51003					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7bf	20 d7 c7	jsr $c7d7	DLe:		jsr DGtSub
.c7c2	70 0f		bvs $c7d3			bvs DGt3
.c7c4	10 d0		bpl $c796	DLe3:		bpl True3
.c7c6	30 aa		bmi $c772			bmi False3
=9					CL	.var *-XtPtr1
=$c7c8					en = *	; remember here
>c7bd	09					.byte CL	;wh_CodeLength
>c7c8	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=51018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7ca	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7cb	10					.byte WordFlags	;wh_Flags
>c7cc	03					.byte 3	;wh_CodeLength
>c7cd	0f					  .byte LinkDisplacement
=$c7ce					XtPtr1 ::= *
=51018					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7ce	20 d7 c7	jsr $c7d7	DGt:		jsr DGtSub
.c7d1	70 f1		bvs $c7c4			bvs DLe3
.c7d3	30 c1		bmi $c796	DGt3:		bmi True3
.c7d5	10 9b		bpl $c772			bpl False3
=9					CL	.var *-XtPtr1
=$c7d7					en = *	; remember here
>c7cc	09					.byte CL	;wh_CodeLength
.c7d7	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7d9	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7db	b5 27		lda $27,x			lda DStack+3,x
.c7dd	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7df	b5 24		lda $24,x			lda DStack+0,x
.c7e1	f5 28		sbc $28,x			sbc DStack+4,x
.c7e3	b5 25		lda $25,x			lda DStack+1,x
.c7e5	f5 29		sbc $29,x			sbc DStack+5,x
.c7e7	60		rts				rts
>c7e8	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=51052					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7ec	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7ed	10					.byte WordFlags	;wh_Flags
>c7ee	03					.byte 3	;wh_CodeLength
>c7ef	22					  .byte LinkDisplacement
=$c7f0					XtPtr1 ::= *
=51052					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7f0	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c7f2	30 65		bmi $c859			bmi True1
.c7f4	10 24		bpl $c81a			bpl D0Equal
=6					CL	.var *-XtPtr1
=$c7f6					en = *	; remember here
>c7ee	06					.byte CL	;wh_CodeLength
>c7f6	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=51065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7f9	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c7fa	10					.byte WordFlags	;wh_Flags
>c7fb	03					.byte 3	;wh_CodeLength
>c7fc	0d					  .byte LinkDisplacement
=$c7fd					XtPtr1 ::= *
=51065					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7fd	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c7ff	10 0b		bpl $c80c			bpl D0Ne
.c801	4c 78 c8	jmp $c878			jmp False1
>c804	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=51080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c808	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c809	10					.byte WordFlags	;wh_Flags
>c80a	03					.byte 3	;wh_CodeLength
>c80b	0f					  .byte LinkDisplacement
=$c80c					XtPtr1 ::= *
=51080					WordListLink ::= Nt0 ; remember the nt of this word for later
.c80c	20 21 c8	jsr $c821	D0Ne:		jsr D0EqSub
.c80f	d0 48		bne $c859			bne True1
.c811	f0 65		beq $c878			beq False1
=7					CL	.var *-XtPtr1
=$c813					en = *	; remember here
>c80a	07					.byte CL	;wh_CodeLength
>c813	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=51094					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c816	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c817	10					.byte WordFlags	;wh_Flags
>c818	03					.byte 3	;wh_CodeLength
>c819	0e					  .byte LinkDisplacement
=$c81a					XtPtr1 ::= *
=51094					WordListLink ::= Nt0 ; remember the nt of this word for later
.c81a	20 21 c8	jsr $c821	D0Equal:	jsr D0EqSub
.c81d	d0 59		bne $c878			bne False1
.c81f	f0 38		beq $c859			beq True1
=7					CL	.var *-XtPtr1
=$c821					en = *	; remember here
>c818	07					.byte CL	;wh_CodeLength
.c821	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c823	15 27		ora $27,x			ora DStack+3,x
.c825	15 24		ora $24,x			ora DStack+0,x
.c827	15 25		ora $25,x			ora DStack+1,x
.c829	60		rts				rts
>c82a	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=51117					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c82d	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c82e	10					.byte WordFlags	;wh_Flags
>c82f	03					.byte 3	;wh_CodeLength
>c830	17					  .byte LinkDisplacement
=$c831					XtPtr1 ::= *
=51117					WordListLink ::= Nt0 ; remember the nt of this word for later
.c831	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c833	30 24		bmi $c859			bmi True1
.c835	10 41		bpl $c878			bpl False1
=6					CL	.var *-XtPtr1
=$c837					en = *	; remember here
>c82f	06					.byte CL	;wh_CodeLength
>c837	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=51131					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c83b	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c83c	10					.byte WordFlags	;wh_Flags
>c83d	03					.byte 3	;wh_CodeLength
>c83e	0e					  .byte LinkDisplacement
=$c83f					XtPtr1 ::= *
=51131					WordListLink ::= Nt0 ; remember the nt of this word for later
.c83f	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c841	10 16		bpl $c859			bpl True1
.c843	30 33		bmi $c878			bmi False1
=6					CL	.var *-XtPtr1
=$c845					en = *	; remember here
>c83d	06					.byte CL	;wh_CodeLength
.c845	4c 47 b4	jmp $b447	Throw_Stack_08: jmp Throw_Stack
>c848	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=51145					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c849	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c84a	10					.byte WordFlags	;wh_Flags
>c84b	03					.byte 3	;wh_CodeLength
>c84c	0e					  .byte LinkDisplacement
=$c84d					XtPtr1 ::= *
=51145					WordListLink ::= Nt0 ; remember the nt of this word for later
.c84d	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c84f	d5 26		cmp $26,x			cmp DStack+2,x
.c851	d0 25		bne $c878			bne False1
.c853	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c855	d5 27		cmp $27,x			cmp DStack+3,x
.c857	d0 1f		bne $c878			bne False1
.c859	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c85b					Return1:
.c85b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c85d	b0 e6		bcs $c845		bcs Throw_Stack_08
.c85f	e8		inx				inx		; Drop
.c860	e8		inx				inx
.c861	95 24		sta $24,x			sta DStack+0,x	; store f
.c863	95 25		sta $25,x			sta DStack+1,x
.c865	60		rts				rts
=25					CL	.var *-XtPtr1
=$c866					en = *	; remember here
>c84b	19					.byte CL	;wh_CodeLength
>c866	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=51176					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c868	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c869	10					.byte WordFlags	;wh_Flags
>c86a	03					.byte 3	;wh_CodeLength
>c86b	1f					  .byte LinkDisplacement
=$c86c					XtPtr1 ::= *
=51176					WordListLink ::= Nt0 ; remember the nt of this word for later
.c86c	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c86e	d5 26		cmp $26,x			cmp DStack+2,x
.c870	d0 e7		bne $c859			bne True1
.c872	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c874	d5 27		cmp $27,x			cmp DStack+3,x
.c876	d0 e1		bne $c859			bne True1
.c878	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c87a	f0 df		beq $c85b			beq Return1
=16					CL	.var *-XtPtr1
=$c87c					en = *	; remember here
>c86a	10					.byte CL	;wh_CodeLength
>c87c	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=51197					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c87d	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c87e	10					.byte WordFlags	;wh_Flags
>c87f	03					.byte 3	;wh_CodeLength
>c880	15					  .byte LinkDisplacement
=$c881					XtPtr1 ::= *
=51197					WordListLink ::= Nt0 ; remember the nt of this word for later
.c881	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c883	d5 24		cmp $24,x			cmp DStack+0,x
.c885	b5 27		lda $27,x			lda DStack+3,x
.c887	f5 25		sbc $25,x			sbc DStack+1,x
.c889	50 02		bvc $c88d			bvc _c
.c88b	49 80		eor #$80			eor #$80	; fix sign
.c88d	10 e9		bpl $c878	_c:		bpl False1
.c88f	30 c8		bmi $c859			bmi True1
=16					CL	.var *-XtPtr1
=$c891					en = *	; remember here
>c87f	10					.byte CL	;wh_CodeLength
>c891	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=51219					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c893	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c894	10					.byte WordFlags	;wh_Flags
>c895	03					.byte 3	;wh_CodeLength
>c896	16					  .byte LinkDisplacement
=$c897					XtPtr1 ::= *
=51219					WordListLink ::= Nt0 ; remember the nt of this word for later
.c897	20 81 c8	jsr $c881	Ge:		jsr Less_Than
.c89a	4c 0e c9	jmp $c90e			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c89d					en = *	; remember here
>c895	06					.byte CL	;wh_CodeLength
>c89d	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=51231					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c89f	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c8a0	10					.byte WordFlags	;wh_Flags
>c8a1	03					.byte 3	;wh_CodeLength
>c8a2	0c					  .byte LinkDisplacement
=$c8a3					XtPtr1 ::= *
=51231					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a3	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c8a5	d5 24		cmp $24,x			cmp DStack+0,x
.c8a7	b5 27		lda $27,x			lda DStack+3,x
.c8a9	f5 25		sbc $25,x			sbc DStack+1,x
.c8ab	b0 cb		bcs $c878			bcs False1
.c8ad	90 aa		bcc $c859			bcc True1
=12					CL	.var *-XtPtr1
=$c8af					en = *	; remember here
>c8a1	0c					.byte CL	;wh_CodeLength
>c8af	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=51249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8b1	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c8b2	10					.byte WordFlags	;wh_Flags
>c8b3	03					.byte 3	;wh_CodeLength
>c8b4	12					  .byte LinkDisplacement
=$c8b5					XtPtr1 ::= *
=51249					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8b5	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8b7	d5 26		cmp $26,x			cmp DStack+2,x
.c8b9	b5 25		lda $25,x			lda DStack+1,x
.c8bb	f5 27		sbc $27,x			sbc DStack+3,x
.c8bd	b0 b9		bcs $c878			bcs False1
.c8bf	90 98		bcc $c859			bcc True1
=12					CL	.var *-XtPtr1
=$c8c1					en = *	; remember here
>c8b3	0c					.byte CL	;wh_CodeLength
>c8c1	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=51266					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8c2	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8c3	10					.byte WordFlags	;wh_Flags
>c8c4	03					.byte 3	;wh_CodeLength
>c8c5	11					  .byte LinkDisplacement
=$c8c6					XtPtr1 ::= *
=51266					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8c6	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8c8	d5 26		cmp $26,x			cmp DStack+2,x
.c8ca	b5 25		lda $25,x			lda DStack+1,x
.c8cc	f5 27		sbc $27,x			sbc DStack+3,x
.c8ce	50 02		bvc $c8d2			bvc _c
.c8d0	49 80		eor #$80			eor #$80	; fix sign
.c8d2	10 a4		bpl $c878	_c:		bpl False1
.c8d4	4c 59 c8	jmp $c859			jmp True1
=17					CL	.var *-XtPtr1
=$c8d7					en = *	; remember here
>c8c4	11					.byte CL	;wh_CodeLength
>c8d7	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=51289					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8d9	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8da	10					.byte WordFlags	;wh_Flags
>c8db	03					.byte 3	;wh_CodeLength
>c8dc	17					  .byte LinkDisplacement
=$c8dd					XtPtr1 ::= *
=51289					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8dd	20 c6 c8	jsr $c8c6	Le:		jsr Greater_Than
.c8e0	4c 0e c9	jmp $c90e			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8e3					en = *	; remember here
>c8db	06					.byte CL	;wh_CodeLength
>c8e3	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=51302					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8e6	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8e7	10					.byte WordFlags	;wh_Flags
>c8e8	03					.byte 3	;wh_CodeLength
>c8e9	0d					  .byte LinkDisplacement
=$c8ea					XtPtr1 ::= *
=51302					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8ea	20 a3 c8	jsr $c8a3	UGe:		jsr U_Less_Than
.c8ed	4c 0e c9	jmp $c90e			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8f0					en = *	; remember here
>c8e8	06					.byte CL	;wh_CodeLength
>c8f0	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=51315					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8f3	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8f4	10					.byte WordFlags	;wh_Flags
>c8f5	03					.byte 3	;wh_CodeLength
>c8f6	0d					  .byte LinkDisplacement
=$c8f7					XtPtr1 ::= *
=51315					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8f7	20 b5 c8	jsr $c8b5	ULe:		jsr U_Greater_Than
.c8fa	4c 0e c9	jmp $c90e			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8fd					en = *	; remember here
>c8f5	06					.byte CL	;wh_CodeLength
.c8fd	4c 47 b4	jmp $b447	Throw_Stack_11: jmp Throw_Stack
>c900	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=51330					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c902	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c903	10					.byte WordFlags	;wh_Flags
>c904	03					.byte 3	;wh_CodeLength
>c905	0f					  .byte LinkDisplacement
=$c906					XtPtr1 ::= *
=51330					WordListLink ::= Nt0 ; remember the nt of this word for later
.c906	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c908	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c90a	d0 2b		bne $c937			bne False0
.c90c	f0 14		beq $c922			beq True0
=8					CL	.var *-XtPtr1
=$c90e					en = *	; remember here
>c904	08					.byte CL	;wh_CodeLength
.c90e					ZEqA:
.c90e	49 ff		eor #$ff			eor #$ff
.c910	95 24		sta $24,x			sta DStack+0,x
.c912	95 25		sta $25,x			sta DStack+1,x
.c914	60		rts				rts
>c915	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=51352					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c918	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c919	10					.byte WordFlags	;wh_Flags
>c91a	03					.byte 3	;wh_CodeLength
>c91b	16					  .byte LinkDisplacement
=$c91c					XtPtr1 ::= *
=51352					WordListLink ::= Nt0 ; remember the nt of this word for later
.c91c	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c91e	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c920	f0 15		beq $c937			beq False0
.c922	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c924	95 24		sta $24,x	Return0:	sta DStack+0,x
.c926	95 25		sta $25,x			sta DStack+1,x
.c928	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c92a	b0 35		bcs $c961		bcs Throw_Stack_05
.c92c	60		rts				rts
=17					CL	.var *-XtPtr1
=$c92d					en = *	; remember here
>c91a	11					.byte CL	;wh_CodeLength
>c92d	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=51375					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c92f	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c930	10					.byte WordFlags	;wh_Flags
>c931	03					.byte 3	;wh_CodeLength
>c932	17					  .byte LinkDisplacement
=$c933					XtPtr1 ::= *
=51375					WordListLink ::= Nt0 ; remember the nt of this word for later
.c933	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c935	10 e7		bpl $c91e			bpl ZNe3	; >= 0 ?
.c937	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c939	f0 e9		beq $c924			beq Return0
=8					CL	.var *-XtPtr1
=$c93b					en = *	; remember here
>c931	08					.byte CL	;wh_CodeLength
>c93b	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=51390					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c93e	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c93f	10					.byte WordFlags	;wh_Flags
>c940	03					.byte 3	;wh_CodeLength
>c941	0f					  .byte LinkDisplacement
=$c942					XtPtr1 ::= *
=51390					WordListLink ::= Nt0 ; remember the nt of this word for later
.c942	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c944	30 dc		bmi $c922			bmi True0
.c946	10 c0		bpl $c908			bpl ZEq3
=6					CL	.var *-XtPtr1
=$c948					en = *	; remember here
>c940	06					.byte CL	;wh_CodeLength
>c948	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=51403					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c94b	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c94c	10					.byte WordFlags	;wh_Flags
>c94d	03					.byte 3	;wh_CodeLength
>c94e	0d					  .byte LinkDisplacement
=$c94f					XtPtr1 ::= *
=51403					WordListLink ::= Nt0 ; remember the nt of this word for later
.c94f	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c951	10 cf		bpl $c922			bpl True0
.c953	30 e2		bmi $c937			bmi False0
=6					CL	.var *-XtPtr1
=$c955					en = *	; remember here
>c94d	06					.byte CL	;wh_CodeLength
>c955	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=51415					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c957	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c958	10					.byte WordFlags	;wh_Flags
>c959	03					.byte 3	;wh_CodeLength
>c95a	0c					  .byte LinkDisplacement
=$c95b					XtPtr1 ::= *
=51415					WordListLink ::= Nt0 ; remember the nt of this word for later
.c95b	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c95d	10 d8		bpl $c937			bpl False0
.c95f	30 c1		bmi $c922			bmi True0
=6					CL	.var *-XtPtr1
=$c961					en = *	; remember here
>c959	06					.byte CL	;wh_CodeLength
.c961	4c 47 b4	jmp $b447	Throw_Stack_05: jmp Throw_Stack
>c964	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=51431					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c967	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c968	50					.byte WordFlags	;wh_Flags
>c969	03					.byte 3	;wh_CodeLength
>c96a	10					  .byte LinkDisplacement
=$c96b					XtPtr1 ::= *
=51431					WordListLink ::= Nt0 ; remember the nt of this word for later
.c96b					Min:
.c96b	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c96d	b0 f2		bcs $c961		bcs Throw_Stack_05
.c96f	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c971	d5 26		cmp $26,x			cmp DStack+2,x
.c973	b5 25		lda $25,x			lda DStack+1,x
.c975	f5 27		sbc $27,x			sbc DStack+3,x
.c977	70 1a		bvs $c993			bvs Max_3	; if overflow, the sign is backwards
.c979	30 27		bmi $c9a2	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c97b	e8		inx				inx		; Drop n2
.c97c	e8		inx				inx
=18					CL	.var *-XtPtr1
=$c97d					en = *	; remember here
>c969	12					.byte CL	;wh_CodeLength
.c97d	60		rts				rts
>c97e	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=51457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c981	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c982	10					.byte WordFlags	;wh_Flags
>c983	03					.byte 3	;wh_CodeLength
>c984	1a					  .byte LinkDisplacement
=$c985					XtPtr1 ::= *
=51457					WordListLink ::= Nt0 ; remember the nt of this word for later
.c985					Max:
.c985	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c987	b0 d8		bcs $c961		bcs Throw_Stack_05
.c989	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c98b	d5 26		cmp $26,x			cmp DStack+2,x
.c98d	b5 25		lda $25,x			lda DStack+1,x
.c98f	f5 27		sbc $27,x			sbc DStack+3,x
.c991	70 e6		bvs $c979			bvs Min_3	; if overflow, the sign is backwards
.c993	10 0d		bpl $c9a2	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c995	e8		inx				inx		; Drop n2
.c996	e8		inx				inx
=18					CL	.var *-XtPtr1
=$c997					en = *	; remember here
>c983	12					.byte CL	;wh_CodeLength
.c997	60		rts				rts
>c998	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=51483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c99b	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c99c	40					.byte WordFlags	;wh_Flags
>c99d	03					.byte 3	;wh_CodeLength
>c99e	1a					  .byte LinkDisplacement
=$c99f					XtPtr1 ::= *
=51483					WordListLink ::= Nt0 ; remember the nt of this word for later
.c99f					Nip:
.c99f	20 38 b4	jsr $b438			jsr underflow_2
.c9a2	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c9a4	b4 25		ldy $25,x			ldy DStack+1,x
.c9a6	e8		inx				inx
.c9a7	e8		inx				inx
.c9a8	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c9aa	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$c9ac					en = *	; remember here
>c99d	0d					.byte CL	;wh_CodeLength
.c9ac	60		rts				rts
>c9ad	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=51505					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9b1	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c9b2	00					.byte WordFlags	;wh_Flags
>c9b3	03					.byte 3	;wh_CodeLength
>c9b4	16					  .byte LinkDisplacement
=$c9b5					XtPtr1 ::= *
=51505					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9b5					Pick:
.c9b5	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9b7	8a		txa				txa
.c9b8	75 24		adc $24,x			adc DStack+0,x
.c9ba	a8		tay				tay
.c9bb	b9 26 00	lda $0026,y			lda DStack+2,y
.c9be	95 24		sta $24,x			sta DStack+0,x
.c9c0	b9 27 00	lda $0027,y			lda DStack+3,y
.c9c3	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-XtPtr1
=$c9c5					en = *	; remember here
>c9b3	10					.byte CL	;wh_CodeLength
.c9c5	60		rts				rts
>c9c6	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=51530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9ca	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9cb	10					.byte WordFlags	;wh_Flags
>c9cc	03					.byte 3	;wh_CodeLength
>c9cd	19					  .byte LinkDisplacement
=$c9ce					XtPtr1 ::= *
=51530					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ce					Char:
.c9ce	20 a8 ba	jsr $baa8			jsr parse_name_check
.c9d1	e8		inx				inx		; Drop number of characters, leave addr
.c9d2	e8		inx				inx
.c9d3	4c 5e cd	jmp $cd5e			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-XtPtr1
=$c9d6					en = *	; remember here
>c9cc	08					.byte CL	;wh_CodeLength
>c9d6	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=51548					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9dc	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9dd	1c					.byte WordFlags	;wh_Flags
>c9de	03					.byte 3	;wh_CodeLength
>c9df	12					  .byte LinkDisplacement
=$c9e0					XtPtr1 ::= *
=51548					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9e0	20 ce c9	jsr $c9ce	Bracket_Char:	jsr Char
.c9e3	4c 6d b7	jmp $b76d			jmp Literal
=6					CL	.var *-XtPtr1
=$c9e6					en = *	; remember here
>c9de	06					.byte CL	;wh_CodeLength
>c9e6	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=51563					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9eb	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9ec	10					.byte WordFlags	;wh_Flags
>c9ed	03					.byte 3	;wh_CodeLength
>c9ee	0f					  .byte LinkDisplacement
=$c9ef					XtPtr1 ::= *
=51563					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ef	4c 69 ca	jmp $ca69	Char_Plus:	jmp One_Plus
=3					CL	.var *-XtPtr1
=$c9f2					en = *	; remember here
>c9ed	03					.byte CL	;wh_CodeLength
>c9f2	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=51575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9f7	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c9f8	20					.byte WordFlags	;wh_Flags
>c9f9	03					.byte 3	;wh_CodeLength
>c9fa	0c					  .byte LinkDisplacement
=$c9fb					XtPtr1 ::= *
=51575					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9fb					Chars:
=0					CL	.var *-XtPtr1
=$c9fb					en = *	; remember here
>c9f9	00					.byte CL	;wh_CodeLength
.c9fb	60		rts				rts
>c9fc	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=51585					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca01	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ca02	40					.byte WordFlags	;wh_Flags
>ca03	03					.byte 3	;wh_CodeLength
>ca04	0a					  .byte LinkDisplacement
=$ca05					XtPtr1 ::= *
=51585					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca05	20 24 b4	jsr $b424	Cells:		jsr underflow_1
.ca08	16 24		asl $24,x			asl DStack+0,x		; 2*
.ca0a	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-XtPtr1
=$ca0c					en = *	; remember here
>ca03	07					.byte CL	;wh_CodeLength
.ca0c	60		rts				rts
>ca0d	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=51602					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca12	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ca13	40					.byte WordFlags	;wh_Flags
>ca14	03					.byte 3	;wh_CodeLength
>ca15	11					  .byte LinkDisplacement
=$ca16					XtPtr1 ::= *
=51602					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca16	20 24 b4	jsr $b424	Cell_Plus:	jsr underflow_1
.ca19	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca1b					Plus_A:
.ca1b	18		clc				clc
.ca1c	75 24		adc $24,x			adc DStack+0,x
.ca1e	95 24		sta $24,x			sta DStack+0,x
.ca20	90 02		bcc $ca24			bcc +
.ca22	f6 25		inc $25,x			inc DStack+1,x
.ca24					+
=14					CL	.var *-XtPtr1
=$ca24					en = *	; remember here
>ca14	0e					.byte CL	;wh_CodeLength
.ca24	60		rts				rts
.ca25					Nos_Plus_A:
.ca25	18		clc				clc
.ca26	75 26		adc $26,x			adc DStack+2,x
.ca28	95 26		sta $26,x			sta DStack+2,x
.ca2a	90 02		bcc $ca2e			bcc +
.ca2c	f6 27		inc $27,x			inc DStack+3,x
.ca2e	60		rts		+		rts
>ca2f	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=51635					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca33	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca34	10					.byte WordFlags	;wh_Flags
>ca35	03					.byte 3	;wh_CodeLength
>ca36	21					  .byte LinkDisplacement
=$ca37					XtPtr1 ::= *
=51635					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca37	a5 00		lda $00		Here:		lda cp+0
.ca39	a4 01		ldy $01				ldy cp+1
.ca3b	4c b8 b7	jmp $b7b8			jmp PushYA
=7					CL	.var *-XtPtr1
=$ca3e					en = *	; remember here
>ca35	07					.byte CL	;wh_CodeLength
>ca3e	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=51648					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca40	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca41	40					.byte WordFlags	;wh_Flags
>ca42	03					.byte 3	;wh_CodeLength
>ca43	0d					  .byte LinkDisplacement
=$ca44					XtPtr1 ::= *
=51648					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca44	20 24 b4	jsr $b424	One_Minus:	jsr underflow_1
.ca47					One_Minus_NoUf:
.ca47	b5 24		lda $24,x			lda DStack+0,x
.ca49	d0 02		bne $ca4d			bne +
.ca4b	d6 25		dec $25,x			dec DStack+1,x
.ca4d	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-XtPtr1
=$ca4f					en = *	; remember here
>ca42	0b					.byte CL	;wh_CodeLength
.ca4f	60		rts				rts
.ca50					NOS_One_Minus:
.ca50	b5 26		lda $26,x			lda DStack+2,x
.ca52	d0 02		bne $ca56			bne +
.ca54	d6 27		dec $27,x			dec DStack+3,x
.ca56	d6 26		dec $26,x	+		dec DStack+2,x
.ca58	60		rts				rts
.ca59					Minus_A:
.ca59	18		clc				clc
.ca5a	75 24		adc $24,x			adc DStack+0,x
.ca5c	95 24		sta $24,x			sta DStack+0,x
.ca5e	b0 02		bcs $ca62			bcs +
.ca60	d6 25		dec $25,x			dec DStack+1,x
.ca62	60		rts		+		rts
>ca63	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=51685					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca65	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca66	40					.byte WordFlags	;wh_Flags
>ca67	03					.byte 3	;wh_CodeLength
>ca68	25					  .byte LinkDisplacement
=$ca69					XtPtr1 ::= *
=51685					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca69	20 24 b4	jsr $b424	One_Plus:	jsr underflow_1
.ca6c	f6 24		inc $24,x			inc DStack+0,x
.ca6e	d0 02		bne $ca72			bne +
.ca70	f6 25		inc $25,x			inc DStack+1,x
.ca72					+
=9					CL	.var *-XtPtr1
=$ca72					en = *	; remember here
>ca67	09					.byte CL	;wh_CodeLength
.ca72	60		rts				rts
.ca73					NOS_One_Plus:
.ca73	f6 26		inc $26,x			inc DStack+2,x
.ca75	d0 02		bne $ca79			bne +
.ca77	f6 27		inc $27,x			inc DStack+3,x
.ca79	60		rts		+		rts
>ca7a	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=51709					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca7d	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca7e	00					.byte WordFlags	;wh_Flags
>ca7f	03					.byte 3	;wh_CodeLength
>ca80	18					  .byte LinkDisplacement
=$ca81					XtPtr1 ::= *
=51709					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca81	20 fb b3	jsr $b3fb	UMPlus:		jsr PopYA
.ca84	18		clc				clc		; add n to d1.lo
.ca85	75 26		adc $26,x			adc DStack+2,x
.ca87	95 26		sta $26,x			sta DStack+2,x
.ca89	98		tya				tya
.ca8a	75 27		adc $27,x			adc DStack+3,x
.ca8c	95 27		sta $27,x			sta DStack+3,x
.ca8e	90 06		bcc $ca96			bcc +		; propagate carry thru d1.hi
.ca90	f6 24		inc $24,x			inc DStack+0,x
.ca92	d0 02		bne $ca96			bne +
.ca94	f6 25		inc $25,x			inc DStack+1,x
.ca96					+
=21					CL	.var *-XtPtr1
=$ca96					en = *	; remember here
>ca7f	15					.byte CL	;wh_CodeLength
.ca96	60		rts				rts
>ca97	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=51737					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca99	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ca9a	10					.byte WordFlags	;wh_Flags
>ca9b	03					.byte 3	;wh_CodeLength
>ca9c	1c					  .byte LinkDisplacement
=$ca9d					XtPtr1 ::= *
=51737					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca9d	20 81 ca	jsr $ca81	MPlus:		jsr UMPlus
.caa0	98		tya				tya		; if n negative
.caa1	30 a4		bmi $ca47			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-XtPtr1
=$caa3					en = *	; remember here
>ca9b	06					.byte CL	;wh_CodeLength
.caa3	60		rts				rts
>caa4	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=51751					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caa7	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>caa8	40					.byte WordFlags	;wh_Flags
>caa9	03					.byte 3	;wh_CodeLength
>caaa	0e					  .byte LinkDisplacement
=$caab					XtPtr1 ::= *
=51751					WordListLink ::= Nt0 ; remember the nt of this word for later
.caab	20 38 b4	jsr $b438	D2Star:		jsr underflow_2
.caae	16 26		asl $26,x			asl DStack+2,x
.cab0	36 27		rol $27,x			rol DStack+3,x
.cab2	36 24		rol $24,x			rol DStack+0,x
.cab4	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-XtPtr1
=$cab6					en = *	; remember here
>caa9	0b					.byte CL	;wh_CodeLength
.cab6	60		rts				rts
>cab7	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=51770					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caba	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cabb	40					.byte WordFlags	;wh_Flags
>cabc	03					.byte 3	;wh_CodeLength
>cabd	13					  .byte LinkDisplacement
=$cabe					XtPtr1 ::= *
=51770					WordListLink ::= Nt0 ; remember the nt of this word for later
.cabe	20 38 b4	jsr $b438	D2Slash:	jsr underflow_2
.cac1	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cac3	0a		asl a				asl a
.cac4	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cac6	76 24		ror $24,x			ror DStack+0,x
.cac8	76 27		ror $27,x			ror DStack+3,x
.caca	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-XtPtr1
=$cacc					en = *	; remember here
>cabc	0e					.byte CL	;wh_CodeLength
.cacc	60		rts				rts
>cacd	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=51793					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cad1	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cad2	50					.byte WordFlags	;wh_Flags
>cad3	03					.byte 3	;wh_CodeLength
>cad4	17					  .byte LinkDisplacement
=$cad5					XtPtr1 ::= *
=51793					WordListLink ::= Nt0 ; remember the nt of this word for later
.cad5	20 38 b4	jsr $b438	DU2Slash:	jsr underflow_2
.cad8	18		clc				clc
.cad9	90 e9		bcc $cac4			bcc D2SlashU
=6					CL	.var *-XtPtr1
=$cadb					en = *	; remember here
>cad3	06					.byte CL	;wh_CodeLength
>cadb	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=51805					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cadd	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cade	40					.byte WordFlags	;wh_Flags
>cadf	03					.byte 3	;wh_CodeLength
>cae0	0c					  .byte LinkDisplacement
=$cae1					XtPtr1 ::= *
=51805					WordListLink ::= Nt0 ; remember the nt of this word for later
.cae1					Two_Star:
.cae1	20 24 b4	jsr $b424			jsr underflow_1
.cae4	16 24		asl $24,x			asl DStack+0,x
.cae6	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-XtPtr1
=$cae8					en = *	; remember here
>cadf	07					.byte CL	;wh_CodeLength
.cae8	60		rts				rts
>cae9	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=51819					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caeb	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>caec	40					.byte WordFlags	;wh_Flags
>caed	03					.byte 3	;wh_CodeLength
>caee	0e					  .byte LinkDisplacement
=$caef					XtPtr1 ::= *
=51819					WordListLink ::= Nt0 ; remember the nt of this word for later
.caef					Two_Slash:
.caef	20 24 b4	jsr $b424			jsr underflow_1
.caf2	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.caf4	0a		asl a				asl
.caf5	76 25		ror $25,x			ror DStack+1,x
.caf7	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-XtPtr1
=$caf9					en = *	; remember here
>caed	0a					.byte CL	;wh_CodeLength
.caf9	60		rts				rts
>cafa	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=51837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cafd	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cafe	40					.byte WordFlags	;wh_Flags
>caff	03					.byte 3	;wh_CodeLength
>cb00	12					  .byte LinkDisplacement
=$cb01					XtPtr1 ::= *
=51837					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb01					UTwo_Slash:
.cb01	20 24 b4	jsr $b424			jsr underflow_1
.cb04	56 25		lsr $25,x			lsr DStack+1,x
.cb06	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-XtPtr1
=$cb08					en = *	; remember here
>caff	07					.byte CL	;wh_CodeLength
.cb08	60		rts				rts
>cb09	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=51856					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb10	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cb11	00					.byte WordFlags	;wh_Flags
>cb12	03					.byte 3	;wh_CodeLength
>cb13	13					  .byte LinkDisplacement
=$cb14					XtPtr1 ::= *
=51856					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb14	20 e0 b3	jsr $b3e0	DRShift:	jsr PopA	; pop u
.cb17	a8		tay		DRShiftA:	tay
.cb18	f0 0e		beq $cb28			beq _9
.cb1a	b5 25		lda $25,x			lda DStack+1,x
.cb1c	4a		lsr a		_2:		lsr a
.cb1d	76 24		ror $24,x			ror DStack+0,x
.cb1f	76 27		ror $27,x			ror DStack+3,x
.cb21	76 26		ror $26,x			ror DStack+2,x
.cb23	88		dey				dey
.cb24	d0 f6		bne $cb1c			bne _2
.cb26	95 25		sta $25,x			sta DStack+1,x
.cb28					_9:
=20					CL	.var *-XtPtr1
=$cb28					en = *	; remember here
>cb12	14					.byte CL	;wh_CodeLength
.cb28	60		rts				rts
>cb29	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=51887					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb2f	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb30	00					.byte WordFlags	;wh_Flags
>cb31	03					.byte 3	;wh_CodeLength
>cb32	1f					  .byte LinkDisplacement
=$cb33					XtPtr1 ::= *
=51887					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb33	20 e9 b3	jsr $b3e9	RShift:		jsr PopA2	; pop u, check for 2 params
.cb36	a8		tay		RShift_A:	tay		; get shift count
.cb37	f0 0a		beq $cb43			beq _done
.cb39	b5 25		lda $25,x			lda DStack+1,x
.cb3b	4a		lsr a		_loop:		lsr a
.cb3c	76 24		ror $24,x			ror DStack+0,x
.cb3e	88		dey				dey
.cb3f	d0 fa		bne $cb3b			bne _loop
.cb41	95 25		sta $25,x			sta DStack+1,x
.cb43					_done:
=16					CL	.var *-XtPtr1
=$cb43					en = *	; remember here
>cb31	10					.byte CL	;wh_CodeLength
.cb43	60		rts				rts
>cb44	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=51914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb4a	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb4b	00					.byte WordFlags	;wh_Flags
>cb4c	03					.byte 3	;wh_CodeLength
>cb4d	1b					  .byte LinkDisplacement
=$cb4e					XtPtr1 ::= *
=51914					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb4e	20 e9 b3	jsr $b3e9	LShift:		jsr PopA2	; pop u, check for 2 params
.cb51	a8		tay		LShift_A:	tay		; get shift count
.cb52	f0 0a		beq $cb5e			beq _done
.cb54	b5 25		lda $25,x			lda DStack+1,x
.cb56	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb58	2a		rol a				rol a
.cb59	88		dey				dey
.cb5a	d0 fa		bne $cb56			bne _loop
.cb5c	95 25		sta $25,x			sta DStack+1,x
.cb5e					_done:
=16					CL	.var *-XtPtr1
=$cb5e					en = *	; remember here
>cb4c	10					.byte CL	;wh_CodeLength
.cb5e	60		rts				rts
>cb5f	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=51938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb62	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb63	40					.byte WordFlags	;wh_Flags
>cb64	03					.byte 3	;wh_CodeLength
>cb65	18					  .byte LinkDisplacement
=$cb66					XtPtr1 ::= *
=51938					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb66					And2:
.cb66	20 38 b4	jsr $b438			jsr underflow_2
.cb69	b5 24		lda $24,x			lda DStack+0,x
.cb6b	35 26		and $26,x			and DStack+2,x
.cb6d	95 26		sta $26,x			sta DStack+2,x
.cb6f	b5 25		lda $25,x			lda DStack+1,x
.cb71	35 27		and $27,x			and DStack+3,x
.cb73	95 27		sta $27,x			sta DStack+3,x
.cb75	e8		inx				inx		; Drop n2
.cb76	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cb77					en = *	; remember here
>cb64	11					.byte CL	;wh_CodeLength
.cb77	60		rts				rts
>cb78	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=51962					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb7a	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb7b	40					.byte WordFlags	;wh_Flags
>cb7c	03					.byte 3	;wh_CodeLength
>cb7d	18					  .byte LinkDisplacement
=$cb7e					XtPtr1 ::= *
=51962					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb7e					Or:
.cb7e	20 38 b4	jsr $b438			jsr underflow_2
.cb81	b5 24		lda $24,x			lda DStack+0,x
.cb83	15 26		ora $26,x			ora DStack+2,x
.cb85	95 26		sta $26,x			sta DStack+2,x
.cb87	b5 25		lda $25,x			lda DStack+1,x
.cb89	15 27		ora $27,x			ora DStack+3,x
.cb8b	95 27		sta $27,x			sta DStack+3,x
.cb8d	e8		inx				inx		; Drop n2
.cb8e	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cb8f					en = *	; remember here
>cb7c	11					.byte CL	;wh_CodeLength
.cb8f	60		rts				rts
>cb90	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=51987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb93	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cb94	40					.byte WordFlags	;wh_Flags
>cb95	03					.byte 3	;wh_CodeLength
>cb96	19					  .byte LinkDisplacement
=$cb97					XtPtr1 ::= *
=51987					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb97					Xor:
.cb97	20 38 b4	jsr $b438			jsr underflow_2
.cb9a	b5 24		lda $24,x			lda DStack+0,x
.cb9c	55 26		eor $26,x			eor DStack+2,x
.cb9e	95 26		sta $26,x			sta DStack+2,x
.cba0	b5 25		lda $25,x			lda DStack+1,x
.cba2	55 27		eor $27,x			eor DStack+3,x
.cba4	95 27		sta $27,x			sta DStack+3,x
.cba6	e8		inx				inx		; Drop n2
.cba7	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cba8					en = *	; remember here
>cb95	11					.byte CL	;wh_CodeLength
.cba8	60		rts				rts
>cba9	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=52010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbaa	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cbab	40					.byte WordFlags	;wh_Flags
>cbac	03					.byte 3	;wh_CodeLength
>cbad	17					  .byte LinkDisplacement
=$cbae					XtPtr1 ::= *
=52010					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbae					Plus:
.cbae	20 38 b4	jsr $b438			jsr underflow_2
.cbb1	18		clc				clc
.cbb2	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cbb4	75 26		adc $26,x			adc DStack+2,x
.cbb6	95 26		sta $26,x			sta DStack+2,x
.cbb8	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cbba	75 27		adc $27,x			adc DStack+3,x
.cbbc	95 27		sta $27,x			sta DStack+3,x
.cbbe	e8		inx				inx
.cbbf	e8		inx				inx
=18					CL	.var *-XtPtr1
=$cbc0					en = *	; remember here
>cbac	12					.byte CL	;wh_CodeLength
.cbc0	60		rts				rts
>cbc1	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=52034					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbc2	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbc3	40					.byte WordFlags	;wh_Flags
>cbc4	03					.byte 3	;wh_CodeLength
>cbc5	18					  .byte LinkDisplacement
=$cbc6					XtPtr1 ::= *
=52034					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbc6					Minus:
.cbc6	20 38 b4	jsr $b438			jsr underflow_2
.cbc9	38		sec				sec
.cbca	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbcc	f5 24		sbc $24,x			sbc DStack+0,x
.cbce	95 26		sta $26,x			sta DStack+2,x
.cbd0	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbd2	f5 25		sbc $25,x			sbc DStack+1,x
.cbd4	95 27		sta $27,x			sta DStack+3,x
.cbd6	e8		inx				inx		; Drop n2
.cbd7	e8		inx				inx
=18					CL	.var *-XtPtr1
=$cbd8					en = *	; remember here
>cbc4	12					.byte CL	;wh_CodeLength
.cbd8	60		rts				rts
>cbd9	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=52058					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbda	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbdb	10					.byte WordFlags	;wh_Flags
>cbdc	03					.byte 3	;wh_CodeLength
>cbdd	18					  .byte LinkDisplacement
=$cbde					XtPtr1 ::= *
=52058					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbde	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbe0	08		php				php
.cbe1	20 d1 c6	jsr $c6d1			jsr Abs			; ( u )
.cbe4	20 f5 b7	jsr $b7f5			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbe7	4c f6 cb	jmp $cbf6			jmp fmt_d3
=12					CL	.var *-XtPtr1
=$cbea					en = *	; remember here
>cbdc	0c					.byte CL	;wh_CodeLength
>cbea	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=52076					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbec	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbed	10					.byte WordFlags	;wh_Flags
>cbee	03					.byte 3	;wh_CodeLength
>cbef	12					  .byte LinkDisplacement
=$cbf0					XtPtr1 ::= *
=52076					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbf0	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cbf2	08		php				php
.cbf3	20 04 c7	jsr $c704			jsr DAbs
.cbf6	20 e9 ab	jsr $abe9	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cbf9	20 58 ac	jsr $ac58			jsr Number_sign_s	; ( ud )	do all digits
.cbfc	28		plp				plp			; ( ud )	do sign
.cbfd	20 72 ac	jsr $ac72			jsr Sign_P		; ( ud )
.cc00	20 f5 ab	jsr $abf5			jsr Number_sign_greater	; ( addr u )	end formatting
.cc03	20 e9 cd	jsr $cde9			jsr Type
.cc06	4c dd cd	jmp $cddd			jmp Space
=25					CL	.var *-XtPtr1
=$cc09					en = *	; remember here
>cbee	19					.byte CL	;wh_CodeLength
>cc09	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=52107					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc0b	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc0c	50					.byte WordFlags	;wh_Flags
>cc0d	03					.byte 3	;wh_CodeLength
>cc0e	1f					  .byte LinkDisplacement
=$cc0f					XtPtr1 ::= *
=52107					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc0f	20 24 b4	jsr $b424	U_Dot:		jsr underflow_1
.cc12	20 28 cc	jsr $cc28			jsr print_u
.cc15	4c dd cd	jmp $cddd			jmp Space
=9					CL	.var *-XtPtr1
=$cc18					en = *	; remember here
>cc0d	09					.byte CL	;wh_CodeLength
>cc18	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=52123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc1b	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc1c	50					.byte WordFlags	;wh_Flags
>cc1d	03					.byte 3	;wh_CodeLength
>cc1e	10					  .byte LinkDisplacement
=$cc1f					XtPtr1 ::= *
=52123					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc1f	20 38 b4	jsr $b438	UD_Dot:		jsr underflow_2 ; double number
.cc22	20 2b cc	jsr $cc2b			jsr print_ud
.cc25	4c dd cd	jmp $cddd			jmp Space
=9					CL	.var *-XtPtr1
=$cc28					en = *	; remember here
>cc1d	09					.byte CL	;wh_CodeLength
.cc28					print_u:
.cc28	20 f5 b7	jsr $b7f5			jsr Zero			; convert to ud
.cc2b					print_ud:
.cc2b	20 e9 ab	jsr $abe9			jsr Less_Number_Sign		; <#	start formatting
.cc2e	20 58 ac	jsr $ac58			jsr Number_sign_s		; #S	do all digits
.cc31	20 f5 ab	jsr $abf5			jsr Number_sign_greater		; #>	end formatting
.cc34	4c e9 cd	jmp $cde9			jmp Type
>cc37	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=52154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc3a	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc3b	10					.byte WordFlags	;wh_Flags
>cc3c	03					.byte 3	;wh_CodeLength
>cc3d	1f					  .byte LinkDisplacement
=$cc3e					XtPtr1 ::= *
=52154					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc3e	20 e0 b3	jsr $b3e0	U_Dot_R:	jsr PopA		; save field width
.cc41	48		pha		U_Dot_R_A:	pha
.cc42	20 f5 b7	jsr $b7f5			jsr Zero		; u>d  cvt u to ud
.cc45	4c 54 cc	jmp $cc54			jmp fmt_udr3
=10					CL	.var *-XtPtr1
=$cc48					en = *	; remember here
>cc3c	0a					.byte CL	;wh_CodeLength
>cc48	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=52172					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc4c	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc4d	10					.byte WordFlags	;wh_Flags
>cc4e	03					.byte 3	;wh_CodeLength
>cc4f	12					  .byte LinkDisplacement
=$cc50					XtPtr1 ::= *
=52172					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc50	20 e0 b3	jsr $b3e0	UD_Dot_R:	jsr PopA			; save field width
.cc53	48		pha		UD_Dot_R_A:	pha
.cc54	20 e9 ab	jsr $abe9	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc57	20 58 ac	jsr $ac58			jsr Number_sign_s		; do all digits
.cc5a	20 f5 ab	jsr $abf5	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc5d	68		pla				pla				; recover field width
.cc5e	38		sec				sec				; do leading spaces
.cc5f	f5 24		sbc $24,x			sbc DStack+0,x
.cc61	90 06		bcc $cc69			bcc +
.cc63	20 e7 b7	jsr $b7e7			jsr PushZA
.cc66	20 a2 c4	jsr $c4a2			jsr Spaces
.cc69	4c e9 cd	jmp $cde9	+		jmp Type			; type formatted
=28					CL	.var *-XtPtr1
=$cc6c					en = *	; remember here
>cc4e	1c					.byte CL	;wh_CodeLength
>cc6c	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=52206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc6e	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc6f	10					.byte WordFlags	;wh_Flags
>cc70	03					.byte 3	;wh_CodeLength
>cc71	22					  .byte LinkDisplacement
=$cc72					XtPtr1 ::= *
=52206					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc72	20 e0 b3	jsr $b3e0	Dot_R:		jsr PopA		; save field width
.cc75	48		pha		Dot_R_A:	pha
.cc76	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc78	08		php				php
.cc79	20 d1 c6	jsr $c6d1			jsr Abs
.cc7c	20 f5 b7	jsr $b7f5			jsr Zero		; u>d  cvt u to ud
.cc7f	4c 93 cc	jmp $cc93			jmp fmt_dr3
=16					CL	.var *-XtPtr1
=$cc82					en = *	; remember here
>cc70	10					.byte CL	;wh_CodeLength
>cc82	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=52229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc85	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc86	10					.byte WordFlags	;wh_Flags
>cc87	03					.byte 3	;wh_CodeLength
>cc88	17					  .byte LinkDisplacement
=$cc89					XtPtr1 ::= *
=52229					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc89	20 e0 b3	jsr $b3e0	D_Dot_R:	jsr PopA		; save field width
.cc8c	48		pha		D_Dot_R_A:	pha
.cc8d	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc8f	08		php				php
.cc90	20 04 c7	jsr $c704			jsr DAbs
.cc93	20 e9 ab	jsr $abe9	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc96	20 58 ac	jsr $ac58			jsr Number_sign_s	; do all digits
.cc99	28		plp				plp			; do the sign
.cc9a	20 72 ac	jsr $ac72			jsr Sign_P
.cc9d	4c 5a cc	jmp $cc5a			jmp fmt_r
=23					CL	.var *-XtPtr1
=$cca0					en = *	; remember here
>cc87	17					.byte CL	;wh_CodeLength
>cca0	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=52257					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cca1	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cca2	10					.byte WordFlags	;wh_Flags
>cca3	03					.byte 3	;wh_CodeLength
>cca4	1c					  .byte LinkDisplacement
=$cca5					XtPtr1 ::= *
=52257					WordListLink ::= Nt0 ; remember the nt of this word for later
.cca5					Question:
.cca5	20 a9 ce	jsr $cea9			jsr Fetch
.cca8	4c de cb	jmp $cbde			jmp Dot
=6					CL	.var *-XtPtr1
=$ccab					en = *	; remember here
>cca3	06					.byte CL	;wh_CodeLength
>ccab	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=52271					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccaf	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ccb0	40					.byte WordFlags	;wh_Flags
>ccb1	03					.byte 3	;wh_CodeLength
>ccb2	0e					  .byte LinkDisplacement
=$ccb3					XtPtr1 ::= *
=52271					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccb3					Two_Dup:
.ccb3	20 38 b4	jsr $b438			jsr underflow_2
.ccb6	ca		dex				dex
.ccb7	ca		dex				dex
.ccb8	ca		dex				dex
.ccb9	ca		dex				dex
.ccba	b5 28		lda $28,x			lda DStack+4,x	; TOS
.ccbc	95 24		sta $24,x			sta DStack+0,x
.ccbe	b5 29		lda $29,x			lda DStack+5,x
.ccc0	95 25		sta $25,x			sta DStack+1,x
.ccc2	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.ccc4	95 26		sta $26,x			sta DStack+2,x
.ccc6	b5 2b		lda $2b,x			lda DStack+7,x
.ccc8	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-XtPtr1
=$ccca					en = *	; remember here
>ccb1	17					.byte CL	;wh_CodeLength
.ccca	60		rts				rts
>cccb	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=52303					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cccf	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccd0	40					.byte WordFlags	;wh_Flags
>ccd1	03					.byte 3	;wh_CodeLength
>ccd2	20					  .byte LinkDisplacement
=$ccd3					XtPtr1 ::= *
=52303					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccd3					Tuck:
.ccd3	20 38 b4	jsr $b438			jsr underflow_2
.ccd6	ca		dex				dex
.ccd7	ca		dex				dex
.ccd8	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.ccda	b5 26		lda $26,x			lda DStack+2,x
.ccdc	95 28		sta $28,x			sta DStack+4,x
.ccde	94 26		sty $26,x			sty DStack+2,x
.cce0	95 24		sta $24,x			sta DStack+0,x
.cce2	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cce4	b5 27		lda $27,x			lda DStack+3,x
.cce6	95 29		sta $29,x			sta DStack+5,x
.cce8	94 27		sty $27,x			sty DStack+3,x
.ccea	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-XtPtr1
=$ccec					en = *	; remember here
>ccd1	19					.byte CL	;wh_CodeLength
.ccec	60		rts				rts
>cced	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=52335					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccef	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccf0	10					.byte WordFlags	;wh_Flags
>ccf1	03					.byte 3	;wh_CodeLength
>ccf2	20					  .byte LinkDisplacement
=$ccf3					XtPtr1 ::= *
=52335					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccf3	20 e0 b3	jsr $b3e0	C_Comma:	jsr PopA	; pop c, with underflow check
.ccf6					C_Comma_A:
.ccf6	ca		dex				dex
.ccf7	94 24		sty $24,x			sty DStack+0,x	; save Y
.ccf9	a0 00		ldy #$00			ldy #0		; store A
.ccfb	91 00		sta ($00),y			sta (cp),y
.ccfd	e6 00		inc $00				inc cp+0	; increment cp
.ccff	d0 02		bne $cd03			bne +
.cd01	e6 01		inc $01				inc cp+1
.cd03					+
.cd03	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cd05	e8		inx				inx
=19					CL	.var *-XtPtr1
=$cd06					en = *	; remember here
>ccf1	13					.byte CL	;wh_CodeLength
.cd06	60		rts				rts
>cd07	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=52360					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd08	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd09	10					.byte WordFlags	;wh_Flags
>cd0a	03					.byte 3	;wh_CodeLength
>cd0b	19					  .byte LinkDisplacement
=$cd0c					XtPtr1 ::= *
=52360					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd0c	20 fb b3	jsr $b3fb	Comma:		jsr PopYA	; pop n, with underflow check
.cd0f					Comma_YA:
.cd0f	20 f6 cc	jsr $ccf6			jsr C_Comma_A	; compile LSB
.cd12	98		tya				tya		; compile MSB
.cd13	4c f6 cc	jmp $ccf6			jmp C_Comma_A
=10					CL	.var *-XtPtr1
=$cd16					en = *	; remember here
>cd0a	0a					.byte CL	;wh_CodeLength
>cd16	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=52376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd18	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd19	10					.byte WordFlags	;wh_Flags
>cd1a	03					.byte 3	;wh_CodeLength
>cd1b	10					  .byte LinkDisplacement
=$cd1c					XtPtr1 ::= *
=52376					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd1c	20 0c cd	jsr $cd0c	Two_Comma:	jsr Comma
.cd1f	4c 0c cd	jmp $cd0c			jmp Comma
=6					CL	.var *-XtPtr1
=$cd22					en = *	; remember here
>cd1a	06					.byte CL	;wh_CodeLength
.cd22	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd24	a8		tay				tay
.cd25	d0 e8		bne $cd0f			bne Comma_YA
>cd27	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=52395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd2b	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd2c	10					.byte WordFlags	;wh_Flags
>cd2d	03					.byte 3	;wh_CodeLength
>cd2e	13					  .byte LinkDisplacement
=$cd2f					XtPtr1 ::= *
=52395					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd2f	20 fb b3	jsr $b3fb	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd32	20 b8 b7	jsr $b7b8	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd35	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd37	20 f6 cc	jsr $ccf6	Jsr_Comma_3:	jsr C_Comma_A
.cd3a	4c 0c cd	jmp $cd0c			jmp Comma	; compile addr
=14					CL	.var *-XtPtr1
=$cd3d					en = *	; remember here
>cd2d	0e					.byte CL	;wh_CodeLength
>cd3d	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=52417					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd41	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd42	10					.byte WordFlags	;wh_Flags
>cd43	03					.byte 3	;wh_CodeLength
>cd44	16					  .byte LinkDisplacement
=$cd45					XtPtr1 ::= *
=52417					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd45	20 fb b3	jsr $b3fb	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd48	20 b8 b7	jsr $b7b8	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd4b	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd4d	d0 e8		bne $cd37			bne Jsr_Comma_3
.cd4f					Jmp_Comma_NT_YA:
.cd4f	20 b8 b7	jsr $b7b8			jsr PushYA
.cd52	20 ac bd	jsr $bdac			jsr Name_To_Int	; convert nt to xt
.cd55	4c 45 cd	jmp $cd45			jmp Jmp_Comma
=19					CL	.var *-XtPtr1
=$cd58					en = *	; remember here
>cd43	13					.byte CL	;wh_CodeLength
>cd58	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=52442					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd5a	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd5b	40					.byte WordFlags	;wh_Flags
>cd5c	03					.byte 3	;wh_CodeLength
>cd5d	19					  .byte LinkDisplacement
=$cd5e					XtPtr1 ::= *
=52442					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd5e	20 24 b4	jsr $b424	C_Fetch:	jsr underflow_1
.cd61	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd63	95 24		sta $24,x			sta DStack+0,x
.cd65	a9 00		lda #$00			lda #0
.cd67	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-XtPtr1
=$cd69					en = *	; remember here
>cd5c	0b					.byte CL	;wh_CodeLength
.cd69	60		rts				rts
>cd6a	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=52460					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd6c	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd6d	40					.byte WordFlags	;wh_Flags
>cd6e	03					.byte 3	;wh_CodeLength
>cd6f	12					  .byte LinkDisplacement
=$cd70					XtPtr1 ::= *
=52460					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd70	20 38 b4	jsr $b438	C_Store:	jsr underflow_2
.cd73	b5 26		lda $26,x			lda DStack+2,x
.cd75	81 24		sta ($24,x)			sta (DStack+0,x)
.cd77	e8		inx				inx
.cd78	e8		inx				inx
.cd79	e8		inx				inx
.cd7a	e8		inx				inx
=11					CL	.var *-XtPtr1
=$cd7b					en = *	; remember here
>cd6e	0b					.byte CL	;wh_CodeLength
.cd7b	60		rts				rts
>cd7c	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=52479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd7f	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd80	00					.byte WordFlags	;wh_Flags
>cd81	03					.byte 3	;wh_CodeLength
>cd82	13					  .byte LinkDisplacement
=$cd83					XtPtr1 ::= *
=52479					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd83					OnePlusStore:
.cd83	a9 01		lda #$01			lda #1
.cd85	18		clc				clc
.cd86	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd88	81 24		sta ($24,x)			sta (DStack+0,x)
.cd8a	90 0c		bcc $cd98			bcc _7			; if carry
.cd8c	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd8e	d0 02		bne $cd92			bne +
.cd90	f6 25		inc $25,x			inc DStack+1,x
.cd92					+
.cd92	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd94	69 00		adc #$00			adc #0
.cd96	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd98					_7:
.cd98	e8		inx				inx			; Drop addr
.cd99	e8		inx				inx
=23					CL	.var *-XtPtr1
=$cd9a					en = *	; remember here
>cd81	17					.byte CL	;wh_CodeLength
.cd9a	60		rts				rts
>cd9b	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=52509					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd9d	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cd9e	50					.byte WordFlags	;wh_Flags
>cd9f	03					.byte 3	;wh_CodeLength
>cda0	1e					  .byte LinkDisplacement
=$cda1					XtPtr1 ::= *
=52509					WordListLink ::= Nt0 ; remember the nt of this word for later
.cda1					Plus_store:
.cda1	20 38 b4	jsr $b438			jsr underflow_2
.cda4	18		clc				clc
.cda5	b5 26		lda $26,x			lda DStack+2,x
.cda7	61 24		adc ($24,x)			adc (DStack+0,x)
.cda9	81 24		sta ($24,x)			sta (DStack+0,x)
.cdab	f6 24		inc $24,x			inc DStack+0,x
.cdad	d0 02		bne $cdb1			bne +
.cdaf	f6 25		inc $25,x			inc DStack+1,x
.cdb1					+
.cdb1	b5 27		lda $27,x			lda DStack+3,x
.cdb3	61 24		adc ($24,x)			adc (DStack+0,x)
.cdb5	81 24		sta ($24,x)			sta (DStack+0,x)
.cdb7	4c 45 c5	jmp $c545			jmp Two_Drop
=25					CL	.var *-XtPtr1
=$cdba					en = *	; remember here
>cd9f	19					.byte CL	;wh_CodeLength
>cdba	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=52542					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdbe	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cdbf	10					.byte WordFlags	;wh_Flags
>cdc0	03					.byte 3	;wh_CodeLength
>cdc1	21					  .byte LinkDisplacement
=$cdc2					XtPtr1 ::= *
=52542					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdc2	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdc4	d0 0b		bne $cdd1			bne Emit_A
=4					CL	.var *-XtPtr1
=$cdc6					en = *	; remember here
>cdc0	04					.byte CL	;wh_CodeLength
>cdc6	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=52554					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdca	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdcb	10					.byte WordFlags	;wh_Flags
>cdcc	03					.byte 3	;wh_CodeLength
>cdcd	0c					  .byte LinkDisplacement
=$cdce					XtPtr1 ::= *
=52554					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdce	20 e0 b3	jsr $b3e0	Emit:		jsr PopA		; pop char, with underflow check
.cdd1					Emit_A:
.cdd1	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-XtPtr1
=$cdd4					en = *	; remember here
>cdcc	06					.byte CL	;wh_CodeLength
>cdd4	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=52569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdd9	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cdda	10					.byte WordFlags	;wh_Flags
>cddb	03					.byte 3	;wh_CodeLength
>cddc	0f					  .byte LinkDisplacement
=$cddd					XtPtr1 ::= *
=52569					WordListLink ::= Nt0 ; remember the nt of this word for later
.cddd	a9 20		lda #$20	Space:		lda #AscSP
.cddf	d0 f0		bne $cdd1			bne Emit_A
=4					CL	.var *-XtPtr1
=$cde1					en = *	; remember here
>cddb	04					.byte CL	;wh_CodeLength
>cde1	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=52581					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cde5	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cde6	50					.byte WordFlags	;wh_Flags
>cde7	03					.byte 3	;wh_CodeLength
>cde8	0c					  .byte LinkDisplacement
=$cde9					XtPtr1 ::= *
=52581					WordListLink ::= Nt0 ; remember the nt of this word for later
.cde9					Type:
.cde9	20 38 b4	jsr $b438			jsr underflow_2
.cdec	4c f9 cd	jmp $cdf9			jmp _test
.cdef					_loop:
.cdef	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cdf1	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cdf3	20 d1 cd	jsr $cdd1			jsr Emit_A
.cdf6	20 73 ca	jsr $ca73			jsr NOS_One_Plus	; increment address
.cdf9	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.cdfb	d0 f2		bne $cdef			bne _loop
.cdfd	d6 25		dec $25,x			dec DStack+1,x
.cdff	10 ee		bpl $cdef			bpl _loop
.ce01	4c 45 c5	jmp $c545			jmp Two_drop
=27					CL	.var *-XtPtr1
=$ce04					en = *	; remember here
>cde7	1b					.byte CL	;wh_CodeLength
.ce04					Print_ASCIIZ_YA_no_lf:
.ce04	85 18		sta $18				sta tmp3+0		; save string address
.ce06	84 19		sty $19				sty tmp3+1
.ce08	a0 00		ldy #$00			ldy #0
.ce0a					Print_ASCIIZ_tmp3_no_lf:
.ce0a	b1 18		lda ($18),y			lda (tmp3),y
.ce0c	f0 06		beq $ce14			beq _done		; end of string?
.ce0e	20 d1 cd	jsr $cdd1			jsr emit_a
.ce11	c8		iny				iny
.ce12	d0 f6		bne $ce0a			bne Print_ASCIIZ_tmp3_no_lf
.ce14					_done:
.ce14	60		rts				rts
.ce15					Print_ASCIIZ_YA:
.ce15	20 04 ce	jsr $ce04			jsr Print_ASCIIZ_YA_no_lf
.ce18	4c 75 ab	jmp $ab75	                jmp CR
>ce1b	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=52642					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce22	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce23	10					.byte WordFlags	;wh_Flags
>ce24	03					.byte 3	;wh_CodeLength
>ce25	3d					  .byte LinkDisplacement
=$ce26					XtPtr1 ::= *
=52642					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce26					Execute:
.ce26	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce28	b0 2e		bcs $ce58		bcs Throw_Stack_03
.ce2a	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce2c	48		pha				pha
.ce2d	b5 24		lda $24,x			lda DStack+0,x
.ce2f	48		pha				pha
.ce30	e8		inx				inx		; drop addr
.ce31	e8		inx				inx
.ce32	08		php				php		; flags for RTI
.ce33	40		rti				rti
=14					CL	.var *-XtPtr1
=$ce34					en = *	; remember here
>ce24	0e					.byte CL	;wh_CodeLength
>ce34	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=52664					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce38	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce39	10					.byte WordFlags	;wh_Flags
>ce3a	03					.byte 3	;wh_CodeLength
>ce3b	16					  .byte LinkDisplacement
=$ce3c					XtPtr1 ::= *
=52664					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce3c					TwoRot:
.ce3c	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.ce3e	b0 18		bcs $ce58		bcs Throw_Stack_03
.ce40	86 14		stx $14				stx tmp1+0
.ce42	e8		inx				inx		; do 4 times
.ce43	e8		inx				inx
.ce44	e8		inx				inx
.ce45	e8		inx				inx
.ce46	ca		dex		-		dex
.ce47	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce49	b5 28		lda $28,x			lda DStack+4,x
.ce4b	95 2c		sta $2c,x			sta DStack+8,x
.ce4d	b5 24		lda $24,x			lda DStack+0,x
.ce4f	95 28		sta $28,x			sta DStack+4,x
.ce51	94 24		sty $24,x			sty DStack+0,x
.ce53	e4 14		cpx $14				cpx tmp1+0
.ce55	d0 ef		bne $ce46			bne -
=27					CL	.var *-XtPtr1
=$ce57					en = *	; remember here
>ce3a	1b					.byte CL	;wh_CodeLength
.ce57	60		rts				rts
.ce58	4c 47 b4	jmp $b447	Throw_Stack_03: jmp Throw_Stack
>ce5b	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=52702					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce5e	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce5f	10					.byte WordFlags	;wh_Flags
>ce60	03					.byte 3	;wh_CodeLength
>ce61	26					  .byte LinkDisplacement
=$ce62					XtPtr1 ::= *
=52702					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce62					Rot:
.ce62	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce64	b0 f2		bcs $ce58		bcs Throw_Stack_03
.ce66	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce68	b5 27		lda $27,x			lda DStack+3,x
.ce6a	95 29		sta $29,x			sta DStack+5,x
.ce6c	b5 25		lda $25,x			lda DStack+1,x
.ce6e	95 27		sta $27,x			sta DStack+3,x
.ce70	94 25		sty $25,x			sty DStack+1,x
.ce72	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce74	b5 26		lda $26,x			lda DStack+2,x
.ce76	95 28		sta $28,x			sta DStack+4,x
.ce78	b5 24		lda $24,x			lda DStack+0,x
.ce7a	95 26		sta $26,x			sta DStack+2,x
.ce7c	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-XtPtr1
=$ce7e					en = *	; remember here
>ce60	1c					.byte CL	;wh_CodeLength
.ce7e	60		rts				rts
>ce7f	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=52739					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce83	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce84	10					.byte WordFlags	;wh_Flags
>ce85	03					.byte 3	;wh_CodeLength
>ce86	25					  .byte LinkDisplacement
=$ce87					XtPtr1 ::= *
=52739					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce87					Not_Rot:
.ce87	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce89	b0 cd		bcs $ce58		bcs Throw_Stack_03
.ce8b	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce8d	b5 27		lda $27,x			lda DStack+3,x
.ce8f	95 25		sta $25,x			sta DStack+1,x
.ce91	b5 29		lda $29,x			lda DStack+5,x
.ce93	95 27		sta $27,x			sta DStack+3,x
.ce95	94 29		sty $29,x			sty DStack+5,x
.ce97	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce99	b5 26		lda $26,x			lda DStack+2,x
.ce9b	95 24		sta $24,x			sta DStack+0,x
.ce9d	b5 28		lda $28,x			lda DStack+4,x
.ce9f	95 26		sta $26,x			sta DStack+2,x
.cea1	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-XtPtr1
=$cea3					en = *	; remember here
>ce85	1c					.byte CL	;wh_CodeLength
.cea3	60		rts				rts
>cea4	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=52773					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cea5	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cea6	10					.byte WordFlags	;wh_Flags
>cea7	03					.byte 3	;wh_CodeLength
>cea8	22					  .byte LinkDisplacement
=$cea9					XtPtr1 ::= *
=52773					WordListLink ::= Nt0 ; remember the nt of this word for later
.cea9					Fetch:
.cea9	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ceab	b0 ab		bcs $ce58		bcs Throw_Stack_03
.cead	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ceaf	a8		tay				tay
.ceb0	f6 24		inc $24,x			inc DStack+0,x
.ceb2	d0 02		bne $ceb6			bne +
.ceb4	f6 25		inc $25,x			inc DStack+1,x
.ceb6					+
.ceb6	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.ceb8	95 25		sta $25,x			sta DStack+1,x
.ceba	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-XtPtr1
=$cebc					en = *	; remember here
>cea7	13					.byte CL	;wh_CodeLength
.cebc	60		rts				rts
>cebd	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=52798					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cebe	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cebf	10					.byte WordFlags	;wh_Flags
>cec0	03					.byte 3	;wh_CodeLength
>cec1	19					  .byte LinkDisplacement
=$cec2					XtPtr1 ::= *
=52798					WordListLink ::= Nt0 ; remember the nt of this word for later
.cec2					Store:
.cec2	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cec4	b0 92		bcs $ce58		bcs Throw_Stack_03
.cec6	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cec8	81 24		sta ($24,x)			sta (DStack+0,x)
.ceca	f6 24		inc $24,x			inc DStack+0,x
.cecc	d0 02		bne $ced0			bne +
.cece	f6 25		inc $25,x			inc DStack+1,x
.ced0					+
.ced0	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ced2	81 24		sta ($24,x)			sta (DStack+0,x)
.ced4	e8		inx				inx		; 2Drop
.ced5	e8		inx				inx
.ced6	e8		inx				inx
.ced7	e8		inx				inx
=22					CL	.var *-XtPtr1
=$ced8					en = *	; remember here
>cec0	16					.byte CL	;wh_CodeLength
.ced8	60		rts				rts
>ced9	30 21				L1:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=52827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cedb	22					.byte (("0!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cedc	00					.byte WordFlags	;wh_Flags
>cedd	03					.byte 3	;wh_CodeLength
>cede	1d					  .byte LinkDisplacement
=$cedf					XtPtr1 ::= *
=52827					WordListLink ::= Nt0 ; remember the nt of this word for later
.cedf	20 06 b4	jsr $b406	ZStore:		jsr PopTmp1	; pop addr, check underflow
.cee2	a9 00		lda #$00			lda #0
.cee4	a8		tay				tay		; clear LSB
.cee5	91 14		sta ($14),y			sta (tmp1),y
.cee7	c8		iny				iny		; clear MSB
.cee8	91 14		sta ($14),y			sta (tmp1),y
=11					CL	.var *-XtPtr1
=$ceea					en = *	; remember here
>cedd	0b					.byte CL	;wh_CodeLength
.ceea	60		rts				rts
>ceeb	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=52845					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceed	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ceee	34					.byte WordFlags	;wh_Flags
>ceef	03					.byte 3	;wh_CodeLength
>cef0	12					  .byte LinkDisplacement
=$cef1					XtPtr1 ::= *
=52845					WordListLink ::= Nt0 ; remember the nt of this word for later
.cef1					To_R:
.cef1	68		pla				pla		; move the RTS address out of the way
.cef2	85 1c		sta $1c				sta tmp5+0
.cef4	68		pla				pla
.cef5	85 1d		sta $1d				sta tmp5+1
.cef7	20 24 b4	jsr $b424			jsr underflow_1
.cefa	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cefc	48		pha				pha
.cefd	b5 24		lda $24,x			lda DStack+0,x	; LSB
.ceff	48		pha				pha
.cf00	e8		inx				inx
.cf01	e8		inx				inx
.cf02	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.cf04	48		pha				pha
.cf05	a5 1c		lda $1c				lda tmp5+0
.cf07	48		pha				pha
=23					CL	.var *-XtPtr1
=$cf08					en = *	; remember here
>ceef	17					.byte CL	;wh_CodeLength
.cf08	60		rts				rts
>cf09	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=52875					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf0b	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cf0c	34					.byte WordFlags	;wh_Flags
>cf0d	03					.byte 3	;wh_CodeLength
>cf0e	1e					  .byte LinkDisplacement
=$cf0f					XtPtr1 ::= *
=52875					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf0f					R_From:
.cf0f	68		pla				pla		; Move the RTS addr out of the way
.cf10	85 1c		sta $1c				sta tmp5+0
.cf12	68		pla				pla
.cf13	85 1d		sta $1d				sta tmp5+1
.cf15	ca		dex				dex
.cf16	ca		dex				dex
.cf17	68		pla				pla		; LSB
.cf18	95 24		sta $24,x			sta DStack+0,x
.cf1a	68		pla				pla		; MSB
.cf1b	95 25		sta $25,x			sta DStack+1,x
.cf1d	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf1f	48		pha				pha
.cf20	a5 1c		lda $1c				lda tmp5+0
.cf22	48		pha				pha
=20					CL	.var *-XtPtr1
=$cf23					en = *	; remember here
>cf0d	14					.byte CL	;wh_CodeLength
.cf23	60		rts				rts
>cf24	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=52902					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf26	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf27	14					.byte WordFlags	;wh_Flags
>cf28	03					.byte 3	;wh_CodeLength
>cf29	1b					  .byte LinkDisplacement
=$cf2a					XtPtr1 ::= *
=52902					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf2a					R_Fetch:
.cf2a	86 14		stx $14				stx tmp1	; save data stack index
.cf2c	ba		tsx				tsx		; X= return stack index
.cf2d	bd 03 01	lda $0103,x			lda RStack+3,x
.cf30	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf33	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf35	4c b8 b7	jmp $b7b8			jmp PushYA
=14					CL	.var *-XtPtr1
=$cf38					en = *	; remember here
>cf28	0e					.byte CL	;wh_CodeLength
>cf38	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=52924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf3c	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf3d	40					.byte WordFlags	;wh_Flags
>cf3e	03					.byte 3	;wh_CodeLength
>cf3f	16					  .byte LinkDisplacement
=$cf40					XtPtr1 ::= *
=52924					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf40					Over:
.cf40	20 38 b4	jsr $b438			jsr underflow_2
.cf43	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf45	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf47	ca		dex				dex		; PushYA
.cf48	ca		dex				dex
.cf49	95 24		sta $24,x			sta DStack+0,x
.cf4b	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$cf4d					en = *	; remember here
>cf3e	0d					.byte CL	;wh_CodeLength
.cf4d	60		rts				rts
>cf4e	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=52946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf52	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf53	50					.byte WordFlags	;wh_Flags
>cf54	03					.byte 3	;wh_CodeLength
>cf55	16					  .byte LinkDisplacement
=$cf56					XtPtr1 ::= *
=52946					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf56					Question_Dup:
.cf56	20 24 b4	jsr $b424			jsr underflow_1
.cf59	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf5b	15 25		ora $25,x			ora DStack+1,x
.cf5d	d0 0b		bne $cf6a			bne Dup_NoUf
=9					CL	.var *-XtPtr1
=$cf5f					en = *	; remember here
>cf54	09					.byte CL	;wh_CodeLength
.cf5f	60		rts				rts
>cf60	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=52963					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf63	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf64	40					.byte WordFlags	;wh_Flags
>cf65	03					.byte 3	;wh_CodeLength
>cf66	11					  .byte LinkDisplacement
=$cf67					XtPtr1 ::= *
=52963					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf67					Dup:
.cf67	20 24 b4	jsr $b424			jsr underflow_1
.cf6a	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf6c	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf6e	ca		dex				dex
.cf6f	ca		dex				dex
.cf70	95 24		sta $24,x			sta DStack+0,x
.cf72	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$cf74					en = *	; remember here
>cf65	0d					.byte CL	;wh_CodeLength
.cf74	60		rts				rts
.cf75					PushAY:
.cf75	ca		dex				dex
.cf76	ca		dex				dex
.cf77	94 24		sty $24,x			sty DStack+0,x
.cf79	95 25		sta $25,x			sta DStack+1,x
.cf7b	60		rts				rts
>cf7c	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=52992					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf80	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf81	40					.byte WordFlags	;wh_Flags
>cf82	03					.byte 3	;wh_CodeLength
>cf83	1d					  .byte LinkDisplacement
=$cf84					XtPtr1 ::= *
=52992					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf84					Swap:
.cf84	20 38 b4	jsr $b438			jsr underflow_2
.cf87	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf89	b4 26		ldy $26,x			ldy DStack+2,x
.cf8b	95 26		sta $26,x			sta DStack+2,x
.cf8d	94 24		sty $24,x			sty DStack+0,x
.cf8f	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf91	b4 27		ldy $27,x			ldy DStack+3,x
.cf93	95 27		sta $27,x			sta DStack+3,x
.cf95	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-XtPtr1
=$cf97					en = *	; remember here
>cf82	13					.byte CL	;wh_CodeLength
.cf97	60		rts				rts
>cf98	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=53020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf9c	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cf9d	40					.byte WordFlags	;wh_Flags
>cf9e	03					.byte 3	;wh_CodeLength
>cf9f	1c					  .byte LinkDisplacement
=$cfa0					XtPtr1 ::= *
=53020					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfa0					Drop:
.cfa0	20 24 b4	jsr $b424			jsr underflow_1
.cfa3	e8		inx				inx
.cfa4	e8		inx				inx
=5					CL	.var *-XtPtr1
=$cfa5					en = *	; remember here
>cf9e	05					.byte CL	;wh_CodeLength
.cfa5	60		rts				rts
=53020					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cfa6	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=53035					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfab	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53035					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cfac	11					.byte WordFlags	;wh_Flags
>cfad	03					.byte 3	;wh_CodeLength
>cfae	00 00					  .word WordListLink
=$cfb0					XtPtr1 ::= *
=53035					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfb0	4c c8 aa	jmp $aac8			jmp Words
=3					CL	.var *-XtPtr1
=$cfb3					en = *	; remember here
>cfad	03					.byte CL	;wh_CodeLength
>cfb3	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfbb	72 64 6c 69 73 74
=53057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfc1	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfc2	10					.byte WordFlags	;wh_Flags
>cfc3	03					.byte 3	;wh_CodeLength
>cfc4	16					  .byte LinkDisplacement
=$cfc5					XtPtr1 ::= *
=53057					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfc5	4c ff 9f	jmp $9fff			jmp Forth_WordList
=3					CL	.var *-XtPtr1
=$cfc8					en = *	; remember here
>cfc3	03					.byte CL	;wh_CodeLength
>cfc8	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=53069					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfcd	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfce	10					.byte WordFlags	;wh_Flags
>cfcf	03					.byte 3	;wh_CodeLength
>cfd0	0c					  .byte LinkDisplacement
=$cfd1					XtPtr1 ::= *
=53069					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfd1	4c fd a0	jmp $a0fd			jmp Forth
=3					CL	.var *-XtPtr1
=$cfd4					en = *	; remember here
>cfcf	03					.byte CL	;wh_CodeLength
>cfd4	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfdc	72
=53085					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfdd	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfde	10					.byte WordFlags	;wh_Flags
>cfdf	03					.byte 3	;wh_CodeLength
>cfe0	10					  .byte LinkDisplacement
=$cfe1					XtPtr1 ::= *
=53085					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfe1	4c 6f a1	jmp $a16f			jmp Set_Order
=3					CL	.var *-XtPtr1
=$cfe4					en = *	; remember here
>cfdf	03					.byte CL	;wh_CodeLength
=53085					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cfe4					asm_r:
.cfe4	68		pla			pla		; pop RTS addr
.cfe5	a8		tay			tay
.cfe6	68		pla			pla
.cfe7	20 26 d0	jsr $d026		jsr asm_op	; compile opcode
.cfea	b5 25		lda $25,x		lda DStack+1,x	; check range
.cfec	f0 09		beq $cff7		beq _plus
.cfee	c9 ff		cmp #$ff		cmp #$ff
.cff0	f0 0b		beq $cffd		beq _minus
.cff2	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cff4	4c 80 b4	jmp $b480		jmp ThrowA
.cff7	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cff9	30 f7		bmi $cff2		bmi _err
.cffb	10 04		bpl $d001		bpl _store
.cffd	b5 24		lda $24,x	_minus:	lda DStack+0,x
.cfff	10 f1		bpl $cff2		bpl _err
.d001	4c f3 cc	jmp $ccf3	_store:	jmp C_Comma
.d004					asm_1:
.d004	68		pla			pla		; pop RTS addr
.d005	a8		tay			tay
.d006	68		pla			pla
.d007	20 26 d0	jsr $d026		jsr asm_op	; compile opcode
.d00a	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d00c	f0 04		beq $d012		beq _store	;   unsigned byte?
.d00e	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.d010	d0 03		bne $d015		bne _err
.d012	4c f3 cc	jmp $ccf3	_store:	jmp C_Comma
.d015	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d017	4c 80 b4	jmp $b480		jmp ThrowA
.d01a					asm_2:
.d01a	68		pla			pla		; pop RTS addr
.d01b	a8		tay			tay
.d01c	68		pla			pla
.d01d	20 26 d0	jsr $d026		jsr asm_op	; compile opcode
.d020	4c 0c cd	jmp $cd0c		jmp Comma	; compile operand
.d023					asm_0:
.d023	68		pla			pla		; pop RTS addr
.d024	a8		tay			tay
.d025	68		pla			pla
.d026	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d028	85 15		sta $15			sta tmp1+1
.d02a	a0 01		ldy #$01		ldy #1		; get opcode byte
.d02c	b1 14		lda ($14),y		lda (tmp1),y
.d02e	4c f6 cc	jmp $ccf6		jmp C_Comma_A	; compile opcode
>d031	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=53174					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d036	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53174					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d037	11					.byte WordFlags	;wh_Flags
>d038	03					.byte 3	;wh_CodeLength
>d039	00 00					  .word WordListLink
=$d03b					XtPtr1 ::= *
=53174					WordListLink ::= Nt0 ; remember the nt of this word for later
.d03b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d03e					en = *	; remember here
>d038	03					.byte CL	;wh_CodeLength
>d03e	69					.byte $69
>d03f	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=53188					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d044	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d045	10					.byte WordFlags	;wh_Flags
>d046	03					.byte 3	;wh_CodeLength
>d047	0e					  .byte LinkDisplacement
=$d048					XtPtr1 ::= *
=53188					WordListLink ::= Nt0 ; remember the nt of this word for later
.d048	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d04b					en = *	; remember here
>d046	03					.byte CL	;wh_CodeLength
>d04b	7d					.byte $7d
>d04c	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=53201					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d051	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d052	10					.byte WordFlags	;wh_Flags
>d053	03					.byte 3	;wh_CodeLength
>d054	0d					  .byte LinkDisplacement
=$d055					XtPtr1 ::= *
=53201					WordListLink ::= Nt0 ; remember the nt of this word for later
.d055	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d058					en = *	; remember here
>d053	03					.byte CL	;wh_CodeLength
>d058	79					.byte $79
>d059	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=53214					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d05e	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d05f	10					.byte WordFlags	;wh_Flags
>d060	03					.byte 3	;wh_CodeLength
>d061	0d					  .byte LinkDisplacement
=$d062					XtPtr1 ::= *
=53214					WordListLink ::= Nt0 ; remember the nt of this word for later
.d062	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d065					en = *	; remember here
>d060	03					.byte CL	;wh_CodeLength
>d065	65					.byte $65
>d066	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53229					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d06d	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d06e	10					.byte WordFlags	;wh_Flags
>d06f	03					.byte 3	;wh_CodeLength
>d070	0f					  .byte LinkDisplacement
=$d071					XtPtr1 ::= *
=53229					WordListLink ::= Nt0 ; remember the nt of this word for later
.d071	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d074					en = *	; remember here
>d06f	03					.byte CL	;wh_CodeLength
>d074	71					.byte $71
>d075	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=53243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d07b	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d07c	10					.byte WordFlags	;wh_Flags
>d07d	03					.byte 3	;wh_CodeLength
>d07e	0e					  .byte LinkDisplacement
=$d07f					XtPtr1 ::= *
=53243					WordListLink ::= Nt0 ; remember the nt of this word for later
.d07f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d082					en = *	; remember here
>d07d	03					.byte CL	;wh_CodeLength
>d082	75					.byte $75
>d083	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d08a	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d08b	10					.byte WordFlags	;wh_Flags
>d08c	03					.byte 3	;wh_CodeLength
>d08d	0f					  .byte LinkDisplacement
=$d08e					XtPtr1 ::= *
=53258					WordListLink ::= Nt0 ; remember the nt of this word for later
.d08e	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d091					en = *	; remember here
>d08c	03					.byte CL	;wh_CodeLength
>d091	61					.byte $61
>d092	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=53270					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d096	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d097	10					.byte WordFlags	;wh_Flags
>d098	03					.byte 3	;wh_CodeLength
>d099	0c					  .byte LinkDisplacement
=$d09a					XtPtr1 ::= *
=53270					WordListLink ::= Nt0 ; remember the nt of this word for later
.d09a	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d09d					en = *	; remember here
>d098	03					.byte CL	;wh_CodeLength
>d09d	2d					.byte $2d
>d09e	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=53283					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0a3	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0a4	10					.byte WordFlags	;wh_Flags
>d0a5	03					.byte 3	;wh_CodeLength
>d0a6	0d					  .byte LinkDisplacement
=$d0a7					XtPtr1 ::= *
=53283					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0a7	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0aa					en = *	; remember here
>d0a5	03					.byte CL	;wh_CodeLength
>d0aa	29					.byte $29
>d0ab	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=53296					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b0	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b1	10					.byte WordFlags	;wh_Flags
>d0b2	03					.byte 3	;wh_CodeLength
>d0b3	0d					  .byte LinkDisplacement
=$d0b4					XtPtr1 ::= *
=53296					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0b4	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d0b7					en = *	; remember here
>d0b2	03					.byte CL	;wh_CodeLength
>d0b7	3d					.byte $3d
>d0b8	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=53309					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0bd	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0be	10					.byte WordFlags	;wh_Flags
>d0bf	03					.byte 3	;wh_CodeLength
>d0c0	0d					  .byte LinkDisplacement
=$d0c1					XtPtr1 ::= *
=53309					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c1	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d0c4					en = *	; remember here
>d0bf	03					.byte CL	;wh_CodeLength
>d0c4	39					.byte $39
>d0c5	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=53322					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ca	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0cb	10					.byte WordFlags	;wh_Flags
>d0cc	03					.byte 3	;wh_CodeLength
>d0cd	0d					  .byte LinkDisplacement
=$d0ce					XtPtr1 ::= *
=53322					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0ce	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0d1					en = *	; remember here
>d0cc	03					.byte CL	;wh_CodeLength
>d0d1	25					.byte $25
>d0d2	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0d9	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0da	10					.byte WordFlags	;wh_Flags
>d0db	03					.byte 3	;wh_CodeLength
>d0dc	0f					  .byte LinkDisplacement
=$d0dd					XtPtr1 ::= *
=53337					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0dd	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0e0					en = *	; remember here
>d0db	03					.byte CL	;wh_CodeLength
>d0e0	31					.byte $31
>d0e1	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=53351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0e7	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0e8	10					.byte WordFlags	;wh_Flags
>d0e9	03					.byte 3	;wh_CodeLength
>d0ea	0e					  .byte LinkDisplacement
=$d0eb					XtPtr1 ::= *
=53351					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0eb	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0ee					en = *	; remember here
>d0e9	03					.byte CL	;wh_CodeLength
>d0ee	35					.byte $35
>d0ef	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53366					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0f6	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0f7	10					.byte WordFlags	;wh_Flags
>d0f8	03					.byte 3	;wh_CodeLength
>d0f9	0f					  .byte LinkDisplacement
=$d0fa					XtPtr1 ::= *
=53366					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0fa	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0fd					en = *	; remember here
>d0f8	03					.byte CL	;wh_CodeLength
>d0fd	21					.byte $21
>d0fe	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=53377					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d101	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d102	10					.byte WordFlags	;wh_Flags
>d103	03					.byte 3	;wh_CodeLength
>d104	0b					  .byte LinkDisplacement
=$d105					XtPtr1 ::= *
=53377					WordListLink ::= Nt0 ; remember the nt of this word for later
.d105	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d108					en = *	; remember here
>d103	03					.byte CL	;wh_CodeLength
>d108	0e					.byte $0e
>d109	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=53390					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d10e	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d10f	10					.byte WordFlags	;wh_Flags
>d110	03					.byte 3	;wh_CodeLength
>d111	0d					  .byte LinkDisplacement
=$d112					XtPtr1 ::= *
=53390					WordListLink ::= Nt0 ; remember the nt of this word for later
.d112	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d115					en = *	; remember here
>d110	03					.byte CL	;wh_CodeLength
>d115	0a					.byte $0a
>d116	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=53403					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d11b	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d11c	10					.byte WordFlags	;wh_Flags
>d11d	03					.byte 3	;wh_CodeLength
>d11e	0d					  .byte LinkDisplacement
=$d11f					XtPtr1 ::= *
=53403					WordListLink ::= Nt0 ; remember the nt of this word for later
.d11f	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d122					en = *	; remember here
>d11d	03					.byte CL	;wh_CodeLength
>d122	1e					.byte $1e
>d123	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=53416					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d128	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d129	10					.byte WordFlags	;wh_Flags
>d12a	03					.byte 3	;wh_CodeLength
>d12b	0d					  .byte LinkDisplacement
=$d12c					XtPtr1 ::= *
=53416					WordListLink ::= Nt0 ; remember the nt of this word for later
.d12c	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d12f					en = *	; remember here
>d12a	03					.byte CL	;wh_CodeLength
>d12f	06					.byte $06
>d130	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=53430					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d136	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d137	10					.byte WordFlags	;wh_Flags
>d138	03					.byte 3	;wh_CodeLength
>d139	0e					  .byte LinkDisplacement
=$d13a					XtPtr1 ::= *
=53430					WordListLink ::= Nt0 ; remember the nt of this word for later
.d13a	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d13d					en = *	; remember here
>d138	03					.byte CL	;wh_CodeLength
>d13d	16					.byte $16
>d13e	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=53441					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d141	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d142	10					.byte WordFlags	;wh_Flags
>d143	03					.byte 3	;wh_CodeLength
>d144	0b					  .byte LinkDisplacement
=$d145					XtPtr1 ::= *
=53441					WordListLink ::= Nt0 ; remember the nt of this word for later
.d145	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d148					en = *	; remember here
>d143	03					.byte CL	;wh_CodeLength
>d148	90					.byte $90
>d149	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=53452					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d14c	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d14d	10					.byte WordFlags	;wh_Flags
>d14e	03					.byte 3	;wh_CodeLength
>d14f	0b					  .byte LinkDisplacement
=$d150					XtPtr1 ::= *
=53452					WordListLink ::= Nt0 ; remember the nt of this word for later
.d150	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d153					en = *	; remember here
>d14e	03					.byte CL	;wh_CodeLength
>d153	b0					.byte $b0
>d154	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=53463					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d157	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d158	10					.byte WordFlags	;wh_Flags
>d159	03					.byte 3	;wh_CodeLength
>d15a	0b					  .byte LinkDisplacement
=$d15b					XtPtr1 ::= *
=53463					WordListLink ::= Nt0 ; remember the nt of this word for later
.d15b	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d15e					en = *	; remember here
>d159	03					.byte CL	;wh_CodeLength
>d15e	f0					.byte $f0
>d15f	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=53474					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d162	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d163	10					.byte WordFlags	;wh_Flags
>d164	03					.byte 3	;wh_CodeLength
>d165	0b					  .byte LinkDisplacement
=$d166					XtPtr1 ::= *
=53474					WordListLink ::= Nt0 ; remember the nt of this word for later
.d166	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d169					en = *	; remember here
>d164	03					.byte CL	;wh_CodeLength
>d169	2c					.byte $2c
>d16a	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=53487					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d16f	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d170	10					.byte WordFlags	;wh_Flags
>d171	03					.byte 3	;wh_CodeLength
>d172	0d					  .byte LinkDisplacement
=$d173					XtPtr1 ::= *
=53487					WordListLink ::= Nt0 ; remember the nt of this word for later
.d173	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d176					en = *	; remember here
>d171	03					.byte CL	;wh_CodeLength
>d176	24					.byte $24
>d177	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=53498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d17a	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d17b	10					.byte WordFlags	;wh_Flags
>d17c	03					.byte 3	;wh_CodeLength
>d17d	0b					  .byte LinkDisplacement
=$d17e					XtPtr1 ::= *
=53498					WordListLink ::= Nt0 ; remember the nt of this word for later
.d17e	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d181					en = *	; remember here
>d17c	03					.byte CL	;wh_CodeLength
>d181	30					.byte $30
>d182	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=53509					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d185	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d186	10					.byte WordFlags	;wh_Flags
>d187	03					.byte 3	;wh_CodeLength
>d188	0b					  .byte LinkDisplacement
=$d189					XtPtr1 ::= *
=53509					WordListLink ::= Nt0 ; remember the nt of this word for later
.d189	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d18c					en = *	; remember here
>d187	03					.byte CL	;wh_CodeLength
>d18c	d0					.byte $d0
>d18d	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=53520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d190	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d191	10					.byte WordFlags	;wh_Flags
>d192	03					.byte 3	;wh_CodeLength
>d193	0b					  .byte LinkDisplacement
=$d194					XtPtr1 ::= *
=53520					WordListLink ::= Nt0 ; remember the nt of this word for later
.d194	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d197					en = *	; remember here
>d192	03					.byte CL	;wh_CodeLength
>d197	10					.byte $10
>d198	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=53531					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d19b	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d19c	10					.byte WordFlags	;wh_Flags
>d19d	03					.byte 3	;wh_CodeLength
>d19e	0b					  .byte LinkDisplacement
=$d19f					XtPtr1 ::= *
=53531					WordListLink ::= Nt0 ; remember the nt of this word for later
.d19f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d1a2					en = *	; remember here
>d19d	03					.byte CL	;wh_CodeLength
>d1a2	00					.byte $00
>d1a3	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=53542					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a6	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1a7	10					.byte WordFlags	;wh_Flags
>d1a8	03					.byte 3	;wh_CodeLength
>d1a9	0b					  .byte LinkDisplacement
=$d1aa					XtPtr1 ::= *
=53542					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1aa	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d1ad					en = *	; remember here
>d1a8	03					.byte CL	;wh_CodeLength
>d1ad	50					.byte $50
>d1ae	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=53553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b1	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1b2	10					.byte WordFlags	;wh_Flags
>d1b3	03					.byte 3	;wh_CodeLength
>d1b4	0b					  .byte LinkDisplacement
=$d1b5					XtPtr1 ::= *
=53553					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1b5	20 e4 cf	jsr $cfe4		jsr asm_r
=3					CL	.var *-XtPtr1
=$d1b8					en = *	; remember here
>d1b3	03					.byte CL	;wh_CodeLength
>d1b8	70					.byte $70
>d1b9	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=53564					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1bc	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1bd	10					.byte WordFlags	;wh_Flags
>d1be	03					.byte 3	;wh_CodeLength
>d1bf	0b					  .byte LinkDisplacement
=$d1c0					XtPtr1 ::= *
=53564					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c0	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1c3					en = *	; remember here
>d1be	03					.byte CL	;wh_CodeLength
>d1c3	18					.byte $18
>d1c4	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=53575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1c7	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c8	10					.byte WordFlags	;wh_Flags
>d1c9	03					.byte 3	;wh_CodeLength
>d1ca	0b					  .byte LinkDisplacement
=$d1cb					XtPtr1 ::= *
=53575					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1cb	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1ce					en = *	; remember here
>d1c9	03					.byte CL	;wh_CodeLength
>d1ce	d8					.byte $d8
>d1cf	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=53586					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1d2	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1d3	10					.byte WordFlags	;wh_Flags
>d1d4	03					.byte 3	;wh_CodeLength
>d1d5	0b					  .byte LinkDisplacement
=$d1d6					XtPtr1 ::= *
=53586					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d6	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1d9					en = *	; remember here
>d1d4	03					.byte CL	;wh_CodeLength
>d1d9	58					.byte $58
>d1da	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=53597					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1dd	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1de	10					.byte WordFlags	;wh_Flags
>d1df	03					.byte 3	;wh_CodeLength
>d1e0	0b					  .byte LinkDisplacement
=$d1e1					XtPtr1 ::= *
=53597					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1e1	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1e4					en = *	; remember here
>d1df	03					.byte CL	;wh_CodeLength
>d1e4	b8					.byte $b8
>d1e5	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=53608					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e8	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1e9	10					.byte WordFlags	;wh_Flags
>d1ea	03					.byte 3	;wh_CodeLength
>d1eb	0b					  .byte LinkDisplacement
=$d1ec					XtPtr1 ::= *
=53608					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ec	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d1ef					en = *	; remember here
>d1ea	03					.byte CL	;wh_CodeLength
>d1ef	cd					.byte $cd
>d1f0	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=53621					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1f5	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1f6	10					.byte WordFlags	;wh_Flags
>d1f7	03					.byte 3	;wh_CodeLength
>d1f8	0d					  .byte LinkDisplacement
=$d1f9					XtPtr1 ::= *
=53621					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1f9	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d1fc					en = *	; remember here
>d1f7	03					.byte CL	;wh_CodeLength
>d1fc	c9					.byte $c9
>d1fd	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=53634					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d202	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d203	10					.byte WordFlags	;wh_Flags
>d204	03					.byte 3	;wh_CodeLength
>d205	0d					  .byte LinkDisplacement
=$d206					XtPtr1 ::= *
=53634					WordListLink ::= Nt0 ; remember the nt of this word for later
.d206	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d209					en = *	; remember here
>d204	03					.byte CL	;wh_CodeLength
>d209	dd					.byte $dd
>d20a	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=53647					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d20f	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d210	10					.byte WordFlags	;wh_Flags
>d211	03					.byte 3	;wh_CodeLength
>d212	0d					  .byte LinkDisplacement
=$d213					XtPtr1 ::= *
=53647					WordListLink ::= Nt0 ; remember the nt of this word for later
.d213	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d216					en = *	; remember here
>d211	03					.byte CL	;wh_CodeLength
>d216	d9					.byte $d9
>d217	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=53660					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d21c	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d21d	10					.byte WordFlags	;wh_Flags
>d21e	03					.byte 3	;wh_CodeLength
>d21f	0d					  .byte LinkDisplacement
=$d220					XtPtr1 ::= *
=53660					WordListLink ::= Nt0 ; remember the nt of this word for later
.d220	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d223					en = *	; remember here
>d21e	03					.byte CL	;wh_CodeLength
>d223	c5					.byte $c5
>d224	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53675					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d22b	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d22c	10					.byte WordFlags	;wh_Flags
>d22d	03					.byte 3	;wh_CodeLength
>d22e	0f					  .byte LinkDisplacement
=$d22f					XtPtr1 ::= *
=53675					WordListLink ::= Nt0 ; remember the nt of this word for later
.d22f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d232					en = *	; remember here
>d22d	03					.byte CL	;wh_CodeLength
>d232	d1					.byte $d1
>d233	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=53689					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d239	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d23a	10					.byte WordFlags	;wh_Flags
>d23b	03					.byte 3	;wh_CodeLength
>d23c	0e					  .byte LinkDisplacement
=$d23d					XtPtr1 ::= *
=53689					WordListLink ::= Nt0 ; remember the nt of this word for later
.d23d	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d240					en = *	; remember here
>d23b	03					.byte CL	;wh_CodeLength
>d240	d5					.byte $d5
>d241	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53704					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d248	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d249	10					.byte WordFlags	;wh_Flags
>d24a	03					.byte 3	;wh_CodeLength
>d24b	0f					  .byte LinkDisplacement
=$d24c					XtPtr1 ::= *
=53704					WordListLink ::= Nt0 ; remember the nt of this word for later
.d24c	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d24f					en = *	; remember here
>d24a	03					.byte CL	;wh_CodeLength
>d24f	c1					.byte $c1
>d250	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=53715					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d253	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d254	10					.byte WordFlags	;wh_Flags
>d255	03					.byte 3	;wh_CodeLength
>d256	0b					  .byte LinkDisplacement
=$d257					XtPtr1 ::= *
=53715					WordListLink ::= Nt0 ; remember the nt of this word for later
.d257	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d25a					en = *	; remember here
>d255	03					.byte CL	;wh_CodeLength
>d25a	ec					.byte $ec
>d25b	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=53728					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d260	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d261	10					.byte WordFlags	;wh_Flags
>d262	03					.byte 3	;wh_CodeLength
>d263	0d					  .byte LinkDisplacement
=$d264					XtPtr1 ::= *
=53728					WordListLink ::= Nt0 ; remember the nt of this word for later
.d264	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d267					en = *	; remember here
>d262	03					.byte CL	;wh_CodeLength
>d267	e0					.byte $e0
>d268	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=53741					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d26d	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d26e	10					.byte WordFlags	;wh_Flags
>d26f	03					.byte 3	;wh_CodeLength
>d270	0d					  .byte LinkDisplacement
=$d271					XtPtr1 ::= *
=53741					WordListLink ::= Nt0 ; remember the nt of this word for later
.d271	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d274					en = *	; remember here
>d26f	03					.byte CL	;wh_CodeLength
>d274	e4					.byte $e4
>d275	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=53752					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d278	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d279	10					.byte WordFlags	;wh_Flags
>d27a	03					.byte 3	;wh_CodeLength
>d27b	0b					  .byte LinkDisplacement
=$d27c					XtPtr1 ::= *
=53752					WordListLink ::= Nt0 ; remember the nt of this word for later
.d27c	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d27f					en = *	; remember here
>d27a	03					.byte CL	;wh_CodeLength
>d27f	cc					.byte $cc
>d280	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=53765					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d285	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d286	10					.byte WordFlags	;wh_Flags
>d287	03					.byte 3	;wh_CodeLength
>d288	0d					  .byte LinkDisplacement
=$d289					XtPtr1 ::= *
=53765					WordListLink ::= Nt0 ; remember the nt of this word for later
.d289	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d28c					en = *	; remember here
>d287	03					.byte CL	;wh_CodeLength
>d28c	c0					.byte $c0
>d28d	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=53778					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d292	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d293	10					.byte WordFlags	;wh_Flags
>d294	03					.byte 3	;wh_CodeLength
>d295	0d					  .byte LinkDisplacement
=$d296					XtPtr1 ::= *
=53778					WordListLink ::= Nt0 ; remember the nt of this word for later
.d296	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d299					en = *	; remember here
>d294	03					.byte CL	;wh_CodeLength
>d299	c4					.byte $c4
>d29a	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=53789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d29d	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d29e	10					.byte WordFlags	;wh_Flags
>d29f	03					.byte 3	;wh_CodeLength
>d2a0	0b					  .byte LinkDisplacement
=$d2a1					XtPtr1 ::= *
=53789					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a1	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2a4					en = *	; remember here
>d29f	03					.byte CL	;wh_CodeLength
>d2a4	ce					.byte $ce
>d2a5	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=53802					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2aa	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2ab	10					.byte WordFlags	;wh_Flags
>d2ac	03					.byte 3	;wh_CodeLength
>d2ad	0d					  .byte LinkDisplacement
=$d2ae					XtPtr1 ::= *
=53802					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ae	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2b1					en = *	; remember here
>d2ac	03					.byte CL	;wh_CodeLength
>d2b1	3a					.byte $3a
>d2b2	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=53815					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2b7	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2b8	10					.byte WordFlags	;wh_Flags
>d2b9	03					.byte 3	;wh_CodeLength
>d2ba	0d					  .byte LinkDisplacement
=$d2bb					XtPtr1 ::= *
=53815					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2bb	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2be					en = *	; remember here
>d2b9	03					.byte CL	;wh_CodeLength
>d2be	de					.byte $de
>d2bf	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=53828					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2c4	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2c5	10					.byte WordFlags	;wh_Flags
>d2c6	03					.byte 3	;wh_CodeLength
>d2c7	0d					  .byte LinkDisplacement
=$d2c8					XtPtr1 ::= *
=53828					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2c8	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d2cb					en = *	; remember here
>d2c6	03					.byte CL	;wh_CodeLength
>d2cb	c6					.byte $c6
>d2cc	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=53842					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2d2	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2d3	10					.byte WordFlags	;wh_Flags
>d2d4	03					.byte 3	;wh_CodeLength
>d2d5	0e					  .byte LinkDisplacement
=$d2d6					XtPtr1 ::= *
=53842					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2d6	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d2d9					en = *	; remember here
>d2d4	03					.byte CL	;wh_CodeLength
>d2d9	d6					.byte $d6
>d2da	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=53853					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2dd	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2de	10					.byte WordFlags	;wh_Flags
>d2df	03					.byte 3	;wh_CodeLength
>d2e0	0b					  .byte LinkDisplacement
=$d2e1					XtPtr1 ::= *
=53853					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2e1	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2e4					en = *	; remember here
>d2df	03					.byte CL	;wh_CodeLength
>d2e4	ca					.byte $ca
>d2e5	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=53864					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2e8	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2e9	10					.byte WordFlags	;wh_Flags
>d2ea	03					.byte 3	;wh_CodeLength
>d2eb	0b					  .byte LinkDisplacement
=$d2ec					XtPtr1 ::= *
=53864					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2ec	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2ef					en = *	; remember here
>d2ea	03					.byte CL	;wh_CodeLength
>d2ef	88					.byte $88
>d2f0	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=53875					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f3	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2f4	10					.byte WordFlags	;wh_Flags
>d2f5	03					.byte 3	;wh_CodeLength
>d2f6	0b					  .byte LinkDisplacement
=$d2f7					XtPtr1 ::= *
=53875					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2f7	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2fa					en = *	; remember here
>d2f5	03					.byte CL	;wh_CodeLength
>d2fa	4d					.byte $4d
>d2fb	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=53888					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d300	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d301	10					.byte WordFlags	;wh_Flags
>d302	03					.byte 3	;wh_CodeLength
>d303	0d					  .byte LinkDisplacement
=$d304					XtPtr1 ::= *
=53888					WordListLink ::= Nt0 ; remember the nt of this word for later
.d304	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d307					en = *	; remember here
>d302	03					.byte CL	;wh_CodeLength
>d307	49					.byte $49
>d308	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=53901					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d30d	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d30e	10					.byte WordFlags	;wh_Flags
>d30f	03					.byte 3	;wh_CodeLength
>d310	0d					  .byte LinkDisplacement
=$d311					XtPtr1 ::= *
=53901					WordListLink ::= Nt0 ; remember the nt of this word for later
.d311	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d314					en = *	; remember here
>d30f	03					.byte CL	;wh_CodeLength
>d314	5d					.byte $5d
>d315	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=53914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d31a	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d31b	10					.byte WordFlags	;wh_Flags
>d31c	03					.byte 3	;wh_CodeLength
>d31d	0d					  .byte LinkDisplacement
=$d31e					XtPtr1 ::= *
=53914					WordListLink ::= Nt0 ; remember the nt of this word for later
.d31e	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d321					en = *	; remember here
>d31c	03					.byte CL	;wh_CodeLength
>d321	59					.byte $59
>d322	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=53927					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d327	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d328	10					.byte WordFlags	;wh_Flags
>d329	03					.byte 3	;wh_CodeLength
>d32a	0d					  .byte LinkDisplacement
=$d32b					XtPtr1 ::= *
=53927					WordListLink ::= Nt0 ; remember the nt of this word for later
.d32b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d32e					en = *	; remember here
>d329	03					.byte CL	;wh_CodeLength
>d32e	45					.byte $45
>d32f	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53942					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d336	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d337	10					.byte WordFlags	;wh_Flags
>d338	03					.byte 3	;wh_CodeLength
>d339	0f					  .byte LinkDisplacement
=$d33a					XtPtr1 ::= *
=53942					WordListLink ::= Nt0 ; remember the nt of this word for later
.d33a	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d33d					en = *	; remember here
>d338	03					.byte CL	;wh_CodeLength
>d33d	51					.byte $51
>d33e	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=53956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d344	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d345	10					.byte WordFlags	;wh_Flags
>d346	03					.byte 3	;wh_CodeLength
>d347	0e					  .byte LinkDisplacement
=$d348					XtPtr1 ::= *
=53956					WordListLink ::= Nt0 ; remember the nt of this word for later
.d348	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d34b					en = *	; remember here
>d346	03					.byte CL	;wh_CodeLength
>d34b	55					.byte $55
>d34c	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53971					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d353	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d354	10					.byte WordFlags	;wh_Flags
>d355	03					.byte 3	;wh_CodeLength
>d356	0f					  .byte LinkDisplacement
=$d357					XtPtr1 ::= *
=53971					WordListLink ::= Nt0 ; remember the nt of this word for later
.d357	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d35a					en = *	; remember here
>d355	03					.byte CL	;wh_CodeLength
>d35a	41					.byte $41
>d35b	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=53982					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d35e	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d35f	10					.byte WordFlags	;wh_Flags
>d360	03					.byte 3	;wh_CodeLength
>d361	0b					  .byte LinkDisplacement
=$d362					XtPtr1 ::= *
=53982					WordListLink ::= Nt0 ; remember the nt of this word for later
.d362	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d365					en = *	; remember here
>d360	03					.byte CL	;wh_CodeLength
>d365	ee					.byte $ee
>d366	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=53995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d36b	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d36c	10					.byte WordFlags	;wh_Flags
>d36d	03					.byte 3	;wh_CodeLength
>d36e	0d					  .byte LinkDisplacement
=$d36f					XtPtr1 ::= *
=53995					WordListLink ::= Nt0 ; remember the nt of this word for later
.d36f	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d372					en = *	; remember here
>d36d	03					.byte CL	;wh_CodeLength
>d372	1a					.byte $1a
>d373	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=54008					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d378	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d379	10					.byte WordFlags	;wh_Flags
>d37a	03					.byte 3	;wh_CodeLength
>d37b	0d					  .byte LinkDisplacement
=$d37c					XtPtr1 ::= *
=54008					WordListLink ::= Nt0 ; remember the nt of this word for later
.d37c	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d37f					en = *	; remember here
>d37a	03					.byte CL	;wh_CodeLength
>d37f	fe					.byte $fe
>d380	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=54021					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d385	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d386	10					.byte WordFlags	;wh_Flags
>d387	03					.byte 3	;wh_CodeLength
>d388	0d					  .byte LinkDisplacement
=$d389					XtPtr1 ::= *
=54021					WordListLink ::= Nt0 ; remember the nt of this word for later
.d389	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d38c					en = *	; remember here
>d387	03					.byte CL	;wh_CodeLength
>d38c	e6					.byte $e6
>d38d	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=54035					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d393	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d394	10					.byte WordFlags	;wh_Flags
>d395	03					.byte 3	;wh_CodeLength
>d396	0e					  .byte LinkDisplacement
=$d397					XtPtr1 ::= *
=54035					WordListLink ::= Nt0 ; remember the nt of this word for later
.d397	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d39a					en = *	; remember here
>d395	03					.byte CL	;wh_CodeLength
>d39a	f6					.byte $f6
>d39b	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=54046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d39e	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d39f	10					.byte WordFlags	;wh_Flags
>d3a0	03					.byte 3	;wh_CodeLength
>d3a1	0b					  .byte LinkDisplacement
=$d3a2					XtPtr1 ::= *
=54046					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3a2	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d3a5					en = *	; remember here
>d3a0	03					.byte CL	;wh_CodeLength
>d3a5	e8					.byte $e8
>d3a6	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=54057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3a9	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3aa	10					.byte WordFlags	;wh_Flags
>d3ab	03					.byte 3	;wh_CodeLength
>d3ac	0b					  .byte LinkDisplacement
=$d3ad					XtPtr1 ::= *
=54057					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ad	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d3b0					en = *	; remember here
>d3ab	03					.byte CL	;wh_CodeLength
>d3b0	c8					.byte $c8
>d3b1	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=54068					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b4	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3b5	10					.byte WordFlags	;wh_Flags
>d3b6	03					.byte 3	;wh_CodeLength
>d3b7	0b					  .byte LinkDisplacement
=$d3b8					XtPtr1 ::= *
=54068					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b8	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3bb					en = *	; remember here
>d3b6	03					.byte CL	;wh_CodeLength
>d3bb	4c					.byte $4c
>d3bc	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=54081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3c1	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3c2	10					.byte WordFlags	;wh_Flags
>d3c3	03					.byte 3	;wh_CodeLength
>d3c4	0d					  .byte LinkDisplacement
=$d3c5					XtPtr1 ::= *
=54081					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3c5	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3c8					en = *	; remember here
>d3c3	03					.byte CL	;wh_CodeLength
>d3c8	6c					.byte $6c
>d3c9	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=54092					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3cc	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3cd	10					.byte WordFlags	;wh_Flags
>d3ce	03					.byte 3	;wh_CodeLength
>d3cf	0b					  .byte LinkDisplacement
=$d3d0					XtPtr1 ::= *
=54092					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3d0	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3d3					en = *	; remember here
>d3ce	03					.byte CL	;wh_CodeLength
>d3d3	20					.byte $20
>d3d4	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=54103					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3d7	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3d8	10					.byte WordFlags	;wh_Flags
>d3d9	03					.byte 3	;wh_CodeLength
>d3da	0b					  .byte LinkDisplacement
=$d3db					XtPtr1 ::= *
=54103					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3db	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3de					en = *	; remember here
>d3d9	03					.byte CL	;wh_CodeLength
>d3de	ad					.byte $ad
>d3df	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=54116					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3e4	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3e5	10					.byte WordFlags	;wh_Flags
>d3e6	03					.byte 3	;wh_CodeLength
>d3e7	0d					  .byte LinkDisplacement
=$d3e8					XtPtr1 ::= *
=54116					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3e8	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d3eb					en = *	; remember here
>d3e6	03					.byte CL	;wh_CodeLength
>d3eb	a9					.byte $a9
>d3ec	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=54129					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f1	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3f2	10					.byte WordFlags	;wh_Flags
>d3f3	03					.byte 3	;wh_CodeLength
>d3f4	0d					  .byte LinkDisplacement
=$d3f5					XtPtr1 ::= *
=54129					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3f5	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3f8					en = *	; remember here
>d3f3	03					.byte CL	;wh_CodeLength
>d3f8	bd					.byte $bd
>d3f9	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=54142					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3fe	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ff	10					.byte WordFlags	;wh_Flags
>d400	03					.byte 3	;wh_CodeLength
>d401	0d					  .byte LinkDisplacement
=$d402					XtPtr1 ::= *
=54142					WordListLink ::= Nt0 ; remember the nt of this word for later
.d402	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d405					en = *	; remember here
>d400	03					.byte CL	;wh_CodeLength
>d405	b9					.byte $b9
>d406	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=54155					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d40b	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d40c	10					.byte WordFlags	;wh_Flags
>d40d	03					.byte 3	;wh_CodeLength
>d40e	0d					  .byte LinkDisplacement
=$d40f					XtPtr1 ::= *
=54155					WordListLink ::= Nt0 ; remember the nt of this word for later
.d40f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d412					en = *	; remember here
>d40d	03					.byte CL	;wh_CodeLength
>d412	a5					.byte $a5
>d413	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54170					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d41a	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d41b	10					.byte WordFlags	;wh_Flags
>d41c	03					.byte 3	;wh_CodeLength
>d41d	0f					  .byte LinkDisplacement
=$d41e					XtPtr1 ::= *
=54170					WordListLink ::= Nt0 ; remember the nt of this word for later
.d41e	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d421					en = *	; remember here
>d41c	03					.byte CL	;wh_CodeLength
>d421	b1					.byte $b1
>d422	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=54184					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d428	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d429	10					.byte WordFlags	;wh_Flags
>d42a	03					.byte 3	;wh_CodeLength
>d42b	0e					  .byte LinkDisplacement
=$d42c					XtPtr1 ::= *
=54184					WordListLink ::= Nt0 ; remember the nt of this word for later
.d42c	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d42f					en = *	; remember here
>d42a	03					.byte CL	;wh_CodeLength
>d42f	b5					.byte $b5
>d430	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54199					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d437	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d438	10					.byte WordFlags	;wh_Flags
>d439	03					.byte 3	;wh_CodeLength
>d43a	0f					  .byte LinkDisplacement
=$d43b					XtPtr1 ::= *
=54199					WordListLink ::= Nt0 ; remember the nt of this word for later
.d43b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d43e					en = *	; remember here
>d439	03					.byte CL	;wh_CodeLength
>d43e	a1					.byte $a1
>d43f	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=54210					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d442	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d443	10					.byte WordFlags	;wh_Flags
>d444	03					.byte 3	;wh_CodeLength
>d445	0b					  .byte LinkDisplacement
=$d446					XtPtr1 ::= *
=54210					WordListLink ::= Nt0 ; remember the nt of this word for later
.d446	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d449					en = *	; remember here
>d444	03					.byte CL	;wh_CodeLength
>d449	ae					.byte $ae
>d44a	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=54223					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d44f	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d450	10					.byte WordFlags	;wh_Flags
>d451	03					.byte 3	;wh_CodeLength
>d452	0d					  .byte LinkDisplacement
=$d453					XtPtr1 ::= *
=54223					WordListLink ::= Nt0 ; remember the nt of this word for later
.d453	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d456					en = *	; remember here
>d451	03					.byte CL	;wh_CodeLength
>d456	a2					.byte $a2
>d457	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=54236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d45c	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d45d	10					.byte WordFlags	;wh_Flags
>d45e	03					.byte 3	;wh_CodeLength
>d45f	0d					  .byte LinkDisplacement
=$d460					XtPtr1 ::= *
=54236					WordListLink ::= Nt0 ; remember the nt of this word for later
.d460	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d463					en = *	; remember here
>d45e	03					.byte CL	;wh_CodeLength
>d463	be					.byte $be
>d464	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=54249					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d469	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d46a	10					.byte WordFlags	;wh_Flags
>d46b	03					.byte 3	;wh_CodeLength
>d46c	0d					  .byte LinkDisplacement
=$d46d					XtPtr1 ::= *
=54249					WordListLink ::= Nt0 ; remember the nt of this word for later
.d46d	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d470					en = *	; remember here
>d46b	03					.byte CL	;wh_CodeLength
>d470	a6					.byte $a6
>d471	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=54263					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d477	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d478	10					.byte WordFlags	;wh_Flags
>d479	03					.byte 3	;wh_CodeLength
>d47a	0e					  .byte LinkDisplacement
=$d47b					XtPtr1 ::= *
=54263					WordListLink ::= Nt0 ; remember the nt of this word for later
.d47b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d47e					en = *	; remember here
>d479	03					.byte CL	;wh_CodeLength
>d47e	b6					.byte $b6
>d47f	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=54274					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d482	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d483	10					.byte WordFlags	;wh_Flags
>d484	03					.byte 3	;wh_CodeLength
>d485	0b					  .byte LinkDisplacement
=$d486					XtPtr1 ::= *
=54274					WordListLink ::= Nt0 ; remember the nt of this word for later
.d486	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d489					en = *	; remember here
>d484	03					.byte CL	;wh_CodeLength
>d489	ac					.byte $ac
>d48a	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=54287					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d48f	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d490	10					.byte WordFlags	;wh_Flags
>d491	03					.byte 3	;wh_CodeLength
>d492	0d					  .byte LinkDisplacement
=$d493					XtPtr1 ::= *
=54287					WordListLink ::= Nt0 ; remember the nt of this word for later
.d493	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d496					en = *	; remember here
>d491	03					.byte CL	;wh_CodeLength
>d496	a0					.byte $a0
>d497	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=54300					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d49c	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d49d	10					.byte WordFlags	;wh_Flags
>d49e	03					.byte 3	;wh_CodeLength
>d49f	0d					  .byte LinkDisplacement
=$d4a0					XtPtr1 ::= *
=54300					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a0	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4a3					en = *	; remember here
>d49e	03					.byte CL	;wh_CodeLength
>d4a3	bc					.byte $bc
>d4a4	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=54313					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4a9	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4aa	10					.byte WordFlags	;wh_Flags
>d4ab	03					.byte 3	;wh_CodeLength
>d4ac	0d					  .byte LinkDisplacement
=$d4ad					XtPtr1 ::= *
=54313					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4ad	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4b0					en = *	; remember here
>d4ab	03					.byte CL	;wh_CodeLength
>d4b0	a4					.byte $a4
>d4b1	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=54327					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4b7	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4b8	10					.byte WordFlags	;wh_Flags
>d4b9	03					.byte 3	;wh_CodeLength
>d4ba	0e					  .byte LinkDisplacement
=$d4bb					XtPtr1 ::= *
=54327					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4bb	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4be					en = *	; remember here
>d4b9	03					.byte CL	;wh_CodeLength
>d4be	b4					.byte $b4
>d4bf	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=54338					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4c2	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4c3	10					.byte WordFlags	;wh_Flags
>d4c4	03					.byte 3	;wh_CodeLength
>d4c5	0b					  .byte LinkDisplacement
=$d4c6					XtPtr1 ::= *
=54338					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4c6	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4c9					en = *	; remember here
>d4c4	03					.byte CL	;wh_CodeLength
>d4c9	4e					.byte $4e
>d4ca	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=54351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4cf	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d0	10					.byte WordFlags	;wh_Flags
>d4d1	03					.byte 3	;wh_CodeLength
>d4d2	0d					  .byte LinkDisplacement
=$d4d3					XtPtr1 ::= *
=54351					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4d3	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d4d6					en = *	; remember here
>d4d1	03					.byte CL	;wh_CodeLength
>d4d6	4a					.byte $4a
>d4d7	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=54364					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4dc	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4dd	10					.byte WordFlags	;wh_Flags
>d4de	03					.byte 3	;wh_CodeLength
>d4df	0d					  .byte LinkDisplacement
=$d4e0					XtPtr1 ::= *
=54364					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e0	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4e3					en = *	; remember here
>d4de	03					.byte CL	;wh_CodeLength
>d4e3	5e					.byte $5e
>d4e4	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=54377					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4e9	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4ea	10					.byte WordFlags	;wh_Flags
>d4eb	03					.byte 3	;wh_CodeLength
>d4ec	0d					  .byte LinkDisplacement
=$d4ed					XtPtr1 ::= *
=54377					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4ed	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4f0					en = *	; remember here
>d4eb	03					.byte CL	;wh_CodeLength
>d4f0	46					.byte $46
>d4f1	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=54391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4f7	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4f8	10					.byte WordFlags	;wh_Flags
>d4f9	03					.byte 3	;wh_CodeLength
>d4fa	0e					  .byte LinkDisplacement
=$d4fb					XtPtr1 ::= *
=54391					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4fb	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4fe					en = *	; remember here
>d4f9	03					.byte CL	;wh_CodeLength
>d4fe	56					.byte $56
>d4ff	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=54402					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d502	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d503	10					.byte WordFlags	;wh_Flags
>d504	03					.byte 3	;wh_CodeLength
>d505	0b					  .byte LinkDisplacement
=$d506					XtPtr1 ::= *
=54402					WordListLink ::= Nt0 ; remember the nt of this word for later
.d506	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d509					en = *	; remember here
>d504	03					.byte CL	;wh_CodeLength
>d509	ea					.byte $ea
>d50a	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=54413					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d50d	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d50e	10					.byte WordFlags	;wh_Flags
>d50f	03					.byte 3	;wh_CodeLength
>d510	0b					  .byte LinkDisplacement
=$d511					XtPtr1 ::= *
=54413					WordListLink ::= Nt0 ; remember the nt of this word for later
.d511	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d514					en = *	; remember here
>d50f	03					.byte CL	;wh_CodeLength
>d514	0d					.byte $0d
>d515	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=54426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d51a	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d51b	10					.byte WordFlags	;wh_Flags
>d51c	03					.byte 3	;wh_CodeLength
>d51d	0d					  .byte LinkDisplacement
=$d51e					XtPtr1 ::= *
=54426					WordListLink ::= Nt0 ; remember the nt of this word for later
.d51e	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d521					en = *	; remember here
>d51c	03					.byte CL	;wh_CodeLength
>d521	09					.byte $09
>d522	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=54439					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d527	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d528	10					.byte WordFlags	;wh_Flags
>d529	03					.byte 3	;wh_CodeLength
>d52a	0d					  .byte LinkDisplacement
=$d52b					XtPtr1 ::= *
=54439					WordListLink ::= Nt0 ; remember the nt of this word for later
.d52b	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d52e					en = *	; remember here
>d529	03					.byte CL	;wh_CodeLength
>d52e	1d					.byte $1d
>d52f	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=54452					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d534	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d535	10					.byte WordFlags	;wh_Flags
>d536	03					.byte 3	;wh_CodeLength
>d537	0d					  .byte LinkDisplacement
=$d538					XtPtr1 ::= *
=54452					WordListLink ::= Nt0 ; remember the nt of this word for later
.d538	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d53b					en = *	; remember here
>d536	03					.byte CL	;wh_CodeLength
>d53b	19					.byte $19
>d53c	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=54465					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d541	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d542	10					.byte WordFlags	;wh_Flags
>d543	03					.byte 3	;wh_CodeLength
>d544	0d					  .byte LinkDisplacement
=$d545					XtPtr1 ::= *
=54465					WordListLink ::= Nt0 ; remember the nt of this word for later
.d545	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d548					en = *	; remember here
>d543	03					.byte CL	;wh_CodeLength
>d548	05					.byte $05
>d549	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54480					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d550	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d551	10					.byte WordFlags	;wh_Flags
>d552	03					.byte 3	;wh_CodeLength
>d553	0f					  .byte LinkDisplacement
=$d554					XtPtr1 ::= *
=54480					WordListLink ::= Nt0 ; remember the nt of this word for later
.d554	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d557					en = *	; remember here
>d552	03					.byte CL	;wh_CodeLength
>d557	11					.byte $11
>d558	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=54494					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d55e	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d55f	10					.byte WordFlags	;wh_Flags
>d560	03					.byte 3	;wh_CodeLength
>d561	0e					  .byte LinkDisplacement
=$d562					XtPtr1 ::= *
=54494					WordListLink ::= Nt0 ; remember the nt of this word for later
.d562	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d565					en = *	; remember here
>d560	03					.byte CL	;wh_CodeLength
>d565	15					.byte $15
>d566	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54509					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d56d	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d56e	10					.byte WordFlags	;wh_Flags
>d56f	03					.byte 3	;wh_CodeLength
>d570	0f					  .byte LinkDisplacement
=$d571					XtPtr1 ::= *
=54509					WordListLink ::= Nt0 ; remember the nt of this word for later
.d571	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d574					en = *	; remember here
>d56f	03					.byte CL	;wh_CodeLength
>d574	01					.byte $01
>d575	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=54520					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d578	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d579	10					.byte WordFlags	;wh_Flags
>d57a	03					.byte 3	;wh_CodeLength
>d57b	0b					  .byte LinkDisplacement
=$d57c					XtPtr1 ::= *
=54520					WordListLink ::= Nt0 ; remember the nt of this word for later
.d57c	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d57f					en = *	; remember here
>d57a	03					.byte CL	;wh_CodeLength
>d57f	48					.byte $48
>d580	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=54531					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d583	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d584	10					.byte WordFlags	;wh_Flags
>d585	03					.byte 3	;wh_CodeLength
>d586	0b					  .byte LinkDisplacement
=$d587					XtPtr1 ::= *
=54531					WordListLink ::= Nt0 ; remember the nt of this word for later
.d587	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d58a					en = *	; remember here
>d585	03					.byte CL	;wh_CodeLength
>d58a	08					.byte $08
>d58b	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=54542					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d58e	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d58f	10					.byte WordFlags	;wh_Flags
>d590	03					.byte 3	;wh_CodeLength
>d591	0b					  .byte LinkDisplacement
=$d592					XtPtr1 ::= *
=54542					WordListLink ::= Nt0 ; remember the nt of this word for later
.d592	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d595					en = *	; remember here
>d590	03					.byte CL	;wh_CodeLength
>d595	68					.byte $68
>d596	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=54553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d599	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d59a	10					.byte WordFlags	;wh_Flags
>d59b	03					.byte 3	;wh_CodeLength
>d59c	0b					  .byte LinkDisplacement
=$d59d					XtPtr1 ::= *
=54553					WordListLink ::= Nt0 ; remember the nt of this word for later
.d59d	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5a0					en = *	; remember here
>d59b	03					.byte CL	;wh_CodeLength
>d5a0	28					.byte $28
>d5a1	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=54564					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a4	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5a5	10					.byte WordFlags	;wh_Flags
>d5a6	03					.byte 3	;wh_CodeLength
>d5a7	0b					  .byte LinkDisplacement
=$d5a8					XtPtr1 ::= *
=54564					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a8	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5ab					en = *	; remember here
>d5a6	03					.byte CL	;wh_CodeLength
>d5ab	2e					.byte $2e
>d5ac	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=54577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b1	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5b2	10					.byte WordFlags	;wh_Flags
>d5b3	03					.byte 3	;wh_CodeLength
>d5b4	0d					  .byte LinkDisplacement
=$d5b5					XtPtr1 ::= *
=54577					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5b5	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5b8					en = *	; remember here
>d5b3	03					.byte CL	;wh_CodeLength
>d5b8	2a					.byte $2a
>d5b9	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=54590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5be	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5bf	10					.byte WordFlags	;wh_Flags
>d5c0	03					.byte 3	;wh_CodeLength
>d5c1	0d					  .byte LinkDisplacement
=$d5c2					XtPtr1 ::= *
=54590					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5c2	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5c5					en = *	; remember here
>d5c0	03					.byte CL	;wh_CodeLength
>d5c5	3e					.byte $3e
>d5c6	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=54603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5cb	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5cc	10					.byte WordFlags	;wh_Flags
>d5cd	03					.byte 3	;wh_CodeLength
>d5ce	0d					  .byte LinkDisplacement
=$d5cf					XtPtr1 ::= *
=54603					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5cf	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d5d2					en = *	; remember here
>d5cd	03					.byte CL	;wh_CodeLength
>d5d2	26					.byte $26
>d5d3	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=54617					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5d9	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5da	10					.byte WordFlags	;wh_Flags
>d5db	03					.byte 3	;wh_CodeLength
>d5dc	0e					  .byte LinkDisplacement
=$d5dd					XtPtr1 ::= *
=54617					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5dd	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d5e0					en = *	; remember here
>d5db	03					.byte CL	;wh_CodeLength
>d5e0	36					.byte $36
>d5e1	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=54628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e4	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5e5	10					.byte WordFlags	;wh_Flags
>d5e6	03					.byte 3	;wh_CodeLength
>d5e7	0b					  .byte LinkDisplacement
=$d5e8					XtPtr1 ::= *
=54628					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e8	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5eb					en = *	; remember here
>d5e6	03					.byte CL	;wh_CodeLength
>d5eb	6e					.byte $6e
>d5ec	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=54641					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f1	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5f2	10					.byte WordFlags	;wh_Flags
>d5f3	03					.byte 3	;wh_CodeLength
>d5f4	0d					  .byte LinkDisplacement
=$d5f5					XtPtr1 ::= *
=54641					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5f5	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5f8					en = *	; remember here
>d5f3	03					.byte CL	;wh_CodeLength
>d5f8	6a					.byte $6a
>d5f9	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=54654					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5fe	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5ff	10					.byte WordFlags	;wh_Flags
>d600	03					.byte 3	;wh_CodeLength
>d601	0d					  .byte LinkDisplacement
=$d602					XtPtr1 ::= *
=54654					WordListLink ::= Nt0 ; remember the nt of this word for later
.d602	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d605					en = *	; remember here
>d600	03					.byte CL	;wh_CodeLength
>d605	7e					.byte $7e
>d606	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=54667					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d60b	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d60c	10					.byte WordFlags	;wh_Flags
>d60d	03					.byte 3	;wh_CodeLength
>d60e	0d					  .byte LinkDisplacement
=$d60f					XtPtr1 ::= *
=54667					WordListLink ::= Nt0 ; remember the nt of this word for later
.d60f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d612					en = *	; remember here
>d60d	03					.byte CL	;wh_CodeLength
>d612	66					.byte $66
>d613	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=54681					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d619	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d61a	10					.byte WordFlags	;wh_Flags
>d61b	03					.byte 3	;wh_CodeLength
>d61c	0e					  .byte LinkDisplacement
=$d61d					XtPtr1 ::= *
=54681					WordListLink ::= Nt0 ; remember the nt of this word for later
.d61d	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d620					en = *	; remember here
>d61b	03					.byte CL	;wh_CodeLength
>d620	76					.byte $76
>d621	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=54692					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d624	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d625	10					.byte WordFlags	;wh_Flags
>d626	03					.byte 3	;wh_CodeLength
>d627	0b					  .byte LinkDisplacement
=$d628					XtPtr1 ::= *
=54692					WordListLink ::= Nt0 ; remember the nt of this word for later
.d628	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d62b					en = *	; remember here
>d626	03					.byte CL	;wh_CodeLength
>d62b	40					.byte $40
>d62c	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=54703					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d62f	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d630	10					.byte WordFlags	;wh_Flags
>d631	03					.byte 3	;wh_CodeLength
>d632	0b					  .byte LinkDisplacement
=$d633					XtPtr1 ::= *
=54703					WordListLink ::= Nt0 ; remember the nt of this word for later
.d633	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d636					en = *	; remember here
>d631	03					.byte CL	;wh_CodeLength
>d636	60					.byte $60
>d637	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=54714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d63a	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d63b	10					.byte WordFlags	;wh_Flags
>d63c	03					.byte 3	;wh_CodeLength
>d63d	0b					  .byte LinkDisplacement
=$d63e					XtPtr1 ::= *
=54714					WordListLink ::= Nt0 ; remember the nt of this word for later
.d63e	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d641					en = *	; remember here
>d63c	03					.byte CL	;wh_CodeLength
>d641	ed					.byte $ed
>d642	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=54727					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d647	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d648	10					.byte WordFlags	;wh_Flags
>d649	03					.byte 3	;wh_CodeLength
>d64a	0d					  .byte LinkDisplacement
=$d64b					XtPtr1 ::= *
=54727					WordListLink ::= Nt0 ; remember the nt of this word for later
.d64b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d64e					en = *	; remember here
>d649	03					.byte CL	;wh_CodeLength
>d64e	e9					.byte $e9
>d64f	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=54740					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d654	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d655	10					.byte WordFlags	;wh_Flags
>d656	03					.byte 3	;wh_CodeLength
>d657	0d					  .byte LinkDisplacement
=$d658					XtPtr1 ::= *
=54740					WordListLink ::= Nt0 ; remember the nt of this word for later
.d658	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d65b					en = *	; remember here
>d656	03					.byte CL	;wh_CodeLength
>d65b	fd					.byte $fd
>d65c	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=54753					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d661	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d662	10					.byte WordFlags	;wh_Flags
>d663	03					.byte 3	;wh_CodeLength
>d664	0d					  .byte LinkDisplacement
=$d665					XtPtr1 ::= *
=54753					WordListLink ::= Nt0 ; remember the nt of this word for later
.d665	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d668					en = *	; remember here
>d663	03					.byte CL	;wh_CodeLength
>d668	f9					.byte $f9
>d669	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=54766					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d66e	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d66f	10					.byte WordFlags	;wh_Flags
>d670	03					.byte 3	;wh_CodeLength
>d671	0d					  .byte LinkDisplacement
=$d672					XtPtr1 ::= *
=54766					WordListLink ::= Nt0 ; remember the nt of this word for later
.d672	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d675					en = *	; remember here
>d670	03					.byte CL	;wh_CodeLength
>d675	e5					.byte $e5
>d676	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54781					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d67d	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d67e	10					.byte WordFlags	;wh_Flags
>d67f	03					.byte 3	;wh_CodeLength
>d680	0f					  .byte LinkDisplacement
=$d681					XtPtr1 ::= *
=54781					WordListLink ::= Nt0 ; remember the nt of this word for later
.d681	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d684					en = *	; remember here
>d67f	03					.byte CL	;wh_CodeLength
>d684	f1					.byte $f1
>d685	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=54795					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d68b	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d68c	10					.byte WordFlags	;wh_Flags
>d68d	03					.byte 3	;wh_CodeLength
>d68e	0e					  .byte LinkDisplacement
=$d68f					XtPtr1 ::= *
=54795					WordListLink ::= Nt0 ; remember the nt of this word for later
.d68f	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d692					en = *	; remember here
>d68d	03					.byte CL	;wh_CodeLength
>d692	f5					.byte $f5
>d693	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d69a	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d69b	10					.byte WordFlags	;wh_Flags
>d69c	03					.byte 3	;wh_CodeLength
>d69d	0f					  .byte LinkDisplacement
=$d69e					XtPtr1 ::= *
=54810					WordListLink ::= Nt0 ; remember the nt of this word for later
.d69e	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d6a1					en = *	; remember here
>d69c	03					.byte CL	;wh_CodeLength
>d6a1	e1					.byte $e1
>d6a2	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=54821					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6a5	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6a6	10					.byte WordFlags	;wh_Flags
>d6a7	03					.byte 3	;wh_CodeLength
>d6a8	0b					  .byte LinkDisplacement
=$d6a9					XtPtr1 ::= *
=54821					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6a9	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6ac					en = *	; remember here
>d6a7	03					.byte CL	;wh_CodeLength
>d6ac	38					.byte $38
>d6ad	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=54832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b0	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6b1	10					.byte WordFlags	;wh_Flags
>d6b2	03					.byte 3	;wh_CodeLength
>d6b3	0b					  .byte LinkDisplacement
=$d6b4					XtPtr1 ::= *
=54832					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b4	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6b7					en = *	; remember here
>d6b2	03					.byte CL	;wh_CodeLength
>d6b7	f8					.byte $f8
>d6b8	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=54843					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6bb	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6bc	10					.byte WordFlags	;wh_Flags
>d6bd	03					.byte 3	;wh_CodeLength
>d6be	0b					  .byte LinkDisplacement
=$d6bf					XtPtr1 ::= *
=54843					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6bf	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6c2					en = *	; remember here
>d6bd	03					.byte CL	;wh_CodeLength
>d6c2	78					.byte $78
>d6c3	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=54854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6c6	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6c7	10					.byte WordFlags	;wh_Flags
>d6c8	03					.byte 3	;wh_CodeLength
>d6c9	0b					  .byte LinkDisplacement
=$d6ca					XtPtr1 ::= *
=54854					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6ca	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6cd					en = *	; remember here
>d6c8	03					.byte CL	;wh_CodeLength
>d6cd	8d					.byte $8d
>d6ce	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=54867					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6d3	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6d4	10					.byte WordFlags	;wh_Flags
>d6d5	03					.byte 3	;wh_CodeLength
>d6d6	0d					  .byte LinkDisplacement
=$d6d7					XtPtr1 ::= *
=54867					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6d7	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6da					en = *	; remember here
>d6d5	03					.byte CL	;wh_CodeLength
>d6da	9d					.byte $9d
>d6db	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=54880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e0	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6e1	10					.byte WordFlags	;wh_Flags
>d6e2	03					.byte 3	;wh_CodeLength
>d6e3	0d					  .byte LinkDisplacement
=$d6e4					XtPtr1 ::= *
=54880					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6e4	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6e7					en = *	; remember here
>d6e2	03					.byte CL	;wh_CodeLength
>d6e7	99					.byte $99
>d6e8	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=54893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6ed	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6ee	10					.byte WordFlags	;wh_Flags
>d6ef	03					.byte 3	;wh_CodeLength
>d6f0	0d					  .byte LinkDisplacement
=$d6f1					XtPtr1 ::= *
=54893					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f1	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d6f4					en = *	; remember here
>d6ef	03					.byte CL	;wh_CodeLength
>d6f4	85					.byte $85
>d6f5	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54908					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6fc	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d6fd	10					.byte WordFlags	;wh_Flags
>d6fe	03					.byte 3	;wh_CodeLength
>d6ff	0f					  .byte LinkDisplacement
=$d700					XtPtr1 ::= *
=54908					WordListLink ::= Nt0 ; remember the nt of this word for later
.d700	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d703					en = *	; remember here
>d6fe	03					.byte CL	;wh_CodeLength
>d703	91					.byte $91
>d704	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=54922					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d70a	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d70b	10					.byte WordFlags	;wh_Flags
>d70c	03					.byte 3	;wh_CodeLength
>d70d	0e					  .byte LinkDisplacement
=$d70e					XtPtr1 ::= *
=54922					WordListLink ::= Nt0 ; remember the nt of this word for later
.d70e	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d711					en = *	; remember here
>d70c	03					.byte CL	;wh_CodeLength
>d711	95					.byte $95
>d712	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54937					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d719	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d71a	10					.byte WordFlags	;wh_Flags
>d71b	03					.byte 3	;wh_CodeLength
>d71c	0f					  .byte LinkDisplacement
=$d71d					XtPtr1 ::= *
=54937					WordListLink ::= Nt0 ; remember the nt of this word for later
.d71d	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d720					en = *	; remember here
>d71b	03					.byte CL	;wh_CodeLength
>d720	81					.byte $81
>d721	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=54948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d724	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d725	10					.byte WordFlags	;wh_Flags
>d726	03					.byte 3	;wh_CodeLength
>d727	0b					  .byte LinkDisplacement
=$d728					XtPtr1 ::= *
=54948					WordListLink ::= Nt0 ; remember the nt of this word for later
.d728	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d72b					en = *	; remember here
>d726	03					.byte CL	;wh_CodeLength
>d72b	8e					.byte $8e
>d72c	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=54961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d731	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d732	10					.byte WordFlags	;wh_Flags
>d733	03					.byte 3	;wh_CodeLength
>d734	0d					  .byte LinkDisplacement
=$d735					XtPtr1 ::= *
=54961					WordListLink ::= Nt0 ; remember the nt of this word for later
.d735	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d738					en = *	; remember here
>d733	03					.byte CL	;wh_CodeLength
>d738	86					.byte $86
>d739	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=54975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d73f	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d740	10					.byte WordFlags	;wh_Flags
>d741	03					.byte 3	;wh_CodeLength
>d742	0e					  .byte LinkDisplacement
=$d743					XtPtr1 ::= *
=54975					WordListLink ::= Nt0 ; remember the nt of this word for later
.d743	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d746					en = *	; remember here
>d741	03					.byte CL	;wh_CodeLength
>d746	96					.byte $96
>d747	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=54986					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d74a	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d74b	10					.byte WordFlags	;wh_Flags
>d74c	03					.byte 3	;wh_CodeLength
>d74d	0b					  .byte LinkDisplacement
=$d74e					XtPtr1 ::= *
=54986					WordListLink ::= Nt0 ; remember the nt of this word for later
.d74e	20 1a d0	jsr $d01a		jsr asm_2
=3					CL	.var *-XtPtr1
=$d751					en = *	; remember here
>d74c	03					.byte CL	;wh_CodeLength
>d751	8c					.byte $8c
>d752	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=54999					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d757	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d758	10					.byte WordFlags	;wh_Flags
>d759	03					.byte 3	;wh_CodeLength
>d75a	0d					  .byte LinkDisplacement
=$d75b					XtPtr1 ::= *
=54999					WordListLink ::= Nt0 ; remember the nt of this word for later
.d75b	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d75e					en = *	; remember here
>d759	03					.byte CL	;wh_CodeLength
>d75e	84					.byte $84
>d75f	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=55013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d765	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d766	10					.byte WordFlags	;wh_Flags
>d767	03					.byte 3	;wh_CodeLength
>d768	0e					  .byte LinkDisplacement
=$d769					XtPtr1 ::= *
=55013					WordListLink ::= Nt0 ; remember the nt of this word for later
.d769	20 04 d0	jsr $d004		jsr asm_1
=3					CL	.var *-XtPtr1
=$d76c					en = *	; remember here
>d767	03					.byte CL	;wh_CodeLength
>d76c	94					.byte $94
>d76d	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=55024					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d770	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d771	10					.byte WordFlags	;wh_Flags
>d772	03					.byte 3	;wh_CodeLength
>d773	0b					  .byte LinkDisplacement
=$d774					XtPtr1 ::= *
=55024					WordListLink ::= Nt0 ; remember the nt of this word for later
.d774	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d777					en = *	; remember here
>d772	03					.byte CL	;wh_CodeLength
>d777	aa					.byte $aa
>d778	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=55035					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d77b	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d77c	10					.byte WordFlags	;wh_Flags
>d77d	03					.byte 3	;wh_CodeLength
>d77e	0b					  .byte LinkDisplacement
=$d77f					XtPtr1 ::= *
=55035					WordListLink ::= Nt0 ; remember the nt of this word for later
.d77f	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d782					en = *	; remember here
>d77d	03					.byte CL	;wh_CodeLength
>d782	a8					.byte $a8
>d783	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=55046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d786	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d787	10					.byte WordFlags	;wh_Flags
>d788	03					.byte 3	;wh_CodeLength
>d789	0b					  .byte LinkDisplacement
=$d78a					XtPtr1 ::= *
=55046					WordListLink ::= Nt0 ; remember the nt of this word for later
.d78a	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d78d					en = *	; remember here
>d788	03					.byte CL	;wh_CodeLength
>d78d	ba					.byte $BA
>d78e	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=55057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d791	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d792	10					.byte WordFlags	;wh_Flags
>d793	03					.byte 3	;wh_CodeLength
>d794	0b					  .byte LinkDisplacement
=$d795					XtPtr1 ::= *
=55057					WordListLink ::= Nt0 ; remember the nt of this word for later
.d795	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d798					en = *	; remember here
>d793	03					.byte CL	;wh_CodeLength
>d798	8a					.byte $8a
>d799	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=55068					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d79c	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d79d	10					.byte WordFlags	;wh_Flags
>d79e	03					.byte 3	;wh_CodeLength
>d79f	0b					  .byte LinkDisplacement
=$d7a0					XtPtr1 ::= *
=55068					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7a0	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d7a3					en = *	; remember here
>d79e	03					.byte CL	;wh_CodeLength
>d7a3	9a					.byte $9a
>d7a4	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=55079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7a7	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7a8	10					.byte WordFlags	;wh_Flags
>d7a9	03					.byte 3	;wh_CodeLength
>d7aa	0b					  .byte LinkDisplacement
=$d7ab					XtPtr1 ::= *
=55079					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ab	20 23 d0	jsr $d023		jsr asm_0
=3					CL	.var *-XtPtr1
=$d7ae					en = *	; remember here
>d7a9	03					.byte CL	;wh_CodeLength
>d7ae	98					.byte $98
=55079					asm_table = WordListLink ; head of instruction word list for disassembler
>d7af	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=55093					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7b5	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7b6	18					.byte WordFlags	;wh_Flags
>d7b7	03					.byte 3	;wh_CodeLength
>d7b8	0e					  .byte LinkDisplacement
=$d7b9					XtPtr1 ::= *
=55093					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7b9	a9 e7		lda #$e7			lda #<PushZA
.d7bb	a0 b7		ldy #$b7			ldy #>PushZA
.d7bd	4c 32 cd	jmp $cd32			jmp Jsr_Comma_YA
=7					CL	.var *-XtPtr1
=$d7c0					en = *	; remember here
>d7b7	07					.byte CL	;wh_CodeLength
>d7c0	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=55107					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7c3	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7c4	18					.byte WordFlags	;wh_Flags
>d7c5	03					.byte 3	;wh_CodeLength
>d7c6	0e					  .byte LinkDisplacement
=$d7c7					XtPtr1 ::= *
=55107					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7c7	4c 37 ca	jmp $ca37			jmp Here
=3					CL	.var *-XtPtr1
=$d7ca					en = *	; remember here
>d7c5	03					.byte CL	;wh_CodeLength
>d7ca	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=55116					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7cc	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7cd	08					.byte WordFlags	;wh_Flags
>d7ce	03					.byte 3	;wh_CodeLength
>d7cf	09					  .byte LinkDisplacement
=$d7d0					XtPtr1 ::= *
=55116					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CL	.var *-XtPtr1
=$d7d0					en = *	; remember here
>d7ce	00					.byte CL	;wh_CodeLength
.d7d0	60		rts				rts
>d7d1	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=55123					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d3	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7d4	18					.byte WordFlags	;wh_Flags
>d7d5	03					.byte 3	;wh_CodeLength
>d7d6	07					  .byte LinkDisplacement
=$d7d7					XtPtr1 ::= *
=55123					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7d7					asm_back_branch:
.d7d7	20 37 ca	jsr $ca37			jsr Here		; ( addr-l addr-h )
.d7da	20 c6 cb	jsr $cbc6			jsr Minus		; ( offset )
.d7dd	a9 fe		lda #$fe			lda #$fe
.d7df	4c 59 ca	jmp $ca59			jmp Minus_A
=11					CL	.var *-XtPtr1
=$d7e2					en = *	; remember here
>d7d5	0b					.byte CL	;wh_CodeLength
>d7e2	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=55144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7e8	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7e9	10					.byte WordFlags	;wh_Flags
>d7ea	03					.byte 3	;wh_CodeLength
>d7eb	15					  .byte LinkDisplacement
=$d7ec					XtPtr1 ::= *
=55144					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7ec					DisAsm:
.d7ec	20 81 c4	jsr $c481			jsr Bounds		; ( addr_end addr )
.d7ef					_instr:
.d7ef	20 38 b4	jsr $b438			jsr underflow_2
.d7f2	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7f4	d5 26		cmp $26,x			cmp DStack+2,x
.d7f6	b5 25		lda $25,x			lda DStack+1,x
.d7f8	f5 27		sbc $27,x			sbc DStack+3,x
.d7fa	90 03		bcc $d7ff			bcc +
.d7fc	4c 45 c5	jmp $c545			jmp Two_drop		; discard parms & return
.d7ff					+
.d7ff	20 75 ab	jsr $ab75			jsr CR			; new line
.d802	20 67 cf	jsr $cf67			jsr Dup			; print address
.d805	20 15 a9	jsr $a915			jsr Dot_Hex
.d808	20 dd cd	jsr $cddd			jsr Space
.d80b	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d80d	20 47 d9	jsr $d947			jsr _print_a
.d810	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d812	85 18		sta $18				sta tmp3
.d814	20 69 ca	jsr $ca69			jsr One_plus
.d817	a9 27		lda #$27			lda #<asm_table		; for each asm opcode word
.d819	a0 d7		ldy #$d7			ldy #>asm_table
.d81b	85 14		sta $14				sta tmp1+0
.d81d	84 15		sty $15				sty tmp1+1
.d81f	d0 05		bne $d826			bne _WTest
.d821	20 9b 82	jsr $829b	_WNext:		jsr LinkNext		;   next entry
.d824	f0 28		beq $d84e			beq _unknown
.d826	20 b9 bd	jsr $bdb9	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d829	a0 03		ldy #$03			ldy #3			;   opcode match?
.d82b	b1 16		lda ($16),y			lda (tmp2),y
.d82d	c5 18		cmp $18				cmp tmp3
.d82f	d0 f0		bne $d821			bne _WNext
.d831	a5 18		lda $18				lda tmp3		; save opcode
.d833	48		pha				pha
.d834	a5 15		lda $15				lda tmp1+1		; save its nt
.d836	48		pha				pha
.d837	a5 14		lda $14				lda tmp1+0
.d839	48		pha				pha
.d83a	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d83c	b1 16		lda ($16),y			lda (tmp2),y
.d83e	c9 23		cmp #$23			cmp #<asm_0		; goto disasm processor
.d840	f0 17		beq $d859			beq _c0
.d842	c9 04		cmp #$04			cmp #<asm_1
.d844	f0 49		beq $d88f			beq _c1
.d846	c9 1a		cmp #$1a			cmp #<asm_2
.d848	f0 61		beq $d8ab			beq _c2
.d84a	c9 e4		cmp #$e4			cmp #<asm_r
.d84c	f0 18		beq $d866			beq _cr
.d84e					_unknown:
.d84e	20 28 d9	jsr $d928			jsr _tab		; to source area
.d851	a9 3f		lda #$3f			lda #'?'
.d853	20 d1 cd	jsr $cdd1			jsr Emit_A
.d856	4c ef d7	jmp $d7ef			jmp _instr
.d859					_c0:
.d859	20 28 d9	jsr $d928			jsr _tab		; to source area
.d85c	68		pla				pla			; get opcode word nt
.d85d	a8		tay				tay
.d85e	68		pla				pla
.d85f	20 2d d9	jsr $d92d			jsr _print_opcode
.d862	68		pla				pla			; discard opcode
.d863	4c ef d7	jmp $d7ef			jmp _instr
.d866					_cr:
.d866	20 3e d9	jsr $d93e			jsr _get_byte		; get displacement byte
.d869	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d86b	09 00		ora #$00			ora #0
.d86d	10 01		bpl $d870			bpl +
.d86f	88		dey				dey
.d870	20 b8 b7	jsr $b7b8	+		jsr PushYA
.d873	20 67 cf	jsr $cf67			jsr Dup			; save for TypeSymbol
.d876	20 28 d9	jsr $d928			jsr _tab		; to source area
.d879	20 de cb	jsr $cbde			jsr Dot			; print dest address
.d87c	68		pla				pla			; get opcode word nt
.d87d	a8		tay				tay
.d87e	68		pla				pla
.d87f	20 2d d9	jsr $d92d			jsr _print_opcode
.d882	68		pla				pla			; discard opcode
.d883	20 40 cf	jsr $cf40			jsr Over		; calc dest addr
.d886	20 ae cb	jsr $cbae			jsr Plus
.d889	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d88c	4c ef d7	jmp $d7ef			jmp _instr
.d88f					_c1:
.d88f	20 3e d9	jsr $d93e			jsr _get_byte		; get operand
.d892	20 e7 b7	jsr $b7e7			jsr PushZA
.d895	20 28 d9	jsr $d928			jsr _tab		; to source area
.d898	20 67 cf	jsr $cf67			jsr Dup
.d89b	20 0f cc	jsr $cc0f			jsr U_Dot		; print operand
.d89e	68		pla				pla			; get opcode word nt
.d89f	a8		tay				tay
.d8a0	68		pla				pla
.d8a1	20 2d d9	jsr $d92d			jsr _print_opcode
.d8a4	68		pla				pla			; discard opcode
.d8a5	20 99 81	jsr $8199			jsr TypeSymbol
.d8a8	4c ef d7	jmp $d7ef			jmp _instr
.d8ab					_c2:
.d8ab	20 3e d9	jsr $d93e			jsr _get_byte		; get operand lo byte
.d8ae	48		pha				pha
.d8af	20 3e d9	jsr $d93e			jsr _get_byte		; get operand hi byte
.d8b2	ca		dex				dex			; push operand bytes
.d8b3	ca		dex				dex
.d8b4	95 25		sta $25,x			sta DStack+1,x
.d8b6	68		pla				pla
.d8b7	95 24		sta $24,x			sta DStack+0,x
.d8b9	20 28 d9	jsr $d928			jsr _tab		; to source area
.d8bc	20 67 cf	jsr $cf67			jsr Dup
.d8bf	20 0f cc	jsr $cc0f			jsr U_Dot		; print operand
.d8c2	68		pla				pla			; AY= opcode word nt
.d8c3	a8		tay				tay
.d8c4	68		pla				pla
.d8c5	20 2d d9	jsr $d92d			jsr _print_opcode
.d8c8	20 67 cf	jsr $cf67			jsr Dup
.d8cb	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8ce	68		pla				pla			; get opcode
.d8cf	c9 20		cmp #$20			cmp #$20		;  JSR
.d8d1	f0 09		beq $d8dc			beq _jsr
.d8d3	e8		inx		_jdrop:		inx			; Drop operand
.d8d4	e8		inx				inx
.d8d5	4c ef d7	jmp $d7ef			jmp _instr		; ( addr_end addr )
.d8d8	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8d9	e8		inx				inx
.d8da	d0 f7		bne $d8d3			bne _jdrop
.d8dc					_jsr:
.d8dc	20 fb b3	jsr $b3fb			jsr PopYA
.d8df	c9 ac		cmp #$ac			cmp #<sliteral_runtime	; string literal?
.d8e1	d0 42		bne $d925			bne _not_sliteral
.d8e3	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8e5	d0 3e		bne $d925			bne _not_sliteral
.d8e7	20 75 ab	jsr $ab75			jsr CR
.d8ea	20 67 cf	jsr $cf67			jsr Dup			; ( addr_end addr addr )
.d8ed	20 15 a9	jsr $a915			jsr Dot_Hex
.d8f0	20 dd cd	jsr $cddd			jsr Space
.d8f3	20 67 cf	jsr $cf67			jsr Dup			; ( addr_end ? addr )
.d8f6	20 3e d9	jsr $d93e			jsr _get_byte		; get JMP opcode
.d8f9	20 3e d9	jsr $d93e			jsr _get_byte		; get JMP addr lo byte
.d8fc	95 26		sta $26,x			sta DStack+2,x
.d8fe	20 3e d9	jsr $d93e			jsr _get_byte		; get JMP addr hi byte
.d901	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d903	20 75 ab	jsr $ab75			jsr CR
.d906	20 67 cf	jsr $cf67			jsr Dup
.d909	20 15 a9	jsr $a915			jsr Dot_Hex
.d90c	20 dd cd	jsr $cddd			jsr Space
.d90f	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d911	d5 26		cmp $26,x			cmp DStack+2,x
.d913	b5 25		lda $25,x			lda DStack+1,x
.d915	f5 27		sbc $27,x			sbc DStack+3,x
.d917	b0 06		bcs $d91f			bcs _slit_19
.d919	20 3e d9	jsr $d93e			jsr _get_byte
.d91c	4c 0f d9	jmp $d90f			jmp _slit_11
.d91f					_slit_19:
.d91f	20 9f c9	jsr $c99f			jsr Nip			; ( addr_end addr )
.d922	4c ef d7	jmp $d7ef			jmp _instr
.d925					_not_sliteral:
.d925	4c ef d7	jmp $d7ef			jmp _instr
.d928					_tab:
.d928	a9 09		lda #$09			lda #9
.d92a	4c d1 cd	jmp $cdd1			jmp Emit_A
.d92d					_print_opcode:
.d92d	20 75 cf	jsr $cf75			jsr PushAY		; save opcode word nt
.d930	20 dd cd	jsr $cddd			jsr Space
.d933	20 f5 bd	jsr $bdf5			jsr Name_To_String	; get name string
.d936	4c e9 cd	jmp $cde9			jmp Type		; type word name
.d939					_get_byte_silent:
.d939	a1 24		lda ($24,x)			lda (DStack+0,x)
.d93b	4c 69 ca	jmp $ca69			jmp One_plus
.d93e					_get_byte:
.d93e	20 39 d9	jsr $d939			jsr _get_byte_silent
.d941	48		pha				pha
.d942	20 47 d9	jsr $d947			jsr _print_a
.d945	68		pla				pla
.d946	60		rts				rts
.d947					_print_a:
.d947	20 e7 b7	jsr $b7e7			jsr PushZA
.d94a	20 f4 a8	jsr $a8f4			jsr C_Dot_Hex
.d94d	4c dd cd	jmp $cddd			jmp Space
=55144					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d950	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=55505					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d951	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=55505					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d952	11					.byte WordFlags	;wh_Flags
>d953	03					.byte 3	;wh_CodeLength
>d954	00 00					  .word WordListLink
=$d956					XtPtr1 ::= *
=55505					WordListLink ::= Nt0 ; remember the nt of this word for later
.d956	4c cd a4	jmp $a4cd	Editor_l:	jmp ListScr
=3					CL	.var *-XtPtr1
=$d959					en = *	; remember here
>d953	03					.byte CL	;wh_CodeLength
.d959					Editor_Screen_Helper:
.d959	20 67 cf	jsr $cf67			jsr Dup
.d95c	20 df a2	jsr $a2df			jsr Scr
.d95f	20 c2 ce	jsr $cec2			jsr Store
.d962	4c ea a3	jmp $a3ea			jmp Buffer
>d965	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d96d	72 65 65 6e
=55537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d971	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d972	10					.byte WordFlags	;wh_Flags
>d973	03					.byte 3	;wh_CodeLength
>d974	20					  .byte LinkDisplacement
=$d975					XtPtr1 ::= *
=55537					WordListLink ::= Nt0 ; remember the nt of this word for later
.d975					Editor_Enter_Screen:
.d975	20 59 d9	jsr $d959			jsr Editor_Screen_Helper
.d978	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d97a	95 24		sta $24,x	_loop:		sta DStack+0,x
.d97c	20 e7 b7	jsr $b7e7			jsr PushZA		; Put the current line number on the stack.
.d97f	20 df d9	jsr $d9df			jsr Editor_o		; prompt for overwrite.
.d982	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d984	b5 24		lda $24,x			lda DStack+0,x
.d986	c9 10		cmp #$10			cmp #16
.d988	90 f0		bcc $d97a			bcc _loop
.d98a	e8		inx				inx			; Drop work area
.d98b	e8		inx				inx
=23					CL	.var *-XtPtr1
=$d98c					en = *	; remember here
>d973	17					.byte CL	;wh_CodeLength
.d98c	60		rts				rts
>d98d	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=55569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d991	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d992	10					.byte WordFlags	;wh_Flags
>d993	03					.byte 3	;wh_CodeLength
>d994	20					  .byte LinkDisplacement
=$d995					XtPtr1 ::= *
=55569					WordListLink ::= Nt0 ; remember the nt of this word for later
.d995					Editor_line:
.d995	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d997	20 51 cb	jsr $cb51			jsr LShift_A	; *64 is same as left shift 6 times.
.d99a	20 df a2	jsr $a2df			jsr Scr
.d99d	20 a9 ce	jsr $cea9			jsr Fetch
.d9a0	20 82 a3	jsr $a382			jsr Block
.d9a3	4c ae cb	jmp $cbae			jmp Plus
=17					CL	.var *-XtPtr1
=$d9a6					en = *	; remember here
>d993	11					.byte CL	;wh_CodeLength
>d9a6	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9ae	72 65 65 6e
=55602					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9b2	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d9b3	10					.byte WordFlags	;wh_Flags
>d9b4	03					.byte 3	;wh_CodeLength
>d9b5	21					  .byte LinkDisplacement
=$d9b6					XtPtr1 ::= *
=55602					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9b6					Editor_Erase_Screen:
.d9b6	20 59 d9	jsr $d959			jsr Editor_Screen_Helper
.d9b9	a9 00		lda #$00			lda #<1024
.d9bb	a0 04		ldy #$04			ldy #>1024
.d9bd	20 b8 b7	jsr $b7b8			jsr PushYA
.d9c0	20 3c be	jsr $be3c			jsr Blank		; Erase the entire block (fill with spaces).
.d9c3	4c d7 a3	jmp $a3d7			jmp Update		; Mark buffer as updated.
=16					CL	.var *-XtPtr1
=$d9c6					en = *	; remember here
>d9b4	10					.byte CL	;wh_CodeLength
>d9c6	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=55624					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9c8	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9c9	10					.byte WordFlags	;wh_Flags
>d9ca	03					.byte 3	;wh_CodeLength
>d9cb	16					  .byte LinkDisplacement
=$d9cc					XtPtr1 ::= *
=55624					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9cc					Editor_el:
.d9cc	20 95 d9	jsr $d995			jsr Editor_line
.d9cf	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9d1	20 e7 b7	jsr $b7e7			jsr PushZA
.d9d4	20 3c be	jsr $be3c			jsr Blank		; Fill with spaces.
.d9d7	4c d7 a3	jmp $a3d7			jmp Update		; Mark buffer as updated.
=14					CL	.var *-XtPtr1
=$d9da					en = *	; remember here
>d9ca	0e					.byte CL	;wh_CodeLength
>d9da	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=55643					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9db	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9dc	10					.byte WordFlags	;wh_Flags
>d9dd	03					.byte 3	;wh_CodeLength
>d9de	13					  .byte LinkDisplacement
=$d9df					XtPtr1 ::= *
=55643					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9df					Editor_o:
.d9df	20 75 ab	jsr $ab75			jsr CR
.d9e2	20 67 cf	jsr $cf67			jsr Dup
.d9e5	a9 02		lda #$02			lda #2
.d9e7	20 41 cc	jsr $cc41			jsr U_Dot_R_A
.d9ea	20 dd cd	jsr $cddd			jsr Space
.d9ed	a9 2a		lda #$2a			lda #'*'
.d9ef	20 d1 cd	jsr $cdd1			jsr Emit_A
.d9f2	20 dd cd	jsr $cddd			jsr Space
.d9f5	20 95 d9	jsr $d995			jsr Editor_line
.d9f8	20 67 cf	jsr $cf67			jsr Dup		; Save a copy of the line address for later.
.d9fb	a9 40		lda #$40			lda #64		; chars/line
.d9fd	20 e7 b7	jsr $b7e7			jsr PushZA
.da00	20 b9 c2	jsr $c2b9			jsr Accept
.da03	20 67 cf	jsr $cf67			jsr Dup
.da06	20 87 ce	jsr $ce87			jsr Not_Rot
.da09	20 ae cb	jsr $cbae			jsr Plus
.da0c	a9 40		lda #$40			lda #64		; chars/line
.da0e	20 e7 b7	jsr $b7e7			jsr PushZA
.da11	20 62 ce	jsr $ce62			jsr Rot
.da14	20 c6 cb	jsr $cbc6			jsr Minus
.da17	20 3c be	jsr $be3c			jsr Blank
.da1a	4c d7 a3	jmp $a3d7			jmp Update
=62					CL	.var *-XtPtr1
=$da1d					en = *	; remember here
>d9dd	3e					.byte CL	;wh_CodeLength
=55643					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da1d	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da21	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da29	64 00
>da2b	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da33	64 20 00
>da36	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da3d	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da43	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da49	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da51					Exception_Text_List:
>da51	ff 00					.text $100+err_Abort,0
>da53	fe 00					.text $100+err_AbortQuote,0
>da55	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da5d	76 65 72 66 6c 6f 77 00
>da65	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da6d	6e 64 65 72 66 6c 6f 77 00
>da76	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da7e	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da8e	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>da9e	74 69 6f 6e 00
>daa3	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>daab	62 79 20 30 00
>dab0	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dab8	72 61 6e 67 65 00
>dabe	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dac6	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dad6	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dade	65 64 20 77 6f 72 64 00
>dae6	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>daee	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>dafe	6f 6e 6c 79 20 77 6f 72 64 00
>db08	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db10	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db1f	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db27	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db37	74 63 68 00
>db3b	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db43	20 6e 61 6d 65 00
>db49	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db51	65 61 64 00
>db55	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db5d	72 69 74 65 00
>db62	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db6a	64 65 20 62 79 20 7a 65 72 6f 00
>db75	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db7d	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db8d	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>db95	6b 20 6f 76 65 72 66 6c 6f 77 00
>dba0	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dba8	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbb4	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbbc	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbc9	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbd1	72 66 6c 6f 77 00
>dbd7	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbdf	45 00
>dbe1	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbe7	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbef	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dbf7	6f 74 20 73 65 74 00
>dbfe	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc06	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc14	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc1c	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc27	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc2f	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc3f	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-py65mon.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
=$f001					c65_putc	= $f001 ;  putc    Write here to send the byte to stdout
=$f003					c65_kbhit	= $f003 ;  kbit    Return non-zero if key ready to fetch with getc
=$f004					c65_getc	= $f004 ;  getc    Non-blocking read from stdin, returns 0 if no byte ready
=$f006					c65_start	= $f006 ;  start   Reading here starts the cycle counter
=$f007					c65_stop	= $f007 ;  stop    Reading here stops the cycle counter
=$f008					c65_cycles	= $f008 ; cycles  Current 32 bit cycle count in NUXI order
=$f010					c65_blkio	= $f010 ;  blkio   Write here to execute a block IO action (see below)
=$f011					c65_status	= $f011 ;  status  Read block IO status here
=$f012					c65_blknum	= $f012 ; blknum  word, Block number to read/write
=$f014					c65_buffer	= $f014 ; buffer  word, Start of 1024 byte memory buffer to read/write
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 83 f1	lda $f183,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 21 f1	jsr $f121	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	2c 06 f0	bit $f006			bit c65_start		; start the cycle counter
.f111	4c fd a0	jmp $a0fd	                jmp forth
.f114					kernel_getc:
.f114					_loop:
.f114	ee 35 03	inc $0335	                inc RndState+0	; randomize
.f117	ad 04 f0	lda $f004	                lda c65_getc
.f11a	f0 f8		beq $f114	                beq _loop
.f11c	60		rts		                rts
.f11d					kernel_havekey:
.f11d	ad 03 f0	lda $f003			lda c65_kbhit
.f120	60		rts				rts
.f121					kernel_putc:
.f121	8d 01 f0	sta $f001	                sta c65_putc
.f124	60		rts		                rts
.f125					platform_bye:
.f125	00		brk #		                brk
.f126					platform_CCAt:
.f126	ca		dex				dex			; allot DStack space
.f127	ca		dex				dex
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	2c 07 f0	bit $f007			bit c65_stop		; stop the cycle counter so we can read it
.f12d	ad 08 f0	lda $f008			lda c65_cycles+0	; cycles  Current 32 bit cycle count in NUXI order
.f130	95 24		sta $24,x			sta DStack+0,x
.f132	ad 09 f0	lda $f009			lda c65_cycles+1
.f135	95 25		sta $25,x			sta DStack+1,x
.f137	ad 0a f0	lda $f00a			lda c65_cycles+2
.f13a	95 26		sta $26,x			sta DStack+2,x
.f13c	ad 0b f0	lda $f00b			lda c65_cycles+3
.f13f	95 27		sta $27,x			sta DStack+3,x
.f141	2c 06 f0	bit $f006			bit c65_start		; restart the cycle counter
.f144	60		rts		                rts
.f145					Platform_Block_Read:
.f145	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f148	a9 01		lda #$01			lda #1			; read
.f14a	8d 10 f0	sta $f010			sta c65_blkio
.f14d	ad 11 f0	lda $f011			lda c65_status
.f150	f0 05		beq $f157			beq +
.f152	a9 df		lda #$df			lda #$100+err_BlockRead
.f154	20 80 b4	jsr $b480			jsr ThrowA
.f157	60		rts		+		rts
.f158					Platform_BlockParms:
.f158	20 fb b3	jsr $b3fb			jsr PopYA		; set block #
.f15b	8d 12 f0	sta $f012			sta c65_blknum+0
.f15e	8c 13 f0	sty $f013			sty c65_blknum+1
.f161	20 fb b3	jsr $b3fb			jsr PopYA		; set buffer addr
.f164	8d 14 f0	sta $f014			sta c65_buffer+0
.f167	8c 15 f0	sty $f015			sty c65_buffer+1
.f16a	a9 ff		lda #$ff			lda #$ff		; in case c65 isn't talking
.f16c	8d 11 f0	sta $f011			sta c65_status
.f16f	60		rts				rts
.f170					Platform_Block_Write:
.f170	20 58 f1	jsr $f158			jsr Platform_BlockParms
.f173	a9 02		lda #$02			lda #2			; write
.f175	8d 10 f0	sta $f010			sta c65_blkio
.f178	ad 11 f0	lda $f011			lda c65_status
.f17b	f0 05		beq $f182			beq +
.f17d	a9 de		lda #$de			lda #$100+err_BlockWrite
.f17f	20 80 b4	jsr $b480			jsr ThrowA
.f182	60		rts		+		rts
.f183					s_kernel_id:
>f183	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 remix default kernel for py65mon (31 May 2024)", AscLF, 0
>f18b	74 68 20 32 20 72 65 6d 69 78 20 64 65 66 61 75
>f19b	6c 74 20 6b 65 72 6e 65 6c 20 66 6f 72 20 70 79
>f1ab	36 35 6d 6f 6e 20 28 33 31 20 4d 61 79 20 32 30
>f1bb	32 34 29 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
