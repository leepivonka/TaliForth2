
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/65816S-listing.txt --labels=docs/65816S-labelmap.txt --output TaliForth-65816S.bin platform/platform-65816S.asm
; Mon Jul 01 19:26:03 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-65816S.asm

=$0100					RStack = $0100	; begin of 6502 Return Stack
=$ff					rsp0      = $ff		; initial Return Stack Pointer (6502 stack)
=$8000					cp_end    = $8000	; Last RAM byte available for code
=84					PadOffset = 84	; offset from CP to PAD (holds number strings)
=79					MAX_LINE_LENGTH  = 79      ; output line size
=20					DDim = 20	; # of cells in data stack
=10					FDim = 10	; # of entries in floating-point stack
=8					DoStkDim = 8	; # of entries in Do stack
=["cr","lf"]				TALI_OPTION_CR_EOL := [ "cr", "lf" ]
=$ff					bsize     = $ff		; size of input/output buffers
>0200					buffer0: .fill bsize	; input buffer

;******  Processing file: platform/../taliforth.asm

=					TALI_OPTIONAL_WORDS := ["fp","fpe", "fpieee","fptrancendentals", "fphyperbolic", "ed", "editor", "ramdrive", "block", "environment?", "assembler", "wordlist" ]
=-1					err_Abort		= -1
=-2					err_AbortQuote		= -2
=-3					err_Stack_Overflow	= -3
=-4					err_Stack_Underflow	= -4
=-5					err_Return_Stack_Overflow = -5
=-6					err_Return_Stack_Underflow = -6
=-7					err_DoLoop_TooDeep	= -7	; do-loops nested too deeply during execution
=-8					err_Dictionary_Overflow	= -8
=-9					err_InvalidMemoryAddr	= -9	; invalid memory address
=-10					err_DivideBy0		= -10	; division by zero
=-11					err_OutOfRange		= -11	; result out of range
=-12					err_ArgTypeMismatch	= -12	; argument type mismatch
=-13					err_UndefinedWord	= -13
=-14					err_CompileOnly		= -14	; interpreting a compile-only word
=-15					err_Forget		= -15	; invalid FORGET
=-16					err_EmptyName		= -16	; attempt to use zero-length string as a name
=-17					err_PicStringOverflow	= -17	; pictured numeric output string overflow
=-18					err_ParsedStringOverflow = -18	; parsed string overflow
=-19					err_NameTooLong		= -19	; definition name too long
=-20					err_WriteToRO		= -20	; write to a read-only location
=-21					err_Unsupported		= -21	; unsupported operation  (e.g., AT-XY on a too-dumb terminal)
=-22					err_ControlMismatch	= -22	; control structure mismatch
=-23					err_AddrAlignment	= -23	; address alignment exception
=-24					err_InvalidNumericArg	= -24	; invalid numeric argument
=-25					err_ReturnStackImbalance = -25	; return stack imbalance
=-26					err_LoopParmUnavailable = -26	; loop parameters unavailable
=-27					err_InvalidRecursion	= -27	; invalid recursion
=-28					err_UserInterrupt	= -28	; user interrupt
=-29					err_CompilerNesting	= -29	; compiler nesting
=-30					err_Obsolete		= -30	; obsolescent feature
=-31					err_NoBody		= -31	; >BODY used on non-CREATEd definition
=-32					err_InvalidName		= -32	; invalid name argument (e.g., TO name)
=-33					err_BlockRead		= -33	; block read exception
=-34					err_BlockWrite		= -34	; block write exception
=-35					err_InvalidBlock	= -35	; invalid block number
=-36					err_InvalidFilePosition = -36	; invalid file position
=-37					err_FileIO		= -37	; file I/O exception
=-38					err_FileMissing		= -38	; non-existent file
=-39					err_EndOfFile		= -39	; unexpected end of file
=-40					err_InvalidBase		= -40	; invalid BASE for floating point conversion
=-41					err_LossOfPrecision	= -41	; loss of precision
=-42					err_FPDivideBy0		= -42	; floating-point divide by zero
=-43					err_FPOutOfRange	= -43	; floating-point result out of range
=-44					err_FPStackOverflow	= -44	; floating-point stack overflow
=-45					err_FPStackUnderflow	= -45	; floating-point stack underflow
=-46					err_FPInvalidArg	= -46	; floating-point invalid argument
=-47					err_CompileWordsDeleted = -47	; compilation word list deleted
=-48					err_PostponeInvalid	= -48	; invalid POSTPONE
=-49					err_SearchOrderOverflow = -49	; search-order overflow
=-50					err_SearchOrderUnderflow = -50	; search-order underflow
=-51					err_CompileWordlistChanged = -51 ; compilation word list changed
=-52					err_ControlStackOverflow = -52	; control-flow stack overflow
=-53					err_ExceptionStackOverflow = -53 ; exception stack overflow
=-54					err_FPUnderflow		= -54	; floating-point underflow
=-55					err_FPFault		= -55	; floating-point unidentified fault
=-56					err_Quit		= -56	; QUIT
=-57					err_ConsoleIO		= -57	; exception in sending or receiving a character
=-58					err_BracketIf		= -58	; [IF], [ELSE], or [THEN] exception
=-59					err_Allocate		= -59	; ALLOCATE
=-60					err_Free		= -60	; FREE
=-61					err_Resize		= -61	; RESIZE
=-62					err_CloseFile		= -62	; CLOSE-FILE
=-63					err_CreateFile		= -63	; CREATE-FILE
=-64					err_DeleteFile		= -64	; DELETE-FILE
=-65					err_FilePosition	= -65	; FILE-POSITION
=-66					err_FileSize		= -66	; FILE-SIZE
=-67					err_FileStatus		= -67	; FILE-STATUS
=-68					err_FlushFile		= -68	; FLUSH-FILE
=-69					err_OpenFile		= -69	; OPEN-FILE
=-70					err_ReadFile		= -70	; READ-FILE
=-71					err_ReadLine		= -71	; READ-LINE
=-72					err_RenameFile		= -72	; RENAME-FILE
=-73					err_RepositionFile	= -73	; REPOSITION-FILE
=-74					err_ResizeFile		= -74	; RESIZE-FILE
=-75					err_WriteFile		= -75	; WRITE-FILE
=-76					err_WriteLine		= -76	; WRITE-LINE
=-77					err_MalformedXChar	= -77	; Malformed xchar
=-78					err_Substitute		= -78	; SUBSTITUTE
=-79					err_Replaces		= -79	; REPLACES
=-149					err_Refill		= -149	; Refill failed
=-150					err_Defer		= -150	; Defer not set
=-151					err_AlreadyInterpreting	= -151	; entering interpret when already interpreting
=-152					err_AlreadyCompiling	= -152	; entering compile when already compiling
=-154					err_TooManyWordlists   	= -154
.0000					zp0:
>0000					cp:	.word ?		; Compiler Pointer (see HERE)
>0002					InSrc:	.word ?		; input Source for SOURCE-ID
>0004					Cib:	.word ?		; address of current input buffer
>0006					CibLen:	.word ?		; length of current input buffer
>0008					ToIn:	.word ?		; pointer to CIB (>IN in Forth)
>000a					state:	.word ?		; STATE: -1 compile, 0 interpret
>000c					status: .word ?		; internal status flags
>000e					WorkWord: .word ?	; nt or xt of word being compiled (see status)
>0010					dp:	.word ?		; Dictionary Pointer temp
>0012					DoIndex: .word ?	; current Do index
>0014					tmp1:	.word ?		; temporary storage
>0016					tmp2:	.word ?		; temporary storage
>0018					tmp3:	.word ?		; temporary storage
>001a					tmp4:	.word ?		; temporary storage (tmpdsp)
>001c					tmp5:	.word ?		; temporary storage (tmptos)
>001e					editor1: .word ?	; temporary for editors
>0020					editor2: .word ?	; temporary for editors
>0022					editor3: .word ?	; temporary for editors
>0024					DStack:	.fill DDim*2	; data stack
=40					DStack0 = *-DStack	;   initial Data Stack index value
.8000					Cold_zp_table:
>8000	66 0b					.word cp0		; cp
>8002	00 00					.word 0			; insrc (SOURCE-ID is 0 for keyboard)
>8004	00 02					.word buffer0		; cib
>8006	00 00					.word 0			; ciblen
>8008	00 00					.word 0			; toin
>800a	00 00					.word 0			; state (0 = interpret)
>800c	00 00					.word 0			; status
=14					Cold_zp_table_length = *-Cold_zp_table
.02ff					User0:
>02ff					PrecisionV: .byte ?	; # of decimal places for FP print
>0300					base:	.word ?		; number radix, default decimal
>0302					nc_limit: .word ?	; limit for Native Compile size
>0304					uf_strip: .word ?	; flag to strip underflow detection code
>0306					output:	.word ?		; vector for EMIT
>0308					input:	.word ?		; vector for KEY
>030a					HaveKey: .word ?	; vector for KEY?
>030c					BlkV:	.word ?		; BLK
>030e					ScrV:	.word ?		; SCR
>0310					CurrentV: .byte ?	; CURRENT (byte) (Compilation wordlist)
>0311					Num_WordlistsV: .byte ?	; #WORDLISTS (byte)
=12					max_wordlists = 12	; Maximum number of wordlists supported
>0312					WordlistsV: .fill 2*max_wordlists	; WORDLISTS (cells)
>032a					Num_OrderV: .byte ?	; #ORDER (byte)
>032b					Search_OrderV: .fill 9	; SEARCH-ORDER (bytes)
.0334					MarkEnd:
>0334					ToHold:	.byte ?		; pad buffer index for formatted output
>0335					RndState: .dword ?	; random # state
=0					wid_Forth = 0
=1					wid_Editor = 1
=2					wid_Assembler = 2
=3					wid_Root = 3
.800e					Cold_user_table:
>800e	08					.byte 8			; PrecisionV
>800f	0a 00					.word 10		; base
>8011	08 00					.word 8			; nc-limit
>8013	00 00					.word 0			; uf_strip (off by default)
>8015	20 f1					.word kernel_putc	; output
>8017	11 f1					.word kernel_getc	; input
>8019	1b f1					.word kernel_havekey	; havekey
>801b	00 00					.word 0				; BLK
>801d	00 00					.word 0				; SCR
>801f	00					.byte 0				; CURRENT = FORTH-WORDLIST
>8020	04					.byte 4				; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>8021	21 cf					.word forth_dictionary_start	; FORTH-WORDLIST
>8023	60 d9					.word editor_dictionary_start	; EDITOR-WORDLIST
>8025	6d d7					.word assembler_dictionary_start ; ASSEMBLER-WORDLIST
>8027	62 cf					.word root_dictionary_start	; ROOT-WORDLIST
>8029	00 00 00 00 00 00 00 00			.word 0,0,0,0,0,0,0,0		; User wordlists
>8031	00 00 00 00 00 00 00 00
>8039	02					.byte 2				; #ORDER
>803a	00 02 00 00 00 00 00 00			.byte wid_Forth,wid_Assembler,0,0,0,0,0,0,0	; search-order
>8042	00
=53					Cold_user_table_length = *-Cold_user_table
=$03					AscCC   = $03	; break (CTRL-c)
=$07					AscBELL = $07	; bell sound
=$08					AscBS   = $08	; backspace
=$09					AscHT	= $09	; tab
=$0a					AscLF   = $0a	; line feed
=$0b					AScVT	= $0b	; vertical tab
=$0c					AscFF	= $0c	; form feed
=$0d					AscCR   = $0d	; carriage return
=$0e					AscCN   = $0e	; CTRL-n (used to recall next input history)
=$10					AscCP   = $10	; CTRL-p (used to recall previous input history)
=$1b					AscESC  = $1b	; escape
=$20					AscSP   = $20	; space
=$22					AscDQuote = $22	; double quote
=$5c					AscBackslash = $5c ; backslash
=$7f					AscDEL  = $7f	; delete (CTRL-h)
>0000							.fill $80	; |  unused space |   to align the last char of name
=127					wh_NameLastChar	= *-1		; |		  |   Note string is not zero-terminated
>0080					wh_HashNameLen:			    .byte ?	; |
=$e0					wh_HNL_HashMask =		    %11100000	; |      lo 3 bits of last char of name
=$1f					wh_HNL_NameLengthMask =		    %00011111	; |      length of name
>0081					wh_Flags:			    .byte ?	; |  flag bits
=$01					FP	=			    %00000001	; |	Far previous NT (two byte pointer rather than one byte offset)
=$02					DB	=			    %00000010	; |	Disjoint body (two byte pointer rather than adjoining body code)
=$04					CO	=			    %00000100	; |	Compile Only
=$08					IM	=			    %00001000	; |     Immediate Word
=$10					NN	=			    %00010000	; |	    | 1 | 0 |  NN : Word can only be called by JSR (never native)
=$20					AN	=			    %00100000  	; |	    | 0 | 1 |  AN : Word can only be inlined (always native)
=$30					ST	=			    %00110000	; |	    | 1 | 1 |  ST : Normal word with return stack juggling that
=3					wh_HeaderExtendMask =		     FP+DB	; |	of the header length directly by adding 4 to `flags & %00000011`.
=$40					UF	=			    %01000000   ; |     strippable underflow
>0082					wh_CodeLength:			   .byte ?	; |  Code length  |   Code length for native compile, max 255
.0083					wh_LinkNt:
=0					WordFlags .var 0 ; initialize for macro
=0					XtPtr1  .var 0  ; initialize for macro
=0					WordListLink .var 0	 ; start of FORTH wordlist
>8043	43 6f 6c 64			L1:	.text "Cold"	;  name of word as a string, ending at wh_NameLastChar
=32711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8047	84					.byte (("Cold"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32711					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>8048	11					.byte WordFlags	;wh_Flags
>8049	03					.byte 3	;wh_CodeLength
>804a	00 00					  .word WordListLink
=$804c					XtPtr1 ::= *
=32711					WordListLink ::= Nt0 ; remember the nt of this word for later
.804c					Cold:
.804c	d8		cld				cld
.804d	a2 ff		ldx #$ff			ldx #rsp0		; Initialize 6502 stack (Return Stack)
.804f	9a		txs				txs
.8050	a2 0d		ldx #$0d			ldx #Cold_zp_table_length-1 ; Initialize important zero page variables from ROM
.8052	bd 00 80	lda $8000,x	-		lda Cold_zp_table,x	;   We can use X here
.8055	95 00		sta $00,x			sta zp0,x		;   because Tali hasn't set up the param stack yet.
.8057	ca		dex				dex
.8058	10 f8		bpl $8052			bpl -
.805a	a0 34		ldy #$34			ldy #Cold_user_table_length-1	; Initialize the user variables.
.805c	b9 0e 80	lda $800e,y	-		lda Cold_user_table,y
.805f	99 ff 02	sta $02ff,y			sta User0,y
.8062	88		dey				dey
.8063	10 f7		bpl $805c			bpl -
.8065	20 f3 b4	jsr $b4f3			jsr Empty_Stack		; Clear Data Stack. This is repeated in ABORT, but this way we
.8068	20 f5 a1	jsr $a1f5			jsr BlockInit
.806b	20 75 ab	jsr $ab75			jsr CR
.806e	a9 9c		lda #$9c			lda #<forth_words_start		; push start address
.8070	a0 80		ldy #$80			ldy #>forth_words_start
.8072	20 bd b7	jsr $b7bd			jsr PushYA
.8075	a9 d2		lda #$d2			lda #<forth_words_len		; push length
.8077	a0 00		ldy #$00			ldy #>forth_words_len
.8079	20 bd b7	jsr $b7bd			jsr PushYA
.807c	20 0f b0	jsr $b00f			jsr Evaluate
.807f	a9 00		lda #$00			lda #0
.8081	8d 66 07	sta $0766			sta hist_buff
.8084	8d e6 07	sta $07e6			sta hist_buff+$80
.8087	8d 66 08	sta $0866			sta hist_buff+$100
.808a	8d e6 08	sta $08e6			sta hist_buff+$180
.808d	8d 66 09	sta $0966			sta hist_buff+$200
.8090	8d e6 09	sta $09e6			sta hist_buff+$280
.8093	8d 66 0a	sta $0a66			sta hist_buff+$300
.8096	8d e6 0a	sta $0ae6			sta hist_buff+$380
.8099	4c a5 b4	jmp $b4a5			jmp Abort_Core2	;Quit
=80					CL	.var *-XtPtr1
=$809c					en = *	; remember here
>8049	50					.byte CL	;wh_CodeLength
>809c	20 63 72 20 2e 28 20 54		forth_words_start: .binary "forth_words.asc" ; High-level Forth words, see forth_code/README.md
>80a4	61 6c 69 20 46 6f 72 74 68 20 32 20 72 65 6d 69
>80b4	78 20 66 6f 72 20 74 68 65 20 36 35 30 32 29 20
>80c4	63 72 20 2e 28 20 56 65 72 73 69 6f 6e 20 33 31
>80d4	2e 20 4d 61 79 20 32 30 32 34 20 29 20 63 72 20
>80e4	2e 28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31
>80f4	34 2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53
>8104	74 65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f
>8114	6c 77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c
>8124	69 20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20
>8134	77 69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20
>8144	4e 4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20
>8154	2e 28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f
>8164	20 65 78 69 74 29 20 63 72 20
=210					forth_words_len = *-forth_words_start
>816e					user_words_start: .binary "user_words.asc" ; User-defined Forth words, see forth_code/README.md
=0					user_words_len = *-user_words_start
>816e	4e 6f 4f 70			L1:	.text "NoOp"	;  name of word as a string, ending at wh_NameLastChar
=33010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8172	04					.byte (("NoOp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=299					LinkDisplacement = Nt0-WordListLink
=1						  WordFlags ::= WordFlags | FP
>8173	01					.byte WordFlags	;wh_Flags
>8174	03					.byte 3	;wh_CodeLength
>8175	c7 7f					  .word WordListLink
=$8177					XtPtr1 ::= *
=33010					WordListLink ::= Nt0 ; remember the nt of this word for later
.8177	ea		nop				nop
=1					CL	.var *-XtPtr1
=$8178					en = *	; remember here
>8174	01					.byte CL	;wh_CodeLength
.8178	60		rts				rts
>8179	43 43 40			L1:	.text "CC@"	;  name of word as a string, ending at wh_NameLastChar
=33020					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>817c	03					.byte (("CC@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>817d	12					.byte WordFlags	;wh_Flags
>817e	03					.byte 3	;wh_CodeLength
>817f	0a					  .byte LinkDisplacement
>8180	28 f1					  .word platform_CCAT
=0					XtPtr1 ::= 0
=33020					WordListLink ::= Nt0 ; remember the nt of this word for later
>8182	42 79 65			L1:	.text "Bye"	;  name of word as a string, ending at wh_NameLastChar
=33029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8185	a3					.byte (("Bye"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
=$12						  WordFlags ::= WordFlags | DB
>8186	12					.byte WordFlags	;wh_Flags
>8187	03					.byte 3	;wh_CodeLength
>8188	09					  .byte LinkDisplacement
>8189	27 f1					  .word platform_bye
=0					XtPtr1 ::= 0
=33029					WordListLink ::= Nt0 ; remember the nt of this word for later
>818b	54 79 70 65 53 79 6d 62		L1:	.text "TypeSymbol"	;  name of word as a string, ending at wh_NameLastChar
>8193	6f 6c
=33045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8195	8a					.byte (("TypeSymbol"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8196	10					.byte WordFlags	;wh_Flags
>8197	03					.byte 3	;wh_CodeLength
>8198	10					  .byte LinkDisplacement
=$8199					XtPtr1 ::= *
=33045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8199	20 0c b8	jsr $b80c	TypeSymbol:	jsr Two
.819c	20 a7 c4	jsr $c4a7			jsr Spaces
.819f	a9 28		lda #$28			lda #'('
.81a1	20 d6 cd	jsr $cdd6			jsr Emit_A
.81a4	20 e2 cd	jsr $cde2			jsr Space
.81a7	20 6c cf	jsr $cf6c			jsr Dup
.81aa	a9 24		lda #$24			lda #'$'
.81ac	20 d6 cd	jsr $cdd6			jsr Emit_A
.81af	20 15 a9	jsr $a915			jsr Dot_Hex
.81b2	20 e2 cd	jsr $cde2			jsr Space
.81b5	20 dc 81	jsr $81dc			jsr DictSearchXt	; ( addr_end addr operand offset nt )
.81b8	20 fa bd	jsr $bdfa			jsr Name_To_String	; Change nt into the name
.81bb	20 ee cd	jsr $cdee			jsr Type		; print it.
.81be	20 e2 cd	jsr $cde2			jsr Space
.81c1	b5 24		lda $24,x			lda DStack+0,x		; if non-zero offset
.81c3	15 25		ora $25,x			ora DStack+1,x
.81c5	f0 0b		beq $81d2			beq +
.81c7	a9 2b		lda #$2b			lda #'+'		;   print offset
.81c9	20 d6 cd	jsr $cdd6			jsr Emit_A
.81cc	20 6c cf	jsr $cf6c			jsr Dup
.81cf	20 14 cc	jsr $cc14			jsr U_Dot
.81d2	e8		inx		+		inx
.81d3	e8		inx				inx
.81d4	a9 29		lda #$29			lda #')'
.81d6	20 d6 cd	jsr $cdd6			jsr Emit_A
.81d9	4c e2 cd	jmp $cde2			jmp Space
=67					CL	.var *-XtPtr1
=$81dc					en = *	; remember here
>8197	43					.byte CL	;wh_CodeLength
.81dc					DictSearchXt:
.81dc	ca		dex				dex
.81dd	ca		dex				dex
.81de	20 45 cf	jsr $cf45			jsr Over
.81e1	a9 ff		lda #$ff			lda #$ff		; init best offset
.81e3	95 29		sta $29,x			sta DStack+5,x		; ( offset nt xt )
.81e5	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.81e7	48		pha				pha
.81e8	68		pla		_ListNext:	pla
.81e9	18		clc				clc
.81ea	69 02		adc #$02			adc #2			; to next wordlist
.81ec	c9 18		cmp #$18			cmp #max_wordlists*2
.81ee	b0 10		bcs $8200			bcs _ListDone
.81f0	48		pha				pha
.81f1	a8		tay				tay
.81f2	b9 12 03	lda $0312,y			lda WordlistsV+0,y	; Get the DP for that wordlist.
.81f5	85 14		sta $14				sta tmp1+0
.81f7	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.81fa	85 15		sta $15				sta tmp1+1
.81fc	d0 0a		bne $8208			bne _WordTest
.81fe	f0 e8		beq $81e8			beq _ListNext		;   empty list
.8200	e8		inx		_ListDone:	inx			; Drop pattern xt
.8201	e8		inx				inx			; ( offset nt )
.8202	60		rts				rts
.8203	20 9b 82	jsr $829b	_WordNext:	jsr LinkNext		; tmp1= next nt in list
.8206	f0 e0		beq $81e8			beq _ListNext		; end of Dictionary?
.8208	20 be bd	jsr $bdbe	_WordTest:	jsr NameToIntTmp	; tmp2 = xt of this word
.820b	38		sec				sec			; tmp3 = xt offset for this word
.820c	b5 24		lda $24,x			lda DStack+0,x
.820e	e5 16		sbc $16				sbc tmp2+0
.8210	85 18		sta $18				sta tmp3+0
.8212	b5 25		lda $25,x			lda DStack+1,x
.8214	e5 17		sbc $17				sbc tmp2+1
.8216	85 19		sta $19				sta tmp3+1
.8218	20 80 82	jsr $8280			jsr _test
.821b	a0 00		ldy #$00			ldy #0			; is this word a constant?
.821d	b1 16		lda ($16),y			lda (tmp2),y
.821f	c9 a0		cmp #$a0			cmp #$a0
.8221	f0 2a		beq $824d			beq _PushYA
.8223	c9 a9		cmp #$a9			cmp #$a9
.8225	f0 02		beq $8229			beq _PushZA
.8227	d0 da		bne $8203			bne _WordNext
.8229	c8		iny		_PushZA:	iny			; get lda # operand
.822a	b5 24		lda $24,x			lda DStack+0,x
.822c	f1 16		sbc ($16),y			sbc (tmp2),y
.822e	85 18		sta $18				sta tmp3+0
.8230	b5 25		lda $25,x			lda DStack+1,x
.8232	e9 00		sbc #$00			sbc #0
.8234	85 19		sta $19				sta tmp3+1
.8236	c8		iny				iny			; check jmp opcode
.8237	b1 16		lda ($16),y			lda (tmp2),y
.8239	c9 4c		cmp #$4c			cmp #$4c
.823b	d0 c6		bne $8203			bne _WordNext
.823d	c8		iny				iny			; check jmp operand lo
.823e	b1 16		lda ($16),y			lda (tmp2),y
.8240	c9 ec		cmp #$ec			cmp #<PushZA
.8242	d0 bf		bne $8203			bne _WordNext
.8244	c8		iny				iny			; check jmp operand hi
.8245	b1 16		lda ($16),y			lda (tmp2),y
.8247	c9 b7		cmp #$b7			cmp #>PushZA
.8249	f0 2f		beq $827a			beq _KTest
.824b	d0 b6		bne $8203			bne _WordNext
.824d	a0 02		ldy #$02	_PushYA:	ldy #2			; check LDA # opcode
.824f	b1 16		lda ($16),y			lda (tmp2),y
.8251	c9 a9		cmp #$a9			cmp #$a9
.8253	d0 ae		bne $8203			bne _WordNext
.8255	c8		iny				iny			; get lda # operand
.8256	b5 24		lda $24,x			lda DStack+0,x
.8258	f1 16		sbc ($16),y			sbc (tmp2),y
.825a	85 18		sta $18				sta tmp3+0
.825c	a0 01		ldy #$01			ldy #1			; get LDY # operand
.825e	b5 25		lda $25,x			lda DStack+1,x
.8260	f1 16		sbc ($16),y			sbc (tmp2),y
.8262	85 19		sta $19				sta tmp3+1
.8264	a0 04		ldy #$04			ldy #4			; check JMP opcode
.8266	b1 16		lda ($16),y			lda (tmp2),y
.8268	c9 4c		cmp #$4c			cmp #$4c
.826a	d0 97		bne $8203			bne _WordNext
.826c	c8		iny				iny			; check JMP operand lo
.826d	b1 16		lda ($16),y			lda (tmp2),y
.826f	c9 bd		cmp #$bd			cmp #<PushYA
.8271	d0 0a		bne $827d			bne _WordNext3
.8273	c8		iny				iny			; check JMP operand hi
.8274	b1 16		lda ($16),y			lda (tmp2),y
.8276	c9 b7		cmp #$b7			cmp #>PushYA
.8278	d0 03		bne $827d			bne _WordNext3
.827a	20 80 82	jsr $8280	_KTest:		jsr _test
.827d	4c 03 82	jmp $8203	_WordNext3:	jmp _WordNext
.8280					_test:
.8280	a5 18		lda $18				lda tmp3+0		; this word have smaller offset?
.8282	d5 28		cmp $28,x			cmp DStack+4,x
.8284	a5 19		lda $19				lda tmp3+1
.8286	f5 29		sbc $29,x			sbc DStack+5,x
.8288	b0 10		bcs $829a			bcs _trts
.828a	a5 18		lda $18				lda tmp3+0		;   save this better offset
.828c	a4 19		ldy $19				ldy tmp3+1
.828e	95 28		sta $28,x			sta DStack+4,x
.8290	94 29		sty $29,x			sty DStack+5,x
.8292	a5 14		lda $14				lda tmp1+0		;   save this better nt
.8294	a4 15		ldy $15				ldy tmp1+1
.8296	95 26		sta $26,x			sta DStack+2,x
.8298	94 27		sty $27,x			sty DStack+3,x
.829a	60		rts		_trts:		rts
.829b					LinkNext:
.829b	a0 81		ldy #$81			ldy #wh_Flags
.829d	b1 14		lda ($14),y			lda (tmp1),y
.829f	29 01		and #$01			and #FP
.82a1	f0 0e		beq $82b1			beq _LinkShort
.82a3	a0 84		ldy #$84	_LinkLong:	ldy #wh_LinkNt+1	; tmp1 = tmp1->LinkNt (ptr)
.82a5	b1 14		lda ($14),y			lda (tmp1),y
.82a7	48		pha				pha
.82a8	88		dey				dey
.82a9	b1 14		lda ($14),y			lda (tmp1),y
.82ab	85 14		sta $14				sta tmp1+0
.82ad	68		pla				pla
.82ae	85 15		sta $15				sta tmp1+1
.82b0	60		rts				rts
.82b1	a0 83		ldy #$83	_LinkShort:	ldy #wh_LinkNt		; tmp1 -= tmp1->LinkNt byte offset
.82b3	38		sec				sec
.82b4	a5 14		lda $14				lda tmp1+0
.82b6	f1 14		sbc ($14),y			sbc (tmp1),y
.82b8	85 14		sta $14				sta tmp1+0
.82ba	a5 15		lda $15				lda tmp1+1
.82bc	e9 00		sbc #$00			sbc #0
.82be	85 15		sta $15				sta tmp1+1
.82c0	60		rts				rts
>82c1	44 53 74 61 63 6b		L1:	.text "DStack"	;  name of word as a string, ending at wh_NameLastChar
=33351					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82c7	66					.byte (("DStack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=306					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>82c8	11					.byte WordFlags	;wh_Flags
>82c9	03					.byte 3	;wh_CodeLength
>82ca	15 81					  .word WordListLink
=$82cc					XtPtr1 ::= *
=33351					WordListLink ::= Nt0 ; remember the nt of this word for later
.82cc	a9 24		lda #$24			lda #DStack
.82ce	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$82d1					en = *	; remember here
>82c9	05					.byte CL	;wh_CodeLength
>82d1	52 53 74 61 63 6b		L1:	.text "RStack"	;  name of word as a string, ending at wh_NameLastChar
=33367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82d7	66					.byte (("RStack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>82d8	10					.byte WordFlags	;wh_Flags
>82d9	03					.byte 3	;wh_CodeLength
>82da	10					  .byte LinkDisplacement
=$82db					XtPtr1 ::= *
=33367					WordListLink ::= Nt0 ; remember the nt of this word for later
.82db	a0 01		ldy #$01			ldy #>RStack
.82dd	a9 00		lda #$00			lda #<RStack
.82df	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$82e2					en = *	; remember here
>82d9	07					.byte CL	;wh_CodeLength
>82e2	52 6e 64 53 74 61 74 65		L1:	.text "RndState"	;  name of word as a string, ending at wh_NameLastChar
=33386					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82ea	a8					.byte (("RndState"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>82eb	10					.byte WordFlags	;wh_Flags
>82ec	03					.byte 3	;wh_CodeLength
>82ed	13					  .byte LinkDisplacement
=$82ee					XtPtr1 ::= *
=33386					WordListLink ::= Nt0 ; remember the nt of this word for later
.82ee	a0 03		ldy #$03			ldy #>RndState
.82f0	a9 35		lda #$35			lda #<RndState
.82f2	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$82f5					en = *	; remember here
>82ec	07					.byte CL	;wh_CodeLength
>82f5	52 61 6e 64			L1:	.text "Rand"	;  name of word as a string, ending at wh_NameLastChar
=33401					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>82f9	84					.byte (("Rand"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>82fa	00					.byte WordFlags	;wh_Flags
>82fb	03					.byte 3	;wh_CodeLength
>82fc	0f					  .byte LinkDisplacement
=$82fd					XtPtr1 ::= *
=33401					WordListLink ::= Nt0 ; remember the nt of this word for later
.82fd					Rand:
.82fd	4e 36 03	lsr $0336			lsr RndState+1
.8300	6e 35 03	ror $0335			ror RndState+0
.8303	6e 38 03	ror $0338			ror RndState+3
.8306	6e 37 03	ror $0337			ror RndState+2
.8309	90 10		bcc $831b			bcc _19			;  IfCs,
.830b	ad 36 03	lda $0336			lda RndState+1
.830e	49 d0		eor #$d0			eor #$d0
.8310	8d 36 03	sta $0336			sta RndState+1
.8313	ad 37 03	lda $0337			lda RndState+2
.8316	49 01		eor #$01			eor #$01
.8318	8d 37 03	sta $0337			sta RndState+2
.831b					_19:
.831b	ad 37 03	lda $0337			lda RndState+2
.831e	ac 38 03	ldy $0338			ldy RndState+3
=36					CL	.var *-XtPtr1
=$8321					en = *	; remember here
>82fb	24					.byte CL	;wh_CodeLength
.8321	60		rts				rts
>8322	52 61 6e 64 4d			L1:	.text "RandM"	;  name of word as a string, ending at wh_NameLastChar
=33447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8327	a5					.byte (("RandM"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>8328	10					.byte WordFlags	;wh_Flags
>8329	03					.byte 3	;wh_CodeLength
>832a	2e					  .byte LinkDisplacement
=$832b					XtPtr1 ::= *
=33447					WordListLink ::= Nt0 ; remember the nt of this word for later
.832b	20 6c cf	jsr $cf6c	RandM:		jsr Dup		; ( umod umod )
.832e	20 fd 82	jsr $82fd			jsr Rand
.8331	4a		lsr a				lsr a		; make positive
.8332	95 27		sta $27,x			sta DStack+3,x
.8334	94 26		sty $26,x			sty DStack+2,x	; ( rand umod )
.8336	4c 85 af	jmp $af85			jmp Mod
=14					CL	.var *-XtPtr1
=$8339					en = *	; remember here
>8329	0e					.byte CL	;wh_CodeLength
>004c					FIndex:	.byte ?		; floating-point stack index. empty=FDim, full=0
>004d					FSExp:   .fill FDim	; FP stack exponent        array
>0057					FSMant0: .fill FDim	; FP stack mantissa MSByte array
>0061					FSMant1: .fill FDim	; FP stack mantissa 2nd    array
>006b					FSMant2: .fill FDim	; FP stack mantissa 3rd    array
>0075					FSMant3: .fill FDim	; FP stack mantissa 4th    array
>8339	46 49 6e 64 65 78		L1:	.text "FIndex"	;  name of word as a string, ending at wh_NameLastChar
=33471					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>833f	06					.byte (("FIndex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8340	10					.byte WordFlags	;wh_Flags
>8341	03					.byte 3	;wh_CodeLength
>8342	18					  .byte LinkDisplacement
=$8343					XtPtr1 ::= *
=33471					WordListLink ::= Nt0 ; remember the nt of this word for later
.8343	a9 4c		lda #$4c			lda #FIndex
.8345	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8348					en = *	; remember here
>8341	05					.byte CL	;wh_CodeLength
>8348	46 44 69 6d			L1:	.text "FDim"	;  name of word as a string, ending at wh_NameLastChar
=33484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>834c	a4					.byte (("FDim"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>834d	10					.byte WordFlags	;wh_Flags
>834e	03					.byte 3	;wh_CodeLength
>834f	0d					  .byte LinkDisplacement
=$8350					XtPtr1 ::= *
=33484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8350	a9 0a		lda #$0a			lda #FDim
.8352	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8355					en = *	; remember here
>834e	05					.byte CL	;wh_CodeLength
>8355	46 53 45 78 70			L1:	.text "FSExp"	;  name of word as a string, ending at wh_NameLastChar
=33498					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>835a	05					.byte (("FSExp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>835b	10					.byte WordFlags	;wh_Flags
>835c	03					.byte 3	;wh_CodeLength
>835d	0e					  .byte LinkDisplacement
=$835e					XtPtr1 ::= *
=33498					WordListLink ::= Nt0 ; remember the nt of this word for later
.835e	a9 4d		lda #$4d			lda #FSExp
.8360	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8363					en = *	; remember here
>835c	05					.byte CL	;wh_CodeLength
>8363	46 53 4d 61 6e 74 30		L1:	.text "FSMant0"	;  name of word as a string, ending at wh_NameLastChar
=33514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>836a	07					.byte (("FSMant0"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>836b	10					.byte WordFlags	;wh_Flags
>836c	03					.byte 3	;wh_CodeLength
>836d	10					  .byte LinkDisplacement
=$836e					XtPtr1 ::= *
=33514					WordListLink ::= Nt0 ; remember the nt of this word for later
.836e	a9 57		lda #$57			lda #FSMant0
.8370	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8373					en = *	; remember here
>836c	05					.byte CL	;wh_CodeLength
>8373	46 53 4d 61 6e 74 31		L1:	.text "FSMant1"	;  name of word as a string, ending at wh_NameLastChar
=33530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>837a	27					.byte (("FSMant1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>837b	10					.byte WordFlags	;wh_Flags
>837c	03					.byte 3	;wh_CodeLength
>837d	10					  .byte LinkDisplacement
=$837e					XtPtr1 ::= *
=33530					WordListLink ::= Nt0 ; remember the nt of this word for later
.837e	a9 61		lda #$61			lda #FSMant1
.8380	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8383					en = *	; remember here
>837c	05					.byte CL	;wh_CodeLength
>8383	46 53 4d 61 6e 74 32		L1:	.text "FSMant2"	;  name of word as a string, ending at wh_NameLastChar
=33546					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>838a	47					.byte (("FSMant2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>838b	10					.byte WordFlags	;wh_Flags
>838c	03					.byte 3	;wh_CodeLength
>838d	10					  .byte LinkDisplacement
=$838e					XtPtr1 ::= *
=33546					WordListLink ::= Nt0 ; remember the nt of this word for later
.838e	a9 6b		lda #$6b			lda #FSMant2
.8390	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$8393					en = *	; remember here
>838c	05					.byte CL	;wh_CodeLength
>8393	46 53 4d 61 6e 74 33		L1:	.text "FSMant3"	;  name of word as a string, ending at wh_NameLastChar
=33562					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>839a	67					.byte (("FSMant3"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>839b	10					.byte WordFlags	;wh_Flags
>839c	03					.byte 3	;wh_CodeLength
>839d	10					  .byte LinkDisplacement
=$839e					XtPtr1 ::= *
=33562					WordListLink ::= Nt0 ; remember the nt of this word for later
.839e	a9 75		lda #$75			lda #FSMant3
.83a0	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$83a3					en = *	; remember here
>839c	05					.byte CL	;wh_CodeLength
>83a3	46 6c 6f 61 74 2b		L1:	.text "Float+"	;  name of word as a string, ending at wh_NameLastChar
=33577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83a9	66					.byte (("Float+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83aa	10					.byte WordFlags	;wh_Flags
>83ab	03					.byte 3	;wh_CodeLength
>83ac	0f					  .byte LinkDisplacement
=$83ad					XtPtr1 ::= *
=33577					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ad	a9 05		lda #$05	FloatPlus:	lda #5
.83af	4c 20 ca	jmp $ca20			jmp Plus_A
=5					CL	.var *-XtPtr1
=$83b2					en = *	; remember here
>83ab	05					.byte CL	;wh_CodeLength
>83b2	46 6c 6f 61 74 73		L1:	.text "Floats"	;  name of word as a string, ending at wh_NameLastChar
=33592					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83b8	66					.byte (("Floats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>83b9	10					.byte WordFlags	;wh_Flags
>83ba	03					.byte 3	;wh_CodeLength
>83bb	0f					  .byte LinkDisplacement
=$83bc					XtPtr1 ::= *
=33592					WordListLink ::= Nt0 ; remember the nt of this word for later
.83bc	a9 05		lda #$05	Floats:		lda #5
.83be	20 ec b7	jsr $b7ec			jsr PushZA
.83c1	4c 9b ae	jmp $ae9b			jmp Star
=8					CL	.var *-XtPtr1
=$83c4					en = *	; remember here
>83ba	08					.byte CL	;wh_CodeLength
>83c4	46 41 6c 69 67 6e		L1:	.text "FAlign"	;  name of word as a string, ending at wh_NameLastChar
=33610					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83ca	c6					.byte (("FAlign"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>83cb	00					.byte WordFlags	;wh_Flags
>83cc	03					.byte 3	;wh_CodeLength
>83cd	12					  .byte LinkDisplacement
=$83ce					XtPtr1 ::= *
=33610					WordListLink ::= Nt0 ; remember the nt of this word for later
.83ce					FAlign:
=0					CL	.var *-XtPtr1
=$83ce					en = *	; remember here
>83cc	00					.byte CL	;wh_CodeLength
.83ce	60		rts				rts
>83cf	46 41 6c 69 67 6e 65 64		L1:	.text "FAligned"	;  name of word as a string, ending at wh_NameLastChar
=33623					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83d7	88					.byte (("FAligned"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>83d8	00					.byte WordFlags	;wh_Flags
>83d9	03					.byte 3	;wh_CodeLength
>83da	0d					  .byte LinkDisplacement
=$83db					XtPtr1 ::= *
=33623					WordListLink ::= Nt0 ; remember the nt of this word for later
.83db					FAligned:
=0					CL	.var *-XtPtr1
=$83db					en = *	; remember here
>83d9	00					.byte CL	;wh_CodeLength
.83db	60		rts				rts
>83dc	48 65 78 3e 46			L1:	.text "Hex>F"	;  name of word as a string, ending at wh_NameLastChar
=33633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>83e1	c5					.byte (("Hex>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>83e2	10					.byte WordFlags	;wh_Flags
>83e3	03					.byte 3	;wh_CodeLength
>83e4	0a					  .byte LinkDisplacement
=$83e5					XtPtr1 ::= *
=33633					WordListLink ::= Nt0 ; remember the nt of this word for later
.83e5	20 c2 84	jsr $84c2	HexToF:		jsr FAllocX		; alloc FP stack entry, X= fp stack index
.83e8	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.83ea	a4 4c		ldy $4c				ldy FIndex		; Y= FP stack index
.83ec	20 e5 b3	jsr $b3e5			jsr PopA		; pop n_exp
.83ef	99 4d 00	sta $004d,y			sta FSExp,y
.83f2	b5 25		lda $25,x			lda DStack+1,x
.83f4	99 57 00	sta $0057,y			sta FSMant0,y
.83f7	b5 24		lda $24,x			lda DStack+0,x
.83f9	99 61 00	sta $0061,y			sta FSMant1,y
.83fc	b5 27		lda $27,x			lda DStack+3,x
.83fe	99 6b 00	sta $006b,y			sta FSMant2,y
.8401	b5 26		lda $26,x			lda DStack+2,x
.8403	99 75 00	sta $0075,y			sta FSMant3,y
.8406	4c 4a c5	jmp $c54a			jmp Two_Drop
=36					CL	.var *-XtPtr1
=$8409					en = *	; remember here
>83e3	24					.byte CL	;wh_CodeLength
>8409	46 3e 48 65 78			L1:	.text "F>Hex"	;  name of word as a string, ending at wh_NameLastChar
=33678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>840e	05					.byte (("F>Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>840f	10					.byte WordFlags	;wh_Flags
>8410	03					.byte 3	;wh_CodeLength
>8411	2d					  .byte LinkDisplacement
=$8412					XtPtr1 ::= *
=33678					WordListLink ::= Nt0 ; remember the nt of this word for later
.8412	a4 4c		ldy $4c		FToHex:		ldy FIndex	; Y= FP stack index
.8414	ca		dex				dex
.8415	ca		dex				dex
.8416	ca		dex				dex
.8417	ca		dex				dex
.8418	ca		dex				dex
.8419	ca		dex				dex
.841a	b9 57 00	lda $0057,y			lda FSMant0,y	; copy mantissa
.841d	95 27		sta $27,x			sta DStack+3,x
.841f	b9 61 00	lda $0061,y			lda FSMant1,y
.8422	95 26		sta $26,x			sta DStack+2,x
.8424	b9 6b 00	lda $006b,y			lda FSMant2,y
.8427	95 29		sta $29,x			sta DStack+5,x
.8429	b9 75 00	lda $0075,y			lda FSMant3,y
.842c	95 28		sta $28,x			sta DStack+4,x
.842e	b9 4d 00	lda $004d,y			lda FSExp,y	; copy exponent
.8431	95 24		sta $24,x			sta DStack+0,x
.8433	29 80		and #$80			and #$80	;   sign extend
.8435	f0 02		beq $8439			beq +
.8437	a9 ff		lda #$ff			lda #$ff
.8439	95 25		sta $25,x	+		sta DStack+1,x
.843b	e6 4c		inc $4c				inc FIndex	; FDrop
.843d	60		rts				rts
=44					CL	.var *-XtPtr1
=$843e					en = *	; remember here
>8410	2c					.byte CL	;wh_CodeLength
>843e	46 2e 48 65 78			L1:	.text "F.Hex"	;  name of word as a string, ending at wh_NameLastChar
=33731					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8443	05					.byte (("F.Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>8444	10					.byte WordFlags	;wh_Flags
>8445	03					.byte 3	;wh_CodeLength
>8446	35					  .byte LinkDisplacement
=$8447					XtPtr1 ::= *
=33731					WordListLink ::= Nt0 ; remember the nt of this word for later
.8447	20 12 84	jsr $8412	FDotHex:	jsr FToHex	; get parts of r
.844a	20 8c ce	jsr $ce8c			jsr Not_Rot
.844d	20 15 a9	jsr $a915			jsr Dot_Hex	; do mantissa
.8450	20 15 a9	jsr $a915			jsr Dot_Hex
.8453	a9 3a		lda #$3a			lda #':'
.8455	20 d6 cd	jsr $cdd6			jsr Emit_A
.8458	4c f4 a8	jmp $a8f4			jmp C_Dot_Hex	; do exponent
=20					CL	.var *-XtPtr1
=$845b					en = *	; remember here
>8445	14					.byte CL	;wh_CodeLength
>845b	46 43 6d 70 41			L1:	.text "FCmpA"	;  name of word as a string, ending at wh_NameLastChar
=33760					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8460	25					.byte (("FCmpA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8461	10					.byte WordFlags	;wh_Flags
>8462	03					.byte 3	;wh_CodeLength
>8463	1d					  .byte LinkDisplacement
=$8464					XtPtr1 ::= *
=33760					WordListLink ::= Nt0 ; remember the nt of this word for later
.8464	86 14		stx $14		FCmpA:		stx tmp1		; save data stack index
.8466	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8468	b5 57		lda $57,x			lda FSMant0+0,x		; r2 mantissa = 0 ?
.846a	f0 35		beq $84a1			beq _r2Zero
.846c	b4 58		ldy $58,x			ldy FSMant0+1,x		; r1 mantissa = 0 ?
.846e	f0 2b		beq $849b			beq _r1Zero
.8470	55 58		eor $58,x			eor FSMant0+1,x		; compare mantissa sign
.8472	30 3d		bmi $84b1			bmi _MantissaSignDifferent
.8474	38		sec				sec			; compare exponent
.8475	b5 4e		lda $4e,x			lda FSExp+1,x
.8477	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8479	d0 2b		bne $84a6			bne _ExponentDifferent
.847b	98		tya				tya			; compare mantissa MSB
.847c	f5 57		sbc $57,x			sbc FSMant0+0,x		;   always same sign so can't overflow
.847e	d0 17		bne $8497			bne _13
.8480	b5 62		lda $62,x			lda FSMant1+1,x		; compare mantissa 1
.8482	f5 61		sbc $61,x			sbc FSMant1+0,x
.8484	d0 0c		bne $8492			bne _12
.8486	b5 6c		lda $6c,x			lda FSMant2+1,x		; compare mantissa 2
.8488	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.848a	d0 06		bne $8492			bne _12
.848c	b5 76		lda $76,x			lda FSMant3+1,x		; compare mantissa LSB
.848e	f5 75		sbc $75,x			sbc FSMant3+0,x
.8490	f0 05		beq $8497			beq _13
.8492	6a		ror a		_12:		ror a
.8493	49 80		eor #$80	_14:		eor #$80
.8495	09 01		ora #$01			ora #1
.8497	a6 14		ldx $14		_13:		ldx tmp1		; restore data stack index
.8499	a8		tay				tay			; set CPU flags
.849a	60		rts				rts
.849b	b5 57		lda $57,x	_r1Zero:	lda FSMant0+0,x		; return r2
.849d	d0 f4		bne $8493			bne _14
.849f	f0 f6		beq $8497			beq _13
.84a1	b5 58		lda $58,x	_r2Zero:	lda FSMant0+1,x		; return 0-r1
.84a3	4c 97 84	jmp $8497			jmp _13
.84a6					_ExponentDifferent:
.84a6	50 02		bvc $84aa			bvc +
.84a8	49 80		eor #$80			eor #$80
.84aa					+
.84aa	55 57		eor $57,x			eor FSMant0+0,x
.84ac	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84ae	09 01		ora #$01			ora #1			; set CPU flags
.84b0	60		rts				rts
.84b1					_MantissaSignDifferent:
.84b1	98		tya				tya
.84b2	a6 14		ldx $14				ldx tmp1		; restore data stack index
.84b4	09 01		ora #$01			ora #1
.84b6	60		rts				rts
=83					CL	.var *-XtPtr1
=$84b7					en = *	; remember here
>8462	53					.byte CL	;wh_CodeLength
>84b7	46 41 6c 6c 6f 63 58		L1:	.text "FAllocX"	;  name of word as a string, ending at wh_NameLastChar
=33854					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84be	07					.byte (("FAllocX"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=94					LinkDisplacement = Nt0-WordListLink
>84bf	10					.byte WordFlags	;wh_Flags
>84c0	03					.byte 3	;wh_CodeLength
>84c1	5e					  .byte LinkDisplacement
=$84c2					XtPtr1 ::= *
=33854					WordListLink ::= Nt0 ; remember the nt of this word for later
.84c2	86 14		stx $14		FAllocX:	stx tmp1+0	; save data stack index
.84c4	a6 4c		ldx $4c				ldx FIndex	; X= floating point stack index
.84c6	ca		dex				dex		; alloc FP stack entry
.84c7	e0 0a		cpx #$0a			cpx #FDim	; overflow or underflow?
.84c9	b0 03		bcs $84ce			bcs _err
.84cb	86 4c		stx $4c				stx FIndex
.84cd	60		rts				rts		; return X= FP stack index
.84ce	08		php		_err:		php		; save sign bit
.84cf	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.84d1	28		plp				plp		; restore sign bit
.84d2	4c 56 b4	jmp $b456			jmp Throw_FPStack
=19					CL	.var *-XtPtr1
=$84d5					en = *	; remember here
>84c0	13					.byte CL	;wh_CodeLength
>84d5	46 4d 61 78			L1:	.text "FMax"	;  name of word as a string, ending at wh_NameLastChar
=33881					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84d9	04					.byte (("FMax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>84da	10					.byte WordFlags	;wh_Flags
>84db	03					.byte 3	;wh_CodeLength
>84dc	1b					  .byte LinkDisplacement
=$84dd					XtPtr1 ::= *
=33881					WordListLink ::= Nt0 ; remember the nt of this word for later
.84dd	20 64 84	jsr $8464	FMax:		jsr FCmpA
.84e0	10 2c		bpl $850e			bpl FDrop
.84e2	30 44		bmi $8528			bmi FNip
=7					CL	.var *-XtPtr1
=$84e4					en = *	; remember here
>84db	07					.byte CL	;wh_CodeLength
>84e4	46 4d 69 6e			L1:	.text "FMin"	;  name of word as a string, ending at wh_NameLastChar
=33896					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84e8	c4					.byte (("FMin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>84e9	10					.byte WordFlags	;wh_Flags
>84ea	03					.byte 3	;wh_CodeLength
>84eb	0f					  .byte LinkDisplacement
=$84ec					XtPtr1 ::= *
=33896					WordListLink ::= Nt0 ; remember the nt of this word for later
.84ec	20 64 84	jsr $8464	FMin:		jsr FCmpA
.84ef	30 1d		bmi $850e			bmi FDrop
.84f1	10 35		bpl $8528			bpl FNip
=7					CL	.var *-XtPtr1
=$84f3					en = *	; remember here
>84ea	07					.byte CL	;wh_CodeLength
>84f3	46 44 65 70 74 68		L1:	.text "FDepth"	;  name of word as a string, ending at wh_NameLastChar
=33913					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>84f9	06					.byte (("FDepth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>84fa	10					.byte WordFlags	;wh_Flags
>84fb	03					.byte 3	;wh_CodeLength
>84fc	11					  .byte LinkDisplacement
=$84fd					XtPtr1 ::= *
=33913					WordListLink ::= Nt0 ; remember the nt of this word for later
.84fd	a9 0a		lda #$0a	FDepth:		lda #FDim
.84ff	38		sec				sec
.8500	e5 4c		sbc $4c				sbc FIndex
.8502	4c ec b7	jmp $b7ec			jmp PushZA
=8					CL	.var *-XtPtr1
=$8505					en = *	; remember here
>84fb	08					.byte CL	;wh_CodeLength
>8505	46 44 72 6f 70			L1:	.text "FDrop"	;  name of word as a string, ending at wh_NameLastChar
=33930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>850a	05					.byte (("FDrop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>850b	00					.byte WordFlags	;wh_Flags
>850c	03					.byte 3	;wh_CodeLength
>850d	11					  .byte LinkDisplacement
=$850e					XtPtr1 ::= *
=33930					WordListLink ::= Nt0 ; remember the nt of this word for later
.850e	e6 4c		inc $4c		FDrop:		inc FIndex
=2					CL	.var *-XtPtr1
=$8510					en = *	; remember here
>850c	02					.byte CL	;wh_CodeLength
.8510	60		rts				rts
>8511	46 32 44 72 6f 70		L1:	.text "F2Drop"	;  name of word as a string, ending at wh_NameLastChar
=33943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8517	06					.byte (("F2Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8518	00					.byte WordFlags	;wh_Flags
>8519	03					.byte 3	;wh_CodeLength
>851a	0d					  .byte LinkDisplacement
=$851b					XtPtr1 ::= *
=33943					WordListLink ::= Nt0 ; remember the nt of this word for later
.851b	e6 4c		inc $4c		F2Drop:		inc FIndex
.851d	e6 4c		inc $4c				inc FIndex
=4					CL	.var *-XtPtr1
=$851f					en = *	; remember here
>8519	04					.byte CL	;wh_CodeLength
.851f	60		rts				rts
>8520	46 4e 69 70			L1:	.text "FNip"	;  name of word as a string, ending at wh_NameLastChar
=33956					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8524	04					.byte (("FNip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8525	00					.byte WordFlags	;wh_Flags
>8526	03					.byte 3	;wh_CodeLength
>8527	0d					  .byte LinkDisplacement
=$8528					XtPtr1 ::= *
=33956					WordListLink ::= Nt0 ; remember the nt of this word for later
.8528	86 14		stx $14		FNip:		stx tmp1		; save data stack index
.852a	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.852c	b5 4d		lda $4d,x			lda FSExp+0,x		; copy exponent
.852e	95 4e		sta $4e,x			sta FSExp+1,x
.8530	b5 57		lda $57,x			lda FSMant0+0,x		; copy mantissa
.8532	95 58		sta $58,x			sta FSMant0+1,x
.8534	b5 61		lda $61,x			lda FSMant1+0,x
.8536	95 62		sta $62,x			sta FSMant1+1,x
.8538	b5 6b		lda $6b,x			lda FSMant2+0,x
.853a	95 6c		sta $6c,x			sta FSMant2+1,x
.853c	b5 75		lda $75,x			lda FSMant3+0,x
.853e	95 76		sta $76,x			sta FSMant3+1,x
.8540	e6 4c		inc $4c				inc FIndex		; FDrop
.8542	a6 14		ldx $14				ldx tmp1		; restore data stack index
=28					CL	.var *-XtPtr1
=$8544					en = *	; remember here
>8526	1c					.byte CL	;wh_CodeLength
.8544	60		rts				rts
>8545	46 44 75 70			L1:	.text "FDup"	;  name of word as a string, ending at wh_NameLastChar
=33993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8549	04					.byte (("FDup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>854a	00					.byte WordFlags	;wh_Flags
>854b	03					.byte 3	;wh_CodeLength
>854c	25					  .byte LinkDisplacement
=$854d					XtPtr1 ::= *
=33993					WordListLink ::= Nt0 ; remember the nt of this word for later
.854d	20 c2 84	jsr $84c2	FDup:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8550	b5 4e		lda $4e,x			lda FSExp+1,x		; copy exponent
.8552	95 4d		sta $4d,x			sta FSExp+0,x
.8554	b5 58		lda $58,x			lda FSMant0+1,x		; copy mantissa
.8556	95 57		sta $57,x			sta FSMant0+0,x
.8558	b5 62		lda $62,x			lda FSMant1+1,x
.855a	95 61		sta $61,x			sta FSMant1+0,x
.855c	b5 6c		lda $6c,x			lda FSMant2+1,x
.855e	95 6b		sta $6b,x			sta FSMant2+0,x
.8560	b5 76		lda $76,x			lda FSMant3+1,x
.8562	95 75		sta $75,x			sta FSMant3+0,x
.8564	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-XtPtr1
=$8566					en = *	; remember here
>854b	19					.byte CL	;wh_CodeLength
.8566	60		rts				rts
>8567	46 4f 76 65 72			L1:	.text "FOver"	;  name of word as a string, ending at wh_NameLastChar
=34028					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>856c	45					.byte (("FOver"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>856d	00					.byte WordFlags	;wh_Flags
>856e	03					.byte 3	;wh_CodeLength
>856f	23					  .byte LinkDisplacement
=$8570					XtPtr1 ::= *
=34028					WordListLink ::= Nt0 ; remember the nt of this word for later
.8570	20 c2 84	jsr $84c2	FOver:		jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8573	b5 4f		lda $4f,x			lda FSExp+2,x		; copy exponent
.8575	95 4d		sta $4d,x			sta FSExp+0,x
.8577	b5 59		lda $59,x			lda FSMant0+2,x		; copy mantissa
.8579	95 57		sta $57,x			sta FSMant0+0,x
.857b	b5 63		lda $63,x			lda FSMant1+2,x
.857d	95 61		sta $61,x			sta FSMant1+0,x
.857f	b5 6d		lda $6d,x			lda FSMant2+2,x
.8581	95 6b		sta $6b,x			sta FSMant2+0,x
.8583	b5 77		lda $77,x			lda FSMant3+2,x
.8585	95 75		sta $75,x			sta FSMant3+0,x
.8587	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=25					CL	.var *-XtPtr1
=$8589					en = *	; remember here
>856e	19					.byte CL	;wh_CodeLength
.8589	60		rts				rts
>858a	46 50 69 63 6b			L1:	.text "FPick"	;  name of word as a string, ending at wh_NameLastChar
=34063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>858f	65					.byte (("FPick"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>8590	00					.byte WordFlags	;wh_Flags
>8591	03					.byte 3	;wh_CodeLength
>8592	23					  .byte LinkDisplacement
=$8593					XtPtr1 ::= *
=34063					WordListLink ::= Nt0 ; remember the nt of this word for later
.8593	20 e5 b3	jsr $b3e5	FPick:		jsr PopA		; pop u (desired entry #)
.8596	18		clc		FPickA:		clc			; Y= fp stack index of [u]
.8597	65 4c		adc $4c				adc FIndex
.8599	a8		tay		FPick3:		tay
.859a	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.859d	b9 4d 00	lda $004d,y			lda FSExp,y		; copy exponent
.85a0	95 4d		sta $4d,x			sta FSExp,x
.85a2	b9 57 00	lda $0057,y			lda FSMant0,y		; copy mantissa
.85a5	95 57		sta $57,x			sta FSMant0,x
.85a7	b9 61 00	lda $0061,y			lda FSMant1,y
.85aa	95 61		sta $61,x			sta FSMant1,x
.85ac	b9 6b 00	lda $006b,y			lda FSMant2,y
.85af	95 6b		sta $6b,x			sta FSMant2,x
.85b1	b9 75 00	lda $0075,y			lda FSMant3,y
.85b4	95 75		sta $75,x			sta FSMant3,x
.85b6	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=37					CL	.var *-XtPtr1
=$85b8					en = *	; remember here
>8591	25					.byte CL	;wh_CodeLength
.85b8	60		rts				rts
>85b9	46 32 44 75 70			L1:	.text "F2Dup"	;  name of word as a string, ending at wh_NameLastChar
=34110					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85be	05					.byte (("F2Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>85bf	10					.byte WordFlags	;wh_Flags
>85c0	03					.byte 3	;wh_CodeLength
>85c1	2f					  .byte LinkDisplacement
=$85c2					XtPtr1 ::= *
=34110					WordListLink ::= Nt0 ; remember the nt of this word for later
.85c2	20 70 85	jsr $8570	F2Dup:		jsr FOver
.85c5	4c 70 85	jmp $8570			jmp FOver
=6					CL	.var *-XtPtr1
=$85c8					en = *	; remember here
>85c0	06					.byte CL	;wh_CodeLength
>85c8	46 53 77 61 70			L1:	.text "FSwap"	;  name of word as a string, ending at wh_NameLastChar
=34125					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>85cd	05					.byte (("FSwap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>85ce	00					.byte WordFlags	;wh_Flags
>85cf	03					.byte 3	;wh_CodeLength
>85d0	0f					  .byte LinkDisplacement
=$85d1					XtPtr1 ::= *
=34125					WordListLink ::= Nt0 ; remember the nt of this word for later
.85d1	86 14		stx $14		FSwap:		stx tmp1+0		; save data stack index
.85d3	a6 4c		ldx $4c				ldx FIndex		; X=FP stack index
.85d5	b5 4d		lda $4d,x			lda FSExp+0,x		; do FSExp
.85d7	b4 4e		ldy $4e,x			ldy FSExp+1,x
.85d9	95 4e		sta $4e,x			sta FSExp+1,x
.85db	94 4d		sty $4d,x			sty FSExp+0,x
.85dd	b5 57		lda $57,x			lda FSMant0+0,x		; do FSMant0
.85df	b4 58		ldy $58,x			ldy FSMant0+1,x
.85e1	95 58		sta $58,x			sta FSMant0+1,x
.85e3	94 57		sty $57,x			sty FSMant0+0,x
.85e5	b5 61		lda $61,x			lda FSMant1+0,x		; do FSMant1
.85e7	b4 62		ldy $62,x			ldy FSMant1+1,x
.85e9	95 62		sta $62,x			sta FSMant1+1,x
.85eb	94 61		sty $61,x			sty FSMant1+0,x
.85ed	b5 6b		lda $6b,x			lda FSMant2+0,x		; do FSMant2
.85ef	b4 6c		ldy $6c,x			ldy FSMant2+1,x
.85f1	95 6c		sta $6c,x			sta FSMant2+1,x
.85f3	94 6b		sty $6b,x			sty FSMant2+0,x
.85f5	b5 75		lda $75,x			lda FSMant3+0,x		; do FSMant3
.85f7	b4 76		ldy $76,x			ldy FSMant3+1,x
.85f9	95 76		sta $76,x			sta FSMant3+1,x
.85fb	94 75		sty $75,x			sty FSMant3+0,x
.85fd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=46					CL	.var *-XtPtr1
=$85ff					en = *	; remember here
>85cf	2e					.byte CL	;wh_CodeLength
.85ff	60		rts				rts
>8600	46 54 75 63 6b			L1:	.text "FTuck"	;  name of word as a string, ending at wh_NameLastChar
=34181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8605	65					.byte (("FTuck"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>8606	10					.byte WordFlags	;wh_Flags
>8607	03					.byte 3	;wh_CodeLength
>8608	38					  .byte LinkDisplacement
=$8609					XtPtr1 ::= *
=34181					WordListLink ::= Nt0 ; remember the nt of this word for later
.8609	20 d1 85	jsr $85d1	FTuck:		jsr FSwap
.860c	4c 70 85	jmp $8570			jmp FOver
=6					CL	.var *-XtPtr1
=$860f					en = *	; remember here
>8607	06					.byte CL	;wh_CodeLength
>860f	46 52 6f 74			L1:	.text "FRot"	;  name of word as a string, ending at wh_NameLastChar
=34195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8613	84					.byte (("FRot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8614	00					.byte WordFlags	;wh_Flags
>8615	03					.byte 3	;wh_CodeLength
>8616	0e					  .byte LinkDisplacement
=$8617					XtPtr1 ::= *
=34195					WordListLink ::= Nt0 ; remember the nt of this word for later
.8617	86 14		stx $14		FRot:		stx tmp1		; save data stack index
.8619	a5 4c		lda $4c				lda FIndex		; for FSMant3, FSMant2, FSMant1, FSMant0, FSExp
.861b	18		clc				clc
.861c	69 28		adc #$28			adc #4*FDim
.861e	d0 03		bne $8623			bne _3
.8620	8a		txa		_2:		txa			;    next byte
.8621	e9 0a		sbc #$0a			sbc #FDim
.8623	aa		tax		_3:		tax
.8624	b5 4f		lda $4f,x			lda FSExp+2,x		;   do a byte
.8626	b4 4e		ldy $4e,x			ldy FSExp+1,x
.8628	94 4f		sty $4f,x			sty FSExp+2,x
.862a	b4 4d		ldy $4d,x			ldy FSExp+0,x
.862c	94 4e		sty $4e,x			sty FSExp+1,x
.862e	95 4d		sta $4d,x			sta FSExp+0,x
.8630	e4 4c		cpx $4c				cpx FIndex		; done?
.8632	d0 ec		bne $8620			bne _2
.8634	a6 14		ldx $14				ldx tmp1		; restore param stack index
=31					CL	.var *-XtPtr1
=$8636					en = *	; remember here
>8615	1f					.byte CL	;wh_CodeLength
.8636	60		rts				rts
>8637	46 2d 52 6f 74			L1:	.text "F-Rot"	;  name of word as a string, ending at wh_NameLastChar
=34236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>863c	85					.byte (("F-Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>863d	10					.byte WordFlags	;wh_Flags
>863e	03					.byte 3	;wh_CodeLength
>863f	29					  .byte LinkDisplacement
=$8640					XtPtr1 ::= *
=34236					WordListLink ::= Nt0 ; remember the nt of this word for later
.8640	20 17 86	jsr $8617	FMRot:		jsr FRot
.8643	4c 17 86	jmp $8617			jmp FRot
=6					CL	.var *-XtPtr1
=$8646					en = *	; remember here
>863e	06					.byte CL	;wh_CodeLength
>8646	46 40				L1:	.text "F@"	;  name of word as a string, ending at wh_NameLastChar
=34248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8648	02					.byte (("F@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8649	00					.byte WordFlags	;wh_Flags
>864a	03					.byte 3	;wh_CodeLength
>864b	0c					  .byte LinkDisplacement
=$864c					XtPtr1 ::= *
=34248					WordListLink ::= Nt0 ; remember the nt of this word for later
.864c	20 00 b4	jsr $b400	FAt:		jsr PopYA		; pop addr
.864f	85 16		sta $16		FAt_YA:		sta tmp2+0		; save addr
.8651	84 17		sty $17				sty tmp2+1
.8653	a0 00		ldy #$00			ldy #0			; starting offset from tmp2
.8655	20 c2 84	jsr $84c2	FAt_Tmp2Y:	jsr FAllocX		; alloc FP stack entry, X= fp stack index
.8658	b1 16		lda ($16),y			lda (tmp2),y		; copy mantissa
.865a	95 75		sta $75,x			sta FSMant3,x
.865c	c8		iny				iny
.865d	b1 16		lda ($16),y			lda (tmp2),y
.865f	95 6b		sta $6b,x			sta FSMant2,x
.8661	c8		iny				iny
.8662	b1 16		lda ($16),y			lda (tmp2),y
.8664	95 61		sta $61,x			sta FSMant1,x
.8666	c8		iny				iny
.8667	b1 16		lda ($16),y			lda (tmp2),y
.8669	95 57		sta $57,x			sta FSMant0,x
.866b	c8		iny				iny			; copy exponent
.866c	b1 16		lda ($16),y			lda (tmp2),y
.866e	95 4d		sta $4d,x			sta FSExp,x
.8670	a6 14		ldx $14				ldx tmp1		; restore data stack index
=38					CL	.var *-XtPtr1
=$8672					en = *	; remember here
>864a	26					.byte CL	;wh_CodeLength
.8672	60		rts				rts
>8673	46 21				L1:	.text "F!"	;  name of word as a string, ending at wh_NameLastChar
=34293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8675	22					.byte (("F!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8676	00					.byte WordFlags	;wh_Flags
>8677	03					.byte 3	;wh_CodeLength
>8678	2d					  .byte LinkDisplacement
=$8679					XtPtr1 ::= *
=34293					WordListLink ::= Nt0 ; remember the nt of this word for later
.8679	20 00 b4	jsr $b400	FStore:		jsr PopYA		; pop addr
.867c	85 14		sta $14		FStore_YA:	sta tmp1+0		; save addr
.867e	84 15		sty $15				sty tmp1+1
.8680	a0 00		ldy #$00			ldy #0
.8682	86 16		stx $16				stx tmp2		; save data stack index
.8684	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8686	b5 75		lda $75,x			lda FSMant3,x		; copy mantissa
.8688	91 14		sta ($14),y			sta (tmp1),y
.868a	b5 6b		lda $6b,x			lda FSMant2,x
.868c	c8		iny				iny
.868d	91 14		sta ($14),y			sta (tmp1),y
.868f	b5 61		lda $61,x			lda FSMant1,x
.8691	c8		iny				iny
.8692	91 14		sta ($14),y			sta (tmp1),y
.8694	b5 57		lda $57,x			lda FSMant0,x
.8696	c8		iny				iny
.8697	91 14		sta ($14),y			sta (tmp1),y
.8699	b5 4d		lda $4d,x			lda FSExp,x		; copy exponent
.869b	c8		iny				iny
.869c	91 14		sta ($14),y			sta (tmp1),y
.869e	e6 4c		inc $4c				inc FIndex		; FDrop
.86a0	a6 16		ldx $16				ldx tmp2		; restore data stack index
=41					CL	.var *-XtPtr1
=$86a2					en = *	; remember here
>8677	29					.byte CL	;wh_CodeLength
.86a2	60		rts				rts
>86a3	46 2c				L1:	.text "F,"	;  name of word as a string, ending at wh_NameLastChar
=34341					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86a5	82					.byte (("F,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>86a6	10					.byte WordFlags	;wh_Flags
>86a7	03					.byte 3	;wh_CodeLength
>86a8	30					  .byte LinkDisplacement
=$86a9					XtPtr1 ::= *
=34341					WordListLink ::= Nt0 ; remember the nt of this word for later
.86a9	a5 00		lda $00		FComma:		lda cp+0		; store f at Here
.86ab	a4 01		ldy $01				ldy cp+1
.86ad	20 7c 86	jsr $867c			jsr FStore_YA
.86b0	a9 05		lda #$05			lda #5			; Float
.86b2	20 ec b7	jsr $b7ec			jsr PushZA
.86b5	4c b6 c0	jmp $c0b6			jmp Allot
=15					CL	.var *-XtPtr1
=$86b8					en = *	; remember here
>86a7	0f					.byte CL	;wh_CodeLength
>86b8	46 30 21			L1:	.text "F0!"	;  name of word as a string, ending at wh_NameLastChar
=34363					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86bb	23					.byte (("F0!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>86bc	10					.byte WordFlags	;wh_Flags
>86bd	03					.byte 3	;wh_CodeLength
>86be	16					  .byte LinkDisplacement
=$86bf					XtPtr1 ::= *
=34363					WordListLink ::= Nt0 ; remember the nt of this word for later
.86bf	20 ab 88	jsr $88ab	FZStore:	jsr F0
.86c2	4c 79 86	jmp $8679			jmp FStore
=6					CL	.var *-XtPtr1
=$86c5					en = *	; remember here
>86bd	06					.byte CL	;wh_CodeLength
>86c5	46 30 3d			L1:	.text "F0="	;  name of word as a string, ending at wh_NameLastChar
=34376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86c8	a3					.byte (("F0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>86c9	10					.byte WordFlags	;wh_Flags
>86ca	03					.byte 3	;wh_CodeLength
>86cb	0d					  .byte LinkDisplacement
=$86cc					XtPtr1 ::= *
=34376					WordListLink ::= Nt0 ; remember the nt of this word for later
.86cc	a4 4c		ldy $4c		FZEq:		ldy FIndex
.86ce	b9 57 00	lda $0057,y			lda FSMant0,y
.86d1	d0 24		bne $86f7			bne FFalse1
.86d3					FTrue1:
.86d3	e6 4c		inc $4c				inc FIndex	; FDrop
.86d5	4c cc b7	jmp $b7cc			jmp True	; return true
=12					CL	.var *-XtPtr1
=$86d8					en = *	; remember here
>86ca	0c					.byte CL	;wh_CodeLength
>86d8	46 30 3c 3e			L1:	.text "F0<>"	;  name of word as a string, ending at wh_NameLastChar
=34396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86dc	c4					.byte (("F0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>86dd	10					.byte WordFlags	;wh_Flags
>86de	03					.byte 3	;wh_CodeLength
>86df	14					  .byte LinkDisplacement
=$86e0					XtPtr1 ::= *
=34396					WordListLink ::= Nt0 ; remember the nt of this word for later
.86e0	a4 4c		ldy $4c		FZNe:		ldy FIndex
.86e2	b9 57 00	lda $0057,y			lda FSMant0,y
.86e5	d0 ec		bne $86d3			bne FTrue1
.86e7	f0 0e		beq $86f7			beq FFalse1
=9					CL	.var *-XtPtr1
=$86e9					en = *	; remember here
>86de	09					.byte CL	;wh_CodeLength
>86e9	46 30 3c			L1:	.text "F0<"	;  name of word as a string, ending at wh_NameLastChar
=34412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>86ec	83					.byte (("F0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>86ed	10					.byte WordFlags	;wh_Flags
>86ee	03					.byte 3	;wh_CodeLength
>86ef	10					  .byte LinkDisplacement
=$86f0					XtPtr1 ::= *
=34412					WordListLink ::= Nt0 ; remember the nt of this word for later
.86f0	a4 4c		ldy $4c		FZLt:		ldy FIndex
.86f2	b9 57 00	lda $0057,y			lda FSMant0,y
.86f5	30 dc		bmi $86d3			bmi FTrue1
.86f7					FFalse1:
.86f7	e6 4c		inc $4c				inc FIndex	; FDrop
.86f9	4c de b7	jmp $b7de			jmp False	; return false
=12					CL	.var *-XtPtr1
=$86fc					en = *	; remember here
>86ee	0c					.byte CL	;wh_CodeLength
>86fc	46 30 3e 3d			L1:	.text "F0>="	;  name of word as a string, ending at wh_NameLastChar
=34432					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8700	a4					.byte (("F0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>8701	10					.byte WordFlags	;wh_Flags
>8702	03					.byte 3	;wh_CodeLength
>8703	14					  .byte LinkDisplacement
=$8704					XtPtr1 ::= *
=34432					WordListLink ::= Nt0 ; remember the nt of this word for later
.8704	a4 4c		ldy $4c		FZGe:		ldy FIndex
.8706	b9 57 00	lda $0057,y			lda FSMant0,y
.8709	10 c8		bpl $86d3			bpl FTrue1
.870b	30 ea		bmi $86f7			bmi FFalse1
=9					CL	.var *-XtPtr1
=$870d					en = *	; remember here
>8702	09					.byte CL	;wh_CodeLength
>870d	46 30 3e			L1:	.text "F0>"	;  name of word as a string, ending at wh_NameLastChar
=34448					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8710	c3					.byte (("F0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8711	10					.byte WordFlags	;wh_Flags
>8712	03					.byte 3	;wh_CodeLength
>8713	10					  .byte LinkDisplacement
=$8714					XtPtr1 ::= *
=34448					WordListLink ::= Nt0 ; remember the nt of this word for later
.8714	a4 4c		ldy $4c		FZGt:		ldy FIndex
.8716	b9 57 00	lda $0057,y			lda FSMant0,y
.8719	30 dc		bmi $86f7			bmi FFalse1
.871b	d0 b6		bne $86d3			bne FTrue1
.871d	f0 d8		beq $86f7			beq FFalse1
=11					CL	.var *-XtPtr1
=$871f					en = *	; remember here
>8712	0b					.byte CL	;wh_CodeLength
>871f	46 30 3c 3d			L1:	.text "F0<="	;  name of word as a string, ending at wh_NameLastChar
=34467					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8723	a4					.byte (("F0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8724	10					.byte WordFlags	;wh_Flags
>8725	03					.byte 3	;wh_CodeLength
>8726	13					  .byte LinkDisplacement
=$8727					XtPtr1 ::= *
=34467					WordListLink ::= Nt0 ; remember the nt of this word for later
.8727	a4 4c		ldy $4c		FZLe:		ldy FIndex
.8729	b9 57 00	lda $0057,y			lda FSMant0,y
.872c	30 a5		bmi $86d3			bmi FTrue1
.872e	d0 c7		bne $86f7			bne FFalse1
.8730	f0 a1		beq $86d3			beq FTrue1
=11					CL	.var *-XtPtr1
=$8732					en = *	; remember here
>8725	0b					.byte CL	;wh_CodeLength
>8732	46 3c				L1:	.text "F<"	;  name of word as a string, ending at wh_NameLastChar
=34484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8734	82					.byte (("F<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8735	10					.byte WordFlags	;wh_Flags
>8736	03					.byte 3	;wh_CodeLength
>8737	11					  .byte LinkDisplacement
=$8738					XtPtr1 ::= *
=34484					WordListLink ::= Nt0 ; remember the nt of this word for later
.8738	20 64 84	jsr $8464	FLt:		jsr FCmpA
.873b	30 32		bmi $876f			bmi FTrue2
.873d					FFalse2:
.873d	e6 4c		inc $4c				inc FIndex	; FDrop
.873f	e6 4c		inc $4c				inc FIndex	; FDrop
.8741	4c de b7	jmp $b7de			jmp False	; return False
=12					CL	.var *-XtPtr1
=$8744					en = *	; remember here
>8736	0c					.byte CL	;wh_CodeLength
>8744	46 3e 3d			L1:	.text "F>="	;  name of word as a string, ending at wh_NameLastChar
=34503					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8747	a3					.byte (("F>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>8748	10					.byte WordFlags	;wh_Flags
>8749	03					.byte 3	;wh_CodeLength
>874a	13					  .byte LinkDisplacement
=$874b					XtPtr1 ::= *
=34503					WordListLink ::= Nt0 ; remember the nt of this word for later
.874b	20 64 84	jsr $8464	FGe:		jsr FCmpA
.874e	10 1f		bpl $876f			bpl FTrue2
.8750	30 eb		bmi $873d			bmi FFalse2
=7					CL	.var *-XtPtr1
=$8752					en = *	; remember here
>8749	07					.byte CL	;wh_CodeLength
>8752	46 3e				L1:	.text "F>"	;  name of word as a string, ending at wh_NameLastChar
=34516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8754	c2					.byte (("F>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8755	10					.byte WordFlags	;wh_Flags
>8756	03					.byte 3	;wh_CodeLength
>8757	0d					  .byte LinkDisplacement
=$8758					XtPtr1 ::= *
=34516					WordListLink ::= Nt0 ; remember the nt of this word for later
.8758	20 64 84	jsr $8464	FGt:		jsr FCmpA
.875b	30 e0		bmi $873d			bmi FFalse2
.875d	d0 10		bne $876f			bne FTrue2
.875f	f0 dc		beq $873d			beq FFalse2
=9					CL	.var *-XtPtr1
=$8761					en = *	; remember here
>8756	09					.byte CL	;wh_CodeLength
>8761	46 3c 3d			L1:	.text "F<="	;  name of word as a string, ending at wh_NameLastChar
=34532					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8764	a3					.byte (("F<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8765	10					.byte WordFlags	;wh_Flags
>8766	03					.byte 3	;wh_CodeLength
>8767	10					  .byte LinkDisplacement
=$8768					XtPtr1 ::= *
=34532					WordListLink ::= Nt0 ; remember the nt of this word for later
.8768	20 64 84	jsr $8464	FLe:		jsr FCmpA
.876b	30 02		bmi $876f			bmi FTrue2
.876d	d0 ce		bne $873d			bne FFalse2
.876f					FTrue2:
.876f	e6 4c		inc $4c				inc FIndex	; FDrop
.8771	e6 4c		inc $4c				inc FIndex	; FDrop
.8773	4c cc b7	jmp $b7cc			jmp True	; return True
=14					CL	.var *-XtPtr1
=$8776					en = *	; remember here
>8766	0e					.byte CL	;wh_CodeLength
>8776	46 3c 3e			L1:	.text "F<>"	;  name of word as a string, ending at wh_NameLastChar
=34553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8779	c3					.byte (("F<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>877a	10					.byte WordFlags	;wh_Flags
>877b	03					.byte 3	;wh_CodeLength
>877c	15					  .byte LinkDisplacement
=$877d					XtPtr1 ::= *
=34553					WordListLink ::= Nt0 ; remember the nt of this word for later
.877d	20 64 84	jsr $8464	FNe:		jsr FCmpA
.8780	d0 ed		bne $876f			bne FTrue2
.8782	f0 b9		beq $873d			beq FFalse2
=7					CL	.var *-XtPtr1
=$8784					en = *	; remember here
>877b	07					.byte CL	;wh_CodeLength
>8784	46 3d				L1:	.text "F="	;  name of word as a string, ending at wh_NameLastChar
=34566					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8786	a2					.byte (("F="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>8787	10					.byte WordFlags	;wh_Flags
>8788	03					.byte 3	;wh_CodeLength
>8789	0d					  .byte LinkDisplacement
=$878a					XtPtr1 ::= *
=34566					WordListLink ::= Nt0 ; remember the nt of this word for later
.878a	20 64 84	jsr $8464	FEq:		jsr FCmpA
.878d	d0 ae		bne $873d			bne FFalse2
.878f	f0 de		beq $876f			beq FTrue2
=7					CL	.var *-XtPtr1
=$8791					en = *	; remember here
>8788	07					.byte CL	;wh_CodeLength
>8791	46 7e 41 62 73			L1:	.text "F~Abs"	;  name of word as a string, ending at wh_NameLastChar
=34582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8796	65					.byte (("F~Abs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8797	10					.byte WordFlags	;wh_Flags
>8798	03					.byte 3	;wh_CodeLength
>8799	10					  .byte LinkDisplacement
=$879a					XtPtr1 ::= *
=34582					WordListLink ::= Nt0 ; remember the nt of this word for later
.879a	20 40 86	jsr $8640	FTAbs:		jsr FMRot
.879d	20 55 8b	jsr $8b55			jsr FMinus
.87a0	20 b0 8b	jsr $8bb0			jsr FAbs
.87a3	4c 58 87	jmp $8758			jmp FGt
=12					CL	.var *-XtPtr1
=$87a6					en = *	; remember here
>8798	0c					.byte CL	;wh_CodeLength
>87a6	46 7e 52 65 6c			L1:	.text "F~Rel"	;  name of word as a string, ending at wh_NameLastChar
=34603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ab	85					.byte (("F~Rel"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>87ac	10					.byte WordFlags	;wh_Flags
>87ad	03					.byte 3	;wh_CodeLength
>87ae	15					  .byte LinkDisplacement
=$87af					XtPtr1 ::= *
=34603					WordListLink ::= Nt0 ; remember the nt of this word for later
.87af	20 70 85	jsr $8570	FTRel:		jsr FOver
.87b2	a9 03		lda #$03			lda #3
.87b4	20 96 85	jsr $8596			jsr FPickA
.87b7	20 15 8b	jsr $8b15			jsr FPlus
.87ba	20 b0 8b	jsr $8bb0			jsr FAbs
.87bd	20 e3 8b	jsr $8be3			jsr FStar		; r1 r2 r3*|r1+r2|
.87c0	20 40 86	jsr $8640			jsr FMRot		; r3*|r1+r2| r1 r2
.87c3	20 55 8b	jsr $8b55			jsr FMinus
.87c6	20 b0 8b	jsr $8bb0			jsr FAbs
.87c9	4c 58 87	jmp $8758			jmp FGt
=29					CL	.var *-XtPtr1
=$87cc					en = *	; remember here
>87ad	1d					.byte CL	;wh_CodeLength
>87cc	46 7e				L1:	.text "F~"	;  name of word as a string, ending at wh_NameLastChar
=34638					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ce	c2					.byte (("F~"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>87cf	10					.byte WordFlags	;wh_Flags
>87d0	03					.byte 3	;wh_CodeLength
>87d1	23					  .byte LinkDisplacement
=$87d2					XtPtr1 ::= *
=34638					WordListLink ::= Nt0 ; remember the nt of this word for later
.87d2	a4 4c		ldy $4c		FTilde:		ldy FIndex
.87d4	b9 57 00	lda $0057,y			lda FSMant0,y
.87d7	30 06		bmi $87df			bmi _10			; r3<0
.87d9	d0 bf		bne $879a			bne FTAbs		; r3>0
.87db	e6 4c		inc $4c				inc FIndex		; r3=0
.87dd	d0 ab		bne $878a			bne FEq
.87df	20 8a 8b	jsr $8b8a	_10:		jsr FNegate
.87e2	4c af 87	jmp $87af			jmp FTRel
=19					CL	.var *-XtPtr1
=$87e5					en = *	; remember here
>87d0	13					.byte CL	;wh_CodeLength
>87e5	46 56 61 72 69 61 62 6c		L1:	.text "FVariable"	;  name of word as a string, ending at wh_NameLastChar
>87ed	65
=34670					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>87ee	a9					.byte (("FVariable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>87ef	18					.byte WordFlags	;wh_Flags
>87f0	03					.byte 3	;wh_CodeLength
>87f1	20					  .byte LinkDisplacement
=$87f2					XtPtr1 ::= *
=34670					WordListLink ::= Nt0 ; remember the nt of this word for later
.87f2	20 bd c1	jsr $c1bd	FVariable:	jsr Create		; compile word header & push PFA adr
.87f5	20 da bb	jsr $bbda			jsr adjust_z		; fix word code length
.87f8	20 ab 88	jsr $88ab			jsr F0			; alloc & init data
.87fb	4c a9 86	jmp $86a9			jmp FComma
=12					CL	.var *-XtPtr1
=$87fe					en = *	; remember here
>87f0	0c					.byte CL	;wh_CodeLength
>87fe	46 4c 69 74 65 72 61 6c		L1:	.text "FLiteral"	;  name of word as a string, ending at wh_NameLastChar
=34694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8806	88					.byte (("FLiteral"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8807	18					.byte WordFlags	;wh_Flags
>8808	03					.byte 3	;wh_CodeLength
>8809	18					  .byte LinkDisplacement
=$880a					XtPtr1 ::= *
=34694					WordListLink ::= Nt0 ; remember the nt of this word for later
.880a	20 1f 88	jsr $881f	FLiteral:	jsr FLitTest
.880d	f0 0a		beq $8819			beq _Short
.880f	a9 48		lda #$48			lda #<FLitI		; compile JSR FLitI
.8811	a0 88		ldy #$88			ldy #>FLitI
.8813	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.8816	4c a9 86	jmp $86a9			jmp FComma		; inline operand, return
.8819	20 2b 88	jsr $882b	_Short:		jsr FLitShort
.881c	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA	; compile jsr FLitYA, & return
=21					CL	.var *-XtPtr1
=$881f					en = *	; remember here
>8808	15					.byte CL	;wh_CodeLength
.881f					FLitTest:
.881f	a4 4c		ldy $4c				ldy FIndex
.8821	b9 61 00	lda $0061,y			lda FSMant1,y		; will short work?
.8824	19 6b 00	ora $006b,y			ora FSMant2,y
.8827	19 75 00	ora $0075,y			ora FSMant3,y
.882a	60		rts				rts
.882b					FLitShort:
.882b	a9 a9		lda #$a9			lda #$a9		; compile LDA #mant0
.882d	20 fb cc	jsr $ccfb			jsr C_Comma_A
.8830	b9 57 00	lda $0057,y			lda FSMant0,y
.8833	20 fb cc	jsr $ccfb			jsr C_Comma_A
.8836	a9 a0		lda #$a0			lda #$a0		; compile LDY #exp
.8838	20 fb cc	jsr $ccfb			jsr C_Comma_A
.883b	b9 4d 00	lda $004d,y			lda FSExp,y
.883e	20 fb cc	jsr $ccfb			jsr C_Comma_A
.8841	e6 4c		inc $4c				inc FIndex		; FDrop
.8843	a9 92		lda #$92			lda #<FLitYA		; point at FLitYA
.8845	a0 88		ldy #$88			ldy #>FLitYA
.8847	60		rts				rts
.8848					FLitI:
.8848	68		pla				pla			; tmp2= RTS addr
.8849	85 16		sta $16				sta tmp2+0
.884b	18		clc				clc			; bump RTS addr over inline float data
.884c	69 05		adc #$05			adc #5
.884e	a8		tay				tay
.884f	68		pla				pla
.8850	85 17		sta $17				sta tmp2+1
.8852	69 00		adc #$00			adc #0
.8854	48		pha				pha
.8855	98		tya				tya
.8856	48		pha				pha
.8857	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.8859	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
>885c	46 43 6f 6e 73 74 61 6e		L1:	.text "FConstant"	;  name of word as a string, ending at wh_NameLastChar
>8864	74
=34789					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8865	89					.byte (("FConstant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=95					LinkDisplacement = Nt0-WordListLink
>8866	10					.byte WordFlags	;wh_Flags
>8867	03					.byte 3	;wh_CodeLength
>8868	5f					  .byte LinkDisplacement
=$8869					XtPtr1 ::= *
=34789					WordListLink ::= Nt0 ; remember the nt of this word for later
.8869	20 0f c1	jsr $c10f	FConstant:	jsr Header_Comma	; compile word header
.886c	20 1f 88	jsr $881f			jsr FLitTest		; will short work?
.886f	f0 0d		beq $887e			beq _Short
.8871	a9 87		lda #$87			lda #<FConstantRun	; compile call
.8873	a0 88		ldy #$88			ldy #>FConstantRun
.8875	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.8878	20 da bb	jsr $bbda			jsr adjust_z
.887b	4c a9 86	jmp $86a9			jmp FComma		; inline operand, & return
.887e					_Short:
.887e	20 2b 88	jsr $882b			jsr FLitShort		; compile load value
.8881	20 4d cd	jsr $cd4d			jsr Jmp_Comma_YA	; compile JMP
.8884	4c da bb	jmp $bbda			jmp adjust_z
=30					CL	.var *-XtPtr1
=$8887					en = *	; remember here
>8867	1e					.byte CL	;wh_CodeLength
.8887					FConstantRun:
.8887	68		pla				pla			; tmp2= pop RTS addr
.8888	85 16		sta $16				sta tmp2+0
.888a	68		pla				pla
.888b	85 17		sta $17				sta tmp2+1
.888d	a0 01		ldy #$01			ldy #1			; correct for RTS addr
.888f	4c 55 86	jmp $8655			jmp FAt_Tmp2Y		; fetch inline data, & return
.8892					FLitYA:
.8892	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry, X=fp stack index
.8895	94 4d		sty $4d,x			sty FSExp,x		; exp= Y
.8897	95 57		sta $57,x			sta FSMant0,x		; Mant= A,0,0,0
.8899	a9 00		lda #$00			lda #0
.889b	95 61		sta $61,x			sta FSMant1,x
.889d	95 6b		sta $6b,x			sta FSMant2,x
.889f	95 75		sta $75,x			sta FSMant3,x
.88a1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.88a3	60		rts				rts
>88a4	30 2e 65			L1:	.text "0.e"	;  name of word as a string, ending at wh_NameLastChar
=34855					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88a7	a3					.byte (("0.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=66					LinkDisplacement = Nt0-WordListLink
>88a8	10					.byte WordFlags	;wh_Flags
>88a9	03					.byte 3	;wh_CodeLength
>88aa	42					  .byte LinkDisplacement
=$88ab					XtPtr1 ::= *
=34855					WordListLink ::= Nt0 ; remember the nt of this word for later
.88ab	a9 00		lda #$00	F0:		lda #0
.88ad	a0 80		ldy #$80			ldy #$80
.88af	d0 e1		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88b1					en = *	; remember here
>88a9	06					.byte CL	;wh_CodeLength
>88b1	31 30 30 30 2e 65		L1:	.text "1000.e"	;  name of word as a string, ending at wh_NameLastChar
=34871					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88b7	a6					.byte (("1000.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>88b8	10					.byte WordFlags	;wh_Flags
>88b9	03					.byte 3	;wh_CodeLength
>88ba	10					  .byte LinkDisplacement
=$88bb					XtPtr1 ::= *
=34871					WordListLink ::= Nt0 ; remember the nt of this word for later
.88bb	a9 7d		lda #$7d	F1000:		lda #$7d
.88bd	a0 0a		ldy #$0a			ldy #10
.88bf	d0 d1		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88c1					en = *	; remember here
>88b9	06					.byte CL	;wh_CodeLength
>88c1	31 30 2e 65			L1:	.text "10.e"	;  name of word as a string, ending at wh_NameLastChar
=34885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88c5	a4					.byte (("10.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88c6	10					.byte WordFlags	;wh_Flags
>88c7	03					.byte 3	;wh_CodeLength
>88c8	0e					  .byte LinkDisplacement
=$88c9					XtPtr1 ::= *
=34885					WordListLink ::= Nt0 ; remember the nt of this word for later
.88c9	a9 50		lda #$50	F10:		lda #$50
.88cb	a0 04		ldy #$04			ldy #4
.88cd	d0 c3		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88cf					en = *	; remember here
>88c7	06					.byte CL	;wh_CodeLength
>88cf	32 2e 65			L1:	.text "2.e"	;  name of word as a string, ending at wh_NameLastChar
=34898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88d2	a3					.byte (("2.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88d3	10					.byte WordFlags	;wh_Flags
>88d4	03					.byte 3	;wh_CodeLength
>88d5	0d					  .byte LinkDisplacement
=$88d6					XtPtr1 ::= *
=34898					WordListLink ::= Nt0 ; remember the nt of this word for later
.88d6	a9 40		lda #$40	F2:		lda #$40
.88d8	a0 02		ldy #$02			ldy #2
.88da	d0 b6		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88dc					en = *	; remember here
>88d4	06					.byte CL	;wh_CodeLength
>88dc	31 2e 65			L1:	.text "1.e"	;  name of word as a string, ending at wh_NameLastChar
=34911					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88df	a3					.byte (("1.e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88e0	10					.byte WordFlags	;wh_Flags
>88e1	03					.byte 3	;wh_CodeLength
>88e2	0d					  .byte LinkDisplacement
=$88e3					XtPtr1 ::= *
=34911					WordListLink ::= Nt0 ; remember the nt of this word for later
.88e3	a9 40		lda #$40	F1:		lda #$40
.88e5	a0 01		ldy #$01			ldy #1
.88e7	d0 a9		bne $8892			bne FLitYA
=6					CL	.var *-XtPtr1
=$88e9					en = *	; remember here
>88e1	06					.byte CL	;wh_CodeLength
>88e9	2e 31 65			L1:	.text ".1e"	;  name of word as a string, ending at wh_NameLastChar
=34924					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88ec	a3					.byte ((".1e"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>88ed	10					.byte WordFlags	;wh_Flags
>88ee	03					.byte 3	;wh_CodeLength
>88ef	0d					  .byte LinkDisplacement
=$88f0					XtPtr1 ::= *
=34924					WordListLink ::= Nt0 ; remember the nt of this word for later
.88f0	20 87 88	jsr $8887	F10th:		jsr FConstantRun
>88f3	67 66 66 66					.dword $66666667	; 32 bit signed binary mantissa.  $40000000 = +0.5
>88f7	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$88f8					en = *	; remember here
>88ee	08					.byte CL	;wh_CodeLength
>88f8	50 69				L1:	.text "Pi"	;  name of word as a string, ending at wh_NameLastChar
=34938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>88fa	22					.byte (("Pi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>88fb	10					.byte WordFlags	;wh_Flags
>88fc	03					.byte 3	;wh_CodeLength
>88fd	0e					  .byte LinkDisplacement
=$88fe					XtPtr1 ::= *
=34938					WordListLink ::= Nt0 ; remember the nt of this word for later
.88fe	20 87 88	jsr $8887	FPi:		jsr FConstantRun
>8901	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8905	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8906					en = *	; remember here
>88fc	08					.byte CL	;wh_CodeLength
>8906	50 69 2f 32			L1:	.text "Pi/2"	;  name of word as a string, ending at wh_NameLastChar
=34954					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>890a	44					.byte (("Pi/2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>890b	10					.byte WordFlags	;wh_Flags
>890c	03					.byte 3	;wh_CodeLength
>890d	10					  .byte LinkDisplacement
=$890e					XtPtr1 ::= *
=34954					WordListLink ::= Nt0 ; remember the nt of this word for later
.890e	20 87 88	jsr $8887	FPiH:		jsr FConstantRun
>8911	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8915	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8916					en = *	; remember here
>890c	08					.byte CL	;wh_CodeLength
>8916	50 69 2f 34			L1:	.text "Pi/4"	;  name of word as a string, ending at wh_NameLastChar
=34970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>891a	84					.byte (("Pi/4"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>891b	10					.byte WordFlags	;wh_Flags
>891c	03					.byte 3	;wh_CodeLength
>891d	10					  .byte LinkDisplacement
=$891e					XtPtr1 ::= *
=34970					WordListLink ::= Nt0 ; remember the nt of this word for later
.891e	20 87 88	jsr $8887	FPiQ:		jsr FConstantRun
>8921	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8925	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8926					en = *	; remember here
>891c	08					.byte CL	;wh_CodeLength
>8926	32 50 69			L1:	.text "2Pi"	;  name of word as a string, ending at wh_NameLastChar
=34985					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8929	23					.byte (("2Pi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>892a	10					.byte WordFlags	;wh_Flags
>892b	03					.byte 3	;wh_CodeLength
>892c	0f					  .byte LinkDisplacement
=$892d					XtPtr1 ::= *
=34985					WordListLink ::= Nt0 ; remember the nt of this word for later
.892d	20 87 88	jsr $8887	F2Pi:		jsr FConstantRun
>8930	51 ed 87 64					.dword $6487ed51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8934	03						.char 3		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8935					en = *	; remember here
>892b	08					.byte CL	;wh_CodeLength
>8935	46 2e 45			L1:	.text "F.E"	;  name of word as a string, ending at wh_NameLastChar
=35000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8938	a3					.byte (("F.E"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8939	10					.byte WordFlags	;wh_Flags
>893a	03					.byte 3	;wh_CodeLength
>893b	0f					  .byte LinkDisplacement
=$893c					XtPtr1 ::= *
=35000					WordListLink ::= Nt0 ; remember the nt of this word for later
.893c	20 87 88	jsr $8887	FE:		jsr FConstantRun
>893f	2c 2a fc 56					.dword $56fc2a2c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>8943	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
=8					CL	.var *-XtPtr1
=$8944					en = *	; remember here
>893a	08					.byte CL	;wh_CodeLength
>8944	46 56 61 6c 75 65		L1:	.text "FValue"	;  name of word as a string, ending at wh_NameLastChar
=35018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>894a	a6					.byte (("FValue"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>894b	18					.byte WordFlags	;wh_Flags
>894c	03					.byte 3	;wh_CodeLength
>894d	12					  .byte LinkDisplacement
=$894e					XtPtr1 ::= *
=35018					WordListLink ::= Nt0 ; remember the nt of this word for later
.894e	20 0f c1	jsr $c10f	FValue:		jsr Header_Comma	; compile word header
.8951	a9 5e		lda #$5e			lda #<FValue_runtime	; compile JSR FValue_runtime
.8953	a0 89		ldy #$89			ldy #>FValue_runtime
.8955	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.8958	20 da bb	jsr $bbda			jsr adjust_z		; fix word length
.895b	4c a9 86	jmp $86a9			jmp FComma		; alloc & init value
=16					CL	.var *-XtPtr1
=$895e					en = *	; remember here
>894c	10					.byte CL	;wh_CodeLength
.895e					FValue_runtime:
.895e	4c 87 88	jmp $8887			jmp FConstantRun
>8961	46 53 63 61 6c 65		L1:	.text "FScale"	;  name of word as a string, ending at wh_NameLastChar
=35047					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8967	a6					.byte (("FScale"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8968	10					.byte WordFlags	;wh_Flags
>8969	03					.byte 3	;wh_CodeLength
>896a	1d					  .byte LinkDisplacement
=$896b					XtPtr1 ::= *
=35047					WordListLink ::= Nt0 ; remember the nt of this word for later
.896b	20 e5 b3	jsr $b3e5	FScale:		jsr PopA		; pop n
.896e	86 14		stx $14		FScaleA:	stx tmp1		; save data stack index
.8970	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.8972	b4 57		ldy $57,x			ldy FSMant0,x		; mantissa zero?
.8974	f0 07		beq $897d			beq _8
.8976	18		clc				clc
.8977	75 4d		adc $4d,x			adc FSExp,x
.8979	95 4d		sta $4d,x			sta FSExp,x
.897b	70 03		bvs $8980			bvs _overflow		; overflow or underflow?
.897d	a6 14		ldx $14		_8:		ldx tmp1		; restore data stack index
.897f	60		rts				rts
.8980					_overflow:
.8980	a6 14		ldx $14				ldx tmp1		; restore data stack index
.8982	20 60 b4	jsr $b460			jsr Throw_FpOutOfRange
=26					CL	.var *-XtPtr1
=$8985					en = *	; remember here
>8969	1a					.byte CL	;wh_CodeLength
>8985	46 32 2a			L1:	.text "F2*"	;  name of word as a string, ending at wh_NameLastChar
=35080					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8988	43					.byte (("F2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>8989	10					.byte WordFlags	;wh_Flags
>898a	03					.byte 3	;wh_CodeLength
>898b	21					  .byte LinkDisplacement
=$898c					XtPtr1 ::= *
=35080					WordListLink ::= Nt0 ; remember the nt of this word for later
.898c	a9 01		lda #$01	F2Star:		lda #1
.898e	d0 de		bne $896e			bne FScaleA
=4					CL	.var *-XtPtr1
=$8990					en = *	; remember here
>898a	04					.byte CL	;wh_CodeLength
>8990	46 32 2f			L1:	.text "F2/"	;  name of word as a string, ending at wh_NameLastChar
=35091					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8993	e3					.byte (("F2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>8994	10					.byte WordFlags	;wh_Flags
>8995	03					.byte 3	;wh_CodeLength
>8996	0b					  .byte LinkDisplacement
=$8997					XtPtr1 ::= *
=35091					WordListLink ::= Nt0 ; remember the nt of this word for later
.8997	a9 ff		lda #$ff	F2Slash:	lda #$ff
.8999	d0 d3		bne $896e			bne FScaleA
=4					CL	.var *-XtPtr1
=$899b					en = *	; remember here
>8995	04					.byte CL	;wh_CodeLength
>899b	46 6c 6f 6f 72			L1:	.text "Floor"	;  name of word as a string, ending at wh_NameLastChar
=35104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>89a0	45					.byte (("Floor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>89a1	10					.byte WordFlags	;wh_Flags
>89a2	03					.byte 3	;wh_CodeLength
>89a3	0d					  .byte LinkDisplacement
=$89a4					XtPtr1 ::= *
=35104					WordListLink ::= Nt0 ; remember the nt of this word for later
.89a4	a4 4c		ldy $4c		Floor:		ldy FIndex
.89a6	b9 57 00	lda $0057,y			lda FSMant0,y		; negative?
.89a9	10 19		bpl $89c4			bpl _a
.89ab	b9 4d 00	lda $004d,y			lda FSExp,y		; > -1 ?
.89ae	10 14		bpl $89c4			bpl _a
.89b0	a9 80		lda #$80			lda #$80		; return -1
.89b2	99 57 00	sta $0057,y			sta FSMant0,y
.89b5	a9 00		lda #$00			lda #0
.89b7	99 4d 00	sta $004d,y			sta FSExp,y
.89ba	99 61 00	sta $0061,y			sta FSMant1,y
.89bd	99 6b 00	sta $006b,y			sta FSMant2,y
.89c0	99 75 00	sta $0075,y			sta FSMant3,y
.89c3	60		rts				rts
.89c4	a9 1f		lda #$1f	_a:		lda #31
.89c6	20 cc 89	jsr $89cc			jsr FShiftA
.89c9	4c 8f 8a	jmp $8a8f			jmp FNormX
=40					CL	.var *-XtPtr1
=$89cc					en = *	; remember here
>89a2	28					.byte CL	;wh_CodeLength
.89cc	86 14		stx $14		FShiftA:	stx tmp1+0		; save data stack index
.89ce	a6 4c		ldx $4c				ldx FIndex		; X= FP stack index
.89d0	a8		tay		FShiftAX:	tay			; save desired alignment
.89d1	38		sec				sec			; calc bit shift count
.89d2	f5 4d		sbc $4d,x			sbc FSExp,x
.89d4	f0 2e		beq $8a04			beq _leave
.89d6	70 1e		bvs $89f6			bvs _overflow
.89d8	30 2a		bmi $8a04			bmi _leave
.89da	c9 20		cmp #$20			cmp #32
.89dc	b0 1a		bcs $89f8			bcs _zero
.89de	94 4d		sty $4d,x			sty FSExp,x
.89e0	a8		tay				tay
.89e1	b5 57		lda $57,x			lda FSMant0,x
.89e3	c9 80		cmp #$80	_12:		cmp #$80		; mantissa >>=1
.89e5	6a		ror a				ror a
.89e6	76 61		ror $61,x			ror FSMant1,x
.89e8	76 6b		ror $6b,x			ror FSMant2,x
.89ea	76 75		ror $75,x			ror FSMant3,x
.89ec	88		dey				dey
.89ed	d0 f4		bne $89e3			bne _12
.89ef	95 57		sta $57,x			sta FSMant0,x
.89f1	b4 4d		ldy $4d,x	_30:		ldy FSExp,x
.89f3	a6 4c		ldx $4c				ldx FIndex		; restore fp stack index (FShiftAX could have had a funny one)
.89f5	60		rts				rts
.89f6	10 0c		bpl $8a04	_overflow:	bpl _leave
.89f8	94 4d		sty $4d,x	_zero:		sty FSExp,x		; return zero
.89fa	a9 00		lda #$00			lda #0
.89fc	95 57		sta $57,x			sta FSMant0,x
.89fe	95 61		sta $61,x			sta FSMant1,x
.8a00	95 6b		sta $6b,x			sta FSMant2,x
.8a02	95 75		sta $75,x			sta FSMant3,x
.8a04	18		clc		_leave:		clc
.8a05	90 ea		bcc $89f1			bcc _30
>8a07	46 54 72 75 6e 63		L1:	.text "FTrunc"	;  name of word as a string, ending at wh_NameLastChar
=35213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a0d	66					.byte (("FTrunc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=109					LinkDisplacement = Nt0-WordListLink
>8a0e	10					.byte WordFlags	;wh_Flags
>8a0f	03					.byte 3	;wh_CodeLength
>8a10	6d					  .byte LinkDisplacement
=$8a11					XtPtr1 ::= *
=35213					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a11	a4 4c		ldy $4c		FTrunc:		ldy FIndex
.8a13	b9 57 00	lda $0057,y			lda FSMant0,y
.8a16	10 8c		bpl $89a4			bpl Floor
.8a18	20 8a 8b	jsr $8b8a			jsr FNegate
.8a1b	20 a4 89	jsr $89a4			jsr Floor
.8a1e	4c 8a 8b	jmp $8b8a			jmp FNegate
>8a21	46 52 6f 75 6e 64		L1:	.text "FRound"	;  name of word as a string, ending at wh_NameLastChar
=35239					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a27	86					.byte (("FRound"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a28	10					.byte WordFlags	;wh_Flags
>8a29	03					.byte 3	;wh_CodeLength
>8a2a	1a					  .byte LinkDisplacement
=$8a2b					XtPtr1 ::= *
=35239					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a2b	a9 1f		lda #$1f	FRound:		lda #31
.8a2d	20 cc 89	jsr $89cc			jsr FShiftA
.8a30	90 05		bcc $8a37			bcc _15
.8a32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8a34	4c 49 8b	jmp $8b49			jmp F1Plus
.8a37	4c 8f 8a	jmp $8a8f	_15:		jmp FNormX
=15					CL	.var *-XtPtr1
=$8a3a					en = *	; remember here
>8a29	0f					.byte CL	;wh_CodeLength
>8a3a	46 49 6e 74 46 72 63		L1:	.text "FIntFrc"	;  name of word as a string, ending at wh_NameLastChar
=35265					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a41	67					.byte (("FIntFrc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>8a42	10					.byte WordFlags	;wh_Flags
>8a43	03					.byte 3	;wh_CodeLength
>8a44	1a					  .byte LinkDisplacement
=$8a45					XtPtr1 ::= *
=35265					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a45	20 4d 85	jsr $854d	FIntFrc:	jsr FDup	; ( r1 r1 )
.8a48	20 a4 89	jsr $89a4			jsr Floor	; ( r1 rint )
.8a4b	20 09 86	jsr $8609			jsr FTuck	; ( rint r1 rint )
.8a4e	20 55 8b	jsr $8b55			jsr FMinus	; ( rint rfrac )
.8a51	4c d1 85	jmp $85d1			jmp FSwap	; ( rfrac rint )
=15					CL	.var *-XtPtr1
=$8a54					en = *	; remember here
>8a43	0f					.byte CL	;wh_CodeLength
>8a54	46 4d 41 6c 69 67 6e 58		L1:	.text "FMAlignX"	;  name of word as a string, ending at wh_NameLastChar
=35292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a5c	08					.byte (("FMAlignX"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>8a5d	10					.byte WordFlags	;wh_Flags
>8a5e	03					.byte 3	;wh_CodeLength
>8a5f	1b					  .byte LinkDisplacement
=$8a60					XtPtr1 ::= *
=35292					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a60	86 14		stx $14		FMAlignX:	stx tmp1+0	; save data stack index
.8a62	a6 4c		ldx $4c				ldx FIndex	; load FP stack index
.8a64	e0 09		cpx #$09			cpx #FDim-1	; check FP stack for >=2 entries
.8a66	b0 19		bcs $8a81			bcs Throw_FPStack_3
.8a68	b5 4d		lda $4d,x			lda FSExp+0,x	; compare exponents
.8a6a	38		sec				sec
.8a6b	f5 4e		sbc $4e,x			sbc FSExp+1,x
.8a6d	30 03		bmi $8a72			bmi _1		; r1 smaller?
.8a6f	d0 08		bne $8a79			bne _2		; r2 smaller?
.8a71	60		rts				rts
.8a72					_1:
.8a72	70 07		bvs $8a7b			bvs _2b		; was this a big positive #?
.8a74	b5 4e		lda $4e,x	_1b:		lda FSExp+1,x	; make r1 like r2
.8a76	4c d0 89	jmp $89d0			jmp FShiftAX
.8a79					_2:
.8a79	70 f7		bvs $8a72			bvs _1		; was this a big negative #?
.8a7b	b5 4d		lda $4d,x	_2b:		lda FSExp+0,x	; make r2 like r1
.8a7d	e8		inx				inx
.8a7e	4c d0 89	jmp $89d0			jmp FShiftAX
=33					CL	.var *-XtPtr1
=$8a81					en = *	; remember here
>8a5e	21					.byte CL	;wh_CodeLength
.8a81	20 56 b4	jsr $b456	Throw_FPStack_3: jsr Throw_FPStack
>8a84	46 4e 6f 72 6d			L1:	.text "FNorm"	;  name of word as a string, ending at wh_NameLastChar
=35337					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8a89	a5					.byte (("FNorm"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8a8a	10					.byte WordFlags	;wh_Flags
>8a8b	03					.byte 3	;wh_CodeLength
>8a8c	2d					  .byte LinkDisplacement
=$8a8d					XtPtr1 ::= *
=35337					WordListLink ::= Nt0 ; remember the nt of this word for later
.8a8d	86 14		stx $14		FNorm:		stx tmp1+0		; save data stack index
.8a8f	a6 4c		ldx $4c		FNormX:		ldx FIndex		; switch to FP stack
.8a91	b4 4d		ldy $4d,x			ldy FSExp,x
.8a93	b5 57		lda $57,x			lda FSMant0,x		; mantissa negative?
.8a95	30 2d		bmi $8ac4			bmi _Neg
.8a97	d0 0f		bne $8aa8			bne _Pos2		; do byte shift
.8a99	20 f7 8a	jsr $8af7			jsr _ShiftB
.8a9c	d0 0a		bne $8aa8			bne _Pos2
.8a9e	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa1	d0 05		bne $8aa8			bne _Pos2
.8aa3	20 f7 8a	jsr $8af7			jsr _ShiftB
.8aa6	f0 43		beq $8aeb			beq _zero		; no significant bits left?
.8aa8	18		clc		_Pos2:		clc
.8aa9	30 0a		bmi $8ab5			bmi _RShft
.8aab	88		dey		_Pos3:		dey			; do bit shift
.8aac	16 75		asl $75,x			asl FSMant3,x
.8aae	36 6b		rol $6b,x			rol FSMant2,x
.8ab0	36 61		rol $61,x			rol FSMant1,x
.8ab2	2a		rol a				rol a
.8ab3	10 f6		bpl $8aab			bpl _Pos3
.8ab5					_RShft:
.8ab5	c8		iny				iny
.8ab6	6a		ror a				ror a
.8ab7	76 61		ror $61,x			ror FSMant1,x
.8ab9	76 6b		ror $6b,x			ror FSMant2,x
.8abb	76 75		ror $75,x			ror FSMant3,x
.8abd					_28:
.8abd	95 57		sta $57,x			sta FSMant0,x
.8abf	94 4d		sty $4d,x			sty FSExp,x
.8ac1	a6 14		ldx $14				ldx tmp1+0	; restore data stack index
.8ac3	60		rts				rts
.8ac4					_Neg:
.8ac4	c9 ff		cmp #$ff			cmp #$ff
.8ac6	d0 11		bne $8ad9			bne _Neg2	; do byte shift
.8ac8	20 f7 8a	jsr $8af7			jsr _ShiftB
.8acb	c9 ff		cmp #$ff			cmp #$ff
.8acd	d0 0a		bne $8ad9			bne _Neg2
.8acf	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad2	c9 ff		cmp #$ff			cmp #$ff
.8ad4	d0 03		bne $8ad9			bne _Neg2
.8ad6	20 f7 8a	jsr $8af7			jsr _ShiftB
.8ad9	c9 00		cmp #$00	_Neg2:		cmp #0
.8adb	10 d8		bpl $8ab5			bpl _RShft
.8add	88		dey		_Neg3:		dey
.8ade	16 75		asl $75,x			asl FSMant3,x
.8ae0	36 6b		rol $6b,x			rol FSMant2,x
.8ae2	36 61		rol $61,x			rol FSMant1,x
.8ae4	2a		rol a				rol a
.8ae5	30 f6		bmi $8add			bmi _Neg3
.8ae7	10 cc		bpl $8ab5			bpl _RShft
.8ae9	68		pla		_Zerop:		pla
.8aea	68		pla				pla		; pop rts addr from _ShiftB
.8aeb	a9 00		lda #$00	_zero:		lda #0
.8aed	95 75		sta $75,x			sta FSMant3,x
.8aef	95 6b		sta $6b,x			sta FSMant2,x
.8af1	95 61		sta $61,x			sta FSMant1,x
.8af3	a0 80		ldy #$80			ldy #$80
.8af5	d0 c6		bne $8abd			bne _28
.8af7					_ShiftB:
.8af7	98		tya				tya		; exponent -= 8
.8af8	38		sec				sec
.8af9	e9 08		sbc #$08			sbc #8
.8afb	a8		tay				tay
.8afc	70 eb		bvs $8ae9			bvs _zerop	;is this useful? do we need more of them?
.8afe	b5 61		lda $61,x			lda FSMant1,x
.8b00	48		pha				pha
.8b01	b5 6b		lda $6b,x			lda FSMant2,x
.8b03	95 61		sta $61,x			sta FSMant1,x
.8b05	b5 75		lda $75,x			lda FSMant3,x
.8b07	95 6b		sta $6b,x			sta FSMant2,x
.8b09	a9 00		lda #$00			lda #0
.8b0b	95 75		sta $75,x			sta FSMant3,x
.8b0d	68		pla				pla
.8b0e	60		rts				rts
=130					CL	.var *-XtPtr1
=$8b0f					en = *	; remember here
>8a8b	82					.byte CL	;wh_CodeLength
>8b0f	46 2b				L1:	.text "F+"	;  name of word as a string, ending at wh_NameLastChar
=35473					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b11	62					.byte (("F+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=136					LinkDisplacement = Nt0-WordListLink
>8b12	10					.byte WordFlags	;wh_Flags
>8b13	03					.byte 3	;wh_CodeLength
>8b14	88					  .byte LinkDisplacement
=$8b15					XtPtr1 ::= *
=35473					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b15	20 60 8a	jsr $8a60	FPlus:		jsr FMAlignX	; align mantissas, X= fp stack index
.8b18	18		clc				clc		; add mantissas
.8b19	b5 76		lda $76,x			lda FSMant3+1,x
.8b1b	75 75		adc $75,x			adc FSMant3+0,x
.8b1d	95 76		sta $76,x			sta FSMant3+1,x
.8b1f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b21	75 6b		adc $6b,x			adc FSMant2+0,x
.8b23	95 6c		sta $6c,x			sta FSMant2+1,x
.8b25	b5 62		lda $62,x			lda FSMant1+1,x
.8b27	75 61		adc $61,x			adc FSMant1+0,x
.8b29	95 62		sta $62,x			sta FSMant1+1,x
.8b2b	b5 58		lda $58,x			lda FSMant0+1,x
.8b2d	75 57		adc $57,x			adc FSMant0+0,x
.8b2f					FPlusFin:
.8b2f	e8		inx				inx		; FDrop r2
.8b30	86 4c		stx $4c				stx FIndex
.8b32	50 09		bvc $8b3d	FPlusFin3:	bvc _19		; if overflow
.8b34	6a		ror a				ror a		;   shift mantissa right 1 bit
.8b35	76 61		ror $61,x			ror FSMant1,x
.8b37	76 6b		ror $6b,x			ror FSMant2,x
.8b39	76 75		ror $75,x			ror FSMant3,x
.8b3b	f6 4d		inc $4d,x			inc FSExp,x	;   adjust exponent
.8b3d					_19:
.8b3d	95 57		sta $57,x			sta FSMant0,x
.8b3f	4c 8f 8a	jmp $8a8f			jmp FNormX	; normalize, return
=45					CL	.var *-XtPtr1
=$8b42					en = *	; remember here
>8b13	2d					.byte CL	;wh_CodeLength
>8b42	46 31 2b			L1:	.text "F1+"	;  name of word as a string, ending at wh_NameLastChar
=35525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b45	63					.byte (("F1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>8b46	10					.byte WordFlags	;wh_Flags
>8b47	03					.byte 3	;wh_CodeLength
>8b48	34					  .byte LinkDisplacement
=$8b49					XtPtr1 ::= *
=35525					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b49	20 e3 88	jsr $88e3	F1Plus:		jsr F1
.8b4c	4c 15 8b	jmp $8b15			jmp FPlus
=6					CL	.var *-XtPtr1
=$8b4f					en = *	; remember here
>8b47	06					.byte CL	;wh_CodeLength
>8b4f	46 2d				L1:	.text "F-"	;  name of word as a string, ending at wh_NameLastChar
=35537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b51	a2					.byte (("F-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8b52	10					.byte WordFlags	;wh_Flags
>8b53	03					.byte 3	;wh_CodeLength
>8b54	0c					  .byte LinkDisplacement
=$8b55					XtPtr1 ::= *
=35537					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b55	20 60 8a	jsr $8a60	FMinus:		jsr FMAlignX	; align mantissas
.8b58	38		sec				sec		; subtract mantissas
.8b59	b5 76		lda $76,x			lda FSMant3+1,x
.8b5b	f5 75		sbc $75,x			sbc FSMant3+0,x
.8b5d	95 76		sta $76,x			sta FSMant3+1,x
.8b5f	b5 6c		lda $6c,x			lda FSMant2+1,x
.8b61	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8b63	95 6c		sta $6c,x			sta FSMant2+1,x
.8b65	b5 62		lda $62,x			lda FSMant1+1,x
.8b67	f5 61		sbc $61,x			sbc FSMant1+0,x
.8b69	95 62		sta $62,x			sta FSMant1+1,x
.8b6b	b5 58		lda $58,x			lda FSMant0+1,x
.8b6d	f5 57		sbc $57,x			sbc FSMant0+0,x
.8b6f	4c 2f 8b	jmp $8b2f			jmp FPlusFin
=29					CL	.var *-XtPtr1
=$8b72					en = *	; remember here
>8b53	1d					.byte CL	;wh_CodeLength
>8b72	46 31 2d			L1:	.text "F1-"	;  name of word as a string, ending at wh_NameLastChar
=35573					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b75	a3					.byte (("F1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>8b76	10					.byte WordFlags	;wh_Flags
>8b77	03					.byte 3	;wh_CodeLength
>8b78	24					  .byte LinkDisplacement
=$8b79					XtPtr1 ::= *
=35573					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b79	20 e3 88	jsr $88e3	F1Minus:	jsr F1
.8b7c	4c 55 8b	jmp $8b55			jmp FMinus
=6					CL	.var *-XtPtr1
=$8b7f					en = *	; remember here
>8b77	06					.byte CL	;wh_CodeLength
>8b7f	46 4e 65 67 61 74 65		L1:	.text "FNegate"	;  name of word as a string, ending at wh_NameLastChar
=35590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8b86	a7					.byte (("FNegate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>8b87	10					.byte WordFlags	;wh_Flags
>8b88	03					.byte 3	;wh_CodeLength
>8b89	11					  .byte LinkDisplacement
=$8b8a					XtPtr1 ::= *
=35590					WordListLink ::= Nt0 ; remember the nt of this word for later
.8b8a	86 14		stx $14		FNegate:	stx tmp1	; save data stack index
.8b8c	a6 4c		ldx $4c				ldx FIndex	; X= FP stack index
.8b8e	38		sec				sec		; mantissa = 0 - mantissa
.8b8f	a9 00		lda #$00			lda #0
.8b91	f5 75		sbc $75,x			sbc FSMant3,x
.8b93	95 75		sta $75,x			sta FSMant3,x
.8b95	a9 00		lda #$00			lda #0
.8b97	f5 6b		sbc $6b,x			sbc FSMant2,x
.8b99	95 6b		sta $6b,x			sta FSMant2,x
.8b9b	a9 00		lda #$00			lda #0
.8b9d	f5 61		sbc $61,x			sbc FSMant1,x
.8b9f	95 61		sta $61,x			sta FSMant1,x
.8ba1	a9 00		lda #$00			lda #0
.8ba3	f5 57		sbc $57,x			sbc FSMant0,x
.8ba5	4c 32 8b	jmp $8b32			jmp FPlusFin3	; finish up, return
=30					CL	.var *-XtPtr1
=$8ba8					en = *	; remember here
>8b88	1e					.byte CL	;wh_CodeLength
>8ba8	46 41 62 73			L1:	.text "FAbs"	;  name of word as a string, ending at wh_NameLastChar
=35628					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bac	64					.byte (("FAbs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>8bad	10					.byte WordFlags	;wh_Flags
>8bae	03					.byte 3	;wh_CodeLength
>8baf	26					  .byte LinkDisplacement
=$8bb0					XtPtr1 ::= *
=35628					WordListLink ::= Nt0 ; remember the nt of this word for later
.8bb0	a4 4c		ldy $4c		FAbs:		ldy FIndex
.8bb2	b9 57 00	lda $0057,y			lda FSMant0,y		; mantissa negative?
.8bb5	30 d3		bmi $8b8a			bmi FNegate
.8bb7	60		rts				rts
=8					CL	.var *-XtPtr1
=$8bb8					en = *	; remember here
>8bae	08					.byte CL	;wh_CodeLength
.8bb8	4c 56 b4	jmp $b456	Throw_FPStack_4: jmp Throw_FPStack
.8bbb	a4 4c		ldy $4c		FPos:		ldy FIndex		; load FP stack index
.8bbd	c0 09		cpy #$09			cpy #FDim-1		; check FP stack for 2
.8bbf	b0 f7		bcs $8bb8			bcs Throw_FPStack_4
.8bc1	b9 57 00	lda $0057,y			lda FSMant0+0,y		; calc result sign
.8bc4	59 58 00	eor $0058,y			eor FSMant0+1,y
.8bc7	08		php				php
.8bc8	b9 58 00	lda $0058,y			lda FSMant0+1,y		; if NOS negative
.8bcb	10 07		bpl $8bd4			bpl +
.8bcd	e6 4c		inc $4c				inc FIndex		;   point at NOS
.8bcf	20 8a 8b	jsr $8b8a			jsr FNegate		;   negate NOS
.8bd2	c6 4c		dec $4c				dec FIndex		;   restore fp
.8bd4					+
.8bd4	20 b0 8b	jsr $8bb0			jsr FAbs		; abs TOS
.8bd7	86 14		stx $14				stx tmp1+0		; save data stack index
.8bd9	a6 4c		ldx $4c				ldx FIndex		; load FP stack index
.8bdb	28		plp				plp			; restore sign flag
.8bdc	60		rts				rts
>8bdd	46 2a				L1:	.text "F*"	;  name of word as a string, ending at wh_NameLastChar
=35679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8bdf	42					.byte (("F*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=51					LinkDisplacement = Nt0-WordListLink
>8be0	10					.byte WordFlags	;wh_Flags
>8be1	03					.byte 3	;wh_CodeLength
>8be2	33					  .byte LinkDisplacement
=$8be3					XtPtr1 ::= *
=35679					WordListLink ::= Nt0 ; remember the nt of this word for later
.8be3					FStar:
.8be3	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive,
.8be6	08		php				php			;   save r3 sign
.8be7	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8be9	38		sec				sec
.8bea	75 4e		adc $4e,x			adc FSExp+1,x
.8bec	95 4e		sta $4e,x			sta FSExp+1,x
.8bee	50 12		bvc $8c02			bvc _49			; IfVs,
.8bf0	b0 06		bcs $8bf8			bcs _zero		;   underflow?
.8bf2	a6 14		ldx $14				ldx tmp1+0		;   restore data stack index
.8bf4	28		plp				plp			; RDrop sign flag
.8bf5	20 60 b4	jsr $b460			jsr Throw_FpOutOfRange
.8bf8	e8		inx		_zero:		inx			; F2Drop
.8bf9	e8		inx				inx
.8bfa	86 4c		stx $4c				stx FIndex
.8bfc	28		plp				plp			; rdrop saved result sign
.8bfd	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8bff	4c ab 88	jmp $88ab			jmp F0			; return zero
.8c02					_49:
.8c02	a9 00		lda #$00			lda #0			; tmp32= 0
.8c04	85 16		sta $16				sta tmp2+0
.8c06	85 17		sta $17				sta tmp2+1
.8c08	85 18		sta $18				sta tmp3+0
.8c0a	85 19		sta $19				sta tmp3+1
.8c0c	b5 76		lda $76,x			lda FSMant3+1,x
.8c0e	20 3d 8c	jsr $8c3d			jsr _Byte		; do bytes of r1 mantissa
.8c11	b5 6c		lda $6c,x			lda FSMant2+1,x
.8c13	20 3d 8c	jsr $8c3d			jsr _Byte
.8c16	b5 62		lda $62,x			lda FSMant1+1,x
.8c18	20 3d 8c	jsr $8c3d			jsr _Byte
.8c1b	b5 58		lda $58,x			lda FSMant0+1,x
.8c1d	20 3d 8c	jsr $8c3d			jsr _Byte
.8c20	a5 16		lda $16				lda tmp2+0		; r1.mant= tmp32
.8c22	95 76		sta $76,x			sta FSMant3+1,x
.8c24	a5 17		lda $17				lda tmp2+1
.8c26	95 6c		sta $6c,x			sta FSMant2+1,x
.8c28	a5 18		lda $18				lda tmp3+0
.8c2a	95 62		sta $62,x			sta FSMant1+1,x
.8c2c	a5 19		lda $19				lda tmp3+1
.8c2e	95 58		sta $58,x			sta FSMant0+1,x
.8c30	e6 4c		inc $4c				inc FIndex		; FDrop
.8c32	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8c34	28		plp				plp			; fix result sign
.8c35	10 03		bpl $8c3a			bpl +
.8c37	4c 8a 8b	jmp $8b8a			jmp FNegate
.8c3a					+
.8c3a	4c 8d 8a	jmp $8a8d			jmp FNorm
.8c3d					_Byte:
.8c3d	49 ff		eor #$ff			eor #$ff
.8c3f	85 15		sta $15				sta tmp1+1
.8c41	a0 08		ldy #$08			ldy #8			; for each bit in byte
.8c43	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8c45	b0 18		bcs $8c5f			bcs _b3
.8c47	a5 16		lda $16				lda tmp2+0		;     tmp32 += r2
.8c49	75 75		adc $75,x			adc FSMant3+0,x
.8c4b	85 16		sta $16				sta tmp2+0
.8c4d	a5 17		lda $17				lda tmp2+1
.8c4f	75 6b		adc $6b,x			adc FSMant2+0,x
.8c51	85 17		sta $17				sta tmp2+1
.8c53	a5 18		lda $18				lda tmp3+0
.8c55	75 61		adc $61,x			adc FSMant1+0,x
.8c57	85 18		sta $18				sta tmp3+0
.8c59	a5 19		lda $19				lda tmp3+1
.8c5b	75 57		adc $57,x			adc FSMant0+0,x
.8c5d	85 19		sta $19				sta tmp3+1
.8c5f	46 19		lsr $19		_b3:		lsr tmp3+1		;   tmp32 >>= 1
.8c61	66 18		ror $18				ror tmp3+0
.8c63	66 17		ror $17				ror tmp2+1
.8c65	66 16		ror $16				ror tmp2+0
.8c67	88		dey				dey			;  next bit
.8c68	d0 d9		bne $8c43			bne _b1
.8c6a	60		rts				rts
=136					CL	.var *-XtPtr1
=$8c6b					en = *	; remember here
>8be1	88					.byte CL	;wh_CodeLength
>8c6b	46 53 71 72			L1:	.text "FSqr"	;  name of word as a string, ending at wh_NameLastChar
=35823					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c6f	44					.byte (("FSqr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=144					LinkDisplacement = Nt0-WordListLink
>8c70	10					.byte WordFlags	;wh_Flags
>8c71	03					.byte 3	;wh_CodeLength
>8c72	90					  .byte LinkDisplacement
=$8c73					XtPtr1 ::= *
=35823					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c73	20 4d 85	jsr $854d	FSqr:		jsr FDup
.8c76	4c e3 8b	jmp $8be3			jmp FStar
=6					CL	.var *-XtPtr1
=$8c79					en = *	; remember here
>8c71	06					.byte CL	;wh_CodeLength
>8c79	46 31 30 2a			L1:	.text "F10*"	;  name of word as a string, ending at wh_NameLastChar
=35837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c7d	44					.byte (("F10*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>8c7e	10					.byte WordFlags	;wh_Flags
>8c7f	03					.byte 3	;wh_CodeLength
>8c80	0e					  .byte LinkDisplacement
=$8c81					XtPtr1 ::= *
=35837					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c81	20 4d 85	jsr $854d	F10Star:	jsr FDup
.8c84	a4 4c		ldy $4c				ldy FIndex
.8c86	b9 4d 00	lda $004d,y			lda FSExp+0,y
.8c89	18		clc				clc
.8c8a	69 01		adc #$01			adc #1
.8c8c	99 4d 00	sta $004d,y			sta FSExp+0,y
.8c8f	18		clc				clc
.8c90	69 02		adc #$02			adc #2
.8c92	99 4e 00	sta $004e,y			sta FSExp+1,y
.8c95	4c 15 8b	jmp $8b15			jmp FPlus
=23					CL	.var *-XtPtr1
=$8c98					en = *	; remember here
>8c7f	17					.byte CL	;wh_CodeLength
>8c98	46 2f				L1:	.text "F/"	;  name of word as a string, ending at wh_NameLastChar
=35866					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8c9a	e2					.byte (("F/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>8c9b	10					.byte WordFlags	;wh_Flags
>8c9c	03					.byte 3	;wh_CodeLength
>8c9d	1d					  .byte LinkDisplacement
=$8c9e					XtPtr1 ::= *
=35866					WordListLink ::= Nt0 ; remember the nt of this word for later
.8c9e	20 bb 8b	jsr $8bbb	FSlash:		jsr FPos		; make r1 & r2 positive
.8ca1	08		php				php			;   save result sign
.8ca2	b5 4e		lda $4e,x			lda FSExp+1,x		; calc exponent
.8ca4	18		clc				clc
.8ca5	69 01		adc #$01			adc #1
.8ca7	38		sec				sec
.8ca8	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8caa	95 4e		sta $4e,x			sta FSExp+1,x
.8cac	50 12		bvc $8cc0			bvc _49			;  IfVs
.8cae	b0 06		bcs $8cb6			bcs _Zero		; underflow?
.8cb0	28		plp				plp			; drop saved result sign
.8cb1	a6 15		ldx $15				ldx tmp1+1		; restore data stack index
.8cb3	20 60 b4	jsr $b460			jsr Throw_FpOutOfRange	; overflow
.8cb6	e8		inx		_Zero:		inx			; F2Drop
.8cb7	e8		inx				inx
.8cb8	86 4c		stx $4c				stx FIndex
.8cba	28		plp				plp			; drop saved result sign
.8cbb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8cbd	4c ab 88	jmp $88ab			jmp F0			; return 0
.8cc0					_49:
.8cc0	b5 76		lda $76,x			lda FSMant3+1,x		; tmp32 = r1
.8cc2	85 16		sta $16				sta tmp2+0
.8cc4	b5 6c		lda $6c,x			lda FSMant2+1,x
.8cc6	85 17		sta $17				sta tmp2+1
.8cc8	b5 62		lda $62,x			lda FSMant1+1,x
.8cca	85 18		sta $18				sta tmp3+0
.8ccc	b5 58		lda $58,x			lda FSMant0+1,x
.8cce	85 19		sta $19				sta tmp3+1
.8cd0	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd3	95 58		sta $58,x			sta FSMant0+1,x
.8cd5	20 f9 8c	jsr $8cf9			jsr _Byte
.8cd8	95 62		sta $62,x			sta FSMant1+1,x
.8cda	20 f9 8c	jsr $8cf9			jsr _Byte
.8cdd	95 6c		sta $6c,x			sta FSMant2+1,x
.8cdf	20 f9 8c	jsr $8cf9			jsr _Byte
.8ce2	95 76		sta $76,x			sta FSMant3+1,x
.8ce4	56 58		lsr $58,x			lsr FSMant0+1,x
.8ce6	76 62		ror $62,x			ror FSMant1+1,x
.8ce8	76 6c		ror $6c,x			ror FSMant2+1,x
.8cea	76 76		ror $76,x			ror FSMant3+1,x
.8cec	e6 4c		inc $4c				inc FIndex		; FDrop
.8cee	a6 14		ldx $14				ldx tmp1+0		; restore X
.8cf0	28		plp				plp			; fix sign
.8cf1	10 03		bpl $8cf6			bpl +
.8cf3	20 8a 8b	jsr $8b8a			jsr FNegate
.8cf6	4c 8d 8a	jmp $8a8d	+		jmp FNorm
.8cf9					_Byte:
.8cf9	a0 08		ldy #$08			ldy #8			; for 8 bits
.8cfb					_1:
.8cfb	a5 19		lda $19				lda tmp3+1		;   if r1>=r2
.8cfd	d5 57		cmp $57,x			cmp FSMant0+0,x
.8cff	d0 10		bne $8d11			bne _4
.8d01	a5 18		lda $18				lda tmp3+0
.8d03	d5 61		cmp $61,x			cmp FSMant1+0,x
.8d05	d0 0a		bne $8d11			bne _4
.8d07	a5 17		lda $17				lda tmp2+1
.8d09	d5 6b		cmp $6b,x			cmp FSMant2+0,x
.8d0b	d0 04		bne $8d11			bne _4
.8d0d	a5 16		lda $16				lda tmp2+0
.8d0f	d5 75		cmp $75,x			cmp FSMant3+0,x
.8d11	90 18		bcc $8d2b	_4:		bcc _2
.8d13	a5 16		lda $16				lda tmp2+0		;     tmp32 -= r2
.8d15	f5 75		sbc $75,x			sbc FSMant3+0,x
.8d17	85 16		sta $16				sta tmp2+0
.8d19	a5 17		lda $17				lda tmp2+1
.8d1b	f5 6b		sbc $6b,x			sbc FSMant2+0,x
.8d1d	85 17		sta $17				sta tmp2+1
.8d1f	a5 18		lda $18				lda tmp3+0
.8d21	f5 61		sbc $61,x			sbc FSMant1+0,x
.8d23	85 18		sta $18				sta tmp3+0
.8d25	a5 19		lda $19				lda tmp3+1
.8d27	f5 57		sbc $57,x			sbc FSMant0+0,x
.8d29	85 19		sta $19				sta tmp3+1
.8d2b	26 15		rol $15		_2:		rol tmp1+1		;   accum quotient bits
.8d2d	06 16		asl $16				asl tmp2+0
.8d2f	26 17		rol $17				rol tmp2+1
.8d31	26 18		rol $18				rol tmp3+0
.8d33	26 19		rol $19				rol tmp3+1		;   tmp32<<=1
.8d35	88		dey				dey			;  next
.8d36	d0 c3		bne $8cfb			bne _1
.8d38	a5 15		lda $15				lda tmp1+1		; return bits
.8d3a	60		rts				rts
=157					CL	.var *-XtPtr1
=$8d3b					en = *	; remember here
>8c9c	9d					.byte CL	;wh_CodeLength
>8d3b	46 31 2f			L1:	.text "F1/"	;  name of word as a string, ending at wh_NameLastChar
=36030					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d3e	e3					.byte (("F1/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=164					LinkDisplacement = Nt0-WordListLink
>8d3f	10					.byte WordFlags	;wh_Flags
>8d40	03					.byte 3	;wh_CodeLength
>8d41	a4					  .byte LinkDisplacement
=$8d42					XtPtr1 ::= *
=36030					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d42	20 e3 88	jsr $88e3	F1Slash:	jsr F1
.8d45	20 d1 85	jsr $85d1			jsr FSwap
.8d48	4c 9e 8c	jmp $8c9e			jmp FSlash
=9					CL	.var *-XtPtr1
=$8d4b					en = *	; remember here
>8d40	09					.byte CL	;wh_CodeLength
>8d4b	45 2a				L1:	.text "E*"	;  name of word as a string, ending at wh_NameLastChar
=36045					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8d4d	42					.byte (("E*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8d4e	10					.byte WordFlags	;wh_Flags
>8d4f	03					.byte 3	;wh_CodeLength
>8d50	0f					  .byte LinkDisplacement
=$8d51					XtPtr1 ::= *
=36045					WordListLink ::= Nt0 ; remember the nt of this word for later
.8d51					EStar:
.8d51	20 bb 8b	jsr $8bbb			jsr FPos		; make r1 & r2 positive
.8d54	08		php				php			;   remember result sign
.8d55	b5 4d		lda $4d,x			lda FSExp+0,x		; add exponents
.8d57	38		sec				sec
.8d58	75 4e		adc $4e,x			adc FSExp+1,x
.8d5a	95 4e		sta $4e,x			sta FSExp+1,x
.8d5c	70 15		bvs $8d73			bvs _ExpOvfl
.8d5e	b5 58		lda $58,x			lda FSMant0+1,x		; save e1
.8d60	48		pha				pha
.8d61	b5 62		lda $62,x			lda FSMant1+1,x
.8d63	a0 00		ldy #$00			ldy #0
.8d65	94 58		sty $58,x			sty FSMant0+1,x
.8d67	94 62		sty $62,x			sty FSMant1+1,x		; zero result
.8d69	20 82 8d	jsr $8d82			jsr _Byte		; do FSMant1+1 byte
.8d6c	68		pla				pla
.8d6d	20 82 8d	jsr $8d82			jsr _Byte		; do FSMant0+1 byte
.8d70	4c 9f 8d	jmp $8d9f			jmp EFix3		; finish
.8d73					_ExpOvfl:
.8d73	b0 05		bcs $8d7a			bcs _Zero		;underflow?
.8d75	a6 14		ldx $14				ldx tmp1+0		; restore X
.8d77	20 60 b4	jsr $b460			jsr Throw_FpOutOfRange	;overflow
.8d7a	a9 00		lda #$00	_Zero:		lda #0
.8d7c	95 62		sta $62,x			sta FSMant1+1,x
.8d7e	95 58		sta $58,x			sta FSMant0+1,x
.8d80	f0 1d		beq $8d9f			beq EFix3
.8d82					_Byte:
.8d82	85 15		sta $15				sta tmp1+1
.8d84	a0 08		ldy #$08			ldy #8			; for 8 bits
.8d86	46 15		lsr $15		_b1:		lsr tmp1+1		;   if bit set
.8d88	90 0d		bcc $8d97			bcc _b5
.8d8a	18		clc				clc			;     r3 += r2
.8d8b	b5 61		lda $61,x			lda FSMant1+0,x
.8d8d	75 62		adc $62,x			adc FSMant1+1,x
.8d8f	95 62		sta $62,x			sta FSMant1+1,x
.8d91	b5 57		lda $57,x			lda FSMant0+0,x
.8d93	75 58		adc $58,x			adc FSMant0+1,x
.8d95	95 58		sta $58,x			sta FSMant0+1,x
.8d97					_b5:
.8d97	76 58		ror $58,x			ror FSMant0+1,x		;   r3 <<= 1
.8d99	76 62		ror $62,x			ror FSMant1+1,x
.8d9b	88		dey				dey			;  next bit
.8d9c	d0 e8		bne $8d86			bne _b1
.8d9e	60		rts				rts
=78					CL	.var *-XtPtr1
=$8d9f					en = *	; remember here
>8d4f	4e					.byte CL	;wh_CodeLength
.8d9f					EFix3:
.8d9f	a9 00		lda #$00			lda #0			; zero unused mantissa
.8da1	95 6c		sta $6c,x			sta FSMant2+1,x
.8da3	95 76		sta $76,x			sta FSMant3+1,x
.8da5	e6 4c		inc $4c				inc FIndex		; FDrop
.8da7	a6 14		ldx $14				ldx tmp1+0		; restore X
.8da9	28		plp				plp			;fix result sign
.8daa	10 03		bpl $8daf			bpl +
.8dac	4c 8a 8b	jmp $8b8a			jmp FNegate
.8daf	4c 8d 8a	jmp $8a8d	+		jmp FNorm
>8db2	45 53 71 72			L1:	.text "ESqr"	;  name of word as a string, ending at wh_NameLastChar
=36150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8db6	44					.byte (("ESqr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>8db7	10					.byte WordFlags	;wh_Flags
>8db8	03					.byte 3	;wh_CodeLength
>8db9	69					  .byte LinkDisplacement
=$8dba					XtPtr1 ::= *
=36150					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dba	20 4d 85	jsr $854d	ESqr:		jsr FDup
.8dbd	4c 51 8d	jmp $8d51			jmp EStar
=6					CL	.var *-XtPtr1
=$8dc0					en = *	; remember here
>8db8	06					.byte CL	;wh_CodeLength
>8dc0	45 2f				L1:	.text "E/"	;  name of word as a string, ending at wh_NameLastChar
=36162					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8dc2	e2					.byte (("E/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>8dc3	10					.byte WordFlags	;wh_Flags
>8dc4	03					.byte 3	;wh_CodeLength
>8dc5	0c					  .byte LinkDisplacement
=$8dc6					XtPtr1 ::= *
=36162					WordListLink ::= Nt0 ; remember the nt of this word for later
.8dc6	20 bb 8b	jsr $8bbb	ESlash:		jsr FPos	; make r1 & r2 positive
.8dc9	08		php				php		; remember result sign
.8dca	b5 4e		lda $4e,x			lda FSExp+1,x		; calc r3 exponent
.8dcc	38		sec				sec
.8dcd	f5 4d		sbc $4d,x			sbc FSExp+0,x
.8dcf	70 17		bvs $8de8			bvs _ExpOvfl
.8dd1	18		clc				clc
.8dd2	69 01		adc #$01			adc #1
.8dd4	95 4e		sta $4e,x			sta FSExp+1,x
.8dd6	20 ee 8d	jsr $8dee			jsr _Byte		; gen quotient hi byte
.8dd9	48		pha				pha
.8dda	20 ee 8d	jsr $8dee			jsr _Byte		; gen quotient lo byte
.8ddd	95 62		sta $62,x			sta FSMant1+1,x
.8ddf	68		pla				pla
.8de0	4a		lsr a				lsr a
.8de1	95 58		sta $58,x			sta FSMant0+1,x
.8de3	76 62		ror $62,x			ror FSMant1+1,x
.8de5	4c 9f 8d	jmp $8d9f			jmp EFix3
.8de8					_ExpOvfl:
.8de8	28		plp				plp			; rdrop saved result sign
.8de9	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8deb	20 60 b4	jsr $b460			jsr Throw_FpOutOfRange	; overflow
.8dee					_Byte:
.8dee	a0 08		ldy #$08			ldy #8			; for 8 bits
.8df0	b5 62		lda $62,x	_b1:		lda FSMant1+1,x		;   if r1 >= r2
.8df2	d5 61		cmp $61,x			cmp FSMant1+0,x
.8df4	b5 58		lda $58,x			lda FSMant0+1,x
.8df6	f5 57		sbc $57,x			sbc FSMant0+0,x
.8df8	90 09		bcc $8e03			bcc _b5
.8dfa	95 58		sta $58,x			sta FSMant0+1,x
.8dfc	b5 62		lda $62,x			lda FSMant1+1,x		;     r1 -= r2
.8dfe	f5 61		sbc $61,x			sbc FSMant1+0,x
.8e00	95 62		sta $62,x			sta FSMant1+1,x
.8e02	38		sec				sec
.8e03					_b5:
.8e03	26 15		rol $15				rol tmp1+1		;   save quotient bit
.8e05	16 62		asl $62,x			asl FSMant1+1,x		;   r1 *= 2
.8e07	36 58		rol $58,x			rol FSMant0+1,x
.8e09	88		dey				dey			;  next bit
.8e0a	d0 e4		bne $8df0			bne _b1
.8e0c	a5 15		lda $15				lda tmp1+1		; return bits
.8e0e	60		rts				rts
=73					CL	.var *-XtPtr1
=$8e0f					en = *	; remember here
>8dc4	49					.byte CL	;wh_CodeLength
>8e0f	45 31 2f			L1:	.text "E1/"	;  name of word as a string, ending at wh_NameLastChar
=36242					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e12	e3					.byte (("E1/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>8e13	10					.byte WordFlags	;wh_Flags
>8e14	03					.byte 3	;wh_CodeLength
>8e15	50					  .byte LinkDisplacement
=$8e16					XtPtr1 ::= *
=36242					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e16	20 e3 88	jsr $88e3	E1Slash:	jsr F1
.8e19	20 d1 85	jsr $85d1			jsr FSwap
.8e1c	4c c6 8d	jmp $8dc6			jmp ESlash
=9					CL	.var *-XtPtr1
=$8e1f					en = *	; remember here
>8e14	09					.byte CL	;wh_CodeLength
>8e1f	53 3e 46			L1:	.text "S>F"	;  name of word as a string, ending at wh_NameLastChar
=36258					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e22	c3					.byte (("S>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>8e23	10					.byte WordFlags	;wh_Flags
>8e24	03					.byte 3	;wh_CodeLength
>8e25	10					  .byte LinkDisplacement
=$8e26					XtPtr1 ::= *
=36258					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e26	20 00 b4	jsr $b400	SToF:		jsr PopYA		; pop n
.8e29	20 c2 84	jsr $84c2	SToFYA:		jsr FAllocX		; alloc FP stack entry
.8e2c	94 57		sty $57,x			sty FSMant0,x		; copy n to mantissa
.8e2e	95 61		sta $61,x			sta FSMant1,x
.8e30	a9 00		lda #$00			lda #0			; pad mantissa
.8e32	95 6b		sta $6b,x			sta FSMant2,x
.8e34	95 75		sta $75,x			sta FSMant3,x
.8e36	a9 0f		lda #$0f			lda #15			; set exponent
.8e38	95 4d		sta $4d,x			sta FSExp,x
.8e3a	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=23					CL	.var *-XtPtr1
=$8e3d					en = *	; remember here
>8e24	17					.byte CL	;wh_CodeLength
>8e3d	44 3e 46			L1:	.text "D>F"	;  name of word as a string, ending at wh_NameLastChar
=36288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e40	c3					.byte (("D>F"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>8e41	10					.byte WordFlags	;wh_Flags
>8e42	03					.byte 3	;wh_CodeLength
>8e43	1e					  .byte LinkDisplacement
=$8e44					XtPtr1 ::= *
=36288					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e44	20 c2 84	jsr $84c2	FDToF:		jsr FAllocX		; alloc FP stack entry
.8e47	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e49	a4 4c		ldy $4c				ldy FIndex		; Y= fp stack index
.8e4b	b5 26		lda $26,x			lda DStack+2,x		; mantissa= d
.8e4d	99 75 00	sta $0075,y			sta FSMant3,y
.8e50	b5 27		lda $27,x			lda DStack+3,x
.8e52	99 6b 00	sta $006b,y			sta FSMant2,y
.8e55	b5 24		lda $24,x			lda DStack+0,x
.8e57	99 61 00	sta $0061,y			sta FSMant1,y
.8e5a	b5 25		lda $25,x			lda DStack+1,x
.8e5c	99 57 00	sta $0057,y			sta FSMant0,y
.8e5f	a9 1f		lda #$1f			lda #31			; set exponent
.8e61	99 4d 00	sta $004d,y			sta FSExp,y
.8e64	20 4a c5	jsr $c54a			jsr Two_Drop
.8e67	4c 8d 8a	jmp $8a8d			jmp FNorm		; normalize, return
=38					CL	.var *-XtPtr1
=$8e6a					en = *	; remember here
>8e42	26					.byte CL	;wh_CodeLength
>8e6a	46 3e 53			L1:	.text "F>S"	;  name of word as a string, ending at wh_NameLastChar
=36333					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8e6d	63					.byte (("F>S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>8e6e	10					.byte WordFlags	;wh_Flags
>8e6f	03					.byte 3	;wh_CodeLength
>8e70	2d					  .byte LinkDisplacement
=$8e71					XtPtr1 ::= *
=36333					WordListLink ::= Nt0 ; remember the nt of this word for later
.8e71	a4 4c		ldy $4c		FToS:		ldy FIndex
.8e73	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8e76	08		php				php
.8e77	10 03		bpl $8e7c			bpl +
.8e79	20 8a 8b	jsr $8b8a			jsr FNegate
.8e7c					+
.8e7c	a9 0f		lda #$0f			lda #15
.8e7e	20 cc 89	jsr $89cc			jsr FShiftA
.8e81	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8e83	c0 10		cpy #$10			cpy #15+1		; always positive, so unsigned compare works
.8e85	b0 17		bcs $8e9e			bcs _overflow
.8e87	a4 4c		ldy $4c				ldy FIndex
.8e89	ca		dex				dex
.8e8a	ca		dex				dex
.8e8b	b9 57 00	lda $0057,y			lda FSMant0,y
.8e8e	95 25		sta $25,x			sta DStack+1,x
.8e90	b9 61 00	lda $0061,y			lda FSMant1,y
.8e93	95 24		sta $24,x			sta DStack+0,x
.8e95	e6 4c		inc $4c				inc FIndex		; FDrop
.8e97	28		plp				plp			; apply saved sign
.8e98	30 01		bmi $8e9b			bmi +
.8e9a	60		rts				rts
.8e9b	4c be c6	jmp $c6be	+		jmp Negate
.8e9e	28		plp		_overflow:	plp			; RDrop saved sign
.8e9f	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ea1	20 85 b4	jsr $b485			jsr ThrowA
=51					CL	.var *-XtPtr1
=$8ea4					en = *	; remember here
>8e6f	33					.byte CL	;wh_CodeLength
>8ea4	46 3e 44			L1:	.text "F>D"	;  name of word as a string, ending at wh_NameLastChar
=36391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8ea7	83					.byte (("F>D"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>8ea8	10					.byte WordFlags	;wh_Flags
>8ea9	03					.byte 3	;wh_CodeLength
>8eaa	3a					  .byte LinkDisplacement
=$8eab					XtPtr1 ::= *
=36391					WordListLink ::= Nt0 ; remember the nt of this word for later
.8eab	a4 4c		ldy $4c		FToD:		ldy FIndex
.8ead	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.8eb0	08		php				php
.8eb1	10 03		bpl $8eb6			bpl +
.8eb3	20 8a 8b	jsr $8b8a			jsr FNegate
.8eb6					+
.8eb6	a9 1f		lda #$1f			lda #31
.8eb8	20 cc 89	jsr $89cc			jsr FShiftA
.8ebb	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.8ebd	c0 20		cpy #$20			cpy #31+1		; always positive, so unsigned compare works
.8ebf	b0 23		bcs $8ee4			bcs _overflow
.8ec1	a4 4c		ldy $4c				ldy FIndex
.8ec3	ca		dex				dex			; d= mantissa
.8ec4	ca		dex				dex
.8ec5	ca		dex				dex
.8ec6	ca		dex				dex
.8ec7	b9 57 00	lda $0057,y			lda FSMant0,y
.8eca	95 25		sta $25,x			sta DStack+1,x
.8ecc	b9 61 00	lda $0061,y			lda FSMant1,y
.8ecf	95 24		sta $24,x			sta DStack+0,x
.8ed1	b9 6b 00	lda $006b,y			lda FSMant2,y
.8ed4	95 27		sta $27,x			sta DStack+3,x
.8ed6	b9 75 00	lda $0075,y			lda FSMant3,y
.8ed9	95 26		sta $26,x			sta DStack+2,x
.8edb	e6 4c		inc $4c				inc FIndex		; FDrop
.8edd	28		plp				plp			; apply saved sign
.8ede	30 01		bmi $8ee1			bmi +
.8ee0	60		rts				rts
.8ee1	4c ed c6	jmp $c6ed	+		jmp DNegate
.8ee4	28		plp		_overflow:	plp			; RDrop sign
.8ee5	a9 f5		lda #$f5			lda #$100+err_OutOfRange
.8ee7	20 85 b4	jsr $b485			jsr ThrowA
=63					CL	.var *-XtPtr1
=$8eea					en = *	; remember here
>8ea9	3f					.byte CL	;wh_CodeLength
>8eea	46 52 6e 64			L1:	.text "FRnd"	;  name of word as a string, ending at wh_NameLastChar
=36462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8eee	84					.byte (("FRnd"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>8eef	10					.byte WordFlags	;wh_Flags
>8ef0	03					.byte 3	;wh_CodeLength
>8ef1	47					  .byte LinkDisplacement
=$8ef2					XtPtr1 ::= *
=36462					WordListLink ::= Nt0 ; remember the nt of this word for later
.8ef2	20 fd 82	jsr $82fd	FRnd:		jsr Rand		; generate next RndState
.8ef5	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.8ef8	4a		lsr a				lsr a			;   make positive
.8ef9	95 57		sta $57,x			sta FSMant0,x
.8efb	94 61		sty $61,x			sty FSMant1,x
.8efd	ad 35 03	lda $0335			lda RndState+0
.8f00	95 6b		sta $6b,x			sta FSMant2,x
.8f02	ad 36 03	lda $0336			lda RndState+1
.8f05	95 75		sta $75,x			sta FSMant3,x
.8f07	a9 00		lda #$00			lda #0			; exponent=0
.8f09	95 4d		sta $4d,x			sta FSExp,x
.8f0b	4c 8f 8a	jmp $8a8f			jmp FNormX		; normalize, return
=28					CL	.var *-XtPtr1
=$8f0e					en = *	; remember here
>8ef0	1c					.byte CL	;wh_CodeLength
>8f0e	46 53 71 72 74			L1:	.text "FSqrt"	;  name of word as a string, ending at wh_NameLastChar
=36499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f13	85					.byte (("FSqrt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>8f14	10					.byte WordFlags	;wh_Flags
>8f15	03					.byte 3	;wh_CodeLength
>8f16	25					  .byte LinkDisplacement
=$8f17					XtPtr1 ::= *
=36499					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f17	a4 4c		ldy $4c		FSqrt:		ldy FIndex
.8f19	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.8f1c	d0 01		bne $8f1f			bne +
.8f1e	60		rts				rts			;   just return the zero
.8f1f					+
.8f1f	20 4d 85	jsr $854d			jsr FDup		; get trial value
.8f22	a4 4c		ldy $4c				ldy FIndex
.8f24	b9 4d 00	lda $004d,y			lda FSExp,y		; halve the exponent of trial value
.8f27	c9 80		cmp #$80			cmp #$80
.8f29	6a		ror a				ror a
.8f2a	99 4d 00	sta $004d,y			sta FSExp,y
.8f2d	a9 09		lda #$09			lda #9			; for 9 iterations
.8f2f	48		pha		_3:		pha
.8f30	20 c2 85	jsr $85c2			jsr F2Dup		;   calc new trial value
.8f33	20 9e 8c	jsr $8c9e			jsr FSlash
.8f36	20 15 8b	jsr $8b15			jsr FPlus
.8f39	20 97 89	jsr $8997			jsr F2Slash
.8f3c	68		pla				pla			;  next
.8f3d	38		sec				sec
.8f3e	e9 01		sbc #$01			sbc #1
.8f40	d0 ed		bne $8f2f			bne _3
.8f42	4c 28 85	jmp $8528			jmp FNip		; return trial value
=46					CL	.var *-XtPtr1
=$8f45					en = *	; remember here
>8f15	2e					.byte CL	;wh_CodeLength
>8f45	50 72 65 63 69 73 69 6f		L1:	.text "Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f4d	6e
=36558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f4e	c9					.byte (("Precision"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=59					LinkDisplacement = Nt0-WordListLink
>8f4f	10					.byte WordFlags	;wh_Flags
>8f50	03					.byte 3	;wh_CodeLength
>8f51	3b					  .byte LinkDisplacement
=$8f52					XtPtr1 ::= *
=36558					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f52	ad ff 02	lda $02ff	Precision:	lda PrecisionV
.8f55	4c ec b7	jmp $b7ec			jmp PushZA
=6					CL	.var *-XtPtr1
=$8f58					en = *	; remember here
>8f50	06					.byte CL	;wh_CodeLength
.8f58	60		rts				rts
>8f59	53 65 74 2d 50 72 65 63		L1:	.text "Set-Precision"	;  name of word as a string, ending at wh_NameLastChar
>8f61	69 73 69 6f 6e
=36582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f66	cd					.byte (("Set-Precision"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>8f67	10					.byte WordFlags	;wh_Flags
>8f68	03					.byte 3	;wh_CodeLength
>8f69	18					  .byte LinkDisplacement
=$8f6a					XtPtr1 ::= *
=36582					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f6a	20 e5 b3	jsr $b3e5			jsr PopA
.8f6d	8d ff 02	sta $02ff			sta PrecisionV
=6					CL	.var *-XtPtr1
=$8f70					en = *	; remember here
>8f68	06					.byte CL	;wh_CodeLength
.8f70	60		rts				rts
>8f71	28 46 2e 29			L1:	.text "(F.)"	;  name of word as a string, ending at wh_NameLastChar
=36597					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>8f75	24					.byte (("(F.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>8f76	10					.byte WordFlags	;wh_Flags
>8f77	03					.byte 3	;wh_CodeLength
>8f78	0f					  .byte LinkDisplacement
=$8f79					XtPtr1 ::= *
=36597					WordListLink ::= Nt0 ; remember the nt of this word for later
.8f79	20 f6 8f	jsr $8ff6	PFDot:		jsr pfcst		;start collecting chars, make r positive
.8f7c	20 82 8f	jsr $8f82			jsr PFDotSub
.8f7f	4c 14 90	jmp $9014			jmp pfcen
.8f82					PFDotSub:
.8f82	20 52 8f	jsr $8f52			jsr Precision	;alloc & init work area
.8f85	20 03 b8	jsr $b803			jsr One
=$27					_mantNzFound  = DStack+3	; nonzero mantissa digit processed
=$26					_NumSigDigits = DStack+2	; # of significant digits
=$24					_decimalPos   = DStack+0	; decimal point position
.8f88	20 d6 8f	jsr $8fd6			jsr FLt10		; scale down to <10, counting exponent
.8f8b					_c:
.8f8b	b5 24		lda $24,x			lda _decimalPos,x	;  insert decimal point here?
.8f8d	d0 05		bne $8f94			bne _c2
.8f8f	a9 2e		lda #$2e			lda #'.'
.8f91	20 0b 90	jsr $900b			jsr pfch
.8f94	d6 24		dec $24,x	_c2:		dec _decimalPos,x
.8f96	20 4d 85	jsr $854d			jsr FDup		;  do a digit
.8f99	20 71 8e	jsr $8e71			jsr FToS		; ( work n )
.8f9c	b5 24		lda $24,x			lda DStack+0,x
.8f9e	15 29		ora $29,x			ora _mantNzFound+2,x	;  doing significant digits?
.8fa0	95 29		sta $29,x			sta _mantNzFound+2,x
.8fa2	f0 08		beq $8fac			beq _c7
.8fa4	d6 28		dec $28,x			dec _NumSigDigits+2,x
.8fa6	10 04		bpl $8fac			bpl +
.8fa8	e8		inx				inx			;    drop integer
.8fa9	e8		inx				inx
.8faa	d0 17		bne $8fc3			bne _d
.8fac					+
.8fac	b5 24		lda $24,x	_c7:		lda DStack+0,x		;  store the char
.8fae	09 30		ora #$30			ora #'0'
.8fb0	20 0b 90	jsr $900b			jsr pfch
.8fb3	20 26 8e	jsr $8e26			jsr SToF		; ( work )
.8fb6	20 55 8b	jsr $8b55			jsr FMinus
.8fb9	20 81 8c	jsr $8c81			jsr F10Star
.8fbc	a4 4c		ldy $4c				ldy FIndex		;  until mantissa==0
.8fbe	b9 57 00	lda $0057,y			lda FSMant0,y
.8fc1	d0 c8		bne $8f8b			bne _c
.8fc3	d6 24		dec $24,x	_d:		dec _decimalPos,x	;do trailing zeros
.8fc5	30 08		bmi $8fcf			bmi _d9
.8fc7	a9 30		lda #$30			lda #'0'
.8fc9	20 0b 90	jsr $900b			jsr pfch
.8fcc	4c c3 8f	jmp $8fc3			jmp _d
.8fcf					_d9:
.8fcf	e8		inx				inx			; drop work area
.8fd0	e8		inx				inx
.8fd1	e8		inx				inx
.8fd2	e8		inx				inx
.8fd3	e6 4c		inc $4c				inc FIndex		; FDrop
.8fd5	60		rts				rts
=93					CL	.var *-XtPtr1
=$8fd6					en = *	; remember here
>8f77	5d					.byte CL	;wh_CodeLength
.8fd6					FLt10:
.8fd6	a4 4c		ldy $4c		_1:		ldy FIndex		; while r >= 10
.8fd8	b9 4d 00	lda $004d,y			lda FSExp,y
.8fdb	30 18		bmi $8ff5			bmi _9			;   exponent negative?
.8fdd	c9 04		cmp #$04			cmp #4
.8fdf	90 14		bcc $8ff5			bcc _9			;   < 4 ?
.8fe1	d0 07		bne $8fea			bne _2			;   > 4 ?
.8fe3	b9 57 00	lda $0057,y			lda FSMant0,y
.8fe6	c9 50		cmp #$50			cmp #$50
.8fe8	90 0b		bcc $8ff5			bcc _9
.8fea	f6 24		inc $24,x	_2:		inc DStack+0,x		;   exp ++
.8fec	20 c9 88	jsr $88c9			jsr F10			;   r /= 10
.8fef	20 9e 8c	jsr $8c9e			jsr FSlash
.8ff2	4c d6 8f	jmp $8fd6			jmp _1
.8ff5	60		rts		_9:		rts
.8ff6					pfcst:
.8ff6	a9 01		lda #$01			lda #1
.8ff8	8d 34 03	sta $0334			sta ToHold
.8ffb	a4 4c		ldy $4c				ldy FIndex		; if r1 negative
.8ffd	b9 57 00	lda $0057,y			lda FSMant0,y
.9000	10 08		bpl $900a			bpl _19
.9002	a9 2d		lda #$2d			lda #'-'		;   append sign
.9004	20 0b 90	jsr $900b			jsr pfch
.9007	4c 8a 8b	jmp $8b8a			jmp FNegate		;   make positive, return
.900a	60		rts		_19:		rts
.900b					pfch:
.900b	ac 34 03	ldy $0334			ldy ToHold
.900e	91 00		sta ($00),y			sta (cp),y
.9010	ee 34 03	inc $0334			inc ToHold
.9013	60		rts				rts
.9014					pfcen:
.9014	ad 34 03	lda $0334			lda ToHold
.9017	38		sec				sec
.9018	e9 01		sbc #$01			sbc #1
.901a	a0 00		ldy #$00			ldy #0
.901c	91 00		sta ($00),y			sta (cp),y		; fill in length
.901e	4c 3c ca	jmp $ca3c			jmp Here		; push start addr
.9021					pfciA:
.9021	a8		tay				tay
.9022	10 0a		bpl $902e			bpl _15			; IfMi,
.9024	49 ff		eor #$ff			eor #$ff
.9026	18		clc				clc
.9027	69 01		adc #$01			adc #1
.9029	48		pha				pha
.902a	a9 2d		lda #$2d			lda #'-'
.902c	d0 03		bne $9031			bne _19
.902e	48		pha		_15:		pha
.902f	a9 2b		lda #$2b			lda #'+'
.9031					_19:
.9031	20 0b 90	jsr $900b			jsr pfch
.9034	68		pla				pla
.9035	a0 2f		ldy #$2f			ldy #'0'-1
.9037	c8		iny		_20:		iny
.9038	38		sec				sec
.9039	e9 0a		sbc #$0a			sbc #10
.903b	b0 fa		bcs $9037			bcs _20
.903d	69 0a		adc #$0a			adc #10
.903f	48		pha				pha
.9040	98		tya				tya
.9041	20 0b 90	jsr $900b			jsr pfch
.9044	68		pla				pla
.9045	09 30		ora #$30			ora #'0'
.9047	d0 c2		bne $900b			bne pfch
>9049	46 2e				L1:	.text "F."	;  name of word as a string, ending at wh_NameLastChar
=36811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>904b	c2					.byte (("F."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=214					LinkDisplacement = Nt0-WordListLink
>904c	10					.byte WordFlags	;wh_Flags
>904d	03					.byte 3	;wh_CodeLength
>904e	d6					  .byte LinkDisplacement
=$904f					XtPtr1 ::= *
=36811					WordListLink ::= Nt0 ; remember the nt of this word for later
.904f	20 79 8f	jsr $8f79	FDot:		jsr PFDot
.9052	20 f8 b1	jsr $b1f8	FDot2:		jsr Count
.9055	20 ee cd	jsr $cdee			jsr Type
.9058	4c e2 cd	jmp $cde2			jmp Space
=12					CL	.var *-XtPtr1
=$905b					en = *	; remember here
>904d	0c					.byte CL	;wh_CodeLength
>905b	46 2e 53			L1:	.text "F.S"	;  name of word as a string, ending at wh_NameLastChar
=36830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>905e	63					.byte (("F.S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>905f	10					.byte WordFlags	;wh_Flags
>9060	03					.byte 3	;wh_CodeLength
>9061	13					  .byte LinkDisplacement
=$9062					XtPtr1 ::= *
=36830					WordListLink ::= Nt0 ; remember the nt of this word for later
.9062	a9 09		lda #$09	FDotS:		lda #FDim-1	; for each FP stack entry
.9064	d0 0b		bne $9071			bne _8
.9066	48		pha		_2:		pha
.9067	20 99 85	jsr $8599			jsr FPick3	;   print it
.906a	20 4f 90	jsr $904f			jsr FDot
.906d	68		pla				pla		;  next
.906e	38		sec				sec
.906f	e9 01		sbc #$01			sbc #1
.9071	c5 4c		cmp $4c		_8:		cmp FIndex
.9073	b0 f1		bcs $9066			bcs _2
=19					CL	.var *-XtPtr1
=$9075					en = *	; remember here
>9060	13					.byte CL	;wh_CodeLength
.9075	60		rts				rts
>9076	28 46 53 2e 29			L1:	.text "(FS.)"	;  name of word as a string, ending at wh_NameLastChar
=36859					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>907b	25					.byte (("(FS.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>907c	10					.byte WordFlags	;wh_Flags
>907d	03					.byte 3	;wh_CodeLength
>907e	1d					  .byte LinkDisplacement
=$907f					XtPtr1 ::= *
=36859					WordListLink ::= Nt0 ; remember the nt of this word for later
.907f	20 fa b7	jsr $b7fa	PFSDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.9082	20 f6 8f	jsr $8ff6			jsr pfcst		; start collecting chars, make r positive
.9085	20 d6 8f	jsr $8fd6			jsr FLt10		; scale down to <10
.9088	a4 4c		ldy $4c		_c1:		ldy FIndex		; while r < 1
.908a	b9 57 00	lda $0057,y			lda FSMant0,y		;   mantissa == 0 ?
.908d	f0 0f		beq $909e			beq _c9
.908f	b9 4d 00	lda $004d,y			lda FSExp,y		;   exp < 1 ?
.9092	f0 02		beq $9096			beq _c2
.9094	10 08		bpl $909e			bpl _c9
.9096	d6 24		dec $24,x	_c2:		dec DStack+0,x		;  exp -= 1
.9098	20 81 8c	jsr $8c81			jsr F10Star		;  r *= 10
.909b	4c 88 90	jmp $9088			jmp _c1
.909e					_c9:
.909e	20 82 8f	jsr $8f82	PFSDotM:	jsr PFDotSub		; do mantissa
.90a1	a9 45		lda #$45			lda #'E'
.90a3	20 0b 90	jsr $900b			jsr pfch		; do exponent
.90a6	b5 24		lda $24,x			lda DStack+0,x		;   _exp
.90a8	20 21 90	jsr $9021			jsr pfciA
.90ab	e8		inx				inx			; Drop work area
.90ac	e8		inx				inx
.90ad	4c 14 90	jmp $9014			jmp pfcen		; finish string
=49					CL	.var *-XtPtr1
=$90b0					en = *	; remember here
>907d	31					.byte CL	;wh_CodeLength
>90b0	46 53 2e			L1:	.text "FS."	;  name of word as a string, ending at wh_NameLastChar
=36915					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90b3	c3					.byte (("FS."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>90b4	10					.byte WordFlags	;wh_Flags
>90b5	03					.byte 3	;wh_CodeLength
>90b6	38					  .byte LinkDisplacement
=$90b7					XtPtr1 ::= *
=36915					WordListLink ::= Nt0 ; remember the nt of this word for later
.90b7	20 7f 90	jsr $907f	FSDot:		jsr PFSDot
.90ba	4c 52 90	jmp $9052			jmp FDot2
=6					CL	.var *-XtPtr1
=$90bd					en = *	; remember here
>90b5	06					.byte CL	;wh_CodeLength
>90bd	28 46 45 2e 29			L1:	.text "(FE.)"	;  name of word as a string, ending at wh_NameLastChar
=36930					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>90c2	25					.byte (("(FE.)"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>90c3	10					.byte WordFlags	;wh_Flags
>90c4	03					.byte 3	;wh_CodeLength
>90c5	0f					  .byte LinkDisplacement
=$90c6					XtPtr1 ::= *
=36930					WordListLink ::= Nt0 ; remember the nt of this word for later
.90c6	20 fa b7	jsr $b7fa	PFEDot:		jsr Zero		; alloc work area
=$24					_exp    = DStack+0
.90c9	20 f6 8f	jsr $8ff6			jsr pfcst		; start collecting chars, make r positive
.90cc	a4 4c		ldy $4c		_30:		ldy FIndex		; while r < 1
.90ce	b9 57 00	lda $0057,y			lda FSMant0,y
.90d1	f0 16		beq $90e9			beq _39
.90d3	b9 4d 00	lda $004d,y			lda FSExp,y
.90d6	f0 02		beq $90da			beq _31
.90d8	10 0f		bpl $90e9			bpl _39
.90da	d6 24		dec $24,x	_31:		dec _exp,x		;  exp -= 3
.90dc	d6 24		dec $24,x			dec _exp,x
.90de	d6 24		dec $24,x			dec _exp,x
.90e0	20 bb 88	jsr $88bb			jsr F1000		;  r *= 1000
.90e3	20 e3 8b	jsr $8be3			jsr FStar
.90e6	4c cc 90	jmp $90cc			jmp _30
.90e9					_39:
.90e9	a4 4c		ldy $4c		_a:		ldy FIndex		; while r >= 1000
.90eb	b9 4d 00	lda $004d,y			lda FSExp,y
.90ee	30 1c		bmi $910c			bmi _a9			; exponent negative?
.90f0	c9 0a		cmp #$0a			cmp #10
.90f2	90 18		bcc $910c			bcc _a9			;   < 10 ?
.90f4	d0 07		bne $90fd			bne _a2			;   > 10 ?
.90f6	b9 57 00	lda $0057,y			lda FSMant0,y
.90f9	c9 7d		cmp #$7d			cmp #$7d
.90fb	90 0f		bcc $910c			bcc _a9
.90fd	f6 24		inc $24,x	_a2:		inc _exp,x		;   exp += 3
.90ff	f6 24		inc $24,x			inc _exp,x
.9101	f6 24		inc $24,x			inc _exp,x
.9103	20 bb 88	jsr $88bb			jsr F1000		;   r /= 1000
.9106	20 9e 8c	jsr $8c9e			jsr FSlash
.9109	4c e9 90	jmp $90e9			jmp _a
.910c					_a9:
.910c	4c 9e 90	jmp $909e			jmp PFSDotM
=73					CL	.var *-XtPtr1
=$910f					en = *	; remember here
>90c4	49					.byte CL	;wh_CodeLength
>910f	46 45 2e			L1:	.text "FE."	;  name of word as a string, ending at wh_NameLastChar
=37010					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9112	c3					.byte (("FE."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>9113	10					.byte WordFlags	;wh_Flags
>9114	03					.byte 3	;wh_CodeLength
>9115	50					  .byte LinkDisplacement
=$9116					XtPtr1 ::= *
=37010					WordListLink ::= Nt0 ; remember the nt of this word for later
.9116	20 c6 90	jsr $90c6	FEDot:		jsr PFEDot
.9119	4c 52 90	jmp $9052			jmp FDot2
=6					CL	.var *-XtPtr1
=$911c					en = *	; remember here
>9114	06					.byte CL	;wh_CodeLength
>911c	46 22				L1:	.text 'F"'	;  name of word as a string, ending at wh_NameLastChar
=37022					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>911e	42					.byte (('F"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>911f	18					.byte WordFlags	;wh_Flags
>9120	03					.byte 3	;wh_CodeLength
>9121	0c					  .byte LinkDisplacement
=$9122					XtPtr1 ::= *
=37022					WordListLink ::= Nt0 ; remember the nt of this word for later
.9122	20 7c ba	jsr $ba7c	FQuote:		jsr Parse_Name		; get string
.9125	20 45 91	jsr $9145			jsr ToFloat		; convert
.9128	b5 24		lda $24,x			lda DStack+0,x		; error?
.912a	f0 0a		beq $9136			beq _Err
.912c	e8		inx				inx
.912d	e8		inx				inx
.912e	a5 0a		lda $0a				lda State		; compiling?
.9130	d0 01		bne $9133			bne _compile
.9132	60		rts				rts
.9133	4c 0a 88	jmp $880a	_compile:	jmp FLiteral		; compile a FP literal
.9136	a9 36		lda #$36	_Err:		lda #100+err_FPInvalidArg
.9138	20 85 b4	jsr $b485			jsr ThrowA
=25					CL	.var *-XtPtr1
=$913b					en = *	; remember here
>9120	19					.byte CL	;wh_CodeLength
>913b	3e 46 6c 6f 61 74		L1:	.text ">Float"	;  name of word as a string, ending at wh_NameLastChar
=37057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9141	86					.byte ((">Float"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=35					LinkDisplacement = Nt0-WordListLink
>9142	10					.byte WordFlags	;wh_Flags
>9143	03					.byte 3	;wh_CodeLength
>9144	23					  .byte LinkDisplacement
=$9145					XtPtr1 ::= *
=37057					WordListLink ::= Nt0 ; remember the nt of this word for later
.9145					ToFloat:
.9145	20 fa b7	jsr $b7fa			jsr Zero	; alloc & init workspace
.9148	20 fa b7	jsr $b7fa			jsr Zero
.914b	20 fa b7	jsr $b7fa			jsr Zero
=$2c					_addr		= DStack+8
=$2a					_len		= DStack+6
=$29					_mantfound 	= DStack+5		;mantissa digits found
=$28					_exponent 	= DStack+4		;exponent
=$27					_decimalPos 	= DStack+3		;decimal point position
=$26					_DecPointFound1 = DStack+2
=$25					_MantissaNegative1 = DStack+1
=$24					_ExponentNegative1 = DStack+0
.914e	20 ab 88	jsr $88ab			jsr F0			; init result
.9151	20 23 92	jsr $9223	_11:		jsr _GetChar		; get mantissa prefix
.9154	b0 57		bcs $91ad			bcs _trueb ;_finishb
.9156	c9 20		cmp #$20			cmp #' '
.9158	f0 f7		beq $9151			beq _11
.915a	c9 2b		cmp #$2b			cmp #'+'
.915c	f0 06		beq $9164			beq _20
.915e	c9 2d		cmp #$2d			cmp #'-'
.9160	d0 07		bne $9169			bne _21
.9162	95 25		sta $25,x			sta _MantissaNegative1,x ; remember mantissa is negative
.9164	20 23 92	jsr $9223	_20:		jsr _GetChar		; do next mantissa digits
.9167	b0 47		bcs $91b0			bcs _finishb
.9169	c9 2e		cmp #$2e	_21:		cmp #'.'
.916b	f0 31		beq $919e			beq _27
.916d	c9 45		cmp #$45			cmp #'E'
.916f	f0 42		beq $91b3			beq _30
.9171	c9 65		cmp #$65			cmp #'e'
.9173	f0 3e		beq $91b3			beq _30
.9175	c9 44		cmp #$44			cmp #'D'
.9177	f0 3a		beq $91b3			beq _30
.9179	c9 64		cmp #$64			cmp #'d'
.917b	f0 36		beq $91b3			beq _30
.917d	38		sec				sec			;   a digit?
.917e	e9 30		sbc #$30			sbc #'0'
.9180	90 24		bcc $91a6			bcc _fail
.9182	c9 0a		cmp #$0a			cmp #9+1
.9184	b0 20		bcs $91a6			bcs _fail
.9186	48		pha				pha			; append digit to mantissa
.9187	20 81 8c	jsr $8c81			jsr F10Star
.918a	68		pla				pla
.918b	a0 00		ldy #$00			ldy #0
.918d	20 29 8e	jsr $8e29			jsr SToFYA
.9190	20 15 8b	jsr $8b15			jsr FPlus
.9193	f6 29		inc $29,x			inc _mantfound,x	; remember we found a mantissa digit
.9195	b5 26		lda $26,x			lda _DecPointFound1,x	; if mantissa decimal point found
.9197	f0 02		beq $919b			beq +
.9199	d6 27		dec $27,x			dec _decimalPos,x	;   increment decimal point position
.919b					+
.919b	4c 64 91	jmp $9164			jmp _20
.919e					_27:
.919e	b4 26		ldy $26,x			ldy _DecPointFound1,x	; already have one?
.91a0	d0 04		bne $91a6			bne _fail
.91a2	95 26		sta $26,x			sta _DecPointFound1,x	; we have one now!
.91a4	f0 be		beq $9164			beq _20
.91a6					_fail:
.91a6	20 0e 85	jsr $850e			jsr FDrop
.91a9	a9 00		lda #$00			lda #0			;return false
.91ab	f0 69		beq $9216			beq _return
.91ad	4c 14 92	jmp $9214	_trueb:		jmp _true
.91b0	4c e1 91	jmp $91e1	_finishb:	jmp _finish
.91b3					_30:
.91b3	20 23 92	jsr $9223			jsr _GetChar
.91b6	b0 29		bcs $91e1			bcs _finish
.91b8	c9 2b		cmp #$2b			cmp #'+'
.91ba	f0 06		beq $91c2			beq _40
.91bc	c9 2d		cmp #$2d			cmp #'-'
.91be	d0 07		bne $91c7			bne _41
.91c0	95 24		sta $24,x			sta _ExponentNegative1,x ; remember exponent is negative
.91c2	20 23 92	jsr $9223	_40:		jsr _GetChar		;get exponent digits
.91c5	b0 1a		bcs $91e1			bcs _finish
.91c7	38		sec		_41:		sec			;  digit?
.91c8	e9 30		sbc #$30			sbc #'0'
.91ca	90 da		bcc $91a6			bcc _fail
.91cc	c9 0a		cmp #$0a			cmp #9+1
.91ce	b0 d6		bcs $91a6			bcs _fail
.91d0	85 14		sta $14				sta tmp1
.91d2	16 28		asl $28,x			asl _exponent,x		;  exponent *= 10
.91d4	b5 28		lda $28,x			lda _exponent,x
.91d6	0a		asl a				asl a
.91d7	0a		asl a				asl a
.91d8	75 28		adc $28,x			adc _exponent,x
.91da	65 14		adc $14				adc tmp1		;  + digit
.91dc	95 28		sta $28,x			sta _exponent,x
.91de	4c c2 91	jmp $91c2			jmp _40
.91e1					_finish:
.91e1	b5 29		lda $29,x			lda _mantfound,x	;some mantissa digits found?
.91e3	f0 c1		beq $91a6			beq _fail
.91e5	b5 24		lda $24,x			lda _ExponentNegative1,x ;apply exponent sign
.91e7	f0 07		beq $91f0			beq +
.91e9	a9 00		lda #$00			lda #0
.91eb	38		sec				sec
.91ec	f5 28		sbc $28,x			sbc _exponent,x
.91ee	95 28		sta $28,x			sta _exponent,x
.91f0					+
.91f0	b5 28		lda $28,x			lda _exponent,x		;apply decimal position to exponent
.91f2	18		clc				clc
.91f3	75 27		adc $27,x			adc _decimalPos,x
.91f5	95 28		sta $28,x			sta _exponent,x
.91f7	4c ff 91	jmp $91ff			jmp _93
.91fa	20 81 8c	jsr $8c81	_93b:		jsr F10Star		;apply exponent to mantissa
.91fd	d6 28		dec $28,x			dec _exponent,x
.91ff	f0 0a		beq $920b	_93:		beq _94
.9201	10 f7		bpl $91fa			bpl _93b
.9203	20 c9 88	jsr $88c9	_94b:		jsr F10
.9206	20 9e 8c	jsr $8c9e			jsr FSlash
.9209	f6 28		inc $28,x			inc _exponent,x
.920b	30 f6		bmi $9203	_94:		bmi _94b
.920d					_95:
.920d	b5 25		lda $25,x			lda _MantissaNegative1,x ;apply mantissa sign
.920f	f0 03		beq $9214			beq +
.9211	20 8a 8b	jsr $8b8a			jsr FNegate
.9214					+
.9214	a9 ff		lda #$ff	_true:		lda #$ff		;return true
.9216					_return:
.9216	95 2c		sta $2c,x			sta _addr+0,x		; replace _addr with flag
.9218	95 2d		sta $2d,x			sta _addr+1,x
.921a	e8		inx				inx			; Drop work
.921b	e8		inx				inx
.921c	e8		inx				inx			; 2Drop work
.921d	e8		inx				inx
.921e	e8		inx				inx
.921f	e8		inx				inx
.9220	e8		inx				inx			; Drop len
.9221	e8		inx				inx
.9222	60		rts				rts
.9223					_GetChar:
.9223	38		sec				sec
.9224	b5 2a		lda $2a,x			lda _len,x
.9226	f0 0b		beq $9233			beq _gc_rts		; if end, return C=1
.9228	d6 2a		dec $2a,x			dec _len,x
.922a	a1 2c		lda ($2c,x)			lda (_addr,x)
.922c	f6 2c		inc $2c,x			inc _addr+0,x
.922e	d0 02		bne $9232			bne +
.9230	f6 2d		inc $2d,x			inc _addr+1,x
.9232					+
.9232	18		clc				clc			; get char, return C=0
.9233	60		rts		_gc_rts:	rts
>9234	46 4b 65 79			L1:	.text "FKey"	;  name of word as a string, ending at wh_NameLastChar
=37304					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9238	24					.byte (("FKey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=247					LinkDisplacement = Nt0-WordListLink
>9239	10					.byte WordFlags	;wh_Flags
>923a	03					.byte 3	;wh_CodeLength
>923b	f7					  .byte LinkDisplacement
=$923c					XtPtr1 ::= *
=37304					WordListLink ::= Nt0 ; remember the nt of this word for later
.923c					FKey:
.923c	20 3c ca	jsr $ca3c			jsr Here		; ( addr )
.923f	20 3c ca	jsr $ca3c			jsr Here		; ( addr addr )
.9242	a9 28		lda #$28			lda #40			; ( addr addr 40 )
.9244	20 ec b7	jsr $b7ec			jsr PushZA
.9247	20 be c2	jsr $c2be			jsr Accept		; ( addr len )
.924a	20 45 91	jsr $9145			jsr ToFloat		; ( true | false)
.924d	e8		inx				inx			; err?
.924e	e8		inx				inx
.924f	b5 22		lda $22,x			lda DStack-2,x
.9251	f0 01		beq $9254			beq _err
.9253	60		rts				rts
.9254	20 b1 b8	jsr $b8b1	_err:		jsr SLiteral_runtime
.9257	4c 5d 92	jmp $925d			  jmp +
>925a	20 3f 20					  .text " ? "
.925d	20 ee cd	jsr $cdee	+		jsr Type
.9260	4c 3c 92	jmp $923c			jmp FKey
>9263	53 46 40			L1:	.text "SF@"	;  name of word as a string, ending at wh_NameLastChar
=37350					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9266	03					.byte (("SF@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>9267	10					.byte WordFlags	;wh_Flags
>9268	03					.byte 3	;wh_CodeLength
>9269	2e					  .byte LinkDisplacement
=$926a					XtPtr1 ::= *
=37350					WordListLink ::= Nt0 ; remember the nt of this word for later
.926a	20 00 b4	jsr $b400	SFAt:		jsr PopYA		; pop sf_addr
.926d	85 16		sta $16		SFAt_YA:	sta tmp2+0		; save sf_addr
.926f	84 17		sty $17				sty tmp2+1
.9271	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.9274	a0 01		ldy #$01			ldy #1			; copy exponent
.9276	b1 16		lda ($16),y			lda (tmp2),y
.9278	0a		asl a				asl a
.9279	88		dey				dey
.927a	b1 16		lda ($16),y			lda (tmp2),y
.927c	2a		rol a				rol a
.927d	38		sec				sec
.927e	e9 7e		sbc #$7e			sbc #126
.9280	95 4d		sta $4d,x			sta FSExp,x
.9282	a0 01		ldy #$01			ldy #1			; copy mantissa
.9284	b1 16		lda ($16),y			lda (tmp2),y
.9286	09 80		ora #$80			ora #$80
.9288	4a		lsr a				lsr a
.9289	95 57		sta $57,x			sta FSMant0,x
.928b	c8		iny				iny
.928c	b1 16		lda ($16),y			lda (tmp2),y
.928e	6a		ror a				ror a
.928f	95 61		sta $61,x			sta FSMant1,x
.9291	c8		iny				iny
.9292	b1 16		lda ($16),y			lda (tmp2),y
.9294	6a		ror a				ror a
.9295	95 6b		sta $6b,x			sta FSMant2,x
.9297	a9 00		lda #$00			lda #0
.9299	6a		ror a				ror a
.929a	95 75		sta $75,x			sta FSMant3,x
.929c	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.929e	a0 00		ldy #$00			ldy #0			; get sign
.92a0	b1 16		lda ($16),y			lda (tmp2),y
.92a2	10 03		bpl $92a7			bpl +
.92a4	20 8a 8b	jsr $8b8a			jsr FNegate
.92a7					+
=61					CL	.var *-XtPtr1
=$92a7					en = *	; remember here
>9268	3d					.byte CL	;wh_CodeLength
.92a7	60		rts				rts
>92a8	53 46 21			L1:	.text "SF!"	;  name of word as a string, ending at wh_NameLastChar
=37419					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92ab	23					.byte (("SF!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=69					LinkDisplacement = Nt0-WordListLink
>92ac	10					.byte WordFlags	;wh_Flags
>92ad	03					.byte 3	;wh_CodeLength
>92ae	45					  .byte LinkDisplacement
=$92af					XtPtr1 ::= *
=37419					WordListLink ::= Nt0 ; remember the nt of this word for later
.92af	20 00 b4	jsr $b400	SFStore:	jsr PopYA		; pop sf_addr
.92b2	85 16		sta $16		SFStore_YA:	sta tmp2+0		; save
.92b4	84 17		sty $17				sty tmp2+1
.92b6	a4 4c		ldy $4c				ldy FIndex		; negative?
.92b8	b9 57 00	lda $0057,y			lda FSMant0,y
.92bb	29 80		and #$80			and #$80		;  save sign
.92bd	85 19		sta $19				sta tmp3+1
.92bf	10 03		bpl $92c4			bpl +
.92c1	20 8a 8b	jsr $8b8a			jsr FNegate
.92c4					+
.92c4	86 14		stx $14				stx tmp1+0		; save data stack index
.92c6	a6 4c		ldx $4c				ldx FIndex		; switch to FP stack index
.92c8	b5 4d		lda $4d,x			lda FSExp,x		; +128
.92ca	18		clc				clc
.92cb	69 7e		adc #$7e			adc #126
.92cd	95 4d		sta $4d,x			sta FSExp,x
.92cf	16 75		asl $75,x			asl FSMant3,x
.92d1	b5 6b		lda $6b,x			lda FSMant2,x
.92d3	2a		rol a				rol a
.92d4	a0 03		ldy #$03			ldy #3			; +3 IEEE
.92d6	91 16		sta ($16),y			sta (tmp2),y
.92d8	b5 61		lda $61,x			lda FSMant1,x
.92da	2a		rol a				rol a
.92db	88		dey				dey			; +2 IEEE
.92dc	91 16		sta ($16),y			sta (tmp2),y
.92de	b5 57		lda $57,x			lda FSMant0,x
.92e0	2a		rol a				rol a
.92e1	2a		rol a				rol a
.92e2	56 4d		lsr $4d,x			lsr FSExp,x
.92e4	6a		ror a				ror a
.92e5	88		dey				dey			; +1 IEEE
.92e6	91 16		sta ($16),y			sta (tmp2),y
.92e8	b5 4d		lda $4d,x			lda FSExp,x
.92ea	05 19		ora $19				ora tmp3+1		;  insert sign
.92ec	88		dey				dey			; +0 IEEE
.92ed	91 16		sta ($16),y			sta (tmp2),y
.92ef	e6 4c		inc $4c				inc FIndex		; FDrop
.92f1	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
=68					CL	.var *-XtPtr1
=$92f3					en = *	; remember here
>92ad	44					.byte CL	;wh_CodeLength
.92f3	60		rts				rts
>92f4	53 46 6c 6f 61 74 2b		L1:	.text "SFloat+"	;  name of word as a string, ending at wh_NameLastChar
=37499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>92fb	67					.byte (("SFloat+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>92fc	10					.byte WordFlags	;wh_Flags
>92fd	03					.byte 3	;wh_CodeLength
>92fe	50					  .byte LinkDisplacement
=$92ff					XtPtr1 ::= *
=37499					WordListLink ::= Nt0 ; remember the nt of this word for later
.92ff	a9 04		lda #$04	SFloatPlus:	lda #4
.9301	4c 20 ca	jmp $ca20			jmp Plus_A
=5					CL	.var *-XtPtr1
=$9304					en = *	; remember here
>92fd	05					.byte CL	;wh_CodeLength
>9304	53 46 6c 6f 61 74 73		L1:	.text "SFloats"	;  name of word as a string, ending at wh_NameLastChar
=37515					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>930b	67					.byte (("SFloats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>930c	10					.byte WordFlags	;wh_Flags
>930d	03					.byte 3	;wh_CodeLength
>930e	10					  .byte LinkDisplacement
=$930f					XtPtr1 ::= *
=37515					WordListLink ::= Nt0 ; remember the nt of this word for later
.930f	a9 02		lda #$02	SFloats:	lda #2
.9311	4c 56 cb	jmp $cb56			jmp LShift_A
=5					CL	.var *-XtPtr1
=$9314					en = *	; remember here
>930d	05					.byte CL	;wh_CodeLength
>9314	44 46 21			L1:	.text "DF!"	;  name of word as a string, ending at wh_NameLastChar
=37527					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9317	23					.byte (("DF!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>9318	10					.byte WordFlags	;wh_Flags
>9319	03					.byte 3	;wh_CodeLength
>931a	0c					  .byte LinkDisplacement
=$931b					XtPtr1 ::= *
=37527					WordListLink ::= Nt0 ; remember the nt of this word for later
.931b	20 00 b4	jsr $b400	DFStore:	jsr PopYA		; pop df_addr
.931e	85 16		sta $16		DFStore_YA:	sta tmp2+0		; save df_addr
.9320	84 17		sty $17				sty tmp2+1
.9322	a4 4c		ldy $4c				ldy FIndex		; negative?
.9324	b9 57 00	lda $0057,y			lda FSMant0,y
.9327	29 80		and #$80			and #$80		; remember sign
.9329	85 19		sta $19				sta tmp3+1
.932b	10 03		bpl $9330			bpl +			; make positive
.932d	20 8a 8b	jsr $8b8a			jsr FNegate
.9330					+
.9330	86 14		stx $14				stx tmp1+0		; save data stack index
.9332	a6 4c		ldx $4c				ldx FIndex
.9334	a9 00		lda #$00			lda #0
.9336	a0 07		ldy #$07			ldy #7			; +7 IEEE
.9338	91 16		sta ($16),y			sta (tmp2),y
.933a	88		dey				dey			; +6 IEEE
.933b	91 16		sta ($16),y			sta (tmp2),y
.933d	20 85 93	jsr $9385			jsr _shift		; shift mantissa
.9340	20 85 93	jsr $9385			jsr _shift
.9343	88		dey				dey			; +5 IEEE
.9344	91 16		sta ($16),y			sta (tmp2),y
.9346	b5 75		lda $75,x			lda FSMant3,x
.9348	88		dey				dey			; +4 IEEE
.9349	91 16		sta ($16),y			sta (tmp2),y
.934b	b5 6b		lda $6b,x			lda FSMant2,x
.934d	88		dey				dey			; +3 IEEE
.934e	91 16		sta ($16),y			sta (tmp2),y
.9350	b5 61		lda $61,x			lda FSMant1,x
.9352	88		dey				dey			; +2 IEEE
.9353	91 16		sta ($16),y			sta (tmp2),y
.9355	b5 57		lda $57,x			lda FSMant0,x		; clear extra bits
.9357	29 0f		and #$0f			and #$f
.9359	95 57		sta $57,x			sta FSMant0,x
.935b	b5 4d		lda $4d,x			lda FSExp,x
.935d	38		sec				sec
.935e	e9 02		sbc #$02			sbc #2
.9360	95 4d		sta $4d,x			sta FSExp,x
.9362	0a		asl a				asl a
.9363	0a		asl a				asl a
.9364	0a		asl a				asl a
.9365	0a		asl a				asl a
.9366	15 57		ora $57,x			ora FSMant0,x
.9368	88		dey				dey			; +1 IEEE
.9369	91 16		sta ($16),y			sta (tmp2),y
.936b	b5 4d		lda $4d,x			lda FSExp,x
.936d	08		php				php
.936e	4a		lsr a				lsr a
.936f	4a		lsr a				lsr a
.9370	4a		lsr a				lsr a
.9371	4a		lsr a				lsr a
.9372	18		clc				clc
.9373	69 30		adc #$30			adc #$30
.9375	28		plp				plp
.9376	30 03		bmi $937b			bmi +
.9378	18		clc				clc
.9379	69 10		adc #$10			adc #$10
.937b	05 19		ora $19		+		ora tmp3+1		; add sign bit
.937d	88		dey				dey			; +0 IEEE
.937e	91 16		sta ($16),y			sta (tmp2),y
.9380	e6 4c		inc $4c				inc FIndex		; FDrop
.9382	a6 14		ldx $14				ldx tmp1+0		; restore data stack index
.9384	60		rts				rts
.9385	56 57		lsr $57,x	_shift:		lsr FSMant0,x
.9387	76 61		ror $61,x			ror FSMant1,x
.9389	76 6b		ror $6b,x			ror FSMant2,x
.938b	76 75		ror $75,x			ror FSMant3,x
.938d	6a		ror a				ror a
=115					CL	.var *-XtPtr1
=$938e					en = *	; remember here
>9319	73					.byte CL	;wh_CodeLength
.938e	60		rts				rts
>938f	44 46 40			L1:	.text "DF@"	;  name of word as a string, ending at wh_NameLastChar
=37650					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9392	03					.byte (("DF@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=123					LinkDisplacement = Nt0-WordListLink
>9393	10					.byte WordFlags	;wh_Flags
>9394	03					.byte 3	;wh_CodeLength
>9395	7b					  .byte LinkDisplacement
=$9396					XtPtr1 ::= *
=37650					WordListLink ::= Nt0 ; remember the nt of this word for later
.9396	20 00 b4	jsr $b400	DFAt:		jsr PopYA		; pop df_addr
.9399	85 16		sta $16		DFAt_YA:	sta tmp2+0		; save df_addr
.939b	84 17		sty $17				sty tmp2+1
.939d	20 c2 84	jsr $84c2			jsr FAllocX		; alloc FP stack entry
.93a0	a0 00		ldy #$00			ldy #0			; +0 IEEE byte
.93a2	b1 16		lda ($16),y			lda (tmp2),y
.93a4	95 4d		sta $4d,x			sta FSExp,x
.93a6	c8		iny				iny			; +1 IEEE byte
.93a7	b1 16		lda ($16),y			lda (tmp2),y
.93a9	95 57		sta $57,x			sta FSMant0,x
.93ab	c8		iny				iny			; +2 IEEE byte
.93ac	b1 16		lda ($16),y			lda (tmp2),y
.93ae	95 61		sta $61,x			sta FSMant1,x
.93b0	c8		iny				iny			; +3 IEEE byte
.93b1	b1 16		lda ($16),y			lda (tmp2),y
.93b3	95 6b		sta $6b,x			sta FSMant2,x
.93b5	c8		iny				iny			; +4 IEEE byte
.93b6	b1 16		lda ($16),y			lda (tmp2),y
.93b8	95 75		sta $75,x			sta FSMant3,x
.93ba	c8		iny				iny			; +5 IEEE byte
.93bb	b1 16		lda ($16),y			lda (tmp2),y
.93bd	20 e6 93	jsr $93e6			jsr _shifta		; shift exponent & mantissa bits into place
.93c0	20 e6 93	jsr $93e6			jsr _shifta
.93c3	b5 57		lda $57,x			lda FSMant0,x		; finish shifting exponent bits
.93c5	0a		asl a				asl a
.93c6	36 4d		rol $4d,x			rol FSExp,x
.93c8	0a		asl a				asl a
.93c9	36 4d		rol $4d,x			rol FSExp,x
.93cb	b5 4d		lda $4d,x			lda FSExp,x		; remove +1023
.93cd	18		clc				clc
.93ce	69 02		adc #$02			adc #2
.93d0	95 4d		sta $4d,x			sta FSExp,x
.93d2	b5 57		lda $57,x			lda FSMant0,x
.93d4	29 7f		and #$7f			and #$7f
.93d6	09 40		ora #$40			ora #$40		;   insert implied 1
.93d8	95 57		sta $57,x			sta FSMant0,x		;   insert sign=0
.93da	a6 14		ldx $14				ldx tmp1		; restore data stack index
.93dc	a0 00		ldy #$00			ldy #0			; get sign from +0 IEEE byte
.93de	b1 16		lda ($16),y			lda (tmp2),y
.93e0	10 03		bpl $93e5			bpl +
.93e2	20 8a 8b	jsr $8b8a			jsr FNegate
.93e5					+
.93e5	60		rts				rts
.93e6	0a		asl a		_shifta:	asl a
.93e7	36 75		rol $75,x			rol FSMant3,x
.93e9	36 6b		rol $6b,x			rol FSMant2,x
.93eb	36 61		rol $61,x			rol FSMant1,x
.93ed	36 57		rol $57,x			rol FSMant0,x
.93ef	36 4d		rol $4d,x			rol FSExp,x
.93f1	60		rts				rts
=92					CL	.var *-XtPtr1
=$93f2					en = *	; remember here
>9394	5c					.byte CL	;wh_CodeLength
>93f2	44 46 6c 6f 61 74 2b		L1:	.text "DFloat+"	;  name of word as a string, ending at wh_NameLastChar
=37753					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>93f9	67					.byte (("DFloat+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=103					LinkDisplacement = Nt0-WordListLink
>93fa	10					.byte WordFlags	;wh_Flags
>93fb	03					.byte 3	;wh_CodeLength
>93fc	67					  .byte LinkDisplacement
=$93fd					XtPtr1 ::= *
=37753					WordListLink ::= Nt0 ; remember the nt of this word for later
.93fd	a9 08		lda #$08	DFloatPlus:	lda #8
.93ff	4c 20 ca	jmp $ca20			jmp Plus_A
=5					CL	.var *-XtPtr1
=$9402					en = *	; remember here
>93fb	05					.byte CL	;wh_CodeLength
>9402	44 46 6c 6f 61 74 73		L1:	.text "DFloats"	;  name of word as a string, ending at wh_NameLastChar
=37769					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9409	67					.byte (("DFloats"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>940a	10					.byte WordFlags	;wh_Flags
>940b	03					.byte 3	;wh_CodeLength
>940c	10					  .byte LinkDisplacement
=$940d					XtPtr1 ::= *
=37769					WordListLink ::= Nt0 ; remember the nt of this word for later
.940d	a9 03		lda #$03	DFloats:	lda #3
.940f	4c 56 cb	jmp $cb56			jmp LShift_A
=5					CL	.var *-XtPtr1
=$9412					en = *	; remember here
>940b	05					.byte CL	;wh_CodeLength
>9412	46 4d 50 6f 6c 79		L1:	.text "FMPoly"	;  name of word as a string, ending at wh_NameLastChar
=37784					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9418	26					.byte (("FMPoly"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9419	10					.byte WordFlags	;wh_Flags
>941a	03					.byte 3	;wh_CodeLength
>941b	0f					  .byte LinkDisplacement
=$941c					XtPtr1 ::= *
=37784					WordListLink ::= Nt0 ; remember the nt of this word for later
.941c	20 00 b4	jsr $b400	FMPoly:		jsr PopYA
.941f	20 bd b7	jsr $b7bd	FMPolyYA:	jsr PushYA		; push coefficent addr
.9422	20 4f 86	jsr $864f			jsr FAt_YA		; fetch 1st coefficent
.9425	4c 38 94	jmp $9438			jmp _4
.9428	20 70 85	jsr $8570	_2:		jsr FOver
.942b	20 e3 8b	jsr $8be3			jsr FStar
.942e	b5 24		lda $24,x			lda DStack+0,x		; fetch next coefficent
.9430	b4 25		ldy $25,x			ldy DStack+1,x
.9432	20 4f 86	jsr $864f			jsr FAt_YA
.9435	20 15 8b	jsr $8b15			jsr FPlus
.9438	a9 05		lda #$05	_4:		lda #5			; bump coefficent ptr
.943a	20 20 ca	jsr $ca20			jsr Plus_A
.943d	a1 24		lda ($24,x)			lda (DStack+0,x)	; end of coefficent list?
.943f	d0 e7		bne $9428			bne _2
.9441	e8		inx				inx			; Drop coefficent ptr
.9442	e8		inx				inx
=39					CL	.var *-XtPtr1
=$9443					en = *	; remember here
>941a	27					.byte CL	;wh_CodeLength
.9443	60		rts				rts
>9444	46 4c 6f 67 32 4d 31 4d		L1:	.text "FLog2M1M"	;  name of word as a string, ending at wh_NameLastChar
=37836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>944c	a8					.byte (("FLog2M1M"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>944d	10					.byte WordFlags	;wh_Flags
>944e	03					.byte 3	;wh_CodeLength
>944f	34					  .byte LinkDisplacement
=$9450					XtPtr1 ::= *
=37836					WordListLink ::= Nt0 ; remember the nt of this word for later
.9450	a9 5a		lda #$5a	FLog2M1M:	lda #<_c
.9452	a0 94		ldy #$94			ldy #>_c
.9454	20 1f 94	jsr $941f			jsr FMPolyYA
.9457	4c e3 8b	jmp $8be3			jmp FStar
=10					CL	.var *-XtPtr1
=$945a					en = *	; remember here
>944e	0a					.byte CL	;wh_CodeLength
.945a					_c:
>945a	cc cf 97 7c					.dword $7C97CFCC	; 32 bit signed binary mantissa.  $40000000 = +0.5
>945e	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>945f	64 87 94 af					.dword $AF948764	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9463	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9464	66 c8 d4 62					.dword $62D4C866	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9468	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9469	e2 9c c3 ac					.dword $ACC39CE2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>946d	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>946e	1a c6 2b 79					.dword $792BC61A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9472	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9473	07 e1 c4 a3					.dword $A3C4E107	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9477	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>9478	91 a5 54 5c					.dword $5C54A591	; 32 bit signed binary mantissa.  $40000000 = +0.5
>947c	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>947d	00 00						.word 0
>947f	46 4c 6f 67 32			L1:	.text "FLog2"	;  name of word as a string, ending at wh_NameLastChar
=37892					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9484	45					.byte (("FLog2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>9485	10					.byte WordFlags	;wh_Flags
>9486	03					.byte 3	;wh_CodeLength
>9487	38					  .byte LinkDisplacement
=$9488					XtPtr1 ::= *
=37892					WordListLink ::= Nt0 ; remember the nt of this word for later
.9488	a4 4c		ldy $4c		FLog2:		ldy FIndex
.948a	b9 57 00	lda $0057,y			lda FSMant0,y	; bad param?
.948d	30 20		bmi $94af			bmi _OutOfRange
.948f	f0 1e		beq $94af			beq _OutOfRange
.9491	b9 4d 00	lda $004d,y			lda FSExp,y
.9494	48		pha				pha		; remember orig exponent
.9495	a9 01		lda #$01			lda #1
.9497	99 4d 00	sta $004d,y			sta FSExp,y	; set to 1
.949a	20 79 8b	jsr $8b79			jsr F1Minus
.949d	20 50 94	jsr $9450			jsr FLog2M1M
.94a0	a0 00		ldy #$00			ldy #0		; add orig exponent to float
.94a2	68		pla				pla
.94a3	38		sec				sec
.94a4	e9 01		sbc #$01			sbc #1
.94a6	10 01		bpl $94a9			bpl +
.94a8	88		dey				dey
.94a9					+
.94a9	20 29 8e	jsr $8e29			jsr SToFYA
.94ac	4c 15 8b	jmp $8b15			jmp FPlus
.94af	4c 60 b4	jmp $b460	_OutOfRange:	jmp Throw_FpOutOfRange
=42					CL	.var *-XtPtr1
=$94b2					en = *	; remember here
>9486	2a					.byte CL	;wh_CodeLength
>94b2	46 4c 6e			L1:	.text "FLn"	;  name of word as a string, ending at wh_NameLastChar
=37941					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94b5	c3					.byte (("FLn"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>94b6	10					.byte WordFlags	;wh_Flags
>94b7	03					.byte 3	;wh_CodeLength
>94b8	31					  .byte LinkDisplacement
=$94b9					XtPtr1 ::= *
=37941					WordListLink ::= Nt0 ; remember the nt of this word for later
.94b9	20 88 94	jsr $9488	FLn:		jsr FLog2
.94bc	20 48 88	jsr $8848			jsr FLitI
>94bf	f8 0b b9 58					.dword $58b90bf8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94c3	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
.94c4	4c e3 8b	jmp $8be3			jmp FStar
=14					CL	.var *-XtPtr1
=$94c7					en = *	; remember here
>94b7	0e					.byte CL	;wh_CodeLength
>94c7	46 4c 6e 50 31			L1:	.text "FLnP1"	;  name of word as a string, ending at wh_NameLastChar
=37964					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94cc	25					.byte (("FLnP1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>94cd	10					.byte WordFlags	;wh_Flags
>94ce	03					.byte 3	;wh_CodeLength
>94cf	17					  .byte LinkDisplacement
=$94d0					XtPtr1 ::= *
=37964					WordListLink ::= Nt0 ; remember the nt of this word for later
.94d0	20 49 8b	jsr $8b49	FlnP1:		jsr F1Plus
.94d3	4c b9 94	jmp $94b9			jmp FLn
=6					CL	.var *-XtPtr1
=$94d6					en = *	; remember here
>94ce	06					.byte CL	;wh_CodeLength
>94d6	46 4c 6f 67			L1:	.text "FLog"	;  name of word as a string, ending at wh_NameLastChar
=37978					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94da	e4					.byte (("FLog"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>94db	10					.byte WordFlags	;wh_Flags
>94dc	03					.byte 3	;wh_CodeLength
>94dd	0e					  .byte LinkDisplacement
=$94de					XtPtr1 ::= *
=37978					WordListLink ::= Nt0 ; remember the nt of this word for later
.94de	20 88 94	jsr $9488	FLog:		jsr FLog2
.94e1	20 48 88	jsr $8848			jsr FLitI
>94e4	3c 4d 10 4d					.dword $4d104d3c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>94e8	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
.94e9	4c e3 8b	jmp $8be3			jmp FStar
=14					CL	.var *-XtPtr1
=$94ec					en = *	; remember here
>94dc	0e					.byte CL	;wh_CodeLength
>94ec	46 45 78 70 32 4d 31 4d		L1:	.text "FExp2M1M"	;  name of word as a string, ending at wh_NameLastChar
=38004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>94f4	a8					.byte (("FExp2M1M"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>94f5	10					.byte WordFlags	;wh_Flags
>94f6	03					.byte 3	;wh_CodeLength
>94f7	1a					  .byte LinkDisplacement
=$94f8					XtPtr1 ::= *
=38004					WordListLink ::= Nt0 ; remember the nt of this word for later
.94f8	a9 02		lda #$02	FExp2M1M:	lda #<_c
.94fa	a0 95		ldy #$95			ldy #>_c
.94fc	20 1f 94	jsr $941f			jsr FMPolyYA
.94ff	4c e3 8b	jmp $8be3			jmp FStar
=10					CL	.var *-XtPtr1
=$9502					en = *	; remember here
>94f6	0a					.byte CL	;wh_CodeLength
.9502					_c:
>9502	e7 dc 4f 7c					.dword $7C4FDCe7	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9506	f7						.char -9		; 8 bit signed exponent.  $00 = 2**0
>9507	de ca 4c 49					.dword $494CCADe	; 32 bit signed binary mantissa.  $40000000 = +0.5
>950b	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>950c	fb 42 64 72					.dword $726442fb	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9510	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>9511	50 90 f4 7a					.dword $7AF49050	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9515	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9516	a2 3c b9 58					.dword $58B93Ca2	; 32 bit signed binary mantissa.  $40000000 = +0.5
>951a	00						.char 0		; 8 bit signed exponent.  $00 = 2**0
>951b	00						.byte 0
>951c	46 45 78 70 32			L1:	.text "FExp2"	;  name of word as a string, ending at wh_NameLastChar
=38049					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9521	45					.byte (("FExp2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>9522	10					.byte WordFlags	;wh_Flags
>9523	03					.byte 3	;wh_CodeLength
>9524	2d					  .byte LinkDisplacement
=$9525					XtPtr1 ::= *
=38049					WordListLink ::= Nt0 ; remember the nt of this word for later
.9525	20 45 8a	jsr $8a45	FExp2:		jsr FIntFrc	; ( f: r_rem r_int )
.9528	20 71 8e	jsr $8e71			jsr FToS
.952b	20 f8 94	jsr $94f8			jsr FExp2M1M
.952e	20 49 8b	jsr $8b49			jsr F1Plus
.9531	20 e5 b3	jsr $b3e5			jsr PopA
.9534	a4 4c		ldy $4c				ldy FIndex
.9536	18		clc				clc
.9537	79 4d 00	adc $004d,y			adc FSExp,y
.953a	99 4d 00	sta $004d,y			sta FSExp,y
=24					CL	.var *-XtPtr1
=$953d					en = *	; remember here
>9523	18					.byte CL	;wh_CodeLength
.953d	60		rts				rts
>953e	46 45 78 70			L1:	.text "FExp"	;  name of word as a string, ending at wh_NameLastChar
=38082					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9542	04					.byte (("FExp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>9543	10					.byte WordFlags	;wh_Flags
>9544	03					.byte 3	;wh_CodeLength
>9545	21					  .byte LinkDisplacement
=$9546					XtPtr1 ::= *
=38082					WordListLink ::= Nt0 ; remember the nt of this word for later
.9546					FExp:
.9546	20 48 88	jsr $8848			jsr FLitI
>9549	94 1d 55 5c					.dword $5c551d94	; 32 bit signed binary mantissa.  $40000000 = +0.5
>954d	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
.954e	20 e3 8b	jsr $8be3			jsr FStar
.9551	4c 25 95	jmp $9525			jmp FExp2
=14					CL	.var *-XtPtr1
=$9554					en = *	; remember here
>9544	0e					.byte CL	;wh_CodeLength
>9554	46 45 78 70 4d 31		L1:	.text "FExpM1"	;  name of word as a string, ending at wh_NameLastChar
=38106					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>955a	26					.byte (("FExpM1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>955b	10					.byte WordFlags	;wh_Flags
>955c	03					.byte 3	;wh_CodeLength
>955d	18					  .byte LinkDisplacement
=$955e					XtPtr1 ::= *
=38106					WordListLink ::= Nt0 ; remember the nt of this word for later
.955e	20 46 95	jsr $9546	FExpM1:		jsr FExp
.9561	4c 79 8b	jmp $8b79			jmp F1Minus
=6					CL	.var *-XtPtr1
=$9564					en = *	; remember here
>955c	06					.byte CL	;wh_CodeLength
>9564	46 41 4c 6f 67			L1:	.text "FALog"	;  name of word as a string, ending at wh_NameLastChar
=38121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9569	e5					.byte (("FALog"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>956a	10					.byte WordFlags	;wh_Flags
>956b	03					.byte 3	;wh_CodeLength
>956c	0f					  .byte LinkDisplacement
=$956d					XtPtr1 ::= *
=38121					WordListLink ::= Nt0 ; remember the nt of this word for later
.956d					FALog:
.956d	20 48 88	jsr $8848			jsr FLitI
>9570	25 3c 4d 6a					.dword $6a4d3c25	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9574	02						.char 2		; 8 bit signed exponent.  $00 = 2**0
.9575	20 e3 8b	jsr $8be3			jsr FStar
.9578	4c 25 95	jmp $9525			jmp FExp2
=14					CL	.var *-XtPtr1
=$957b					en = *	; remember here
>956b	0e					.byte CL	;wh_CodeLength
>957b	46 2a 2a			L1:	.text "F**"	;  name of word as a string, ending at wh_NameLastChar
=38142					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>957e	43					.byte (("F**"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>957f	10					.byte WordFlags	;wh_Flags
>9580	03					.byte 3	;wh_CodeLength
>9581	15					  .byte LinkDisplacement
=$9582					XtPtr1 ::= *
=38142					WordListLink ::= Nt0 ; remember the nt of this word for later
.9582	20 d1 85	jsr $85d1	FPower:		jsr FSwap
.9585	20 88 94	jsr $9488			jsr FLog2
.9588	20 e3 8b	jsr $8be3			jsr FStar
.958b	4c 25 95	jmp $9525			jmp FExp2
=12					CL	.var *-XtPtr1
=$958e					en = *	; remember here
>9580	0c					.byte CL	;wh_CodeLength
>958e	44 65 67 32 52 61 64		L1:	.text "Deg2Rad"	;  name of word as a string, ending at wh_NameLastChar
=38165					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9595	87					.byte (("Deg2Rad"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>9596	10					.byte WordFlags	;wh_Flags
>9597	03					.byte 3	;wh_CodeLength
>9598	17					  .byte LinkDisplacement
=$9599					XtPtr1 ::= *
=38165					WordListLink ::= Nt0 ; remember the nt of this word for later
.9599					Deg2Rad:
.9599	20 48 88	jsr $8848			jsr FLitI
>959c	8a 1a 7d 47					.dword $477d1A8A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95a0	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
.95a1	4c e3 8b	jmp $8be3			jmp FStar
=11					CL	.var *-XtPtr1
=$95a4					en = *	; remember here
>9597	0b					.byte CL	;wh_CodeLength
>95a4	52 61 64 32 44 65 67		L1:	.text "Rad2Deg"	;  name of word as a string, ending at wh_NameLastChar
=38187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95ab	e7					.byte (("Rad2Deg"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>95ac	10					.byte WordFlags	;wh_Flags
>95ad	03					.byte 3	;wh_CodeLength
>95ae	16					  .byte LinkDisplacement
=$95af					XtPtr1 ::= *
=38187					WordListLink ::= Nt0 ; remember the nt of this word for later
.95af					Rad2Deg:
.95af	20 48 88	jsr $8848			jsr FLitI
>95b2	68 70 97 72					.dword $72977068	; 32 bit signed binary mantissa.  $40000000 = +0.5
>95b6	06						.char 6		; 8 bit signed exponent.  $00 = 2**0
.95b7	4c e3 8b	jmp $8be3			jmp FStar
=11					CL	.var *-XtPtr1
=$95ba					en = *	; remember here
>95ad	0b					.byte CL	;wh_CodeLength
>95ba	46 41 52 65 64 75 63 65		L1:	.text "FAReduce"	;  name of word as a string, ending at wh_NameLastChar
=38210					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>95c2	a8					.byte (("FAReduce"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>95c3	10					.byte WordFlags	;wh_Flags
>95c4	03					.byte 3	;wh_CodeLength
>95c5	17					  .byte LinkDisplacement
=$95c6					XtPtr1 ::= *
=38210					WordListLink ::= Nt0 ; remember the nt of this word for later
.95c6	a4 4c		ldy $4c		FAReduce:	ldy FIndex
.95c8	b9 57 00	lda $0057,y			lda FSMant0,y		; zero?
.95cb	f0 2f		beq $95fc			beq _ok
.95cd	b9 4d 00	lda $004d,y			lda FSExp,y		; get exponent
.95d0	30 2a		bmi $95fc			bmi _ok			; small?
.95d2	c9 01		cmp #$01			cmp #1			; maybe need mirror?
.95d4	30 26		bmi $95fc			bmi _ok			;if exponent <=0
.95d6	f0 24		beq $95fc			beq _ok
.95d8	c9 02		cmp #$02			cmp #2			; maybe need rotation?
.95da	b0 22		bcs $95fe			bcs _exp2
.95dc	b9 57 00	lda $0057,y			lda FSMant0,y
.95df	c9 65		cmp #$65			cmp #$65		;in -pi/2..pi/2 ?
.95e1	90 19		bcc $95fc			bcc _ok
.95e3	c9 9b		cmp #$9b			cmp #$100-$65
.95e5	b0 15		bcs $95fc			bcs _ok
.95e7					_mir:
.95e7	20 fe 88	jsr $88fe			jsr FPi
.95ea	a4 4c		ldy $4c				ldy FIndex
.95ec	b9 58 00	lda $0058,y			lda FSMant0+1,y
.95ef	10 03		bpl $95f4			bpl _3
.95f1	20 8a 8b	jsr $8b8a			jsr FNegate
.95f4	20 d1 85	jsr $85d1	_3:		jsr FSwap
.95f7	20 55 8b	jsr $8b55			jsr FMinus
.95fa	38		sec				sec		; mirrored
.95fb	60		rts				rts
.95fc	18		clc		_ok:		clc		; not mirrored
.95fd	60		rts				rts
.95fe	d0 0b		bne $960b	_exp2:		bne _rot	;if exp>2 then fix
.9600	b9 57 00	lda $0057,y			lda FSMant0,y
.9603	c9 65		cmp #$65			cmp #$65	;if mant>pi or mant<-pi then fix
.9605	90 e0		bcc $95e7			bcc _mir
.9607	c9 9b		cmp #$9b			cmp #$100-$65
.9609	b0 dc		bcs $95e7			bcs _mir
.960b	20 2d 89	jsr $892d	_rot:		jsr F2Pi
.960e	20 9e 8c	jsr $8c9e			jsr FSlash
.9611	20 45 8a	jsr $8a45			jsr FIntFrc
.9614	e6 4c		inc $4c				inc FIndex	; FDrop integer part
.9616	a4 4c		ldy $4c				ldy FIndex	;if >=.5
.9618	b9 4d 00	lda $004d,y			lda FSExp,y
.961b	a8		tay				tay
.961c	30 03		bmi $9621			bmi _rot4
.961e	20 79 8b	jsr $8b79			jsr F1Minus	;  subtract 1
.9621	20 2d 89	jsr $892d	_rot4:		jsr F2Pi
.9624	20 e3 8b	jsr $8be3			jsr FStar
.9627	4c c6 95	jmp $95c6			jmp FAReduce	; rotate done, look again
=100					CL	.var *-XtPtr1
=$962a					en = *	; remember here
>95c4	64					.byte CL	;wh_CodeLength
>962a	46 53 69 6e			L1:	.text "FSin"	;  name of word as a string, ending at wh_NameLastChar
=38318					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>962e	c4					.byte (("FSin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=108					LinkDisplacement = Nt0-WordListLink
>962f	10					.byte WordFlags	;wh_Flags
>9630	03					.byte 3	;wh_CodeLength
>9631	6c					  .byte LinkDisplacement
=$9632					XtPtr1 ::= *
=38318					WordListLink ::= Nt0 ; remember the nt of this word for later
.9632	20 c6 95	jsr $95c6	FSin:		jsr FAReduce
.9635	4c 38 96	jmp $9638			jmp FSinM
=6					CL	.var *-XtPtr1
=$9638					en = *	; remember here
>9630	06					.byte CL	;wh_CodeLength
.9638	20 4d 85	jsr $854d	FSinM:		jsr FDup
.963b	20 73 8c	jsr $8c73			jsr FSqr	; x x^2
.963e	a9 4e		lda #$4e			lda #<_c
.9640	a0 96		ldy #$96			ldy #>_c
.9642	20 1f 94	jsr $941f			jsr FMPolyYA
.9645	20 e3 8b	jsr $8be3			jsr FStar
.9648	20 49 8b	jsr $8b49			jsr F1Plus	; C0 +1.0
.964b	4c e3 8b	jmp $8be3			jmp FStar
.964e					_c:
>964e	ba a7 21 57					.dword $5721a7ba	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9652	ee						.char -18		; 8 bit signed exponent.  $00 = 2**0
>9653	3a 0b 2a 98					.dword $982a0b3a	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9657	f4						.char -12		; 8 bit signed exponent.  $00 = 2**0
>9658	4c 8f 43 44					.dword $44438f4c	; 32 bit signed binary mantissa.  $40000000 = +0.5
>965c	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>965d	2b ae aa aa					.dword $aaaaae2b	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9661	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9662	00						.byte 0
>9663	46 43 73 63			L1:	.text "FCsc"	;  name of word as a string, ending at wh_NameLastChar
=38375					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9667	64					.byte (("FCsc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=57					LinkDisplacement = Nt0-WordListLink
>9668	10					.byte WordFlags	;wh_Flags
>9669	03					.byte 3	;wh_CodeLength
>966a	39					  .byte LinkDisplacement
=$966b					XtPtr1 ::= *
=38375					WordListLink ::= Nt0 ; remember the nt of this word for later
.966b	20 32 96	jsr $9632	FCsc:		jsr FSin
.966e	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/SIN(r1)
=6					CL	.var *-XtPtr1
=$9671					en = *	; remember here
>9669	06					.byte CL	;wh_CodeLength
>9671	46 43 6f 73			L1:	.text "FCos"	;  name of word as a string, ending at wh_NameLastChar
=38389					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9675	64					.byte (("FCos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>9676	10					.byte WordFlags	;wh_Flags
>9677	03					.byte 3	;wh_CodeLength
>9678	0e					  .byte LinkDisplacement
=$9679					XtPtr1 ::= *
=38389					WordListLink ::= Nt0 ; remember the nt of this word for later
.9679	20 0e 89	jsr $890e	FCos:		jsr FPiH
.967c	20 15 8b	jsr $8b15			jsr FPlus
.967f	4c 32 96	jmp $9632			jmp FSin
=9					CL	.var *-XtPtr1
=$9682					en = *	; remember here
>9677	09					.byte CL	;wh_CodeLength
>9682	46 53 65 63			L1:	.text "FSec"	;  name of word as a string, ending at wh_NameLastChar
=38406					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9686	64					.byte (("FSec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9687	10					.byte WordFlags	;wh_Flags
>9688	03					.byte 3	;wh_CodeLength
>9689	11					  .byte LinkDisplacement
=$968a					XtPtr1 ::= *
=38406					WordListLink ::= Nt0 ; remember the nt of this word for later
.968a	20 79 96	jsr $9679	FSec:		jsr FCos
.968d	4c 42 8d	jmp $8d42			jmp F1Slash		; 1/COS(r1)
=6					CL	.var *-XtPtr1
=$9690					en = *	; remember here
>9688	06					.byte CL	;wh_CodeLength
>9690	46 53 69 6e 43 6f 73		L1:	.text "FSinCos"	;  name of word as a string, ending at wh_NameLastChar
=38423					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9697	67					.byte (("FSinCos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>9698	10					.byte WordFlags	;wh_Flags
>9699	03					.byte 3	;wh_CodeLength
>969a	11					  .byte LinkDisplacement
=$969b					XtPtr1 ::= *
=38423					WordListLink ::= Nt0 ; remember the nt of this word for later
.969b	20 4d 85	jsr $854d	FSinCos:	jsr FDup
.969e	20 32 96	jsr $9632			jsr FSin
.96a1	20 d1 85	jsr $85d1			jsr FSwap
.96a4	4c 79 96	jmp $9679			jmp FCos
=12					CL	.var *-XtPtr1
=$96a7					en = *	; remember here
>9699	0c					.byte CL	;wh_CodeLength
>96a7	46 54 61 6e			L1:	.text "FTan"	;  name of word as a string, ending at wh_NameLastChar
=38443					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>96ab	c4					.byte (("FTan"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>96ac	10					.byte WordFlags	;wh_Flags
>96ad	03					.byte 3	;wh_CodeLength
>96ae	14					  .byte LinkDisplacement
=$96af					XtPtr1 ::= *
=38443					WordListLink ::= Nt0 ; remember the nt of this word for later
.96af	20 c6 95	jsr $95c6	FTan:		jsr FAReduce
.96b2	90 06		bcc $96ba			bcc _30
.96b4	20 ba 96	jsr $96ba			jsr _30
.96b7	4c 8a 8b	jmp $8b8a			jmp FNegate
.96ba					_30:
.96ba	20 4d 85	jsr $854d			jsr FDup
.96bd	20 b0 8b	jsr $8bb0			jsr FAbs
.96c0	20 1e 89	jsr $891e			jsr FPiQ
.96c3	20 68 87	jsr $8768			jsr FLe
.96c6	e8		inx				inx			; pop f
.96c7	e8		inx				inx
.96c8	b5 24		lda $24,x			lda DStack+0,x
.96ca	d0 19		bne $96e5			bne FTanM
.96cc	20 0e 89	jsr $890e			jsr FPiH
.96cf	a4 4c		ldy $4c				ldy FIndex		; get sign
.96d1	b9 57 00	lda $0057,y			lda FSMant0,y
.96d4	10 03		bpl $96d9			bpl +
.96d6	20 8a 8b	jsr $8b8a			jsr FNegate
.96d9					+
.96d9	20 d1 85	jsr $85d1			jsr FSwap
.96dc	20 55 8b	jsr $8b55			jsr FMinus
.96df	20 e5 96	jsr $96e5			jsr FTanM
.96e2	4c 42 8d	jmp $8d42			jmp F1Slash
=54					CL	.var *-XtPtr1
=$96e5					en = *	; remember here
>96ad	36					.byte CL	;wh_CodeLength
.96e5	20 4d 85	jsr $854d	FTanM:		jsr FDup
.96e8	20 73 8c	jsr $8c73			jsr FSqr		; x x^2
.96eb	a9 fb		lda #$fb			lda #<_c
.96ed	a0 96		ldy #$96			ldy #>_c
.96ef	20 1f 94	jsr $941f			jsr FMPolyYA
.96f2	20 e3 8b	jsr $8be3			jsr FStar
.96f5	20 49 8b	jsr $8b49			jsr F1Plus		; c0 1.0
.96f8	4c e3 8b	jmp $8be3			jmp FStar
.96fb					_c:
>96fb	1e ae 4d 58					.dword $584DAE1E	; 32 bit signed binary mantissa.  $40000000 = +0.5
>96ff	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9700	51 0a eb 57					.dword $57EB0A51	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9704	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9705	98 d9 14 77					.dword $7714D998	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9709	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>970a	f9 10 ea 43					.dword $43EA10F9	; 32 bit signed binary mantissa.  $40000000 = +0.5
>970e	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>970f	1b e2 57 55					.dword $5557E21B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9713	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>9714	00						.byte 0
>9715	46 43 6f 74			L1:	.text "FCot"	;  name of word as a string, ending at wh_NameLastChar
=38553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9719	84					.byte (("FCot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=110					LinkDisplacement = Nt0-WordListLink
>971a	10					.byte WordFlags	;wh_Flags
>971b	03					.byte 3	;wh_CodeLength
>971c	6e					  .byte LinkDisplacement
=$971d					XtPtr1 ::= *
=38553					WordListLink ::= Nt0 ; remember the nt of this word for later
.971d	20 af 96	jsr $96af	FCot:		jsr FTan
.9720	4c 42 8d	jmp $8d42			jmp F1Slash	; =1/TAN(r1)
=6					CL	.var *-XtPtr1
=$9723					en = *	; remember here
>971b	06					.byte CL	;wh_CodeLength
>9723	46 41 43 6f 73			L1:	.text "FACos"	;  name of word as a string, ending at wh_NameLastChar
=38568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9728	65					.byte (("FACos"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9729	10					.byte WordFlags	;wh_Flags
>972a	03					.byte 3	;wh_CodeLength
>972b	0f					  .byte LinkDisplacement
=$972c					XtPtr1 ::= *
=38568					WordListLink ::= Nt0 ; remember the nt of this word for later
.972c	a4 4c		ldy $4c		FACos:		ldy FIndex
.972e	b9 57 00	lda $0057,y			lda FSMant0,y
.9731	08		php				php			; save sign
.9732	20 b0 8b	jsr $8bb0			jsr FAbs
.9735	a9 58		lda #$58			lda #<_c
.9737	a0 97		ldy #$97			ldy #>_c
.9739	20 1f 94	jsr $941f			jsr FMPolyYA
.973c	20 d1 85	jsr $85d1			jsr FSwap
.973f	20 8a 8b	jsr $8b8a			jsr FNegate
.9742	20 49 8b	jsr $8b49			jsr F1Plus
.9745	20 17 8f	jsr $8f17			jsr FSqrt
.9748	20 e3 8b	jsr $8be3			jsr FStar
.974b	28		plp				plp			; was r1 negative?
.974c	10 09		bpl $9757			bpl +
.974e	20 fe 88	jsr $88fe			jsr FPi
.9751	20 d1 85	jsr $85d1			jsr FSwap
.9754	20 55 8b	jsr $8b55			jsr FMinus
.9757					+
=43					CL	.var *-XtPtr1
=$9757					en = *	; remember here
>972a	2b					.byte CL	;wh_CodeLength
.9757	60		rts				rts
.9758					_c:
>9758	8b 5e 9f 4b					.dword $4B9F5E8B	; 32 bit signed binary mantissa.  $40000000 = +0.5
>975c	f8						.char -8		; 8 bit signed exponent.  $00 = 2**0
>975d	ad cc 29 a4					.dword $A429CCAD	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9761	fa						.char -6		; 8 bit signed exponent.  $00 = 2**0
>9762	98 a1 a3 6e					.dword $6EA3A198	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9766	fb						.char -5		; 8 bit signed exponent.  $00 = 2**0
>9767	5a 10 e1 9b					.dword $9BE1105A	; 32 bit signed binary mantissa.  $40000000 = +0.5
>976b	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>976c	c6 71 ea 5a					.dword $5AEA71C6	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9770	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>9771	e0 56 21 92					.dword $922156E0	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9775	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9776	41 ed 87 64					.dword $6487ED41	; 32 bit signed binary mantissa.  $40000000 = +0.5
>977a	01						.char 1		; 8 bit signed exponent.  $00 = 2**0
>977b	00						.byte 0
>977c	46 41 53 65 63			L1:	.text "FASec"	;  name of word as a string, ending at wh_NameLastChar
=38657					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9781	65					.byte (("FASec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>9782	10					.byte WordFlags	;wh_Flags
>9783	03					.byte 3	;wh_CodeLength
>9784	59					  .byte LinkDisplacement
=$9785					XtPtr1 ::= *
=38657					WordListLink ::= Nt0 ; remember the nt of this word for later
.9785	20 42 8d	jsr $8d42	FASec:		jsr F1Slash
.9788	4c 2c 97	jmp $972c			jmp FACos
=6					CL	.var *-XtPtr1
=$978b					en = *	; remember here
>9783	06					.byte CL	;wh_CodeLength
>978b	46 41 53 69 6e			L1:	.text "FASin"	;  name of word as a string, ending at wh_NameLastChar
=38672					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9790	c5					.byte (("FASin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>9791	10					.byte WordFlags	;wh_Flags
>9792	03					.byte 3	;wh_CodeLength
>9793	0f					  .byte LinkDisplacement
=$9794					XtPtr1 ::= *
=38672					WordListLink ::= Nt0 ; remember the nt of this word for later
.9794	20 2c 97	jsr $972c	FASin:		jsr FACos
.9797	20 8a 8b	jsr $8b8a			jsr FNegate
.979a	20 0e 89	jsr $890e			jsr FPiH
.979d	4c 15 8b	jmp $8b15			jmp FPlus
=12					CL	.var *-XtPtr1
=$97a0					en = *	; remember here
>9792	0c					.byte CL	;wh_CodeLength
>97a0	46 41 43 73 63			L1:	.text "FACsc"	;  name of word as a string, ending at wh_NameLastChar
=38693					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97a5	65					.byte (("FACsc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>97a6	10					.byte WordFlags	;wh_Flags
>97a7	03					.byte 3	;wh_CodeLength
>97a8	15					  .byte LinkDisplacement
=$97a9					XtPtr1 ::= *
=38693					WordListLink ::= Nt0 ; remember the nt of this word for later
.97a9	20 42 8d	jsr $8d42	FACsc:		jsr F1Slash
.97ac	4c 94 97	jmp $9794			jmp FASin
=6					CL	.var *-XtPtr1
=$97af					en = *	; remember here
>97a7	06					.byte CL	;wh_CodeLength
>97af	46 41 54 61 6e			L1:	.text "FATan"	;  name of word as a string, ending at wh_NameLastChar
=38708					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>97b4	c5					.byte (("FATan"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>97b5	10					.byte WordFlags	;wh_Flags
>97b6	03					.byte 3	;wh_CodeLength
>97b7	0f					  .byte LinkDisplacement
=$97b8					XtPtr1 ::= *
=38708					WordListLink ::= Nt0 ; remember the nt of this word for later
.97b8					FATan:
.97b8	a4 4c		ldy $4c				ldy FIndex
.97ba	b9 4d 00	lda $004d,y			lda FSExp,y		; Abs(r1)<1 ?
.97bd	30 1b		bmi $97da			bmi FATanM
.97bf	f0 19		beq $97da			beq FATanM
.97c1	b9 57 00	lda $0057,y			lda FSMant0,y		; save sign
.97c4	08		php				php
.97c5	20 42 8d	jsr $8d42			jsr F1Slash
.97c8	20 da 97	jsr $97da			jsr FATanM
.97cb	20 8a 8b	jsr $8b8a			jsr FNegate
.97ce	20 0e 89	jsr $890e			jsr FPiH
.97d1	28		plp				plp
.97d2	10 03		bpl $97d7			bpl _18
.97d4	20 8a 8b	jsr $8b8a			jsr FNegate
.97d7	4c 15 8b	jmp $8b15	_18:		jmp FPlus
.97da	20 4d 85	jsr $854d	FATanM:		jsr FDup		; x x
.97dd	20 73 8c	jsr $8c73			jsr FSqr		; x xsqr
.97e0	a9 f0		lda #$f0			lda #<_c
.97e2	a0 97		ldy #$97			ldy #>_c
.97e4	20 1f 94	jsr $941f			jsr FMPolyYA
.97e7	20 e3 8b	jsr $8be3			jsr FStar		; x poly
.97ea	20 49 8b	jsr $8b49			jsr F1Plus		; x poly
.97ed	4c e3 8b	jmp $8be3			jmp FStar
.97f0					_c:
>97f0	98 08 2d 76					.dword $762D0898	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f4	f9						.char -7		; 8 bit signed exponent.  $00 = 2**0
>97f5	55 a1 32 b8					.dword $B832A155	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97f9	fc						.char -4		; 8 bit signed exponent.  $00 = 2**0
>97fa	a8 d7 a2 53					.dword $53A2D7A8	; 32 bit signed binary mantissa.  $40000000 = +0.5
>97fe	fd						.char -3		; 8 bit signed exponent.  $00 = 2**0
>97ff	be 91 85 bb					.dword $BB8591BE	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9803	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9804	06 65 aa 65					.dword $65AA6506	; 32 bit signed binary mantissa.  $40000000 = +0.5
>9808	fe						.char -2		; 8 bit signed exponent.  $00 = 2**0
>9809	12 21 b0 aa					.dword $AAB02112	; 32 bit signed binary mantissa.  $40000000 = +0.5
>980d	ff						.char -1		; 8 bit signed exponent.  $00 = 2**0
>980e	00						.byte 0
>980f	46 41 43 6f 74			L1:	.text "FACot"	;  name of word as a string, ending at wh_NameLastChar
=38804					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9814	85					.byte (("FACot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>9815	10					.byte WordFlags	;wh_Flags
>9816	03					.byte 3	;wh_CodeLength
>9817	60					  .byte LinkDisplacement
=$9818					XtPtr1 ::= *
=38804					WordListLink ::= Nt0 ; remember the nt of this word for later
.9818	20 42 8d	jsr $8d42	FACot:		jsr F1Slash
.981b	4c b8 97	jmp $97b8			jmp FATan
=6					CL	.var *-XtPtr1
=$981e					en = *	; remember here
>9816	06					.byte CL	;wh_CodeLength
>981e	46 41 54 61 6e 32		L1:	.text "FATan2"	;  name of word as a string, ending at wh_NameLastChar
=38820					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9824	46					.byte (("FATan2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9825	10					.byte WordFlags	;wh_Flags
>9826	03					.byte 3	;wh_CodeLength
>9827	10					  .byte LinkDisplacement
=$9828					XtPtr1 ::= *
=38820					WordListLink ::= Nt0 ; remember the nt of this word for later
.9828	a4 4c		ldy $4c		FATan2:		ldy FIndex
.982a	b9 57 00	lda $0057,y			lda FSMant0+0,y	; get rx sign
.982d	f0 1c		beq $984b			beq _rxzero
.982f	0a		asl a				asl a		;   C=rx sign
.9830	b9 58 00	lda $0058,y			lda FSMant0+1,y	;   N=ry sign
.9833	08		php				php		; save signs
.9834	20 9e 8c	jsr $8c9e			jsr FSlash
.9837	20 b8 97	jsr $97b8			jsr FATan
.983a	28		plp				plp		; pop signs
.983b	b0 01		bcs $983e			bcs _rxneg
.983d	60		rts		_rts:		rts
.983e	08		php		_rxneg:		php
.983f	20 fe 88	jsr $88fe			jsr FPi
.9842	28		plp				plp
.9843	10 03		bpl $9848			bpl +
.9845	20 8a 8b	jsr $8b8a			jsr FNegate
.9848	4c 15 8b	jmp $8b15	+		jmp FPlus
.984b	e6 4c		inc $4c		_rxzero:	inc FIndex	; FDrop rx
.984d	b9 57 00	lda $0057,y			lda FSMant0,y
.9850	08		php				php
.9851	e6 4c		inc $4c				inc FIndex	; FDrop ry
.9853	20 0e 89	jsr $890e			jsr FPiH
.9856	28		plp				plp
.9857	10 e4		bpl $983d			bpl _rts
.9859	4c 8a 8b	jmp $8b8a			jmp FNegate
=52					CL	.var *-XtPtr1
=$985c					en = *	; remember here
>9826	34					.byte CL	;wh_CodeLength
>985c	46 53 67 6e			L1:	.text "FSgn"	;  name of word as a string, ending at wh_NameLastChar
=38880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9860	c4					.byte (("FSgn"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>9861	10					.byte WordFlags	;wh_Flags
>9862	03					.byte 3	;wh_CodeLength
>9863	3c					  .byte LinkDisplacement
=$9864					XtPtr1 ::= *
=38880					WordListLink ::= Nt0 ; remember the nt of this word for later
.9864	a4 4c		ldy $4c		FSgn:		ldy FIndex
.9866	b9 57 00	lda $0057,y			lda FSMant0,y
.9869	f0 0a		beq $9875			beq _zero
.986b	e6 4c		inc $4c				inc FIndex
.986d	b9 57 00	lda $0057,y			lda FSMant0,y
.9870	30 04		bmi $9876			bmi FM1
.9872	4c e3 88	jmp $88e3			jmp F1
.9875	60		rts		_zero:		rts
=18					CL	.var *-XtPtr1
=$9876					en = *	; remember here
>9862	12					.byte CL	;wh_CodeLength
.9876	a9 80		lda #$80	FM1:		lda #$80
.9878	a0 00		ldy #$00			ldy #0
.987a	4c 92 88	jmp $8892			jmp FLitYA
>987d	46 53 69 6e 48			L1:	.text "FSinH"	;  name of word as a string, ending at wh_NameLastChar
=38914					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9882	05					.byte (("FSinH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>9883	10					.byte WordFlags	;wh_Flags
>9884	03					.byte 3	;wh_CodeLength
>9885	22					  .byte LinkDisplacement
=$9886					XtPtr1 ::= *
=38914					WordListLink ::= Nt0 ; remember the nt of this word for later
.9886	20 4d 85	jsr $854d	FSinH:		jsr FDup
.9889	20 46 95	jsr $9546			jsr FExp
.988c	20 d1 85	jsr $85d1			jsr FSwap
.988f	20 8a 8b	jsr $8b8a			jsr FNegate
.9892	20 46 95	jsr $9546			jsr FExp
.9895	20 55 8b	jsr $8b55			jsr FMinus
.9898	4c 97 89	jmp $8997			jmp F2Slash
=21					CL	.var *-XtPtr1
=$989b					en = *	; remember here
>9884	15					.byte CL	;wh_CodeLength
>989b	46 43 73 63 48			L1:	.text "FCscH"	;  name of word as a string, ending at wh_NameLastChar
=38944					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98a0	05					.byte (("FCscH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98a1	10					.byte WordFlags	;wh_Flags
>98a2	03					.byte 3	;wh_CodeLength
>98a3	1e					  .byte LinkDisplacement
=$98a4					XtPtr1 ::= *
=38944					WordListLink ::= Nt0 ; remember the nt of this word for later
.98a4	20 86 98	jsr $9886	FCscH:		jsr FSinH
.98a7	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$98aa					en = *	; remember here
>98a2	06					.byte CL	;wh_CodeLength
>98aa	46 43 6f 73 48			L1:	.text "FCosH"	;  name of word as a string, ending at wh_NameLastChar
=38959					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98af	05					.byte (("FCosH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98b0	10					.byte WordFlags	;wh_Flags
>98b1	03					.byte 3	;wh_CodeLength
>98b2	0f					  .byte LinkDisplacement
=$98b3					XtPtr1 ::= *
=38959					WordListLink ::= Nt0 ; remember the nt of this word for later
.98b3	20 4d 85	jsr $854d	FCosH:		jsr FDup
.98b6	20 46 95	jsr $9546			jsr FExp
.98b9	20 d1 85	jsr $85d1			jsr FSwap
.98bc	20 8a 8b	jsr $8b8a			jsr FNegate
.98bf	20 46 95	jsr $9546			jsr FExp
.98c2	20 15 8b	jsr $8b15			jsr FPlus
.98c5	4c 97 89	jmp $8997			jmp F2Slash
=21					CL	.var *-XtPtr1
=$98c8					en = *	; remember here
>98b1	15					.byte CL	;wh_CodeLength
>98c8	46 53 65 63 48			L1:	.text "FSecH"	;  name of word as a string, ending at wh_NameLastChar
=38989					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98cd	05					.byte (("FSecH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>98ce	10					.byte WordFlags	;wh_Flags
>98cf	03					.byte 3	;wh_CodeLength
>98d0	1e					  .byte LinkDisplacement
=$98d1					XtPtr1 ::= *
=38989					WordListLink ::= Nt0 ; remember the nt of this word for later
.98d1	20 b3 98	jsr $98b3	FSecH:		jsr FCosH
.98d4	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$98d7					en = *	; remember here
>98cf	06					.byte CL	;wh_CodeLength
>98d7	46 54 61 6e 48			L1:	.text "FTanH"	;  name of word as a string, ending at wh_NameLastChar
=39004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>98dc	05					.byte (("FTanH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>98dd	10					.byte WordFlags	;wh_Flags
>98de	03					.byte 3	;wh_CodeLength
>98df	0f					  .byte LinkDisplacement
=$98e0					XtPtr1 ::= *
=39004					WordListLink ::= Nt0 ; remember the nt of this word for later
.98e0	20 4d 85	jsr $854d	FTanH:		jsr FDup
.98e3	20 8a 8b	jsr $8b8a			jsr FNegate	; X -X
.98e6	20 46 95	jsr $9546			jsr FExp	; X Exp(-X)
.98e9	20 d1 85	jsr $85d1			jsr FSwap	; Exp(-X) X
.98ec	20 46 95	jsr $9546			jsr FExp	; Exp(-X) Exp(X)
.98ef	20 70 85	jsr $8570			jsr FOver	; Exp(-X) Exp(X) Exp(-X)
.98f2	20 15 8b	jsr $8b15			jsr FPlus	; Exp(-X) Exp(X)+Exp(-X)
.98f5	20 9e 8c	jsr $8c9e			jsr FSlash	; Exp(-X)/(Exp(X)+Exp(-X))
.98f8	20 8c 89	jsr $898c			jsr F2Star	; Exp(-X)/(Exp(X)+Exp(-X))*2
.98fb	20 8a 8b	jsr $8b8a			jsr FNegate
.98fe	4c 49 8b	jmp $8b49			jmp F1Plus
=33					CL	.var *-XtPtr1
=$9901					en = *	; remember here
>98de	21					.byte CL	;wh_CodeLength
>9901	46 43 6f 74 48			L1:	.text "FCotH"	;  name of word as a string, ending at wh_NameLastChar
=39046					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9906	05					.byte (("FCotH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>9907	10					.byte WordFlags	;wh_Flags
>9908	03					.byte 3	;wh_CodeLength
>9909	2a					  .byte LinkDisplacement
=$990a					XtPtr1 ::= *
=39046					WordListLink ::= Nt0 ; remember the nt of this word for later
.990a	20 e0 98	jsr $98e0	FCotH:		jsr FTanH
.990d	4c 42 8d	jmp $8d42			jmp F1Slash
=6					CL	.var *-XtPtr1
=$9910					en = *	; remember here
>9908	06					.byte CL	;wh_CodeLength
>9910	46 41 53 69 6e 48		L1:	.text "FASinH"	;  name of word as a string, ending at wh_NameLastChar
=39062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9916	06					.byte (("FASinH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9917	10					.byte WordFlags	;wh_Flags
>9918	03					.byte 3	;wh_CodeLength
>9919	10					  .byte LinkDisplacement
=$991a					XtPtr1 ::= *
=39062					WordListLink ::= Nt0 ; remember the nt of this word for later
.991a	20 4d 85	jsr $854d	FASinH:		jsr FDup	; X X
.991d	20 73 8c	jsr $8c73			jsr FSqr	; X X*X
.9920	20 49 8b	jsr $8b49			jsr F1Plus	; X X*X+1
.9923	20 17 8f	jsr $8f17			jsr FSqrt	; X sqrt(X*X+1)
.9926	20 15 8b	jsr $8b15			jsr FPlus	;
.9929	4c b9 94	jmp $94b9			jmp FLn
=18					CL	.var *-XtPtr1
=$992c					en = *	; remember here
>9918	12					.byte CL	;wh_CodeLength
>992c	46 41 43 73 63 48		L1:	.text "FACscH"	;  name of word as a string, ending at wh_NameLastChar
=39090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9932	06					.byte (("FACscH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>9933	10					.byte WordFlags	;wh_Flags
>9934	03					.byte 3	;wh_CodeLength
>9935	1c					  .byte LinkDisplacement
=$9936					XtPtr1 ::= *
=39090					WordListLink ::= Nt0 ; remember the nt of this word for later
.9936	20 42 8d	jsr $8d42	FACscH:		jsr F1Slash
.9939	4c 1a 99	jmp $991a			jmp FASinH
=6					CL	.var *-XtPtr1
=$993c					en = *	; remember here
>9934	06					.byte CL	;wh_CodeLength
>993c	46 41 43 6f 73 48		L1:	.text "FACosH"	;  name of word as a string, ending at wh_NameLastChar
=39106					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9942	06					.byte (("FACosH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>9943	10					.byte WordFlags	;wh_Flags
>9944	03					.byte 3	;wh_CodeLength
>9945	10					  .byte LinkDisplacement
=$9946					XtPtr1 ::= *
=39106					WordListLink ::= Nt0 ; remember the nt of this word for later
.9946	20 4d 85	jsr $854d	FACosH:		jsr FDup
.9949	20 73 8c	jsr $8c73			jsr FSqr
.994c	20 79 8b	jsr $8b79			jsr F1Minus
.994f	20 17 8f	jsr $8f17			jsr FSqrt
.9952	20 15 8b	jsr $8b15			jsr FPlus
.9955	4c b9 94	jmp $94b9			jmp FLn
=18					CL	.var *-XtPtr1
=$9958					en = *	; remember here
>9944	12					.byte CL	;wh_CodeLength
>9958	46 41 53 65 63 48		L1:	.text "FASecH"	;  name of word as a string, ending at wh_NameLastChar
=39134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>995e	06					.byte (("FASecH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>995f	10					.byte WordFlags	;wh_Flags
>9960	03					.byte 3	;wh_CodeLength
>9961	1c					  .byte LinkDisplacement
=$9962					XtPtr1 ::= *
=39134					WordListLink ::= Nt0 ; remember the nt of this word for later
.9962	20 42 8d	jsr $8d42	FASecH:		jsr F1Slash
.9965	4c 46 99	jmp $9946			jmp FACosH
=6					CL	.var *-XtPtr1
=$9968					en = *	; remember here
>9960	06					.byte CL	;wh_CodeLength
>9968	46 41 54 61 6e 48		L1:	.text "FATanH"	;  name of word as a string, ending at wh_NameLastChar
=39150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>996e	06					.byte (("FATanH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>996f	10					.byte WordFlags	;wh_Flags
>9970	03					.byte 3	;wh_CodeLength
>9971	10					  .byte LinkDisplacement
=$9972					XtPtr1 ::= *
=39150					WordListLink ::= Nt0 ; remember the nt of this word for later
.9972	20 4d 85	jsr $854d	FAtanH:		jsr FDup	; x x
.9975	20 49 8b	jsr $8b49			jsr F1Plus	; x x+1
.9978	20 d1 85	jsr $85d1			jsr FSwap	; 1+x x
.997b	20 e3 88	jsr $88e3			jsr F1
.997e	20 d1 85	jsr $85d1			jsr FSwap
.9981	20 55 8b	jsr $8b55			jsr FMinus	; 1+x 1-x
.9984	20 9e 8c	jsr $8c9e			jsr FSlash	; (1+x)/(1-x)
.9987	20 b9 94	jsr $94b9			jsr FLn
.998a	4c 97 89	jmp $8997			jmp F2Slash
=27					CL	.var *-XtPtr1
=$998d					en = *	; remember here
>9970	1b					.byte CL	;wh_CodeLength
>998d	46 41 43 6f 74 48		L1:	.text "FACotH"	;  name of word as a string, ending at wh_NameLastChar
=39187					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9993	06					.byte (("FACotH"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>9994	10					.byte WordFlags	;wh_Flags
>9995	03					.byte 3	;wh_CodeLength
>9996	25					  .byte LinkDisplacement
=$9997					XtPtr1 ::= *
=39187					WordListLink ::= Nt0 ; remember the nt of this word for later
.9997	20 42 8d	jsr $8d42	FACotH: 	jsr F1Slash
.999a	4c 72 99	jmp $9972			jmp FATanH
=6					CL	.var *-XtPtr1
=$999d					en = *	; remember here
>9995	06					.byte CL	;wh_CodeLength
>999d	45 64				L1:	.text "Ed"	;  name of word as a string, ending at wh_NameLastChar
=39199					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>999f	82					.byte (("Ed"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>99a0	10					.byte WordFlags	;wh_Flags
>99a1	03					.byte 3	;wh_CodeLength
>99a2	0c					  .byte LinkDisplacement
=$99a3					XtPtr1 ::= *
=39199					WordListLink ::= Nt0 ; remember the nt of this word for later
.99a3	4c a6 99	jmp $99a6	Ed:		jmp ed6502
=3					CL	.var *-XtPtr1
=$99a6					en = *	; remember here
>99a1	03					.byte CL	;wh_CodeLength
=$1e					ed_head	 = editor1  ; pointer to first list element (addr) (2 bytes)
=$20					ed_cur	 = editor2  ; current line number (1 is first line) (2 bytes)
=$22					ed_flags = editor3  ; Flags used by ed, where
.99a6					ed6502:
.99a6	ad 00 03	lda $0300			lda base
.99a9	85 23		sta $23				sta editor3+1
.99ab	20 d5 b1	jsr $b1d5			jsr Decimal
.99ae	a9 00		lda #$00			lda #0
.99b0	85 1e		sta $1e				sta ed_head
.99b2	85 1f		sta $1f				sta ed_head+1
.99b4	85 20		sta $20				sta ed_cur
.99b6	85 21		sta $21				sta ed_cur+1
.99b8	85 22		sta $22				sta ed_flags
.99ba	20 fa b7	jsr $b7fa			jsr Zero
.99bd	20 fa b7	jsr $b7fa			jsr Zero		; ( addr-t u-t )
.99c0	20 75 ab	jsr $ab75			jsr CR
.99c3					ed_input_loop:
.99c3	a9 7e		lda #$7e			lda #$ff-%10000001
.99c5	25 22		and $22				and ed_flags
.99c7	85 22		sta $22				sta ed_flags
.99c9	20 6b 9e	jsr $9e6b			jsr ed_get_input
.99cc	a5 06		lda $06				lda ciblen+0
.99ce	d0 1e		bne $99ee			bne _command_mode
.99d0	a5 20		lda $20				lda ed_cur+0
.99d2	a4 21		ldy $21				ldy ed_cur+1
.99d4	20 bd b7	jsr $b7bd			jsr PushYA		; ( addr-t u-t u )
.99d7	a9 80		lda #$80			lda #%10000000
.99d9	05 22		ora $22				ora ed_flags
.99db	85 22		sta $22				sta ed_flags
.99dd	20 6e ca	jsr $ca6e			jsr One_Plus		; ( addr-t u-t u+1 )
.99e0	20 86 9e	jsr $9e86			jsr ed_is_valid_line
.99e3	b0 03		bcs $99e8			bcs +
.99e5	4c 5b 9e	jmp $9e5b			jmp ed_error_1drop	; New line number is not legal, abort
.99e8					+
.99e8	20 fa b7	jsr $b7fa			jsr Zero		; ( addr-t u-t u+1 0 )
.99eb	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.99ee					_command_mode:
.99ee	20 fa b7	jsr $b7fa			jsr Zero		; parameter 1 is NOS ( addr-t u-t 0 )
.99f1	20 fa b7	jsr $b7fa			jsr Zero		; parameter 2 is TOS ( addr-t u-t 0 0 )
.99f4	a0 00		ldy #$00			ldy #0			; get char
.99f6	b1 04		lda ($04),y			lda (cib),y
.99f8	c9 2e		cmp #$2e			cmp #'.'
.99fa	d0 31		bne $9a2d			bne _prefix_dollar
.99fc	20 7a 9e	jsr $9e7a			jsr ed_have_text
.99ff	a5 20		lda $20				lda ed_cur
.9a01	95 26		sta $26,x			sta DStack+2,x
.9a03	a5 21		lda $21				lda ed_cur+1
.9a05	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a07	a9 80		lda #$80			lda #%10000000
.9a09	05 22		ora $22				ora ed_flags
.9a0b	85 22		sta $22				sta ed_flags
.9a0d	a5 06		lda $06				lda ciblen
.9a0f	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a11	d0 03		bne $9a16			bne +
.9a13	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.9a16					+
.9a16	a5 04		lda $04				lda cib+0
.9a18	a4 05		ldy $05				ldy cib+1
.9a1a	20 bd b7	jsr $b7bd			jsr PushYA
.9a1d	a5 06		lda $06				lda ciblen+0
.9a1f	a4 07		ldy $07				ldy ciblen+1
.9a21	20 bd b7	jsr $b7bd			jsr PushYA
.9a24	20 49 ca	jsr $ca49			jsr One_Minus		; ( addr-t u-t para1 0 addr u-1 )
.9a27	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr+1 u-1 )
.9a2a	4c ff 9a	jmp $9aff			jmp _check_for_para2
.9a2d					_prefix_dollar:
.9a2d	c9 24		cmp #$24			cmp #'$'
.9a2f	d0 1f		bne $9a50			bne _prefix_percent
.9a31	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a34	e8		inx				inx
.9a35	e8		inx				inx			; ( addr-t u-t 0 )
.9a36	20 a7 9e	jsr $9ea7			jsr ed_last_line	; ( addr-t u-t 0 para1 )
.9a39	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t para1 0 )
.9a3c	a9 80		lda #$80			lda #%10000000
.9a3e	05 22		ora $22				ora ed_flags
.9a40	85 22		sta $22				sta ed_flags
.9a42	a5 06		lda $06				lda ciblen
.9a44	c9 01		cmp #$01			cmp #1			; sets Z if A was 1
.9a46	d0 03		bne $9a4b			bne +
.9a48	4c ad 9a	jmp $9aad			jmp _line_number_only_from_external
.9a4b					+
.9a4b	a0 01		ldy #$01			ldy #1
.9a4d	4c 75 9b	jmp $9b75			jmp _check_command
.9a50					_prefix_percent:
.9a50	c9 25		cmp #$25			cmp #'%'
.9a52	f0 04		beq $9a58			beq _whole_text
.9a54	c9 2c		cmp #$2c			cmp #','
.9a56	d0 1b		bne $9a73			bne _prefix_semicolon
.9a58					_whole_text:
.9a58	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a5b	a9 01		lda #$01			lda #1
.9a5d	95 26		sta $26,x			sta DStack+2,x		; LSB of NOS is para 1
.9a5f	a9 00		lda #$00			lda #0
.9a61	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t para1 0 )
.9a63					_semicolon_entry:
.9a63	e8		inx				inx
.9a64	e8		inx				inx			; DROP ( addr-t u-t para1 )
.9a65	20 a7 9e	jsr $9ea7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9a68	a9 80		lda #$80			lda #%10000000
.9a6a	05 22		ora $22				ora ed_flags
.9a6c	85 22		sta $22				sta ed_flags
.9a6e	a0 01		ldy #$01			ldy #1
.9a70	4c 75 9b	jmp $9b75			jmp _check_command
.9a73					_prefix_semicolon:
.9a73	c9 3b		cmp #$3b			cmp #';'
.9a75	d0 0e		bne $9a85			bne _prefix_number
.9a77	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9a7a	a5 20		lda $20				lda ed_cur
.9a7c	95 26		sta $26,x			sta DStack+2,x
.9a7e	a5 21		lda $21				lda ed_cur+1
.9a80	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t cur 0 )
.9a82	4c 63 9a	jmp $9a63			jmp _semicolon_entry
.9a85					_prefix_number:
.9a85	20 fa b7	jsr $b7fa			jsr Zero
.9a88	20 fa b7	jsr $b7fa			jsr Zero		; ( addr-t u-t 0 0 0 0 )
.9a8b	a5 04		lda $04				lda cib+0
.9a8d	a4 05		ldy $05				ldy cib+1
.9a8f	20 bd b7	jsr $b7bd			jsr PushYA
.9a92	a5 06		lda $06				lda ciblen+0
.9a94	a4 07		ldy $07				ldy ciblen+1
.9a96	20 bd b7	jsr $b7bd			jsr PushYA		; ( addr-t u-t 0 0 0 0 cib ciblen )
.9a99	20 59 b0	jsr $b059			jsr To_Number		; ( addr-t u-t 0 0 ud addr2 u2 )
.9a9c	b5 24		lda $24,x			lda DStack+0,x
.9a9e	15 25		ora $25,x			ora DStack+1,x
.9aa0	d0 25		bne $9ac7			bne _have_unconverted_chars
.9aa2	20 4a c5	jsr $c54a			jsr Two_Drop		; ( addr-t u-t 0 0 ud )
.9aa5	20 21 c0	jsr $c021			jsr D_To_S		; ( addr-t u-t 0 0 u )
.9aa8	20 8c ce	jsr $ce8c			jsr Not_Rot		; ( addr-t u-t u 0 0 )
.9aab	e8		inx				inx
.9aac	e8		inx				inx			; ( addr-t u-t u 0 ) drop through
.9aad					_line_number_only_from_external:
.9aad	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t 0 u )
.9ab0	20 86 9e	jsr $9e86			jsr ed_is_valid_line
.9ab3	b0 03		bcs $9ab8			bcs +
.9ab5	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9ab8					+
.9ab8	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t u 0 )
.9abb	20 e6 9e	jsr $9ee6			jsr ed_para1_to_cur
.9abe	a9 80		lda #$80			lda #%10000000
.9ac0	05 22		ora $22				ora ed_flags
.9ac2	85 22		sta $22				sta ed_flags
.9ac4	4c 44 9d	jmp $9d44			jmp ed_cmd_p_from_external
.9ac7					_have_unconverted_chars:
.9ac7	a5 06		lda $06				lda ciblen+0
.9ac9	d5 24		cmp $24,x			cmp DStack+0,x
.9acb	d0 16		bne $9ae3			bne _no_command_yet
.9acd	a5 07		lda $07				lda ciblen+1
.9acf	d5 25		cmp $25,x			cmp DStack+1,x
.9ad1	d0 10		bne $9ae3			bne _no_command_yet
.9ad3	8a		txa				txa
.9ad4	18		clc				clc
.9ad5	69 08		adc #$08			adc #8
.9ad7	aa		tax				tax			; ( addr-t u-t 0 0 )
.9ad8	a9 7f		lda #$7f			lda #$ff-%10000000
.9ada	25 22		and $22				and ed_flags
.9adc	85 22		sta $22				sta ed_flags
.9ade	a0 00		ldy #$00			ldy #0
.9ae0	4c 75 9b	jmp $9b75			jmp _check_command
.9ae3					_no_command_yet:
.9ae3	20 f6 ce	jsr $cef6			jsr To_R		; >R ( ... 0 0 ud addr2 ) (R: u2)
.9ae6	20 8c ce	jsr $ce8c			jsr Not_Rot		; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.9ae9	20 21 c0	jsr $c021			jsr D_To_S		; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.9aec	b5 24		lda $24,x			lda DStack+0,x		; LSB
.9aee	95 2a		sta $2a,x			sta DStack+6,x
.9af0	b5 25		lda $25,x			lda DStack+1,x		; MSB
.9af2	95 2b		sta $2b,x			sta DStack+7,x		; ( ... para1 0 addr2 para1 ) (R: u2)
.9af4	e8		inx				inx
.9af5	e8		inx				inx			; ( addr-t u-t para1 0 addr2 ) (R: u2)
.9af6	20 14 cf	jsr $cf14			jsr R_From		; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.9af9	a9 80		lda #$80			lda #%10000000
.9afb	05 22		ora $22				ora ed_flags
.9afd	85 22		sta $22				sta ed_flags
.9aff					_check_for_para2:
.9aff	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b01	c9 2c		cmp #$2c			cmp #','
.9b03	f0 0c		beq $9b11			beq _got_comma
.9b05	38		sec				sec
.9b06	a5 06		lda $06				lda ciblen
.9b08	f5 24		sbc $24,x			sbc DStack+0,x
.9b0a	a8		tay				tay
.9b0b	20 4a c5	jsr $c54a			jsr Two_Drop		; Remove the leftover stuff from >NUMBER
.9b0e	4c 75 9b	jmp $9b75			jmp _check_command
.9b11					_got_comma:
.9b11	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; ( addr-t u-t para1 0 addr2+1 u2 )
.9b14	20 49 ca	jsr $ca49			jsr One_Minus		; ( addr-t u-t para1 0 addr2+1 u2-1 )
.9b17	a1 26		lda ($26,x)			lda (DStack+2,x)
.9b19	c9 24		cmp #$24			cmp #'$'
.9b1b	d0 16		bne $9b33			bne _para2_not_dollar
.9b1d	38		sec				sec
.9b1e	a5 06		lda $06				lda ciblen
.9b20	f5 26		sbc $26,x			sbc DStack+2,x
.9b22	a8		tay				tay
.9b23	c8		iny				iny
.9b24	98		tya				tya
.9b25	48		pha				pha
.9b26	8a		txa				txa
.9b27	18		clc				clc
.9b28	69 06		adc #$06			adc #6
.9b2a	aa		tax				tax			; ( addr-t u-t para1 )
.9b2b	20 a7 9e	jsr $9ea7			jsr ed_last_line	  ; ( addr-t u-t para1 para2 )
.9b2e	68		pla				pla
.9b2f	a8		tay				tay
.9b30	4c 75 9b	jmp $9b75			jmp _check_command
.9b33					_para2_not_dollar:
.9b33	20 f6 ce	jsr $cef6			jsr To_R		; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.9b36	20 fa b7	jsr $b7fa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.9b39	20 fa b7	jsr $b7fa			jsr Zero		; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.9b3c	20 67 ce	jsr $ce67			jsr Rot		; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.9b3f	20 14 cf	jsr $cf14			jsr R_From		; R> ( ... para1 0 0 0 addr2+1 u2-1)
.9b42	20 6c cf	jsr $cf6c			jsr Dup		; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.9b45	20 f6 ce	jsr $cef6			jsr To_R		; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.9b48	20 59 b0	jsr $b059			jsr To_Number	; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.9b4b	20 6c cf	jsr $cf6c			jsr Dup		; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.9b4e	20 14 cf	jsr $cf14			jsr R_From		; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.9b51	20 52 c8	jsr $c852			jsr Equal		; = ( ... para1 0 ud addr3 u3 f )
.9b54	b5 24		lda $24,x			lda DStack+0,x
.9b56	15 25		ora $25,x			ora DStack+1,x
.9b58	f0 08		beq $9b62			beq _second_number
.9b5a	8a		txa				txa
.9b5b	18		clc				clc
.9b5c	69 0c		adc #$0c			adc #12
.9b5e	aa		tax				tax			; back to ( addr-t u-t )
.9b5f	4c 5d 9e	jmp $9e5d			jmp ed_error
.9b62					_second_number:
.9b62	e8		inx				inx
.9b63	e8		inx				inx			; ( addr-t u-t para1 0 ud addr3 u3 )
.9b64	38		sec				sec
.9b65	a5 06		lda $06				lda ciblen
.9b67	f5 24		sbc $24,x			sbc DStack+0,x
.9b69	48		pha				pha
.9b6a	20 4a c5	jsr $c54a			jsr Two_drop		; 2DROP ( addr-t u-t para1 0 ud )
.9b6d	20 21 c0	jsr $c021			jsr D_To_S		; D>S  ( addr-t u-t para1 0 para2 )
.9b70	20 a4 c9	jsr $c9a4			jsr Nip			; NIP ( addr-t u-t para1 para2 )
.9b73	68		pla				pla
.9b74	a8		tay				tay
.9b75					_check_command:
.9b75	24 22		bit $22				bit ed_flags
.9b77	30 08		bmi $9b81			bmi _check_command_have_arg
.9b79	a5 20		lda $20				lda ed_cur+0
.9b7b	95 26		sta $26,x			sta DStack+2,x
.9b7d	a5 21		lda $21				lda ed_cur+1
.9b7f	95 27		sta $27,x			sta DStack+3,x
.9b81					_check_command_have_arg:
.9b81	b1 04		lda ($04),y			lda (cib),y		; get mystery char from input
.9b83	85 14		sta $14				sta tmp1+0
.9b85	85 15		sta $15				sta tmp1+1		; We need X for awhile, so it has to
.9b87	a2 ff		ldx #$ff			ldx #$ff		; for each char
.9b89	e8		inx		_cmd_loop:	inx			;   next char
.9b8a	bd 0a 9f	lda $9f0a,x			lda ed_cmd_list,x
.9b8d	f0 13		beq $9ba2			beq _illegal_command	;   end of list?
.9b8f	c5 14		cmp $14				cmp tmp1+0
.9b91	d0 f6		bne $9b89			bne _cmd_loop		;   not found?
.9b93	8a		txa				txa
.9b94	0a		asl a				asl
.9b95	aa		tax				tax			; X * 2 for table
.9b96	bd 16 9f	lda $9f16,x			lda ed_cmd_table+1,x
.9b99	48		pha				pha
.9b9a	bd 15 9f	lda $9f15,x			lda ed_Cmd_table+0,x
.9b9d	48		pha				pha
.9b9e	a6 15		ldx $15				ldx tmp1+1		; restore X
.9ba0	08		php				php
.9ba1	40		rti				rti			; jump to command routine
.9ba2					_illegal_command:
.9ba2	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9ba5					ed_next_command:
.9ba5	20 4a c5	jsr $c54a			jsr Two_Drop		; ( addr-t u-t ) Fall through
.9ba8					_next_command_empty:
.9ba8	4c c3 99	jmp $99c3			jmp ed_input_loop
.9bab					ed_all_done:
.9bab	a9 00		lda #$00			lda #0
.9bad	85 06		sta $06				sta ciblen
.9baf	85 07		sta $07				sta ciblen+1
.9bb1	20 4a c5	jsr $c54a			jsr Two_drop			; ( addr-t u-t )
.9bb4	a5 23		lda $23				lda editor3+1
.9bb6	8d 00 03	sta $0300			sta base
.9bb9	60		rts				rts
.9bba					ed_cmd_a:
.9bba	e8		inx				inx
.9bbb	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9bbc					ed_entry_cmd_i:
.9bbc					ed_cmd_a_have_para:
.9bbc	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	  ;  ( addr-t u-t addr1 )
.9bbf	20 75 ab	jsr $ab75			jsr CR
.9bc2					_next_string_loop:
.9bc2	20 6b 9e	jsr $9e6b			jsr ed_get_input
.9bc5	a0 00		ldy #$00			ldy #0
.9bc7	b1 04		lda ($04),y			lda (cib),y
.9bc9	c9 2e		cmp #$2e			cmp #'.'
.9bcb	d0 18		bne $9be5			bne _add_line
.9bcd	a4 06		ldy $06				ldy ciblen
.9bcf	c0 01		cpy #$01			cpy #1
.9bd1	d0 12		bne $9be5			bne _add_line
.9bd3	a4 07		ldy $07				ldy ciblen+1
.9bd5	d0 0e		bne $9be5			bne _add_line
.9bd7	e8		inx				inx
.9bd8	e8		inx				inx
.9bd9	a9 40		lda #$40			lda #%01000000
.9bdb	05 22		ora $22				ora ed_flags
.9bdd	85 22		sta $22				sta ed_flags
.9bdf	20 75 ab	jsr $ab75			jsr CR
.9be2	4c c3 99	jmp $99c3			jmp ed_input_loop
.9be5					_add_line:
.9be5	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u-t addr1 addr1 )
.9be8	20 3c ca	jsr $ca3c			jsr Here		; ( addr-t u-t addr1 addr1 here )
.9beb	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t addr1 here addr1 )
.9bee	20 ae ce	jsr $ceae			jsr Fetch		; ( addr-t u-t addr1 here addr2 )
.9bf1	20 11 cd	jsr $cd11			jsr Comma		; ( addr-t u-t addr1 here )
.9bf4	20 d8 cc	jsr $ccd8			jsr Tuck		; TUCK ( addr-t u-t here addr1 here )
.9bf7	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t here here addr1 )
.9bfa	20 c7 ce	jsr $cec7			jsr Store		; ( addr-t u-t here )
.9bfd	20 3c ca	jsr $ca3c			jsr Here		; HERE ( addr-t u-t here here2)
.9c00	a9 04		lda #$04			lda #4
.9c02	20 ec b7	jsr $b7ec			jsr PushZA
.9c05	20 b6 c0	jsr $c0b6			jsr Allot
.9c08	e6 20		inc $20				inc ed_cur
.9c0a	d0 02		bne $9c0e			bne +
.9c0c	e6 21		inc $21				inc ed_cur+1
.9c0e					+
.9c0e	20 3c ca	jsr $ca3c			jsr Here	; ( addr-t u-t here here2 here3 )
.9c11	a5 04		lda $04				lda cib+0
.9c13	a4 05		ldy $05				ldy cib+1
.9c15	20 bd b7	jsr $b7bd			jsr PushYA	; ( addr-t u-t here here2 here3 cib )
.9c18	20 45 cf	jsr $cf45			jsr Over	; ( addr-t u-t here here2 here3 cib here3 )
.9c1b	a5 06		lda $06				lda ciblen+0
.9c1d	a4 07		ldy $07				ldy ciblen+1
.9c1f	20 bd b7	jsr $b7bd			jsr PushYA	; ( addr-t u-t here here2 here3 cib here3 ciblen )
.9c22	20 89 ad	jsr $ad89			jsr Move	; ( addr-t u-t here here2 here3 )
.9c25	18		clc				clc
.9c26	a5 00		lda $00				lda cp
.9c28	65 06		adc $06				adc ciblen
.9c2a	85 00		sta $00				sta cp
.9c2c	90 06		bcc $9c34			bcc +
.9c2e	a5 01		lda $01				lda cp+1
.9c30	65 07		adc $07				adc ciblen+1
.9c32	85 01		sta $01				sta cp+1
.9c34					+
.9c34	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t here here2 here3 here2 )
.9c37	20 c7 ce	jsr $cec7			jsr Store		; ( addr-t u-t here here2 )
.9c3a	20 1e ca	jsr $ca1e			jsr Cell_Plus_NoUf	; ( addr-t u-t here here2+2 )
.9c3d	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u-t here here2+2 here2+2 )
.9c40	a5 06		lda $06				lda ciblen
.9c42	95 26		sta $26,x			sta DStack+2,x
.9c44	a5 07		lda $07				lda ciblen+1
.9c46	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t here ciblen here2+2 )
.9c48	20 c7 ce	jsr $cec7			jsr Store		; ( addr-t u-t here )
.9c4b	20 75 ab	jsr $ab75			jsr CR			; Add a line feed for visuals
.9c4e	4c c2 9b	jmp $9bc2			jmp _next_string_loop
.9c51					ed_cmd_d:
.9c51	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9c54	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9c57	b5 24		lda $24,x			lda DStack+0,x
.9c59	15 25		ora $25,x			ora DStack+1,x
.9c5b	d0 09		bne $9c66			bne +
.9c5d	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t para1 0 para1 )
.9c60	20 9b 9c	jsr $9c9b			jsr _cmd_d_common	; ( addr-t u-t para1 0 )
.9c63	4c 8f 9c	jmp $9c8f			jmp _cmd_d_done
.9c66					+
.9c66	20 86 9e	jsr $9e86			jsr ed_is_valid_line	  ; result is in C flag
.9c69	b0 03		bcs $9c6e			bcs _cmd_d_loop
.9c6b	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9c6e					_cmd_d_loop:
.9c6e	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9c70	d5 26		cmp $26,x			cmp DStack+2,x
.9c72	b5 25		lda $25,x			lda DStack+1,x
.9c74	f5 27		sbc $27,x			sbc DStack+3,x
.9c76	90 0c		bcc $9c84			bcc _cmd_d_done_with_flag
.9c78	20 6c cf	jsr $cf6c			jsr Dup		; DUP ( addr-t u-t para1 para2 para2 )
.9c7b	20 9b 9c	jsr $9c9b			jsr _cmd_d_common	; ( addr-t u-t para1 para2 )
.9c7e	20 49 ca	jsr $ca49			jsr One_minus	; 1- ( addr-t u-t para1 para2-1 )
.9c81	4c 6e 9c	jmp $9c6e			jmp _cmd_d_loop
.9c84					_cmd_d_done_with_flag:
.9c84	20 55 ca	jsr $ca55			jsr NOS_One_Minus
.9c87	b5 26		lda $26,x			lda DStack+2,x
.9c89	85 20		sta $20				sta ed_cur
.9c8b	b5 27		lda $27,x			lda DStack+3,x
.9c8d	85 21		sta $21				sta ed_cur+1		; drop through to _cmd_d_done
.9c8f					_cmd_d_done:
.9c8f	a9 40		lda #$40			lda #%01000000
.9c91	05 22		ora $22				ora ed_flags
.9c93	85 22		sta $22				sta ed_flags
.9c95	20 75 ab	jsr $ab75			jsr CR
.9c98	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9c9b					_cmd_d_common:
.9c9b	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u-t u u )
.9c9e	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	; ( addr-t u-t u addr )
.9ca1	20 ae ce	jsr $ceae			jsr Fetch		; ( addr-t u-t u addr1 )
.9ca4	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t addr1 u )
.9ca7	20 49 ca	jsr $ca49			jsr One_minus		; ( addr-t u-t addr1 u-1 )
.9caa	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	; ( addr-t u-t addr1 addr-1 )
.9cad	4c c7 ce	jmp $cec7			jmp Store		; ( addr-t u-t )
.9cb0					ed_cmd_equ:
.9cb0	a5 1e		lda $1e				lda ed_head
.9cb2	05 1f		ora $1f				ora ed_head+1
.9cb4	d0 06		bne $9cbc			bne _cmd_equ_have_text
.9cb6	20 fa b7	jsr $b7fa			jsr Zero		; ( addr-t u-t para1 para2 0 )
.9cb9	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done
.9cbc					_cmd_equ_have_text:
.9cbc	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9cbf	24 22		bit $22				bit ed_flags
.9cc1	30 0a		bmi $9ccd			bmi _cmd_equ_have_para
.9cc3	a5 20		lda $20				lda ed_cur+0		; ( addr-t u-t para1 para2 ? )
.9cc5	a4 21		ldy $21				ldy ed_cur+1
.9cc7	20 bd b7	jsr $b7bd			jsr PushYA
.9cca	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done	; ( addr-t u-t para1 para2 cur )
.9ccd					_cmd_equ_have_para:
.9ccd	b5 24		lda $24,x			lda DStack+0,x
.9ccf	15 25		ora $25,x			ora DStack+1,x
.9cd1	d0 06		bne $9cd9			bne _cmd_equ_two_paras
.9cd3	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t para1 para2 para1)
.9cd6	4c dc 9c	jmp $9cdc			jmp _cmd_equ_done
.9cd9					_cmd_equ_two_paras:
.9cd9	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u-t para1 para2 para2) drop through
.9cdc					_cmd_equ_done:
.9cdc	20 75 ab	jsr $ab75			jsr CR			; number goes on new line
.9cdf	20 14 cc	jsr $cc14			jsr U_Dot		; ( addr-t u-t para1 para2 )
.9ce2	20 75 ab	jsr $ab75			jsr CR
.9ce5	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9ce8					ed_cmd_f:
.9ce8	24 22		bit $22				bit ed_flags
.9cea	30 18		bmi $9d04			bmi _cmd_f_have_para
.9cec	20 75 ab	jsr $ab75			jsr CR
.9cef	20 f6 ce	jsr $cef6			jsr To_R		; ( addr-t u-t 0 ) ( R: 0 )
.9cf2	20 67 ce	jsr $ce67			jsr Rot			; ( u-t 0 addr-t ) ( R: 0 )
.9cf5	20 6c cf	jsr $cf6c			jsr Dup			; ( u-t 0 addr-t addr-t ) ( R: 0 )
.9cf8	20 14 cc	jsr $cc14			jsr U_Dot		; ( u-t 0 addr-t ) ( R: 0 )
.9cfb	20 8c ce	jsr $ce8c			jsr Not_Rot		; ( addr-t u-t 0 ) ( R: 0 )
.9cfe	20 14 cf	jsr $cf14			jsr R_From		; ( addr-t u-t 0 0 )
.9d01	4c 15 9d	jmp $9d15			jmp _cmd_f_done
.9d04					_cmd_f_have_para:
.9d04	20 45 cf	jsr $cf45			jsr Over
.9d07	20 75 ab	jsr $ab75			jsr CR
.9d0a	20 14 cc	jsr $cc14			jsr U_Dot
.9d0d	b5 26		lda $26,x			lda DStack+2,x
.9d0f	95 2a		sta $2a,x			sta DStack+6,x
.9d11	b5 27		lda $27,x			lda DStack+3,x
.9d13	95 2b		sta $2b,x			sta DStack+7,x		; fall through to _cmd_f_done
.9d15					_cmd_f_done:
.9d15	20 75 ab	jsr $ab75			jsr CR
.9d18	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9d1b					ed_cmd_i:
.9d1b	e8		inx				inx
.9d1c	e8		inx				inx			;  DROP ( addr-t u-t para1 )
.9d1d	24 22		bit $22				bit ed_flags
.9d1f	30 08		bmi $9d29			bmi _cmd_i_have_para
.9d21	a5 20		lda $20				lda ed_cur
.9d23	95 24		sta $24,x			sta DStack+0,x
.9d25	a5 21		lda $21				lda ed_cur+1
.9d27	95 25		sta $25,x			sta DStack+1,x		;  ( addr-t u-t cur ) drop through
.9d29					_cmd_i_have_para:
.9d29	b5 24		lda $24,x			lda DStack+0,x
.9d2b	15 25		ora $25,x			ora DStack+1,x
.9d2d	f0 09		beq $9d38			beq _cmd_i_done
.9d2f	20 49 ca	jsr $ca49			jsr One_minus		; ( addr-t u-t para1-1 )
.9d32	20 fa b7	jsr $b7fa			jsr Zero		; ( addr-t u-t para1-1 0 )
.9d35	20 8a c9	jsr $c98a			jsr Max			; ( addr-t u-t para1-1 | 0 )
.9d38					_cmd_i_done:
.9d38	4c bc 9b	jmp $9bbc			jmp ed_entry_cmd_i
.9d3b					ed_cmd_n:
.9d3b	a9 01		lda #$01			lda #%00000001
.9d3d	05 22		ora $22				ora ed_flags
.9d3f	85 22		sta $22				sta ed_flags
.9d41	4c 4a 9d	jmp $9d4a			jmp ed_cmd_p_entry_for_cmd_n
.9d44					ed_cmd_p:
.9d44					ed_cmd_p_from_external:
.9d44	a9 fe		lda #$fe			lda #$ff-%00000001
.9d46	25 22		and $22				and ed_flags
.9d48	85 22		sta $22				sta ed_flags
.9d4a					ed_cmd_p_entry_for_cmd_n:
.9d4a	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9d4d	20 bd 9e	jsr $9ebd			jsr ed_no_line_zero
.9d50	20 75 ab	jsr $ab75			jsr CR
.9d53	b5 24		lda $24,x			lda DStack+0,x
.9d55	15 25		ora $25,x			ora DStack+1,x
.9d57	d0 11		bne $9d6a			bne _cmd_p_loop
.9d59	b5 26		lda $26,x			lda DStack+2,x
.9d5b	85 20		sta $20				sta ed_cur
.9d5d	b5 27		lda $27,x			lda DStack+3,x
.9d5f	85 21		sta $21				sta ed_cur+1
.9d61	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d64	20 8b 9d	jsr $9d8b			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d67	4c 88 9d	jmp $9d88			jmp _cmd_p_all_done
.9d6a					_cmd_p_loop:
.9d6a	b5 24		lda $24,x			lda DStack+0,x		; para1 > para2 ?
.9d6c	d5 26		cmp $26,x			cmp DStack+2,x
.9d6e	b5 25		lda $25,x			lda DStack+1,x
.9d70	f5 27		sbc $27,x			sbc DStack+3,x
.9d72	90 0c		bcc $9d80			bcc _cmd_p_done
.9d74	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t para1 para2 para1 )
.9d77	20 8b 9d	jsr $9d8b			jsr _cmd_p_common	; ( addr-t u-t para1 para2 )
.9d7a	20 78 ca	jsr $ca78			jsr NOS_One_Plus
.9d7d	4c 6a 9d	jmp $9d6a			jmp _cmd_p_loop
.9d80					_cmd_p_done:
.9d80	b5 24		lda $24,x			lda DStack+0,x
.9d82	85 20		sta $20				sta ed_cur
.9d84	b5 25		lda $25,x			lda DStack+1,x
.9d86	85 21		sta $21				sta ed_cur+1
.9d88					_cmd_p_all_done:
.9d88	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9d8b					_cmd_p_common:
.9d8b	a5 22		lda $22				lda ed_flags
.9d8d	4a		lsr a				lsr			; bit 0 now in carry
.9d8e	90 0b		bcc $9d9b			bcc _cmd_p_common_no_num
.9d90	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u-t para1 para1 )
.9d93	20 14 cc	jsr $cc14			jsr U_Dot		; ( addr-t u-t para1 )
.9d96	a9 09		lda #$09			lda #AscHT
.9d98	20 d6 cd	jsr $cdd6			jsr Emit_A
.9d9b					_cmd_p_common_no_num:
.9d9b	20 cb 9e	jsr $9ecb			jsr ed_num_to_addr	  ; ( addr-t u-t addr )
.9d9e	4c ef 9e	jmp $9eef			jmp ed_print_addr
.9da1					ed_cmd_q:
.9da1	24 22		bit $22				bit ed_flags		; bit 6 is change flag
.9da3	50 03		bvc $9da8			bvc +
.9da5	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9da8					+
.9da8	4c ab 9b	jmp $9bab			jmp ed_all_done		   ; can't fall thru because of PLX
.9dab					ed_cmd_qq:
.9dab	4c ab 9b	jmp $9bab			jmp ed_all_done
.9dae					ed_cmd_w:
.9dae	20 7a 9e	jsr $9e7a			jsr ed_have_text
.9db1	24 22		bit $22				bit ed_flags		; parameter given?
.9db3	30 12		bmi $9dc7			bmi _cmd_w_have_para
.9db5	b5 2b		lda $2b,x			lda DStack+7,x		; $0000 thru $00ff ?
.9db7	d0 03		bne $9dbc			bne +
.9db9	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9dbc					+
.9dbc	b5 2a		lda $2a,x			lda DStack+6,x
.9dbe	95 26		sta $26,x			sta DStack+2,x
.9dc0	b5 2b		lda $2b,x			lda DStack+7,x
.9dc2	95 27		sta $27,x			sta DStack+3,x		; ( addr-t u-t addr-t ? )
.9dc4	4c cf 9d	jmp $9dcf			jmp _cmd_w_para_ready
.9dc7					_cmd_w_have_para:
.9dc7	b5 26		lda $26,x			lda DStack+2,x
.9dc9	95 2a		sta $2a,x			sta DStack+6,x
.9dcb	b5 27		lda $27,x			lda DStack+3,x
.9dcd	95 2b		sta $2b,x			sta DStack+7,x		; drop through to _cmd_w_para_ready
.9dcf					_cmd_w_para_ready:
.9dcf	a9 1e		lda #$1e			lda #<ed_head
.9dd1	95 24		sta $24,x			sta DStack+0,x
.9dd3	a9 00		lda #$00			lda #>ed_head
.9dd5	95 25		sta $25,x			sta DStack+1,x		; ( addr-t u-t addr-t addr-h )
.9dd7	20 45 cf	jsr $cf45			jsr Over		; ( addr-t u-t addr-t addr-h addr-t )
.9dda	20 f6 ce	jsr $cef6			jsr To_R		; ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.9ddd					_cmd_w_loop:
.9ddd	20 ae ce	jsr $ceae			jsr Fetch		; ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.9de0	b5 24		lda $24,x			lda DStack+0,x
.9de2	15 25		ora $25,x			ora DStack+1,x
.9de4	f0 4d		beq $9e33			beq _cmd_w_eol
.9de6	20 b8 cc	jsr $ccb8			jsr Two_dup		; ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.9de9	20 7a c6	jsr $c67a			jsr Two_to_r		; ( addr-t addr-1 ) (R: ... )
.9dec	20 1e ca	jsr $ca1e			jsr Cell_Plus_NoUf	; ( addr-t addr1+2 ) (R: ... )
.9def	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t addr1+2 addr1+2 ) ( R: ... )
.9df2	20 ae ce	jsr $ceae			jsr Fetch		; ( addr-t addr1+2 addr-s ) ( R: ... )
.9df5	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t addr-s addr1+2 ) ( R: ... )
.9df8	20 1e ca	jsr $ca1e			jsr Cell_Plus_NoUf	; ( addr-t addr-s addr1+2 ) (R: ... )
.9dfb	20 ae ce	jsr $ceae			jsr Fetch		; ( addr-t addr-s u-s ) ( R: ... )
.9dfe	20 8c ce	jsr $ce8c			jsr Not_Rot		; ( u-s addr-t addr-s ) ( R: ... )
.9e01	20 89 cf	jsr $cf89			jsr Swap		; ( u-s addr-s addr-t ) ( R: ... )
.9e04	20 67 ce	jsr $ce67			jsr Rot			; (addr-s addr-t u-s ) ( R: ... )
.9e07	20 6c cf	jsr $cf6c			jsr Dup			; (addr-s addr-t u-s u-s ) ( R: ... )
.9e0a	20 f6 ce	jsr $cef6			jsr To_R		; (addr-s addr-t u-s ) ( R: ... u-s )
.9e0d	20 89 ad	jsr $ad89			jsr Move		; ( )( R: addr-t addr-1 addr-t )
.9e10	20 14 cf	jsr $cf14			jsr R_From		; ( u-s )  ( R: addr-t addr-h addr-t )
.9e13	20 56 c6	jsr $c656			jsr Two_r_from		; ( u-s addr-t addr-h ) ( R: addr-t )
.9e16	20 8c ce	jsr $ce8c			jsr Not_Rot		; ( addr-h u-s addr-t ) ( R: addr-t )
.9e19	20 b3 cb	jsr $cbb3			jsr Plus		; ( addr-h addr-t1 ) ( R: addr-t )
.9e1c	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.9e1f	a9 0a		lda #$0a			lda #AscLF
.9e21	20 ec b7	jsr $b7ec			jsr PushZA		; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.9e24	20 89 cf	jsr $cf89			jsr Swap		; ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.9e27	20 c7 ce	jsr $cec7			jsr Store		; ( addr-h addr-t1 ) ( R: addr-t )
.9e2a	20 6e ca	jsr $ca6e			jsr One_plus		; ( addr-h addr-t1+1 ) ( R: addr-t )
.9e2d	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t1+1 addr-h ) ( R: addr-t )
.9e30	4c dd 9d	jmp $9ddd			jmp _cmd_w_loop
.9e33					_cmd_w_eol:
.9e33	20 89 cf	jsr $cf89			jsr Swap		; ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.9e36	20 14 cf	jsr $cf14			jsr R_From		; ( addr-t u-t addr-n addr-tn addr-t )
.9e39	20 cb cb	jsr $cbcb			jsr Minus		; ( addr-t u-t addr-n u )
.9e3c	b5 24		lda $24,x			lda DStack+0,x
.9e3e	95 28		sta $28,x			sta DStack+4,x
.9e40	b5 25		lda $25,x			lda DStack+1,x
.9e42	95 29		sta $29,x			sta DStack+5,x		; ( addr-t u addr-n u )
.9e44	20 75 ab	jsr $ab75			jsr CR
.9e47	20 6c cf	jsr $cf6c			jsr Dup			; ( addr-t u addr-n u u )
.9e4a	20 14 cc	jsr $cc14			jsr U_Dot		; ( addr-t u addr-n u )
.9e4d	20 75 ab	jsr $ab75			jsr CR
.9e50	a9 bf		lda #$bf			lda #$ff-%01000000
.9e52	25 22		and $22				and ed_flags
.9e54	85 22		sta $22				sta ed_flags
.9e56	4c a5 9b	jmp $9ba5			jmp ed_next_command
.9e59					ed_error_2drop:
.9e59	e8		inx				inx			; Drop para2
.9e5a	e8		inx				inx
.9e5b					ed_error_1drop:
.9e5b	e8		inx				inx			; Drop para1
.9e5c	e8		inx				inx
.9e5d					ed_error:
.9e5d	20 75 ab	jsr $ab75			jsr CR
.9e60	a9 3f		lda #$3f			lda #'?'
.9e62	20 d6 cd	jsr $cdd6			jsr Emit_A
.9e65	20 75 ab	jsr $ab75			jsr CR
.9e68	4c c3 99	jmp $99c3			jmp ed_input_loop
.9e6b					ed_get_input:
.9e6b	20 7a c2	jsr $c27a			jsr Refill		;  ( addr-t u-t f )
.9e6e	b5 24		lda $24,x			lda DStack+0,x
.9e70	d0 05		bne $9e77			bne +
.9e72	68		pla				pla
.9e73	68		pla				pla
.9e74	4c 5b 9e	jmp $9e5b			jmp ed_error_1drop
.9e77					+
.9e77	e8		inx				inx
.9e78	e8		inx				inx
.9e79	60		rts				rts
.9e7a					ed_have_text:
.9e7a	a5 1e		lda $1e				lda ed_head
.9e7c	05 1f		ora $1f				ora ed_head+1
.9e7e	d0 05		bne $9e85			bne +
.9e80	68		pla				pla
.9e81	68		pla				pla
.9e82	4c 5d 9e	jmp $9e5d			jmp ed_error
.9e85					+
.9e85	60		rts				rts
.9e86					ed_is_valid_line:
.9e86	38		sec				sec				; default is legal line number
.9e87	b5 24		lda $24,x			lda DStack+0,x
.9e89	15 25		ora $25,x			ora DStack+1,x
.9e8b	f0 18		beq $9ea5			beq _nope_zero	; ( n )
.9e8d	20 6c cf	jsr $cf6c			jsr Dup				; ( n n )
.9e90	20 a7 9e	jsr $9ea7			jsr ed_last_line		; ( n n last )
.9e93	20 89 cf	jsr $cf89			jsr Swap			; ( n last n )
.9e96	20 86 c8	jsr $c886			jsr Less_Than			; ( n f )
.9e99	b5 24		lda $24,x			lda DStack+0,x			; 0 flag is good
.9e9b	15 25		ora $25,x			ora DStack+1,x
.9e9d	d0 04		bne $9ea3			bne _too_small
.9e9f	e8		inx				inx
.9ea0	e8		inx				inx			; DROP flag ( n )
.9ea1	38		sec				sec			; signal valid
.9ea2	60		rts				rts
.9ea3					_too_small:
.9ea3	e8		inx				inx
.9ea4	e8		inx				inx
.9ea5					_nope_zero:
.9ea5	18		clc				clc			; signal not valid
.9ea6	60		rts				rts
.9ea7					ed_last_line:
.9ea7	20 fa b7	jsr $b7fa			jsr Zero		; Set counter to zero
.9eaa	a9 1e		lda #$1e			lda #ed_head
.9eac	20 ec b7	jsr $b7ec			jsr PushZA		; ( count addr )
.9eaf					_loop:
.9eaf	20 ae ce	jsr $ceae			jsr Fetch		; ( count addr|0 )
.9eb2	b5 25		lda $25,x			lda DStack+1,x		; at end-of-list?
.9eb4	f0 06		beq $9ebc			beq _done
.9eb6	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; Increase counter
.9eb9	4c af 9e	jmp $9eaf			jmp _loop		; continue
.9ebc					_done:
.9ebc	60		rts				rts
.9ebd					ed_no_line_zero:
.9ebd	b5 26		lda $26,x			lda DStack+2,x
.9ebf	15 27		ora $27,x			ora DStack+3,x
.9ec1	d0 07		bne $9eca			bne _done
.9ec3	24 22		bit $22				bit ed_flags
.9ec5	10 03		bpl $9eca			bpl _done
.9ec7	4c 59 9e	jmp $9e59			jmp ed_error_2drop
.9eca					_done:
.9eca	60		rts				rts
.9ecb					ed_num_to_addr:
.9ecb	a9 1e		lda #$1e			lda #ed_head
.9ecd	20 ec b7	jsr $b7ec			jsr PushZA		; ( u addr-h )
.9ed0	4c dd 9e	jmp $9edd			jmp _test
.9ed3					_loop:
.9ed3	20 ae ce	jsr $ceae			jsr Fetch		; @ ( u addr1 )
.9ed6	b5 25		lda $25,x			lda DStack+1,x		; at end of list?
.9ed8	f0 09		beq $9ee3			beq _finished
.9eda	20 55 ca	jsr $ca55			jsr NOS_One_Minus	; decrement the line count
.9edd	b5 26		lda $26,x	_test:		lda DStack+2,x		; is the nth element we're looking for?
.9edf	15 27		ora $27,x			ora DStack+3,x
.9ee1	d0 f0		bne $9ed3			bne _loop
.9ee3					_finished:
.9ee3	4c a4 c9	jmp $c9a4			jmp Nip			; ( addr )
.9ee6					ed_para1_to_cur:
.9ee6	b5 26		lda $26,x			lda DStack+2,x
.9ee8	85 20		sta $20				sta ed_cur
.9eea	b5 27		lda $27,x			lda DStack+3,x
.9eec	85 21		sta $21				sta ed_cur+1
.9eee	60		rts				rts
.9eef					ed_print_addr:
.9eef	20 1b ca	jsr $ca1b			jsr Cell_Plus		; ( addr+2 )
.9ef2	20 6c cf	jsr $cf6c			jsr Dup			; ( addr+2 addr+2 )
.9ef5	20 1b ca	jsr $ca1b			jsr Cell_Plus		; ( addr+2 addr+4 )
.9ef8	20 ae ce	jsr $ceae			jsr Fetch		; ( addr+2 u-s )
.9efb	20 89 cf	jsr $cf89			jsr Swap		; ( u-s addr+2 )
.9efe	20 ae ce	jsr $ceae			jsr Fetch		; ( u-s addr-s )
.9f01	20 89 cf	jsr $cf89			jsr Swap		; ( addr-s u-s )
.9f04	20 ee cd	jsr $cdee			jsr Type
.9f07	4c 75 ab	jmp $ab75			jmp CR
>9f0a	61 66 69 64 70 6e 3d 77		ed_cmd_list:	.text "afidpn=wqQ", 0
>9f12	71 51 00
.9f15					ed_cmd_table:
>9f15	ba 9b e8 9c 1b 9d 51 9c				.word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>9f1d	44 9d 3b 9d
>9f21	b0 9c ae 9d a1 9d ab 9d				.word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.9f29					ed6502_end:
>9f29	53 65 65			L1:	.text "See"	;  name of word as a string, ending at wh_NameLastChar
=40620					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9f2c	a3					.byte (("See"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=1421					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>9f2d	11					.byte WordFlags	;wh_Flags
>9f2e	03					.byte 3	;wh_CodeLength
>9f2f	1f 99					  .word WordListLink
=$9f31					XtPtr1 ::= *
=40620					WordListLink ::= Nt0 ; remember the nt of this word for later
.9f31					See:
.9f31	20 46 bc	jsr $bc46			jsr Tick_Nt		; ( nt )
.9f34	20 75 ab	jsr $ab75			jsr CR
.9f37	ad 00 03	lda $0300			lda base		; Save the current number base
.9f3a	48		pha				pha
.9f3b	a9 42		lda #$42			lda #<str_see_nt	; print nt
.9f3d	a0 da		ldy #$da			ldy #>str_see_nt
.9f3f	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.9f42	20 6c cf	jsr $cf6c			jsr Dup			; ( nt nt )
.9f45	20 15 a9	jsr $a915			jsr Dot_Hex
.9f48	20 e2 cd	jsr $cde2			jsr Space		; ( nt )
.9f4b	20 6c cf	jsr $cf6c			jsr Dup			; ( nt nt )
.9f4e	20 b1 bd	jsr $bdb1			jsr Name_To_Int		; ( nt xt )
.9f51	a9 48		lda #$48			lda #<str_see_xt	; print xt
.9f53	a0 da		ldy #$da			ldy #>str_see_xt
.9f55	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.9f58	20 6c cf	jsr $cf6c			jsr Dup			; ( nt xt xt )
.9f5b	20 15 a9	jsr $a915			jsr Dot_Hex
.9f5e	20 75 ab	jsr $ab75			jsr CR			; ( nt xt )
.9f61	a9 3b		lda #$3b			lda #<str_see_flags
.9f63	a0 da		ldy #$da			ldy #>str_see_flags
.9f65	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.9f68	20 45 cf	jsr $cf45			jsr Over		; ( nt xt nt )
.9f6b	a9 81		lda #$81			lda #Wh_Flags
.9f6d	20 20 ca	jsr $ca20			jsr Plus_A		; ( nt xt ^flags )
.9f70	a1 24		lda ($24,x)			lda (DStack+0,x)	; ( nt xt ^flags )
.9f72	95 24		sta $24,x			sta DStack+0,x		; ( nt xt flags )
.9f74	a0 0e		ldy #$0e			ldy #2*7		; for bit 7..0
.9f76	20 e2 cd	jsr $cde2	_flag_loop:	jsr Space
.9f79	b9 dd 9f	lda $9fdd,y			lda _FlagLabels+0,y	;   print label
.9f7c	20 d6 cd	jsr $cdd6			jsr Emit_A
.9f7f	b9 de 9f	lda $9fde,y			lda _FlagLabels+1,y
.9f82	20 d6 cd	jsr $cdd6			jsr Emit_A
.9f85	a9 3d		lda #$3d			lda #'='
.9f87	20 d6 cd	jsr $cdd6			jsr Emit_A
.9f8a	16 24		asl $24,x			asl DStack+0,x		;   c = flag, rotate the rest
.9f8c	a9 00		lda #$00			lda #0
.9f8e	69 30		adc #$30			adc #'0'
.9f90	20 d6 cd	jsr $cdd6			jsr Emit_A
.9f93	88		dey				dey
.9f94	88		dey				dey
.9f95	10 df		bpl $9f76			bpl _flag_loop
.9f97	e8		inx				inx
.9f98	e8		inx				inx			; ( nt xt )
.9f99	20 75 ab	jsr $ab75			jsr CR
.9f9c	a9 4e		lda #$4e			lda #<str_see_size	; print size
.9f9e	a0 da		ldy #$da			ldy #>str_see_size
.9fa0	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.9fa3	20 89 cf	jsr $cf89			jsr Swap		; ( xt nt )
.9fa6	20 2e ab	jsr $ab2e			jsr WordSize		; ( xt u )
.9fa9	20 d5 b1	jsr $b1d5			jsr Decimal
.9fac	b5 24		lda $24,x			lda DStack+0,x		; if = 255
.9fae	c9 ff		cmp #$ff			cmp #$ff
.9fb0	d0 11		bne $9fc3			bne _size5
.9fb2	20 b1 b8	jsr $b8b1			jsr sliteral_runtime	;   type "large"
.9fb5	4c bd 9f	jmp $9fbd			  jmp _size2
>9fb8	6c 61 72 67 65					  .text "large"
.9fbd	20 ee cd	jsr $cdee	_size2:		jsr Type
.9fc0	4c c9 9f	jmp $9fc9			jmp _size9		;  else
.9fc3	20 6c cf	jsr $cf6c	_size5:		jsr Dup			;    type size
.9fc6	20 14 cc	jsr $cc14			jsr U_Dot
.9fc9					_size9:
.9fc9	20 75 ab	jsr $ab75			jsr CR
.9fcc	68		pla				pla			; restore base
.9fcd	8d 00 03	sta $0300			sta base
.9fd0	20 b8 cc	jsr $ccb8			jsr Two_dup
.9fd3	20 6f a8	jsr $a86f			jsr Dump		; dump
.9fd6	20 75 ab	jsr $ab75			jsr CR
.9fd9	20 f1 d7	jsr $d7f1			jsr DisAsm		; disassemble
=171					CL	.var *-XtPtr1
=$9fdc					en = *	; remember here
>9f2e	ab					.byte CL	;wh_CodeLength
.9fdc	60		rts				rts
>9fdd	46 50 44 42 43 4f 49 4d		_FlagLabels:	.text "FPDBCOIMNNANUF__"
>9fe5	4e 4e 41 4e 55 46 5f 5f
>9fed	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-WordList"	;  name of word as a string, ending at wh_NameLastChar
>9ff5	72 64 4c 69 73 74
=40827					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>9ffb	8e					.byte (("Forth-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=207					LinkDisplacement = Nt0-WordListLink
>9ffc	10					.byte WordFlags	;wh_Flags
>9ffd	03					.byte 3	;wh_CodeLength
>9ffe	cf					  .byte LinkDisplacement
=$9fff					XtPtr1 ::= *
=40827					WordListLink ::= Nt0 ; remember the nt of this word for later
.9fff	4c fa b7	jmp $b7fa	Forth_WordList:	jmp Zero
=3					CL	.var *-XtPtr1
=$a002					en = *	; remember here
>9ffd	03					.byte CL	;wh_CodeLength
>a002	45 64 69 74 6f 72 2d 57		L1:	.text "Editor-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a00a	6f 72 64 4c 69 73 74
=40849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a011	8f					.byte (("Editor-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a012	10					.byte WordFlags	;wh_Flags
>a013	03					.byte 3	;wh_CodeLength
>a014	16					  .byte LinkDisplacement
=$a015					XtPtr1 ::= *
=40849					WordListLink ::= Nt0 ; remember the nt of this word for later
.a015					Editor_WordList:
.a015	4c 03 b8	jmp $b803			jmp One
=3					CL	.var *-XtPtr1
=$a018					en = *	; remember here
>a013	03					.byte CL	;wh_CodeLength
>a018	41 73 73 65 6d 62 6c 65		L1:	.text "Assembler-WordList"	;  name of word as a string, ending at wh_NameLastChar
>a020	72 2d 57 6f 72 64 4c 69 73 74
=40874					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a02a	92					.byte (("Assembler-WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a02b	10					.byte WordFlags	;wh_Flags
>a02c	03					.byte 3	;wh_CodeLength
>a02d	19					  .byte LinkDisplacement
=$a02e					XtPtr1 ::= *
=40874					WordListLink ::= Nt0 ; remember the nt of this word for later
.a02e					Assembler_WordList:
.a02e	4c 0c b8	jmp $b80c			jmp Two
=3					CL	.var *-XtPtr1
=$a031					en = *	; remember here
>a02c	03					.byte CL	;wh_CodeLength
>a031	52 6f 6f 74 2d 57 6f 72		L1:	.text "Root-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a039	64 6c 69 73 74
=40894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a03e	8d					.byte (("Root-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a03f	10					.byte WordFlags	;wh_Flags
>a040	03					.byte 3	;wh_CodeLength
>a041	14					  .byte LinkDisplacement
=$a042					XtPtr1 ::= *
=40894					WordListLink ::= Nt0 ; remember the nt of this word for later
.a042	a9 03		lda #$03	Root_WordList:	lda #wid_Root
.a044	4c ec b7	jmp $b7ec			jmp PushZA
=5					CL	.var *-XtPtr1
=$a047					en = *	; remember here
>a040	05					.byte CL	;wh_CodeLength
>a047	4f 6e 6c 79			L1:	.text "Only"	;  name of word as a string, ending at wh_NameLastChar
=40907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a04b	24					.byte (("Only"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>a04c	10					.byte WordFlags	;wh_Flags
>a04d	03					.byte 3	;wh_CodeLength
>a04e	0d					  .byte LinkDisplacement
=$a04f					XtPtr1 ::= *
=40907					WordListLink ::= Nt0 ; remember the nt of this word for later
.a04f	20 cc b7	jsr $b7cc	Only:		jsr True	; Push -1
.a052	4c 6f a1	jmp $a16f			jmp Set_Order	; set the minimum search order.
=6					CL	.var *-XtPtr1
=$a055					en = *	; remember here
>a04d	06					.byte CL	;wh_CodeLength
>a055	41 6c 73 6f			L1:	.text "Also"	;  name of word as a string, ending at wh_NameLastChar
=40921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a059	e4					.byte (("Also"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a05a	10					.byte WordFlags	;wh_Flags
>a05b	03					.byte 3	;wh_CodeLength
>a05c	0e					  .byte LinkDisplacement
=$a05d					XtPtr1 ::= *
=40921					WordListLink ::= Nt0 ; remember the nt of this word for later
.a05d	20 9f a1	jsr $a19f	Also:		jsr Get_Order
.a060	20 45 cf	jsr $cf45			jsr Over
.a063	20 89 cf	jsr $cf89			jsr Swap
.a066	20 6e ca	jsr $ca6e			jsr One_plus
.a069	4c 6f a1	jmp $a16f			jmp Set_Order
=15					CL	.var *-XtPtr1
=$a06c					en = *	; remember here
>a05b	0f					.byte CL	;wh_CodeLength
>a06c	50 72 65 76 69 6f 75 73		L1:	.text "Previous"	;  name of word as a string, ending at wh_NameLastChar
=40948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a074	68					.byte (("Previous"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a075	10					.byte WordFlags	;wh_Flags
>a076	03					.byte 3	;wh_CodeLength
>a077	1b					  .byte LinkDisplacement
=$a078					XtPtr1 ::= *
=40948					WordListLink ::= Nt0 ; remember the nt of this word for later
.a078	20 9f a1	jsr $a19f	Previous:	jsr Get_Order
.a07b	20 a4 c9	jsr $c9a4			jsr Nip
.a07e	20 49 ca	jsr $ca49			jsr One_minus
.a081	4c 6f a1	jmp $a16f			jmp Set_Order
=12					CL	.var *-XtPtr1
=$a084					en = *	; remember here
>a076	0c					.byte CL	;wh_CodeLength
>a084	3e 4f 72 64 65 72		L1:	.text ">Order"	;  name of word as a string, ending at wh_NameLastChar
=40970					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a08a	46					.byte ((">Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a08b	10					.byte WordFlags	;wh_Flags
>a08c	03					.byte 3	;wh_CodeLength
>a08d	16					  .byte LinkDisplacement
=$a08e					XtPtr1 ::= *
=40970					WordListLink ::= Nt0 ; remember the nt of this word for later
.a08e					To_Order:
.a08e	20 f6 ce	jsr $cef6			jsr To_R		; Put the wid on the return stack for now.
.a091	20 9f a1	jsr $a19f			jsr Get_Order		; Get the current search order.
.a094	20 14 cf	jsr $cf14			jsr R_From		; Get back the wid and add it to the list.
.a097	20 89 cf	jsr $cf89			jsr Swap
.a09a	20 6e ca	jsr $ca6e			jsr One_plus
.a09d	4c 6f a1	jmp $a16f			jmp Set_Order		; Set the search order with the new list.
=18					CL	.var *-XtPtr1
=$a0a0					en = *	; remember here
>a08c	12					.byte CL	;wh_CodeLength
>a0a0	4f 72 64 65 72			L1:	.text "Order"	;  name of word as a string, ending at wh_NameLastChar
=40997					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0a5	45					.byte (("Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a0a6	10					.byte WordFlags	;wh_Flags
>a0a7	03					.byte 3	;wh_CodeLength
>a0a8	1b					  .byte LinkDisplacement
=$a0a9					XtPtr1 ::= *
=40997					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0a9					Order:
.a0a9	20 75 ab	jsr $ab75			jsr CR
.a0ac	a0 00		ldy #$00			ldy #0			; for each search_orderV[]
.a0ae	f0 0b		beq $a0bb			beq _test
.a0b0	98		tya		_loop:		tya
.a0b1	48		pha				pha
.a0b2	b9 2b 03	lda $032b,y			lda Search_orderV,y
.a0b5	20 c6 a0	jsr $a0c6			jsr print_wid_stringA	; internal helper function
.a0b8	68		pla				pla
.a0b9	a8		tay				tay
.a0ba	c8		iny				iny			;  next
.a0bb	cc 2a 03	cpy $032a	_test:		cpy Num_orderV
.a0be	90 f0		bcc $a0b0			bcc _loop
.a0c0	20 75 ab	jsr $ab75			jsr CR
.a0c3	ad 10 03	lda $0310			lda CurrentV		; print the current wordlist.
.a0c6					print_wid_stringA:
.a0c6	c9 04		cmp #$04			cmp #wid_Root+1		; do we have a string?
.a0c8	90 06		bcc $a0d0			bcc _string
.a0ca	20 ec b7	jsr $b7ec			jsr PushZA		; print the WID number
.a0cd	4c 14 cc	jmp $cc14			jmp U_Dot		; JSR/RTS
.a0d0	0a		asl a		_string:	asl			; Get the word index based on WID 0 to 3
.a0d1	a8		tay				tay
.a0d2	ca		dex				dex			; TOS= word nt
.a0d3	ca		dex				dex
.a0d4	b9 ec a0	lda $a0ec,y			lda _wid_Table+0,y
.a0d7	95 24		sta $24,x			sta DStack+0,x
.a0d9	b9 ed a0	lda $a0ed,y			lda _wid_Table+1,y
.a0dc	95 25		sta $25,x			sta DStack+1,x		; ( nt )
.a0de	20 fa bd	jsr $bdfa			jsr Name_To_String	; ( addr u )
.a0e1	a9 f7		lda #$f7			lda #$100-9		;   cut off "_wordlist"
.a0e3	20 5e ca	jsr $ca5e			jsr Minus_A
.a0e6	20 ee cd	jsr $cdee			jsr Type		; Print
.a0e9	4c e2 cd	jmp $cde2			jmp Space
=67					CL	.var *-XtPtr1
=$a0ec					en = *	; remember here
>a0a7	43					.byte CL	;wh_CodeLength
.a0ec					_wid_Table:
>a0ec	7b 9f					.word forth_wordlist-wh_LinkNt-1	; WID 0:
>a0ee	91 9f					.word editor_wordlist-wh_LinkNt-1	; WID 1:
>a0f0	aa 9f					.word assembler_wordlist-wh_LinkNt-1	; WID 2:
>a0f2	be 9f					.word root_wordlist-wh_LinkNt-1		; WID 3:
>a0f4	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=41081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a0f9	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>a0fa	10					.byte WordFlags	;wh_Flags
>a0fb	03					.byte 3	;wh_CodeLength
>a0fc	54					  .byte LinkDisplacement
=$a0fd					XtPtr1 ::= *
=41081					WordListLink ::= Nt0 ; remember the nt of this word for later
.a0fd	a9 00		lda #$00	Forth:		lda #wid_Forth
.a0ff	8d 2b 03	sta $032b			sta Search_OrderV+0
=5					CL	.var *-XtPtr1
=$a102					en = *	; remember here
>a0fb	05					.byte CL	;wh_CodeLength
.a102	60		rts				rts
>a103	44 65 66 69 6e 69 74 69		L1:	.text "Definitions"	;  name of word as a string, ending at wh_NameLastChar
>a10b	6f 6e 73
=41102					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a10e	6b					.byte (("Definitions"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a10f	10					.byte WordFlags	;wh_Flags
>a110	03					.byte 3	;wh_CodeLength
>a111	15					  .byte LinkDisplacement
=$a112					XtPtr1 ::= *
=41102					WordListLink ::= Nt0 ; remember the nt of this word for later
.a112	ad 2b 03	lda $032b	Definitions:	lda Search_OrderV	; Transfer SEARCH_ORDER[0] to
.a115	8d 10 03	sta $0310			sta CurrentV		;   byte variable CURRENT.
=6					CL	.var *-XtPtr1
=$a118					en = *	; remember here
>a110	06					.byte CL	;wh_CodeLength
.a118	60		rts				rts
>a119	57 6f 72 64 4c 69 73 74		L1:	.text "WordList"	;  name of word as a string, ending at wh_NameLastChar
=41121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a121	88					.byte (("WordList"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a122	10					.byte WordFlags	;wh_Flags
>a123	03					.byte 3	;wh_CodeLength
>a124	13					  .byte LinkDisplacement
=$a125					XtPtr1 ::= *
=41121					WordListLink ::= Nt0 ; remember the nt of this word for later
.a125					WordList:
.a125	ad 11 03	lda $0311			lda Num_wordlistsV	; Get the current number of wordlists
.a128	c9 0c		cmp #$0c			cmp #max_wordlists	; already at the max?
.a12a	90 05		bcc $a131			bcc +
.a12c	a9 66		lda #$66			lda #$100+err_TooManyWordlists	;   Print an error message
.a12e	4c 85 b4	jmp $b485			jmp ThrowA
.a131					+
.a131	ee 11 03	inc $0311			inc Num_WordlistsV	; increment wordlist count
.a134	4c ec b7	jmp $b7ec			jmp PushZA		; and put it on the stack.
=18					CL	.var *-XtPtr1
=$a137					en = *	; remember here
>a123	12					.byte CL	;wh_CodeLength
>a137	53 65 74 2d 43 75 72 72		L1:	.text "Set-Current"	;  name of word as a string, ending at wh_NameLastChar
>a13f	65 6e 74
=41154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a142	8b					.byte (("Set-Current"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a143	00					.byte WordFlags	;wh_Flags
>a144	03					.byte 3	;wh_CodeLength
>a145	21					  .byte LinkDisplacement
=$a146					XtPtr1 ::= *
=41154					WordListLink ::= Nt0 ; remember the nt of this word for later
.a146	20 e5 b3	jsr $b3e5	Set_Current:	jsr PopA	; pop wid
.a149	8d 10 03	sta $0310			sta CurrentV	; only the LSB is used.
=6					CL	.var *-XtPtr1
=$a14c					en = *	; remember here
>a144	06					.byte CL	;wh_CodeLength
.a14c	60		rts				rts
>a14d	47 65 74 2d 43 75 72 72		L1:	.text "Get-Current"	;  name of word as a string, ending at wh_NameLastChar
>a155	65 6e 74
=41176					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a158	8b					.byte (("Get-Current"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a159	10					.byte WordFlags	;wh_Flags
>a15a	03					.byte 3	;wh_CodeLength
>a15b	16					  .byte LinkDisplacement
=$a15c					XtPtr1 ::= *
=41176					WordListLink ::= Nt0 ; remember the nt of this word for later
.a15c					Get_Current:
.a15c	ad 10 03	lda $0310			lda CurrentV
.a15f	4c ec b7	jmp $b7ec			jmp PushZA	; CURRENT is a byte variable
=6					CL	.var *-XtPtr1
=$a162					en = *	; remember here
>a15a	06					.byte CL	;wh_CodeLength
>a162	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>a16a	72
=41195					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a16b	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a16c	10					.byte WordFlags	;wh_Flags
>a16d	03					.byte 3	;wh_CodeLength
>a16e	13					  .byte LinkDisplacement
=$a16f					XtPtr1 ::= *
=41195					WordListLink ::= Nt0 ; remember the nt of this word for later
.a16f					Set_Order:
.a16f	b5 25		lda $25,x			lda DStack+1,x		; Test for -1 TOS
.a171	10 08		bpl $a17b			bpl _start
.a173	e8		inx				inx			; Drop
.a174	e8		inx				inx
.a175	20 42 a0	jsr $a042			jsr Root_Wordlist	; wid
.a178	20 03 b8	jsr $b803			jsr One			; Count is 1.
.a17b					_start:
.a17b	20 e5 b3	jsr $b3e5			jsr PopA	; pop count
.a17e	8d 2a 03	sta $032a			sta Num_orderV	; #ORDER is a byte variable.
.a181	a0 00		ldy #$00			ldy #0
.a183	f0 07		beq $a18c			beq _test
.a185					_loop:
.a185	20 e5 b3	jsr $b3e5			jsr PopA		; The search order is a byte array
.a188	99 2b 03	sta $032b,y			sta Search_OrderV,y	; so only save the LSB
.a18b	c8		iny				iny
.a18c					_test:
.a18c	cc 2a 03	cpy $032a			cpy Num_orderV
.a18f	d0 f4		bne $a185			bne _loop
=34					CL	.var *-XtPtr1
=$a191					en = *	; remember here
>a16d	22					.byte CL	;wh_CodeLength
.a191	60		rts				rts
>a192	47 65 74 2d 4f 72 64 65		L1:	.text "Get-Order"	;  name of word as a string, ending at wh_NameLastChar
>a19a	72
=41243					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a19b	49					.byte (("Get-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>a19c	10					.byte WordFlags	;wh_Flags
>a19d	03					.byte 3	;wh_CodeLength
>a19e	30					  .byte LinkDisplacement
=$a19f					XtPtr1 ::= *
=41243					WordListLink ::= Nt0 ; remember the nt of this word for later
.a19f					Get_Order:
.a19f	ac 2a 03	ldy $032a			ldy Num_OrderV	; Get #ORDER - the number of wordlists in the search order.
.a1a2	f0 09		beq $a1ad			beq _done	; If zero, there are no wordlists.
.a1a4					_loop:
.a1a4	b9 2a 03	lda $032a,y			lda Search_OrderV-1,y	; Put that wordlist id on the stack.
.a1a7	20 ec b7	jsr $b7ec			jsr PushZA
.a1aa	88		dey				dey
.a1ab	d0 f7		bne $a1a4			bne _loop		; See if that was the last one to process (first in the list).
.a1ad					_done:
.a1ad	ad 2a 03	lda $032a			lda Num_OrderV		; Push the number of items
.a1b0	4c ec b7	jmp $b7ec			jmp PushZA
=20					CL	.var *-XtPtr1
=$a1b3					en = *	; remember here
>a19d	14					.byte CL	;wh_CodeLength
>a1b3	53 65 61 72 63 68 2d 57		L1:	.text "Search-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>a1bb	6f 72 64 6c 69 73 74
=41282					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a1c2	8f					.byte (("Search-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>a1c3	10					.byte WordFlags	;wh_Flags
>a1c4	03					.byte 3	;wh_CodeLength
>a1c5	27					  .byte LinkDisplacement
=$a1c6					XtPtr1 ::= *
=41282					WordListLink ::= Nt0 ; remember the nt of this word for later
.a1c6					Search_WordList:
.a1c6	20 e5 b3	jsr $b3e5			jsr PopA		; Pop wid
.a1c9	48		pha				pha
.a1ca	20 9c bc	jsr $bc9c			jsr swl_prepare 	; ( 0 u )
.a1cd	e8		inx				inx
.a1ce	e8		inx				inx			; ( 0 )
.a1cf	68		pla				pla			; pop wid
.a1d0	20 c9 bc	jsr $bcc9			jsr swl_search_wordlist ; tmp1= nt of matching word
.a1d3	f0 1f		beq $a1f4			beq _NotFound
.a1d5	a0 81		ldy #$81			ldy #wh_Flags
.a1d7	b1 14		lda ($14),y			lda (tmp1),y
.a1d9	29 03		and #$03			and #FP+DB
.a1db	18		clc				clc
.a1dc	69 82		adc #$82			adc #wh_LinkNt-1
.a1de	65 14		adc $14				adc tmp1+0		; TOS= xt
.a1e0	95 24		sta $24,x			sta DStack+0,x
.a1e2	a9 00		lda #$00			lda #0
.a1e4	65 15		adc $15				adc tmp1+1
.a1e6	95 25		sta $25,x			sta DStack+1,x
.a1e8	b1 14		lda ($14),y			lda (tmp1),y
.a1ea	29 08		and #$08			and #IM
.a1ec	d0 03		bne $a1f1			bne _immediate		; bit set, we're immediate
.a1ee	4c cc b7	jmp $b7cc			jmp True		; We're not immediate, return -1
.a1f1	4c 03 b8	jmp $b803	_immediate:	jmp One			; We're immediate, return 1
.a1f4					_NotFound:
.a1f4	60		rts				rts
=47					CL	.var *-XtPtr1
=$a1f5					en = *	; remember here
>a1c4	2f					.byte CL	;wh_CodeLength
>0339					BlockReadV: .word ?	; Vector to block reading routine
>033b					BlockWriteV: .word ?	; Vector to block writing routine
>033d					BuffBlockNumV: .word ?	; Block number current in BlockBuffer
>033f					BuffStatusV: .word ?	; Status of BlockBuffer (bit 0 = used, bit 1 = dirty)
>0341					BlockBuffer: .fill 1024
.a1f5					BlockInit:
.a1f5	a9 00		lda #$00			lda #0
.a1f7	8d 3f 03	sta $033f			sta BuffStatusV
.a1fa	a9 30		lda #$30			lda #<Platform_Block_Read
.a1fc	a0 f1		ldy #$f1			ldy #>Platform_Block_Read
.a1fe	8d 39 03	sta $0339			sta BlockReadV+0
.a201	8c 3a 03	sty $033a			sty BlockReadV+1
.a204	a9 30		lda #$30			lda #<Platform_Block_Write
.a206	a0 f1		ldy #$f1			ldy #>Platform_Block_Write
.a208	8d 3b 03	sta $033b			sta BlockWriteV+0
.a20b	8c 3c 03	sty $033c			sty BlockWriteV+1
.a20e	60		rts				rts
>0741					RamDriveV: .word ?	; ptr to RamDrive storage area
=0					io_blk_status = 0
=0					io_blk_action = 0
=0					io_blk_number = 0
=0					io_blk_buffer = 0
>a20f	42 6c 6f 63 6b 2d 52 61		L1:	.text "Block-RamDrive-Init"	;  name of word as a string, ending at wh_NameLastChar
>a217	6d 44 72 69 76 65 2d 49 6e 69 74
=41378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a222	93					.byte (("Block-RamDrive-Init"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=96					LinkDisplacement = Nt0-WordListLink
>a223	50					.byte WordFlags	;wh_Flags
>a224	03					.byte 3	;wh_CodeLength
>a225	60					  .byte LinkDisplacement
=$a226					XtPtr1 ::= *
=41378					WordListLink ::= Nt0 ; remember the nt of this word for later
.a226					Block_RamDrive_Init:
.a226	a9 0a		lda #$0a			lda #10			; Calculate how many bytes are needed for numblocks blocks
.a228	20 ec b7	jsr $b7ec			jsr PushZA
.a22b	20 53 cb	jsr $cb53			jsr LShift
.a22e	20 3c ca	jsr $ca3c			jsr Here		; ( size addr )
.a231	8d 41 07	sta $0741			sta RamDriveV+0
.a234	8c 42 07	sty $0742			sty RamDriveV+1
.a237	20 45 cf	jsr $cf45			jsr Over
.a23a	20 b6 c0	jsr $c0b6			jsr Allot		; Create ramdrive buffer
.a23d	20 89 cf	jsr $cf89			jsr Swap		; blank the buffer
.a240	20 41 be	jsr $be41			jsr Blank
.a243	a9 58		lda #$58			lda #<_read		; set block read vector
.a245	a0 a2		ldy #$a2			ldy #>_read
.a247	8d 39 03	sta $0339			sta BlockReadV+0
.a24a	8c 3a 03	sty $033a			sty BlockReadV+1
.a24d	a9 68		lda #$68			lda #<_write		; set block write vector
.a24f	a0 a2		ldy #$a2			ldy #>_write
.a251	8d 3b 03	sta $033b			sta BlockWriteV+0
.a254	8c 3c 03	sty $033c			sty BlockWriteV+1
.a257	60		rts				rts
=50					CL	.var *-XtPtr1
=$a258					en = *	; remember here
>a224	32					.byte CL	;wh_CodeLength
.a258					_read:
.a258	20 75 a2	jsr $a275			jsr _addr
.a25b	20 89 cf	jsr $cf89			jsr Swap
.a25e	a9 00		lda #$00			lda #0
.a260	a0 04		ldy #$04			ldy #>1024
.a262	20 bd b7	jsr $b7bd			jsr PushYA
.a265	4c 89 ad	jmp $ad89			jmp Move
.a268					_write:
.a268	20 75 a2	jsr $a275			jsr _addr
.a26b	a9 00		lda #$00			lda #0
.a26d	a0 04		ldy #$04			ldy #>1024
.a26f	20 bd b7	jsr $b7bd			jsr PushYA
.a272	4c 89 ad	jmp $ad89			jmp Move
.a275					_addr:
.a275	a9 0a		lda #$0a			lda #10
.a277	20 ec b7	jsr $b7ec			jsr PushZA
.a27a	20 53 cb	jsr $cb53			jsr LShift
.a27d	20 8f a2	jsr $a28f			jsr RamDrive
.a280	4c b3 cb	jmp $cbb3			jmp Plus
>a283	52 61 6d 44 72 69 76 65		L1:	.text "RamDrive"	;  name of word as a string, ending at wh_NameLastChar
=41483					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a28b	a8					.byte (("RamDrive"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>a28c	10					.byte WordFlags	;wh_Flags
>a28d	03					.byte 3	;wh_CodeLength
>a28e	69					  .byte LinkDisplacement
=$a28f					XtPtr1 ::= *
=41483					WordListLink ::= Nt0 ; remember the nt of this word for later
.a28f	ad 41 07	lda $0741	RamDrive:	lda RamDriveV+0
.a292	ac 42 07	ldy $0742			ldy RamDriveV+1
.a295	4c bd b7	jmp $b7bd			jmp PushYA
=9					CL	.var *-XtPtr1
=$a298					en = *	; remember here
>a28d	09					.byte CL	;wh_CodeLength
>a298	42 75 66 66 53 74 61 74		L1:	.text "BuffStatus"	;  name of word as a string, ending at wh_NameLastChar
>a2a0	75 73
=41506					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2a2	6a					.byte (("BuffStatus"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2a3	10					.byte WordFlags	;wh_Flags
>a2a4	03					.byte 3	;wh_CodeLength
>a2a5	17					  .byte LinkDisplacement
=$a2a6					XtPtr1 ::= *
=41506					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2a6	a0 03		ldy #$03	BuffStatus:	ldy #>BuffStatusV
.a2a8	a9 3f		lda #$3f			lda #<BuffStatusV
.a2aa	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2ad					en = *	; remember here
>a2a4	07					.byte CL	;wh_CodeLength
>a2ad	42 75 66 66 42 6c 6f 63		L1:	.text "BuffBlockNum"	;  name of word as a string, ending at wh_NameLastChar
>a2b5	6b 4e 75 6d
=41529					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2b9	ac					.byte (("BuffBlockNum"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a2ba	10					.byte WordFlags	;wh_Flags
>a2bb	03					.byte 3	;wh_CodeLength
>a2bc	17					  .byte LinkDisplacement
=$a2bd					XtPtr1 ::= *
=41529					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2bd	a0 03		ldy #$03	BuffBlockNum:	ldy #>BuffBlockNumV
.a2bf	a9 3d		lda #$3d			lda #<BuffBlockNumV
.a2c1	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2c4					en = *	; remember here
>a2bb	07					.byte CL	;wh_CodeLength
>a2c4	42 6c 6b 42 75 66 66 65		L1:	.text "BlkBuffer"	;  name of word as a string, ending at wh_NameLastChar
>a2cc	72
=41549					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2cd	49					.byte (("BlkBuffer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a2ce	10					.byte WordFlags	;wh_Flags
>a2cf	03					.byte 3	;wh_CodeLength
>a2d0	14					  .byte LinkDisplacement
=$a2d1					XtPtr1 ::= *
=41549					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2d1	a0 03		ldy #$03	BlkBuffer:	ldy #>BlockBuffer
.a2d3	a9 41		lda #$41			lda #<BlockBuffer
.a2d5	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2d8					en = *	; remember here
>a2cf	07					.byte CL	;wh_CodeLength
>a2d8	53 63 72			L1:	.text "Scr"	;  name of word as a string, ending at wh_NameLastChar
=41563					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2db	43					.byte (("Scr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2dc	10					.byte WordFlags	;wh_Flags
>a2dd	03					.byte 3	;wh_CodeLength
>a2de	0e					  .byte LinkDisplacement
=$a2df					XtPtr1 ::= *
=41563					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2df	a0 03		ldy #$03	Scr:		ldy #>ScrV
.a2e1	a9 0e		lda #$0e			lda #<ScrV
.a2e3	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2e6					en = *	; remember here
>a2dd	07					.byte CL	;wh_CodeLength
>a2e6	42 6c 6b			L1:	.text "Blk"	;  name of word as a string, ending at wh_NameLastChar
=41577					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2e9	63					.byte (("Blk"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a2ea	10					.byte WordFlags	;wh_Flags
>a2eb	03					.byte 3	;wh_CodeLength
>a2ec	0e					  .byte LinkDisplacement
=$a2ed					XtPtr1 ::= *
=41577					WordListLink ::= Nt0 ; remember the nt of this word for later
.a2ed	a0 03		ldy #$03	Blk:		ldy #>BlkV
.a2ef	a9 0c		lda #$0c			lda #<BlkV
.a2f1	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a2f4					en = *	; remember here
>a2eb	07					.byte CL	;wh_CodeLength
>a2f4	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write"	;  name of word as a string, ending at wh_NameLastChar
>a2fc	69 74 65
=41599					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a2ff	ab					.byte (("Block-Write"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a300	10					.byte WordFlags	;wh_Flags
>a301	03					.byte 3	;wh_CodeLength
>a302	16					  .byte LinkDisplacement
=$a303					XtPtr1 ::= *
=41599					WordListLink ::= Nt0 ; remember the nt of this word for later
.a303	6c 3b 03	jmp ($033b)	Block_Write:	jmp (BlockWriteV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-XtPtr1
=$a306					en = *	; remember here
>a301	03					.byte CL	;wh_CodeLength
>a306	42 6c 6f 63 6b 2d 57 72		L1:	.text "Block-Write-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a30e	69 74 65 2d 56 65 63 74 6f 72
=41624					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a318	52					.byte (("Block-Write-Vector"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>a319	10					.byte WordFlags	;wh_Flags
>a31a	03					.byte 3	;wh_CodeLength
>a31b	19					  .byte LinkDisplacement
=$a31c					XtPtr1 ::= *
=41624					WordListLink ::= Nt0 ; remember the nt of this word for later
.a31c					Block_Write_Vector:
.a31c	a0 03		ldy #$03			ldy #>BlockWriteV
.a31e	a9 3b		lda #$3b			lda #<BlockWriteV	; Get the BLOCK-WRITE-VECTOR address
.a320	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a323					en = *	; remember here
>a31a	07					.byte CL	;wh_CodeLength
>a323	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read"	;  name of word as a string, ending at wh_NameLastChar
>a32b	61 64
=41645					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a32d	8a					.byte (("Block-Read"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a32e	10					.byte WordFlags	;wh_Flags
>a32f	03					.byte 3	;wh_CodeLength
>a330	15					  .byte LinkDisplacement
=$a331					XtPtr1 ::= *
=41645					WordListLink ::= Nt0 ; remember the nt of this word for later
.a331	6c 39 03	jmp ($0339)	Block_Read:	jmp (BlockReadV)	; Execute the BLOCK-READ-VECTOR
=3					CL	.var *-XtPtr1
=$a334					en = *	; remember here
>a32f	03					.byte CL	;wh_CodeLength
>a334	42 6c 6f 63 6b 2d 52 65		L1:	.text "Block-Read-Vector"	;  name of word as a string, ending at wh_NameLastChar
>a33c	61 64 2d 56 65 63 74 6f 72
=41669					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a345	51					.byte (("Block-Read-Vector"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>a346	10					.byte WordFlags	;wh_Flags
>a347	03					.byte 3	;wh_CodeLength
>a348	18					  .byte LinkDisplacement
=$a349					XtPtr1 ::= *
=41669					WordListLink ::= Nt0 ; remember the nt of this word for later
.a349					Block_Read_Vector:
.a349	a0 03		ldy #$03			ldy #>BlockReadV
.a34b	a9 39		lda #$39			lda #<BlockReadV	; Get the BLOCK-READ-VECTOR address
.a34d	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a350					en = *	; remember here
>a347	07					.byte CL	;wh_CodeLength
>a350	53 61 76 65 2d 42 75 66		L1:	.text "Save-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a358	66 65 72 73
=41692					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a35c	6c					.byte (("Save-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>a35d	00					.byte WordFlags	;wh_Flags
>a35e	03					.byte 3	;wh_CodeLength
>a35f	17					  .byte LinkDisplacement
=$a360					XtPtr1 ::= *
=41692					WordListLink ::= Nt0 ; remember the nt of this word for later
.a360					Save_Buffers:
.a360	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a363	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a365	d0 11		bne $a378			bne _done	; Either not used or not dirty = done!
.a367	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a36a	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a36d	20 ae ce	jsr $ceae			jsr Fetch
.a370	20 03 a3	jsr $a303			jsr Block_Write
.a373	a9 01		lda #$01			lda #1
.a375	8d 3f 03	sta $033f			sta BuffStatusV+0
.a378					_done:
=24					CL	.var *-XtPtr1
=$a378					en = *	; remember here
>a35e	18					.byte CL	;wh_CodeLength
.a378	60		rts				rts
>a379	42 6c 6f 63 6b			L1:	.text "Block"	;  name of word as a string, ending at wh_NameLastChar
=41726					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a37e	65					.byte (("Block"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>a37f	00					.byte WordFlags	;wh_Flags
>a380	03					.byte 3	;wh_CodeLength
>a381	22					  .byte LinkDisplacement
=$a382					XtPtr1 ::= *
=41726					WordListLink ::= Nt0 ; remember the nt of this word for later
.a382					Block:
.a382	ad 3d 03	lda $033d			lda BuffBlockNumV+0	; check the LSB
.a385	d5 24		cmp $24,x			cmp DStack+0,x
.a387	d0 0e		bne $a397			bne _not_in_buffer
.a389	ad 3e 03	lda $033e			lda BuffBlockNumV+1	; check the MSB
.a38c	d5 25		cmp $25,x			cmp DStack+1,x
.a38e	d0 07		bne $a397			bne _not_in_buffer
.a390	ad 3f 03	lda $033f			lda BuffStatusV+0
.a393	29 01		and #$01			and #1		; Check the in-use flag (bit 0)
.a395	d0 2d		bne $a3c4			bne _done	; It's already in the buffer and in use.
.a397					_not_in_buffer:
.a397	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a39a	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a39c	d0 0c		bne $a3aa			bne _buffer_available ; Unused or not dirty = available
.a39e	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3a1	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a3a4	20 ae ce	jsr $ceae			jsr Fetch
.a3a7	20 03 a3	jsr $a303			jsr Block_Write
.a3aa					_buffer_available:
.a3aa	b5 24		lda $24,x			lda DStack+0,x
.a3ac	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a3af	b5 25		lda $25,x			lda DStack+1,x
.a3b1	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a3b4	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3b7	20 89 cf	jsr $cf89			jsr Swap
.a3ba	20 31 a3	jsr $a331			jsr Block_Read
.a3bd	a9 01		lda #$01			lda #1
.a3bf	8d 3f 03	sta $033f			sta BuffStatusV+0
.a3c2	ca		dex				dex
.a3c3	ca		dex				dex
.a3c4					_done:
.a3c4	a9 41		lda #$41			lda #<BlockBuffer
.a3c6	95 24		sta $24,x			sta DStack+0,x
.a3c8	a9 03		lda #$03			lda #>BlockBuffer
.a3ca	95 25		sta $25,x			sta DStack+1,x
=74					CL	.var *-XtPtr1
=$a3cc					en = *	; remember here
>a380	4a					.byte CL	;wh_CodeLength
.a3cc	60		rts				rts
>a3cd	55 70 64 61 74 65		L1:	.text "Update"	;  name of word as a string, ending at wh_NameLastChar
=41811					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3d3	a6					.byte (("Update"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=85					LinkDisplacement = Nt0-WordListLink
>a3d4	00					.byte WordFlags	;wh_Flags
>a3d5	03					.byte 3	;wh_CodeLength
>a3d6	55					  .byte LinkDisplacement
=$a3d7					XtPtr1 ::= *
=41811					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3d7					Update:
.a3d7	ad 3f 03	lda $033f			lda BuffStatusV+0
.a3da	09 02		ora #$02			ora #2		; Turn on dirty flag (bit 2)
.a3dc	8d 3f 03	sta $033f			sta BuffStatusV+0
=8					CL	.var *-XtPtr1
=$a3df					en = *	; remember here
>a3d5	08					.byte CL	;wh_CodeLength
.a3df	60		rts				rts
>a3e0	42 75 66 66 65 72		L1:	.text "Buffer"	;  name of word as a string, ending at wh_NameLastChar
=41830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a3e6	46					.byte (("Buffer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>a3e7	10					.byte WordFlags	;wh_Flags
>a3e8	03					.byte 3	;wh_CodeLength
>a3e9	13					  .byte LinkDisplacement
=$a3ea					XtPtr1 ::= *
=41830					WordListLink ::= Nt0 ; remember the nt of this word for later
.a3ea					Buffer:
.a3ea	ad 3f 03	lda $033f			lda BuffStatusV+0 ; Only bits 0 and 1 are used, so only
.a3ed	c9 03		cmp #$03			cmp #3		; LSB is needed.
.a3ef	d0 0c		bne $a3fd			bne _buffer_available ; Unused or not dirty = available
.a3f1	20 d1 a2	jsr $a2d1			jsr BlkBuffer
.a3f4	20 bd a2	jsr $a2bd			jsr BuffBlockNum
.a3f7	20 ae ce	jsr $ceae			jsr Fetch
.a3fa	20 03 a3	jsr $a303			jsr Block_Write
.a3fd					_buffer_available:
.a3fd	b5 24		lda $24,x			lda DStack+0,x
.a3ff	8d 3d 03	sta $033d			sta BuffBlockNumV+0
.a402	b5 25		lda $25,x			lda DStack+1,x
.a404	8d 3e 03	sta $033e			sta BuffBlockNumV+1
.a407	a9 01		lda #$01			lda #1
.a409	8d 3f 03	sta $033f			sta BuffStatusV+0
.a40c					_done:
.a40c	a9 41		lda #$41			lda #<BlockBuffer
.a40e	95 24		sta $24,x			sta DStack+0,x
.a410	a9 03		lda #$03			lda #>BlockBuffer
.a412	95 25		sta $25,x			sta DStack+1,x
=42					CL	.var *-XtPtr1
=$a414					en = *	; remember here
>a3e8	2a					.byte CL	;wh_CodeLength
.a414	60		rts				rts
>a415	45 6d 70 74 79 2d 42 75		L1:	.text "Empty-Buffers"	;  name of word as a string, ending at wh_NameLastChar
>a41d	66 66 65 72 73
=41890					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a422	6d					.byte (("Empty-Buffers"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=60					LinkDisplacement = Nt0-WordListLink
>a423	10					.byte WordFlags	;wh_Flags
>a424	03					.byte 3	;wh_CodeLength
>a425	3c					  .byte LinkDisplacement
=$a426					XtPtr1 ::= *
=41890					WordListLink ::= Nt0 ; remember the nt of this word for later
.a426	a9 00		lda #$00	Empty_Buffers:	lda #0		; Set the buffer status to empty.
.a428	8d 3f 03	sta $033f			sta BuffStatusV+0 ; Only LSB is used.
=5					CL	.var *-XtPtr1
=$a42b					en = *	; remember here
>a424	05					.byte CL	;wh_CodeLength
.a42b	60		rts				rts
>a42c	46 6c 75 73 68			L1:	.text "Flush"	;  name of word as a string, ending at wh_NameLastChar
=41905					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a431	05					.byte (("Flush"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>a432	10					.byte WordFlags	;wh_Flags
>a433	03					.byte 3	;wh_CodeLength
>a434	0f					  .byte LinkDisplacement
=$a435					XtPtr1 ::= *
=41905					WordListLink ::= Nt0 ; remember the nt of this word for later
.a435	20 60 a3	jsr $a360	Flush:		jsr Save_Buffers
.a438	4c 26 a4	jmp $a426			jmp Empty_Buffers
=6					CL	.var *-XtPtr1
=$a43b					en = *	; remember here
>a433	06					.byte CL	;wh_CodeLength
>a43b	4c 6f 61 64			L1:	.text "Load"	;  name of word as a string, ending at wh_NameLastChar
=41919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a43f	84					.byte (("Load"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a440	40					.byte WordFlags	;wh_Flags
>a441	03					.byte 3	;wh_CodeLength
>a442	0e					  .byte LinkDisplacement
=$a443					XtPtr1 ::= *
=41919					WordListLink ::= Nt0 ; remember the nt of this word for later
.a443					Load:
.a443	20 29 b4	jsr $b429			jsr underflow_1
.a446	ad 0d 03	lda $030d			lda BlkV+1		; Save the current value of BLK on the return stack.
.a449	48		pha				pha
.a44a	ad 0c 03	lda $030c			lda BlkV+0
.a44d	48		pha				pha
.a44e	b5 24		lda $24,x			lda DStack+0,x		; Set BLK to the given block/screen number.
.a450	8d 0c 03	sta $030c			sta BlkV+0
.a453	b5 25		lda $25,x			lda DStack+1,x
.a455	8d 0d 03	sta $030d			sta BlkV+1
.a458	20 82 a3	jsr $a382			jsr Block		; Load that block into a buffer
.a45b	a9 00		lda #$00			lda #<1024		; block length.
.a45d	a0 04		ldy #$04			ldy #>1024
.a45f	20 bd b7	jsr $b7bd			jsr PushYA
.a462	38		sec				sec		; Set a flag to not zero BLK
.a463	20 10 b0	jsr $b010			jsr load_evaluate
.a466	68		pla				pla
.a467	8d 0c 03	sta $030c			sta BlkV+0
.a46a	68		pla				pla
.a46b	8d 0d 03	sta $030d			sta BlkV+1
.a46e	0d 0c 03	ora $030c			ora BlkV+0
.a471	f0 13		beq $a486			beq _done
.a473	ad 0c 03	lda $030c			lda BlkV+0
.a476	ac 0d 03	ldy $030d			ldy BlkV+1
.a479	20 bd b7	jsr $b7bd			jsr PushYA
.a47c	20 82 a3	jsr $a382			jsr Block
.a47f	20 00 b4	jsr $b400			jsr PopYA	; Pop the buffer address.
.a482	85 04		sta $04				sta cib+0
.a484	84 05		sty $05				sty cib+1
.a486					_done:
=67					CL	.var *-XtPtr1
=$a486					en = *	; remember here
>a441	43					.byte CL	;wh_CodeLength
.a486	60		rts				rts
>a487	54 68 72 75			L1:	.text "Thru"	;  name of word as a string, ending at wh_NameLastChar
=41995					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a48b	a4					.byte (("Thru"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=76					LinkDisplacement = Nt0-WordListLink
>a48c	50					.byte WordFlags	;wh_Flags
>a48d	03					.byte 3	;wh_CodeLength
>a48e	4c					  .byte LinkDisplacement
=$a48f					XtPtr1 ::= *
=41995					WordListLink ::= Nt0 ; remember the nt of this word for later
.a48f					Thru:
.a48f	20 3d b4	jsr $b43d			jsr underflow_2
.a492	20 f6 ce	jsr $cef6			jsr To_R
.a495					_loop:
.a495	b5 25		lda $25,x			lda DStack+1,x		; copy to return stack
.a497	48		pha				pha
.a498	b5 24		lda $24,x			lda DStack+0,x
.a49a	48		pha				pha
.a49b	20 43 a4	jsr $a443			jsr Load		; Load this screen.
.a49e	20 14 cf	jsr $cf14			jsr R_From		; Get the screen # we just loaded.
.a4a1	20 6e ca	jsr $ca6e			jsr One_plus		; increment
.a4a4	86 14		stx $14				stx tmp1
.a4a6	ba		tsx				tsx
.a4a7	8a		txa				txa
.a4a8	a8		tay				tay
.a4a9	a6 14		ldx $14				ldx tmp1
.a4ab	b9 01 01	lda $0101,y			lda RStack+1,y
.a4ae	d5 24		cmp $24,x			cmp DStack+0,x
.a4b0	b9 02 01	lda $0102,y			lda RStack+2,y
.a4b3	f5 25		sbc $25,x			sbc DStack+1,x
.a4b5	b0 de		bcs $a495			bcs _loop
.a4b7	e8		inx				inx			; Drop index
.a4b8	e8		inx				inx
.a4b9	68		pla				pla			; RDrop limit
.a4ba	68		pla				pla
=44					CL	.var *-XtPtr1
=$a4bb					en = *	; remember here
>a48d	2c					.byte CL	;wh_CodeLength
.a4bb	60		rts				rts
>a4bc	4c 69 73 74			L1:	.text "List"	;  name of word as a string, ending at wh_NameLastChar
=42048					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a4c0	84					.byte (("List"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>a4c1	10					.byte WordFlags	;wh_Flags
>a4c2	03					.byte 3	;wh_CodeLength
>a4c3	35					  .byte LinkDisplacement
=$a4c4					XtPtr1 ::= *
=42048					WordListLink ::= Nt0 ; remember the nt of this word for later
.a4c4	20 00 b4	jsr $b400	List:		jsr PopYA	; Save the screen number
.a4c7	8d 0e 03	sta $030e			sta ScrV+0
.a4ca	8c 0f 03	sty $030f			sty ScrV+1
.a4cd					ListScr:
.a4cd	20 df a2	jsr $a2df			jsr Scr
.a4d0	20 ae ce	jsr $ceae			jsr Fetch
.a4d3	20 82 a3	jsr $a382			jsr Block	; Get the current screen contents.
.a4d6	20 75 ab	jsr $ab75			jsr CR
.a4d9	20 b1 b8	jsr $b8b1			jsr SLiteral_Runtime
.a4dc	4c e7 a4	jmp $a4e7			  jmp +				; for SLiteral_Runtime
>a4df	53 63 72 65 65 6e 20 23				  .text "Screen #"		; for SLiteral_Runtime
.a4e7					+
.a4e7	20 ee cd	jsr $cdee			jsr Type
.a4ea	20 df a2	jsr $a2df			jsr Scr		; print screen number
.a4ed	20 ae ce	jsr $ceae			jsr Fetch
.a4f0	a9 04		lda #$04			lda #4		;    in 4 positions
.a4f2	20 46 cc	jsr $cc46			jsr U_Dot_R_A
.a4f5	a9 00		lda #$00			lda #0			; line #
.a4f7					_line_loop:
.a4f7	48		pha				pha
.a4f8	20 75 ab	jsr $ab75			jsr CR
.a4fb	68		pla				pla		; Print the line number
.a4fc	48		pha				pha
.a4fd	20 ec b7	jsr $b7ec			jsr PushZA
.a500	a9 02		lda #$02			lda #2		;   in 2 positions
.a502	20 46 cc	jsr $cc46			jsr U_Dot_R_A
.a505	20 e2 cd	jsr $cde2			jsr Space
.a508	20 6c cf	jsr $cf6c			jsr Dup		; Print one line using the address on the stack.
.a50b	a9 40		lda #$40			lda #64
.a50d	20 ec b7	jsr $b7ec			jsr PushZA
.a510	20 ee cd	jsr $cdee			jsr Type
.a513	a9 40		lda #$40			lda #64		; move address to the next line.
.a515	20 20 ca	jsr $ca20			jsr Plus_A
.a518	68		pla				pla		; Increment the line number
.a519	18		clc				clc
.a51a	69 01		adc #$01			adc #1
.a51c	c9 10		cmp #$10			cmp #16		; See if we are done.
.a51e	d0 d7		bne $a4f7			bne _line_loop
.a520	e8		inx				inx		; Drop the address
.a521	e8		inx				inx
.a522	4c 75 ab	jmp $ab75			jmp CR
=97					CL	.var *-XtPtr1
=$a525					en = *	; remember here
>a4c2	61					.byte CL	;wh_CodeLength
>a525	44 65 66 65 72			L1:	.text "Defer"	;  name of word as a string, ending at wh_NameLastChar
=42154					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a52a	45					.byte (("Defer"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=106					LinkDisplacement = Nt0-WordListLink
>a52b	10					.byte WordFlags	;wh_Flags
>a52c	03					.byte 3	;wh_CodeLength
>a52d	6a					  .byte LinkDisplacement
=$a52e					XtPtr1 ::= *
=42154					WordListLink ::= Nt0 ; remember the nt of this word for later
.a52e					Defer:
.a52e	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.a531	a9 3b		lda #$3b			lda #<_undefined	; compile "jmp _undefined" (patched later)
.a533	a0 a5		ldy #$a5			ldy #>_undefined
.a535	20 4d cd	jsr $cd4d			jsr Jmp_Comma_YA
.a538	4c da bb	jmp $bbda			jmp adjust_z		; set word length
=13					CL	.var *-XtPtr1
=$a53b					en = *	; remember here
>a52c	0d					.byte CL	;wh_CodeLength
.a53b					_undefined:
.a53b	a9 6a		lda #$6a			lda #$100+err_Defer	; throw exception
.a53d	4c 85 b4	jmp $b485			jmp ThrowA
>a540	44 65 66 65 72 21		L1:	.text "Defer!"	;  name of word as a string, ending at wh_NameLastChar
=42182					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a546	26					.byte (("Defer!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>a547	10					.byte WordFlags	;wh_Flags
>a548	03					.byte 3	;wh_CodeLength
>a549	1c					  .byte LinkDisplacement
=$a54a					XtPtr1 ::= *
=42182					WordListLink ::= Nt0 ; remember the nt of this word for later
.a54a	20 00 b4	jsr $b400	Defer_Store:	jsr PopYA
.a54d	85 14		sta $14		Defer_Store_YA:	sta tmp1+0
.a54f	84 15		sty $15				sty tmp1+1
.a551	b5 24		lda $24,x			lda DStack+0,x		; DEFERs JMP abs operand= xt2
.a553	a0 01		ldy #$01			ldy #1
.a555	91 14		sta ($14),y			sta (tmp1),y
.a557	b5 25		lda $25,x			lda DStack+1,x
.a559	c8		iny				iny
.a55a	91 14		sta ($14),y			sta (tmp1),y
.a55c	4c a5 cf	jmp $cfa5			jmp Drop		; Drop xt2
=21					CL	.var *-XtPtr1
=$a55f					en = *	; remember here
>a548	15					.byte CL	;wh_CodeLength
>a55f	44 65 66 65 72 40		L1:	.text "Defer@"	;  name of word as a string, ending at wh_NameLastChar
=42213					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a565	06					.byte (("Defer@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>a566	10					.byte WordFlags	;wh_Flags
>a567	03					.byte 3	;wh_CodeLength
>a568	1f					  .byte LinkDisplacement
=$a569					XtPtr1 ::= *
=42213					WordListLink ::= Nt0 ; remember the nt of this word for later
.a569	20 00 b4	jsr $b400	Defer_Fetch:	jsr PopYA	; pop xt1, check underflow
.a56c	85 14		sta $14		Defer_Fetch_YA:	sta tmp1+0
.a56e	84 15		sty $15				sty tmp1+1
.a570	ca		dex				dex		; push DEFERs JMP abs operand
.a571	ca		dex				dex
.a572	a0 01		ldy #$01			ldy #1
.a574	b1 14		lda ($14),y			lda (tmp1),y
.a576	95 24		sta $24,x			sta DStack+0,x
.a578	c8		iny				iny
.a579	b1 14		lda ($14),y			lda (tmp1),y
.a57b	95 25		sta $25,x			sta DStack+1,x
.a57d	60		rts				rts
=21					CL	.var *-XtPtr1
=$a57e					en = *	; remember here
>a567	15					.byte CL	;wh_CodeLength
>a57e	49 73				L1:	.text "Is"	;  name of word as a string, ending at wh_NameLastChar
=42240					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a580	62					.byte (("Is"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>a581	18					.byte WordFlags	;wh_Flags
>a582	03					.byte 3	;wh_CodeLength
>a583	1b					  .byte LinkDisplacement
=$a584					XtPtr1 ::= *
=42240					WordListLink ::= Nt0 ; remember the nt of this word for later
.a584					Is:
.a584	20 40 bc	jsr $bc40			jsr Tick		; get xt of "name"
.a587	a5 0a		lda $0a				lda state		; Check STATE
.a589	f0 bf		beq $a54a			beq Defer_Store		; interpreting, put xt in the DEFER word
.a58b					_compiling:
.a58b	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a58e	a0 a5		ldy #$a5			ldy #>Defer_Store_YA	; Postpone DEFER! by compiling a JSR to it.
.a590	a9 4d		lda #$4d			lda #<Defer_Store_YA
.a592	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=17					CL	.var *-XtPtr1
=$a595					en = *	; remember here
>a582	11					.byte CL	;wh_CodeLength
>a595	41 63 74 69 6f 6e 2d 4f		L1:	.text "Action-Of"	;  name of word as a string, ending at wh_NameLastChar
>a59d	66
=42270					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a59e	c9					.byte (("Action-Of"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>a59f	18					.byte WordFlags	;wh_Flags
>a5a0	03					.byte 3	;wh_CodeLength
>a5a1	1e					  .byte LinkDisplacement
=$a5a2					XtPtr1 ::= *
=42270					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5a2					Action_Of:
.a5a2	20 40 bc	jsr $bc40			jsr Tick		; get xt of "name"
.a5a5	a5 0a		lda $0a				lda state		; Check STATE
.a5a7	f0 c0		beq $a569			beq Defer_Fetch		; interpreting, get xt in the DEFER word
.a5a9					_compiling:
.a5a9	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile LDY #; LDA # of the xt of "name"
.a5ac	a0 a5		ldy #$a5			ldy #>Defer_Fetch_YA	; Postpone DEFER@ by compiling a JSR to it.
.a5ae	a9 6c		lda #$6c			lda #<Defer_Fetch_YA
.a5b0	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=17					CL	.var *-XtPtr1
=$a5b3					en = *	; remember here
>a5a0	11					.byte CL	;wh_CodeLength
>a5b3	55 73 65 72 41 64 64 72		L1:	.text "UserAddr"	;  name of word as a string, ending at wh_NameLastChar
=42299					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5bb	48					.byte (("UserAddr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>a5bc	10					.byte WordFlags	;wh_Flags
>a5bd	03					.byte 3	;wh_CodeLength
>a5be	1d					  .byte LinkDisplacement
=$a5bf					XtPtr1 ::= *
=42299					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5bf	a0 02		ldy #$02	UserAddr:	ldy #>User0
.a5c1	a9 ff		lda #$ff			lda #<User0
.a5c3	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$a5c6					en = *	; remember here
>a5bd	07					.byte CL	;wh_CodeLength
>a5c6	42 75 66 66 65 72 3a		L1:	.text "Buffer:"	;  name of word as a string, ending at wh_NameLastChar
=42317					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5cd	47					.byte (("Buffer:"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>a5ce	10					.byte WordFlags	;wh_Flags
>a5cf	03					.byte 3	;wh_CodeLength
>a5d0	12					  .byte LinkDisplacement
=$a5d1					XtPtr1 ::= *
=42317					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5d1	20 bd c1	jsr $c1bd	Buffer_Colon:	jsr Create
.a5d4	4c b6 c0	jmp $c0b6			jmp Allot
=6					CL	.var *-XtPtr1
=$a5d7					en = *	; remember here
>a5cf	06					.byte CL	;wh_CodeLength
>a5d7	43 61 73 65			L1:	.text "Case"	;  name of word as a string, ending at wh_NameLastChar
=42331					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5db	a4					.byte (("Case"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5dc	1c					.byte WordFlags	;wh_Flags
>a5dd	03					.byte 3	;wh_CodeLength
>a5de	0e					  .byte LinkDisplacement
=$a5df					XtPtr1 ::= *
=42331					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5df					Case:
.a5df	4c fa b7	jmp $b7fa			jmp Zero	; init jmp fixup chain
=3					CL	.var *-XtPtr1
=$a5e2					en = *	; remember here
>a5dd	03					.byte CL	;wh_CodeLength
>a5e2	45 6e 64 43 61 73 65		L1:	.text "EndCase"	;  name of word as a string, ending at wh_NameLastChar
=42345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5e9	a7					.byte (("EndCase"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a5ea	1c					.byte WordFlags	;wh_Flags
>a5eb	03					.byte 3	;wh_CodeLength
>a5ec	0e					  .byte LinkDisplacement
=$a5ed					XtPtr1 ::= *
=42345					WordListLink ::= Nt0 ; remember the nt of this word for later
.a5ed					EndCase:
.a5ed	20 27 cd	jsr $cd27			jsr Drop_Comma
.a5f0					_loop:
.a5f0	b5 25		lda $25,x			lda DStack+1,x	; while addr fixup entries left
.a5f2	f0 06		beq $a5fa			beq _done
.a5f4	20 6f a6	jsr $a66f			jsr Then	;   fixup another one
.a5f7	4c f0 a5	jmp $a5f0			jmp _loop
.a5fa					_done:
.a5fa	e8		inx				inx		; Drop the 0
.a5fb	e8		inx				inx
=15					CL	.var *-XtPtr1
=$a5fc					en = *	; remember here
>a5eb	0f					.byte CL	;wh_CodeLength
.a5fc	60		rts				rts
>a5fd	4f 66				L1:	.text "Of"	;  name of word as a string, ending at wh_NameLastChar
=42367					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a5ff	c2					.byte (("Of"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>a600	1c					.byte WordFlags	;wh_Flags
>a601	03					.byte 3	;wh_CodeLength
>a602	16					  .byte LinkDisplacement
=$a603					XtPtr1 ::= *
=42367					WordListLink ::= Nt0 ; remember the nt of this word for later
.a603					Of:
.a603	a0 a6		ldy #$a6			ldy #>_runtime		; Check if value is equal to this case.
.a605	a9 18		lda #$18			lda #<_runtime
.a607	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.a60a	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a60c	20 fb cc	jsr $ccfb			jsr C_Comma_A
.a60f	20 3c ca	jsr $ca3c			jsr Here		; Put the origination address on the stack for else/then
.a612	20 fa b7	jsr $b7fa			jsr Zero
.a615	4c 11 cd	jmp $cd11			jmp Comma
=21					CL	.var *-XtPtr1
=$a618					en = *	; remember here
>a601	15					.byte CL	;wh_CodeLength
.a618					_runtime:
.a618	e8		inx				inx		; Drop x2
.a619	e8		inx				inx
.a61a	b5 22		lda $22,x			lda DStack-2,x	; compare x1 with x2
.a61c	d5 24		cmp $24,x			cmp DStack+0,x
.a61e	d0 06		bne $a626			bne _NotEq
.a620	b5 23		lda $23,x			lda DStack-1,x
.a622	d5 25		cmp $25,x			cmp DStack+1,x
.a624	f0 31		beq $a657			beq zbranch_run2 ; Drop x1 & return to after the jmp abs
.a626	60		rts		_NotEq:		rts		; return to the jmp abs to next test
>a627	45 6e 64 4f 66			L1:	.text "EndOf"	;  name of word as a string, ending at wh_NameLastChar
=42412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a62c	c5					.byte (("EndOf"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>a62d	1c					.byte WordFlags	;wh_Flags
>a62e	03					.byte 3	;wh_CodeLength
>a62f	2d					  .byte LinkDisplacement
=$a630					XtPtr1 ::= *
=42412					WordListLink ::= Nt0 ; remember the nt of this word for later
.a630	4c 80 a6	jmp $a680	EndOf:		jmp Else
=3					CL	.var *-XtPtr1
=$a633					en = *	; remember here
>a62e	03					.byte CL	;wh_CodeLength
>a633	49 66				L1:	.text "If"	;  name of word as a string, ending at wh_NameLastChar
=42421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a635	c2					.byte (("If"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>a636	1c					.byte WordFlags	;wh_Flags
>a637	03					.byte 3	;wh_CodeLength
>a638	09					  .byte LinkDisplacement
=$a639					XtPtr1 ::= *
=42421					WordListLink ::= Nt0 ; remember the nt of this word for later
.a639					If:
.a639	20 4a a6	jsr $a64a	If3:		jsr zbranch_jsr_comma	; Compile a 0BRANCH
.a63c					zbranch_jmp0_comma:
.a63c	a9 4c		lda #$4c			lda #$4c		; compile jmp abs
.a63e	20 fb cc	jsr $ccfb			jsr C_Comma_A
.a641	20 3c ca	jsr $ca3c			jsr Here		; save ptr to address for else/then
.a644	a9 00		lda #$00			lda #0			; Stuff zero in for the branch address right now.
.a646	a8		tay				tay			; THEN or ELSE will fix it later.
.a647	4c 14 cd	jmp $cd14			jmp Comma_YA
=17					CL	.var *-XtPtr1
=$a64a					en = *	; remember here
>a637	11					.byte CL	;wh_CodeLength
=$cd4a					zbranch_jmp_comma = Jmp_Comma		; compile jmp abs
.a64a					zbranch_jsr_comma:
.a64a	a0 a6		ldy #$a6			ldy #>_runtime
.a64c	a9 51		lda #$51			lda #<_runtime
.a64e	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
.a651					_runtime:
.a651	b5 24		lda $24,x			lda DStack+0,x		;flag is false?
.a653	15 25		ora $25,x			ora DStack+1,x
.a655	f0 0d		beq $a664			beq zbranch_run_done
.a657	18		clc		zbranch_run2:	clc			; move RTS addr over the next jmp abs.
.a658	68		pla				pla
.a659	69 03		adc #$03			adc #3
.a65b	90 06		bcc $a663			bcc +
.a65d	a8		tay				tay
.a65e	68		pla				pla
.a65f	69 00		adc #$00			adc #0
.a661	48		pha				pha
.a662	98		tya				tya
.a663	48		pha		+		pha
.a664					zbranch_run_done:
.a664	e8		inx				inx			; Drop f
.a665	e8		inx				inx
.a666	60		rts				rts
>a667	54 68 65 6e			L1:	.text "Then"	;  name of word as a string, ending at wh_NameLastChar
=42475					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a66b	c4					.byte (("Then"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=54					LinkDisplacement = Nt0-WordListLink
>a66c	1c					.byte WordFlags	;wh_Flags
>a66d	03					.byte 3	;wh_CodeLength
>a66e	36					  .byte LinkDisplacement
=$a66f					XtPtr1 ::= *
=42475					WordListLink ::= Nt0 ; remember the nt of this word for later
.a66f					Then:
.a66f	20 3c ca	jsr $ca3c			jsr Here
.a672	20 89 cf	jsr $cf89			jsr Swap
.a675	4c c7 ce	jmp $cec7			jmp Store
=9					CL	.var *-XtPtr1
=$a678					en = *	; remember here
>a66d	09					.byte CL	;wh_CodeLength
>a678	45 6c 73 65			L1:	.text "Else"	;  name of word as a string, ending at wh_NameLastChar
=42492					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a67c	a4					.byte (("Else"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a67d	1c					.byte WordFlags	;wh_Flags
>a67e	03					.byte 3	;wh_CodeLength
>a67f	11					  .byte LinkDisplacement
=$a680					XtPtr1 ::= *
=42492					WordListLink ::= Nt0 ; remember the nt of this word for later
.a680					Else:
.a680	20 3c a6	jsr $a63c			jsr zbranch_jmp0_comma	; compile jmp 0, push addr of addr
.a683	20 3c ca	jsr $ca3c			jsr Here
.a686	20 67 ce	jsr $ce67			jsr Rot
.a689	4c c7 ce	jmp $cec7			jmp Store
=12					CL	.var *-XtPtr1
=$a68c					en = *	; remember here
>a67e	0c					.byte CL	;wh_CodeLength
>a68c	42 65 67 69 6e			L1:	.text "Begin"	;  name of word as a string, ending at wh_NameLastChar
=42513					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a691	c5					.byte (("Begin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= NN+CO+IM	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>a692	1c					.byte WordFlags	;wh_Flags
>a693	03					.byte 3	;wh_CodeLength
>a694	15					  .byte LinkDisplacement
=$a695					XtPtr1 ::= *
=42513					WordListLink ::= Nt0 ; remember the nt of this word for later
.a695	20 3c ca	jsr $ca3c	Begin:		jsr Here	; remember the loop starting location
.a698	a9 95		lda #$95			lda #<Begin	; pairing marker
.a69a	4c ec b7	jmp $b7ec			jmp PushZA
=8					CL	.var *-XtPtr1
=$a69d					en = *	; remember here
>a693	08					.byte CL	;wh_CodeLength
>a69d	41 67 61 69 6e			L1:	.text "Again"	;  name of word as a string, ending at wh_NameLastChar
=42530					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6a2	c5					.byte (("Again"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= NN+CO+IM+UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6a3	5c					.byte WordFlags	;wh_Flags
>a6a4	03					.byte 3	;wh_CodeLength
>a6a5	11					  .byte LinkDisplacement
=$a6a6					XtPtr1 ::= *
=42530					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6a6	20 3d b4	jsr $b43d	Again:		jsr underflow_2
.a6a9	a9 95		lda #$95			lda #<Begin	; check pairing
.a6ab	20 13 b2	jsr $b213			jsr QPairCtlA
.a6ae	4c 4a cd	jmp $cd4a			jmp Jmp_Comma	; Compile a jmp abs.
=11					CL	.var *-XtPtr1
=$a6b1					en = *	; remember here
>a6a4	0b					.byte CL	;wh_CodeLength
>a6b1	55 6e 74 69 6c			L1:	.text "Until"	;  name of word as a string, ending at wh_NameLastChar
=42550					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6b6	85					.byte (("Until"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>a6b7	1c					.byte WordFlags	;wh_Flags
>a6b8	03					.byte 3	;wh_CodeLength
>a6b9	14					  .byte LinkDisplacement
=$a6ba					XtPtr1 ::= *
=42550					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6ba	a9 95		lda #$95	Until:		lda #<Begin		; check pairing
.a6bc	20 13 b2	jsr $b213			jsr QPairCtlA
.a6bf	4c f6 a6	jmp $a6f6			jmp ZBranch_Comma	; The address to loop back to is on the stack.
=8					CL	.var *-XtPtr1
=$a6c2					en = *	; remember here
>a6b8	08					.byte CL	;wh_CodeLength
>a6c2	57 68 69 6c 65			L1:	.text "While"	;  name of word as a string, ending at wh_NameLastChar
=42567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6c7	a5					.byte (("While"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>a6c8	1c					.byte WordFlags	;wh_Flags
>a6c9	03					.byte 3	;wh_CodeLength
>a6ca	11					  .byte LinkDisplacement
=$a6cb					XtPtr1 ::= *
=42567					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6cb	a9 95		lda #$95	While:		lda #<Begin	; check pairing
.a6cd	20 13 b2	jsr $b213			jsr QPairCtlA
.a6d0	20 39 a6	jsr $a639			jsr If3		; Compile a 0branch & jmp, push addr of addr
.a6d3	20 89 cf	jsr $cf89			jsr Swap	; Swap the two addresses on the stack.
.a6d6	a9 95		lda #$95			lda #<Begin	; pairing marker
.a6d8	4c ec b7	jmp $b7ec			jmp PushZA
=16					CL	.var *-XtPtr1
=$a6db					en = *	; remember here
>a6c9	10					.byte CL	;wh_CodeLength
>a6db	52 65 70 65 61 74		L1:	.text "Repeat"	;  name of word as a string, ending at wh_NameLastChar
=42593					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a6e1	86					.byte (("Repeat"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a6e2	1c					.byte WordFlags	;wh_Flags
>a6e3	03					.byte 3	;wh_CodeLength
>a6e4	1a					  .byte LinkDisplacement
=$a6e5					XtPtr1 ::= *
=42593					WordListLink ::= Nt0 ; remember the nt of this word for later
.a6e5	a9 95		lda #$95	Repeat:		lda #<Begin	; check pairing
.a6e7	20 13 b2	jsr $b213			jsr QPairCtlA
.a6ea	20 4a cd	jsr $cd4a			jsr Jmp_Comma	; compile the jmp back
.a6ed	20 3c ca	jsr $ca3c			jsr Here	; patch the WHILE jmp operand
.a6f0	20 89 cf	jsr $cf89			jsr Swap
.a6f3	4c c7 ce	jmp $cec7			jmp Store
=17					CL	.var *-XtPtr1
=$a6f6					en = *	; remember here
>a6e3	11					.byte CL	;wh_CodeLength
.a6f6					ZBranch_Comma:
.a6f6	a9 e8		lda #$e8			lda #$e8		; compile inx; inx
.a6f8	a8		tay				tay
.a6f9	20 14 cd	jsr $cd14			jsr Comma_YA
.a6fc	a9 b5		lda #$b5			lda #$b5		; compile lda DStack-2,x
.a6fe	a0 22		ldy #$22			ldy #DStack-2
.a700	20 14 cd	jsr $cd14			jsr Comma_YA
.a703	a9 15		lda #$15			lda #$15		; compile ora DStack-1,x
.a705	a0 23		ldy #$23			ldy #DStack-1
.a707	20 14 cd	jsr $cd14			jsr Comma_YA
.a70a	a9 f0		lda #$f0			lda #$f0		; BEQ
.a70c	d0 0e		bne $a71c			bne Branch_CommaA
>a70e	42 72 61 6e 63 68 2c		L1:	.text "Branch,"	;  name of word as a string, ending at wh_NameLastChar
=42645					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a715	87					.byte (("Branch,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>a716	10					.byte WordFlags	;wh_Flags
>a717	03					.byte 3	;wh_CodeLength
>a718	34					  .byte LinkDisplacement
=$a719					XtPtr1 ::= *
=42645					WordListLink ::= Nt0 ; remember the nt of this word for later
.a719	20 e5 b3	jsr $b3e5			jsr PopA		; pop opcode to A
.a71c					Branch_CommaA:
.a71c	48		pha				pha			; save branch opcode
.a71d	38		sec				sec			; AY= displacement+2
.a71e	b5 24		lda $24,x			lda DStack+0,x
.a720	e5 00		sbc $00				sbc cp+0
.a722	a8		tay				tay
.a723	b5 25		lda $25,x			lda DStack+1,x
.a725	e5 01		sbc $01				sbc cp+1
.a727	c9 ff		cmp #$ff			cmp #$ff		; offset maybe in range?
.a729	f0 0b		beq $a736			beq _rev
.a72b	68		pla		_2byte:		pla			; restore branch opcode
.a72c	49 20		eor #$20			eor #$20		; reverse branch sense
.a72e	a0 03		ldy #$03			ldy #3			; compile Bcc *+5
.a730	20 14 cd	jsr $cd14			jsr Comma_YA
.a733	4c 4a cd	jmp $cd4a			jmp Jmp_Comma		; compile JMP abs
.a736	c0 82		cpy #$82	_rev:		cpy #$80+2		; offset in range?
.a738	90 f1		bcc $a72b			bcc _2byte
.a73a	e8		inx		_1byte:		inx			; Drop address
.a73b	e8		inx				inx
.a73c	88		dey				dey			; fix displacement
.a73d	88		dey				dey
.a73e	68		pla				pla			; restore branch opcode
.a73f	4c 14 cd	jmp $cd14			jmp Comma_YA		; compile Bcc
>a742	57 6f 72 64			L1:	.text "Word"	;  name of word as a string, ending at wh_NameLastChar
=42694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a746	84					.byte (("Word"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>a747	50					.byte WordFlags	;wh_Flags
>a748	03					.byte 3	;wh_CodeLength
>a749	31					  .byte LinkDisplacement
=$a74a					XtPtr1 ::= *
=42694					WordListLink ::= Nt0 ; remember the nt of this word for later
.a74a					Word:
.a74a	20 29 b4	jsr $b429			jsr underflow_1
.a74d	a4 08		ldy $08				ldy toin+0		; >IN
.a74f	c4 06		cpy $06		_DelimLoop:	cpy ciblen+0		; quit if end of input
.a751	f0 09		beq $a75c			beq _found_char
.a753	b1 04		lda ($04),y			lda (cib),y
.a755	d5 24		cmp $24,x			cmp DStack+0,x		; ASCII of delimiter
.a757	d0 03		bne $a75c			bne _found_char
.a759	c8		iny				iny
.a75a	d0 f3		bne $a74f			bne _DelimLoop
.a75c					_found_char:
.a75c	84 08		sty $08				sty toin+0		; Save index of where word starts
.a75e	20 c3 ba	jsr $bac3			jsr Parse		; The real work is done by parse
.a761	20 e5 b3	jsr $b3e5			jsr PopA		; pop u
.a764	85 16		sta $16				sta tmp2+0
.a766	20 0b b4	jsr $b40b			jsr PopTmp1		; pop addr
.a769	20 3c ca	jsr $ca3c			jsr Here		; Return caddr
.a76c	a5 16		lda $16				lda tmp2+0
.a76e	a0 00		ldy #$00			ldy #0			; Save length of string
.a770	f0 03		beq $a775			beq _CopyStart
.a772	b1 14		lda ($14),y	_CopyLoop:	lda (tmp1),y
.a774	c8		iny				iny
.a775	20 fb cc	jsr $ccfb	_CopyStart:	jsr C_Comma_A
.a778	c4 16		cpy $16				cpy tmp2+0
.a77a	90 f6		bcc $a772			bcc _CopyLoop
=50					CL	.var *-XtPtr1
=$a77c					en = *	; remember here
>a748	32					.byte CL	;wh_CodeLength
.a77c	60		rts				rts
>a77d	28				L1:	.text "("	;  name of word as a string, ending at wh_NameLastChar
=42750					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a77e	01					.byte (("("[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>a77f	18					.byte WordFlags	;wh_Flags
>a780	03					.byte 3	;wh_CodeLength
>a781	38					  .byte LinkDisplacement
=$a782					XtPtr1 ::= *
=42750					WordListLink ::= Nt0 ; remember the nt of this word for later
.a782	a9 29		lda #$29	Paren:		lda #')'		; separator
.a784	20 c6 ba	jsr $bac6			jsr Parse_A		; Call parse.
.a787	4c 4a c5	jmp $c54a			jmp Two_drop		; 2Drop the result.
=8					CL	.var *-XtPtr1
=$a78a					en = *	; remember here
>a780	08					.byte CL	;wh_CodeLength
>a78a	2e 28				L1:	.text ".("	;  name of word as a string, ending at wh_NameLastChar
=42764					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a78c	02					.byte ((".("[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>a78d	18					.byte WordFlags	;wh_Flags
>a78e	03					.byte 3	;wh_CodeLength
>a78f	0e					  .byte LinkDisplacement
=$a790					XtPtr1 ::= *
=42764					WordListLink ::= Nt0 ; remember the nt of this word for later
.a790	a9 29		lda #$29	Dot_paren:	lda #')'
.a792	20 c6 ba	jsr $bac6			jsr Parse_A
.a795	4c ee cd	jmp $cdee			jmp Type
=8					CL	.var *-XtPtr1
=$a798					en = *	; remember here
>a78e	08					.byte CL	;wh_CodeLength
>a798	48 61 73 68			L1:	.text "Hash"	;  name of word as a string, ending at wh_NameLastChar
=42780					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a79c	04					.byte (("Hash"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>a79d	10					.byte WordFlags	;wh_Flags
>a79e	03					.byte 3	;wh_CodeLength
>a79f	10					  .byte LinkDisplacement
=$a7a0					XtPtr1 ::= *
=42780					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7a0	20 e5 b3	jsr $b3e5	Hash:		jsr PopA		; save length
.a7a3	85 16		sta $16				sta tmp2+0
.a7a5	b5 24		lda $24,x			lda DStack+0,x		; copy addr
.a7a7	b4 25		ldy $25,x			ldy DStack+1,x
.a7a9	85 14		sta $14				sta tmp1+0
.a7ab	84 15		sty $15				sty tmp1+1
.a7ad	a9 b3		lda #$b3			lda #$b3		; init hash
.a7af	95 24		sta $24,x			sta DStack+0,x
.a7b1	95 25		sta $25,x			sta DStack+1,x
.a7b3	a0 00		ldy #$00			ldy #0			; for each char
.a7b5	f0 15		beq $a7cc			beq _next
.a7b7	b1 14		lda ($14),y	_loop:		lda (tmp1),y		;   get char
.a7b9	c9 61		cmp #$61			cmp #'a'		;   uppercase
.a7bb	90 06		bcc $a7c3			bcc _3
.a7bd	c9 7b		cmp #$7b			cmp #'z'+1
.a7bf	b0 02		bcs $a7c3			bcs _3
.a7c1	29 df		and #$df			and #$df
.a7c3	16 24		asl $24,x	_3:		asl DStack+0,x		;   add to hash
.a7c5	36 25		rol $25,x			rol DStack+1,x
.a7c7	75 24		adc $24,x			adc DStack+0,x
.a7c9	95 24		sta $24,x			sta DStack+0,x
.a7cb	c8		iny				iny
.a7cc	c4 16		cpy $16		_Next:		cpy tmp2+0
.a7ce	90 e7		bcc $a7b7			bcc _loop
=48					CL	.var *-XtPtr1
=$a7d0					en = *	; remember here
>a79e	30					.byte CL	;wh_CodeLength
.a7d0	60		rts				rts
>a7d1	45 6e 76 69 72 6f 6e 6d		L1:	.text "Environment?"	;  name of word as a string, ending at wh_NameLastChar
>a7d9	65 6e 74 3f
=42845					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a7dd	ec					.byte (("Environment?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=65					LinkDisplacement = Nt0-WordListLink
>a7de	10					.byte WordFlags	;wh_Flags
>a7df	03					.byte 3	;wh_CodeLength
>a7e0	41					  .byte LinkDisplacement
=$a7e1					XtPtr1 ::= *
=42845					WordListLink ::= Nt0 ; remember the nt of this word for later
.a7e1					Environment_Q:
.a7e1	20 a0 a7	jsr $a7a0			jsr Hash		; ( hash )
.a7e4	a0 00		ldy #$00			ldy #0			; Y= table index
.a7e6	f0 0a		beq $a7f2			beq _entry_test
.a7e8	98		tya		_entry_next:	tya
.a7e9	c0 34		cpy #$34			cpy #_table_dbl		; if double
.a7eb	90 02		bcc $a7ef			bcc +
.a7ed	69 01		adc #$01			adc #6-4-1		;   skip double
.a7ef	69 04		adc #$04	+		adc #4			;   skip single
.a7f1	a8		tay		_3:		tay
.a7f2	b9 26 a8	lda $a826,y	_entry_test:	lda _Table+0,y		; match?
.a7f5	f0 28		beq $a81f			beq _notfound
.a7f7	d5 24		cmp $24,x			cmp DStack+0,x
.a7f9	d0 ed		bne $a7e8			bne _entry_next
.a7fb	b9 27 a8	lda $a827,y			lda _Table+1,y
.a7fe	d5 25		cmp $25,x			cmp DStack+1,x
.a800	d0 e6		bne $a7e8			bne _entry_next
.a802	b9 28 a8	lda $a828,y			lda _Table+2,y
.a805	95 24		sta $24,x			sta DStack+0,x
.a807	b9 29 a8	lda $a829,y			lda _Table+3,y
.a80a	95 25		sta $25,x			sta DStack+1,x
.a80c	c0 34		cpy #$34			cpy #_table_dbl		; single or double data?
.a80e	90 0c		bcc $a81c			bcc _single
.a810	ca		dex				dex			;  push 2nd cell
.a811	ca		dex				dex
.a812	b9 2a a8	lda $a82a,y			lda _Table+4,y
.a815	95 24		sta $24,x			sta DStack+0,x
.a817	b9 2b a8	lda $a82b,y			lda _Table+5,y
.a81a	95 25		sta $25,x			sta DStack+1,x
.a81c					_single:
.a81c	4c cc b7	jmp $b7cc			jmp True		; return True
.a81f					_notfound:
.a81f	a9 00		lda #$00			lda #0			; return 0
.a821	95 24		sta $24,x			sta DStack+0,x
.a823	95 25		sta $25,x			sta DStack+1,x
.a825	60		rts				rts
=69					CL	.var *-XtPtr1
=$a826					en = *	; remember here
>a7df	45					.byte CL	;wh_CodeLength
.a826					_Table:
>a826	5e e6 ff 7f				.word $e65e,$7fff	; "/COUNTED-STRING"
>a82a	be 79 ff 00				.word $79BE,$ff		; "/HOLD"
>a82e	b9 3c 54 00				.word $3cb9,padoffset	; "/PAD"
>a832	8b 81 08 00				.word $818b,8		; "ADDRESS-UNIT-BITS"
>a836	57 fc 00 00				.word $fc57,0		; "FLOORED"	we have symmetric)
>a83a	4f fb ff 00				.word $fb4f,$ff		; "MAX-CHAR"
>a83e	56 7f ff 7f				.word $7f56,$7fff	; "MAX-N"
>a842	5d 7f ff ff				.word $7f5d,$ffff	; "MAX-U"
>a846	38 ce 80 00				.word $ce38,$80		; "RETURN-STACK-CELLS"
>a84a	f2 c0 14 00				.word $c0f2,DStack0/2	; "STACK-CELLS"
>a84e	36 e3 09 00				.word $e336,9		; "WORDLISTS"
>a852	4a f2 ff ff				.word $f24a,$ffff	; "FLOATING"		flag	no	   floating-point word set present
>a856	01 99 0a 00				.word $9901,FDim	; "FLOATING-STACK"	n	yes	   If n = zero, floating-point numbers are
=52					_table_dbl = *-_Table	; These return a double-cell number
>a85a	4c 7f ff ff ff 7f			.word $7f4c,$ffff,$7fff	; "MAX-D"
>a860	fe fe ff ff ff ff			.word $fefe,$ffff,$ffff	; "MAX-UD"
>a866	00					.byte 0		; end of list
>a867	44 75 6d 70			L1:	.text "Dump"	;  name of word as a string, ending at wh_NameLastChar
=42987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a86b	04					.byte (("Dump"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=142					LinkDisplacement = Nt0-WordListLink
>a86c	50					.byte WordFlags	;wh_Flags
>a86d	03					.byte 3	;wh_CodeLength
>a86e	8e					  .byte LinkDisplacement
=$a86f					XtPtr1 ::= *
=42987					WordListLink ::= Nt0 ; remember the nt of this word for later
.a86f					Dump:
.a86f	20 3d b4	jsr $b43d			jsr underflow_2
.a872	ca		dex				dex			; alloc work area
.a873	ca		dex				dex
.a874					_row:
.a874	20 75 ab	jsr $ab75			jsr CR
.a877	b5 29		lda $29,x			lda DStack+5,x		; print address number
.a879	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a87c	b5 28		lda $28,x			lda DStack+4,x
.a87e	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a881	20 e2 cd	jsr $cde2			jsr Space
.a884	20 e2 cd	jsr $cde2			jsr Space
.a887	a9 00		lda #$00			lda #0
.a889	95 24		sta $24,x			sta DStack+0,x
.a88b					_loop:
.a88b	b5 26		lda $26,x			lda DStack+2,x
.a88d	15 27		ora $27,x			ora DStack+3,x
.a88f	f0 36		beq $a8c7			beq _all_printed
.a891	a1 28		lda ($28,x)			lda (DStack+4,x)
.a893	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a896	20 e2 cd	jsr $cde2			jsr Space
.a899	a1 28		lda ($28,x)			lda (DStack+4,x)
.a89b	20 1d a9	jsr $a91d			jsr is_printable
.a89e	b0 02		bcs $a8a2			bcs _printable
.a8a0	a9 2e		lda #$2e			lda #'.'		 ; Print dot if not printable
.a8a2					_printable:
.a8a2	b4 24		ldy $24,x			ldy DStack+0,x
.a8a4	91 00		sta ($00),y			sta (cp),y
.a8a6	c0 07		cpy #$07			cpy #7
.a8a8	d0 03		bne $a8ad			bne +
.a8aa	20 e2 cd	jsr $cde2			jsr Space
.a8ad					+
.a8ad	f6 28		inc $28,x			inc DStack+4,x
.a8af	d0 02		bne $a8b3			bne +
.a8b1	f6 29		inc $29,x			inc DStack+5,x
.a8b3					+
.a8b3	20 55 ca	jsr $ca55			jsr NOS_One_Minus	; loop counter
.a8b6	f6 24		inc $24,x			inc DStack+0,x
.a8b8	b5 24		lda $24,x			lda DStack+0,x
.a8ba	c9 10		cmp #$10			cmp #16
.a8bc	90 cd		bcc $a88b			bcc _loop		; next byte
.a8be	20 e2 cd	jsr $cde2			jsr Space
.a8c1	20 d6 a8	jsr $a8d6			jsr dump_print_ascii
.a8c4	4c 74 a8	jmp $a874			jmp _row		; new row
.a8c7					_all_printed:
.a8c7	b5 24		lda $24,x			lda DStack+0,x
.a8c9	f0 06		beq $a8d1			beq _done
.a8cb	20 e2 cd	jsr $cde2			jsr Space
.a8ce	20 d6 a8	jsr $a8d6			jsr dump_print_ascii
.a8d1					_done:
.a8d1	e8		inx				inx			; drop work area
.a8d2	e8		inx				inx
.a8d3	4c 4a c5	jmp $c54a			jmp Two_drop		; one byte less than 4x INX
.a8d6					dump_print_ascii:
.a8d6	a0 00		ldy #$00			ldy #0
.a8d8					_loop:
.a8d8	b1 00		lda ($00),y			lda (cp),y
.a8da	20 d6 cd	jsr $cdd6			jsr Emit_A
.a8dd	c8		iny				iny
.a8de	c0 08		cpy #$08			cpy #8
.a8e0	d0 03		bne $a8e5			bne +
.a8e2	20 e2 cd	jsr $cde2			jsr Space
.a8e5					+
.a8e5	98		tya				tya
.a8e6	d5 24		cmp $24,x			cmp DStack+0,x
.a8e8	90 ee		bcc $a8d8			bcc _loop
.a8ea	60		rts				rts
=124					CL	.var *-XtPtr1
=$a8eb					en = *	; remember here
>a86d	7c					.byte CL	;wh_CodeLength
>a8eb	43 2e 48 65 78			L1:	.text "C.Hex"	;  name of word as a string, ending at wh_NameLastChar
=43120					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a8f0	05					.byte (("C.Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=133					LinkDisplacement = Nt0-WordListLink
>a8f1	10					.byte WordFlags	;wh_Flags
>a8f2	03					.byte 3	;wh_CodeLength
>a8f3	85					  .byte LinkDisplacement
=$a8f4					XtPtr1 ::= *
=43120					WordListLink ::= Nt0 ; remember the nt of this word for later
.a8f4	20 e5 b3	jsr $b3e5	C_Dot_Hex:	jsr PopA
.a8f7	48		pha		C_Dot_Hex_A:	pha
.a8f8	4a		lsr a				lsr		; convert high nibble first
.a8f9	4a		lsr a				lsr
.a8fa	4a		lsr a				lsr
.a8fb	4a		lsr a				lsr
.a8fc	20 00 a9	jsr $a900			jsr _nibble_to_ascii
.a8ff	68		pla				pla
.a900					_nibble_to_ascii:
.a900	29 0f		and #$0f			and #$0F	; only use lower nibble
.a902	c9 0a		cmp #$0a			cmp #9+1
.a904	90 02		bcc $a908			bcc +
.a906	69 06		adc #$06			adc #6
.a908	69 30		adc #$30	+		adc #'0'
.a90a	4c d6 cd	jmp $cdd6			jmp Emit_A
=25					CL	.var *-XtPtr1
=$a90d					en = *	; remember here
>a8f2	19					.byte CL	;wh_CodeLength
>a90d	2e 48 65 78			L1:	.text ".Hex"	;  name of word as a string, ending at wh_NameLastChar
=43153					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a911	04					.byte ((".Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>a912	10					.byte WordFlags	;wh_Flags
>a913	03					.byte 3	;wh_CodeLength
>a914	21					  .byte LinkDisplacement
=$a915					XtPtr1 ::= *
=43153					WordListLink ::= Nt0 ; remember the nt of this word for later
.a915	b5 25		lda $25,x	Dot_Hex:	lda DStack+1,x	; do hi byte
.a917	20 f7 a8	jsr $a8f7			jsr C_Dot_Hex_A
.a91a	4c f4 a8	jmp $a8f4			jmp C_Dot_Hex	; do lo byte
=8					CL	.var *-XtPtr1
=$a91d					en = *	; remember here
>a913	08					.byte CL	;wh_CodeLength
.a91d					is_printable:
.a91d	c9 20		cmp #$20	                cmp #AscSP              ; $20
.a91f	90 07		bcc $a928	                bcc _done
.a921	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.a923	b0 02		bcs $a927	                bcs _failed
.a925	38		sec		                sec
.a926	60		rts		                rts
.a927	18		clc		_failed:	clc
.a928	60		rts		_done:		rts
>a929	2e 53				L1:	.text ".S"	;  name of word as a string, ending at wh_NameLastChar
=43179					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a92b	62					.byte ((".S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>a92c	10					.byte WordFlags	;wh_Flags
>a92d	03					.byte 3	;wh_CodeLength
>a92e	1a					  .byte LinkDisplacement
=$a92f					XtPtr1 ::= *
=43179					WordListLink ::= Nt0 ; remember the nt of this word for later
.a92f					Dot_s:
.a92f	a9 3c		lda #$3c			lda #'<'
.a931	20 d6 cd	jsr $cdd6			jsr Emit_A
.a934	20 44 c2	jsr $c244			jsr Depth	; ( -- u )
.a937	20 2d cc	jsr $cc2d			jsr print_u
.a93a	a9 3e		lda #$3e			lda #'>'
.a93c	20 d6 cd	jsr $cdd6			jsr Emit_A
.a93f	20 e2 cd	jsr $cde2			jsr Space
.a942	a0 28		ldy #$28			ldy #DStack0		; for each cell on the stack
.a944	88		dey		_loop:		dey
.a945	88		dey				dey
.a946	86 14		stx $14				stx tmp1
.a948	c4 14		cpy $14				cpy tmp1
.a94a	90 15		bcc $a961			bcc _done
.a94c	98		tya				tya			; save index
.a94d	48		pha				pha
.a94e	ca		dex				dex			; push stack[index]
.a94f	ca		dex				dex
.a950	b9 24 00	lda $0024,y			lda DStack+0,y
.a953	95 24		sta $24,x			sta DStack+0,x
.a955	b9 25 00	lda $0025,y			lda DStack+1,y
.a958	95 25		sta $25,x			sta DStack+1,x
.a95a	20 e3 cb	jsr $cbe3			jsr Dot
.a95d	68		pla				pla			; restore index
.a95e	a8		tay				tay
.a95f	d0 e3		bne $a944			bne _loop
.a961					_done:
=50					CL	.var *-XtPtr1
=$a961					en = *	; remember here
>a92d	32					.byte CL	;wh_CodeLength
.a961	60		rts				rts
>a962	43 6f 6d 70 61 72 65		L1:	.text "Compare"	;  name of word as a string, ending at wh_NameLastChar
=43241					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a969	a7					.byte (("Compare"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=62					LinkDisplacement = Nt0-WordListLink
>a96a	50					.byte WordFlags	;wh_Flags
>a96b	03					.byte 3	;wh_CodeLength
>a96c	3e					  .byte LinkDisplacement
=$a96d					XtPtr1 ::= *
=43241					WordListLink ::= Nt0 ; remember the nt of this word for later
.a96d					Compare:
.a96d	20 47 b4	jsr $b447			jsr underflow_4
.a970	b5 24		lda $24,x			lda DStack+0,x		; tmp3+1= u2.lo
.a972	85 19		sta $19				sta tmp3+1
.a974	b5 26		lda $26,x			lda DStack+2,x		; tmp2= addr2
.a976	b4 27		ldy $27,x			ldy DStack+3,x
.a978	85 16		sta $16				sta tmp2+0
.a97a	84 17		sty $17				sty tmp2+1
.a97c	b5 28		lda $28,x			lda DStack+4,x		; tmp3+0= u1.lo
.a97e	85 18		sta $18				sta tmp3+0
.a980	b5 2a		lda $2a,x			lda DStack+6,x		; tmp1= addr1
.a982	b4 2b		ldy $2b,x			ldy DStack+7,x
.a984	85 14		sta $14				sta tmp1+0
.a986	84 15		sty $15				sty tmp1+1
.a988	a0 00		ldy #$00			ldy #0		; for each char
.a98a					_loop:
.a98a	c4 18		cpy $18				cpy tmp3+0	; string1 empty?
.a98c	f0 13		beq $a9a1			beq _str1
.a98e					_L1:
.a98e	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a990	f0 27		beq $a9b9			beq _str2
.a992					_L2:
.a992	b1 14		lda ($14),y			lda (tmp1),y	; Are they different?
.a994	d1 16		cmp ($16),y			cmp (tmp2),y
.a996	d0 19		bne $a9b1			bne _neq
.a998	c8		iny				iny		; to next char
.a999	d0 ef		bne $a98a			bne _loop
.a99b	e6 15		inc $15				inc tmp1+1	; to next page
.a99d	e6 17		inc $17				inc tmp2+1
.a99f	d0 e9		bne $a98a			bne _loop
.a9a1	d6 29		dec $29,x	_str1:		dec DStack+5,x	; string1 really empty?
.a9a3	10 e9		bpl $a98e			bpl _L1
.a9a5	c4 19		cpy $19				cpy tmp3+1	; string2 empty?
.a9a7	d0 0a		bne $a9b3			bne _less
.a9a9	b5 25		lda $25,x			lda DStack+1,x
.a9ab	d0 06		bne $a9b3			bne _less
.a9ad	a9 00		lda #$00	_equal:		lda #0		; Return 0
.a9af	f0 0e		beq $a9bf			beq _gt2
.a9b1	b0 0a		bcs $a9bd	_neq:		bcs _greater
.a9b3	a9 ff		lda #$ff	_less:		lda #$FF	; Return -1
.a9b5	95 2a		sta $2a,x			sta DStack+6,x
.a9b7	d0 0a		bne $a9c3			bne _done
.a9b9	d6 25		dec $25,x	_str2:		dec DStack+1,x	; is string2 empty?
.a9bb	10 d5		bpl $a992			bpl _L2
.a9bd	a9 01		lda #$01	_greater:	lda #1		; Return 1
.a9bf	95 2a		sta $2a,x	_gt2:		sta DStack+6,x
.a9c1	a9 00		lda #$00			lda #0
.a9c3	95 2b		sta $2b,x	_done:		sta DStack+7,x
.a9c5	8a		txa				txa		; Remove all but the result from the stack.
.a9c6	18		clc				clc
.a9c7	69 06		adc #$06			adc #6
.a9c9	aa		tax				tax
=93					CL	.var *-XtPtr1
=$a9ca					en = *	; remember here
>a96b	5d					.byte CL	;wh_CodeLength
.a9ca	60		rts				rts
>a9cb	53 65 61 72 63 68		L1:	.text "Search"	;  name of word as a string, ending at wh_NameLastChar
=43345					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>a9d1	06					.byte (("Search"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=104					LinkDisplacement = Nt0-WordListLink
>a9d2	50					.byte WordFlags	;wh_Flags
>a9d3	03					.byte 3	;wh_CodeLength
>a9d4	68					  .byte LinkDisplacement
=$a9d5					XtPtr1 ::= *
=43345					WordListLink ::= Nt0 ; remember the nt of this word for later
.a9d5					Search:
.a9d5	20 47 b4	jsr $b447			jsr underflow_4
.a9d8	b5 24		lda $24,x			lda DStack+0,x
.a9da	15 25		ora $25,x			ora DStack+1,x
.a9dc	d0 09		bne $a9e7			bne _start_search
.a9de	e8		inx				inx		; Drop u2
.a9df	e8		inx				inx
.a9e0	a9 ff		lda #$ff			lda #$FF	; overwrite addr2 with a true flag
.a9e2	95 24		sta $24,x			sta DStack+0,x
.a9e4	95 25		sta $25,x			sta DStack+1,x
.a9e6	60		rts				rts
.a9e7					_start_search:
.a9e7	20 fa b7	jsr $b7fa			jsr Zero
.a9ea					_search_loop:
.a9ea	18		clc				clc
.a9eb	b5 24		lda $24,x			lda DStack+0,x
.a9ed	75 26		adc $26,x			adc DStack+2,x
.a9ef	85 14		sta $14				sta tmp1+0
.a9f1	b5 25		lda $25,x			lda DStack+1,x
.a9f3	75 27		adc $27,x			adc DStack+3,x
.a9f5	85 15		sta $15				sta tmp1+1
.a9f7	d5 2b		cmp $2b,x			cmp DStack+7,x
.a9f9	90 13		bcc $aa0e			bcc _init_comparison ; Obviously less
.a9fb	d0 06		bne $aa03			bne _not_found
.a9fd	b5 2a		lda $2a,x			lda DStack+6,x
.a9ff	c5 14		cmp $14				cmp tmp1
.aa01	b0 0b		bcs $aa0e			bcs _init_comparison
.aa03					_not_found:
.aa03	e8		inx				inx		; Remove offset
.aa04	e8		inx				inx
.aa05	e8		inx				inx		; Remove u2
.aa06	e8		inx				inx
.aa07	a9 00		lda #$00			lda #0
.aa09	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a false flag
.aa0b	95 25		sta $25,x			sta DStack+1,x
.aa0d	60		rts				rts
.aa0e					_init_comparison:
.aa0e	18		clc				clc
.aa0f	b5 2c		lda $2c,x			lda DStack+8,x
.aa11	75 24		adc $24,x			adc DStack+0,x
.aa13	85 14		sta $14				sta tmp1
.aa15	b5 2d		lda $2d,x			lda DStack+9,x
.aa17	75 25		adc $25,x			adc DStack+1,x
.aa19	85 15		sta $15				sta tmp1+1
.aa1b	b5 28		lda $28,x			lda DStack+4,x
.aa1d	85 16		sta $16				sta tmp2
.aa1f	b5 29		lda $29,x			lda DStack+5,x
.aa21	85 17		sta $17				sta tmp2+1
.aa23	b5 26		lda $26,x			lda DStack+2,x
.aa25	85 18		sta $18				sta tmp3+0
.aa27	b5 27		lda $27,x			lda DStack+3,x
.aa29	85 19		sta $19				sta tmp3+1
.aa2b					_comparison_loop:
.aa2b	a0 00		ldy #$00			ldy #0
.aa2d	b1 14		lda ($14),y			lda (tmp1),y
.aa2f	d1 16		cmp ($16),y			cmp (tmp2),y
.aa31	f0 06		beq $aa39			beq _letters_match
.aa33	20 6e ca	jsr $ca6e			jsr One_plus
.aa36	4c ea a9	jmp $a9ea			jmp _search_loop
.aa39					_letters_match:
.aa39	e6 14		inc $14				inc tmp1
.aa3b	d0 02		bne $aa3f			bne +
.aa3d	e6 15		inc $15				inc tmp1+1
.aa3f					+
.aa3f	e6 16		inc $16				inc tmp2
.aa41	d0 02		bne $aa45			bne +
.aa43	e6 17		inc $17				inc tmp2+1
.aa45					+
.aa45	a5 18		lda $18				lda tmp3
.aa47	d0 02		bne $aa4b			bne +
.aa49	c6 19		dec $19				dec tmp3+1
.aa4b					+
.aa4b	c6 18		dec $18				dec tmp3
.aa4d	a5 18		lda $18				lda tmp3
.aa4f	05 19		ora $19				ora tmp3+1
.aa51	d0 d8		bne $aa2b			bne _comparison_loop ; Check the next letter
.aa53	18		clc				clc
.aa54	b5 24		lda $24,x			lda DStack+0,x
.aa56	75 2c		adc $2c,x			adc DStack+8,x
.aa58	95 2c		sta $2c,x			sta DStack+8,x
.aa5a	b5 25		lda $25,x			lda DStack+1,x
.aa5c	75 2d		adc $2d,x			adc DStack+9,x
.aa5e	95 2d		sta $2d,x			sta DStack+9,x
.aa60	38		sec				sec
.aa61	b5 2a		lda $2a,x			lda DStack+6,x
.aa63	f5 24		sbc $24,x			sbc DStack+0,x
.aa65	95 2a		sta $2a,x			sta DStack+6,x
.aa67	b5 2b		lda $2b,x			lda DStack+7,x
.aa69	f5 25		sbc $25,x			sbc DStack+1,x
.aa6b	95 2b		sta $2b,x			sta DStack+7,x
.aa6d	e8		inx				inx		; drop offset
.aa6e	e8		inx				inx
.aa6f	e8		inx				inx		; drop u2
.aa70	e8		inx				inx
.aa71	a9 ff		lda #$ff			lda #$FF
.aa73	95 24		sta $24,x			sta DStack+0,x	; Turn addr2 into a true flag.
.aa75	95 25		sta $25,x			sta DStack+1,x
=162					CL	.var *-XtPtr1
=$aa77					en = *	; remember here
>a9d3	a2					.byte CL	;wh_CodeLength
.aa77	60		rts				rts
>aa78	4d 61 72 6b 65 72		L1:	.text "Marker"	;  name of word as a string, ending at wh_NameLastChar
=43518					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aa7e	46					.byte (("Marker"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=173					LinkDisplacement = Nt0-WordListLink
>aa7f	18					.byte WordFlags	;wh_Flags
>aa80	03					.byte 3	;wh_CodeLength
>aa81	ad					  .byte LinkDisplacement
=$aa82					XtPtr1 ::= *
=43518					WordListLink ::= Nt0 ; remember the nt of this word for later
.aa82					Marker:
.aa82	20 3c ca	jsr $ca3c			jsr Here		; Save original CP, which
.aa85	20 1d c1	jsr $c11d			jsr Header_Build	; compile a word header, but don't link into wordlist
.aa88	a0 aa		ldy #$aa			ldy #>_runtime		; compile JSR _runtime
.aa8a	a9 a2		lda #$a2			lda #<_runtime
.aa8c	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.aa8f	20 11 cd	jsr $cd11			jsr Comma		; Append original CP
.aa92	a0 00		ldy #$00			ldy #0			; Start at CURRENT
.aa94	b9 10 03	lda $0310,y	_loop:		lda CurrentV,y
.aa97	20 fb cc	jsr $ccfb			jsr C_Comma_A
.aa9a	c8		iny				iny
.aa9b	c0 24		cpy #$24			cpy #MarkEnd-CurrentV	; One past the end of the search order.
.aa9d	90 f5		bcc $aa94			bcc _loop
.aa9f	4c 12 c1	jmp $c112			jmp Header_Link		; link built header into current dictionary
=32					CL	.var *-XtPtr1
=$aaa2					en = *	; remember here
>aa80	20					.byte CL	;wh_CodeLength
.aaa2					_runtime:
.aaa2	68		pla				pla		; Pop the RTS address off the stack
.aaa3	85 14		sta $14				sta tmp1+0
.aaa5	68		pla				pla
.aaa6	85 15		sta $15				sta tmp1+1
.aaa8	a0 01		ldy #$01			ldy #1		; start just aftet JSR _runtime
.aaaa	b1 14		lda ($14),y			lda (tmp1),y	; CP was stored first
.aaac	85 00		sta $00				sta cp+0
.aaae	c8		iny				iny
.aaaf	b1 14		lda ($14),y			lda (tmp1),y
.aab1	85 01		sta $01				sta cp+1
.aab3	c8		iny				iny
.aab4					_rloop:
.aab4	b1 14		lda ($14),y			lda (tmp1),y
.aab6	99 0d 03	sta $030d,y			sta CurrentV-2-1,y
.aab9	c8		iny				iny
.aaba	c0 27		cpy #$27			cpy #MarkEnd-CurrentV+2+1 ; One past the end of the search order.
.aabc	90 f6		bcc $aab4			bcc _rloop
.aabe	60		rts				rts
>aabf	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=43588					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aac4	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>aac5	10					.byte WordFlags	;wh_Flags
>aac6	03					.byte 3	;wh_CodeLength
>aac7	46					  .byte LinkDisplacement
=$aac8					XtPtr1 ::= *
=43588					WordListLink ::= Nt0 ; remember the nt of this word for later
.aac8					Words:
.aac8	a9 ff		lda #$ff			lda #$ff
.aaca	20 ec b7	jsr $b7ec			jsr PushZA		; Alloc space for line size & wordlist #
.aacd	ca		dex				dex			; Alloc space for a nt
.aace	ca		dex				dex
.aacf					_wordlist_next:
.aacf	20 75 ab	jsr $ab75			jsr CR			; start wordlist on new line
.aad2	f6 26		inc $26,x			inc DStack+2,x		; step to next search wordlist
.aad4	b4 26		ldy $26,x			ldy DStack+2,x		; Y= wordlist index
.aad6	cc 2a 03	cpy $032a			cpy Num_OrderV
.aad9	b0 44		bcs $ab1f			bcs _wordslist_done	; ran out of search wordlist entries?
.aadb	b9 2b 03	lda $032b,y			lda Search_OrderV,y	; A= SEARCH-ORDER[Y]	Get the current wordlist id
.aade	0a		asl a				asl			; TOS= WORDLISTS[A]
.aadf	a8		tay				tay
.aae0	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.aae3	95 24		sta $24,x			sta DStack+0,x
.aae5	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.aae8	95 25		sta $25,x			sta DStack+1,x
.aaea	f0 e3		beq $aacf			beq _wordlist_next	; end of list?
.aaec					_word_loop:
.aaec	20 6c cf	jsr $cf6c			jsr Dup			; ( wordlist# nt nt )
.aaef	20 fa bd	jsr $bdfa			jsr Name_To_String	; ( wordlist# nt addr u )
.aaf2	b5 2b		lda $2b,x			lda DStack+7,x
.aaf4	38		sec				sec			; don't forget the space between words
.aaf5	75 24		adc $24,x			adc DStack+0,x
.aaf7	c9 4e		cmp #$4e			cmp #MAX_LINE_LENGTH-1
.aaf9	90 05		bcc $ab00			bcc +
.aafb	20 75 ab	jsr $ab75			jsr CR
.aafe	b5 24		lda $24,x			lda DStack+0,x		; After going to next line, start
.ab00	95 2b		sta $2b,x	+		sta DStack+7,x
.ab02	20 ee cd	jsr $cdee			jsr Type		; ( wordlist# nt )
.ab05	20 e2 cd	jsr $cde2			jsr Space
.ab08	b5 24		lda $24,x			lda DStack+0,x
.ab0a	85 14		sta $14				sta tmp1+0
.ab0c	b5 25		lda $25,x			lda DStack+1,x
.ab0e	85 15		sta $15				sta tmp1+1
.ab10	20 9b 82	jsr $829b			jsr LinkNext		; tmp1= next word nt in list
.ab13	a5 14		lda $14				lda tmp1+0
.ab15	95 24		sta $24,x			sta DStack+0,x
.ab17	a5 15		lda $15				lda tmp1+1
.ab19	95 25		sta $25,x			sta DStack+1,x
.ab1b	d0 cf		bne $aaec			bne _word_loop		; end of list?
.ab1d	f0 b0		beq $aacf			beq _wordlist_next
.ab1f					_wordslist_done:
.ab1f	4c 4a c5	jmp $c54a			jmp Two_Drop
=90					CL	.var *-XtPtr1
=$ab22					en = *	; remember here
>aac6	5a					.byte CL	;wh_CodeLength
>ab22	57 6f 72 64 53 69 7a 65		L1:	.text "WordSize"	;  name of word as a string, ending at wh_NameLastChar
=43690					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab2a	a8					.byte (("WordSize"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=102					LinkDisplacement = Nt0-WordListLink
>ab2b	10					.byte WordFlags	;wh_Flags
>ab2c	03					.byte 3	;wh_CodeLength
>ab2d	66					  .byte LinkDisplacement
=$ab2e					XtPtr1 ::= *
=43690					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab2e	20 0b b4	jsr $b40b	WordSize:	jsr PopTmp1
.ab31	a0 82		ldy #$82			ldy #Wh_CodeLength
.ab33	b1 14		lda ($14),y			lda (tmp1),y
.ab35	4c ec b7	jmp $b7ec			jmp PushZA
=10					CL	.var *-XtPtr1
=$ab38					en = *	; remember here
>ab2c	0a					.byte CL	;wh_CodeLength
>ab38	41 6c 69 67 6e 65 64		L1:	.text "Aligned"	;  name of word as a string, ending at wh_NameLastChar
=43711					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab3f	87					.byte (("Aligned"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ab40	00					.byte WordFlags	;wh_Flags
>ab41	03					.byte 3	;wh_CodeLength
>ab42	15					  .byte LinkDisplacement
=$ab43					XtPtr1 ::= *
=43711					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab43					Aligned:
=0					CL	.var *-XtPtr1
=$ab43					en = *	; remember here
>ab41	00					.byte CL	;wh_CodeLength
.ab43	60		rts				rts
>ab44	41 6c 69 67 6e			L1:	.text "Align"	;  name of word as a string, ending at wh_NameLastChar
=43721					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab49	c5					.byte (("Align"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ab4a	00					.byte WordFlags	;wh_Flags
>ab4b	03					.byte 3	;wh_CodeLength
>ab4c	0a					  .byte LinkDisplacement
=$ab4d					XtPtr1 ::= *
=43721					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab4d					Align:
=0					CL	.var *-XtPtr1
=$ab4d					en = *	; remember here
>ab4b	00					.byte CL	;wh_CodeLength
.ab4d	60		rts				rts
>ab4e	4f 75 74 70 75 74		L1:	.text "Output"	;  name of word as a string, ending at wh_NameLastChar
=43732					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab54	86					.byte (("Output"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>ab55	10					.byte WordFlags	;wh_Flags
>ab56	03					.byte 3	;wh_CodeLength
>ab57	0b					  .byte LinkDisplacement
=$ab58					XtPtr1 ::= *
=43732					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab58					xt_output:
.ab58	a0 03		ldy #$03			ldy #>output
.ab5a	a9 06		lda #$06			lda #<output
.ab5c	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$ab5f					en = *	; remember here
>ab56	07					.byte CL	;wh_CodeLength
>ab5f	49 6e 70 75 74			L1:	.text "Input"	;  name of word as a string, ending at wh_NameLastChar
=43748					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab64	85					.byte (("Input"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>ab65	10					.byte WordFlags	;wh_Flags
>ab66	03					.byte 3	;wh_CodeLength
>ab67	10					  .byte LinkDisplacement
=$ab68					XtPtr1 ::= *
=43748					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab68	a0 03		ldy #$03	xt_input:	ldy #>input
.ab6a	a9 08		lda #$08			lda #<input
.ab6c	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$ab6f					en = *	; remember here
>ab66	07					.byte CL	;wh_CodeLength
>ab6f	43 52				L1:	.text "CR"	;  name of word as a string, ending at wh_NameLastChar
=43761					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab71	42					.byte (("CR"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ab72	10					.byte WordFlags	;wh_Flags
>ab73	03					.byte 3	;wh_CodeLength
>ab74	0d					  .byte LinkDisplacement
=$ab75					XtPtr1 ::= *
=43761					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab75					CR:
.ab75	a9 0d		lda #$0d			lda #AscCR
.ab77	20 d6 cd	jsr $cdd6			jsr Emit_A
.ab7a	a9 0a		lda #$0a			lda #AscLF
.ab7c	20 d6 cd	jsr $cdd6			jsr Emit_A
=10					CL	.var *-XtPtr1
=$ab7f					en = *	; remember here
>ab73	0a					.byte CL	;wh_CodeLength
.ab7f	60		rts				rts
>ab80	50 61 67 65			L1:	.text "Page"	;  name of word as a string, ending at wh_NameLastChar
=43780					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ab84	a4					.byte (("Page"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>ab85	10					.byte WordFlags	;wh_Flags
>ab86	03					.byte 3	;wh_CodeLength
>ab87	13					  .byte LinkDisplacement
=$ab88					XtPtr1 ::= *
=43780					WordListLink ::= Nt0 ; remember the nt of this word for later
.ab88	20 b1 b8	jsr $b8b1	Page:		jsr SLiteral_Runtime
.ab8b	4c 98 ab	jmp $ab98			  jmp +
>ab8e	1b 5b 32 4a					  .text AscESC,"[2J"	; ANSI clear screen
>ab92	1b 5b 31 3b 31 48				  .text AscESC,"[1;1H"	; move cursor to top left of screen
.ab98	4c ee cd	jmp $cdee	+		jmp Type
=19					CL	.var *-XtPtr1
=$ab9b					en = *	; remember here
>ab86	13					.byte CL	;wh_CodeLength
>ab9b	41 74 2d 58 59			L1:	.text "At-XY"	;  name of word as a string, ending at wh_NameLastChar
=43808					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aba0	25					.byte (("At-XY"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>aba1	50					.byte WordFlags	;wh_Flags
>aba2	03					.byte 3	;wh_CodeLength
>aba3	1c					  .byte LinkDisplacement
=$aba4					XtPtr1 ::= *
=43808					WordListLink ::= Nt0 ; remember the nt of this word for later
.aba4					At_XY:
.aba4	20 3d b4	jsr $b43d			jsr underflow_2
.aba7	ad 00 03	lda $0300			lda base	; Save the BASE
.abaa	48		pha				pha
.abab	20 d5 b1	jsr $b1d5			jsr Decimal	; ANSI escape code values need to be in decimal.
.abae	a9 1b		lda #$1b			lda #AscESC
.abb0	20 d6 cd	jsr $cdd6			jsr Emit_A
.abb3	a9 5b		lda #$5b			lda #'['
.abb5	20 d6 cd	jsr $cdd6			jsr Emit_A
.abb8	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abba	20 2d cc	jsr $cc2d			jsr print_u
.abbd	a9 3b		lda #$3b			lda #';'
.abbf	20 d6 cd	jsr $cdd6			jsr Emit_A
.abc2	f6 24		inc $24,x			inc DStack+0,x	; AT-XY is zero based, but ANSI is 1 based
.abc4	20 2d cc	jsr $cc2d			jsr print_u
.abc7	a9 48		lda #$48			lda #'H'
.abc9	20 d6 cd	jsr $cdd6			jsr Emit_A
.abcc	68		pla				pla		; Restore the base
.abcd	8d 00 03	sta $0300			sta base
=44					CL	.var *-XtPtr1
=$abd0					en = *	; remember here
>aba2	2c					.byte CL	;wh_CodeLength
.abd0	60		rts				rts
>abd1	50 61 64			L1:	.text "Pad"	;  name of word as a string, ending at wh_NameLastChar
=43860					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abd4	83					.byte (("Pad"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=52					LinkDisplacement = Nt0-WordListLink
>abd5	00					.byte WordFlags	;wh_Flags
>abd6	03					.byte 3	;wh_CodeLength
>abd7	34					  .byte LinkDisplacement
=$abd8					XtPtr1 ::= *
=43860					WordListLink ::= Nt0 ; remember the nt of this word for later
.abd8	ca		dex		Pad:		dex		; push cp+PadOffset
.abd9	ca		dex				dex
.abda	18		clc				clc
.abdb	a5 00		lda $00				lda cp+0
.abdd	69 54		adc #$54			adc #PadOffset
.abdf	95 24		sta $24,x			sta DStack+0,x
.abe1	a5 01		lda $01				lda cp+1
.abe3	69 00		adc #$00			adc #0
.abe5	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$abe7					en = *	; remember here
>abd6	0f					.byte CL	;wh_CodeLength
.abe7	60		rts				rts
>abe8	3c 23				L1:	.text "<#"	;  name of word as a string, ending at wh_NameLastChar
=43882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abea	62					.byte (("<#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>abeb	00					.byte WordFlags	;wh_Flags
>abec	03					.byte 3	;wh_CodeLength
>abed	16					  .byte LinkDisplacement
=$abee					XtPtr1 ::= *
=43882					WordListLink ::= Nt0 ; remember the nt of this word for later
.abee					Less_Number_Sign:
.abee	a9 54		lda #$54			lda #PadOffset		; init hold buffer index
.abf0	8d 34 03	sta $0334			sta ToHold
=5					CL	.var *-XtPtr1
=$abf3					en = *	; remember here
>abec	05					.byte CL	;wh_CodeLength
.abf3	60		rts				rts
>abf4	23 3e				L1:	.text "#>"	;  name of word as a string, ending at wh_NameLastChar
=43894					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>abf6	c2					.byte (("#>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>abf7	40					.byte WordFlags	;wh_Flags
>abf8	03					.byte 3	;wh_CodeLength
>abf9	0c					  .byte LinkDisplacement
=$abfa					XtPtr1 ::= *
=43894					WordListLink ::= Nt0 ; remember the nt of this word for later
.abfa					Number_Sign_Greater:
.abfa	20 3d b4	jsr $b43d			jsr underflow_2		; double number
.abfd	18		clc				clc			; addr= cp + ToHold
.abfe	a5 00		lda $00				lda cp+0
.ac00	6d 34 03	adc $0334			adc ToHold
.ac03	95 26		sta $26,x			sta DStack+2,x
.ac05	a5 01		lda $01				lda cp+1
.ac07	69 00		adc #$00			adc #0
.ac09	95 27		sta $27,x			sta DStack+3,x
.ac0b	38		sec				sec			; u= PadOffset - ToHold
.ac0c	a9 54		lda #$54			lda #PadOffset
.ac0e	ed 34 03	sbc $0334			sbc ToHold
.ac11	95 24		sta $24,x			sta DStack+0,x
.ac13	a9 00		lda #$00			lda #0
.ac15	95 25		sta $25,x			sta DStack+1,x
=29					CL	.var *-XtPtr1
=$ac17					en = *	; remember here
>abf8	1d					.byte CL	;wh_CodeLength
.ac17	60		rts				rts
>ac18	48 6f 6c 64			L1:	.text "Hold"	;  name of word as a string, ending at wh_NameLastChar
=43932					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac1c	84					.byte (("Hold"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ac1d	00					.byte WordFlags	;wh_Flags
>ac1e	03					.byte 3	;wh_CodeLength
>ac1f	26					  .byte LinkDisplacement
=$ac20					XtPtr1 ::= *
=43932					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac20	20 e5 b3	jsr $b3e5	Hold:		jsr PopA
.ac23	ce 34 03	dec $0334	Hold_A:		dec ToHold
.ac26	ac 34 03	ldy $0334			ldy ToHold
.ac29	91 00		sta ($00),y			sta (cp),y
=11					CL	.var *-XtPtr1
=$ac2b					en = *	; remember here
>ac1e	0b					.byte CL	;wh_CodeLength
.ac2b	60		rts				rts
>ac2c	23				L1:	.text "#"	;  name of word as a string, ending at wh_NameLastChar
=43949					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac2d	61					.byte (("#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ac2e	50					.byte WordFlags	;wh_Flags
>ac2f	03					.byte 3	;wh_CodeLength
>ac30	11					  .byte LinkDisplacement
=$ac31					XtPtr1 ::= *
=43949					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac31					Number_Sign:
.ac31	20 3d b4	jsr $b43d			jsr underflow_2		; double number
.ac34	a9 00		lda #$00			lda #0			;   init remainder
.ac36	18		clc				clc
.ac37	a0 21		ldy #$21			ldy #32+1		;   for each bit
.ac39					_11:
.ac39	2a		rol a				rol a			;   shift remainder
.ac3a	cd 00 03	cmp $0300			cmp base		;   will it fit?
.ac3d	90 03		bcc $ac42			bcc _27
.ac3f	ed 00 03	sbc $0300			sbc base
.ac42					_27:
.ac42	36 26		rol $26,x			rol DStack+2,x		;   shift ud
.ac44	36 27		rol $27,x			rol DStack+3,x
.ac46	36 24		rol $24,x			rol DStack+0,x
.ac48	36 25		rol $25,x			rol DStack+1,x
.ac4a	88		dey				dey
.ac4b	d0 ec		bne $ac39			bne _11
.ac4d	c9 0a		cmp #$0a			cmp #9+1		; alternatively this could use s_abc_upper
.ac4f	90 02		bcc $ac53			bcc +
.ac51	69 06		adc #$06			adc #7-1
.ac53	69 30		adc #$30	+		adc #'0'
.ac55	d0 cc		bne $ac23			bne Hold_A
=38					CL	.var *-XtPtr1
=$ac57					en = *	; remember here
>ac2f	26					.byte CL	;wh_CodeLength
>ac57	23 53				L1:	.text "#S"	;  name of word as a string, ending at wh_NameLastChar
=43993					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac59	62					.byte (("#S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=44					LinkDisplacement = Nt0-WordListLink
>ac5a	00					.byte WordFlags	;wh_Flags
>ac5b	03					.byte 3	;wh_CodeLength
>ac5c	2c					  .byte LinkDisplacement
=$ac5d					XtPtr1 ::= *
=43993					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac5d					Number_Sign_S:
.ac5d					_loop:
.ac5d	20 31 ac	jsr $ac31			jsr Number_sign	; convert a single number ("#")
.ac60	b5 24		lda $24,x			lda DStack+0,x	; until d is zero
.ac62	15 25		ora $25,x			ora DStack+1,x
.ac64	15 26		ora $26,x			ora DStack+2,x
.ac66	15 27		ora $27,x			ora DStack+3,x
.ac68	d0 f3		bne $ac5d			bne _loop
=13					CL	.var *-XtPtr1
=$ac6a					en = *	; remember here
>ac5b	0d					.byte CL	;wh_CodeLength
.ac6a	60		rts				rts
>ac6b	53 69 67 6e			L1:	.text "Sign"	;  name of word as a string, ending at wh_NameLastChar
=44015					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac6f	c4					.byte (("Sign"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ac70	10					.byte WordFlags	;wh_Flags
>ac71	03					.byte 3	;wh_CodeLength
>ac72	16					  .byte LinkDisplacement
=$ac73					XtPtr1 ::= *
=44015					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac73	20 00 b4	jsr $b400	Sign:		jsr PopYA
.ac76	98		tya				tya		; test MSB of TOS
.ac77					Sign_P:
.ac77	30 01		bmi $ac7a			bmi _minus
.ac79	60		rts				rts
.ac7a	a9 2d		lda #$2d	_minus:		lda #'-'	; add minus sign
.ac7c	d0 a5		bne $ac23			bne hold_a
=11					CL	.var *-XtPtr1
=$ac7e					en = *	; remember here
>ac71	0b					.byte CL	;wh_CodeLength
>ac7e	43 6c 65 61 76 65		L1:	.text "Cleave"	;  name of word as a string, ending at wh_NameLastChar
=44036					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ac84	a6					.byte (("Cleave"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>ac85	50					.byte WordFlags	;wh_Flags
>ac86	03					.byte 3	;wh_CodeLength
>ac87	15					  .byte LinkDisplacement
=$ac88					XtPtr1 ::= *
=44036					WordListLink ::= Nt0 ; remember the nt of this word for later
.ac88					Cleave:
.ac88	20 3d b4	jsr $b43d			jsr underflow_2
.ac8b	20 f9 c4	jsr $c4f9			jsr Minus_leading	; -LEADING ( addr u )
.ac8e	20 f5 c3	jsr $c3f5			jsr Input_To_R	; save old imput state
.ac91	b5 24		lda $24,x			lda DStack+0,x	; u is new ciblen
.ac93	85 06		sta $06				sta ciblen
.ac95	b5 25		lda $25,x			lda DStack+1,x
.ac97	85 07		sta $07				sta ciblen+1
.ac99	b5 26		lda $26,x			lda DStack+2,x	; addr is new cib
.ac9b	85 04		sta $04				sta cib
.ac9d	b5 27		lda $27,x			lda DStack+3,x
.ac9f	85 05		sta $05				sta cib+1
.aca1	a9 00		lda #$00			lda #0
.aca3	85 08		sta $08				sta toin	; >IN pointer is zero
.aca5	85 09		sta $09				sta toin+1
.aca7	20 7c ba	jsr $ba7c			jsr parse_name	; ( addr u addr-s u-s )
.acaa	b5 24		lda $24,x			lda DStack+0,x
.acac	15 25		ora $25,x			ora DStack+1,x
.acae	f0 23		beq $acd3			beq _done
.acb0	38		sec				sec
.acb1	b5 28		lda $28,x			lda DStack+4,x	; LSB of original u
.acb3	f5 24		sbc $24,x			sbc DStack+0,x
.acb5	95 28		sta $28,x			sta DStack+4,x
.acb7	b5 29		lda $29,x			lda DStack+5,x	; MSB of original u
.acb9	f5 25		sbc $25,x			sbc DStack+1,x
.acbb	95 29		sta $29,x			sta DStack+5,x
.acbd	18		clc				clc
.acbe	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of original addr
.acc0	75 24		adc $24,x			adc DStack+0,x
.acc2	95 2a		sta $2a,x			sta DStack+6,x
.acc4	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of original addr
.acc6	75 25		adc $25,x			adc DStack+1,x
.acc8	95 2b		sta $2b,x			sta DStack+7,x
.acca	20 5b c5	jsr $c55b			jsr Two_swap		; ( addr-s u-s addr u )
.accd	20 f9 c4	jsr $c4f9			jsr Minus_leading
.acd0	20 5b c5	jsr $c55b			jsr Two_swap		; ( addr u addr-s u-s )
.acd3					_done:
.acd3	20 16 c4	jsr $c416			jsr R_To_Input
=78					CL	.var *-XtPtr1
=$acd6					en = *	; remember here
>ac86	4e					.byte CL	;wh_CodeLength
.acd6	60		rts				rts
>acd7	48 65 78 53 74 6f 72 65		L1:	.text "HexStore"	;  name of word as a string, ending at wh_NameLastChar
=44127					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>acdf	a8					.byte (("HexStore"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=91					LinkDisplacement = Nt0-WordListLink
>ace0	50					.byte WordFlags	;wh_Flags
>ace1	03					.byte 3	;wh_CodeLength
>ace2	5b					  .byte LinkDisplacement
=$ace3					XtPtr1 ::= *
=44127					WordListLink ::= Nt0 ; remember the nt of this word for later
.ace3					Hexstore:
.ace3	20 42 b4	jsr $b442			jsr underflow_3
.ace6	20 6c cf	jsr $cf6c			jsr Dup		; Save copy of original address
.ace9	20 7a c6	jsr $c67a			jsr Two_to_r		; ( addr1 u1 ) ( R: addr2 addr2 )
.acec					_loop:
.acec	b5 24		lda $24,x			lda DStack+0,x
.acee	15 25		ora $25,x			ora DStack+1,x
.acf0	f0 37		beq $ad29			beq _done
.acf2	20 88 ac	jsr $ac88			jsr Cleave		; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.acf5	20 7a c6	jsr $c67a			jsr Two_to_r
.acf8	20 fa b7	jsr $b7fa			jsr Zero
.acfb	20 fa b7	jsr $b7fa			jsr Zero
.acfe	20 56 c6	jsr $c656			jsr Two_r_from	; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.ad01	20 59 b0	jsr $b059			jsr To_Number	; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.ad04	b5 24		lda $24,x			lda DStack+0,x
.ad06	15 25		ora $25,x			ora DStack+1,x
.ad08	d0 18		bne $ad22			bne _have_chars_left
.ad0a	20 4a c5	jsr $c54a			jsr Two_drop		; ( addr1 u1 n n ) ( R: addr2 addr2 )
.ad0d	20 21 c0	jsr $c021			jsr D_To_S		; ( addr1 u1 n ) ( R: addr2 addr2 )
.ad10	20 2f cf	jsr $cf2f			jsr R_Fetch		; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.ad13	20 75 cd	jsr $cd75			jsr C_Store		; ( addr1 u1 ) ( R: addr2 addr2 )
.ad16	20 14 cf	jsr $cf14			jsr R_From		; R>
.ad19	20 6e ca	jsr $ca6e			jsr One_plus		; 1+
.ad1c	20 f6 ce	jsr $cef6			jsr To_R		; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.ad1f	4c ec ac	jmp $acec			jmp _loop
.ad22					_have_chars_left:
.ad22	8a		txa				txa
.ad23	18		clc				clc
.ad24	69 08		adc #$08			adc #8
.ad26	aa		tax				tax
.ad27	d0 c3		bne $acec			bne _loop
.ad29					_done:
.ad29	e8		inx				inx
.ad2a	e8		inx				inx
.ad2b	e8		inx				inx
.ad2c	e8		inx				inx			; 2DROP
.ad2d	20 56 c6	jsr $c656			jsr Two_r_from		; ( addr2+n addr2 )
.ad30	20 89 cf	jsr $cf89			jsr Swap
.ad33	4c cb cb	jmp $cbcb			jmp Minus		; ( n )
=83					CL	.var *-XtPtr1
=$ad36					en = *	; remember here
>ace1	53					.byte CL	;wh_CodeLength
>ad36	57 69 74 68 69 6e		L1:	.text "Within"	;  name of word as a string, ending at wh_NameLastChar
=44220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad3c	c6					.byte (("Within"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=93					LinkDisplacement = Nt0-WordListLink
>ad3d	50					.byte WordFlags	;wh_Flags
>ad3e	03					.byte 3	;wh_CodeLength
>ad3f	5d					  .byte LinkDisplacement
=$ad40					XtPtr1 ::= *
=44220					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad40					Within:
.ad40	20 42 b4	jsr $b442			jsr underflow_3
.ad43	20 45 cf	jsr $cf45			jsr Over
.ad46	20 cb cb	jsr $cbcb			jsr Minus
.ad49	20 f6 ce	jsr $cef6			jsr To_R
.ad4c	20 cb cb	jsr $cbcb			jsr Minus
.ad4f	20 14 cf	jsr $cf14			jsr R_From
.ad52	4c a8 c8	jmp $c8a8			jmp U_Less_Than
=21					CL	.var *-XtPtr1
=$ad55					en = *	; remember here
>ad3e	15					.byte CL	;wh_CodeLength
>ad55	5c				L1:	.text "\"	;  name of word as a string, ending at wh_NameLastChar
=44246					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad56	81					.byte (("\"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>ad57	18					.byte WordFlags	;wh_Flags
>ad58	03					.byte 3	;wh_CodeLength
>ad59	1a					  .byte LinkDisplacement
=$ad5a					XtPtr1 ::= *
=44246					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad5a					Backslash:
.ad5a	ad 0c 03	lda $030c			lda BlkV+0		; interpreting a block?
.ad5d	0d 0d 03	ora $030d			ora BlkV+1
.ad60	f0 16		beq $ad78			beq _not_block
.ad62	a5 08		lda $08				lda toin+0
.ad64	29 3f		and #$3f			and #$3F
.ad66	c9 02		cmp #$02			cmp #2
.ad68	90 16		bcc $ad80			bcc _rts
.ad6a	a5 08		lda $08		                lda toin+0		; Move toin to next multiple of 64.
.ad6c	29 c0		and #$c0	                and #$C0        	;   Clear lower bits to move to beginning of line.
.ad6e	18		clc		                clc             	;   Add $40 (64 decimal) to move to next line.
.ad6f	69 40		adc #$40	                adc #$40
.ad71	85 08		sta $08		                sta toin+0
.ad73	90 0b		bcc $ad80	                bcc _rts
.ad75	e6 09		inc $09		                inc toin+1
.ad77	60		rts				rts
.ad78					_not_block:
.ad78	a5 06		lda $06		                lda ciblen+0
.ad7a	85 08		sta $08		                sta toin+0
.ad7c	a5 07		lda $07		                lda ciblen+1
.ad7e	85 09		sta $09		                sta toin+1
=38					CL	.var *-XtPtr1
=$ad80					en = *	; remember here
>ad58	26					.byte CL	;wh_CodeLength
.ad80	60		rts		_rts:		rts
>ad81	4d 6f 76 65			L1:	.text "Move"	;  name of word as a string, ending at wh_NameLastChar
=44293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ad85	a4					.byte (("Move"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= NN+UF	; modifyable copy, remember for later
=47					LinkDisplacement = Nt0-WordListLink
>ad86	50					.byte WordFlags	;wh_Flags
>ad87	03					.byte 3	;wh_CodeLength
>ad88	2f					  .byte LinkDisplacement
=$ad89					XtPtr1 ::= *
=44293					WordListLink ::= Nt0 ; remember the nt of this word for later
.ad89					Move:
.ad89	b5 27		lda $27,x			lda DStack+3,x		; MSB of addr2
.ad8b	d5 29		cmp $29,x			cmp DStack+5,x		; MSB of addr1
.ad8d	d0 04		bne $ad93			bne _ne
.ad8f	b5 26		lda $26,x			lda DStack+2,x		; LSB of addr2
.ad91	d5 28		cmp $28,x			cmp DStack+4,x		; LSB of addr1
.ad93	90 58		bcc $aded	_ne:		bcc CMove
.ad95	d0 10		bne $ada7			bne CMove_up
.ad97	8a		txa		ThreeDrop:	txa		; drop three entries from Data Stack
.ad98	18		clc				clc
.ad99	69 06		adc #$06			adc #6
.ad9b	aa		tax				tax
=19					CL	.var *-XtPtr1
=$ad9c					en = *	; remember here
>ad87	13					.byte CL	;wh_CodeLength
.ad9c	60		rts				rts
>ad9d	43 4d 6f 76 65 3e		L1:	.text "CMove>"	;  name of word as a string, ending at wh_NameLastChar
=44323					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ada3	c6					.byte (("CMove>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>ada4	50					.byte WordFlags	;wh_Flags
>ada5	03					.byte 3	;wh_CodeLength
>ada6	1e					  .byte LinkDisplacement
=$ada7					XtPtr1 ::= *
=44323					WordListLink ::= Nt0 ; remember the nt of this word for later
.ada7					CMove_up:
.ada7	20 42 b4	jsr $b442			jsr underflow_3
.adaa	b5 26		lda $26,x			lda DStack+2,x
.adac	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adae	b5 27		lda $27,x			lda DStack+3,x
.adb0	18		clc				clc
.adb1	75 25		adc $25,x			adc DStack+1,x
.adb3	85 17		sta $17				sta tmp2+1	; point to last page of destination
.adb5	b5 28		lda $28,x			lda DStack+4,x
.adb7	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adb9	b5 29		lda $29,x			lda DStack+5,x
.adbb	18		clc				clc
.adbc	75 25		adc $25,x			adc DStack+1,x
.adbe	85 15		sta $15				sta tmp1+1	; point to last page of source
.adc0	f6 25		inc $25,x			inc DStack+1,x	; allows us to use bne with dec DStack+1,x below
.adc2	b4 24		ldy $24,x			ldy DStack+0,x	; length of last page
.adc4	f0 10		beq $add6			beq _nopartial
.adc6					_outerloop:
.adc6	88		dey				dey
.adc7	f0 07		beq $add0			beq _finishpage
.adc9					_innerloop:
.adc9	b1 14		lda ($14),y			lda (tmp1),y
.adcb	91 16		sta ($16),y			sta (tmp2),y
.adcd	88		dey				dey
.adce	d0 f9		bne $adc9			bne _innerloop
.add0					_finishpage:
.add0	a0 00		ldy #$00			ldy #0
.add2	b1 14		lda ($14),y			lda (tmp1),y	; handle y = 0 separately
.add4	91 16		sta ($16),y			sta (tmp2),y
.add6					_nopartial:
.add6	c6 15		dec $15				dec tmp1+1	; back up to previous pages
.add8	c6 17		dec $17				dec tmp2+1
.adda	d6 25		dec $25,x			dec DStack+1,x
.addc	d0 e8		bne $adc6			bne _outerloop
.adde					_done:
.adde	4c 97 ad	jmp $ad97			jmp ThreeDrop	; clear up the stack and leave
=58					CL	.var *-XtPtr1
=$ade1					en = *	; remember here
>ada5	3a					.byte CL	;wh_CodeLength
.ade1	4c 4c b4	jmp $b44c	Throw_Stack_14: jmp Throw_Stack
>ade4	43 4d 6f 76 65			L1:	.text "CMove"	;  name of word as a string, ending at wh_NameLastChar
=44393					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ade9	a5					.byte (("CMove"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=70					LinkDisplacement = Nt0-WordListLink
>adea	50					.byte WordFlags	;wh_Flags
>adeb	03					.byte 3	;wh_CodeLength
>adec	46					  .byte LinkDisplacement
=$aded					XtPtr1 ::= *
=44393					WordListLink ::= Nt0 ; remember the nt of this word for later
.aded					CMove:
.aded	20 42 b4	jsr $b442			jsr underflow_3
.adf0	b5 26		lda $26,x			lda DStack+2,x
.adf2	85 16		sta $16				sta tmp2	; use tmp2 because easier to remember
.adf4	b5 27		lda $27,x			lda DStack+3,x
.adf6	85 17		sta $17				sta tmp2+1
.adf8	b5 28		lda $28,x			lda DStack+4,x
.adfa	85 14		sta $14				sta tmp1	; use tmp1 because easier to remember
.adfc	b5 29		lda $29,x			lda DStack+5,x
.adfe	85 15		sta $15				sta tmp1+1
.ae00	a0 00		ldy #$00			ldy #0
.ae02	b5 25		lda $25,x			lda DStack+1,x	; number of whole pages to move
.ae04	f0 0f		beq $ae15			beq _dopartial
.ae06					_page:
.ae06	b1 14		lda ($14),y			lda (tmp1),y
.ae08	91 16		sta ($16),y			sta (tmp2),y
.ae0a	c8		iny				iny
.ae0b	d0 f9		bne $ae06			bne _page
.ae0d	e6 15		inc $15				inc tmp1+1
.ae0f	e6 17		inc $17				inc tmp2+1
.ae11	d6 25		dec $25,x			dec DStack+1,x
.ae13	d0 f1		bne $ae06			bne _page
.ae15					_dopartial:
.ae15	b5 24		lda $24,x			lda DStack+0,x	; length of last page
.ae17	f0 09		beq $ae22			beq _done
.ae19					_partial:
.ae19	b1 14		lda ($14),y			lda (tmp1),y
.ae1b	91 16		sta ($16),y			sta (tmp2),y
.ae1d	c8		iny				iny
.ae1e	d6 24		dec $24,x			dec DStack+0,x
.ae20	d0 f7		bne $ae19			bne _partial
.ae22	4c 97 ad	jmp $ad97	_done:		jmp ThreeDrop	; clear the stack
=56					CL	.var *-XtPtr1
=$ae25					en = *	; remember here
>adeb	38					.byte CL	;wh_CodeLength
>ae25	55 4d 2a			L1:	.text "UM*"	;  name of word as a string, ending at wh_NameLastChar
=44456					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae28	43					.byte (("UM*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=63					LinkDisplacement = Nt0-WordListLink
>ae29	10					.byte WordFlags	;wh_Flags
>ae2a	03					.byte 3	;wh_CodeLength
>ae2b	3f					  .byte LinkDisplacement
=$ae2c					XtPtr1 ::= *
=44456					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae2c					UM_Star:
.ae2c	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae2e	b0 b1		bcs $ade1		bcs Throw_Stack_14
.ae30	18		clc				clc		; tmp2= divsor-1
.ae31	b5 24		lda $24,x			lda DStack+0,x
.ae33	e9 00		sbc #$00			sbc #0
.ae35	85 16		sta $16				sta tmp2+0
.ae37	b5 25		lda $25,x			lda DStack+1,x
.ae39	e9 00		sbc #$00			sbc #0
.ae3b	85 17		sta $17				sta tmp2+1
.ae3d	90 2e		bcc $ae6d			bcc _zero	; is divisor zero?
.ae3f	a9 00		lda #$00			lda #0
.ae41	85 14		sta $14				sta tmp1
.ae43	86 18		stx $18				stx tmp3	; tested for exit from outer loop
.ae45	ca		dex				dex
.ae46	ca		dex				dex
.ae47					_outer_loop:
.ae47	a0 08		ldy #$08			ldy #8		; counter inner loop
.ae49	56 28		lsr $28,x			lsr DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae4b					_inner_loop:
.ae4b	90 0c		bcc $ae59			bcc _no_add
.ae4d	85 15		sta $15				sta tmp1+1	; save time, don't CLC
.ae4f	a5 14		lda $14				lda tmp1
.ae51	65 16		adc $16				adc tmp2
.ae53	85 14		sta $14				sta tmp1
.ae55	a5 15		lda $15				lda tmp1+1
.ae57	65 17		adc $17				adc tmp2+1
.ae59					_no_add:
.ae59	6a		ror a				ror
.ae5a	66 14		ror $14				ror tmp1
.ae5c	76 28		ror $28,x			ror DStack+4,x	; think "DStack+2,x" then later "DStack+3,x"
.ae5e	88		dey				dey
.ae5f	d0 ea		bne $ae4b			bne _inner_loop ; go back for one more shift?
.ae61	e8		inx				inx
.ae62	e4 18		cpx $18				cpx tmp3
.ae64	d0 e1		bne $ae47			bne _outer_loop ; go back for eight more shifts?
.ae66	95 25		sta $25,x			sta DStack+1,x
.ae68	a5 14		lda $14				lda tmp1
.ae6a	95 24		sta $24,x			sta DStack+0,x
.ae6c	60		rts				rts
.ae6d	a9 00		lda #$00	_zero:		lda #0
.ae6f	95 26		sta $26,x			sta DStack+2,x
.ae71	95 27		sta $27,x			sta DStack+3,x
.ae73	60		rts				rts
=72					CL	.var *-XtPtr1
=$ae74					en = *	; remember here
>ae2a	48					.byte CL	;wh_CodeLength
>ae74	4d 2a				L1:	.text "M*"	;  name of word as a string, ending at wh_NameLastChar
=44534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae76	42					.byte (("M*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=78					LinkDisplacement = Nt0-WordListLink
>ae77	10					.byte WordFlags	;wh_Flags
>ae78	03					.byte 3	;wh_CodeLength
>ae79	4e					  .byte LinkDisplacement
=$ae7a					XtPtr1 ::= *
=44534					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae7a					M_Star:
.ae7a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.ae7c	b0 6b		bcs $aee9		bcs Throw_Stack_15
.ae7e	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.ae80	55 27		eor $27,x			eor DStack+3,x	; MSB of n2
.ae82	08		php				php
.ae83	20 d6 c6	jsr $c6d6			jsr Abs
.ae86	20 89 cf	jsr $cf89			jsr Swap
.ae89	20 d6 c6	jsr $c6d6			jsr Abs
.ae8c	20 2c ae	jsr $ae2c			jsr UM_Star		; ( d )
.ae8f	28		plp				plp			; handle the sign
.ae90	10 03		bpl $ae95			bpl +
.ae92	4c ed c6	jmp $c6ed			jmp DNegate
.ae95					+
=27					CL	.var *-XtPtr1
=$ae95					en = *	; remember here
>ae78	1b					.byte CL	;wh_CodeLength
.ae95	60		rts				rts
>ae96	2a				L1:	.text "*"	;  name of word as a string, ending at wh_NameLastChar
=44567					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ae97	41					.byte (("*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ae98	00					.byte WordFlags	;wh_Flags
>ae99	03					.byte 3	;wh_CodeLength
>ae9a	21					  .byte LinkDisplacement
=$ae9b					XtPtr1 ::= *
=44567					WordListLink ::= Nt0 ; remember the nt of this word for later
.ae9b					Star:
.ae9b	20 2c ae	jsr $ae2c			jsr UM_Star
.ae9e	e8		inx				inx		; D>S	drop hi cell
.ae9f	e8		inx				inx
=5					CL	.var *-XtPtr1
=$aea0					en = *	; remember here
>ae99	05					.byte CL	;wh_CodeLength
.aea0	60		rts				rts
>aea1	55 4d 2f 4d 6f 64		L1:	.text "UM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44583					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aea7	86					.byte (("UM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>aea8	10					.byte WordFlags	;wh_Flags
>aea9	03					.byte 3	;wh_CodeLength
>aeaa	10					  .byte LinkDisplacement
=$aeab					XtPtr1 ::= *
=44583					WordListLink ::= Nt0 ; remember the nt of this word for later
.aeab					UM_Slash_Mod:
.aeab	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aead	b0 3a		bcs $aee9		bcs Throw_Stack_15
.aeaf	b5 24		lda $24,x			lda DStack+0,x		; catch division by zero
.aeb1	15 25		ora $25,x			ora DStack+1,x
.aeb3	f0 2f		beq $aee4			beq _DivByZero
.aeb5	a0 10		ldy #$10			ldy #16			; for 16 bits
.aeb7					_loop:
.aeb7	36 28		rol $28,x			rol DStack+4,x		;   rotate low cell of dividend one bit left
.aeb9	36 29		rol $29,x			rol DStack+5,x
.aebb	36 26		rol $26,x			rol DStack+2,x		;   rotate high cell of dividend one bit left
.aebd	36 27		rol $27,x			rol DStack+3,x
.aebf	b0 0a		bcs $aecb			bcs _subtract		;   overflow?
.aec1	b5 26		lda $26,x			lda DStack+2,x		;   dividend.hi >= divisor?
.aec3	d5 24		cmp $24,x			cmp DStack+0,x
.aec5	b5 27		lda $27,x			lda DStack+3,x
.aec7	f5 25		sbc $25,x			sbc DStack+1,x
.aec9	90 0d		bcc $aed8			bcc _next
.aecb	b5 26		lda $26,x	_subtract:	lda DStack+2,x		;   dividend.hi -= divisor
.aecd	f5 24		sbc $24,x			sbc DStack+0,x
.aecf	95 26		sta $26,x			sta DStack+2,x
.aed1	b5 27		lda $27,x			lda DStack+3,x
.aed3	f5 25		sbc $25,x			sbc DStack+1,x
.aed5	95 27		sta $27,x			sta DStack+3,x
.aed7	38		sec				sec			;   it always fits
.aed8	88		dey		_next:		dey			;  next
.aed9	d0 dc		bne $aeb7			bne _loop
.aedb	36 28		rol $28,x			rol DStack+4,x		; finish rotating quotient bit in
.aedd	36 29		rol $29,x			rol DStack+5,x
.aedf	e8		inx				inx			; drop divisor
.aee0	e8		inx				inx
.aee1	4c 89 cf	jmp $cf89			jmp Swap
.aee4	a9 f6		lda #$f6	_DivByZero:	lda #$100+err_DivideBy0
.aee6	4c 85 b4	jmp $b485			jmp ThrowA
=62					CL	.var *-XtPtr1
=$aee9					en = *	; remember here
>aea9	3e					.byte CL	;wh_CodeLength
.aee9	4c 4c b4	jmp $b44c	Throw_Stack_15: jmp Throw_Stack
>aeec	53 4d 2f 52 65 6d		L1:	.text "SM/Rem"	;  name of word as a string, ending at wh_NameLastChar
=44658					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>aef2	a6					.byte (("SM/Rem"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=75					LinkDisplacement = Nt0-WordListLink
>aef3	10					.byte WordFlags	;wh_Flags
>aef4	03					.byte 3	;wh_CodeLength
>aef5	4b					  .byte LinkDisplacement
=$aef6					XtPtr1 ::= *
=44658					WordListLink ::= Nt0 ; remember the nt of this word for later
.aef6					SM_Slash_Rem:
.aef6	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.aef8	b0 ef		bcs $aee9		bcs Throw_Stack_15
.aefa	b5 27		lda $27,x			lda DStack+3,x
.aefc	08		php				php
.aefd	55 25		eor $25,x			eor DStack+1,x
.aeff	08		php				php
.af00	20 d6 c6	jsr $c6d6			jsr Abs
.af03	e8		inx				inx		; pretend we pushed n1 to R
.af04	e8		inx				inx
.af05	20 09 c7	jsr $c709			jsr DAbs
.af08	ca		dex				dex
.af09	ca		dex				dex
.af0a	20 ab ae	jsr $aeab			jsr UM_Slash_Mod	; UM/MOD
.af0d	28		plp				plp
.af0e	10 03		bpl $af13			bpl +
.af10	20 be c6	jsr $c6be			jsr Negate
.af13					+
.af13	28		plp				plp
.af14	10 07		bpl $af1d			bpl _done
.af16	e8		inx				inx		; pretend we pushed quotient to R
.af17	e8		inx				inx
.af18	20 be c6	jsr $c6be			jsr Negate
.af1b	ca		dex				dex
.af1c	ca		dex				dex
.af1d					_done:
=39					CL	.var *-XtPtr1
=$af1d					en = *	; remember here
>aef4	27					.byte CL	;wh_CodeLength
.af1d	60		rts				rts
>af1e	46 4d 2f 4d 6f 64		L1:	.text "FM/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44708					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af24	86					.byte (("FM/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>af25	10					.byte WordFlags	;wh_Flags
>af26	03					.byte 3	;wh_CodeLength
>af27	32					  .byte LinkDisplacement
=$af28					XtPtr1 ::= *
=44708					WordListLink ::= Nt0 ; remember the nt of this word for later
.af28					FM_Slash_Mod:
.af28	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.af2a	b0 bd		bcs $aee9		bcs Throw_Stack_15
.af2c	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af2e	08		php				php		;  save sign
.af2f	10 0a		bpl $af3b			bpl +
.af31	20 be c6	jsr $c6be			jsr Negate	; NEGATE
.af34	e8		inx				inx
.af35	e8		inx				inx
.af36	20 ed c6	jsr $c6ed			jsr DNegate	; DNEGATE
.af39	ca		dex				dex
.af3a	ca		dex				dex
.af3b					+
.af3b	b5 27		lda $27,x			lda DStack+3,x	; MSB of high word of d
.af3d	10 0d		bpl $af4c			bpl +
.af3f	18		clc				clc
.af40	b5 24		lda $24,x			lda DStack+0,x	; LSB of n1
.af42	75 26		adc $26,x			adc DStack+2,x	; LSB of dh
.af44	95 26		sta $26,x			sta DStack+2,x
.af46	b5 25		lda $25,x			lda DStack+1,x	; MSB of n1
.af48	75 27		adc $27,x			adc DStack+3,x	; MSB of dh
.af4a	95 27		sta $27,x			sta DStack+3,x
.af4c					+
.af4c	20 ab ae	jsr $aeab			jsr UM_Slash_Mod	; ( d n1 -- rem n2 )
.af4f	28		plp				plp
.af50	10 07		bpl $af59			bpl +
.af52	e8		inx				inx		; pretend that we SWAP
.af53	e8		inx				inx
.af54	20 be c6	jsr $c6be			jsr Negate
.af57	ca		dex				dex
.af58	ca		dex				dex
.af59					+
=49					CL	.var *-XtPtr1
=$af59					en = *	; remember here
>af26	31					.byte CL	;wh_CodeLength
.af59	60		rts				rts
>af5a	2f 4d 6f 64			L1:	.text "/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44766					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af5e	84					.byte (("/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=58					LinkDisplacement = Nt0-WordListLink
>af5f	10					.byte WordFlags	;wh_Flags
>af60	03					.byte 3	;wh_CodeLength
>af61	3a					  .byte LinkDisplacement
=$af62					XtPtr1 ::= *
=44766					WordListLink ::= Nt0 ; remember the nt of this word for later
.af62	20 6c cf	jsr $cf6c	Slash_Mod:	jsr Dup			; ( n1 n_div n_div )
.af65	a0 00		ldy #$00			ldy #0			; sign extend n1
.af67	b5 29		lda $29,x			lda DStack+5,x
.af69	10 01		bpl $af6c			bpl +
.af6b	88		dey				dey
.af6c	94 26		sty $26,x	+		sty DStack+2,x
.af6e	94 27		sty $27,x			sty DStack+3,x		; ( d1 n_div )
.af70	4c f6 ae	jmp $aef6			jmp SM_Slash_Rem	; SM/REM
=17					CL	.var *-XtPtr1
=$af73					en = *	; remember here
>af60	11					.byte CL	;wh_CodeLength
>af73	2f				L1:	.text "/"	;  name of word as a string, ending at wh_NameLastChar
=44788					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af74	e1					.byte (("/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>af75	10					.byte WordFlags	;wh_Flags
>af76	03					.byte 3	;wh_CodeLength
>af77	16					  .byte LinkDisplacement
=$af78					XtPtr1 ::= *
=44788					WordListLink ::= Nt0 ; remember the nt of this word for later
.af78	20 62 af	jsr $af62	Slash:		jsr Slash_Mod
.af7b	4c a4 c9	jmp $c9a4			jmp Nip		; Nip remainder
=6					CL	.var *-XtPtr1
=$af7e					en = *	; remember here
>af76	06					.byte CL	;wh_CodeLength
>af7e	4d 6f 64			L1:	.text "Mod"	;  name of word as a string, ending at wh_NameLastChar
=44801					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af81	83					.byte (("Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>af82	00					.byte WordFlags	;wh_Flags
>af83	03					.byte 3	;wh_CodeLength
>af84	0d					  .byte LinkDisplacement
=$af85					XtPtr1 ::= *
=44801					WordListLink ::= Nt0 ; remember the nt of this word for later
.af85	20 62 af	jsr $af62	Mod:		jsr Slash_Mod
.af88	e8		inx				inx		; Drop quotient
.af89	e8		inx				inx
=5					CL	.var *-XtPtr1
=$af8a					en = *	; remember here
>af83	05					.byte CL	;wh_CodeLength
.af8a	60		rts				rts
>af8b	2a 2f 4d 6f 64			L1:	.text "*/Mod"	;  name of word as a string, ending at wh_NameLastChar
=44816					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>af90	85					.byte (("*/Mod"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>af91	50					.byte WordFlags	;wh_Flags
>af92	03					.byte 3	;wh_CodeLength
>af93	0f					  .byte LinkDisplacement
=$af94					XtPtr1 ::= *
=44816					WordListLink ::= Nt0 ; remember the nt of this word for later
.af94					Star_Slash_Mod:
.af94	20 42 b4	jsr $b442			jsr underflow_3
.af97	20 f6 ce	jsr $cef6			jsr To_R
.af9a	20 7a ae	jsr $ae7a			jsr M_Star
.af9d	20 14 cf	jsr $cf14			jsr R_From
.afa0	4c f6 ae	jmp $aef6			jmp SM_Slash_Rem
=15					CL	.var *-XtPtr1
=$afa3					en = *	; remember here
>af92	0f					.byte CL	;wh_CodeLength
>afa3	2a 2f				L1:	.text "*/"	;  name of word as a string, ending at wh_NameLastChar
=44837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afa5	e2					.byte (("*/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>afa6	10					.byte WordFlags	;wh_Flags
>afa7	03					.byte 3	;wh_CodeLength
>afa8	15					  .byte LinkDisplacement
=$afa9					XtPtr1 ::= *
=44837					WordListLink ::= Nt0 ; remember the nt of this word for later
.afa9					Star_Slash:
.afa9	20 94 af	jsr $af94			jsr Star_Slash_Mod
.afac	4c a4 c9	jmp $c9a4			jmp Nip			; mod
=6					CL	.var *-XtPtr1
=$afaf					en = *	; remember here
>afa7	06					.byte CL	;wh_CodeLength
>afaf	4d 2a 2f			L1:	.text "M*/"	;  name of word as a string, ending at wh_NameLastChar
=44850					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>afb2	e3					.byte (("M*/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>afb3	10					.byte WordFlags	;wh_Flags
>afb4	03					.byte 3	;wh_CodeLength
>afb5	0d					  .byte LinkDisplacement
=$afb6					XtPtr1 ::= *
=44850					WordListLink ::= Nt0 ; remember the nt of this word for later
.afb6					m_star_slash:
.afb6	20 47 b4	jsr $b447	                jsr underflow_4
.afb9	b5 25		lda $25,x			lda DStack+1,x		; calc result sign
.afbb	55 27		eor $27,x			eor DStack+3,x
.afbd	55 29		eor $29,x			eor DStack+5,x
.afbf	08		php				php
.afc0	20 d6 c6	jsr $c6d6	                jsr Abs			; Abs
.afc3	20 f6 ce	jsr $cef6	                jsr To_R		; >R		( d1 n1 ) ( R: sign abs(n2) )
.afc6	20 d6 c6	jsr $c6d6	                jsr Abs			; Abs
.afc9	20 f6 ce	jsr $cef6	                jsr To_R		; >R		( d1 ) ( R: sign abs(n2) abs(n1) )
.afcc	20 09 c7	jsr $c709	                jsr DAbs		; DAbs		( abs(d1) ) ( R: sign abs(n2) abs(n1) )
.afcf	20 89 cf	jsr $cf89	                jsr Swap		; Swap
.afd2	20 2f cf	jsr $cf2f	                jsr R_Fetch		; R@
.afd5	20 2c ae	jsr $ae2c	                jsr UM_Star		; UM*
.afd8	20 67 ce	jsr $ce67	                jsr Rot			; Rot
.afdb	20 14 cf	jsr $cf14	                jsr R_From		; R>
.afde	20 2c ae	jsr $ae2c	                jsr UM_Star		; UM*
.afe1	20 67 ce	jsr $ce67	                jsr Rot			; Rot
.afe4	20 86 ca	jsr $ca86	                jsr UMPlus		; 0 D+
.afe7	20 2f cf	jsr $cf2f	                jsr R_Fetch		; R@
.afea	20 ab ae	jsr $aeab	                jsr UM_Slash_Mod	; UM/Mod
.afed	20 8c ce	jsr $ce8c	                jsr Not_Rot		; Rot Rot
.aff0	20 14 cf	jsr $cf14	                jsr R_From		; R>
.aff3	20 ab ae	jsr $aeab	                jsr UM_Slash_Mod	; UM/Mod
.aff6	20 a4 c9	jsr $c9a4	                jsr Nip			; Swap Drop
.aff9	20 89 cf	jsr $cf89	                jsr Swap		; Swap
.affc	28		plp				plp
.affd	10 03		bpl $b002			bpl _rts		; ... 0< if ...
.afff	4c ed c6	jmp $c6ed	                jmp DNegate
.b002	60		rts		_rts:		rts
=77					CL	.var *-XtPtr1
=$b003					en = *	; remember here
>afb4	4d					.byte CL	;wh_CodeLength
>b003	45 76 61 6c 75 61 74 65		L1:	.text "Evaluate"	;  name of word as a string, ending at wh_NameLastChar
=44939					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b00b	a8					.byte (("Evaluate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>b00c	10					.byte WordFlags	;wh_Flags
>b00d	03					.byte 3	;wh_CodeLength
>b00e	59					  .byte LinkDisplacement
=$b00f					XtPtr1 ::= *
=44939					WordListLink ::= Nt0 ; remember the nt of this word for later
.b00f					Evaluate:
.b00f	18		clc				clc			; signal to zero BLK.
.b010					load_evaluate:
.b010	ad 0d 03	lda $030d			lda BlkV+1	; Save the current value of BLK on the return stack.
.b013	48		pha				pha
.b014	ad 0c 03	lda $030c			lda BlkV+0
.b017	48		pha				pha
.b018	b0 08		bcs $b022			bcs +		; See if we should zero BLK.
.b01a	a9 00		lda #$00			lda #0		; Set BLK to zero.
.b01c	8d 0c 03	sta $030c			sta BlkV+0
.b01f	8d 0d 03	sta $030d			sta BlkV+1
.b022					+
.b022	20 f5 c3	jsr $c3f5			jsr Input_To_R	; Save the input state to the Return Stack
.b025	a9 ff		lda #$ff			lda #$ff	; SOURCE-ID= -1
.b027	85 02		sta $02				sta insrc+0
.b029	85 03		sta $03				sta insrc+1
.b02b	a9 00		lda #$00			lda #0		; >IN= zero
.b02d	85 08		sta $08				sta toin+0
.b02f	85 09		sta $09				sta toin+1
.b031	20 00 b4	jsr $b400			jsr PopYA	; ciblen= string length (u)
.b034	85 06		sta $06				sta ciblen+0
.b036	84 07		sty $07				sty ciblen+1
.b038	20 00 b4	jsr $b400			jsr PopYA	; cib= string addr
.b03b	85 04		sta $04				sta cib+0
.b03d	84 05		sty $05				sty cib+1
.b03f	20 3d b5	jsr $b53d			jsr interpret	; ( -- )
.b042	20 16 c4	jsr $c416			jsr R_To_Input	; restore input state
.b045	68		pla				pla		; Restore BLK from the return stack.
.b046	8d 0c 03	sta $030c			sta BlkV+0
.b049	68		pla				pla
.b04a	8d 0d 03	sta $030d			sta BlkV+1
=62					CL	.var *-XtPtr1
=$b04d					en = *	; remember here
>b00d	3e					.byte CL	;wh_CodeLength
.b04d	60		rts				rts
>b04e	3e 4e 75 6d 62 65 72		L1:	.text ">Number"	;  name of word as a string, ending at wh_NameLastChar
=45013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b055	47					.byte ((">Number"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>b056	50					.byte WordFlags	;wh_Flags
>b057	03					.byte 3	;wh_CodeLength
>b058	4a					  .byte LinkDisplacement
=$b059					XtPtr1 ::= *
=45013					WordListLink ::= Nt0 ; remember the nt of this word for later
.b059					To_Number:
.b059	20 47 b4	jsr $b447			jsr underflow_4
.b05c	b5 24		lda $24,x			lda DStack+0,x		; no chars left?
.b05e	f0 72		beq $b0d2			beq _done
.b060					_Char_loop:
.b060	a1 26		lda ($26,x)			lda (DStack+2,x)		; Get next character
.b062	c9 30		cmp #$30			cmp #'0'		; convert to value (Digit_Question)
.b064	90 6c		bcc $b0d2			bcc _done
.b066	c9 3a		cmp #$3a			cmp #'9'+1
.b068	90 08		bcc $b072			bcc _digit
.b06a	29 df		and #$df			and #$df		;   ASCII uppercase
.b06c	c9 41		cmp #$41			cmp #'A'
.b06e	90 62		bcc $b0d2			bcc _done
.b070	e9 07		sbc #$07			sbc #7 ;'A'-'0'-10	;   to make 'A'=10 below
.b072	38		sec		_digit:		sec
.b073	e9 30		sbc #$30			sbc #'0'
.b075	cd 00 03	cmp $0300			cmp base		; must be < base
.b078	b0 58		bcs $b0d2			bcs _done
.b07a	48		pha				pha			; Save char value
.b07b	20 7c c5	jsr $c57c			jsr Two_Over		;   copy ud to work (multiplicand)
.b07e	a9 00		lda #$00			lda #0			;   zero ud (product)
.b080	95 2c		sta $2c,x			sta DStack+8,x
.b082	95 2d		sta $2d,x			sta DStack+9,x
.b084	95 2e		sta $2e,x			sta DStack+10,x
.b086	95 2f		sta $2f,x			sta DStack+11,x
.b088	ad 00 03	lda $0300			lda base		;   get multiplier
.b08b	d0 23		bne $b0b0			bne _Mul_Test
.b08d	48		pha		_Mul_Add:	pha			;   save multiplier
.b08e	18		clc				clc			;   ud += work
.b08f	b5 26		lda $26,x			lda DStack+2,x
.b091	75 2e		adc $2e,x			adc DStack+10,x
.b093	95 2e		sta $2e,x			sta DStack+10,x
.b095	b5 27		lda $27,x			lda DStack+3,x
.b097	75 2f		adc $2f,x			adc DStack+11,x
.b099	95 2f		sta $2f,x			sta DStack+11,x
.b09b	b5 24		lda $24,x			lda DStack+0,x
.b09d	75 2c		adc $2c,x			adc DStack+8,x
.b09f	95 2c		sta $2c,x			sta DStack+8,x
.b0a1	b5 25		lda $25,x			lda DStack+1,x
.b0a3	75 2d		adc $2d,x			adc DStack+9,x
.b0a5	95 2d		sta $2d,x			sta DStack+9,x
.b0a7	68		pla				pla			;   restore multiplier
.b0a8	16 26		asl $26,x	_Mul_Shift:	asl DStack+2,x		;   work <<= 1
.b0aa	36 27		rol $27,x			rol DStack+3,x
.b0ac	36 24		rol $24,x			rol DStack+0,x
.b0ae	36 25		rol $25,x			rol DStack+1,x
.b0b0	4a		lsr a		_Mul_Test:	lsr a			;   shift multiplier
.b0b1	b0 da		bcs $b08d			bcs _Mul_Add
.b0b3	d0 f3		bne $b0a8			bne _Mul_Shift
.b0b5	e8		inx				inx			;   2Drop work
.b0b6	e8		inx				inx
.b0b7	e8		inx				inx
.b0b8	e8		inx				inx
.b0b9	68		pla				pla			; recover value
.b0ba	18		clc				clc			; add to ud
.b0bb	75 2a		adc $2a,x			adc DStack+6,x
.b0bd	95 2a		sta $2a,x			sta DStack+6,x
.b0bf	90 0a		bcc $b0cb			bcc +
.b0c1	f6 2b		inc $2b,x			inc DStack+7,x
.b0c3	d0 06		bne $b0cb			bne +
.b0c5	f6 28		inc $28,x			inc DStack+4,x
.b0c7	d0 02		bne $b0cb			bne +
.b0c9	f6 29		inc $29,x			inc DStack+5,x
.b0cb					+
.b0cb	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; consume the char
.b0ce	d6 24		dec $24,x			dec DStack+0,x
.b0d0	d0 8e		bne $b060			bne _Char_loop
.b0d2					_done:
=121					CL	.var *-XtPtr1
=$b0d2					en = *	; remember here
>b057	79					.byte CL	;wh_CodeLength
.b0d2	60		rts				rts
>b0d3	4e 75 6d 62 65 72		L1:	.text "Number"	;  name of word as a string, ending at wh_NameLastChar
=45145					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b0d9	46					.byte (("Number"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=132					LinkDisplacement = Nt0-WordListLink
>b0da	50					.byte WordFlags	;wh_Flags
>b0db	03					.byte 3	;wh_CodeLength
>b0dc	84					  .byte LinkDisplacement
=$b0dd					XtPtr1 ::= *
=45145					WordListLink ::= Nt0 ; remember the nt of this word for later
.b0dd					Number:
.b0dd	20 3d b4	jsr $b43d			jsr underflow_2
.b0e0	a9 00		lda #$00			lda #0
.b0e2	85 1a		sta $1a				sta tmp4+0	; flag for double
.b0e4	85 1b		sta $1b				sta tmp4+1	; flag for minus
.b0e6	ad 00 03	lda $0300			lda base
.b0e9	48		pha				pha
.b0ea	20 b8 cc	jsr $ccb8			jsr Two_dup		; ( addr u addr u )
.b0ed	a1 26		lda ($26,x)			lda (DStack+2,x)	; get 1st char
.b0ef	20 b1 b1	jsr $b1b1			jsr _MinusCheck		; a minus sign?
.b0f2	a0 0a		ldy #$0a			ldy #10			; decimal?
.b0f4	c9 23		cmp #$23			cmp #'#'
.b0f6	f0 35		beq $b12d			beq _base_changed
.b0f8	a0 10		ldy #$10			ldy #16			; hex?
.b0fa	c9 24		cmp #$24			cmp #'$'
.b0fc	f0 2f		beq $b12d			beq _base_changed
.b0fe	a0 02		ldy #$02			ldy #2			; binary?
.b100	c9 25		cmp #$25			cmp #'%'
.b102	f0 29		beq $b12d			beq _base_changed
.b104	c9 27		cmp #$27			cmp #$27		; ASCII for "'"
.b106	d0 2f		bne $b137			bne _check_dot
.b108	b5 24		lda $24,x			lda DStack+0,x	; length=3 ?
.b10a	c9 03		cmp #$03			cmp #3
.b10c	d0 1c		bne $b12a			bne _not_a_char
.b10e	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b110	85 1c		sta $1c				sta tmp5
.b112	b5 27		lda $27,x			lda DStack+3,x
.b114	85 1d		sta $1d				sta tmp5+1
.b116	a0 02		ldy #$02			ldy #2
.b118	b1 1c		lda ($1c),y			lda (tmp5),y
.b11a	c9 27		cmp #$27			cmp #$27	; ASCII for "'"
.b11c	d0 0c		bne $b12a			bne _not_a_char
.b11e	88		dey				dey		; The char we want is between the single quotes.
.b11f	b1 1c		lda ($1c),y			lda (tmp5),y
.b121	95 26		sta $26,x			sta DStack+2,x
.b123	a9 00		lda #$00			lda #0
.b125	95 27		sta $27,x			sta DStack+3,x
.b127	4c 86 b1	jmp $b186			jmp _drop_original_string ; Single flag will drop the TOS for us.
.b12a					_not_a_char:
.b12a	4c 63 b1	jmp $b163			jmp _number_error
.b12d					_base_changed:
.b12d	8c 00 03	sty $0300			sty base	; Switch to the new base
.b130	20 78 ca	jsr $ca78			jsr NOS_One_Plus ; start one character later
.b133	d6 24		dec $24,x			dec DStack+0,x	; decrease string length by one
.b135	a1 26		lda ($26,x)			lda (DStack+2,x) ; Load the first char again
.b137					_check_dot:
.b137	20 b1 b1	jsr $b1b1			jsr _MinusCheck
.b13a	b5 26		lda $26,x			lda DStack+2,x	; LSB of address
.b13c	85 1c		sta $1c				sta tmp5
.b13e	b5 27		lda $27,x			lda DStack+3,x
.b140	85 1d		sta $1d				sta tmp5+1
.b142	b4 24		ldy $24,x			ldy DStack+0,x	; Y now points to the first character after the string,
.b144	88		dey				dey		; but we need the last character
.b145	b1 1c		lda ($1c),y			lda (tmp5),y
.b147	c9 2e		cmp #$2e			cmp #'.'
.b149	d0 04		bne $b14f			bne _main
.b14b	c6 1a		dec $1a				dec tmp4	; Flag the fact
.b14d	d6 24		dec $24,x			dec DStack+0,x	; reduce string length by one
.b14f					_main:
.b14f	20 b8 cc	jsr $ccb8			jsr Two_Dup
.b152	a9 00		lda #$00			lda #0
.b154	95 28		sta $28,x			sta DStack+4,x	; clear ud
.b156	95 29		sta $29,x			sta DStack+5,x
.b158	95 2a		sta $2a,x			sta DStack+6,x
.b15a	95 2b		sta $2b,x			sta DStack+7,x
.b15c	20 59 b0	jsr $b059			jsr To_Number	; ( ud addr u -- ud addr u )
.b15f	b5 24		lda $24,x			lda DStack+0,x
.b161	f0 1f		beq $b182			beq _all_converted
.b163					_number_error:
.b163	20 4a c5	jsr $c54a			jsr Two_drop	; >NUMBER modified addr u
.b166	20 4a c5	jsr $c54a			jsr Two_drop	; ud   (partially converted number)
.b169	a9 3e		lda #$3e			lda #'>'	; print the unknown
.b16b	20 d6 cd	jsr $cdd6			jsr Emit_A	; word using the original addr u we saved at the beginning.
.b16e	20 ee cd	jsr $cdee			jsr Type
.b171	a9 3c		lda #$3c			lda #'<'
.b173	20 d6 cd	jsr $cdd6			jsr Emit_A
.b176	20 e2 cd	jsr $cde2			jsr Space
.b179	68		pla				pla		; restore base
.b17a	8d 00 03	sta $0300			sta base
.b17d	a9 f3		lda #$f3			lda #$100+err_UndefinedWord
.b17f	4c 85 b4	jmp $b485			jmp ThrowA
.b182					_all_converted:
.b182	e8		inx				inx		; Drop the current addr u
.b183	e8		inx				inx
.b184	e8		inx				inx
.b185	e8		inx				inx
.b186					_drop_original_string:
.b186	20 ec bf	jsr $bfec			jsr TwoNip	 ; Drop the original addr u
.b189	a5 1a		lda $1a				lda tmp4	; flag for double
.b18b	f0 10		beq $b19d			beq _single
.b18d	a9 20		lda #$20			lda #%00100000
.b18f	05 0c		ora $0c				ora status
.b191	85 0c		sta $0c				sta status
.b193	a5 1b		lda $1b				lda tmp4+1
.b195	f0 15		beq $b1ac			beq _done	; no minus, all done
.b197	20 ed c6	jsr $c6ed			jsr DNegate
.b19a	4c ac b1	jmp $b1ac			jmp _done
.b19d					_single:
.b19d	e8		inx				inx		; convert ud to u
.b19e	e8		inx				inx
.b19f	a9 df		lda #$df			lda #$ff-%00100000
.b1a1	25 0c		and $0c				and status
.b1a3	85 0c		sta $0c				sta status
.b1a5	a5 1b		lda $1b				lda tmp4+1
.b1a7	f0 03		beq $b1ac			beq _done	; no minus, all done
.b1a9	20 be c6	jsr $c6be			jsr Negate
.b1ac					_done:
.b1ac	68		pla				pla
.b1ad	8d 00 03	sta $0300			sta base
=211					CL	.var *-XtPtr1
=$b1b0					en = *	; remember here
>b0db	d3					.byte CL	;wh_CodeLength
.b1b0	60		rts				rts
.b1b1					_MinusCheck:
.b1b1	c9 2d		cmp #$2d			cmp #'-'		; a minus sign?
.b1b3	d0 09		bne $b1be			bne +
.b1b5	c6 1b		dec $1b				dec tmp4+1		; set flag
.b1b7	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; start one character later
.b1ba	d6 24		dec $24,x			dec DStack+0,x		; decrease string length by one
.b1bc	a1 26		lda ($26,x)			lda (DStack+2,x)	; get next char
.b1be	60		rts		+		rts
>b1bf	48 65 78			L1:	.text "Hex"	;  name of word as a string, ending at wh_NameLastChar
=45378					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1c2	03					.byte (("Hex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=233					LinkDisplacement = Nt0-WordListLink
>b1c3	10					.byte WordFlags	;wh_Flags
>b1c4	03					.byte 3	;wh_CodeLength
>b1c5	e9					  .byte LinkDisplacement
=$b1c6					XtPtr1 ::= *
=45378					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1c6	a9 10		lda #$10	Hex:		lda #16
.b1c8	d0 0d		bne $b1d7			bne decimal_a
=4					CL	.var *-XtPtr1
=$b1ca					en = *	; remember here
>b1c4	04					.byte CL	;wh_CodeLength
>b1ca	44 65 63 69 6d 61 6c		L1:	.text "Decimal"	;  name of word as a string, ending at wh_NameLastChar
=45393					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1d1	87					.byte (("Decimal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b1d2	00					.byte WordFlags	;wh_Flags
>b1d3	03					.byte 3	;wh_CodeLength
>b1d4	0f					  .byte LinkDisplacement
=$b1d5					XtPtr1 ::= *
=45393					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1d5	a9 0a		lda #$0a	Decimal:	lda #10
.b1d7	8d 00 03	sta $0300	decimal_a:	sta base+0
.b1da	a9 00		lda #$00			lda #0
.b1dc	8d 01 03	sta $0301			sta base+1		; paranoid
=10					CL	.var *-XtPtr1
=$b1df					en = *	; remember here
>b1d3	0a					.byte CL	;wh_CodeLength
.b1df	60		rts				rts
>b1e0	42 61 73 65			L1:	.text "Base"	;  name of word as a string, ending at wh_NameLastChar
=45412					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1e4	a4					.byte (("Base"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b1e5	10					.byte WordFlags	;wh_Flags
>b1e6	03					.byte 3	;wh_CodeLength
>b1e7	13					  .byte LinkDisplacement
=$b1e8					XtPtr1 ::= *
=45412					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1e8	a0 03		ldy #$03			ldy #>base
.b1ea	a9 00		lda #$00			lda #<base
.b1ec	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$b1ef					en = *	; remember here
>b1e6	07					.byte CL	;wh_CodeLength
>b1ef	43 6f 75 6e 74			L1:	.text "Count"	;  name of word as a string, ending at wh_NameLastChar
=45428					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b1f4	85					.byte (("Count"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b1f5	50					.byte WordFlags	;wh_Flags
>b1f6	03					.byte 3	;wh_CodeLength
>b1f7	10					  .byte LinkDisplacement
=$b1f8					XtPtr1 ::= *
=45428					WordListLink ::= Nt0 ; remember the nt of this word for later
.b1f8					Count:
.b1f8	20 29 b4	jsr $b429			jsr underflow_1
.b1fb	a1 24		lda ($24,x)			lda (DStack+0,x)	; A= number of characters
.b1fd	f6 24		inc $24,x			inc DStack+0,x		; move start address up by one
.b1ff	d0 02		bne $b203			bne +
.b201	f6 25		inc $25,x			inc DStack+1,x
.b203					+
.b203	4c ec b7	jmp $b7ec			jmp PushZA		; push number of characters, return
=14					CL	.var *-XtPtr1
=$b206					en = *	; remember here
>b1f6	0e					.byte CL	;wh_CodeLength
>b206	3f 50 61 69 72 43 74 6c		L1:	.text "?PairCtlA"	;  name of word as a string, ending at wh_NameLastChar
>b20e	41
=45455					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b20f	29					.byte (("?PairCtlA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b210	10					.byte WordFlags	;wh_Flags
>b211	03					.byte 3	;wh_CodeLength
>b212	1b					  .byte LinkDisplacement
=$b213					XtPtr1 ::= *
=45455					WordListLink ::= Nt0 ; remember the nt of this word for later
.b213	d5 24		cmp $24,x	QPairCtlA:	cmp DStack+0,x
.b215	f0 05		beq $b21c			beq _8
.b217	a9 ea		lda #$ea			lda #$100+err_ControlMismatch
.b219	4c 85 b4	jmp $b485			jmp ThrowA
.b21c	e8		inx		_8:		inx
.b21d	e8		inx				inx	; Drop n
.b21e	60		rts				rts
=12					CL	.var *-XtPtr1
=$b21f					en = *	; remember here
>b211	0c					.byte CL	;wh_CodeLength
>0743					DoLeave  .word ?	; head of leave addr patch chain
>0745					DoStkIndex: .byte ?
>0746					DoIndexL: .fill DoStkDim
>074e					DoIndexH: .fill DoStkDim
>0756					DoFufaL:  .fill DoStkDim
>075e					DoFufaH:  .fill DoStkDim
>b21f	3f 44 6f			L1:	.text "?Do"	;  name of word as a string, ending at wh_NameLastChar
=45474					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b222	e3					.byte (("?Do"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b223	1c					.byte WordFlags	;wh_Flags
>b224	03					.byte 3	;wh_CodeLength
>b225	13					  .byte LinkDisplacement
=$b226					XtPtr1 ::= *
=45474					WordListLink ::= Nt0 ; remember the nt of this word for later
.b226					Question_Do:
.b226	20 62 b3	jsr $b362			jsr Do_Leave_Init
.b229	a9 3d		lda #$3d			lda #<_runtime
.b22b	a0 b2		ldy #$b2			ldy #>_runtime
.b22d	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA	; compile JSR _runtime
.b230	a9 d0		lda #$d0			lda #$d0		; compile BNE *+5
.b232	a0 03		ldy #$03			ldy #3
.b234	20 14 cd	jsr $cd14			jsr Comma_YA
.b237	20 45 b3	jsr $b345			jsr Leave		; compile JMP leave
.b23a	4c 5a b2	jmp $b25a			jmp Do_8		; finish
=23					CL	.var *-XtPtr1
=$b23d					en = *	; remember here
>b224	17					.byte CL	;wh_CodeLength
.b23d					_runtime:
.b23d	20 62 b2	jsr $b262			jsr Do_Runtime	; start normally (we assume TOS!=NOS)
.b240	a5 12		lda $12				lda DoIndex+0	; Are TOS and NOS equal?
.b242	f0 01		beq $b245			beq _2
.b244	60		rts				rts		; return Z=0 to signal continue
.b245	a5 13		lda $13		_2:		lda DoIndex+1
.b247	c9 80		cmp #$80			cmp #$80
.b249	60		rts				rts		; return Z
>b24a	44 6f				L1:	.text "Do"	;  name of word as a string, ending at wh_NameLastChar
=45516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b24c	e2					.byte (("Do"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b24d	1c					.byte WordFlags	;wh_Flags
>b24e	03					.byte 3	;wh_CodeLength
>b24f	2a					  .byte LinkDisplacement
=$b250					XtPtr1 ::= *
=45516					WordListLink ::= Nt0 ; remember the nt of this word for later
.b250					Do:
.b250	20 62 b3	jsr $b362			jsr Do_Leave_Init
.b253	a9 62		lda #$62			lda #<Do_runtime
.b255	a0 b2		ldy #$b2			ldy #>Do_runtime
.b257	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA	; compile JSR _runtime
.b25a	20 3c ca	jsr $ca3c	Do_8:		jsr Here		; remember loop body start addr
.b25d	a9 50		lda #$50			lda #<Do		; identifier
.b25f	4c ec b7	jmp $b7ec			jmp PushZA
=18					CL	.var *-XtPtr1
=$b262					en = *	; remember here
>b24e	12					.byte CL	;wh_CodeLength
.b262					Do_Runtime:
.b262	ce 45 07	dec $0745			dec DoStkIndex		; alloc DO stack entry
.b265	ac 45 07	ldy $0745			ldy DoStkIndex
.b268	30 2d		bmi $b297			bmi _TooDeep
.b26a	a5 12		lda $12				lda DoIndex+0		; save previous DoIndex
.b26c	99 46 07	sta $0746,y			sta DoIndexL,y
.b26f	a5 13		lda $13				lda DoIndex+1
.b271	99 4e 07	sta $074e,y			sta DoIndexH,y
.b274	38		sec				sec			; fudge factor (FUFA)= $8000 - limit
.b275	a9 00		lda #$00			lda #0			;   the number that will trip the overflow flag
.b277	f5 26		sbc $26,x			sbc DStack+2,x
.b279	99 56 07	sta $0756,y			sta DoFuFaL,y
.b27c	a9 80		lda #$80			lda #$80
.b27e	f5 27		sbc $27,x			sbc DStack+3,x
.b280	99 5e 07	sta $075e,y			sta DoFuFaH,y
.b283	18		clc				clc			; index= FUFA plus original index
.b284	b5 24		lda $24,x			lda DStack+0,x
.b286	79 56 07	adc $0756,y			adc DoFuFaL,y
.b289	85 12		sta $12				sta DoIndex+0
.b28b	b5 25		lda $25,x			lda DStack+1,x
.b28d	79 5e 07	adc $075e,y			adc DoFuFaH,y
.b290	85 13		sta $13				sta DoIndex+1
.b292	e8		inx				inx			; Drop orig index
.b293	e8		inx				inx
.b294	e8		inx				inx			; Drop orig limit
.b295	e8		inx				inx
.b296	60		rts				rts			; return
.b297	a9 f9		lda #$f9	_TooDeep:	lda #$100+err_DoLoop_TooDeep
.b299	20 85 b4	jsr $b485			jsr ThrowA
>b29c	4c 6f 6f 70			L1:	.text "Loop"	;  name of word as a string, ending at wh_NameLastChar
=45600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2a0	04					.byte (("Loop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=84					LinkDisplacement = Nt0-WordListLink
>b2a1	1c					.byte WordFlags	;wh_Flags
>b2a2	03					.byte 3	;wh_CodeLength
>b2a3	54					  .byte LinkDisplacement
=$b2a4					XtPtr1 ::= *
=45600					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2a4					Loop:
.b2a4	a9 ab		lda #$ab			lda #<_Runtime
.b2a6	a0 b2		ldy #$b2			ldy #>_Runtime
.b2a8	4c c6 b2	jmp $b2c6			jmp Plus_Loop_5
=7					CL	.var *-XtPtr1
=$b2ab					en = *	; remember here
>b2a2	07					.byte CL	;wh_CodeLength
.b2ab					_Runtime:
.b2ab	e6 12		inc $12				inc DoIndex+0
.b2ad	f0 02		beq $b2b1			beq _Runtime2
.b2af	b8		clv				clv			; return V=0 to signal loop back
.b2b0	60		rts				rts
.b2b1	18		clc		_Runtime2:	clc
.b2b2	a5 13		lda $13				lda DoIndex+1		; handle carry from lo byte
.b2b4	69 01		adc #$01			adc #1
.b2b6	85 13		sta $13				sta DoIndex+1
.b2b8	60		rts				rts			; return V to signal loop back
>b2b9	2b 4c 6f 6f 70			L1:	.text "+Loop"	;  name of word as a string, ending at wh_NameLastChar
=45630					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b2be	05					.byte (("+Loop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b2bf	1c					.byte WordFlags	;wh_Flags
>b2c0	03					.byte 3	;wh_CodeLength
>b2c1	1e					  .byte LinkDisplacement
=$b2c2					XtPtr1 ::= *
=45630					WordListLink ::= Nt0 ; remember the nt of this word for later
.b2c2					Plus_Loop:
.b2c2	a9 d0		lda #$d0			lda #<Plus_Loop_Runtime
.b2c4	a0 b2		ldy #$b2			ldy #>Plus_Loop_Runtime
.b2c6	20 e7 b2	jsr $b2e7	Plus_Loop_5:	jsr Loop_End		; compile JSR _runtime, BVC back
.b2c9	a9 a7		lda #$a7			lda #<(Unloop-wh_LinkNt-1)
.b2cb	a0 b2		ldy #$b2			ldy #>(Unloop-wh_LinkNt-1)
.b2cd	4c c2 b6	jmp $b6c2			jmp Compile_Comma_NT_YA ; compile Unloop, return
=14					CL	.var *-XtPtr1
=$b2d0					en = *	; remember here
>b2c0	0e					.byte CL	;wh_CodeLength
.b2d0					Plus_Loop_Runtime:
.b2d0	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b2d2	b0 10		bcs $b2e4		bcs Throw_Stack_12
.b2d4	18		clc				clc			; DoIndex += step
.b2d5	b5 24		lda $24,x			lda DStack+0,x
.b2d7	65 12		adc $12				adc DoIndex+0
.b2d9	85 12		sta $12				sta DoIndex+0
.b2db	b5 25		lda $25,x			lda DStack+1,x
.b2dd	65 13		adc $13				adc DoIndex+1
.b2df	85 13		sta $13				sta DoIndex+1
.b2e1	e8		inx				inx			; Drop step
.b2e2	e8		inx				inx
.b2e3	60		rts				rts			; return V=0 to signal loop back
.b2e4	4c 4c b4	jmp $b44c	Throw_Stack_12: jmp Throw_Stack
.b2e7					Loop_End:
.b2e7	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA	; compile JSR runtime
.b2ea	a9 50		lda #$50			lda #<Do		; check id
.b2ec	20 13 b2	jsr $b213	Loop_End_3:	jsr QPairCtlA
.b2ef	a9 50		lda #$50			lda #$50		; compile BVC body
.b2f1	20 1c a7	jsr $a71c			jsr Branch_CommaA
.b2f4	ac 43 07	ldy $0743			ldy DoLeave+0		; for each leave addr entry
.b2f7	ad 44 07	lda $0744			lda DoLeave+1
.b2fa	f0 1b		beq $b317			beq _p9
.b2fc	84 14		sty $14		_p1:		sty tmp1+0		;   save entry pointer
.b2fe	85 15		sta $15				sta tmp1+1
.b300	a0 01		ldy #$01			ldy #1			;   save link
.b302	b1 14		lda ($14),y			lda (tmp1),y
.b304	48		pha				pha
.b305	88		dey				dey
.b306	b1 14		lda ($14),y			lda (tmp1),y
.b308	48		pha				pha
.b309	a5 00		lda $00				lda cp+0		;   patch addr
.b30b	91 14		sta ($14),y			sta (tmp1),y
.b30d	a5 01		lda $01				lda cp+1
.b30f	c8		iny				iny
.b310	91 14		sta ($14),y			sta (tmp1),y
.b312	68		pla				pla			;   get saved link
.b313	a8		tay				tay
.b314	68		pla				pla
.b315	d0 e5		bne $b2fc			bne _p1
.b317					_p9:
.b317	20 00 b4	jsr $b400			jsr PopYA		; restore DoLeave
.b31a	8d 43 07	sta $0743			sta DoLeave+0
.b31d	8c 44 07	sty $0744			sty DoLeave+1
.b320	60		rts				rts
>b321	55 6e 6c 6f 6f 70		L1:	.text "Unloop"	;  name of word as a string, ending at wh_NameLastChar
=45735					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b327	06					.byte (("Unloop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=105					LinkDisplacement = Nt0-WordListLink
>b328	04					.byte WordFlags	;wh_Flags
>b329	03					.byte 3	;wh_CodeLength
>b32a	69					  .byte LinkDisplacement
=$b32b					XtPtr1 ::= *
=45735					WordListLink ::= Nt0 ; remember the nt of this word for later
.b32b					Unloop:
.b32b	ac 45 07	ldy $0745			ldy DoStkIndex
.b32e	b9 46 07	lda $0746,y			lda DoIndexL,y	; restore Index
.b331	85 12		sta $12				sta DoIndex+0
.b333	b9 4e 07	lda $074e,y			lda DoIndexH,y
.b336	85 13		sta $13				sta DoIndex+1
.b338	ee 45 07	inc $0745			inc DoStkIndex	; drop Do stack entry
=16					CL	.var *-XtPtr1
=$b33b					en = *	; remember here
>b329	10					.byte CL	;wh_CodeLength
.b33b	60		rts				rts
>b33c	4c 65 61 76 65			L1:	.text "Leave"	;  name of word as a string, ending at wh_NameLastChar
=45761					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b341	a5					.byte (("Leave"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+NN+CO	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b342	1c					.byte WordFlags	;wh_Flags
>b343	03					.byte 3	;wh_CodeLength
>b344	1a					  .byte LinkDisplacement
=$b345					XtPtr1 ::= *
=45761					WordListLink ::= Nt0 ; remember the nt of this word for later
.b345					Leave:
.b345	a9 4c		lda #$4c			lda #$4c	; JMP abs
.b347	20 fb cc	jsr $ccfb			jsr C_Comma_A
.b34a	a5 01		lda $01				lda cp+1	; save cp
.b34c	48		pha				pha
.b34d	a5 00		lda $00				lda cp+0
.b34f	48		pha				pha
.b350	ad 43 07	lda $0743			lda DoLeave+0	; compile DoLeave link, patched later
.b353	ac 44 07	ldy $0744			ldy DoLeave+1
.b356	20 14 cd	jsr $cd14			jsr Comma_YA
.b359	68		pla				pla		; update DoLeave
.b35a	8d 43 07	sta $0743			sta DoLeave+0
.b35d	68		pla				pla
.b35e	8d 44 07	sta $0744			sta DoLeave+1
=28					CL	.var *-XtPtr1
=$b361					en = *	; remember here
>b343	1c					.byte CL	;wh_CodeLength
.b361	60		rts				rts
.b362					Do_Leave_Init:
.b362	ad 43 07	lda $0743			lda DoLeave+0
.b365	ac 44 07	ldy $0744			ldy DoLeave+1
.b368	20 bd b7	jsr $b7bd			jsr PushYA	; save old leave head
.b36b	a9 00		lda #$00			lda #0		; init
.b36d	8d 44 07	sta $0744			sta DoLeave+1
.b370	60		rts				rts
>b371	49				L1:	.text "I"	;  name of word as a string, ending at wh_NameLastChar
=45810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b372	21					.byte (("I"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b373	04					.byte WordFlags	;wh_Flags
>b374	03					.byte 3	;wh_CodeLength
>b375	31					  .byte LinkDisplacement
=$b376					XtPtr1 ::= *
=45810					WordListLink ::= Nt0 ; remember the nt of this word for later
.b376	ac 45 07	ldy $0745	I:		ldy DoStkIndex
.b379	ca		dex				dex
.b37a	ca		dex				dex
.b37b	38		sec				sec		; n= fudged index - fudge factor (FUFA)
.b37c	a5 12		lda $12				lda DoIndex+0
.b37e	f9 56 07	sbc $0756,y			sbc DoFuFaL,y
.b381	95 24		sta $24,x			sta DStack+0,x
.b383	a5 13		lda $13				lda DoIndex+1
.b385	f9 5e 07	sbc $075e,y			sbc DoFuFaH,y
.b388	95 25		sta $25,x			sta DStack+1,x
=20					CL	.var *-XtPtr1
=$b38a					en = *	; remember here
>b374	14					.byte CL	;wh_CodeLength
.b38a	60		rts				rts
>b38b	4a				L1:	.text "J"	;  name of word as a string, ending at wh_NameLastChar
=45836					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b38c	41					.byte (("J"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$04					WordFlags ::= CO	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b38d	04					.byte WordFlags	;wh_Flags
>b38e	03					.byte 3	;wh_CodeLength
>b38f	1a					  .byte LinkDisplacement
=$b390					XtPtr1 ::= *
=45836					WordListLink ::= Nt0 ; remember the nt of this word for later
.b390	ac 45 07	ldy $0745	J:		ldy DoStkIndex
.b393	ca		dex				dex
.b394	ca		dex				dex
.b395	38		sec				sec		; n= 2nd fudged index - 2nd fudge factor (FUFA)
.b396	b9 46 07	lda $0746,y			lda DoIndexL+0,y	; LSB
.b399	f9 57 07	sbc $0757,y			sbc DoFufaL+1,y
.b39c	95 24		sta $24,x			sta DStack+0,x
.b39e	b9 4e 07	lda $074e,y			lda DoIndexH+0,y	; MSB
.b3a1	f9 5f 07	sbc $075f,y			sbc DoFufaH+1,y
.b3a4	95 25		sta $25,x			sta DStack+1,x
=22					CL	.var *-XtPtr1
=$b3a6					en = *	; remember here
>b38e	16					.byte CL	;wh_CodeLength
.b3a6	60		rts				rts
>b3a7	41 62 6f 72 74 22		L1:	.text 'Abort"'	;  name of word as a string, ending at wh_NameLastChar
=45869					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3ad	46					.byte (('Abort"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>b3ae	1c					.byte WordFlags	;wh_Flags
>b3af	03					.byte 3	;wh_CodeLength
>b3b0	21					  .byte LinkDisplacement
=$b3b1					XtPtr1 ::= *
=45869					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3b1					Abort_Quote:
.b3b1	20 f8 b8	jsr $b8f8			jsr S_Quote		; compile the string literal
.b3b4	a0 b3		ldy #$b3			ldy #>_runtime		; compile JSR runtime, return
.b3b6	a9 bb		lda #$bb			lda #<_runtime
.b3b8	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=10					CL	.var *-XtPtr1
=$b3bb					en = *	; remember here
>b3af	0a					.byte CL	;wh_CodeLength
.b3bb					_runtime:
.b3bb	b5 28		lda $28,x			lda DStack+4,x
.b3bd	15 29		ora $29,x			ora DStack+5,x
.b3bf	d0 03		bne $b3c4			bne _do_abort	; true?
.b3c1	4c 97 ad	jmp $ad97			jmp ThreeDrop	; Drop three entries from the Data Stack
.b3c4					_do_abort:
.b3c4	20 ee cd	jsr $cdee			jsr Type	; print string
.b3c7	20 75 ab	jsr $ab75			jsr CR		; We follow Gforth in going to a new line
.b3ca	a9 fe		lda #$fe			lda #$100+err_AbortQuote
.b3cc	4c 85 b4	jmp $b485			jmp ThrowA
>b3cf	41 62 6f 72 74			L1:	.text "Abort"	;  name of word as a string, ending at wh_NameLastChar
=45908					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3d4	85					.byte (("Abort"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>b3d5	10					.byte WordFlags	;wh_Flags
>b3d6	03					.byte 3	;wh_CodeLength
>b3d7	27					  .byte LinkDisplacement
=$b3d8					XtPtr1 ::= *
=45908					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3d8	a9 ff		lda #$ff	Abort:		lda #$100+err_Abort
.b3da	4c 85 b4	jmp $b485			jmp ThrowA
=5					CL	.var *-XtPtr1
=$b3dd					en = *	; remember here
>b3d6	05					.byte CL	;wh_CodeLength
>b3dd	50 6f 70 41			L1:	.text "PopA"	;  name of word as a string, ending at wh_NameLastChar
=45921					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3e1	24					.byte (("PopA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b3e2	10					.byte WordFlags	;wh_Flags
>b3e3	03					.byte 3	;wh_CodeLength
>b3e4	0d					  .byte LinkDisplacement
=$b3e5					XtPtr1 ::= *
=45921					WordListLink ::= Nt0 ; remember the nt of this word for later
.b3e5					PopA:
.b3e5	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b3e7	b0 63		bcs $b44c		bcs Throw_Stack
.b3e9	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3eb	e8		inx				inx
.b3ec	e8		inx				inx
=8					CL	.var *-XtPtr1
=$b3ed					en = *	; remember here
>b3e3	08					.byte CL	;wh_CodeLength
.b3ed	60		rts		                rts
.b3ee					PopA2:
.b3ee	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b3f0	b0 5a		bcs $b44c		bcs Throw_Stack
.b3f2	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to A (1 byte)
.b3f4	e8		inx				inx
.b3f5	e8		inx				inx
.b3f6	60		rts		                rts
>b3f7	50 6f 70 59 41			L1:	.text "PopYA"	;  name of word as a string, ending at wh_NameLastChar
=45948					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b3fc	25					.byte (("PopYA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>b3fd	10					.byte WordFlags	;wh_Flags
>b3fe	03					.byte 3	;wh_CodeLength
>b3ff	1b					  .byte LinkDisplacement
=$b400					XtPtr1 ::= *
=45948					WordListLink ::= Nt0 ; remember the nt of this word for later
.b400					PopYA:
.b400	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b402	b0 48		bcs $b44c		bcs Throw_Stack
.b404	b5 24		lda $24,x			lda DStack+0,x		; pop TOS to YA
.b406	b4 25		ldy $25,x			ldy DStack+1,x
.b408	e8		inx				inx
.b409	e8		inx				inx
=10					CL	.var *-XtPtr1
=$b40a					en = *	; remember here
>b3fe	0a					.byte CL	;wh_CodeLength
.b40a	60		rts				rts
.b40b					PopTmp1:
.b40b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b40d	b0 3d		bcs $b44c		bcs Throw_Stack
.b40f	b5 24		lda $24,x			lda DStack+0,x	; PopYA
.b411	b4 25		ldy $25,x			ldy DStack+1,x
.b413	e8		inx				inx
.b414	e8		inx				inx
.b415	85 14		sta $14				sta tmp1+0
.b417	84 15		sty $15				sty tmp1+1
.b419	60		rts				rts
>b41a	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_1"	;  name of word as a string, ending at wh_NameLastChar
>b422	77 5f 31
=45989					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b425	2b					.byte (("underflow_1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=41					LinkDisplacement = Nt0-WordListLink
>b426	10					.byte WordFlags	;wh_Flags
>b427	03					.byte 3	;wh_CodeLength
>b428	29					  .byte LinkDisplacement
=$b429					XtPtr1 ::= *
=45989					WordListLink ::= Nt0 ; remember the nt of this word for later
.b429					underflow_1:
.b429	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.b42b	b0 1f		bcs $b44c		bcs Throw_Stack
=4					CL	.var *-XtPtr1
=$b42d					en = *	; remember here
>b427	04					.byte CL	;wh_CodeLength
.b42d	60		rts				rts
>b42e	75 6e 64 65 72 66 6c 6f		L1:	.text "underflow_2"	;  name of word as a string, ending at wh_NameLastChar
>b436	77 5f 32
=46009					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b439	4b					.byte (("underflow_2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b43a	10					.byte WordFlags	;wh_Flags
>b43b	03					.byte 3	;wh_CodeLength
>b43c	14					  .byte LinkDisplacement
=$b43d					XtPtr1 ::= *
=46009					WordListLink ::= Nt0 ; remember the nt of this word for later
.b43d					underflow_2:
.b43d	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.b43f	b0 0b		bcs $b44c		bcs Throw_Stack
=4					CL	.var *-XtPtr1
=$b441					en = *	; remember here
>b43b	04					.byte CL	;wh_CodeLength
.b441	60		rts		                rts
.b442					underflow_3:
.b442	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.b444	b0 06		bcs $b44c		bcs Throw_Stack
.b446	60		rts		                rts
.b447					underflow_4:
.b447	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.b449	b0 01		bcs $b44c		bcs Throw_Stack
.b44b	60		rts		                rts
.b44c					Throw_Stack:
.b44c	30 04		bmi $b452			bmi _over
.b44e	a9 fc		lda #$fc			lda #$100+err_Stack_Underflow
.b450	d0 33		bne $b485			bne ThrowA
.b452	a9 fd		lda #$fd	_over:		lda #$100+err_Stack_Overflow
.b454	d0 2f		bne $b485			bne ThrowA
.b456					Throw_FPStack:
.b456	30 04		bmi $b45c			bmi _over
.b458	a9 d3		lda #$d3			lda #$100+err_FPStackUnderflow
.b45a	d0 29		bne $b485			bne ThrowA
.b45c	a9 d4		lda #$d4	_over:		lda #$100+err_FPStackOverflow
.b45e	d0 25		bne $b485			bne ThrowA
.b460					Throw_FpOutOfRange:
.b460	a9 d5		lda #$d5			lda #$100+err_FpOutOfRange
.b462	d0 21		bne $b485			bne ThrowA
>b464	3f 53 74 61 63 6b		L1:	.text "?Stack"	;  name of word as a string, ending at wh_NameLastChar
=46058					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b46a	66					.byte (("?Stack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=49					LinkDisplacement = Nt0-WordListLink
>b46b	10					.byte WordFlags	;wh_Flags
>b46c	03					.byte 3	;wh_CodeLength
>b46d	31					  .byte LinkDisplacement
=$b46e					XtPtr1 ::= *
=46058					WordListLink ::= Nt0 ; remember the nt of this word for later
.b46e					QStack:
.b46e	e0 29		cpx #$29		cpx #-2*0+DStack0+1
.b470	b0 da		bcs $b44c		bcs Throw_Stack
.b472	a4 4c		ldy $4c				ldy FIndex		; check floating point stack
.b474	c0 0b		cpy #$0b			cpy #FDim+1
.b476	b0 de		bcs $b456			bcs Throw_FPStack
=10					CL	.var *-XtPtr1
=$b478					en = *	; remember here
>b46c	0a					.byte CL	;wh_CodeLength
.b478	60		rts				rts			; all OK
>b479	54 68 72 6f 77			L1:	.text "Throw"	;  name of word as a string, ending at wh_NameLastChar
=46078					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b47e	e5					.byte (("Throw"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b47f	10					.byte WordFlags	;wh_Flags
>b480	03					.byte 3	;wh_CodeLength
>b481	14					  .byte LinkDisplacement
=$b482					XtPtr1 ::= *
=46078					WordListLink ::= Nt0 ; remember the nt of this word for later
.b482	20 e5 b3	jsr $b3e5	Throw:		jsr PopA		; pop n
.b485	20 b0 b4	jsr $b4b0	ThrowA:		jsr Type_Exception_Text_A ; print the associated error string
.b488	a2 28		ldx #$28			ldx #DStack0		; reset data stack (in case of underflow)
.b48a					Abort_Core:
.b48a	20 b1 b8	jsr $b8b1			jsr SLiteral_runtime
.b48d	4c 93 b4	jmp $b493			  jmp +
>b490	3f 00 20					  .text "?",0," "	; signal an error to the simulator
.b493	20 ee cd	jsr $cdee	+		jsr Type
.b496	20 14 cf	jsr $cf14			jsr R_From		; show return stack TOS
.b499	20 99 81	jsr $8199			jsr TypeSymbol
.b49c	20 2f cf	jsr $cf2f			jsr R_Fetch		; show return stack NOS
.b49f	20 99 81	jsr $8199			jsr TypeSymbol
.b4a2	20 75 ab	jsr $ab75			jsr CR
.b4a5					Abort_Core2:
.b4a5	a9 08		lda #$08			lda #DoStkDim		; init do stack
.b4a7	8d 45 07	sta $0745			sta DoStkIndex
.b4aa	20 f3 b4	jsr $b4f3			jsr Empty_Stack		; empty the Data Stack & FP stack
.b4ad	4c 02 b5	jmp $b502			jmp Quit		; continue into QUIT.
.b4b0					Type_Exception_Text_A:
.b4b0	85 16		sta $16				sta tmp2+0	; save error code
.b4b2	a9 56		lda #$56			lda #<Exception_Text_List
.b4b4	a0 da		ldy #$da			ldy #>Exception_Text_List	; for each table entry
.b4b6	85 18		sta $18				sta tmp3+0
.b4b8	84 19		sty $19				sty tmp3+1
.b4ba	a0 00		ldy #$00	_TestEntry:	ldy #0		;   code match?
.b4bc	b1 18		lda ($18),y			lda (tmp3),y
.b4be	f0 1a		beq $b4da			beq _NotFound
.b4c0	c5 16		cmp $16				cmp tmp2+0
.b4c2	f0 11		beq $b4d5			beq _Found
.b4c4	c8		iny		-		iny		;   step to end of entry
.b4c5	b1 18		lda ($18),y			lda (tmp3),y
.b4c7	d0 fb		bne $b4c4			bne -
.b4c9	98		tya				tya		;   step to next entry
.b4ca	38		sec				sec
.b4cb	65 18		adc $18				adc tmp3+0
.b4cd	85 18		sta $18				sta tmp3+0
.b4cf	90 e9		bcc $b4ba			bcc _TestEntry
.b4d1	e6 19		inc $19				inc tmp3+1
.b4d3	d0 e5		bne $b4ba			bne _TestEntry
.b4d5					_Found:
.b4d5	a0 01		ldy #$01			ldy #1
.b4d7	4c 0f ce	jmp $ce0f			jmp Print_ASCIIZ_tmp3_no_lf
.b4da	a0 ff		ldy #$ff	_NotFound:	ldy #$ff		; print code
.b4dc	a5 16		lda $16				lda tmp2+0
.b4de	20 bd b7	jsr $b7bd			jsr PushYA
.b4e1	4c e3 cb	jmp $cbe3			jmp Dot
=98					CL	.var *-XtPtr1
=$b4e4					en = *	; remember here
>b480	62					.byte CL	;wh_CodeLength
>b4e4	45 6d 70 74 79 2d 53 74		L1:	.text "Empty-Stack"	;  name of word as a string, ending at wh_NameLastChar
>b4ec	61 63 6b
=46191					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4ef	6b					.byte (("Empty-Stack"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=113					LinkDisplacement = Nt0-WordListLink
>b4f0	10					.byte WordFlags	;wh_Flags
>b4f1	03					.byte 3	;wh_CodeLength
>b4f2	71					  .byte LinkDisplacement
=$b4f3					XtPtr1 ::= *
=46191					WordListLink ::= Nt0 ; remember the nt of this word for later
.b4f3	a2 28		ldx #$28	Empty_Stack:	ldx #DStack0	; init data stack
.b4f5	a9 0a		lda #$0a			lda #FDim	; init FP stack
.b4f7	85 4c		sta $4c				sta FIndex
=6					CL	.var *-XtPtr1
=$b4f9					en = *	; remember here
>b4f1	06					.byte CL	;wh_CodeLength
.b4f9	60		rts				rts
>b4fa	51 75 69 74			L1:	.text "Quit"	;  name of word as a string, ending at wh_NameLastChar
=46206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b4fe	84					.byte (("Quit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b4ff	10					.byte WordFlags	;wh_Flags
>b500	03					.byte 3	;wh_CodeLength
>b501	0f					  .byte LinkDisplacement
=$b502					XtPtr1 ::= *
=46206					WordListLink ::= Nt0 ; remember the nt of this word for later
.b502					Quit:
.b502	8a		txa				txa		; Save the DStack that we just defined
.b503	a2 ff		ldx #$ff			ldx #rsp0
.b505	9a		txs				txs
.b506	aa		tax				tax		; Restore the DStack. Dude, seriously.
.b507	a9 00		lda #$00			lda #0		; SOURCE-ID= zero (keyboard input)
.b509	85 02		sta $02				sta insrc+0
.b50b	85 03		sta $03				sta insrc+1
.b50d	20 4e b7	jsr $b74e			jsr Left_Bracket_NoCheck ; switch to interpret state
.b510					_get_line:
.b510	a9 00		lda #$00			lda #<buffer0	; input buffer, this is paranoid
.b512	85 04		sta $04				sta cib+0
.b514	a9 02		lda #$02			lda #>buffer0
.b516	85 05		sta $05				sta cib+1
.b518	20 7a c2	jsr $c27a			jsr Refill		; ( -- f )
.b51b	b5 24		lda $24,x			lda DStack+0,x
.b51d	d0 05		bne $b524			bne +
.b51f	a9 6b		lda #$6b			lda #$100+err_Refill	; REFILL returned a FALSE flag, something went wrong
.b521	4c 85 b4	jmp $b485			jmp ThrowA
.b524	e8		inx		+		inx			; drop the flag
.b525	e8		inx				inx
.b526	20 3d b5	jsr $b53d			jsr interpret
.b529	a5 0a		lda $0a				lda state
.b52b	d0 06		bne $b533			bne _print_compiled
.b52d	a9 22		lda #$22			lda #<str_ok
.b52f	a0 da		ldy #$da			ldy #>str_ok
.b531	d0 04		bne $b537			bne _print
.b533	a9 26		lda #$26	_print_compiled: lda #<str_compiled	; "compile" string
.b535	a0 da		ldy #$da			ldy #>str_compiled
.b537	20 1a ce	jsr $ce1a	_print:		jsr Print_ASCIIZ_YA
.b53a	4c 10 b5	jmp $b510			jmp _get_line
=59					CL	.var *-XtPtr1
=$b53d					en = *	; remember here
>b500	3b					.byte CL	;wh_CodeLength
.b53d					Interpret:
.b53d					_loop:
.b53d	20 6e b4	jsr $b46e			jsr QStack		; check stack bounds
.b540	20 7c ba	jsr $ba7c			jsr parse_name		; ( "string" -- addr u )
.b543	b5 24		lda $24,x	                lda DStack+0,x		; empty line?
.b545	f0 53		beq $b59a	                beq _line_done
.b547	20 b8 cc	jsr $ccb8			jsr Two_dup		; ( addr u -- addr u addr u )
.b54a	20 66 bc	jsr $bc66			jsr find_name		; ( addr u addr u -- addr u nt|0 )
.b54d	b5 25		lda $25,x			lda DStack+1,x		; word found?
.b54f	d0 1b		bne $b56c			bne _got_name_token
.b551	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.b552	e8		inx		                inx
.b553	20 dd b0	jsr $b0dd	                jsr Number           ; ( addr u -- u|d )
.b556	a5 0a		lda $0a		                lda state		; interpreting?
.b558	f0 e3		beq $b53d	                beq _loop		;   we're done
.b55a	a9 20		lda #$20	                lda #$20		; double cell number?
.b55c	24 0c		bit $0c		                bit status
.b55e	f0 06		beq $b566	                beq _single_number
.b560	20 58 b8	jsr $b858			jsr Two_literal		; compile a double number
.b563	4c 3d b5	jmp $b53d			jmp _loop
.b566	20 72 b7	jsr $b772	_single_number:	jsr Literal		; compile a single number
.b569	4c 3d b5	jmp $b53d			jmp _loop
.b56c					_got_name_token:
.b56c	20 a4 c9	jsr $c9a4			jsr Nip
.b56f	20 a4 c9	jsr $c9a4			jsr Nip			; ( nt )
.b572	85 14		sta $14				sta tmp1+0		; save a work copy of nt
.b574	84 15		sty $15				sty tmp1+1
.b576	a0 81		ldy #$81			ldy #Wh_Flags		; get word flags, we'll need them shortly
.b578	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b57a	a4 0a		ldy $0a				ldy state		; interpreting or compiling?
.b57c	d0 12		bne $b590			bne _compile
.b57e	29 04		and #$04			and #CO			; is the word COMPILE-ONLY?
.b580	f0 05		beq $b587			beq _execute
.b582	a9 f2		lda #$f2			lda #$100+err_CompileOnly ;   complain & quit
.b584	20 85 b4	jsr $b485			jsr ThrowA
.b587	20 b1 bd	jsr $bdb1	_execute:	jsr Name_To_Int		; ( nt -- xt )
.b58a	20 2b ce	jsr $ce2b			jsr Execute		; EXECUTE the xt that is TOS
.b58d	4c 3d b5	jmp $b53d	                jmp _loop
.b590					_compile:
.b590	29 08		and #$08			and #IM			; is the word IMMEDIATE?
.b592	d0 f3		bne $b587			bne _execute		;   IMMEDIATE word, execute now
.b594	20 bf b6	jsr $b6bf			jsr Compile_Comma_NT	; Compile the nt into the Dictionary
.b597	4c 3d b5	jmp $b53d			jmp _loop
.b59a					_line_done:
.b59a	e8		inx				inx			; drop stuff from PARSE_NAME
.b59b	e8		inx				inx
.b59c	e8		inx				inx
.b59d	e8		inx				inx
.b59e	60		rts				rts
>b59f	49 6d 6d 65 64 69 61 74		L1:	.text "Immediate"	;  name of word as a string, ending at wh_NameLastChar
>b5a7	65
=46376					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5a8	a9					.byte (("Immediate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=170					LinkDisplacement = Nt0-WordListLink
>b5a9	10					.byte WordFlags	;wh_Flags
>b5aa	03					.byte 3	;wh_CodeLength
>b5ab	aa					  .byte LinkDisplacement
=$b5ac					XtPtr1 ::= *
=46376					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5ac	a9 08		lda #$08	Immediate:	lda #IM
.b5ae	48		pha		SetFlag:	pha
.b5af	20 4e ba	jsr $ba4e			jsr current_to_dp
.b5b2	a0 81		ldy #$81			ldy #Wh_Flags
.b5b4	68		pla				pla
.b5b5	11 10		ora ($10),y			ora (dp),y
.b5b7	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b5b9					en = *	; remember here
>b5aa	0d					.byte CL	;wh_CodeLength
.b5b9	60		rts				rts
>b5ba	43 6f 6d 70 69 6c 65 2d		L1:	.text "Compile-only"	;  name of word as a string, ending at wh_NameLastChar
>b5c2	6f 6e 6c 79
=46406					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5c6	2c					.byte (("Compile-only"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b5c7	10					.byte WordFlags	;wh_Flags
>b5c8	03					.byte 3	;wh_CodeLength
>b5c9	1e					  .byte LinkDisplacement
=$b5ca					XtPtr1 ::= *
=46406					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5ca	a9 04		lda #$04	Compile_Only:	lda #CO
.b5cc	d0 e0		bne $b5ae			bne SetFlag
=4					CL	.var *-XtPtr1
=$b5ce					en = *	; remember here
>b5c8	04					.byte CL	;wh_CodeLength
>b5ce	6e 65 76 65 72 2d 6e 61		L1:	.text "never-native"	;  name of word as a string, ending at wh_NameLastChar
>b5d6	74 69 76 65
=46426					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5da	ac					.byte (("never-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=20					LinkDisplacement = Nt0-WordListLink
>b5db	10					.byte WordFlags	;wh_Flags
>b5dc	03					.byte 3	;wh_CodeLength
>b5dd	14					  .byte LinkDisplacement
=$b5de					XtPtr1 ::= *
=46426					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5de	20 4e ba	jsr $ba4e	Never_Native:	jsr current_to_dp
.b5e1	a0 81		ldy #$81			ldy #Wh_Flags
.b5e3	b1 10		lda ($10),y			lda (dp),y
.b5e5	09 10		ora #$10			ora #NN		; set NN flag
.b5e7	29 df		and #$df			and #$ff-AN	; clear AN flag
.b5e9	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b5eb					en = *	; remember here
>b5dc	0d					.byte CL	;wh_CodeLength
.b5eb	60		rts				rts
>b5ec	61 6c 77 61 79 73 2d 6e		L1:	.text "always-native"	;  name of word as a string, ending at wh_NameLastChar
>b5f4	61 74 69 76 65
=46457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b5f9	ad					.byte (("always-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>b5fa	10					.byte WordFlags	;wh_Flags
>b5fb	03					.byte 3	;wh_CodeLength
>b5fc	1f					  .byte LinkDisplacement
=$b5fd					XtPtr1 ::= *
=46457					WordListLink ::= Nt0 ; remember the nt of this word for later
.b5fd	20 4e ba	jsr $ba4e	Always_Native:	jsr current_to_dp
.b600	a0 81		ldy #$81			ldy #Wh_Flags
.b602	b1 10		lda ($10),y			lda (dp),y
.b604	09 20		ora #$20			ora #AN		; Make sure AN flag is set
.b606	29 ef		and #$ef			and #$ff-NN	; and NN flag is clear.
.b608	91 10		sta ($10),y			sta (dp),y
=13					CL	.var *-XtPtr1
=$b60a					en = *	; remember here
>b5fb	0d					.byte CL	;wh_CodeLength
.b60a	60		rts				rts
>b60b	61 6c 6c 6f 77 2d 6e 61		L1:	.text "allow-native"	;  name of word as a string, ending at wh_NameLastChar
>b613	74 69 76 65
=46487					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b617	ac					.byte (("allow-native"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>b618	10					.byte WordFlags	;wh_Flags
>b619	03					.byte 3	;wh_CodeLength
>b61a	1e					  .byte LinkDisplacement
=$b61b					XtPtr1 ::= *
=46487					WordListLink ::= Nt0 ; remember the nt of this word for later
.b61b	20 4e ba	jsr $ba4e	Allow_Native:	jsr current_to_dp
.b61e	a0 81		ldy #$81			ldy #Wh_Flags	; offset for status byte
.b620	b1 10		lda ($10),y			lda (dp),y
.b622	29 cf		and #$cf			and #$ff-NN-AN	; AN and NN flag is clear.
.b624	91 10		sta ($10),y			sta (dp),y
=11					CL	.var *-XtPtr1
=$b626					en = *	; remember here
>b619	0b					.byte CL	;wh_CodeLength
.b626	60		rts				rts
>b627	6e 63 2d 6c 69 6d 69 74		L1:	.text "nc-limit"	;  name of word as a string, ending at wh_NameLastChar
=46511					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b62f	88					.byte (("nc-limit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b630	10					.byte WordFlags	;wh_Flags
>b631	03					.byte 3	;wh_CodeLength
>b632	18					  .byte LinkDisplacement
=$b633					XtPtr1 ::= *
=46511					WordListLink ::= Nt0 ; remember the nt of this word for later
.b633	a0 03		ldy #$03			ldy #>nc_limit
.b635	a9 02		lda #$02			lda #<nc_limit
.b637	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$b63a					en = *	; remember here
>b631	07					.byte CL	;wh_CodeLength
>b63a	73 74 72 69 70 2d 75 6e		L1:	.text "strip-underflow"	;  name of word as a string, ending at wh_NameLastChar
>b642	64 65 72 66 6c 6f 77
=46537					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b649	ef					.byte (("strip-underflow"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>b64a	10					.byte WordFlags	;wh_Flags
>b64b	03					.byte 3	;wh_CodeLength
>b64c	1a					  .byte LinkDisplacement
=$b64d					XtPtr1 ::= *
=46537					WordListLink ::= Nt0 ; remember the nt of this word for later
.b64d	a0 03		ldy #$03			ldy #>uf_strip
.b64f	a9 04		lda #$04			lda #<uf_strip
.b651	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$b654					en = *	; remember here
>b64b	07					.byte CL	;wh_CodeLength
>b654	70 6f 73 74 70 6f 6e 65		L1:	.text "postpone"	;  name of word as a string, ending at wh_NameLastChar
=46556					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b65c	a8					.byte (("postpone"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>b65d	1c					.byte WordFlags	;wh_Flags
>b65e	03					.byte 3	;wh_CodeLength
>b65f	13					  .byte LinkDisplacement
=$b660					XtPtr1 ::= *
=46556					WordListLink ::= Nt0 ; remember the nt of this word for later
.b660					Postpone:
.b660	20 ad ba	jsr $baad			jsr parse_name_check	; get name string
.b663	20 8f bc	jsr $bc8f			jsr find_name_check	; lookup name
.b666	a0 81		ldy #$81			ldy #Wh_Flags		; IMMEDIATE word?
.b668	b1 14		lda ($14),y			lda (tmp1),y		;    using saved nt
.b66a	29 08		and #$08			and #IM
.b66c	f0 03		beq $b671			beq _not_immediate
.b66e	4c bf b6	jmp $b6bf			jmp Compile_Comma_NT	; compile it as if it was not IMMEDIATE
.b671					_not_immediate:
.b671	20 a4 b7	jsr $b7a4			jsr LDYA_Immed_Comma		; compile LDA #; LDY # with nt of the word
.b674	a0 b6		ldy #$b6			ldy #>Compile_Comma_NT_YA	; compile COMPILE,
.b676	a9 c2		lda #$c2			lda #<Compile_Comma_NT_YA
.b678	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=27					CL	.var *-XtPtr1
=$b67b					en = *	; remember here
>b65e	1b					.byte CL	;wh_CodeLength
>b67b	52 65 63 75 72 73 65		L1:	.text "Recurse"	;  name of word as a string, ending at wh_NameLastChar
=46594					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b682	a7					.byte (("Recurse"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>b683	1c					.byte WordFlags	;wh_Flags
>b684	03					.byte 3	;wh_CodeLength
>b685	26					  .byte LinkDisplacement
=$b686					XtPtr1 ::= *
=46594					WordListLink ::= Nt0 ; remember the nt of this word for later
.b686					Recurse:
.b686	a5 0e		lda $0e				lda WorkWord+0
.b688	a4 0f		ldy $0f				ldy WorkWord+1
.b68a	20 bd b7	jsr $b7bd			jsr PushYA
.b68d	24 0c		bit $0c				bit status		; does WorkWord contain xt or nt?
.b68f	50 10		bvc $b6a1			bvc _xt
.b691	a0 81		ldy #$81			ldy #wh_Flags		; is it Always-Native ?
.b693	b1 0e		lda ($0e),y			lda (WorkWord),y
.b695	29 20		and #$20			and #AN
.b697	f0 05		beq $b69e			beq _NotAn
.b699	a9 e5		lda #$e5			lda #$100+err_InvalidRecursion
.b69b	20 85 b4	jsr $b485			jsr ThrowA
.b69e					_NotAN:
.b69e	20 b1 bd	jsr $bdb1			jsr Name_To_Int		; convert nt to xt
.b6a1					_xt:
.b6a1	4c 34 cd	jmp $cd34			jmp Jsr_Comma		; compile JSR xt, return
=30					CL	.var *-XtPtr1
=$b6a4					en = *	; remember here
>b684	1e					.byte CL	;wh_CodeLength
>b6a4	43 6f 6d 70 69 6c 65 2c		L1:	.text "Compile,"	;  name of word as a string, ending at wh_NameLastChar
=46636					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b6ac	88					.byte (("Compile,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>b6ad	10					.byte WordFlags	;wh_Flags
>b6ae	03					.byte 3	;wh_CodeLength
>b6af	2a					  .byte LinkDisplacement
=$b6b0					XtPtr1 ::= *
=46636					WordListLink ::= Nt0 ; remember the nt of this word for later
.b6b0					Compile_Comma:
.b6b0	20 6c cf	jsr $cf6c			jsr Dup			; ( xt xt )
.b6b3	20 60 bd	jsr $bd60			jsr Int_To_Name		; ( xt nt )	does a dictionary search, tmp1=nt
.b6b6	e8		inx				inx			; drop nt
.b6b7	e8		inx				inx
.b6b8	a5 15		lda $15				lda tmp1+1
.b6ba	d0 0a		bne $b6c6			bne Compile_Comma_NT_Tmp1
.b6bc	4c 34 cd	jmp $cd34			jmp Jsr_Comma		; compile jsr, return
.b6bf					Compile_Comma_NT:
.b6bf	20 00 b4	jsr $b400			jsr PopYA
.b6c2					Compile_Comma_NT_YA:
.b6c2	85 14		sta $14				sta tmp1+0		; tmp1= nt
.b6c4	84 15		sty $15				sty tmp1+1
.b6c6					Compile_Comma_NT_Tmp1:
.b6c6	20 be bd	jsr $bdbe			jsr NameToIntTmp	; tmp2= xt
.b6c9	a5 16		lda $16				lda tmp2+0
.b6cb	a4 17		ldy $17				ldy tmp2+1
.b6cd	20 bd b7	jsr $b7bd			jsr PushYA		; ( xt )
.b6d0	a0 82		ldy #$82			ldy #wh_CodeLength
.b6d2	b1 14		lda ($14),y			lda (tmp1),y
.b6d4	20 ec b7	jsr $b7ec			jsr PushZA		; ( xt u )
.b6d7	a0 81		ldy #$81			ldy #Wh_Flags		; save word flags
.b6d9	b1 14		lda ($14),y			lda (tmp1),y
.b6db	29 30		and #$30			and #ST
.b6dd	c9 30		cmp #$30			cmp #ST			; inline & strip RTS addr save/restore?
.b6df	f0 2d		beq $b70e			beq _strip
.b6e1	c9 10		cmp #$10			cmp #NN			; Never Native word?
.b6e3	f0 12		beq $b6f7			beq _jsr_opt
.b6e5	c9 20		cmp #$20			cmp #AN			; Always Native word?
.b6e7	f0 2f		beq $b718			beq _inline
.b6e9	ad 03 03	lda $0303			lda nc_limit+1		; wordsize<=nc_limit?
.b6ec	d0 2a		bne $b718			bne _inline
.b6ee	ad 02 03	lda $0302			lda nc_limit+0
.b6f1	d5 24		cmp $24,x			cmp DStack+0,x
.b6f3	f0 02		beq $b6f7			beq _jsr_opt
.b6f5	b0 21		bcs $b718			bcs _inline
.b6f7					_jsr_opt:
.b6f7	ad 04 03	lda $0304			lda uf_strip
.b6fa	f0 0d		beq $b709			beq _jsr
.b6fc	a0 81		ldy #$81			ldy #wh_Flags		; underflow strip & not stack strip?
.b6fe	b1 14		lda ($14),y			lda (tmp1),y
.b700	29 40		and #$40			and #UF
.b702	d0 05		bne $b709			bne _jsr
.b704	a9 03		lda #$03			lda #3			;   strip the underflow check
.b706	20 2a ca	jsr $ca2a			jsr Nos_Plus_A
.b709					_jsr:
.b709	e8		inx				inx			; Drop len
.b70a	e8		inx				inx
.b70b	4c 34 cd	jmp $cd34			jmp Jsr_Comma		; compile jsr, return
.b70e					_strip:
.b70e	a9 06		lda #$06			lda #6			;   Adjust xt: skip over the leading RTS addr save
.b710	20 2a ca	jsr $ca2a			jsr Nos_Plus_A
.b713	a9 f4		lda #$f4			lda #$100-12		;   Adjust u: omit the leading RTS addr save & trailing RTS addr restore
.b715	20 5e ca	jsr $ca5e			jsr minus_a
.b718					_inline:
.b718	ad 04 03	lda $0304			lda uf_strip+0		; user wants underflow stripping?
.b71b	f0 10		beq $b72d			beq +
.b71d	b5 25		lda $25,x			lda DStack+1,x		; this word contains underflow checking?
.b71f	29 40		and #$40			and #UF
.b721	f0 0a		beq $b72d			beq +
.b723	a9 03		lda #$03			lda #3			;   Adjust xt: Start after underflow check
.b725	20 2a ca	jsr $ca2a			jsr Nos_Plus_A
.b728	a9 fd		lda #$fd			lda #$100-3		;   Adjust u: omit underflow check
.b72a	20 5e ca	jsr $ca5e			jsr minus_a
.b72d					+
.b72d	b5 24		lda $24,x			lda DStack+0,x		; compile code bytes
.b72f	f0 0c		beq $b73d			beq _copy_end
.b731	a1 26		lda ($26,x)	_copy_loop:	lda (DStack+2,x)
.b733	20 fb cc	jsr $ccfb			jsr C_Comma_A
.b736	20 78 ca	jsr $ca78			jsr NOS_One_Plus
.b739	d6 24		dec $24,x			dec DStack+0,x
.b73b	d0 f4		bne $b731			bne _copy_loop
.b73d					_copy_end:
.b73d	4c 4a c5	jmp $c54a			jmp Two_drop
=144					CL	.var *-XtPtr1
=$b740					en = *	; remember here
>b6ae	90					.byte CL	;wh_CodeLength
>b740	5b				L1:	.text "["	;  name of word as a string, ending at wh_NameLastChar
=46785					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b741	61					.byte (("["[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= IM+CO+NN	; modifyable copy, remember for later
=149					LinkDisplacement = Nt0-WordListLink
>b742	1c					.byte WordFlags	;wh_Flags
>b743	03					.byte 3	;wh_CodeLength
>b744	95					  .byte LinkDisplacement
=$b745					XtPtr1 ::= *
=46785					WordListLink ::= Nt0 ; remember the nt of this word for later
.b745	a5 0a		lda $0a		Left_Bracket:	lda state+0		; Already in the interpret state?
.b747	d0 05		bne $b74e			bne Left_Bracket_NoCheck
.b749	a9 69		lda #$69			lda #$100+err_AlreadyInterpreting
.b74b	4c 85 b4	jmp $b485			jmp ThrowA
.b74e					Left_Bracket_NoCheck:
.b74e	a9 00		lda #$00			lda #0
.b750	85 0a		sta $0a		Left_Bracket_3:	sta state+0
.b752	85 0b		sta $0b				sta state+1
=15					CL	.var *-XtPtr1
=$b754					en = *	; remember here
>b743	0f					.byte CL	;wh_CodeLength
.b754	60		rts				rts
>b755	5d				L1:	.text "]"	;  name of word as a string, ending at wh_NameLastChar
=46806					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b756	a1					.byte (("]"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>b757	18					.byte WordFlags	;wh_Flags
>b758	03					.byte 3	;wh_CodeLength
>b759	15					  .byte LinkDisplacement
=$b75a					XtPtr1 ::= *
=46806					WordListLink ::= Nt0 ; remember the nt of this word for later
.b75a					Right_Bracket:
.b75a	a5 0a		lda $0a				lda state+0		; Already in the compile state?
.b75c	f0 05		beq $b763			beq +
.b75e	a9 68		lda #$68			lda #$100+err_AlreadyCompiling ;   complain and quit
.b760	4c 85 b4	jmp $b485			jmp ThrowA
.b763					+
.b763	a9 ff		lda #$ff			lda #$FF
.b765	d0 e9		bne $b750			bne Left_Bracket_3
=13					CL	.var *-XtPtr1
=$b767					en = *	; remember here
>b758	0d					.byte CL	;wh_CodeLength
>b767	4c 69 74 65 72 61 6c		L1:	.text "Literal"	;  name of word as a string, ending at wh_NameLastChar
=46830					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b76e	87					.byte (("Literal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= IM+CO+UF+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b76f	5c					.byte WordFlags	;wh_Flags
>b770	03					.byte 3	;wh_CodeLength
>b771	18					  .byte LinkDisplacement
=$b772					XtPtr1 ::= *
=46830					WordListLink ::= Nt0 ; remember the nt of this word for later
.b772					Literal:
.b772	20 29 b4	jsr $b429			jsr underflow_1
.b775	20 7b b7	jsr $b77b			jsr LitCompile		; compile load regs, choose a runtime routine
.b778	4c c2 b6	jmp $b6c2			jmp Compile_Comma_NT_YA ; compile JSR runtime
=9					CL	.var *-XtPtr1
=$b77b					en = *	; remember here
>b770	09					.byte CL	;wh_CodeLength
.b77b					LitCompile:
.b77b	b5 25		lda $25,x			lda DStack+1,x		; hi byte zero?
.b77d	f0 08		beq $b787			beq _ZByte
.b77f	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile "ldy #; lda #" using TOS
.b782	a9 39		lda #$39			lda #<(PushYA-wh_LinkNt-1) ; prepare for Compile_Comma_NT_YA or Jmp_Comma_NT_YA
.b784	a0 b7		ldy #$b7			ldy #>(PushYA-wh_LinkNt-1)
.b786	60		rts				rts
.b787					_ZByte:
.b787	b4 24		ldy $24,x			ldy DStack+0,x		; is it 0 ?
.b789	f0 08		beq $b793			beq _zero
.b78b	20 ab b7	jsr $b7ab			jsr lda_immed_comma	; compile "lda #" using TOS
.b78e	a9 68		lda #$68			lda #<(PushZA-wh_LinkNt-1) ; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b790	a0 b7		ldy #$b7			ldy #>(PushZA-wh_LinkNt-1)
.b792	60		rts				rts
.b793	e8		inx		_zero:		inx			; drop
.b794	e8		inx				inx
.b795	a9 76		lda #$76			lda #<(Zero-wh_LinkNt-1)	; prepare for Jsr_Comma_YA or Jmp_Comma_YA
.b797	a0 b7		ldy #$b7			ldy #>(Zero-wh_LinkNt-1)
.b799	60		rts				rts
>b79a	4c 44 59 41 23 2c		L1:	.text "LDYA#,"	;  name of word as a string, ending at wh_NameLastChar
=46880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7a0	86					.byte (("LDYA#,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=50					LinkDisplacement = Nt0-WordListLink
>b7a1	10					.byte WordFlags	;wh_Flags
>b7a2	03					.byte 3	;wh_CodeLength
>b7a3	32					  .byte LinkDisplacement
=$b7a4					XtPtr1 ::= *
=46880					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7a4					ldya_immed_comma:
.b7a4	a9 a0		lda #$a0			lda #$a0		; ldy #
.b7a6	b4 25		ldy $25,x			ldy DStack+1,x
.b7a8	20 14 cd	jsr $cd14			jsr Comma_YA
.b7ab					lda_immed_comma:
.b7ab	a9 a9		lda #$a9			lda #$a9		; lda #
.b7ad	20 fb cc	jsr $ccfb			jsr C_Comma_A
.b7b0	4c f8 cc	jmp $ccf8			jmp C_Comma
=15					CL	.var *-XtPtr1
=$b7b3					en = *	; remember here
>b7a2	0f					.byte CL	;wh_CodeLength
>b7b3	50 75 73 68 59 41		L1:	.text "PushYA"	;  name of word as a string, ending at wh_NameLastChar
=46905					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7b9	26					.byte (("PushYA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>b7ba	00					.byte WordFlags	;wh_Flags
>b7bb	03					.byte 3	;wh_CodeLength
>b7bc	19					  .byte LinkDisplacement
=$b7bd					XtPtr1 ::= *
=46905					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7bd	ca		dex		PushYA:		dex
.b7be	ca		dex				dex
.b7bf	95 24		sta $24,x			sta DStack+0,x
.b7c1	94 25		sty $25,x			sty DStack+1,x
=6					CL	.var *-XtPtr1
=$b7c3					en = *	; remember here
>b7bb	06					.byte CL	;wh_CodeLength
.b7c3	60		rts				rts
>b7c4	54 72 75 65			L1:	.text "True"	;  name of word as a string, ending at wh_NameLastChar
=46920					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7c8	a4					.byte (("True"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>b7c9	00					.byte WordFlags	;wh_Flags
>b7ca	03					.byte 3	;wh_CodeLength
>b7cb	0f					  .byte LinkDisplacement
=$b7cc					XtPtr1 ::= *
=46920					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7cc	a9 ff		lda #$ff	True:		lda #$FF
.b7ce	ca		dex		PushAA:		dex
.b7cf	ca		dex				dex
.b7d0	95 24		sta $24,x			sta DStack+0,x
.b7d2	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-XtPtr1
=$b7d4					en = *	; remember here
>b7ca	08					.byte CL	;wh_CodeLength
.b7d4	60		rts				rts
>b7d5	46 61 6c 73 65			L1:	.text "False"	;  name of word as a string, ending at wh_NameLastChar
=46938					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7da	a5					.byte (("False"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>b7db	10					.byte WordFlags	;wh_Flags
>b7dc	03					.byte 3	;wh_CodeLength
>b7dd	12					  .byte LinkDisplacement
=$b7de					XtPtr1 ::= *
=46938					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7de	a9 00		lda #$00	False:		lda #0
.b7e0	f0 0a		beq $b7ec			beq PushZA
=4					CL	.var *-XtPtr1
=$b7e2					en = *	; remember here
>b7dc	04					.byte CL	;wh_CodeLength
>b7e2	50 75 73 68 5a 41		L1:	.text "PushZA"	;  name of word as a string, ending at wh_NameLastChar
=46952					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7e8	26					.byte (("PushZA"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7e9	00					.byte WordFlags	;wh_Flags
>b7ea	03					.byte 3	;wh_CodeLength
>b7eb	0e					  .byte LinkDisplacement
=$b7ec					XtPtr1 ::= *
=46952					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7ec	ca		dex		PushZA:		dex
.b7ed	ca		dex				dex
.b7ee	95 24		sta $24,x			sta DStack+0,x
.b7f0	a9 00		lda #$00			lda #0
.b7f2	95 25		sta $25,x			sta DStack+1,x
=8					CL	.var *-XtPtr1
=$b7f4					en = *	; remember here
>b7ea	08					.byte CL	;wh_CodeLength
.b7f4	60		rts				rts
>b7f5	30				L1:	.text "0"	;  name of word as a string, ending at wh_NameLastChar
=46966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7f6	01					.byte (("0"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b7f7	10					.byte WordFlags	;wh_Flags
>b7f8	03					.byte 3	;wh_CodeLength
>b7f9	0e					  .byte LinkDisplacement
=$b7fa					XtPtr1 ::= *
=46966					WordListLink ::= Nt0 ; remember the nt of this word for later
.b7fa	a9 00		lda #$00	Zero:		lda #0
.b7fc	f0 ee		beq $b7ec			beq PushZA
=4					CL	.var *-XtPtr1
=$b7fe					en = *	; remember here
>b7f8	04					.byte CL	;wh_CodeLength
>b7fe	31				L1:	.text "1"	;  name of word as a string, ending at wh_NameLastChar
=46975					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b7ff	21					.byte (("1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b800	10					.byte WordFlags	;wh_Flags
>b801	03					.byte 3	;wh_CodeLength
>b802	09					  .byte LinkDisplacement
=$b803					XtPtr1 ::= *
=46975					WordListLink ::= Nt0 ; remember the nt of this word for later
.b803	a9 01		lda #$01	One:		lda #1
.b805	d0 e5		bne $b7ec			bne PushZA
=4					CL	.var *-XtPtr1
=$b807					en = *	; remember here
>b801	04					.byte CL	;wh_CodeLength
>b807	32				L1:	.text "2"	;  name of word as a string, ending at wh_NameLastChar
=46984					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b808	41					.byte (("2"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>b809	10					.byte WordFlags	;wh_Flags
>b80a	03					.byte 3	;wh_CodeLength
>b80b	09					  .byte LinkDisplacement
=$b80c					XtPtr1 ::= *
=46984					WordListLink ::= Nt0 ; remember the nt of this word for later
.b80c	a9 02		lda #$02	Two:		lda #2
.b80e	d0 dc		bne $b7ec			bne PushZA
=4					CL	.var *-XtPtr1
=$b810					en = *	; remember here
>b80a	04					.byte CL	;wh_CodeLength
>b810	42 6c				L1:	.text "Bl"	;  name of word as a string, ending at wh_NameLastChar
=46994					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b812	82					.byte (("Bl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>b813	10					.byte WordFlags	;wh_Flags
>b814	03					.byte 3	;wh_CodeLength
>b815	0a					  .byte LinkDisplacement
=$b816					XtPtr1 ::= *
=46994					WordListLink ::= Nt0 ; remember the nt of this word for later
.b816	a9 20		lda #$20	Bl:		lda #AscSP
.b818	d0 d2		bne $b7ec			bne PushZA
=4					CL	.var *-XtPtr1
=$b81a					en = *	; remember here
>b814	04					.byte CL	;wh_CodeLength
>b81a	3e 49 6e			L1:	.text ">In"	;  name of word as a string, ending at wh_NameLastChar
=47005					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b81d	c3					.byte ((">In"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b81e	10					.byte WordFlags	;wh_Flags
>b81f	03					.byte 3	;wh_CodeLength
>b820	0b					  .byte LinkDisplacement
=$b821					XtPtr1 ::= *
=47005					WordListLink ::= Nt0 ; remember the nt of this word for later
.b821	a9 08		lda #$08			lda #ToIn
.b823	4c ec b7	jmp $b7ec			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b826					en = *	; remember here
>b81f	05					.byte CL	;wh_CodeLength
>b826	53 74 61 74 65			L1:	.text "State"	;  name of word as a string, ending at wh_NameLastChar
=47019					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b82b	a5					.byte (("State"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>b82c	10					.byte WordFlags	;wh_Flags
>b82d	03					.byte 3	;wh_CodeLength
>b82e	0e					  .byte LinkDisplacement
=$b82f					XtPtr1 ::= *
=47019					WordListLink ::= Nt0 ; remember the nt of this word for later
.b82f	a9 0a		lda #$0a			lda #state
.b831	4c ec b7	jmp $b7ec			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b834					en = *	; remember here
>b82d	05					.byte CL	;wh_CodeLength
>b834	64 70				L1:	.text "dp"	;  name of word as a string, ending at wh_NameLastChar
=47030					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b836	02					.byte (("dp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>b837	10					.byte WordFlags	;wh_Flags
>b838	03					.byte 3	;wh_CodeLength
>b839	0b					  .byte LinkDisplacement
=$b83a					XtPtr1 ::= *
=47030					WordListLink ::= Nt0 ; remember the nt of this word for later
.b83a	a9 10		lda #$10			lda #dp
.b83c	4c ec b7	jmp $b7ec			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b83f					en = *	; remember here
>b838	05					.byte CL	;wh_CodeLength
>b83f	54 6d 70 31			L1:	.text "Tmp1"	;  name of word as a string, ending at wh_NameLastChar
=47043					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b843	24					.byte (("Tmp1"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>b844	10					.byte WordFlags	;wh_Flags
>b845	03					.byte 3	;wh_CodeLength
>b846	0d					  .byte LinkDisplacement
=$b847					XtPtr1 ::= *
=47043					WordListLink ::= Nt0 ; remember the nt of this word for later
.b847	a9 14		lda #$14			lda #tmp1
.b849	4c ec b7	jmp $b7ec			jmp PushZA	; jmp to be a recognizable constant
=5					CL	.var *-XtPtr1
=$b84c					en = *	; remember here
>b845	05					.byte CL	;wh_CodeLength
>b84c	32 4c 69 74 65 72 61 6c		L1:	.text "2Literal"	;  name of word as a string, ending at wh_NameLastChar
=47060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b854	88					.byte (("2Literal"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=88					WordFlags ::= UF+IM+NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>b855	58					.byte WordFlags	;wh_Flags
>b856	03					.byte 3	;wh_CodeLength
>b857	11					  .byte LinkDisplacement
=$b858					XtPtr1 ::= *
=47060					WordListLink ::= Nt0 ; remember the nt of this word for later
.b858					Two_literal:
.b858	20 3d b4	jsr $b43d			jsr underflow_2 ; check double number
.b85b	20 89 cf	jsr $cf89			jsr Swap
.b85e	20 72 b7	jsr $b772			jsr Literal	; do lo cell
.b861	4c 72 b7	jmp $b772			jmp Literal	; do hi cell
=12					CL	.var *-XtPtr1
=$b864					en = *	; remember here
>b856	0c					.byte CL	;wh_CodeLength
>b864	53 4c 69 74 65 72 61 6c		L1:	.text "SLiteral"	;  name of word as a string, ending at wh_NameLastChar
=47084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b86c	88					.byte (("SLiteral"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=92					WordFlags ::= CO+IM+UF+NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>b86d	5c					.byte WordFlags	;wh_Flags
>b86e	03					.byte 3	;wh_CodeLength
>b86f	18					  .byte LinkDisplacement
=$b870					XtPtr1 ::= *
=47084					WordListLink ::= Nt0 ; remember the nt of this word for later
.b870					SLiteral:
.b870	20 3d b4	jsr $b43d			jsr underflow_2
.b873	20 93 b8	jsr $b893			jsr SLiteral_Start	; compile header
.b876	4c 87 b8	jmp $b887			jmp _Move_Test
.b879	a1 28		lda ($28,x)	_Move_Loop:	lda (DStack+4,x)
.b87b	20 fb cc	jsr $ccfb			jsr C_Comma_A
.b87e	f6 28		inc $28,x			inc DStack+4,x
.b880	d0 02		bne $b884			bne +
.b882	f6 29		inc $29,x			inc DStack+5,x
.b884					+
.b884	20 55 ca	jsr $ca55			jsr NOS_One_Minus
.b887	b5 26		lda $26,x	_Move_Test:	lda DStack+2,x
.b889	15 27		ora $27,x			ora DStack+3,x
.b88b	d0 ec		bne $b879			bne _Move_Loop
.b88d	20 a0 b8	jsr $b8a0			jsr SLiteral_End
.b890	4c 4a c5	jmp $c54a			jmp Two_Drop		; clean up and leave
=35					CL	.var *-XtPtr1
=$b893					en = *	; remember here
>b86e	23					.byte CL	;wh_CodeLength
.b893					SLiteral_Start:
.b893	a9 b1		lda #$b1			lda #<SLiteral_runtime	; compile JSR SLiteral_Runtime
.b895	a0 b8		ldy #$b8			ldy #>SLiteral_runtime
.b897	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.b89a	20 3c ca	jsr $ca3c			jsr Here		; push addr of start of JMP
.b89d	4c 4d cd	jmp $cd4d			jmp Jmp_Comma_YA	; compile JMP around string (dummy addr)
.b8a0					SLiteral_End:
.b8a0	20 6e ca	jsr $ca6e			jsr One_Plus
.b8a3	a5 00		lda $00				lda cp+0		; Update the address of the jump to HERE.
.b8a5	81 24		sta ($24,x)			sta (DStack+0,x)
.b8a7	20 6e ca	jsr $ca6e			jsr One_Plus
.b8aa	a5 01		lda $01				lda cp+1
.b8ac	81 24		sta ($24,x)			sta (DStack+0,x)
.b8ae	e8		inx				inx			; drop herej
.b8af	e8		inx				inx
.b8b0	60		rts				rts
.b8b1					SLiteral_Runtime:
.b8b1	86 16		stx $16				stx tmp2	; save data stack index
.b8b3	ba		tsx				tsx
.b8b4	bd 01 01	lda $0101,x	SLiteral_Run2:	lda RStack+1,x	; tmp1= RTS addr
.b8b7	85 14		sta $14				sta tmp1+0
.b8b9	bd 02 01	lda $0102,x			lda RStack+2,x
.b8bc	85 15		sta $15				sta tmp1+1
.b8be	a6 16		ldx $16				ldx tmp2	; restore data stack index
.b8c0	ca		dex				dex		; push string addr
.b8c1	ca		dex				dex
.b8c2	18		clc				clc
.b8c3	a5 14		lda $14				lda tmp1+0
.b8c5	69 04		adc #$04			adc #3+1	;   just after the following JMP + correcting for JSR behavior
.b8c7	95 24		sta $24,x			sta DStack+0,x
.b8c9	a5 15		lda $15				lda tmp1+1
.b8cb	69 00		adc #$00			adc #0
.b8cd	95 25		sta $25,x			sta DStack+1,x
.b8cf	ca		dex				dex		; push string length
.b8d0	ca		dex				dex
.b8d1	38		sec				sec
.b8d2	a0 02		ldy #$02			ldy #2		;   = string_end - string_addr
.b8d4	b1 14		lda ($14),y			lda (tmp1),y
.b8d6	f5 26		sbc $26,x			sbc DStack+2,x
.b8d8	95 24		sta $24,x			sta DStack+0,x
.b8da	c8		iny				iny
.b8db	b1 14		lda ($14),y			lda (tmp1),y
.b8dd	f5 27		sbc $27,x			sbc DStack+3,x
.b8df	95 25		sta $25,x			sta DStack+1,x
.b8e1	60		rts				rts
>b8e2	2e 22				L1:	.text '."'	;  name of word as a string, ending at wh_NameLastChar
=47204					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8e4	42					.byte (('."'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=120					LinkDisplacement = Nt0-WordListLink
>b8e5	1c					.byte WordFlags	;wh_Flags
>b8e6	03					.byte 3	;wh_CodeLength
>b8e7	78					  .byte LinkDisplacement
=$b8e8					XtPtr1 ::= *
=47204					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8e8					Dot_quote:
.b8e8	20 f8 b8	jsr $b8f8			jsr S_Quote		; compile the string literal
.b8eb	a0 cd		ldy #$cd			ldy #>Type		; compile: print string
.b8ed	a9 ee		lda #$ee			lda #<Type
.b8ef	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=10					CL	.var *-XtPtr1
=$b8f2					en = *	; remember here
>b8e6	0a					.byte CL	;wh_CodeLength
>b8f2	53 22				L1:	.text 'S"'	;  name of word as a string, ending at wh_NameLastChar
=47220					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>b8f4	42					.byte (('S"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>b8f5	18					.byte WordFlags	;wh_Flags
>b8f6	03					.byte 3	;wh_CodeLength
>b8f7	10					  .byte LinkDisplacement
=$b8f8					XtPtr1 ::= *
=47220					WordListLink ::= Nt0 ; remember the nt of this word for later
.b8f8					S_Quote:
.b8f8	a9 00		lda #$00			lda #0		; Don't handle escaped chars.
.b8fa					S_Quote_start:
.b8fa	48		pha				pha			; save "handle escaped chars" flag
.b8fb	a5 0a		lda $0a				lda state		; compiling?
.b8fd	f0 06		beq $b905			beq _15
.b8ff	20 93 b8	jsr $b893			jsr SLiteral_Start	; compile SLiteral header
.b902	4c 08 b9	jmp $b908			jmp _19
.b905	20 3c ca	jsr $ca3c	_15:		jsr Here		; remember start addr
.b908					_19:
.b908	68		pla				pla			; init t2 flags
.b909	20 ec b7	jsr $b7ec			jsr PushZA
.b90c	20 fa b7	jsr $b7fa			jsr Zero		; init t3 flags
.b90f					_savechars_loop:
.b90f	a5 08		lda $08				lda toin+0		; LSB
.b911	c5 06		cmp $06				cmp ciblen+0
.b913	a5 09		lda $09				lda toin+1		; MSB
.b915	e5 07		sbc $07				sbc ciblen+1
.b917	90 10		bcc $b929			bcc _input_fine		; input buffer empty?
.b919	20 7a c2	jsr $c27a			jsr Refill		; Refill it  ( -- f )
.b91c	b5 24		lda $24,x			lda DStack+0,x		; Check result of refill.
.b91e	d0 05		bne $b925			bne +
.b920	a9 6b		lda #$6b			lda #$100+err_refill	; Something when wrong with refill.
.b922	4c 85 b4	jmp $b485			jmp ThrowA
.b925	e8		inx		+		inx			; Drop the refill flag
.b926	e8		inx				inx
.b927	d0 e6		bne $b90f			bne _savechars_loop	; jump back up to the empty check, just in
.b929					_input_fine:
.b929	18		clc				clc			; tmp1= A= the char at Cib+ToIn
.b92a	a5 04		lda $04				lda cib+0
.b92c	85 14		sta $14				sta tmp1+0
.b92e	a5 05		lda $05				lda cib+1
.b930	65 09		adc $09				adc toin+1
.b932	85 15		sta $15				sta tmp1+1
.b934	a4 08		ldy $08				ldy ToIn
.b936	b1 14		lda ($14),y			lda (tmp1),y
.b938	85 14		sta $14				sta tmp1
.b93a	e6 08		inc $08				inc toin+0		; Move on to the next character.
.b93c	d0 02		bne $b940			bne +
.b93e	e6 09		inc $09				inc toin+1
.b940					+
.b940	b4 26		ldy $26,x			ldy DStack+2,x		; handling escaped characters?
.b942	30 03		bmi $b947			bmi +
.b944	4c ea b9	jmp $b9ea			jmp _regular_char
.b947					+
.b947	b4 27		ldy $27,x			ldy DStack+3,x  		; already seen the backslash?
.b949	30 03		bmi $b94e			bmi +
.b94b	4c e0 b9	jmp $b9e0			jmp _not_escaped
.b94e					+
.b94e	84 15		sty $15				sty tmp1+1
.b950	24 15		bit $15				bit tmp1+1		; in the middle of a \x sequence ?
.b952	70 25		bvs $b979			bvs _check_esc_chars
.b954	a9 01		lda #$01			lda #1
.b956	24 15		bit $15				bit tmp1+1
.b958	d0 11		bne $b96b			bne _esc_x_second_digit
.b95a	c8		iny				iny			; Adjust flag for second digit next time.
.b95b	94 27		sty $27,x			sty DStack+3,x
.b95d	a5 14		lda $14				lda tmp1+0		; Get the char again.
.b95f	20 0d ba	jsr $ba0d			jsr convert_hex_value	; Convert to hex
.b962	0a		asl a				asl			; This is the upper nybble, so move it up.
.b963	0a		asl a				asl
.b964	0a		asl a				asl
.b965	0a		asl a				asl
.b966	95 24		sta $24,x			sta DStack+0,x		; Save it for later.
.b968	4c f1 b9	jmp $b9f1			jmp _next_character
.b96b					_esc_x_second_digit:
.b96b	a9 00		lda #$00			lda #0			; Clear the escaped character flag
.b96d	95 27		sta $27,x			sta DStack+3,x		;   (because we are handling it right here)
.b96f	a5 14		lda $14				lda tmp1+0		; Convert to hex
.b971	20 0d ba	jsr $ba0d			jsr convert_hex_value
.b974	15 24		ora $24,x			ora DStack+0,x		; combine with value in t3
.b976	4c ee b9	jmp $b9ee			jmp _save_character
.b979					_check_esc_chars:
.b979	a0 00		ldy #$00			ldy #0
.b97b	94 27		sty $27,x			sty DStack+3,x
.b97d	a8		tay				tay
.b97e	a9 07		lda #$07			lda #AscBELL	      ; BEL (ASCII value 7)
.b980	c0 61		cpy #$61			cpy #'a'
.b982	f0 6a		beq $b9ee			beq _save_character
.b984	a9 08		lda #$08			lda #AscBS	      ; Backspace (ASCII value 8)
.b986	c0 62		cpy #$62			cpy #'b'
.b988	f0 64		beq $b9ee			beq _save_character
.b98a	a9 1b		lda #$1b			lda #AscESC	       ; ESC (ASCII value 27)
.b98c	c0 65		cpy #$65			cpy #'e'
.b98e	f0 5e		beq $b9ee			beq _save_character
.b990	a9 0c		lda #$0c			lda #AscFF	       ; FF (ASCII value 12)
.b992	c0 66		cpy #$66			cpy #'f'
.b994	f0 58		beq $b9ee			beq _save_character
.b996	a9 0a		lda #$0a			lda #AscLF	       ; LF (ASCII value 10)
.b998	c0 6c		cpy #$6c			cpy #'l'
.b99a	f0 52		beq $b9ee			beq _save_character
.b99c	c0 6e		cpy #$6e			cpy #'n'
.b99e	f0 4e		beq $b9ee			beq _save_character
.b9a0	c0 6d		cpy #$6d			cpy #'m'
.b9a2	d0 09		bne $b9ad			bne +
.b9a4	a9 0d		lda #$0d			lda #AscCR		; CR/LF pair (ASCII values 13, 10)
.b9a6	20 fb cc	jsr $ccfb			jsr C_Comma_A
.b9a9	a9 0a		lda #$0a			lda #AscLF
.b9ab	d0 41		bne $b9ee			bne _save_character
.b9ad					+
.b9ad	a9 22		lda #$22			lda #AscDQuote		; Double quote (ASCII value 34)
.b9af	c0 71		cpy #$71			cpy #'q'
.b9b1	f0 3b		beq $b9ee			beq _save_character
.b9b3	c0 22		cpy #$22			cpy #AscDQuote
.b9b5	f0 37		beq $b9ee			beq _save_character
.b9b7	a9 0d		lda #$0d			lda #AscCR		; CR (ASCII value 13)
.b9b9	c0 72		cpy #$72			cpy #'r'
.b9bb	f0 31		beq $b9ee			beq _save_character
.b9bd	a9 09		lda #$09			lda #AscHT		; Horizontal TAB (ASCII value 9)
.b9bf	c0 74		cpy #$74			cpy #'t'
.b9c1	f0 2b		beq $b9ee			beq _save_character
.b9c3	a9 0b		lda #$0b			lda #AscVT		; Vertical TAB (ASCII value 11)
.b9c5	c0 76		cpy #$76			cpy #'v'
.b9c7	f0 25		beq $b9ee			beq _save_character
.b9c9	a9 00		lda #$00			lda #0			; NULL (ASCII value 0)
.b9cb	c0 7a		cpy #$7a			cpy #'z'
.b9cd	f0 1f		beq $b9ee			beq _save_character
.b9cf					_check_esc_x:
.b9cf	c0 78		cpy #$78			cpy #'x'
.b9d1	d0 06		bne $b9d9			bne +
.b9d3	a9 be		lda #$be			lda #$BE	; Clear bits 6 and 0
.b9d5	95 27		sta $27,x			sta DStack+3,x
.b9d7	d0 18		bne $b9f1			bne _next_character
.b9d9					+
.b9d9	a9 5c		lda #$5c			lda #AscBackslash	; Backslash (ASCII value 92)
.b9db	c0 5c		cpy #$5c			cpy #AscBackslash
.b9dd	f0 0f		beq $b9ee			beq _save_character
.b9df	98		tya				tya
.b9e0					_not_escaped:
.b9e0	c9 5c		cmp #$5c			cmp #$5C	; The backslash char
.b9e2	d0 06		bne $b9ea			bne _regular_char
.b9e4	a9 ff		lda #$ff			lda #$FF
.b9e6	95 27		sta $27,x			sta DStack+3,x
.b9e8	d0 07		bne $b9f1			bne _next_character
.b9ea					_regular_char:
.b9ea	c9 22		cmp #$22			cmp #AscDQuote		; ASCII for "
.b9ec	f0 06		beq $b9f4			beq _found_string_end
.b9ee					_save_character:
.b9ee	20 fb cc	jsr $ccfb			jsr C_Comma_A		; compile this character into the dictionary
.b9f1					_next_character:
.b9f1	4c 0f b9	jmp $b90f			jmp _savechars_loop
.b9f4					_found_string_end:
.b9f4	e8		inx				inx			; Drop t3
.b9f5	e8		inx				inx
.b9f6	a5 0a		lda $0a				lda state		; What happens next depends on the state (which is bad, but
.b9f8	d0 0e		bne $ba08			bne _cmpl		; that's the way it works at the moment).
.b9fa	38		sec				sec			; TOS= length of string = Here - start_addr
.b9fb	a5 00		lda $00				lda cp+0
.b9fd	f5 26		sbc $26,x			sbc DStack+2,x
.b9ff	95 24		sta $24,x			sta DStack+0,x		;   LSB
.ba01	a5 01		lda $01				lda cp+1
.ba03	f5 27		sbc $27,x			sbc DStack+3,x
.ba05	95 25		sta $25,x			sta DStack+1,x		;   MSB
.ba07	60		rts				rts			; ( startaddr u )
.ba08					_cmpl:
.ba08	e8		inx				inx			; Drop t2
.ba09	e8		inx				inx
.ba0a	4c a0 b8	jmp $b8a0			jmp SLiteral_End	; ( jmpaddr )
=277					CL	.var *-XtPtr1
=$ff					CL	 .var $ff
=$ba0d					en = *	; remember here
>b8f6	ff					.byte CL	;wh_CodeLength
.ba0d					convert_hex_value:
.ba0d	c9 41		cmp #$41			cmp #'A'
.ba0f	90 05		bcc $ba16			bcc _digit
.ba11	29 1f		and #$1f	_alpha:		and #$1F		; Make it uppercase.
.ba13	69 08		adc #$08			adc #9-1		; gives value 10 for 'A'
.ba15	60		rts				rts
.ba16					_digit:
.ba16	e9 2f		sbc #$2f			sbc #'0'-1
.ba18	60		rts				rts
>ba19	53 5c 22			L1:	.text 'S\"'	;  name of word as a string, ending at wh_NameLastChar
=47516					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba1c	43					.byte (('S\"'[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=296					LinkDisplacement = Nt0-WordListLink
=25						  WordFlags ::= WordFlags | FP
>ba1d	19					.byte WordFlags	;wh_Flags
>ba1e	03					.byte 3	;wh_CodeLength
>ba1f	74 b8					  .word WordListLink
=$ba21					XtPtr1 ::= *
=47516					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba21					S_Backslash_Quote:
.ba21	a9 ff		lda #$ff			lda #$ff	; Do handle escaped chars.
.ba23	4c fa b8	jmp $b8fa			jmp S_Quote_start
=5					CL	.var *-XtPtr1
=$ba26					en = *	; remember here
>ba1e	05					.byte CL	;wh_CodeLength
>ba26	4c 61 74 65 73 74 58 74		L1:	.text "LatestXt"	;  name of word as a string, ending at wh_NameLastChar
=47534					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba2e	88					.byte (("LatestXt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba2f	10					.byte WordFlags	;wh_Flags
>ba30	03					.byte 3	;wh_CodeLength
>ba31	12					  .byte LinkDisplacement
=$ba32					XtPtr1 ::= *
=47534					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba32	20 44 ba	jsr $ba44	LatestXt:	jsr LatestNt	; ( nt )
.ba35	4c b1 bd	jmp $bdb1			jmp Name_To_Int	; ( xt )
=6					CL	.var *-XtPtr1
=$ba38					en = *	; remember here
>ba30	06					.byte CL	;wh_CodeLength
>ba38	4c 61 74 65 73 74 4e 74		L1:	.text "LatestNt"	;  name of word as a string, ending at wh_NameLastChar
=47552					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba40	88					.byte (("LatestNt"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>ba41	10					.byte WordFlags	;wh_Flags
>ba42	03					.byte 3	;wh_CodeLength
>ba43	12					  .byte LinkDisplacement
=$ba44					XtPtr1 ::= *
=47552					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba44	20 4e ba	jsr $ba4e	LatestNt:	jsr current_to_dp
.ba47	a5 10		lda $10				lda dp+0
.ba49	a4 11		ldy $11				ldy dp+1
.ba4b	4c bd b7	jmp $b7bd			jmp PushYA
=10					CL	.var *-XtPtr1
=$ba4e					en = *	; remember here
>ba42	0a					.byte CL	;wh_CodeLength
.ba4e					current_to_dp:
.ba4e	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba51	0a		asl a				asl			; dp= wordlists[A]
.ba52	a8		tay				tay
.ba53	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.ba56	85 10		sta $10				sta dp+0
.ba58	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.ba5b	85 11		sta $11				sta dp+1
.ba5d	60		rts				rts
.ba5e					dp_to_current:
.ba5e	ad 10 03	lda $0310			lda CurrentV		; A= current wordlist wid
.ba61	0a		asl a		                asl			; wordlists[A]=dp
.ba62	a8		tay		                tay
.ba63	a5 10		lda $10		                lda dp+0
.ba65	99 12 03	sta $0312,y			sta WordlistsV+0,y
.ba68	a5 11		lda $11		                lda dp+1
.ba6a	99 13 03	sta $0313,y	                sta WordlistsV+1,y
.ba6d	60		rts		                rts
>ba6e	50 61 72 73 65 2d 4e 61		L1:	.text "Parse-Name"	;  name of word as a string, ending at wh_NameLastChar
>ba76	6d 65
=47608					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ba78	aa					.byte (("Parse-Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>ba79	10					.byte WordFlags	;wh_Flags
>ba7a	03					.byte 3	;wh_CodeLength
>ba7b	38					  .byte LinkDisplacement
=$ba7c					XtPtr1 ::= *
=47608					WordListLink ::= Nt0 ; remember the nt of this word for later
.ba7c					Parse_Name:
.ba7c	a5 04		lda $04				lda cib+0		; tmp2= cib+(toin & $ff00)
.ba7e	85 16		sta $16				sta tmp2+0
.ba80	18		clc				clc
.ba81	a5 05		lda $05				lda cib+1
.ba83	65 09		adc $09				adc toin+1
.ba85	85 17		sta $17				sta tmp2+1
.ba87	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.ba89					_skip_loop:
.ba89	c4 06		cpy $06				cpy ciblen+0		; more chars left?
.ba8b	a5 09		lda $09				lda toin+1
.ba8d	e5 07		sbc $07				sbc ciblen+1
.ba8f	b0 11		bcs $baa2			bcs _empty_line
.ba91	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.ba93	c9 21		cmp #$21			cmp #AscSP+1		; is_whitespace
.ba95	b0 10		bcs $baa7			bcs _char_found
.ba97	c8		iny				iny			; increment toin
.ba98	84 08		sty $08				sty toin+0
.ba9a	d0 ed		bne $ba89			bne _skip_loop
.ba9c	e6 09		inc $09				inc toin+1
.ba9e	e6 17		inc $17				inc tmp2+1
.baa0	d0 e7		bne $ba89			bne _skip_loop
.baa2					_empty_line:
.baa2	ca		dex				dex			; junk address
.baa3	ca		dex				dex
.baa4	4c fa b7	jmp $b7fa			jmp Zero		; length=0
.baa7					_char_found:
.baa7	20 16 b8	jsr $b816			jsr Bl			; push delimiter char
.baaa	4c c3 ba	jmp $bac3			jmp Parse
=49					CL	.var *-XtPtr1
=$baad					en = *	; remember here
>ba7a	31					.byte CL	;wh_CodeLength
.baad					parse_name_check:
.baad	20 7c ba	jsr $ba7c			jsr parse_name		; get character from string
.bab0	b5 24		lda $24,x			lda DStack+0,x		; empty string?
.bab2	f0 01		beq $bab5			beq _empty
.bab4	60		rts				rts
.bab5	a9 f3		lda #$f3	_empty:		lda #$100+err_UndefinedWord	; complain & abort
.bab7	4c 85 b4	jmp $b485			jmp ThrowA
>baba	50 61 72 73 65			L1:	.text "Parse"	;  name of word as a string, ending at wh_NameLastChar
=47679					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>babf	a5					.byte (("Parse"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=71					LinkDisplacement = Nt0-WordListLink
>bac0	10					.byte WordFlags	;wh_Flags
>bac1	03					.byte 3	;wh_CodeLength
>bac2	47					  .byte LinkDisplacement
=$bac3					XtPtr1 ::= *
=47679					WordListLink ::= Nt0 ; remember the nt of this word for later
.bac3	20 e5 b3	jsr $b3e5	Parse:		jsr PopA		; pop c (check for underflow)
.bac6	85 1c		sta $1c		Parse_A:	sta tmp5		; save delimiter
.bac8	ca		dex				dex			; alloc space for addr
.bac9	ca		dex				dex
.baca	ca		dex				dex			; alloc space for length
.bacb	ca		dex				dex
.bacc	18		clc				clc			; addr= cib+toin
.bacd	a5 08		lda $08				lda toin+0
.bacf	65 04		adc $04				adc cib+0
.bad1	95 26		sta $26,x			sta DStack+2,x
.bad3	a5 09		lda $09				lda toin+1
.bad5	65 05		adc $05				adc cib+1
.bad7	95 27		sta $27,x			sta DStack+3,x
.bad9	a4 08		ldy $08				ldy toin+0		; Y= toin & $00ff
.badb	84 14		sty $14				sty tmp1+0
.badd	a5 04		lda $04				lda cib+0		; tmp2= cib + (toin & $ff00)
.badf	85 16		sta $16				sta tmp2+0
.bae1	18		clc				clc
.bae2	a5 09		lda $09				lda toin+1		; tmp1= toin
.bae4	85 15		sta $15				sta tmp1+1
.bae6	65 05		adc $05				adc cib+1
.bae8	85 17		sta $17				sta tmp2+1
.baea	a9 00		lda #$00			lda #0		; Initialize the offset we use to adjust EOL or found delimiter
.baec	85 1d		sta $1d				sta tmp5+1
.baee					_loop:
.baee	c4 06		cpy $06				cpy ciblen+0		; end of string?
.baf0	a5 09		lda $09				lda toin+1
.baf2	e5 07		sbc $07				sbc ciblen+1
.baf4	b0 1d		bcs $bb13			bcs _eol
.baf6	a5 1c		lda $1c				lda tmp5+0		; get delimiter
.baf8	c9 20		cmp #$20			cmp #AscSP		; is it whitespace?
.bafa	d0 08		bne $bb04			bne _not_whitespace
.bafc	b1 16		lda ($16),y			lda (tmp2),y		; get cib[toin]
.bafe	c9 21		cmp #$21			cmp #AscSP+1		; we're looking for all whitespace
.bb00	90 0f		bcc $bb11			bcc _found_delimiter
.bb02	b0 04		bcs $bb08			bcs _not_delimiter
.bb04	d1 16		cmp ($16),y	_not_whitespace: cmp (tmp2),y		; compare delimter to cib[toin]
.bb06	f0 09		beq $bb11			beq _found_delimiter
.bb08					_not_delimiter:
.bb08	c8		iny				iny			; next character
.bb09	d0 e3		bne $baee			bne _loop
.bb0b	e6 09		inc $09				inc toin+1
.bb0d	e6 17		inc $17				inc tmp2+1
.bb0f	d0 dd		bne $baee			bne _loop
.bb11					_found_delimiter:
.bb11	e6 1d		inc $1d				inc tmp5+1
.bb13					_eol:
.bb13	38		sec				sec			; length = toin - tmp1
.bb14	98		tya				tya
.bb15	e5 14		sbc $14				sbc tmp1+0
.bb17	95 24		sta $24,x			sta DStack+0,x
.bb19	a5 09		lda $09				lda toin+1
.bb1b	e5 15		sbc $15				sbc tmp1+1
.bb1d	95 25		sta $25,x			sta DStack+1,x
.bb1f	18		clc				clc			; toin = toin + delimiter_offset
.bb20	98		tya				tya
.bb21	65 1d		adc $1d				adc tmp5+1
.bb23	85 08		sta $08				sta toin+0
.bb25	90 02		bcc $bb29			bcc +
.bb27	e6 09		inc $09				inc toin+1
.bb29					+
=102					CL	.var *-XtPtr1
=$bb29					en = *	; remember here
>bac1	66					.byte CL	;wh_CodeLength
.bb29	60		rts				rts
>bb2a	45 78 65 63 75 74 65 2d		L1:	.text "Execute-Parsing"	;  name of word as a string, ending at wh_NameLastChar
>bb32	50 61 72 73 69 6e 67
=47801					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb39	ef					.byte (("Execute-Parsing"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=122					LinkDisplacement = Nt0-WordListLink
>bb3a	50					.byte WordFlags	;wh_Flags
>bb3b	03					.byte 3	;wh_CodeLength
>bb3c	7a					  .byte LinkDisplacement
=$bb3d					XtPtr1 ::= *
=47801					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb3d					Execute_parsing:
.bb3d	20 42 b4	jsr $b442			jsr underflow_3
.bb40	20 f5 c3	jsr $c3f5			jsr Input_To_R		; save existing input for later
.bb43	20 8c ce	jsr $ce8c			jsr Not_Rot		; -ROT ( xt addr u )
.bb46	20 00 b4	jsr $b400			jsr PopYA		; TOS is new ciblen
.bb49	85 06		sta $06				sta ciblen+0
.bb4b	84 07		sty $07				sty ciblen+1
.bb4d	20 00 b4	jsr $b400			jsr PopYA		; NOS is new cib
.bb50	85 04		sta $04				sta cib+0
.bb52	84 05		sty $05				sty cib+1
.bb54	a9 00		lda #$00			lda #0
.bb56	85 08		sta $08				sta toin+0		; Set >IN to zero
.bb58	85 09		sta $09				sta toin+1
.bb5a	20 2b ce	jsr $ce2b			jsr Execute
.bb5d	20 16 c4	jsr $c416			jsr R_To_Input		; restore
=35					CL	.var *-XtPtr1
=$bb60					en = *	; remember here
>bb3b	23					.byte CL	;wh_CodeLength
.bb60	60		rts				rts
>bb61	53 6f 75 72 63 65		L1:	.text "Source"	;  name of word as a string, ending at wh_NameLastChar
=47847					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb67	a6					.byte (("Source"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=46					LinkDisplacement = Nt0-WordListLink
>bb68	10					.byte WordFlags	;wh_Flags
>bb69	03					.byte 3	;wh_CodeLength
>bb6a	2e					  .byte LinkDisplacement
=$bb6b					XtPtr1 ::= *
=47847					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb6b					Source:
.bb6b	a5 04		lda $04				lda cib+0	; push address
.bb6d	a4 05		ldy $05				ldy cib+1
.bb6f	20 bd b7	jsr $b7bd			jsr PushYA
.bb72	a5 06		lda $06				lda ciblen+0	; push size, return
.bb74	a4 07		ldy $07				ldy ciblen+1
.bb76	4c bd b7	jmp $b7bd			jmp PushYA
=14					CL	.var *-XtPtr1
=$bb79					en = *	; remember here
>bb69	0e					.byte CL	;wh_CodeLength
>bb79	53 6f 75 72 63 65 2d 49		L1:	.text "Source-Id"	;  name of word as a string, ending at wh_NameLastChar
>bb81	64
=47874					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb82	89					.byte (("Source-Id"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>bb83	10					.byte WordFlags	;wh_Flags
>bb84	03					.byte 3	;wh_CodeLength
>bb85	1b					  .byte LinkDisplacement
=$bb86					XtPtr1 ::= *
=47874					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb86	a5 02		lda $02		Source_Id:	lda insrc+0
.bb88	a4 03		ldy $03				ldy insrc+1
.bb8a	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$bb8d					en = *	; remember here
>bb84	07					.byte CL	;wh_CodeLength
>bb8d	45 78 69 74			L1:	.text "Exit"	;  name of word as a string, ending at wh_NameLastChar
=47889					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb91	84					.byte (("Exit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=36					WordFlags ::= AN+CO	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>bb92	24					.byte WordFlags	;wh_Flags
>bb93	03					.byte 3	;wh_CodeLength
>bb94	0f					  .byte LinkDisplacement
=$bb95					XtPtr1 ::= *
=47889					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb95					Exit:
.bb95	60		rts				rts		; keep before WordEnd so it gets inlined
=1					CL	.var *-XtPtr1
=$bb96					en = *	; remember here
>bb93	01					.byte CL	;wh_CodeLength
>bb96	3b				L1:	.text ";"	;  name of word as a string, ending at wh_NameLastChar
=47895					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bb97	61					.byte ((";"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=6					LinkDisplacement = Nt0-WordListLink
>bb98	1c					.byte WordFlags	;wh_Flags
>bb99	03					.byte 3	;wh_CodeLength
>bb9a	06					  .byte LinkDisplacement
=$bb9b					XtPtr1 ::= *
=47895					WordListLink ::= Nt0 ; remember the nt of this word for later
.bb9b					Semicolon:
.bb9b	20 45 b7	jsr $b745			jsr Left_Bracket	; switch to interpret state
.bb9e	24 0c		bit $0c				bit status		; is this a : word or a :NONAME word?
.bba0	70 0c		bvs $bbae			bvs _colonword
.bba2	a9 60		lda #$60			lda #$60		; compile an RTS
.bba4	20 fb cc	jsr $ccfb			jsr C_Comma_A
.bba7	a5 0e		lda $0e				lda WorkWord+0		; push xt, return
.bba9	a4 0f		ldy $0f				ldy WorkWord+1
.bbab	4c bd b7	jmp $b7bd			jmp PushYA
.bbae					_colonword:
.bbae	24 0c		bit $0c				bit status
.bbb0	10 1d		bpl $bbcf			bpl _new_word	; Bit 7 is clear = new word
.bbb2	a5 0e		lda $0e				lda WorkWord+0		; push our nt
.bbb4	a4 0f		ldy $0f				ldy WorkWord+1
.bbb6	20 bd b7	jsr $b7bd			jsr PushYA
.bbb9	20 fa bd	jsr $bdfa			jsr Name_To_String	; get our name string
.bbbc	a9 30		lda #$30			lda #<str_redefined	; string "redefined"
.bbbe	a0 da		ldy #$da			ldy #>str_redefined
.bbc0	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.bbc3	20 ee cd	jsr $cdee			jsr Type		; print the ofWordEnding word.
.bbc6	20 e2 cd	jsr $cde2			jsr Space
.bbc9	a9 7f		lda #$7f			lda #$ff-%10000000
.bbcb	25 0c		and $0c				and status
.bbcd	85 0c		sta $0c				sta status
.bbcf					_new_word:
.bbcf	20 12 c1	jsr $c112			jsr Header_Link		; finish linking into current dictionary
.bbd2	20 da bb	jsr $bbda			jsr adjust_z		; fix word length
.bbd5	a9 60		lda #$60			lda #$60		; compile an RTS
.bbd7	4c fb cc	jmp $ccfb			jmp C_Comma_A
=63					CL	.var *-XtPtr1
=$bbda					en = *	; remember here
>bb99	3f					.byte CL	;wh_CodeLength
.bbda					adjust_z:
.bbda	a0 81		ldy #$81			ldy #wh_Flags		; tmp1= xt
.bbdc	b1 10		lda ($10),y			lda (dp),y
.bbde	29 03		and #$03			and #FP+DB
.bbe0	18		clc				clc
.bbe1	69 84		adc #$84			adc #wh_LinkNt+1
.bbe3	65 10		adc $10				adc dp+0
.bbe5	85 14		sta $14				sta tmp1+0
.bbe7	a9 00		lda #$00			lda #0
.bbe9	65 11		adc $11				adc dp+1
.bbeb	85 15		sta $15				sta tmp1+1
.bbed	38		sec				sec			; length= cp-xt
.bbee	a5 00		lda $00				lda cp+0
.bbf0	e5 14		sbc $14				sbc tmp1+0
.bbf2	a8		tay				tay
.bbf3	a5 01		lda $01				lda cp+1
.bbf5	e5 15		sbc $15				sbc tmp1+1
.bbf7	f0 0c		beq $bc05			beq _short		; length > $ff ?
.bbf9	a0 81		ldy #$81			ldy #Wh_Flags		; make it NN
.bbfb	b1 10		lda ($10),y			lda (dp),y
.bbfd	29 df		and #$df			and #$ff-AN
.bbff	09 10		ora #$10			ora #NN
.bc01	91 10		sta ($10),y			sta (dp),y
.bc03	a0 ff		ldy #$ff			ldy #$ff		; set max length for header
.bc05	98		tya		_short:		tya			; fill in length in header
.bc06	a0 82		ldy #$82			ldy #Wh_CodeLength
.bc08	91 10		sta ($10),y			sta (dp),y
.bc0a	60		rts				rts
>bc0b	3a				L1:	.text ":"	;  name of word as a string, ending at wh_NameLastChar
=48012					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc0c	41					.byte ((":"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=117					LinkDisplacement = Nt0-WordListLink
>bc0d	10					.byte WordFlags	;wh_Flags
>bc0e	03					.byte 3	;wh_CodeLength
>bc0f	75					  .byte LinkDisplacement
=$bc10					XtPtr1 ::= *
=48012					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc10					Colon:
.bc10	20 5a b7	jsr $b75a			jsr Right_Bracket	; switch to compile state
.bc13	a5 0c		lda $0c				lda status
.bc15	09 40		ora #$40			ora #%01000000	; tell ";" and RECURSE this is a normal word
.bc17	09 80		ora #$80			ora #%10000000	; Tell Header_Build not to print warning for duplicate name.
.bc19	85 0c		sta $0c				sta status
.bc1b	4c 1d c1	jmp $c11d			jmp Header_Build	; compile word header (but don't link)
=14					CL	.var *-XtPtr1
=$bc1e					en = *	; remember here
>bc0e	0e					.byte CL	;wh_CodeLength
>bc1e	3a 4e 6f 4e 61 6d 65		L1:	.text ":NoName"	;  name of word as a string, ending at wh_NameLastChar
=48037					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc25	a7					.byte ((":NoName"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>bc26	10					.byte WordFlags	;wh_Flags
>bc27	03					.byte 3	;wh_CodeLength
>bc28	19					  .byte LinkDisplacement
=$bc29					XtPtr1 ::= *
=48037					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc29					Colon_NoName:
.bc29	20 5a b7	jsr $b75a			jsr Right_Bracket	; switch to compile state
.bc2c	a9 bf		lda #$bf			lda #$ff-%01000000	; tell ";" and RECURSE this is
.bc2e	25 0c		and $0c				and status		; a :NONAME word.
.bc30	85 0c		sta $0c				sta status
.bc32	a5 00		lda $00				lda cp+0
.bc34	85 0e		sta $0e				sta WorkWord+0
.bc36	a5 01		lda $01				lda cp+1
.bc38	85 0f		sta $0f				sta WorkWord+1
=17					CL	.var *-XtPtr1
=$bc3a					en = *	; remember here
>bc27	11					.byte CL	;wh_CodeLength
.bc3a	60		rts				rts
>bc3b	27				L1:	.text "'"	;  name of word as a string, ending at wh_NameLastChar
=48060					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc3c	e1					.byte (("'"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>bc3d	10					.byte WordFlags	;wh_Flags
>bc3e	03					.byte 3	;wh_CodeLength
>bc3f	17					  .byte LinkDisplacement
=$bc40					XtPtr1 ::= *
=48060					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc40	20 46 bc	jsr $bc46	Tick:		jsr Tick_Nt
.bc43	4c b1 bd	jmp $bdb1			jmp Name_To_Int	; ( nt -- xt )
=6					CL	.var *-XtPtr1
=$bc46					en = *	; remember here
>bc3e	06					.byte CL	;wh_CodeLength
.bc46	20 ad ba	jsr $baad	Tick_Nt:	jsr parse_name_check	; ( -- addr u )
.bc49	4c 8f bc	jmp $bc8f			jmp find_name_check	; ( addr u -- nt )
>bc4c	5b 27 5d			L1:	.text "[']"	;  name of word as a string, ending at wh_NameLastChar
=48079					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc4f	a3					.byte (("[']"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc50	1c					.byte WordFlags	;wh_Flags
>bc51	03					.byte 3	;wh_CodeLength
>bc52	13					  .byte LinkDisplacement
=$bc53					XtPtr1 ::= *
=48079					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc53	20 40 bc	jsr $bc40	Bracket_Tick:	jsr Tick
.bc56	4c 72 b7	jmp $b772			jmp Literal
=6					CL	.var *-XtPtr1
=$bc59					en = *	; remember here
>bc51	06					.byte CL	;wh_CodeLength
>bc59	46 69 6e 64 2d 4e 61 6d		L1:	.text "Find-Name"	;  name of word as a string, ending at wh_NameLastChar
>bc61	65
=48098					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bc62	a9					.byte (("Find-Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>bc63	10					.byte WordFlags	;wh_Flags
>bc64	03					.byte 3	;wh_CodeLength
>bc65	13					  .byte LinkDisplacement
=$bc66					XtPtr1 ::= *
=48098					WordListLink ::= Nt0 ; remember the nt of this word for later
.bc66					find_name:
.bc66	20 9c bc	jsr $bc9c			jsr swl_prepare 	; setup for search
.bc69	a9 ff		lda #$ff			lda #$ff		; for each wordlist in the wordlist search order.
.bc6b	95 25		sta $25,x			sta DStack+1,x
.bc6d					_wordlist_next:
.bc6d	f6 25		inc $25,x			inc DStack+1,x
.bc6f	b4 25		ldy $25,x			ldy DStack+1,x
.bc71	cc 2a 03	cpy $032a			cpy Num_OrderV		; at end of list?
.bc74	90 06		bcc $bc7c			bcc _nextS
.bc76	d0 14		bne $bc8c			bne _fail
.bc78	a9 03		lda #$03			lda #wid_Root		; also try root wordlist
.bc7a	d0 03		bne $bc7f			bne _nextA
.bc7c	b9 2b 03	lda $032b,y	_nextS:		lda Search_OrderV,y	; A = search_order[Y]  get wordlist ID
.bc7f	20 c9 bc	jsr $bcc9	_nextA:		jsr swl_search_wordlist
.bc82	f0 e9		beq $bc6d			beq _wordlist_next
.bc84	a5 14		lda $14				lda tmp1+0		; NOS= nt
.bc86	95 26		sta $26,x			sta DStack+2,x
.bc88	a5 15		lda $15				lda tmp1+1
.bc8a	95 27		sta $27,x			sta DStack+3,x
.bc8c					_fail:
.bc8c	e8		inx				inx			; Drop work cell
.bc8d	e8		inx				inx
=40					CL	.var *-XtPtr1
=$bc8e					en = *	; remember here
>bc64	28					.byte CL	;wh_CodeLength
.bc8e	60		rts				rts
.bc8f					find_name_check:
.bc8f	20 66 bc	jsr $bc66			jsr find_name
.bc92	b5 25		lda $25,x			lda DStack+1,x		; check that we found a word
.bc94	f0 01		beq $bc97			beq _NotFound
.bc96	60		rts				rts
.bc97	a9 f3		lda #$f3	_NotFound:	lda #$100+err_UndefinedWord	; complain & quit
.bc99	4c 85 b4	jmp $b485			jmp ThrowA
.bc9c					swl_prepare:
.bc9c	20 3d b4	jsr $b43d			jsr underflow_2
.bc9f	38		sec				sec			; A= 0 - name start offset
.bca0	b5 24		lda $24,x			lda DStack+0,x
.bca2	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.bca4	75 26		adc $26,x			adc DStack+2,x		; tmp2= pattern nt
.bca6	85 16		sta $16				sta tmp2+0
.bca8	a9 ff		lda #$ff			lda #$ff
.bcaa	75 27		adc $27,x			adc DStack+3,x
.bcac	85 17		sta $17				sta tmp2+1
.bcae	a9 7f		lda #$7f			lda #wh_NameLastChar	; tmp4+0= starting name char index -1
.bcb0	38		sec				sec
.bcb1	f5 24		sbc $24,x			sbc DStack+0,x
.bcb3	85 1a		sta $1a				sta tmp4+0
.bcb5	a0 7f		ldy #$7f			ldy #wh_NameLastChar	; tmp3+0= wh_HNL (hash & length)
.bcb7	b1 16		lda ($16),y			lda (tmp2),y
.bcb9	0a		asl a				asl a
.bcba	0a		asl a				asl a
.bcbb	0a		asl a				asl a
.bcbc	0a		asl a				asl a
.bcbd	0a		asl a				asl a
.bcbe	15 24		ora $24,x			ora DStack+0,x
.bcc0	85 18		sta $18				sta tmp3+0
.bcc2	a9 00		lda #$00			lda #0			; assuming failure
.bcc4	95 26		sta $26,x			sta DStack+2,x
.bcc6	95 27		sta $27,x			sta DStack+3,x
.bcc8	60		rts				rts
.bcc9					swl_search_wordlist:
.bcc9	86 19		stx $19				stx tmp3+1		; save data stack index
.bccb	0a		asl a				asl			; tmp1 = up->wordlists[A]
.bccc	a8		tay				tay
.bccd	be 12 03	ldx $0312,y			ldx WordlistsV+0,y
.bcd0	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bcd3	d0 15		bne $bcea			bne _word_3		;   not end-of-list?
.bcd5	08		php		_rts:		php
.bcd6	a6 19		ldx $19				ldx tmp3+1		; restore data stack index
.bcd8	28		plp				plp
.bcd9	60		rts				rts			; Z= end_of_list
.bcda					_word_next:
.bcda	a0 81		ldy #$81			ldy #wh_Flags		; what kind of LinkNt?
.bcdc	b1 14		lda ($14),y			lda (tmp1),y
.bcde	a0 83		ldy #$83			ldy #wh_LinkNt
.bce0	29 01		and #$01			and #FP
.bce2	f0 0e		beq $bcf2			beq _LinkShort
.bce4	b1 14		lda ($14),y	_LinkLong:	lda (tmp1),y		; tmp1= tmp1->Wh_LinkNt_word
.bce6	aa		tax				tax
.bce7	c8		iny				iny
.bce8	b1 14		lda ($14),y			lda (tmp1),y
.bcea	85 15		sta $15		_word_3:	sta tmp1+1
.bcec	86 14		stx $14				stx tmp1+0
.bcee	d0 0d		bne $bcfd			bne _Test
.bcf0	f0 e3		beq $bcd5			beq _rts
.bcf2	a5 14		lda $14		_LinkShort:	lda tmp1+0		; tmp1 -= tmp1->wh_LinkNt offset byte
.bcf4	38		sec				sec
.bcf5	f1 14		sbc ($14),y			sbc (tmp1),y
.bcf7	85 14		sta $14				sta tmp1+0
.bcf9	b0 02		bcs $bcfd			bcs +
.bcfb	c6 15		dec $15				dec tmp1+1
.bcfd					+
.bcfd	a0 80		ldy #$80	_Test:		ldy #Wh_HashNameLen	; Are hash & name length the same?
.bcff	b1 14		lda ($14),y			lda (tmp1),y
.bd01	c5 18		cmp $18				cmp tmp3+0
.bd03	d0 d5		bne $bcda			bne _word_next
.bd05	a4 1a		ldy $1a				ldy tmp4+0		; Y= index of 1st char -1
.bd07	c8		iny		_char_next:	iny			; to next char
.bd08	30 cb		bmi $bcd5			bmi _rts		; end of string?
.bd0a	b1 16		lda ($16),y			lda (tmp2),y		; char of pattern name
.bd0c	51 14		eor ($14),y			eor (tmp1),y		; char of this word name
.bd0e	f0 f7		beq $bd07			beq _char_next		;   exact match?
.bd10	c9 20		cmp #$20			cmp #$20		;   only a case mismatch?
.bd12	d0 c6		bne $bcda			bne _word_next
.bd14	b1 16		lda ($16),y			lda (tmp2),y		;   verify it is alpha char
.bd16	29 df		and #$df			and #$df
.bd18	e9 41		sbc #$41			sbc #'A'
.bd1a	c9 1a		cmp #$1a			cmp #'Z'-'A'+1
.bd1c	90 e9		bcc $bd07			bcc _char_next
.bd1e	b0 ba		bcs $bcda			bcs _word_next
>bd20	46 69 6e 64			L1:	.text "Find"	;  name of word as a string, ending at wh_NameLastChar
=48292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd24	84					.byte (("Find"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=194					LinkDisplacement = Nt0-WordListLink
>bd25	10					.byte WordFlags	;wh_Flags
>bd26	03					.byte 3	;wh_CodeLength
>bd27	c2					  .byte LinkDisplacement
=$bd28					XtPtr1 ::= *
=48292					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd28					Find:
.bd28	b5 25		lda $25,x			lda DStack+1,x		; Save caddr in case conversion fails.
.bd2a	48		pha				pha
.bd2b	b5 24		lda $24,x			lda DStack+0,x
.bd2d	48		pha				pha
.bd2e	20 f8 b1	jsr $b1f8			jsr Count		; ( caddr -- addr u )
.bd31	20 66 bc	jsr $bc66			jsr find_name		; ( addr u -- nt | 0 )
.bd34	b5 25		lda $25,x			lda DStack+1,x		; word found?
.bd36	d0 09		bne $bd41			bne _found_word
.bd38	68		pla				pla			; restore caddr
.bd39	95 24		sta $24,x			sta DStack+0,x
.bd3b	68		pla				pla
.bd3c	95 25		sta $25,x			sta DStack+1,x
.bd3e	4c de b7	jmp $b7de			jmp False		; ( addr 0 )
.bd41					_found_word:
.bd41	68		pla				pla			; RDrop saved caddr
.bd42	68		pla				pla
.bd43	20 b1 bd	jsr $bdb1			jsr Name_To_Int		; convert the return values to FIND's format
.bd46	a0 81		ldy #$81			ldy #Wh_Flags		; get flags
.bd48	b1 14		lda ($14),y			lda (tmp1),y
.bd4a	29 08		and #$08			and #IM
.bd4c	d0 03		bne $bd51			bne _immediate
.bd4e	4c cc b7	jmp $b7cc			jmp True		; We're not immediate, return -1
.bd51	4c 03 b8	jmp $b803	_immediate:	jmp One			; We're immediate, return 1
=44					CL	.var *-XtPtr1
=$bd54					en = *	; remember here
>bd26	2c					.byte CL	;wh_CodeLength
>bd54	49 6e 74 3e 4e 61 6d 65		L1:	.text "Int>Name"	;  name of word as a string, ending at wh_NameLastChar
=48348					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bd5c	a8					.byte (("Int>Name"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=56					LinkDisplacement = Nt0-WordListLink
>bd5d	50					.byte WordFlags	;wh_Flags
>bd5e	03					.byte 3	;wh_CodeLength
>bd5f	38					  .byte LinkDisplacement
=$bd60					XtPtr1 ::= *
=48348					WordListLink ::= Nt0 ; remember the nt of this word for later
.bd60					Int_To_Name:
.bd60	20 29 b4	jsr $b429			jsr underflow_1
.bd63	a9 fe		lda #$fe			lda #$100-2		; for each wordlist
.bd65	85 19		sta $19				sta tmp3+1
.bd67					_wordlist_next:
.bd67	a4 19		ldy $19				ldy tmp3+1		; get next wordlist index
.bd69	c8		iny				iny
.bd6a	c8		iny				iny
.bd6b	84 19		sty $19				sty tmp3+1
.bd6d	c0 0c		cpy #$0c			cpy #(Num_OrderV-WordlistsV)/2
.bd6f	b0 2b		bcs $bd9c			bcs _fail
.bd71	b9 12 03	lda $0312,y			lda WordlistsV+0,y
.bd74	85 14		sta $14				sta tmp1+0
.bd76	b9 13 03	lda $0313,y			lda WordlistsV+1,y
.bd79	85 15		sta $15				sta tmp1+1
.bd7b	d0 07		bne $bd84			bne _calc
.bd7d	f0 e8		beq $bd67			beq _wordlist_next
.bd7f	20 9b 82	jsr $829b	_word_next:	jsr LinkNext		; step to next word
.bd82	f0 e3		beq $bd67			beq _wordlist_next
.bd84	20 be bd	jsr $bdbe	_calc:		jsr NameToIntTmp	; tmp2= xt
.bd87	a5 16		lda $16				lda tmp2+0
.bd89	d5 24		cmp $24,x			cmp DStack+0,x		;  match?
.bd8b	d0 f2		bne $bd7f			bne _word_next
.bd8d	a5 17		lda $17				lda tmp2+1
.bd8f	d5 25		cmp $25,x			cmp DStack+1,x
.bd91	d0 ec		bne $bd7f			bne _word_next
.bd93	a5 14		lda $14				lda tmp1+0
.bd95	95 24		sta $24,x			sta DStack+0,x
.bd97	a5 15		lda $15				lda tmp1+1
.bd99	95 25		sta $25,x			sta DStack+1,x
.bd9b	60		rts				rts			; return P.Z=0
.bd9c					_fail:
.bd9c	a9 00		lda #$00			lda #0			; return a zero to indicate that we didn't find it.
.bd9e	95 24		sta $24,x			sta DStack+0,x
.bda0	95 25		sta $25,x			sta DStack+1,x
.bda2	85 15		sta $15				sta tmp1+1
.bda4	60		rts				rts			; return P.Z=1
=69					CL	.var *-XtPtr1
=$bda5					en = *	; remember here
>bd5e	45					.byte CL	;wh_CodeLength
>bda5	4e 61 6d 65 3e 49 6e 74		L1:	.text "Name>Int"	;  name of word as a string, ending at wh_NameLastChar
=48429					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdad	88					.byte (("Name>Int"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=81					LinkDisplacement = Nt0-WordListLink
>bdae	10					.byte WordFlags	;wh_Flags
>bdaf	03					.byte 3	;wh_CodeLength
>bdb0	51					  .byte LinkDisplacement
=$bdb1					XtPtr1 ::= *
=48429					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdb1	20 0b b4	jsr $b40b	Name_To_Int:	jsr PopTmp1
.bdb4	20 be bd	jsr $bdbe			jsr NameToIntTmp
.bdb7	a5 16		lda $16				lda tmp2+0
.bdb9	a4 17		ldy $17				ldy tmp2+1
.bdbb	4c bd b7	jmp $b7bd			jmp PushYA
=13					CL	.var *-XtPtr1
=$bdbe					en = *	; remember here
>bdaf	0d					.byte CL	;wh_CodeLength
.bdbe					NameToIntTmp:
.bdbe	a0 81		ldy #$81			ldy #wh_Flags
.bdc0	b1 14		lda ($14),y			lda (tmp1),y
.bdc2	29 02		and #$02			and #DB			; has XT ptr?
.bdc4	d0 12		bne $bdd8			bne _HasXtPtr
.bdc6	b1 14		lda ($14),y			lda (tmp1),y		; A= header length
.bdc8	29 03		and #$03			and #DB+FP
.bdca	18		clc				clc
.bdcb	69 84		adc #$84			adc #wh_LinkNt+1
.bdcd	65 14		adc $14				adc tmp1+0		; TOS=tmp1+A
.bdcf	85 16		sta $16				sta tmp2+0
.bdd1	a9 00		lda #$00			lda #0
.bdd3	65 15		adc $15				adc tmp1+1
.bdd5	85 17		sta $17				sta tmp2+1
.bdd7	60		rts				rts
.bdd8	b1 14		lda ($14),y	_HasXtPtr:	lda (tmp1),y		; get wh_Flags again
.bdda	a0 84		ldy #$84			ldy #wh_LinkNt+1
.bddc	29 01		and #$01			and #FP			; has long LinkNt ?
.bdde	f0 01		beq $bde1			beq _short
.bde0	c8		iny				iny			;   skip extra byte
.bde1	b1 14		lda ($14),y	_short:		lda (tmp1),y		; tmp2= xt pointer
.bde3	85 16		sta $16				sta tmp2+0
.bde5	c8		iny				iny
.bde6	b1 14		lda ($14),y			lda (tmp1),y
.bde8	85 17		sta $17				sta tmp2+1
.bdea	60		rts				rts
>bdeb	4e 61 6d 65 3e 53 74 72		L1:	.text "Name>String"	;  name of word as a string, ending at wh_NameLastChar
>bdf3	69 6e 67
=48502					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bdf6	eb					.byte (("Name>String"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=73					LinkDisplacement = Nt0-WordListLink
>bdf7	50					.byte WordFlags	;wh_Flags
>bdf8	03					.byte 3	;wh_CodeLength
>bdf9	49					  .byte LinkDisplacement
=$bdfa					XtPtr1 ::= *
=48502					WordListLink ::= Nt0 ; remember the nt of this word for later
.bdfa					Name_To_String:
.bdfa	20 29 b4	jsr $b429			jsr underflow_1
.bdfd	b5 24		lda $24,x			lda DStack+0,x		; tmp1= nt
.bdff	b4 25		ldy $25,x			ldy DStack+1,x
.be01	85 14		sta $14				sta tmp1+0
.be03	84 15		sty $15				sty tmp1+1		; ( nt )
.be05	a0 80		ldy #$80			ldy #Wh_HashNameLen
.be07	b1 14		lda ($14),y			lda (tmp1),y
.be09	29 1f		and #$1f			and #wh_HNL_NameLengthMask
.be0b	48		pha				pha
.be0c	49 ff		eor #$ff			eor #$ff
.be0e	38		sec				sec
.be0f	69 80		adc #$80			adc #Wh_NameLastChar+1	; calc string start offset
.be11	20 20 ca	jsr $ca20			jsr Plus_A		; calc string start addr
.be14	68		pla				pla			; push string length
.be15	4c ec b7	jmp $b7ec			jmp PushZA
=30					CL	.var *-XtPtr1
=$be18					en = *	; remember here
>bdf8	1e					.byte CL	;wh_CodeLength
>be18	3e 42 6f 64 79			L1:	.text ">Body"	;  name of word as a string, ending at wh_NameLastChar
=48541					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be1d	25					.byte ((">Body"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>be1e	50					.byte WordFlags	;wh_Flags
>be1f	03					.byte 3	;wh_CodeLength
>be20	27					  .byte LinkDisplacement
=$be21					XtPtr1 ::= *
=48541					WordListLink ::= Nt0 ; remember the nt of this word for later
.be21					To_Body:
.be21	20 29 b4	jsr $b429			jsr underflow_1
.be24	a9 03		lda #$03			lda #3		; PFA is after the beginning JSR abs
.be26	4c 20 ca	jmp $ca20			jmp Plus_A
=8					CL	.var *-XtPtr1
=$be29					en = *	; remember here
>be1f	08					.byte CL	;wh_CodeLength
>be29	45 72 61 73 65			L1:	.text "Erase"	;  name of word as a string, ending at wh_NameLastChar
=48558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be2e	a5					.byte (("Erase"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>be2f	10					.byte WordFlags	;wh_Flags
>be30	03					.byte 3	;wh_CodeLength
>be31	11					  .byte LinkDisplacement
=$be32					XtPtr1 ::= *
=48558					WordListLink ::= Nt0 ; remember the nt of this word for later
.be32					Erase:
.be32	20 fa b7	jsr $b7fa			jsr Zero
.be35	4c 4f be	jmp $be4f			jmp Fill
=6					CL	.var *-XtPtr1
=$be38					en = *	; remember here
>be30	06					.byte CL	;wh_CodeLength
>be38	42 6c 61 6e 6b			L1:	.text "Blank"	;  name of word as a string, ending at wh_NameLastChar
=48573					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be3d	65					.byte (("Blank"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>be3e	10					.byte WordFlags	;wh_Flags
>be3f	03					.byte 3	;wh_CodeLength
>be40	0f					  .byte LinkDisplacement
=$be41					XtPtr1 ::= *
=48573					WordListLink ::= Nt0 ; remember the nt of this word for later
.be41					Blank:
.be41	20 16 b8	jsr $b816			jsr Bl
.be44	4c 4f be	jmp $be4f			jmp Fill
=6					CL	.var *-XtPtr1
=$be47					en = *	; remember here
>be3f	06					.byte CL	;wh_CodeLength
>be47	46 69 6c 6c			L1:	.text "Fill"	;  name of word as a string, ending at wh_NameLastChar
=48587					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be4b	84					.byte (("Fill"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>be4c	50					.byte WordFlags	;wh_Flags
>be4d	03					.byte 3	;wh_CodeLength
>be4e	0e					  .byte LinkDisplacement
=$be4f					XtPtr1 ::= *
=48587					WordListLink ::= Nt0 ; remember the nt of this word for later
.be4f					Fill:
.be4f	20 42 b4	jsr $b442			jsr underflow_3
.be52	b5 28		lda $28,x			lda DStack+4,x		; tmp1= address
.be54	85 14		sta $14				sta tmp1+0
.be56	b5 29		lda $29,x			lda DStack+5,x
.be58	85 15		sta $15				sta tmp1+1
.be5a	b5 26		lda $26,x			lda DStack+2,x		; tmp2= counter.lo
.be5c	85 16		sta $16				sta tmp2+0
.be5e	f6 27		inc $27,x			inc DStack+3,x		; so decrement & test for 0 works
.be60	b5 24		lda $24,x			lda DStack+0,x		; A= fill byte
.be62	a0 00		ldy #$00			ldy #0
.be64	c4 16		cpy $16		_loop:		cpy tmp2+0		; done?
.be66	f0 09		beq $be71			beq _test2
.be68	91 14		sta ($14),y	_3:		sta (tmp1),y		; store a byte
.be6a	c8		iny				iny			; to next byte
.be6b	d0 f7		bne $be64			bne _loop
.be6d	e6 15		inc $15				inc tmp1+1		; increment addr page
.be6f	d0 f3		bne $be64			bne _loop
.be71	d6 27		dec $27,x	_test2:		dec DStack+3,x		; any more pages?
.be73	d0 f3		bne $be68			bne _3
.be75	4c 97 ad	jmp $ad97			jmp ThreeDrop	; Drop three cells off the Data Stack.
=41					CL	.var *-XtPtr1
=$be78					en = *	; remember here
>be4d	29					.byte CL	;wh_CodeLength
>be78	56 61 72 69 61 62 6c 65		L1:	.text "Variable"	;  name of word as a string, ending at wh_NameLastChar
=48640					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be80	a8					.byte (("Variable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>be81	10					.byte WordFlags	;wh_Flags
>be82	03					.byte 3	;wh_CodeLength
>be83	35					  .byte LinkDisplacement
=$be84					XtPtr1 ::= *
=48640					WordListLink ::= Nt0 ; remember the nt of this word for later
.be84	20 bd c1	jsr $c1bd	Variable:	jsr Create		; compile word header & push PFA
.be87	a9 00		lda #$00			lda #0			; allot & initialize the variable's data
.be89	a8		tay				tay
.be8a	4c 14 cd	jmp $cd14			jmp Comma_YA
=9					CL	.var *-XtPtr1
=$be8d					en = *	; remember here
>be82	09					.byte CL	;wh_CodeLength
>be8d	32 56 61 72 69 61 62 6c		L1:	.text "2Variable"	;  name of word as a string, ending at wh_NameLastChar
>be95	65
=48662					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>be96	a9					.byte (("2Variable"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>be97	10					.byte WordFlags	;wh_Flags
>be98	03					.byte 3	;wh_CodeLength
>be99	16					  .byte LinkDisplacement
=$be9a					XtPtr1 ::= *
=48662					WordListLink ::= Nt0 ; remember the nt of this word for later
.be9a	20 84 be	jsr $be84	Two_variable:	jsr Variable		; compile word header & push PFA & 1st cell of data
.be9d	4c 14 cd	jmp $cd14			jmp Comma_YA		; alloc & init 2nd cell of data
=6					CL	.var *-XtPtr1
=$bea0					en = *	; remember here
>be98	06					.byte CL	;wh_CodeLength
>bea0	43 6f 6e 73 74 61 6e 74		L1:	.text "Constant"	;  name of word as a string, ending at wh_NameLastChar
=48680					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bea8	88					.byte (("Constant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>bea9	50					.byte WordFlags	;wh_Flags
>beaa	03					.byte 3	;wh_CodeLength
>beab	12					  .byte LinkDisplacement
=$beac					XtPtr1 ::= *
=48680					WordListLink ::= Nt0 ; remember the nt of this word for later
.beac					Constant:
.beac	20 29 b4	jsr $b429			jsr underflow_1
.beaf	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.beb2	20 7b b7	jsr $b77b			jsr LitCompile		; compile code to load registers, & pick a subroutine
.beb5	20 54 cd	jsr $cd54			jsr Jmp_Comma_NT_YA	; compile code to JMP to the subroutine
.beb8	4c da bb	jmp $bbda			jmp adjust_z		; fix word length
=15					CL	.var *-XtPtr1
=$bebb					en = *	; remember here
>beaa	0f					.byte CL	;wh_CodeLength
>bebb	32 43 6f 6e 73 74 61 6e		L1:	.text "2Constant"	;  name of word as a string, ending at wh_NameLastChar
>bec3	74
=48708					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bec4	89					.byte (("2Constant"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>bec5	50					.byte WordFlags	;wh_Flags
>bec6	03					.byte 3	;wh_CodeLength
>bec7	1c					  .byte LinkDisplacement
=$bec8					XtPtr1 ::= *
=48708					WordListLink ::= Nt0 ; remember the nt of this word for later
.bec8					Two_constant:
.bec8	20 3d b4	jsr $b43d			jsr underflow_2
.becb	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.bece	20 89 cf	jsr $cf89			jsr Swap
.bed1	20 72 b7	jsr $b772			jsr Literal		; compile push lo cell
.bed4	20 7b b7	jsr $b77b			jsr LitCompile		; compile push hi cell, YA=exit routine
.bed7	20 54 cd	jsr $cd54			jsr Jmp_Comma_NT_YA	; compile JMP from above
.beda	4c da bb	jmp $bbda			jmp adjust_z		; fix word length
=21					CL	.var *-XtPtr1
=$bedd					en = *	; remember here
>bec6	15					.byte CL	;wh_CodeLength
>bedd	56 61 6c 75 65			L1:	.text "Value"	;  name of word as a string, ending at wh_NameLastChar
=48738					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bee2	a5					.byte (("Value"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>bee3	50					.byte WordFlags	;wh_Flags
>bee4	03					.byte 3	;wh_CodeLength
>bee5	1e					  .byte LinkDisplacement
=$bee6					XtPtr1 ::= *
=48738					WordListLink ::= Nt0 ; remember the nt of this word for later
.bee6					Value:
.bee6	20 29 b4	jsr $b429			jsr underflow_1
.bee9	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.beec	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile lda # & ldy #
.beef	a9 bd		lda #$bd			lda #<PushYA		; compile jmp PushYA
.bef1	a0 b7		ldy #$b7			ldy #>PushYA
.bef3	20 4d cd	jsr $cd4d			jsr Jmp_Comma_YA
.bef6	4c da bb	jmp $bbda			jmp adjust_z		; fix word length
=19					CL	.var *-XtPtr1
=$bef9					en = *	; remember here
>bee4	13					.byte CL	;wh_CodeLength
>bef9	32 56 61 6c 75 65		L1:	.text "2Value"	;  name of word as a string, ending at wh_NameLastChar
=48767					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>beff	a6					.byte (("2Value"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>bf00	50					.byte WordFlags	;wh_Flags
>bf01	03					.byte 3	;wh_CodeLength
>bf02	1d					  .byte LinkDisplacement
=$bf03					XtPtr1 ::= *
=48767					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf03					TwoValue:
.bf03	20 3d b4	jsr $b43d			jsr underflow_2
.bf06	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.bf09	a9 16		lda #$16			lda #<TwoValue_Runtime	; compile JSR TValue_Runtime
.bf0b	a0 bf		ldy #$bf			ldy #>TwoValue_Runtime
.bf0d	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.bf10	20 da bb	jsr $bbda			jsr adjust_z		; fix word length
.bf13	4c 21 cd	jmp $cd21			jmp Two_Comma		; compile the value, return
=19					CL	.var *-XtPtr1
=$bf16					en = *	; remember here
>bf01	13					.byte CL	;wh_CodeLength
.bf16					TwoValue_Runtime:
.bf16	68		pla				pla			; pop RTS addr
.bf17	85 14		sta $14				sta tmp1+0
.bf19	68		pla				pla
.bf1a	85 15		sta $15				sta tmp1+1
.bf1c	a0 01		ldy #$01			ldy #1			; start at offset 1 (for RTS addr behavior)
.bf1e	4c c4 c5	jmp $c5c4			jmp Two_Fetch_Tmp1Y	; fetch the data, return
>bf21	54 6f				L1:	.text "To"	;  name of word as a string, ending at wh_NameLastChar
=48803					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bf23	e2					.byte (("To"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= NN+IM	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>bf24	18					.byte WordFlags	;wh_Flags
>bf25	03					.byte 3	;wh_CodeLength
>bf26	24					  .byte LinkDisplacement
=$bf27					XtPtr1 ::= *
=48803					WordListLink ::= Nt0 ; remember the nt of this word for later
.bf27					To:
.bf27	20 40 bc	jsr $bc40			jsr Tick		; We always need the xt of the target word
.bf2a	b5 24		lda $24,x			lda DStack+0,x		; tmp1= xt
.bf2c	b4 25		ldy $25,x			ldy DStack+1,x
.bf2e	85 14		sta $14				sta tmp1+0
.bf30	84 15		sty $15				sty tmp1+1
.bf32	a0 00		ldy #$00			ldy #0			; determine what type xt points at
.bf34	b1 14		lda ($14),y			lda (tmp1),y
.bf36	c9 a0		cmp #$a0			cmp #$a0		;   LDY #
.bf38	d0 38		bne $bf72			bne _Test2
.bf3a	a5 0a		lda $0a				lda state		; check compile state
.bf3c	f0 20		beq $bf5e			beq _Value_interpret
.bf3e	a9 00		lda #$00			lda #<PopYA		; compile jsr PopYA
.bf40	a0 b4		ldy #$b4			ldy #>PopYA
.bf42	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.bf45	a9 8c		lda #$8c			lda #$8C		; compile STY xt+1
.bf47	20 fb cc	jsr $ccfb			jsr C_Comma_A
.bf4a	20 6e ca	jsr $ca6e			jsr One_plus
.bf4d	20 6c cf	jsr $cf6c			jsr Dup
.bf50	20 11 cd	jsr $cd11			jsr Comma
.bf53	a9 8d		lda #$8d			lda #$8D		; compile STA xt+3
.bf55	20 fb cc	jsr $ccfb			jsr C_Comma_A
.bf58	20 1b ca	jsr $ca1b			jsr Cell_Plus
.bf5b	4c 11 cd	jmp $cd11			jmp Comma
.bf5e					_Value_interpret:
.bf5e	20 3d b4	jsr $b43d			jsr underflow_2		; ( n xt )
.bf61	e8		inx				inx			; Drop xt
.bf62	e8		inx				inx
.bf63	b5 24		lda $24,x			lda DStack+0,x		; LSB
.bf65	a0 03		ldy #$03			ldy #3			;   modify LDA # data
.bf67	91 14		sta ($14),y			sta (tmp1),y
.bf69	b5 25		lda $25,x			lda DStack+1,x		; MSB
.bf6b	a0 01		ldy #$01			ldy #1			;   modify LDY # data
.bf6d	91 14		sta ($14),y			sta (tmp1),y
.bf6f	e8		inx				inx			; Drop n
.bf70	e8		inx				inx
.bf71	60		rts				rts
.bf72	c9 20		cmp #$20	_Test2:		cmp #$20		;   JSR abs ?
.bf74	d0 33		bne $bfa9			bne _Err
.bf76	a9 03		lda #$03			lda #3			; advance xt over the JSR abs to the data
.bf78	20 20 ca	jsr $ca20			jsr Plus_A
.bf7b	a0 01		ldy #$01			ldy #1			; get JSR abs addr lo byte
.bf7d	b1 14		lda ($14),y			lda (tmp1),y
.bf7f	c9 16		cmp #$16			cmp #<TwoValue_Runtime
.bf81	d0 11		bne $bf94			bne _Test3
.bf83	a5 0a		lda $0a				lda state		; check compile state
.bf85	f0 0a		beq $bf91			beq _2Value_runtime
.bf87	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf8a	a9 97		lda #$97			lda #<Two_Store_YA
.bf8c	a0 c5		ldy #$c5			ldy #>Two_Store_YA
.bf8e	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA	; compile JSR Two_Store_YA; return
.bf91	4c 91 c5	jmp $c591	_2Value_runtime: jmp Two_Store
.bf94					_Test3:
.bf94	c9 5e		cmp #$5e			cmp #<FValue_runtime
.bf96	d0 11		bne $bfa9			bne _Err
.bf98	a5 0a		lda $0a				lda state		; check compile state
.bf9a	f0 0a		beq $bfa6			beq _FValue_interpret
.bf9c	20 a4 b7	jsr $b7a4			jsr ldya_immed_comma	; compile LDY #; LDA #  of xt+3
.bf9f	a9 7c		lda #$7c			lda #<FStore_YA
.bfa1	a0 86		ldy #$86			ldy #>FStore_YA
.bfa3	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA	; compile JSR FStore_YA; return
.bfa6	4c 79 86	jmp $8679	_FValue_interpret: jmp FStore
.bfa9	a9 e0		lda #$e0	_Err:		lda #$100+err_InvalidName ; unrecognized type.
.bfab	20 85 b4	jsr $b485			jsr ThrowA
=135					CL	.var *-XtPtr1
=$bfae					en = *	; remember here
>bf25	87					.byte CL	;wh_CodeLength
>bfae	44 4d 61 78			L1:	.text "DMax"	;  name of word as a string, ending at wh_NameLastChar
=48946					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfb2	04					.byte (("DMax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=143					LinkDisplacement = Nt0-WordListLink
>bfb3	10					.byte WordFlags	;wh_Flags
>bfb4	03					.byte 3	;wh_CodeLength
>bfb5	8f					  .byte LinkDisplacement
=$bfb6					XtPtr1 ::= *
=48946					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfb6	a9 80		lda #$80	DMax:		lda #$80
.bfb8	d0 0a		bne $bfc4			bne DMin3
=4					CL	.var *-XtPtr1
=$bfba					en = *	; remember here
>bfb4	04					.byte CL	;wh_CodeLength
>bfba	44 4d 69 6e			L1:	.text "DMin"	;  name of word as a string, ending at wh_NameLastChar
=48958					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfbe	c4					.byte (("DMin"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>bfbf	10					.byte WordFlags	;wh_Flags
>bfc0	03					.byte 3	;wh_CodeLength
>bfc1	0c					  .byte LinkDisplacement
=$bfc2					XtPtr1 ::= *
=48958					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfc2	a9 00		lda #$00	DMin:		lda #0
.bfc4	85 16		sta $16		DMin3:		sta tmp2	; save sign correction
.bfc6	20 47 b4	jsr $b447			jsr underflow_4
.bfc9	b5 26		lda $26,x			lda DStack+2,x	; compare
.bfcb	d5 2a		cmp $2a,x			cmp DStack+6,x
.bfcd	b5 27		lda $27,x			lda DStack+3,x
.bfcf	f5 2b		sbc $2b,x			sbc DStack+7,x
.bfd1	b5 24		lda $24,x			lda DStack+0,x
.bfd3	f5 28		sbc $28,x			sbc DStack+4,x
.bfd5	b5 25		lda $25,x			lda DStack+1,x
.bfd7	f5 29		sbc $29,x			sbc DStack+5,x
.bfd9	50 02		bvc $bfdd			bvc +
.bfdb	49 80		eor #$80			eor #$80	; fix sign
.bfdd	45 16		eor $16		+		eor tmp2
.bfdf	30 0e		bmi $bfef			bmi TwoNip_nouf	; if negative, NOS is larger and needs to be kept
.bfe1	4c 4a c5	jmp $c54a			jmp Two_Drop
=34					CL	.var *-XtPtr1
=$bfe4					en = *	; remember here
>bfc0	22					.byte CL	;wh_CodeLength
>bfe4	32 4e 69 70			L1:	.text "2Nip"	;  name of word as a string, ending at wh_NameLastChar
=49000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>bfe8	04					.byte (("2Nip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>bfe9	50					.byte WordFlags	;wh_Flags
>bfea	03					.byte 3	;wh_CodeLength
>bfeb	2a					  .byte LinkDisplacement
=$bfec					XtPtr1 ::= *
=49000					WordListLink ::= Nt0 ; remember the nt of this word for later
.bfec	20 47 b4	jsr $b447	TwoNip:		jsr underflow_4
.bfef	b5 24		lda $24,x	TwoNip_NoUf:	lda DStack+0,x	; copy dTOS to dNOS
.bff1	95 28		sta $28,x			sta DStack+4,x
.bff3	b5 25		lda $25,x			lda DStack+1,x
.bff5	95 29		sta $29,x			sta DStack+5,x
.bff7	b5 26		lda $26,x			lda DStack+2,x
.bff9	95 2a		sta $2a,x			sta DStack+6,x
.bffb	b5 27		lda $27,x			lda DStack+3,x
.bffd	95 2b		sta $2b,x			sta DStack+7,x
.bfff	4c 4a c5	jmp $c54a			jmp Two_Drop
=22					CL	.var *-XtPtr1
=$c002					en = *	; remember here
>bfea	16					.byte CL	;wh_CodeLength
>c002	53 3e 44			L1:	.text "S>D"	;  name of word as a string, ending at wh_NameLastChar
=49029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c005	83					.byte (("S>D"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c006	40					.byte WordFlags	;wh_Flags
>c007	03					.byte 3	;wh_CodeLength
>c008	1d					  .byte LinkDisplacement
=$c009					XtPtr1 ::= *
=49029					WordListLink ::= Nt0 ; remember the nt of this word for later
.c009					S_To_D:
.c009	20 29 b4	jsr $b429			jsr underflow_1
.c00c	a0 00		ldy #$00			ldy #0			; assume positive
.c00e	b5 25		lda $25,x			lda DStack+1,x		; test n
.c010	10 01		bpl $c013			bpl +
.c012	88		dey				dey			; make negative
.c013					+
.c013	ca		dex				dex			; push new hi cell
.c014	ca		dex				dex
.c015	94 24		sty $24,x			sty DStack+0,x
.c017	94 25		sty $25,x			sty DStack+1,x
=16					CL	.var *-XtPtr1
=$c019					en = *	; remember here
>c007	10					.byte CL	;wh_CodeLength
.c019	60		rts				rts
>c01a	44 3e 53			L1:	.text "D>S"	;  name of word as a string, ending at wh_NameLastChar
=49053					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c01d	63					.byte (("D>S"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c01e	40					.byte WordFlags	;wh_Flags
>c01f	03					.byte 3	;wh_CodeLength
>c020	18					  .byte LinkDisplacement
=$c021					XtPtr1 ::= *
=49053					WordListLink ::= Nt0 ; remember the nt of this word for later
.c021					D_To_S:
.c021	20 3d b4	jsr $b43d			jsr underflow_2
.c024	e8		inx				inx		; Drop hi cell
.c025	e8		inx				inx
=5					CL	.var *-XtPtr1
=$c026					en = *	; remember here
>c01f	05					.byte CL	;wh_CodeLength
.c026	60		rts				rts
>c027	44 2d				L1:	.text "D-"	;  name of word as a string, ending at wh_NameLastChar
=49065					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c029	a2					.byte (("D-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c02a	40					.byte WordFlags	;wh_Flags
>c02b	03					.byte 3	;wh_CodeLength
>c02c	0c					  .byte LinkDisplacement
=$c02d					XtPtr1 ::= *
=49065					WordListLink ::= Nt0 ; remember the nt of this word for later
.c02d					D_Minus:
.c02d	20 47 b4	jsr $b447			jsr underflow_4 ; two double numbers
.c030	38		sec				sec
.c031	b5 2a		lda $2a,x			lda DStack+6,x	; LSB of lower word
.c033	f5 26		sbc $26,x			sbc DStack+2,x
.c035	95 2a		sta $2a,x			sta DStack+6,x
.c037	b5 2b		lda $2b,x			lda DStack+7,x	; MSB of lower word
.c039	f5 27		sbc $27,x			sbc DStack+3,x
.c03b	95 2b		sta $2b,x			sta DStack+7,x
.c03d	b5 28		lda $28,x			lda DStack+4,x	; LSB of upper word
.c03f	f5 24		sbc $24,x			sbc DStack+0,x
.c041	95 28		sta $28,x			sta DStack+4,x
.c043	b5 29		lda $29,x			lda DStack+5,x	; MSB of upper word
.c045	f5 25		sbc $25,x			sbc DStack+1,x
.c047	95 29		sta $29,x			sta DStack+5,x
.c049	e8		inx				inx
.c04a	e8		inx				inx
.c04b	e8		inx				inx
.c04c	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c04d					en = *	; remember here
>c02b	20					.byte CL	;wh_CodeLength
.c04d	60		rts				rts
>c04e	44 2b				L1:	.text "D+"	;  name of word as a string, ending at wh_NameLastChar
=49104					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c050	62					.byte (("D+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c051	40					.byte WordFlags	;wh_Flags
>c052	03					.byte 3	;wh_CodeLength
>c053	27					  .byte LinkDisplacement
=$c054					XtPtr1 ::= *
=49104					WordListLink ::= Nt0 ; remember the nt of this word for later
.c054					D_Plus:
.c054	20 47 b4	jsr $b447			jsr underflow_4 ; two double numbers
.c057	18		clc				clc
.c058	b5 26		lda $26,x			lda DStack+2,x	; LSB of lower word
.c05a	75 2a		adc $2a,x			adc DStack+6,x
.c05c	95 2a		sta $2a,x			sta DStack+6,x
.c05e	b5 27		lda $27,x			lda DStack+3,x	; MSB of lower word
.c060	75 2b		adc $2b,x			adc DStack+7,x
.c062	95 2b		sta $2b,x			sta DStack+7,x
.c064	b5 24		lda $24,x			lda DStack+0,x	; LSB of upper word
.c066	75 28		adc $28,x			adc DStack+4,x
.c068	95 28		sta $28,x			sta DStack+4,x
.c06a	b5 25		lda $25,x			lda DStack+1,x	; MSB of upper word
.c06c	75 29		adc $29,x			adc DStack+5,x
.c06e	95 29		sta $29,x			sta DStack+5,x
.c070	e8		inx				inx
.c071	e8		inx				inx
.c072	e8		inx				inx
.c073	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c074					en = *	; remember here
>c052	20					.byte CL	;wh_CodeLength
.c074	60		rts				rts
>c075	44 31 2b			L1:	.text "D1+"	;  name of word as a string, ending at wh_NameLastChar
=49144					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c078	63					.byte (("D1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=40					LinkDisplacement = Nt0-WordListLink
>c079	40					.byte WordFlags	;wh_Flags
>c07a	03					.byte 3	;wh_CodeLength
>c07b	28					  .byte LinkDisplacement
=$c07c					XtPtr1 ::= *
=49144					WordListLink ::= Nt0 ; remember the nt of this word for later
.c07c	20 3d b4	jsr $b43d	D1Plus:		jsr underflow_2
.c07f	f6 26		inc $26,x			inc DStack+2,x
.c081	d0 0a		bne $c08d			bne +
.c083	f6 27		inc $27,x			inc DStack+3,x
.c085	d0 06		bne $c08d			bne +
.c087	f6 24		inc $24,x			inc DStack+0,x
.c089	d0 02		bne $c08d			bne +
.c08b	f6 25		inc $25,x			inc DStack+1,x
.c08d					+
=17					CL	.var *-XtPtr1
=$c08d					en = *	; remember here
>c07a	11					.byte CL	;wh_CodeLength
.c08d	60		rts				rts
>c08e	44 31 2d			L1:	.text "D1-"	;  name of word as a string, ending at wh_NameLastChar
=49169					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c091	a3					.byte (("D1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c092	40					.byte WordFlags	;wh_Flags
>c093	03					.byte 3	;wh_CodeLength
>c094	19					  .byte LinkDisplacement
=$c095					XtPtr1 ::= *
=49169					WordListLink ::= Nt0 ; remember the nt of this word for later
.c095	20 3d b4	jsr $b43d	D1Minus:	jsr underflow_2
.c098	b5 26		lda $26,x			lda DStack+2,x
.c09a	d0 0e		bne $c0aa			bne _1
.c09c	b5 27		lda $27,x			lda DStack+3,x
.c09e	d0 08		bne $c0a8			bne _2
.c0a0	b5 24		lda $24,x			lda DStack+0,x
.c0a2	d0 02		bne $c0a6			bne _3
.c0a4	d6 25		dec $25,x			dec DStack+1,x
.c0a6	d6 24		dec $24,x	_3:		dec DStack+0,x
.c0a8	d6 27		dec $27,x	_2:		dec DStack+3,x
.c0aa	d6 26		dec $26,x	_1:		dec DStack+2,x
=23					CL	.var *-XtPtr1
=$c0ac					en = *	; remember here
>c093	17					.byte CL	;wh_CodeLength
.c0ac	60		rts				rts
>c0ad	41 6c 6c 6f 74			L1:	.text "Allot"	;  name of word as a string, ending at wh_NameLastChar
=49202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c0b2	85					.byte (("Allot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c0b3	50					.byte WordFlags	;wh_Flags
>c0b4	03					.byte 3	;wh_CodeLength
>c0b5	21					  .byte LinkDisplacement
=$c0b6					XtPtr1 ::= *
=49202					WordListLink ::= Nt0 ; remember the nt of this word for later
.c0b6					Allot:
.c0b6	20 29 b4	jsr $b429			jsr underflow_1
.c0b9	18		clc				clc			; adjust cp
.c0ba	b5 24		lda $24,x			lda DStack+0,x
.c0bc	65 00		adc $00				adc cp+0
.c0be	85 00		sta $00				sta cp+0
.c0c0	a8		tay				tay			;   save lo byte
.c0c1	b5 25		lda $25,x			lda DStack+1,x
.c0c3	85 14		sta $14				sta tmp1
.c0c5	65 01		adc $01				adc cp+1
.c0c7	85 01		sta $01				sta cp+1
.c0c9	24 14		bit $14				bit tmp1
.c0cb	30 15		bmi $c0e2			bmi _release
.c0cd	b0 06		bcs $c0d5			bcs _pos_err		; carry from the add is bad
=32600					_last = cp_end-2*PadOffset
.c0cf	c0 58		cpy #$58			cpy #<_last		; cp < cp_end ?
.c0d1	e9 7f		sbc #$7f			sbc #>_last
.c0d3	90 2c		bcc $c101			bcc _done		; we're fine.
.c0d5					_pos_err:
.c0d5	a9 58		lda #$58			lda #<_last
.c0d7	85 00		sta $00				sta cp+0
.c0d9	a9 7f		lda #$7f			lda #>_last
.c0db	85 01		sta $01				sta cp+1
.c0dd	a9 c5		lda #$c5			lda #$100+err_Allocate
.c0df	4c 85 b4	jmp $b485			jmp ThrowA
.c0e2					_release:
.c0e2	90 06		bcc $c0ea			bcc _neg_err		; borrow indicates we've gone below 0
.c0e4	c0 66		cpy #$66			cpy #<cp0
.c0e6	e9 0b		sbc #$0b			sbc #>cp0
.c0e8	b0 17		bcs $c101			bcs _done
.c0ea					_neg_err:
.c0ea	a9 66		lda #$66			lda #<cp0		; Set CP to CP0
.c0ec	85 00		sta $00				sta cp+0
.c0ee	a9 0b		lda #$0b			lda #>cp0
.c0f0	85 01		sta $01				sta cp+1
.c0f2	a9 21		lda #$21			lda #<forth_dictionary_start	; set WordLists[Forth] to the first
.c0f4	8d 12 03	sta $0312			sta WordlistsV+0		; word in ROM
.c0f7	a9 cf		lda #$cf			lda #>forth_dictionary_start
.c0f9	8d 13 03	sta $0313			sta WordlistsV+1
.c0fc	a9 c4		lda #$c4			lda #$100+err_Free		; abort with an error
.c0fe	4c 85 b4	jmp $b485			jmp ThrowA
.c101					_done:
.c101	e8		inx				inx			; Drop n
.c102	e8		inx				inx
=77					CL	.var *-XtPtr1
=$c103					en = *	; remember here
>c0b4	4d					.byte CL	;wh_CodeLength
.c103	60		rts				rts
>c104	48 65 61 64 65 72 2c		L1:	.text "Header,"	;  name of word as a string, ending at wh_NameLastChar
=49291					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c10b	87					.byte (("Header,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=89					LinkDisplacement = Nt0-WordListLink
>c10c	10					.byte WordFlags	;wh_Flags
>c10d	03					.byte 3	;wh_CodeLength
>c10e	59					  .byte LinkDisplacement
=$c10f					XtPtr1 ::= *
=49291					WordListLink ::= Nt0 ; remember the nt of this word for later
.c10f					Header_Comma:
.c10f	20 1d c1	jsr $c11d			jsr Header_Build
.c112					Header_Link:
.c112	a5 0e		lda $0e				lda WorkWord+0		; dp= WorkWord
.c114	85 10		sta $10				sta dp+0
.c116	a5 0f		lda $0f				lda WorkWord+1
.c118	85 11		sta $11				sta dp+1
.c11a	4c 5e ba	jmp $ba5e			jmp dp_to_current	; Update the CURRENT wordlist with the new DP.
.c11d					Header_Build:
.c11d	20 ad ba	jsr $baad			jsr parse_name_check	; get name string, throw error if empty string
.c120	20 b8 cc	jsr $ccb8			jsr Two_dup		; ( addr u addr u )
.c123	20 5c a1	jsr $a15c			jsr Get_Current
.c126	20 c6 a1	jsr $a1c6			jsr Search_WordList	; ( addr u xt f ) or ( addr u 0 )
.c129	e8		inx				inx			; pop flag.
.c12a	e8		inx				inx
.c12b	b5 22		lda $22,x			lda DStack-2,x		; not found?
.c12d	f0 21		beq $c150			beq _new_name		; We haven't seen this one before.
.c12f	e8		inx				inx			; Drop xt
.c130	e8		inx				inx
.c131	24 0c		bit $0c				bit status		; Check bit 7
.c133	10 08		bpl $c13d			bpl _redefined_name	; Bit 7 is zero, so print the message.
.c135	a9 80		lda #$80			lda #$80		; Set bit 7 to indicate dup
.c137	05 0c		ora $0c				ora status
.c139	85 0c		sta $0c				sta status
.c13b	d0 19		bne $c156			bne _process_name
.c13d					_redefined_name:
.c13d	a9 30		lda #$30			lda #<str_redefined
.c13f	a0 da		ldy #$da			ldy #>str_redefined
.c141	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.c144	20 b8 cc	jsr $ccb8			jsr Two_dup		 ; ( addr u addr u )
.c147	20 ee cd	jsr $cdee			jsr Type
.c14a	20 e2 cd	jsr $cde2			jsr Space
.c14d	4c 56 c1	jmp $c156			jmp _process_name
.c150					_new_name:
.c150	a9 7f		lda #$7f			lda #$7F		; Clear bit 0 of status to indicate new word.
.c152	25 0c		and $0c				and status
.c154	85 0c		sta $0c				sta status
.c156					_process_name:
.c156	20 b8 cc	jsr $ccb8			jsr Two_dup		; compile name string ending at wh_NameLastChar
.c159	20 3c ca	jsr $ca3c			jsr Here
.c15c	20 89 cf	jsr $cf89			jsr Swap
.c15f	20 ed ad	jsr $aded			jsr CMove
.c162	20 6c cf	jsr $cf6c			jsr Dup			;   save length
.c165	20 b6 c0	jsr $c0b6			jsr Allot
.c168	38		sec				sec
.c169	a5 00		lda $00				lda cp+0		; WorkWord= nt
.c16b	e9 80		sbc #$80			sbc #wh_NameLastChar+1
.c16d	85 0e		sta $0e				sta WorkWord+0
.c16f	a5 01		lda $01				lda cp+1
.c171	e9 00		sbc #$00			sbc #0
.c173	85 0f		sta $0f				sta WorkWord+1
.c175	a0 7f		ldy #$7f			ldy #wh_NameLastChar
.c177	b1 0e		lda ($0e),y			lda (WorkWord),y
.c179	0a		asl a				asl a
.c17a	0a		asl a				asl a
.c17b	0a		asl a				asl a
.c17c	0a		asl a				asl a
.c17d	0a		asl a				asl a
.c17e	15 24		ora $24,x			ora DStack+0,x
.c180	95 24		sta $24,x			sta DStack+0,x
.c182	20 f8 cc	jsr $ccf8			jsr C_Comma		; compile wh_HashNameLen
.c185	e8		inx				inx			; drop name string addr
.c186	e8		inx				inx
.c187	a9 10		lda #$10			lda #NN			; compile wh_Flags
.c189	20 fb cc	jsr $ccfb			jsr C_Comma_A
.c18c	a9 03		lda #$03			lda #3			; compile wh_CodeLength (temporary value, see adjust_z)
.c18e	20 fb cc	jsr $ccfb			jsr C_Comma_A
.c191	20 4e ba	jsr $ba4e			jsr current_to_dp	; Get the CURRENT dictionary pointer.
.c194	38		sec				sec
.c195	a5 0e		lda $0e				lda WorkWord+0
.c197	e5 10		sbc $10				sbc dp+0
.c199	a8		tay				tay
.c19a	a5 0f		lda $0f				lda WorkWord+1
.c19c	e5 11		sbc $11				sbc dp+1
.c19e	f0 0f		beq $c1af			beq _LinkShort
.c1a0	a0 81		ldy #$81			ldy #wh_Flags		; set FP flag
.c1a2	b1 0e		lda ($0e),y			lda (WorkWord),y
.c1a4	09 01		ora #$01			ora #FP
.c1a6	91 0e		sta ($0e),y			sta (WorkWord),y
.c1a8	a5 10		lda $10				lda dp+0		; compile wh_LinkNt ptr word
.c1aa	a4 11		ldy $11				ldy dp+1
.c1ac	4c 14 cd	jmp $cd14			jmp Comma_YA
.c1af	98		tya		_LinkShort:	tya			; compile wh_LinkNt offset byte
.c1b0	4c fb cc	jmp $ccfb			jmp C_Comma_A
=164					CL	.var *-XtPtr1
=$c1b3					en = *	; remember here
>c10d	a4					.byte CL	;wh_CodeLength
>c1b3	43 72 65 61 74 65		L1:	.text "Create"	;  name of word as a string, ending at wh_NameLastChar
=49465					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1b9	a6					.byte (("Create"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=174					LinkDisplacement = Nt0-WordListLink
>c1ba	10					.byte WordFlags	;wh_Flags
>c1bb	03					.byte 3	;wh_CodeLength
>c1bc	ae					  .byte LinkDisplacement
=$c1bd					XtPtr1 ::= *
=49465					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1bd					Create:
.c1bd	20 0f c1	jsr $c10f			jsr Header_Comma	; compile word header
.c1c0	a9 ca		lda #$ca			lda #<DoVar		; compile JSR DoVar
.c1c2	a0 c1		ldy #$c1			ldy #>DoVar
.c1c4	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.c1c7	4c da bb	jmp $bbda			jmp adjust_z
=13					CL	.var *-XtPtr1
=$c1ca					en = *	; remember here
>c1bb	0d					.byte CL	;wh_CodeLength
.c1ca					DoVar:
.c1ca	68		pla				pla		; Pull the return address off the machine's stack
.c1cb	18		clc				clc		;   +1 because of the way the JSR works
.c1cc	69 01		adc #$01			adc #1
.c1ce	ca		dex				dex		; push on data stack
.c1cf	ca		dex				dex
.c1d0	95 24		sta $24,x			sta DStack+0,x
.c1d2	68		pla				pla
.c1d3	69 00		adc #$00			adc #0
.c1d5	95 25		sta $25,x			sta DStack+1,x
.c1d7	60		rts				rts		; takes us to the original caller of the
>c1d8	44 6f 65 73 3e			L1:	.text "Does>"	;  name of word as a string, ending at wh_NameLastChar
=49501					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c1dd	c5					.byte (("Does>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c1de	1c					.byte WordFlags	;wh_Flags
>c1df	03					.byte 3	;wh_CodeLength
>c1e0	24					  .byte LinkDisplacement
=$c1e1					XtPtr1 ::= *
=49501					WordListLink ::= Nt0 ; remember the nt of this word for later
.c1e1					Does:
.c1e1	a0 c1		ldy #$c1			ldy #>_runtime		; compile JSR _runtime
.c1e3	a9 fb		lda #$fb			lda #<_runtime
.c1e5	20 37 cd	jsr $cd37			jsr Jsr_Comma_YA
.c1e8	a9 68		lda #$68			lda #$68		; compile PLA  to pop RTS addr (PFA-1) to AY
.c1ea	a0 a8		ldy #$a8			ldy #$a8		;    & TAY
.c1ec	20 14 cd	jsr $cd14			jsr Comma_YA
.c1ef	a9 68		lda #$68			lda #$68		; compile PLA
.c1f1	20 fb cc	jsr $ccfb			jsr C_Comma_A
.c1f4	a0 c2		ldy #$c2			ldy #>_DoDoes		; compile JSR _DoDoes
.c1f6	a9 18		lda #$18			lda #<_DoDoes
.c1f8	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=26					CL	.var *-XtPtr1
=$c1fb					en = *	; remember here
>c1df	1a					.byte CL	;wh_CodeLength
.c1fb					_runtime:
.c1fb	20 4e ba	jsr $ba4e			jsr current_to_dp	; Grab the DP from the CURRENT wordlist.
.c1fe	a5 10		lda $10				lda dp+0		; tmp1= dp
.c200	a4 11		ldy $11				ldy dp+1
.c202	85 14		sta $14				sta tmp1+0
.c204	84 15		sty $15				sty tmp1+1
.c206	20 be bd	jsr $bdbe			jsr NameToIntTmp	; tmp2= xt
.c209	18		clc				clc
.c20a	68		pla				pla		; RTS addr LSB
.c20b	69 01		adc #$01			adc #1		;   +1 for JSR bahavior
.c20d	a0 01		ldy #$01			ldy #1
.c20f	91 16		sta ($16),y			sta (tmp2),y
.c211	68		pla				pla		; RTS addr MSB
.c212	69 00		adc #$00			adc #0
.c214	c8		iny				iny
.c215	91 16		sta ($16),y			sta (tmp2),y
.c217	60		rts				rts
.c218					_DoDoes:
.c218	c8		iny				iny		; +1 for JSR behavior
.c219	d0 03		bne $c21e			bne +
.c21b	18		clc				clc
.c21c	69 01		adc #$01			adc #1
.c21e					+
.c21e	4c 7a cf	jmp $cf7a			jmp PushAY
>c221	55 6e 75 73 65 64		L1:	.text "Unused"	;  name of word as a string, ending at wh_NameLastChar
=49575					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c227	86					.byte (("Unused"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=74					LinkDisplacement = Nt0-WordListLink
>c228	00					.byte WordFlags	;wh_Flags
>c229	03					.byte 3	;wh_CodeLength
>c22a	4a					  .byte LinkDisplacement
=$c22b					XtPtr1 ::= *
=49575					WordListLink ::= Nt0 ; remember the nt of this word for later
.c22b					Unused:
=32600					_last = cp_end-2*padoffset
.c22b	ca		dex				dex
.c22c	ca		dex				dex
.c22d	38		sec				sec
.c22e	a9 58		lda #$58			lda #<_last
.c230	e5 00		sbc $00				sbc cp+0
.c232	95 24		sta $24,x			sta DStack+0,x
.c234	a9 7f		lda #$7f			lda #>_last
.c236	e5 01		sbc $01				sbc cp+1
.c238	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$c23a					en = *	; remember here
>c229	0f					.byte CL	;wh_CodeLength
.c23a	60		rts				rts
>c23b	44 65 70 74 68			L1:	.text "Depth"	;  name of word as a string, ending at wh_NameLastChar
=49600					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c240	05					.byte (("Depth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c241	10					.byte WordFlags	;wh_Flags
>c242	03					.byte 3	;wh_CodeLength
>c243	19					  .byte LinkDisplacement
=$c244					XtPtr1 ::= *
=49600					WordListLink ::= Nt0 ; remember the nt of this word for later
.c244					Depth:
.c244	a9 28		lda #$28			lda #DStack0	; A= DStack0 - X
.c246	86 1a		stx $1a				stx tmp4
.c248	38		sec				sec
.c249	e5 1a		sbc $1a				sbc tmp4
.c24b	4a		lsr a				lsr		; divide by two because each cell is two bytes
.c24c	4c ec b7	jmp $b7ec			jmp PushZA
=11					CL	.var *-XtPtr1
=$c24f					en = *	; remember here
>c242	0b					.byte CL	;wh_CodeLength
>c24f	4b 65 79			L1:	.text "Key"	;  name of word as a string, ending at wh_NameLastChar
=49618					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c252	23					.byte (("Key"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c253	10					.byte WordFlags	;wh_Flags
>c254	03					.byte 3	;wh_CodeLength
>c255	12					  .byte LinkDisplacement
=$c256					XtPtr1 ::= *
=49618					WordListLink ::= Nt0 ; remember the nt of this word for later
.c256	20 5c c2	jsr $c25c	Key:		jsr key_a		; returns char in A
.c259	4c ec b7	jmp $b7ec			jmp PushZA
=6					CL	.var *-XtPtr1
=$c25c					en = *	; remember here
>c254	06					.byte CL	;wh_CodeLength
.c25c					Key_A:
.c25c	6c 08 03	jmp ($0308)			jmp (input)		; JSR/RTS
>c25f	4b 65 79 3f			L1:	.text "Key?"	;  name of word as a string, ending at wh_NameLastChar
=49635					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c263	e4					.byte (("Key?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c264	10					.byte WordFlags	;wh_Flags
>c265	03					.byte 3	;wh_CodeLength
>c266	11					  .byte LinkDisplacement
=$c267					XtPtr1 ::= *
=49635					WordListLink ::= Nt0 ; remember the nt of this word for later
.c267	20 6d c2	jsr $c26d	KeyQ:		jsr KeyQ_A
.c26a	4c ec b7	jmp $b7ec			jmp PushZA
.c26d	6c 0a 03	jmp ($030a)	KeyQ_A:		jmp (HaveKey)
>c270	52 65 66 69 6c 6c		L1:	.text "Refill"	;  name of word as a string, ending at wh_NameLastChar
=49654					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c276	86					.byte (("Refill"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c277	10					.byte WordFlags	;wh_Flags
>c278	03					.byte 3	;wh_CodeLength
>c279	13					  .byte LinkDisplacement
=$c27a					XtPtr1 ::= *
=49654					WordListLink ::= Nt0 ; remember the nt of this word for later
.c27a					Refill:
.c27a	a9 00		lda #$00			lda #0			; show empty in case of error
.c27c	85 06		sta $06				sta ciblen+0
.c27e	85 07		sta $07				sta ciblen+1
.c280	a5 02		lda $02				lda insrc		; cheat: We only check LSB
.c282	d0 24		bne $c2a8			bne _src_not_kbd
.c284	a5 04		lda $04				lda cib+0		; address of CIB is NOS
.c286	a4 05		ldy $05				ldy cib+1
.c288	20 bd b7	jsr $b7bd			jsr PushYA
.c28b	a9 ff		lda #$ff			lda #bsize		; max number of chars is TOS
.c28d	20 ec b7	jsr $b7ec			jsr PushZA		;  cheat: We only accept max 255
.c290	20 be c2	jsr $c2be			jsr Accept		; ( addr n1 -- n2)
.c293	b5 24		lda $24,x			lda DStack+0,x
.c295	85 06		sta $06				sta ciblen+0
.c297	b5 25		lda $25,x			lda DStack+1,x
.c299	85 07		sta $07				sta ciblen+1		; though we only accept 255 chars
.c29b	a9 00		lda #$00			lda #0
.c29d	85 08		sta $08				sta toin+0
.c29f	85 09		sta $09				sta toin+1
.c2a1	a9 ff		lda #$ff			lda #$FF		; overwrite with TRUE flag
.c2a3	95 24		sta $24,x			sta DStack+0,x
.c2a5	95 25		sta $25,x			sta DStack+1,x
.c2a7	60		rts				rts
.c2a8					_src_not_kbd:
.c2a8	c9 ff		cmp #$ff			cmp #$ff
.c2aa	d0 03		bne $c2af			bne _src_not_string
.c2ac	4c de b7	jmp $b7de			jmp False
.c2af					_src_not_string:
.c2af	a9 eb		lda #$eb			lda #$100+err_Unsupported
.c2b1	20 85 b4	jsr $b485			jsr ThrowA
=58					CL	.var *-XtPtr1
=$c2b4					en = *	; remember here
>c278	3a					.byte CL	;wh_CodeLength
>c2b4	41 63 63 65 70 74		L1:	.text "Accept"	;  name of word as a string, ending at wh_NameLastChar
=49722					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c2ba	86					.byte (("Accept"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=68					LinkDisplacement = Nt0-WordListLink
>c2bb	50					.byte WordFlags	;wh_Flags
>c2bc	03					.byte 3	;wh_CodeLength
>c2bd	44					  .byte LinkDisplacement
=$c2be					XtPtr1 ::= *
=49722					WordListLink ::= Nt0 ; remember the nt of this word for later
.c2be					Accept:
.c2be	20 3d b4	jsr $b43d			jsr underflow_2
.c2c1	b5 24		lda $24,x			lda DStack+0,x		; Abort if we were asked to receive 0 chars
.c2c3	15 25		ora $25,x			ora DStack+1,x
.c2c5	d0 09		bne $c2d0			bne _not_zero
.c2c7	e8		inx				inx			; drop n
.c2c8	e8		inx				inx
.c2c9	95 24		sta $24,x			sta DStack+0,x		; replace addr with 0
.c2cb	95 25		sta $25,x			sta DStack+1,x
.c2cd	4c a5 c3	jmp $c3a5			jmp accept_done
.c2d0					_not_zero:
.c2d0	b5 24		lda $24,x			lda DStack+0,x	; number of chars to get in tmp2 ...
.c2d2	85 16		sta $16				sta tmp2
.c2d4	a9 00		lda #$00			lda #0
.c2d6	85 17		sta $17				sta tmp2+1	; ... but we only accept max 255 chars
.c2d8	b5 26		lda $26,x			lda DStack+2,x	; address of buffer is NOS, to tmp1
.c2da	85 14		sta $14				sta tmp1
.c2dc	b5 27		lda $27,x			lda DStack+3,x
.c2de	85 15		sta $15				sta tmp1+1
.c2e0	e8		inx				inx
.c2e1	e8		inx				inx
.c2e2	a0 00		ldy #$00			ldy #0
.c2e4	a5 0c		lda $0c				lda status
.c2e6	29 f7		and #$f7			and #$f7
.c2e8	18		clc				clc
.c2e9	69 01		adc #$01			adc #1
.c2eb	09 08		ora #$08			ora #$08
.c2ed	85 0c		sta $0c				sta status
.c2ef					accept_loop:
.c2ef	20 5c c2	jsr $c25c			jsr key_a
.c2f2	c9 0a		cmp #$0a			cmp #AscLF
.c2f4	f0 20		beq $c316			beq _eol
.c2f6	c9 0d		cmp #$0d			cmp #AscCR
.c2f8	f0 1c		beq $c316			beq _eol
.c2fa	c9 08		cmp #$08			cmp #AscBS
.c2fc	f0 24		beq $c322			beq _backspace
.c2fe	c9 7f		cmp #$7f			cmp #AscDEL	; (CTRL-h)
.c300	f0 20		beq $c322			beq _backspace
.c302	c9 10		cmp #$10			cmp #AscCP
.c304	f0 37		beq $c33d			beq _ctrl_p
.c306	c9 0e		cmp #$0e			cmp #AscCN
.c308	f0 46		beq $c350			beq _ctrl_n
.c30a	91 14		sta ($14),y			sta (tmp1),y
.c30c	c8		iny				iny
.c30d	20 d6 cd	jsr $cdd6			jsr Emit_A
.c310	c4 16		cpy $16				cpy tmp2	; reached character limit?
.c312	d0 db		bne $c2ef			bne accept_loop	      ; fall through if buffer limit reached
.c314	f0 03		beq $c319			beq _buffer_full
.c316					_eol:
.c316	20 e2 cd	jsr $cde2			jsr Space	; print final space
.c319					_buffer_full:
.c319	94 24		sty $24,x			sty DStack+0,x	; Y contains number of chars accepted already
.c31b	a9 00		lda #$00			lda #0
.c31d	95 25		sta $25,x			sta DStack+1,x		; we only accept 256 chars
.c31f	4c a5 c3	jmp $c3a5			jmp accept_done
.c322					_backspace:
.c322	c0 00		cpy #$00			cpy #0		; buffer empty?
.c324	d0 06		bne $c32c			bne +
.c326	a9 07		lda #$07			lda #AscBELL	; complain and don't delete beyond the start of line
.c328	20 d6 cd	jsr $cdd6			jsr Emit_A
.c32b	c8		iny				iny
.c32c					+
.c32c	88		dey				dey
.c32d	a9 08		lda #$08			lda #AscBS	; move back one
.c32f	20 d6 cd	jsr $cdd6			jsr Emit_A
.c332	20 e2 cd	jsr $cde2			jsr Space	; print a space (rubout)
.c335	a9 08		lda #$08			lda #AscBS	; move back over space
.c337	20 d6 cd	jsr $cdd6			jsr Emit_A
.c33a	4c ef c2	jmp $c2ef			jmp accept_loop
.c33d					_ctrl_p:
.c33d	a5 0c		lda $0c				lda status
.c33f	29 07		and #$07			and #7
.c341	d0 08		bne $c34b			bne _ctrl_p_dec
.c343	a5 0c		lda $0c				lda status
.c345	09 07		ora #$07			ora #7
.c347	85 0c		sta $0c				sta status
.c349	d0 14		bne $c35f			bne _recall_history
.c34b					_ctrl_p_dec:
.c34b	c6 0c		dec $0c				dec status
.c34d	4c 5f c3	jmp $c35f			jmp _recall_history
.c350					_ctrl_n:
.c350	a9 08		lda #$08			lda #$8
.c352	24 0c		bit $0c				bit status
.c354	d0 09		bne $c35f			bne _recall_history
.c356	a5 0c		lda $0c				lda status
.c358	29 f7		and #$f7			and #$f7
.c35a	18		clc				clc
.c35b	69 01		adc #$01			adc #1
.c35d	85 0c		sta $0c				sta status
.c35f					_recall_history:
.c35f	a9 f7		lda #$f7			lda #$ff-%00001000
.c361	25 0c		and $0c				and status
.c363	85 0c		sta $0c				sta status
.c365	20 c0 c3	jsr $c3c0			jsr accept_total_recall
.c368	a9 0d		lda #$0d			lda #AscCR
.c36a	20 d6 cd	jsr $cdd6			jsr Emit_A
.c36d					input_clear:
.c36d	c0 00		cpy #$00			cpy #0
.c36f	f0 07		beq $c378			beq input_cleared
.c371	20 e2 cd	jsr $cde2			jsr Space
.c374	88		dey				dey
.c375	4c 6d c3	jmp $c36d			jmp input_clear
.c378					input_cleared:
.c378	a9 0d		lda #$0d			lda #AscCR
.c37a	20 d6 cd	jsr $cdd6			jsr Emit_A
.c37d	b1 18		lda ($18),y			lda (tmp3),y
.c37f	85 0d		sta $0d				sta status+1
.c381	e6 18		inc $18				inc tmp3
.c383	d0 02		bne $c387			bne +		; Increment the upper byte on carry.
.c385	e6 19		inc $19				inc tmp3+1
.c387					+
.c387	a9 0d		lda #$0d			lda #AscCR
.c389	20 d6 cd	jsr $cdd6			jsr Emit_A
.c38c					_history_loop:
.c38c	c4 0d		cpy $0d				cpy status+1
.c38e	d0 03		bne $c393			bne +
.c390	4c ef c2	jmp $c2ef			jmp accept_loop	      ; Needs a long jump
.c393					+
.c393	c4 16		cpy $16				cpy tmp2
.c395	f0 0a		beq $c3a1			beq _hist_filled_buffer
.c397	b1 18		lda ($18),y			lda (tmp3),y
.c399	91 14		sta ($14),y			sta (tmp1),y
.c39b	20 d6 cd	jsr $cdd6			jsr Emit_A
.c39e	c8		iny				iny
.c39f	d0 eb		bne $c38c			bne _history_loop
.c3a1					_hist_filled_buffer:
.c3a1	88		dey				dey
.c3a2	4c ef c2	jmp $c2ef			jmp accept_loop
.c3a5					accept_done:
.c3a5	20 c0 c3	jsr $c3c0			jsr accept_total_recall
.c3a8	85 0d		sta $0d				sta status+1
.c3aa	a0 00		ldy #$00			ldy #0
.c3ac	91 18		sta ($18),y			sta (tmp3),y
.c3ae	e6 18		inc $18				inc tmp3
.c3b0	d0 02		bne $c3b4			bne +		; Increment the upper byte on carry.
.c3b2	e6 19		inc $19				inc tmp3+1
.c3b4					+
.c3b4					_save_history_loop:
.c3b4	c4 0d		cpy $0d				cpy status+1
.c3b6	f0 07		beq $c3bf			beq _save_history_done
.c3b8	b1 14		lda ($14),y			lda (tmp1),y
.c3ba	91 18		sta ($18),y			sta (tmp3),y
.c3bc	c8		iny				iny
.c3bd	d0 f5		bne $c3b4			bne _save_history_loop
.c3bf					_save_history_done:
=257					CL	.var *-XtPtr1
=$ff					CL	 .var $ff
=$c3bf					en = *	; remember here
>c2bc	ff					.byte CL	;wh_CodeLength
.c3bf	60		rts				rts
.c3c0					accept_total_recall:
.c3c0	a9 66		lda #$66			lda #<hist_buff
.c3c2	85 18		sta $18				sta tmp3
.c3c4	a9 07		lda #$07			lda #>hist_buff
.c3c6	85 19		sta $19				sta tmp3+1
.c3c8	a5 0c		lda $0c				lda status
.c3ca	6a		ror a				ror
.c3cb	29 03		and #$03			and #3
.c3cd	18		clc				clc
.c3ce	65 19		adc $19				adc tmp3+1
.c3d0	85 19		sta $19				sta tmp3+1
.c3d2	a5 0c		lda $0c				lda status
.c3d4	6a		ror a				ror		; Rotate through carry into msb.
.c3d5	6a		ror a				ror
.c3d6	29 80		and #$80			and #$80
.c3d8	18		clc				clc
.c3d9	65 18		adc $18				adc tmp3
.c3db	85 18		sta $18				sta tmp3
.c3dd	90 02		bcc $c3e1			bcc +		; Increment the upper byte on carry.
.c3df	e6 19		inc $19				inc tmp3+1
.c3e1					+
.c3e1	98		tya				tya
.c3e2	c9 80		cmp #$80			cmp #$80
.c3e4	90 02		bcc $c3e8			bcc +
.c3e6	a9 7f		lda #$7f			lda #$7F
.c3e8					+
.c3e8	60		rts				rts
>c3e9	49 6e 70 75 74 3e 52		L1:	.text "Input>R"	;  name of word as a string, ending at wh_NameLastChar
=50032					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c3f0	47					.byte (("Input>R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$30					WordFlags ::= NN|ST	; modifyable copy, remember for later
=310					LinkDisplacement = Nt0-WordListLink
=$31						  WordFlags ::= WordFlags | FP
>c3f1	31					.byte WordFlags	;wh_Flags
>c3f2	03					.byte 3	;wh_CodeLength
>c3f3	3a c2					  .word WordListLink
=$c3f5					XtPtr1 ::= *
=50032					WordListLink ::= Nt0 ; remember the nt of this word for later
.c3f5					Input_To_R:
.c3f5	68		pla				pla			; move it out of the way
.c3f6	85 14		sta $14				sta tmp1+0
.c3f8	68		pla				pla
.c3f9	85 15		sta $15				sta tmp1+1
.c3fb	a0 07		ldy #$07			ldy #7
.c3fd	b9 02 00	lda $0002,y	_loop:		lda InSrc,y	; insrc+7 is toin+1
.c400	48		pha				pha
.c401	88		dey				dey
.c402	10 f9		bpl $c3fd			bpl _loop
.c404	a5 15		lda $15				lda tmp1+1		; Restore address for return jump
.c406	48		pha				pha
.c407	a5 14		lda $14				lda tmp1+0
.c409	48		pha				pha
=21					CL	.var *-XtPtr1
=$c40a					en = *	; remember here
>c3f2	15					.byte CL	;wh_CodeLength
.c40a	60		rts				rts
>c40b	52 3e 49 6e 70 75 74		L1:	.text "R>Input"	;  name of word as a string, ending at wh_NameLastChar
=50066					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c412	87					.byte (("R>Input"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$30					WordFlags ::= ST	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c413	30					.byte WordFlags	;wh_Flags
>c414	03					.byte 3	;wh_CodeLength
>c415	22					  .byte LinkDisplacement
=$c416					XtPtr1 ::= *
=50066					WordListLink ::= Nt0 ; remember the nt of this word for later
.c416					R_To_Input:
.c416	68		pla				pla		 ; move RTS addr out of the way
.c417	85 14		sta $14				sta tmp1+0
.c419	68		pla				pla
.c41a	85 15		sta $15				sta tmp1+1
.c41c	a0 00		ldy #$00			ldy #0
.c41e	68		pla		_loop:		pla
.c41f	99 02 00	sta $0002,y			sta InSrc,y ; also cib ciblen toin
.c422	c8		iny				iny
.c423	c0 08		cpy #$08			cpy #8
.c425	d0 f7		bne $c41e			bne _loop
.c427	a5 15		lda $15				lda tmp1+1	; Restore RTS address
.c429	48		pha				pha
.c42a	a5 14		lda $14				lda tmp1+0
.c42c	48		pha				pha
=23					CL	.var *-XtPtr1
=$c42d					en = *	; remember here
>c414	17					.byte CL	;wh_CodeLength
.c42d	60		rts				rts
>c42e	49 4b 65 79			L1:	.text "IKey"	;  name of word as a string, ending at wh_NameLastChar
=50098					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c432	24					.byte (("IKey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>c433	10					.byte WordFlags	;wh_Flags
>c434	03					.byte 3	;wh_CodeLength
>c435	20					  .byte LinkDisplacement
=$c436					XtPtr1 ::= *
=50098					WordListLink ::= Nt0 ; remember the nt of this word for later
.c436					IKey:
.c436	20 fa b7	jsr $b7fa	_again:		jsr Zero
.c439	20 fa b7	jsr $b7fa			jsr Zero	; ( ud )
.c43c	20 3c ca	jsr $ca3c			jsr Here
.c43f	20 6c cf	jsr $cf6c			jsr Dup		; get text
.c442	a9 10		lda #$10			lda #16
.c444	20 ec b7	jsr $b7ec			jsr PushZA
.c447	20 be c2	jsr $c2be			jsr Accept	; ( ud addr len )
.c44a	a1 26		lda ($26,x)			lda (DStack+2,x) ; negative?
.c44c	c9 2d		cmp #$2d			cmp #'-'
.c44e	08		php				php		;  save sign
.c44f	d0 06		bne $c457			bne +
.c451	20 78 ca	jsr $ca78			jsr NOS_One_Plus ;   eat the '-'
.c454	20 49 ca	jsr $ca49			jsr One_Minus
.c457					+
.c457	20 59 b0	jsr $b059			jsr To_Number ; ( ud addr u -- ud addr u )  Continue convert a string to an integer
.c45a	e8		inx				inx		; Drop len
.c45b	e8		inx				inx
.c45c	e8		inx				inx		; Drop addr
.c45d	e8		inx				inx
.c45e	e8		inx				inx		; UD>S
.c45f	e8		inx				inx
.c460	b5 1e		lda $1e,x			lda DStack-6,x	; string all consumed?
.c462	f0 11		beq $c475			beq _ok
.c464	e8		inx		_err:		inx		; Drop u
.c465	e8		inx				inx
.c466	28		plp				plp		; RDrop saved sign
.c467	20 e2 cd	jsr $cde2			jsr Space	; prompt again
.c46a	a9 3f		lda #$3f			lda #'?'
.c46c	20 d6 cd	jsr $cdd6			jsr Emit_A
.c46f	20 e2 cd	jsr $cde2			jsr Space
.c472	4c 36 c4	jmp $c436			jmp _again	; try it again
.c475	28		plp		_ok:		plp		; apply sign
.c476	d0 03		bne $c47b			bne +
.c478	20 be c6	jsr $c6be			jsr Negate
.c47b					+
.c47b	60		rts				rts
=70					CL	.var *-XtPtr1
=$c47c					en = *	; remember here
>c434	46					.byte CL	;wh_CodeLength
>c47c	42 6f 75 6e 64 73		L1:	.text "Bounds"	;  name of word as a string, ending at wh_NameLastChar
=50178					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c482	66					.byte (("Bounds"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=80					LinkDisplacement = Nt0-WordListLink
>c483	40					.byte WordFlags	;wh_Flags
>c484	03					.byte 3	;wh_CodeLength
>c485	50					  .byte LinkDisplacement
=$c486					XtPtr1 ::= *
=50178					WordListLink ::= Nt0 ; remember the nt of this word for later
.c486					Bounds:
.c486	20 3d b4	jsr $b43d			jsr underflow_2
.c489	18		clc				clc
.c48a	b5 26		lda $26,x			lda DStack+2,x		; LSB addr
.c48c	a8		tay				tay
.c48d	75 24		adc $24,x			adc DStack+0,x		; LSB u
.c48f	95 26		sta $26,x			sta DStack+2,x		; LSB addr+u
.c491	94 24		sty $24,x			sty DStack+0,x
.c493	b5 27		lda $27,x			lda DStack+3,x		; MSB addr
.c495	a8		tay				tay
.c496	75 25		adc $25,x			adc DStack+1,x		; MSB u
.c498	95 27		sta $27,x			sta DStack+3,x		; MSB addr+u
.c49a	94 25		sty $25,x			sty DStack+1,x
=22					CL	.var *-XtPtr1
=$c49c					en = *	; remember here
>c484	16					.byte CL	;wh_CodeLength
.c49c	60		rts				rts
>c49d	53 70 61 63 65 73		L1:	.text "Spaces"	;  name of word as a string, ending at wh_NameLastChar
=50211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4a3	66					.byte (("Spaces"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c4a4	50					.byte WordFlags	;wh_Flags
>c4a5	03					.byte 3	;wh_CodeLength
>c4a6	21					  .byte LinkDisplacement
=$c4a7					XtPtr1 ::= *
=50211					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4a7					 Spaces:
.c4a7	20 29 b4	jsr $b429			jsr underflow_1
.c4aa	4c b0 c4	jmp $c4b0			jmp _test
.c4ad					_loop:
.c4ad	20 e2 cd	jsr $cde2			jsr Space		; print a space
.c4b0	d6 24		dec $24,x	_test:		dec DStack+0,x		; decrement & test
.c4b2	10 f9		bpl $c4ad			bpl _loop
.c4b4	e8		inx				inx			; Drop
.c4b5	e8		inx				inx
=15					CL	.var *-XtPtr1
=$c4b6					en = *	; remember here
>c4a5	0f					.byte CL	;wh_CodeLength
.c4b6	60		rts				rts
>c4b7	2d 54 72 61 69 6c 69 6e		L1:	.text "-Trailing"	;  name of word as a string, ending at wh_NameLastChar
>c4bf	67
=50240					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4c0	e9					.byte (("-Trailing"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>c4c1	50					.byte WordFlags	;wh_Flags
>c4c2	03					.byte 3	;wh_CodeLength
>c4c3	1d					  .byte LinkDisplacement
=$c4c4					XtPtr1 ::= *
=50240					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4c4					Minus_trailing:
.c4c4	20 3d b4	jsr $b43d			jsr underflow_2
.c4c7	b5 26		lda $26,x			lda DStack+2,x		; tmp1= addr + (u1 & $ff00)
.c4c9	85 14		sta $14				sta tmp1+0
.c4cb	b5 27		lda $27,x			lda DStack+3,x
.c4cd	18		clc				clc
.c4ce	75 25		adc $25,x			adc DStack+1,x
.c4d0	85 15		sta $15				sta tmp1+1
.c4d2	b4 24		ldy $24,x			ldy DStack+0,x
.c4d4	88		dey		_loop:		dey			; back 1 char
.c4d5	c0 ff		cpy #$ff			cpy #$ff
.c4d7	d0 06		bne $c4df			bne +
.c4d9	c6 15		dec $15				dec tmp1+1		;   back 1 page
.c4db	d6 25		dec $25,x			dec DStack+1,x
.c4dd	30 06		bmi $c4e5			bmi _done
.c4df					+
.c4df	b1 14		lda ($14),y			lda (tmp1),y		; if blank, keep going
.c4e1	c9 20		cmp #$20			cmp #AscSP
.c4e3	f0 ef		beq $c4d4			beq _loop
.c4e5	c8		iny		_done:		iny			; forward 1 char
.c4e6	d0 02		bne $c4ea			bne +
.c4e8	f6 25		inc $25,x			inc DStack+1,x
.c4ea	94 24		sty $24,x	+		sty DStack+0,x
=40					CL	.var *-XtPtr1
=$c4ec					en = *	; remember here
>c4c2	28					.byte CL	;wh_CodeLength
.c4ec	60		rts				rts
>c4ed	2d 4c 65 61 64 69 6e 67		L1:	.text "-Leading"	;  name of word as a string, ending at wh_NameLastChar
=50293					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c4f5	e8					.byte (("-Leading"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=53					LinkDisplacement = Nt0-WordListLink
>c4f6	50					.byte WordFlags	;wh_Flags
>c4f7	03					.byte 3	;wh_CodeLength
>c4f8	35					  .byte LinkDisplacement
=$c4f9					XtPtr1 ::= *
=50293					WordListLink ::= Nt0 ; remember the nt of this word for later
.c4f9					Minus_leading:
.c4f9	20 3d b4	jsr $b43d			jsr underflow_2
.c4fc					_loop:
.c4fc	b5 24		lda $24,x			lda DStack+0,x		; chars left?
.c4fe	15 25		ora $25,x			ora DStack+1,x
.c500	f0 0f		beq $c511			beq _done
.c502	a1 26		lda ($26,x)			lda (DStack+2,x)	; get first character
.c504	c9 21		cmp #$21			cmp #AscSP+1		;   is_whitespace
.c506	b0 09		bcs $c511			bcs _done
.c508	20 78 ca	jsr $ca78			jsr NOS_One_Plus
.c50b	20 4c ca	jsr $ca4c			jsr One_Minus_NoUF
.c50e	4c fc c4	jmp $c4fc			jmp _loop
.c511					_done:
=24					CL	.var *-XtPtr1
=$c511					en = *	; remember here
>c4f7	18					.byte CL	;wh_CodeLength
.c511	60		rts				rts
>c512	2f 53 74 72 69 6e 67		L1:	.text "/String"	;  name of word as a string, ending at wh_NameLastChar
=50329					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c519	e7					.byte (("/String"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c51a	50					.byte WordFlags	;wh_Flags
>c51b	03					.byte 3	;wh_CodeLength
>c51c	24					  .byte LinkDisplacement
=$c51d					XtPtr1 ::= *
=50329					WordListLink ::= Nt0 ; remember the nt of this word for later
.c51d					Slash_String:
.c51d	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.c51f	b0 1d		bcs $c53e		bcs Throw_Stack_20
.c521	18		clc				clc		; addr += n
.c522	b5 24		lda $24,x			lda DStack+0,x
.c524	75 28		adc $28,x			adc DStack+4,x
.c526	95 28		sta $28,x			sta DStack+4,x
.c528	b5 25		lda $25,x			lda DStack+1,x
.c52a	75 29		adc $29,x			adc DStack+5,x
.c52c	95 29		sta $29,x			sta DStack+5,x
.c52e	38		sec				sec		; u -= n
.c52f	b5 26		lda $26,x			lda DStack+2,x
.c531	f5 24		sbc $24,x			sbc DStack+0,x
.c533	95 26		sta $26,x			sta DStack+2,x
.c535	b5 27		lda $27,x			lda DStack+3,x
.c537	f5 25		sbc $25,x			sbc DStack+1,x
.c539	95 27		sta $27,x			sta DStack+3,x
.c53b	e8		inx				inx		; Drop n
.c53c	e8		inx				inx
=32					CL	.var *-XtPtr1
=$c53d					en = *	; remember here
>c51b	20					.byte CL	;wh_CodeLength
.c53d	60		rts				rts
.c53e	4c 4c b4	jmp $b44c	Throw_Stack_20: jmp Throw_Stack
>c541	32 44 72 6f 70			L1:	.text "2Drop"	;  name of word as a string, ending at wh_NameLastChar
=50374					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c546	05					.byte (("2Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=45					LinkDisplacement = Nt0-WordListLink
>c547	40					.byte WordFlags	;wh_Flags
>c548	03					.byte 3	;wh_CodeLength
>c549	2d					  .byte LinkDisplacement
=$c54a					XtPtr1 ::= *
=50374					WordListLink ::= Nt0 ; remember the nt of this word for later
.c54a					Two_drop:
.c54a	20 3d b4	jsr $b43d			jsr underflow_2
.c54d	e8		inx				inx
.c54e	e8		inx				inx
.c54f	e8		inx				inx
.c550	e8		inx				inx
=7					CL	.var *-XtPtr1
=$c551					en = *	; remember here
>c548	07					.byte CL	;wh_CodeLength
.c551	60		rts				rts
>c552	32 53 77 61 70			L1:	.text "2Swap"	;  name of word as a string, ending at wh_NameLastChar
=50391					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c557	05					.byte (("2Swap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c558	10					.byte WordFlags	;wh_Flags
>c559	03					.byte 3	;wh_CodeLength
>c55a	11					  .byte LinkDisplacement
=$c55b					XtPtr1 ::= *
=50391					WordListLink ::= Nt0 ; remember the nt of this word for later
.c55b					Two_Swap:
.c55b	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c55d	b0 df		bcs $c53e		bcs Throw_Stack_20
.c55f	86 14		stx $14				stx tmp1
.c561	ca		dex				dex
.c562	ca		dex				dex
.c563	ca		dex				dex
.c564	ca		dex				dex
.c565	e8		inx		_loop:		inx
.c566	b5 27		lda $27,x			lda DStack+3,x	; 3 <-> 7
.c568	b4 2b		ldy $2b,x			ldy DStack+7,x
.c56a	95 2b		sta $2b,x			sta DStack+7,x
.c56c	94 27		sty $27,x			sty DStack+3,x
.c56e	e4 14		cpx $14				cpx tmp1
.c570	90 f3		bcc $c565			bcc _loop
=23					CL	.var *-XtPtr1
=$c572					en = *	; remember here
>c559	17					.byte CL	;wh_CodeLength
.c572	60		rts				rts
>c573	32 4f 76 65 72			L1:	.text "2Over"	;  name of word as a string, ending at wh_NameLastChar
=50424					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c578	45					.byte (("2Over"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c579	50					.byte WordFlags	;wh_Flags
>c57a	03					.byte 3	;wh_CodeLength
>c57b	21					  .byte LinkDisplacement
=$c57c					XtPtr1 ::= *
=50424					WordListLink ::= Nt0 ; remember the nt of this word for later
.c57c					Two_over:
.c57c	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c57e	b0 be		bcs $c53e		bcs Throw_Stack_20
.c580	a0 04		ldy #$04			ldy #4
.c582	ca		dex		_loop:		dex
.c583	b5 2c		lda $2c,x			lda DStack+8,x
.c585	95 24		sta $24,x			sta DStack+0,x
.c587	88		dey				dey
.c588	d0 f8		bne $c582			bne _loop
=14					CL	.var *-XtPtr1
=$c58a					en = *	; remember here
>c57a	0e					.byte CL	;wh_CodeLength
.c58a	60		rts				rts
>c58b	32 21				L1:	.text "2!"	;  name of word as a string, ending at wh_NameLastChar
=50445					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c58d	22					.byte (("2!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c58e	40					.byte WordFlags	;wh_Flags
>c58f	03					.byte 3	;wh_CodeLength
>c590	15					  .byte LinkDisplacement
=$c591					XtPtr1 ::= *
=50445					WordListLink ::= Nt0 ; remember the nt of this word for later
.c591					Two_Store:
.c591	20 42 b4	jsr $b442			jsr underflow_3
.c594	20 00 b4	jsr $b400			jsr PopYA
.c597	85 14		sta $14		Two_Store_YA:	sta tmp1+0	; save addr
.c599	84 15		sty $15				sty tmp1+1
.c59b	b5 24		lda $24,x			lda DStack+0,x	; copy MSB
.c59d	a0 00		ldy #$00			ldy #0
.c59f	91 14		sta ($14),y			sta (tmp1),y
.c5a1	b5 25		lda $25,x			lda DStack+1,x	; copy next
.c5a3	c8		iny				iny
.c5a4	91 14		sta ($14),y			sta (tmp1),y
.c5a6	b5 26		lda $26,x			lda DStack+2,x	; copy next
.c5a8	c8		iny				iny
.c5a9	91 14		sta ($14),y			sta (tmp1),y
.c5ab	b5 27		lda $27,x			lda DStack+3,x	; copy MSB
.c5ad	c8		iny				iny
.c5ae	91 14		sta ($14),y			sta (tmp1),y
.c5b0	e8		inx				inx		; 2Drop
.c5b1	e8		inx				inx
.c5b2	e8		inx				inx
.c5b3	e8		inx				inx
=35					CL	.var *-XtPtr1
=$c5b4					en = *	; remember here
>c58f	23					.byte CL	;wh_CodeLength
.c5b4	60		rts				rts
>c5b5	32 40				L1:	.text "2@"	;  name of word as a string, ending at wh_NameLastChar
=50487					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5b7	02					.byte (("2@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c5b8	00					.byte WordFlags	;wh_Flags
>c5b9	03					.byte 3	;wh_CodeLength
>c5ba	2a					  .byte LinkDisplacement
=$c5bb					XtPtr1 ::= *
=50487					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5bb	20 00 b4	jsr $b400	Two_fetch:	jsr PopYA
.c5be	85 14		sta $14		Two_Fetch_YA:	sta tmp1+0	; save addr
.c5c0	84 15		sty $15				sty tmp1+1
.c5c2	a0 00		ldy #$00			ldy #0
.c5c4					Two_Fetch_Tmp1Y:
.c5c4	ca		dex				dex
.c5c5	ca		dex				dex
.c5c6	ca		dex				dex
.c5c7	ca		dex				dex
.c5c8	b1 14		lda ($14),y			lda (tmp1),y	; copy LSB
.c5ca	95 24		sta $24,x			sta DStack+0,x
.c5cc	c8		iny				iny		; copy next
.c5cd	b1 14		lda ($14),y			lda (tmp1),y
.c5cf	95 25		sta $25,x			sta DStack+1,x
.c5d1	c8		iny				iny		; copy next
.c5d2	b1 14		lda ($14),y			lda (tmp1),y
.c5d4	95 26		sta $26,x			sta DStack+2,x
.c5d6	c8		iny				iny		; copy next
.c5d7	b1 14		lda ($14),y			lda (tmp1),y
.c5d9	95 27		sta $27,x			sta DStack+3,x
=32					CL	.var *-XtPtr1
=$c5db					en = *	; remember here
>c5b9	20					.byte CL	;wh_CodeLength
.c5db	60		rts				rts
>c5dc	44 40				L1:	.text "D@"	;  name of word as a string, ending at wh_NameLastChar
=50526					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c5de	02					.byte (("D@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c5df	10					.byte WordFlags	;wh_Flags
>c5e0	03					.byte 3	;wh_CodeLength
>c5e1	27					  .byte LinkDisplacement
=$c5e2					XtPtr1 ::= *
=50526					WordListLink ::= Nt0 ; remember the nt of this word for later
.c5e2	20 00 b4	jsr $b400	DFetch:		jsr PopYA
.c5e5	85 14		sta $14		DFetchYA:	sta tmp1+0	; save addr
.c5e7	84 15		sty $15				sty tmp1+1
.c5e9	ca		dex				dex
.c5ea	ca		dex				dex
.c5eb	ca		dex				dex
.c5ec	ca		dex				dex
.c5ed	a0 00		ldy #$00			ldy #0
.c5ef	b1 14		lda ($14),y			lda (tmp1),y
.c5f1	95 26		sta $26,x			sta DStack+2,x
.c5f3	c8		iny				iny
.c5f4	b1 14		lda ($14),y			lda (tmp1),y
.c5f6	95 27		sta $27,x			sta DStack+3,x
.c5f8	c8		iny				iny
.c5f9	b1 14		lda ($14),y			lda (tmp1),y
.c5fb	95 24		sta $24,x			sta DStack+0,x
.c5fd	c8		iny				iny
.c5fe	b1 14		lda ($14),y			lda (tmp1),y
.c600	95 25		sta $25,x			sta DStack+1,x
=32					CL	.var *-XtPtr1
=$c602					en = *	; remember here
>c5e0	20					.byte CL	;wh_CodeLength
.c602	60		rts				rts
>c603	44 21				L1:	.text "D!"	;  name of word as a string, ending at wh_NameLastChar
=50565					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c605	22					.byte (("D!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c606	10					.byte WordFlags	;wh_Flags
>c607	03					.byte 3	;wh_CodeLength
>c608	27					  .byte LinkDisplacement
=$c609					XtPtr1 ::= *
=50565					WordListLink ::= Nt0 ; remember the nt of this word for later
.c609	20 00 b4	jsr $b400	DStore:		jsr PopYA
.c60c	85 14		sta $14		DStoreYA:	sta tmp1+0	; save addr
.c60e	84 15		sty $15				sty tmp1+1
.c610	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c612	a0 00		ldy #$00			ldy #0
.c614	91 14		sta ($14),y			sta (tmp1),y
.c616	b5 27		lda $27,x			lda DStack+3,x
.c618	c8		iny				iny
.c619	91 14		sta ($14),y			sta (tmp1),y
.c61b	b5 24		lda $24,x			lda DStack+0,x
.c61d	c8		iny				iny
.c61e	91 14		sta ($14),y			sta (tmp1),y
.c620	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c622	c8		iny				iny
.c623	91 14		sta ($14),y			sta (tmp1),y
.c625	4c 4a c5	jmp $c54a			jmp Two_Drop	; also check underflow, return
=31					CL	.var *-XtPtr1
=$c628					en = *	; remember here
>c607	1f					.byte CL	;wh_CodeLength
>c628	32 52 40			L1:	.text "2R@"	;  name of word as a string, ending at wh_NameLastChar
=50603					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c62b	03					.byte (("2R@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=20					WordFlags ::= CO+NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>c62c	14					.byte WordFlags	;wh_Flags
>c62d	03					.byte 3	;wh_CodeLength
>c62e	26					  .byte LinkDisplacement
=$c62f					XtPtr1 ::= *
=50603					WordListLink ::= Nt0 ; remember the nt of this word for later
.c62f					Two_r_fetch:
.c62f	8a		txa				txa		; Y= return stack index
.c630	ba		tsx				tsx
.c631	86 14		stx $14				stx tmp1
.c633	a4 14		ldy $14				ldy tmp1
.c635	aa		tax				tax
.c636	ca		dex				dex		; make room on the Data Stack
.c637	ca		dex				dex
.c638	ca		dex				dex
.c639	ca		dex				dex
.c63a	b9 03 01	lda $0103,y			lda RStack+3,y	; LSB of top entry
.c63d	95 24		sta $24,x			sta DStack+0,x
.c63f	b9 04 01	lda $0104,y			lda RStack+4,y	; MSB of top entry
.c642	95 25		sta $25,x			sta DStack+1,x
.c644	b9 05 01	lda $0105,y			lda RStack+5,y	; LSB of bottom entry
.c647	95 26		sta $26,x			sta DStack+2,x
.c649	b9 06 01	lda $0106,y			lda RStack+6,y	; MSB of bottom entry
.c64c	95 27		sta $27,x			sta DStack+3,x
=31					CL	.var *-XtPtr1
=$c64e					en = *	; remember here
>c62d	1f					.byte CL	;wh_CodeLength
.c64e	60		rts				rts
>c64f	32 52 3e			L1:	.text "2R>"	;  name of word as a string, ending at wh_NameLastChar
=50642					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c652	c3					.byte (("2R>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=39					LinkDisplacement = Nt0-WordListLink
>c653	34					.byte WordFlags	;wh_Flags
>c654	03					.byte 3	;wh_CodeLength
>c655	27					  .byte LinkDisplacement
=$c656					XtPtr1 ::= *
=50642					WordListLink ::= Nt0 ; remember the nt of this word for later
.c656					Two_r_from:
.c656	68		pla				pla			; save the return address
.c657	85 14		sta $14				sta tmp1+0
.c659	68		pla				pla
.c65a	85 15		sta $15				sta tmp1+1
.c65c	ca		dex				dex			; make room on stack
.c65d	ca		dex				dex
.c65e	ca		dex				dex
.c65f	ca		dex				dex
.c660	68		pla				pla			; LSB
.c661	95 24		sta $24,x			sta DStack+0,x
.c663	68		pla				pla			; MSB
.c664	95 25		sta $25,x			sta DStack+1,x
.c666	68		pla				pla			; LSB
.c667	95 26		sta $26,x			sta DStack+2,x
.c669	68		pla				pla			; MSB
.c66a	95 27		sta $27,x			sta DStack+3,x
.c66c	a5 15		lda $15				lda tmp1+1		; restore return address
.c66e	48		pha				pha
.c66f	a5 14		lda $14				lda tmp1+0
.c671	48		pha				pha
=28					CL	.var *-XtPtr1
=$c672					en = *	; remember here
>c654	1c					.byte CL	;wh_CodeLength
.c672	60		rts				rts
>c673	32 3e 52			L1:	.text "2>R"	;  name of word as a string, ending at wh_NameLastChar
=50678					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c676	43					.byte (("2>R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=116					WordFlags ::= CO+UF+ST	; modifyable copy, remember for later
=36					LinkDisplacement = Nt0-WordListLink
>c677	74					.byte WordFlags	;wh_Flags
>c678	03					.byte 3	;wh_CodeLength
>c679	24					  .byte LinkDisplacement
=$c67a					XtPtr1 ::= *
=50678					WordListLink ::= Nt0 ; remember the nt of this word for later
.c67a					Two_to_r:
.c67a	68		pla				pla		; save the return address
.c67b	85 14		sta $14				sta tmp1+0
.c67d	68		pla				pla
.c67e	85 15		sta $15				sta tmp1+1
.c680	20 3d b4	jsr $b43d			jsr underflow_2
.c683	b5 27		lda $27,x			lda DStack+3,x	; MSB
.c685	48		pha				pha
.c686	b5 26		lda $26,x			lda DStack+2,x	; LSB
.c688	48		pha				pha
.c689	b5 25		lda $25,x			lda DStack+1,x	; MSB
.c68b	48		pha				pha
.c68c	b5 24		lda $24,x			lda DStack+0,x	; LSB
.c68e	48		pha				pha
.c68f	e8		inx				inx
.c690	e8		inx				inx
.c691	e8		inx				inx
.c692	e8		inx				inx
.c693	a5 15		lda $15				lda tmp1+1	; restore return address
.c695	48		pha				pha
.c696	a5 14		lda $14				lda tmp1+0
.c698	48		pha				pha
=31					CL	.var *-XtPtr1
=$c699					en = *	; remember here
>c678	1f					.byte CL	;wh_CodeLength
.c699	60		rts				rts
>c69a	49 6e 76 65 72 74		L1:	.text "Invert"	;  name of word as a string, ending at wh_NameLastChar
=50720					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6a0	86					.byte (("Invert"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=42					LinkDisplacement = Nt0-WordListLink
>c6a1	40					.byte WordFlags	;wh_Flags
>c6a2	03					.byte 3	;wh_CodeLength
>c6a3	2a					  .byte LinkDisplacement
=$c6a4					XtPtr1 ::= *
=50720					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6a4					Invert:
.c6a4	20 29 b4	jsr $b429			jsr underflow_1
.c6a7	a9 ff		lda #$ff			lda #$FF
.c6a9	55 24		eor $24,x			eor DStack+0,x	; LSB
.c6ab	95 24		sta $24,x			sta DStack+0,x
.c6ad	a9 ff		lda #$ff			lda #$FF
.c6af	55 25		eor $25,x			eor DStack+1,x	; MSB
.c6b1	95 25		sta $25,x			sta DStack+1,x
=15					CL	.var *-XtPtr1
=$c6b3					en = *	; remember here
>c6a2	0f					.byte CL	;wh_CodeLength
.c6b3	60		rts				rts
>c6b4	4e 65 67 61 74 65		L1:	.text "Negate"	;  name of word as a string, ending at wh_NameLastChar
=50746					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6ba	a6					.byte (("Negate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c6bb	40					.byte WordFlags	;wh_Flags
>c6bc	03					.byte 3	;wh_CodeLength
>c6bd	1a					  .byte LinkDisplacement
=$c6be					XtPtr1 ::= *
=50746					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6be					Negate:
.c6be	20 29 b4	jsr $b429			jsr underflow_1
.c6c1	38		sec		Negate3:	sec
.c6c2	a9 00		lda #$00	Negate4:	lda #0
.c6c4	f5 24		sbc $24,x			sbc DStack+0,x	; LSB
.c6c6	95 24		sta $24,x			sta DStack+0,x
.c6c8	a9 00		lda #$00			lda #0
.c6ca	f5 25		sbc $25,x			sbc DStack+1,x	; MSB
.c6cc	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-XtPtr1
=$c6ce					en = *	; remember here
>c6bc	10					.byte CL	;wh_CodeLength
.c6ce	60		rts				rts
>c6cf	41 62 73			L1:	.text "Abs"	;  name of word as a string, ending at wh_NameLastChar
=50770					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6d2	63					.byte (("Abs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>c6d3	10					.byte WordFlags	;wh_Flags
>c6d4	03					.byte 3	;wh_CodeLength
>c6d5	18					  .byte LinkDisplacement
=$c6d6					XtPtr1 ::= *
=50770					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6d6					Abs:
.c6d6	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c6d8	b0 05		bcs $c6df		bcs Throw_Stack_17
.c6da	b5 25		lda $25,x			lda DStack+1,x	; n negative?
.c6dc	30 e3		bmi $c6c1			bmi Negate3
=8					CL	.var *-XtPtr1
=$c6de					en = *	; remember here
>c6d4	08					.byte CL	;wh_CodeLength
.c6de	60		rts				rts
.c6df	4c 4c b4	jmp $b44c	Throw_Stack_17: jmp Throw_Stack
>c6e2	44 4e 65 67 61 74 65		L1:	.text "DNegate"	;  name of word as a string, ending at wh_NameLastChar
=50793					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c6e9	a7					.byte (("DNegate"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c6ea	10					.byte WordFlags	;wh_Flags
>c6eb	03					.byte 3	;wh_CodeLength
>c6ec	17					  .byte LinkDisplacement
=$c6ed					XtPtr1 ::= *
=50793					WordListLink ::= Nt0 ; remember the nt of this word for later
.c6ed					DNegate:
.c6ed	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c6ef	b0 ee		bcs $c6df		bcs Throw_Stack_17
.c6f1	38		sec		DNegate3:	sec
.c6f2	a9 00		lda #$00			lda #0
.c6f4	f5 26		sbc $26,x			sbc DStack+2,x	; LSB of low cell
.c6f6	95 26		sta $26,x			sta DStack+2,x
.c6f8	a9 00		lda #$00			lda #0
.c6fa	f5 27		sbc $27,x			sbc DStack+3,x	; MSB of low cell
.c6fc	95 27		sta $27,x			sta DStack+3,x
.c6fe	4c c2 c6	jmp $c6c2			jmp Negate4
=20					CL	.var *-XtPtr1
=$c701					en = *	; remember here
>c6eb	14					.byte CL	;wh_CodeLength
>c701	44 41 62 73			L1:	.text "DAbs"	;  name of word as a string, ending at wh_NameLastChar
=50821					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c705	64					.byte (("DAbs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>c706	10					.byte WordFlags	;wh_Flags
>c707	03					.byte 3	;wh_CodeLength
>c708	1c					  .byte LinkDisplacement
=$c709					XtPtr1 ::= *
=50821					WordListLink ::= Nt0 ; remember the nt of this word for later
.c709					DAbs:
.c709	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c70b	b0 d2		bcs $c6df		bcs Throw_Stack_17
.c70d	b5 25		lda $25,x			lda DStack+1,x	; d negative?
.c70f	30 e0		bmi $c6f1			bmi DNegate3
=8					CL	.var *-XtPtr1
=$c711					en = *	; remember here
>c707	08					.byte CL	;wh_CodeLength
.c711	60		rts				rts
>c712	44 3c 3e			L1:	.text "D<>"	;  name of word as a string, ending at wh_NameLastChar
=50837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c715	c3					.byte (("D<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c716	10					.byte WordFlags	;wh_Flags
>c717	03					.byte 3	;wh_CodeLength
>c718	10					  .byte LinkDisplacement
=$c719					XtPtr1 ::= *
=50837					WordListLink ::= Nt0 ; remember the nt of this word for later
.c719	20 25 c7	jsr $c725	DNEq:		jsr DEqual
.c71c	4c 13 c9	jmp $c913			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c71f					en = *	; remember here
>c717	06					.byte CL	;wh_CodeLength
>c71f	44 3d				L1:	.text "D="	;  name of word as a string, ending at wh_NameLastChar
=50849					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c721	a2					.byte (("D="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c722	10					.byte WordFlags	;wh_Flags
>c723	03					.byte 3	;wh_CodeLength
>c724	0c					  .byte LinkDisplacement
=$c725					XtPtr1 ::= *
=50849					WordListLink ::= Nt0 ; remember the nt of this word for later
.c725	b5 2a		lda $2a,x	DEqual:		lda DStack+6,x
.c727	d5 26		cmp $26,x			cmp DStack+2,x
.c729	d0 4c		bne $c777			bne False3
.c72b	b5 2b		lda $2b,x			lda DStack+7,x
.c72d	d5 27		cmp $27,x			cmp DStack+3,x
.c72f	d0 46		bne $c777			bne False3
.c731	b5 24		lda $24,x			lda DStack+0,x
.c733	d5 28		cmp $28,x			cmp DStack+4,x
.c735	d0 40		bne $c777			bne False3
.c737	b5 25		lda $25,x			lda DStack+1,x
.c739	d5 29		cmp $29,x			cmp DStack+5,x
.c73b	d0 3a		bne $c777			bne False3
.c73d	f0 5c		beq $c79b			beq True3
=26					CL	.var *-XtPtr1
=$c73f					en = *	; remember here
>c723	1a					.byte CL	;wh_CodeLength
>c73f	44 55 3e			L1:	.text "DU>"	;  name of word as a string, ending at wh_NameLastChar
=50882					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c742	c3					.byte (("DU>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>c743	10					.byte WordFlags	;wh_Flags
>c744	03					.byte 3	;wh_CodeLength
>c745	21					  .byte LinkDisplacement
=$c746					XtPtr1 ::= *
=50882					WordListLink ::= Nt0 ; remember the nt of this word for later
.c746	20 dc c7	jsr $c7dc	DUGt:		jsr DGtSub
.c749	90 50		bcc $c79b			bcc True3
.c74b	b0 2a		bcs $c777			bcs False3
=7					CL	.var *-XtPtr1
=$c74d					en = *	; remember here
>c744	07					.byte CL	;wh_CodeLength
>c74d	44 55 3c 3d			L1:	.text "DU<="	;  name of word as a string, ending at wh_NameLastChar
=50897					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c751	a4					.byte (("DU<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c752	10					.byte WordFlags	;wh_Flags
>c753	03					.byte 3	;wh_CodeLength
>c754	0f					  .byte LinkDisplacement
=$c755					XtPtr1 ::= *
=50897					WordListLink ::= Nt0 ; remember the nt of this word for later
.c755	20 dc c7	jsr $c7dc	DULe:		jsr DGtSub
.c758	b0 41		bcs $c79b			bcs True3
.c75a	90 1b		bcc $c777			bcc False3
=7					CL	.var *-XtPtr1
=$c75c					en = *	; remember here
>c753	07					.byte CL	;wh_CodeLength
>c75c	44 55 3e 3d			L1:	.text "DU>="	;  name of word as a string, ending at wh_NameLastChar
=50912					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c760	a4					.byte (("DU>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c761	10					.byte WordFlags	;wh_Flags
>c762	03					.byte 3	;wh_CodeLength
>c763	0f					  .byte LinkDisplacement
=$c764					XtPtr1 ::= *
=50912					WordListLink ::= Nt0 ; remember the nt of this word for later
.c764	20 ac c7	jsr $c7ac	DUGe:		jsr DLessSub
.c767	b0 32		bcs $c79b			bcs True3
.c769	90 0c		bcc $c777			bcc False3
=7					CL	.var *-XtPtr1
=$c76b					en = *	; remember here
>c762	07					.byte CL	;wh_CodeLength
>c76b	44 55 3c			L1:	.text "DU<"	;  name of word as a string, ending at wh_NameLastChar
=50926					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c76e	83					.byte (("DU<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c76f	10					.byte WordFlags	;wh_Flags
>c770	03					.byte 3	;wh_CodeLength
>c771	0e					  .byte LinkDisplacement
=$c772					XtPtr1 ::= *
=50926					WordListLink ::= Nt0 ; remember the nt of this word for later
.c772	20 ac c7	jsr $c7ac	DULess:		jsr DLessSub
.c775	90 24		bcc $c79b			bcc True3
.c777	a9 00		lda #$00	False3:		lda #0
.c779	f0 22		beq $c79d			beq DReturn3
=9					CL	.var *-XtPtr1
=$c77b					en = *	; remember here
>c770	09					.byte CL	;wh_CodeLength
.c77b	4c 4c b4	jmp $b44c	Throw_Stack_09: jmp Throw_Stack
>c77e	44 3e 3d			L1:	.text "D>="	;  name of word as a string, ending at wh_NameLastChar
=50945					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c781	a3					.byte (("D>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>c782	10					.byte WordFlags	;wh_Flags
>c783	03					.byte 3	;wh_CodeLength
>c784	13					  .byte LinkDisplacement
=$c785					XtPtr1 ::= *
=50945					WordListLink ::= Nt0 ; remember the nt of this word for later
.c785	20 ac c7	jsr $c7ac	DGEq:		jsr DLessSub
.c788	70 0f		bvs $c799			bvs DLess3
.c78a	10 0f		bpl $c79b	DGEq3:		bpl True3
.c78c	30 e9		bmi $c777			bmi False3
=9					CL	.var *-XtPtr1
=$c78e					en = *	; remember here
>c783	09					.byte CL	;wh_CodeLength
>c78e	44 3c				L1:	.text "D<"	;  name of word as a string, ending at wh_NameLastChar
=50960					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c790	82					.byte (("D<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c791	10					.byte WordFlags	;wh_Flags
>c792	03					.byte 3	;wh_CodeLength
>c793	0f					  .byte LinkDisplacement
=$c794					XtPtr1 ::= *
=50960					WordListLink ::= Nt0 ; remember the nt of this word for later
.c794	20 ac c7	jsr $c7ac	DLess:		jsr DLessSub
.c797	70 f1		bvs $c78a			bvs DGEq3
.c799	10 dc		bpl $c777	DLess3:		bpl False3
.c79b	a9 ff		lda #$ff	True3:		lda #$ff
.c79d					DReturn3:
.c79d	e0 21		cpx #$21		cpx #-2*4+DStack0+1
.c79f	b0 da		bcs $c77b		bcs Throw_Stack_09
.c7a1	95 2a		sta $2a,x			sta DStack+6,x
.c7a3	95 2b		sta $2b,x			sta DStack+7,x
.c7a5	e8		inx				inx			; preserve A, don't use ThreeDrop
.c7a6	e8		inx				inx
.c7a7	e8		inx				inx
.c7a8	e8		inx				inx
.c7a9	e8		inx				inx
.c7aa	e8		inx				inx
.c7ab	60		rts				rts
=24					CL	.var *-XtPtr1
=$c7ac					en = *	; remember here
>c792	18					.byte CL	;wh_CodeLength
.c7ac	b5 2a		lda $2a,x	DLessSub:	lda DStack+6,x
.c7ae	d5 26		cmp $26,x			cmp DStack+2,x
.c7b0	b5 2b		lda $2b,x			lda DStack+7,x
.c7b2	f5 27		sbc $27,x			sbc DStack+3,x
.c7b4	b5 28		lda $28,x			lda DStack+4,x
.c7b6	f5 24		sbc $24,x			sbc DStack+0,x
.c7b8	b5 29		lda $29,x			lda DStack+5,x
.c7ba	f5 25		sbc $25,x			sbc DStack+1,x
.c7bc	60		rts				rts
>c7bd	44 3c 3d			L1:	.text "D<="	;  name of word as a string, ending at wh_NameLastChar
=51008					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7c0	a3					.byte (("D<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=48					LinkDisplacement = Nt0-WordListLink
>c7c1	10					.byte WordFlags	;wh_Flags
>c7c2	03					.byte 3	;wh_CodeLength
>c7c3	30					  .byte LinkDisplacement
=$c7c4					XtPtr1 ::= *
=51008					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7c4	20 dc c7	jsr $c7dc	DLe:		jsr DGtSub
.c7c7	70 0f		bvs $c7d8			bvs DGt3
.c7c9	10 d0		bpl $c79b	DLe3:		bpl True3
.c7cb	30 aa		bmi $c777			bmi False3
=9					CL	.var *-XtPtr1
=$c7cd					en = *	; remember here
>c7c2	09					.byte CL	;wh_CodeLength
>c7cd	44 3e				L1:	.text "D>"	;  name of word as a string, ending at wh_NameLastChar
=51023					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7cf	c2					.byte (("D>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c7d0	10					.byte WordFlags	;wh_Flags
>c7d1	03					.byte 3	;wh_CodeLength
>c7d2	0f					  .byte LinkDisplacement
=$c7d3					XtPtr1 ::= *
=51023					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7d3	20 dc c7	jsr $c7dc	DGt:		jsr DGtSub
.c7d6	70 f1		bvs $c7c9			bvs DLe3
.c7d8	30 c1		bmi $c79b	DGt3:		bmi True3
.c7da	10 9b		bpl $c777			bpl False3
=9					CL	.var *-XtPtr1
=$c7dc					en = *	; remember here
>c7d1	09					.byte CL	;wh_CodeLength
.c7dc	b5 26		lda $26,x	DGtSub:		lda DStack+2,x
.c7de	d5 2a		cmp $2a,x			cmp DStack+6,x
.c7e0	b5 27		lda $27,x			lda DStack+3,x
.c7e2	f5 2b		sbc $2b,x			sbc DStack+7,x
.c7e4	b5 24		lda $24,x			lda DStack+0,x
.c7e6	f5 28		sbc $28,x			sbc DStack+4,x
.c7e8	b5 25		lda $25,x			lda DStack+1,x
.c7ea	f5 29		sbc $29,x			sbc DStack+5,x
.c7ec	60		rts				rts
>c7ed	44 30 3c 3d			L1:	.text "D0<="	;  name of word as a string, ending at wh_NameLastChar
=51057					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7f1	a4					.byte (("D0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>c7f2	10					.byte WordFlags	;wh_Flags
>c7f3	03					.byte 3	;wh_CodeLength
>c7f4	22					  .byte LinkDisplacement
=$c7f5					XtPtr1 ::= *
=51057					WordListLink ::= Nt0 ; remember the nt of this word for later
.c7f5	b5 25		lda $25,x	D0Le:		lda DStack+1,x	; test sign
.c7f7	30 65		bmi $c85e			bmi True1
.c7f9	10 24		bpl $c81f			bpl D0Equal
=6					CL	.var *-XtPtr1
=$c7fb					en = *	; remember here
>c7f3	06					.byte CL	;wh_CodeLength
>c7fb	44 30 3e			L1:	.text "D0>"	;  name of word as a string, ending at wh_NameLastChar
=51070					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c7fe	c3					.byte (("D0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c7ff	10					.byte WordFlags	;wh_Flags
>c800	03					.byte 3	;wh_CodeLength
>c801	0d					  .byte LinkDisplacement
=$c802					XtPtr1 ::= *
=51070					WordListLink ::= Nt0 ; remember the nt of this word for later
.c802	b5 25		lda $25,x	D0Gt:		lda DStack+1,x	; test sign
.c804	10 0b		bpl $c811			bpl D0Ne
.c806	4c 7d c8	jmp $c87d			jmp False1
>c809	44 30 3c 3e			L1:	.text "D0<>"	;  name of word as a string, ending at wh_NameLastChar
=51085					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c80d	c4					.byte (("D0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c80e	10					.byte WordFlags	;wh_Flags
>c80f	03					.byte 3	;wh_CodeLength
>c810	0f					  .byte LinkDisplacement
=$c811					XtPtr1 ::= *
=51085					WordListLink ::= Nt0 ; remember the nt of this word for later
.c811	20 26 c8	jsr $c826	D0Ne:		jsr D0EqSub
.c814	d0 48		bne $c85e			bne True1
.c816	f0 65		beq $c87d			beq False1
=7					CL	.var *-XtPtr1
=$c818					en = *	; remember here
>c80f	07					.byte CL	;wh_CodeLength
>c818	44 30 3d			L1:	.text "D0="	;  name of word as a string, ending at wh_NameLastChar
=51099					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c81b	a3					.byte (("D0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c81c	10					.byte WordFlags	;wh_Flags
>c81d	03					.byte 3	;wh_CodeLength
>c81e	0e					  .byte LinkDisplacement
=$c81f					XtPtr1 ::= *
=51099					WordListLink ::= Nt0 ; remember the nt of this word for later
.c81f	20 26 c8	jsr $c826	D0Equal:	jsr D0EqSub
.c822	d0 59		bne $c87d			bne False1
.c824	f0 38		beq $c85e			beq True1
=7					CL	.var *-XtPtr1
=$c826					en = *	; remember here
>c81d	07					.byte CL	;wh_CodeLength
.c826	b5 26		lda $26,x	D0EqSub:	lda DStack+2,x
.c828	15 27		ora $27,x			ora DStack+3,x
.c82a	15 24		ora $24,x			ora DStack+0,x
.c82c	15 25		ora $25,x			ora DStack+1,x
.c82e	60		rts				rts
>c82f	44 30 3c			L1:	.text "D0<"	;  name of word as a string, ending at wh_NameLastChar
=51122					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c832	83					.byte (("D0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c833	10					.byte WordFlags	;wh_Flags
>c834	03					.byte 3	;wh_CodeLength
>c835	17					  .byte LinkDisplacement
=$c836					XtPtr1 ::= *
=51122					WordListLink ::= Nt0 ; remember the nt of this word for later
.c836	b5 25		lda $25,x	D0Less:		lda DStack+1,x	; test sign
.c838	30 24		bmi $c85e			bmi True1
.c83a	10 41		bpl $c87d			bpl False1
=6					CL	.var *-XtPtr1
=$c83c					en = *	; remember here
>c834	06					.byte CL	;wh_CodeLength
>c83c	44 30 3e 3d			L1:	.text "D0>="	;  name of word as a string, ending at wh_NameLastChar
=51136					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c840	a4					.byte (("D0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c841	10					.byte WordFlags	;wh_Flags
>c842	03					.byte 3	;wh_CodeLength
>c843	0e					  .byte LinkDisplacement
=$c844					XtPtr1 ::= *
=51136					WordListLink ::= Nt0 ; remember the nt of this word for later
.c844	b5 25		lda $25,x	D0Ge:		lda DStack+1,x	; test sign
.c846	10 16		bpl $c85e			bpl True1
.c848	30 33		bmi $c87d			bmi False1
=6					CL	.var *-XtPtr1
=$c84a					en = *	; remember here
>c842	06					.byte CL	;wh_CodeLength
.c84a	4c 4c b4	jmp $b44c	Throw_Stack_08: jmp Throw_Stack
>c84d	3d				L1:	.text "="	;  name of word as a string, ending at wh_NameLastChar
=51150					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c84e	a1					.byte (("="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>c84f	10					.byte WordFlags	;wh_Flags
>c850	03					.byte 3	;wh_CodeLength
>c851	0e					  .byte LinkDisplacement
=$c852					XtPtr1 ::= *
=51150					WordListLink ::= Nt0 ; remember the nt of this word for later
.c852	b5 24		lda $24,x	Equal:		lda DStack+0,x		; LSB
.c854	d5 26		cmp $26,x			cmp DStack+2,x
.c856	d0 25		bne $c87d			bne False1
.c858	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c85a	d5 27		cmp $27,x			cmp DStack+3,x
.c85c	d0 1f		bne $c87d			bne False1
.c85e	a9 ff		lda #$ff	True1:		lda #$ff	; return TRUE
.c860					Return1:
.c860	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c862	b0 e6		bcs $c84a		bcs Throw_Stack_08
.c864	e8		inx				inx		; Drop
.c865	e8		inx				inx
.c866	95 24		sta $24,x			sta DStack+0,x	; store f
.c868	95 25		sta $25,x			sta DStack+1,x
.c86a	60		rts				rts
=25					CL	.var *-XtPtr1
=$c86b					en = *	; remember here
>c850	19					.byte CL	;wh_CodeLength
>c86b	3c 3e				L1:	.text "<>"	;  name of word as a string, ending at wh_NameLastChar
=51181					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c86d	c2					.byte (("<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>c86e	10					.byte WordFlags	;wh_Flags
>c86f	03					.byte 3	;wh_CodeLength
>c870	1f					  .byte LinkDisplacement
=$c871					XtPtr1 ::= *
=51181					WordListLink ::= Nt0 ; remember the nt of this word for later
.c871	b5 24		lda $24,x	Not_Equals:	lda DStack+0,x		; LSB
.c873	d5 26		cmp $26,x			cmp DStack+2,x
.c875	d0 e7		bne $c85e			bne True1
.c877	b5 25		lda $25,x			lda DStack+1,x		; MSB
.c879	d5 27		cmp $27,x			cmp DStack+3,x
.c87b	d0 e1		bne $c85e			bne True1
.c87d	a9 00		lda #$00	False1:		lda #0		; return FALSE
.c87f	f0 df		beq $c860			beq Return1
=16					CL	.var *-XtPtr1
=$c881					en = *	; remember here
>c86f	10					.byte CL	;wh_CodeLength
>c881	3c				L1:	.text "<"	;  name of word as a string, ending at wh_NameLastChar
=51202					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c882	81					.byte (("<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>c883	10					.byte WordFlags	;wh_Flags
>c884	03					.byte 3	;wh_CodeLength
>c885	15					  .byte LinkDisplacement
=$c886					XtPtr1 ::= *
=51202					WordListLink ::= Nt0 ; remember the nt of this word for later
.c886	b5 26		lda $26,x	Less_Than:	lda DStack+2,x	; compare
.c888	d5 24		cmp $24,x			cmp DStack+0,x
.c88a	b5 27		lda $27,x			lda DStack+3,x
.c88c	f5 25		sbc $25,x			sbc DStack+1,x
.c88e	50 02		bvc $c892			bvc _c
.c890	49 80		eor #$80			eor #$80	; fix sign
.c892	10 e9		bpl $c87d	_c:		bpl False1
.c894	30 c8		bmi $c85e			bmi True1
=16					CL	.var *-XtPtr1
=$c896					en = *	; remember here
>c884	10					.byte CL	;wh_CodeLength
>c896	3e 3d				L1:	.text ">="	;  name of word as a string, ending at wh_NameLastChar
=51224					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c898	a2					.byte ((">="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c899	10					.byte WordFlags	;wh_Flags
>c89a	03					.byte 3	;wh_CodeLength
>c89b	16					  .byte LinkDisplacement
=$c89c					XtPtr1 ::= *
=51224					WordListLink ::= Nt0 ; remember the nt of this word for later
.c89c	20 86 c8	jsr $c886	Ge:		jsr Less_Than
.c89f	4c 13 c9	jmp $c913			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8a2					en = *	; remember here
>c89a	06					.byte CL	;wh_CodeLength
>c8a2	55 3c				L1:	.text "U<"	;  name of word as a string, ending at wh_NameLastChar
=51236					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8a4	82					.byte (("U<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c8a5	10					.byte WordFlags	;wh_Flags
>c8a6	03					.byte 3	;wh_CodeLength
>c8a7	0c					  .byte LinkDisplacement
=$c8a8					XtPtr1 ::= *
=51236					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8a8	b5 26		lda $26,x	U_Less_Than:	lda DStack+2,x
.c8aa	d5 24		cmp $24,x			cmp DStack+0,x
.c8ac	b5 27		lda $27,x			lda DStack+3,x
.c8ae	f5 25		sbc $25,x			sbc DStack+1,x
.c8b0	b0 cb		bcs $c87d			bcs False1
.c8b2	90 aa		bcc $c85e			bcc True1
=12					CL	.var *-XtPtr1
=$c8b4					en = *	; remember here
>c8a6	0c					.byte CL	;wh_CodeLength
>c8b4	55 3e				L1:	.text "U>"	;  name of word as a string, ending at wh_NameLastChar
=51254					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8b6	c2					.byte (("U>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c8b7	10					.byte WordFlags	;wh_Flags
>c8b8	03					.byte 3	;wh_CodeLength
>c8b9	12					  .byte LinkDisplacement
=$c8ba					XtPtr1 ::= *
=51254					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8ba	b5 24		lda $24,x	U_Greater_Than:	lda DStack+0,x
.c8bc	d5 26		cmp $26,x			cmp DStack+2,x
.c8be	b5 25		lda $25,x			lda DStack+1,x
.c8c0	f5 27		sbc $27,x			sbc DStack+3,x
.c8c2	b0 b9		bcs $c87d			bcs False1
.c8c4	90 98		bcc $c85e			bcc True1
=12					CL	.var *-XtPtr1
=$c8c6					en = *	; remember here
>c8b8	0c					.byte CL	;wh_CodeLength
>c8c6	3e				L1:	.text ">"	;  name of word as a string, ending at wh_NameLastChar
=51271					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8c7	c1					.byte ((">"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>c8c8	10					.byte WordFlags	;wh_Flags
>c8c9	03					.byte 3	;wh_CodeLength
>c8ca	11					  .byte LinkDisplacement
=$c8cb					XtPtr1 ::= *
=51271					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8cb	b5 24		lda $24,x	Greater_Than:	lda DStack+0,x	; compare
.c8cd	d5 26		cmp $26,x			cmp DStack+2,x
.c8cf	b5 25		lda $25,x			lda DStack+1,x
.c8d1	f5 27		sbc $27,x			sbc DStack+3,x
.c8d3	50 02		bvc $c8d7			bvc _c
.c8d5	49 80		eor #$80			eor #$80	; fix sign
.c8d7	10 a4		bpl $c87d	_c:		bpl False1
.c8d9	4c 5e c8	jmp $c85e			jmp True1
=17					CL	.var *-XtPtr1
=$c8dc					en = *	; remember here
>c8c9	11					.byte CL	;wh_CodeLength
>c8dc	3c 3d				L1:	.text "<="	;  name of word as a string, ending at wh_NameLastChar
=51294					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8de	a2					.byte (("<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c8df	10					.byte WordFlags	;wh_Flags
>c8e0	03					.byte 3	;wh_CodeLength
>c8e1	17					  .byte LinkDisplacement
=$c8e2					XtPtr1 ::= *
=51294					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8e2	20 cb c8	jsr $c8cb	Le:		jsr Greater_Than
.c8e5	4c 13 c9	jmp $c913			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8e8					en = *	; remember here
>c8e0	06					.byte CL	;wh_CodeLength
>c8e8	55 3e 3d			L1:	.text "U>="	;  name of word as a string, ending at wh_NameLastChar
=51307					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8eb	a3					.byte (("U>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8ec	10					.byte WordFlags	;wh_Flags
>c8ed	03					.byte 3	;wh_CodeLength
>c8ee	0d					  .byte LinkDisplacement
=$c8ef					XtPtr1 ::= *
=51307					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8ef	20 a8 c8	jsr $c8a8	UGe:		jsr U_Less_Than
.c8f2	4c 13 c9	jmp $c913			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c8f5					en = *	; remember here
>c8ed	06					.byte CL	;wh_CodeLength
>c8f5	55 3c 3d			L1:	.text "U<="	;  name of word as a string, ending at wh_NameLastChar
=51320					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c8f8	a3					.byte (("U<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c8f9	10					.byte WordFlags	;wh_Flags
>c8fa	03					.byte 3	;wh_CodeLength
>c8fb	0d					  .byte LinkDisplacement
=$c8fc					XtPtr1 ::= *
=51320					WordListLink ::= Nt0 ; remember the nt of this word for later
.c8fc	20 ba c8	jsr $c8ba	ULe:		jsr U_Greater_Than
.c8ff	4c 13 c9	jmp $c913			jmp ZEqA
=6					CL	.var *-XtPtr1
=$c902					en = *	; remember here
>c8fa	06					.byte CL	;wh_CodeLength
.c902	4c 4c b4	jmp $b44c	Throw_Stack_11: jmp Throw_Stack
>c905	30 3d				L1:	.text "0="	;  name of word as a string, ending at wh_NameLastChar
=51335					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c907	a2					.byte (("0="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c908	10					.byte WordFlags	;wh_Flags
>c909	03					.byte 3	;wh_CodeLength
>c90a	0f					  .byte LinkDisplacement
=$c90b					XtPtr1 ::= *
=51335					WordListLink ::= Nt0 ; remember the nt of this word for later
.c90b	b5 25		lda $25,x	Zero_Equal:	lda DStack+1,x
.c90d	15 24		ora $24,x	ZEq3:		ora DStack+0,x
.c90f	d0 2b		bne $c93c			bne False0
.c911	f0 14		beq $c927			beq True0
=8					CL	.var *-XtPtr1
=$c913					en = *	; remember here
>c909	08					.byte CL	;wh_CodeLength
.c913					ZEqA:
.c913	49 ff		eor #$ff			eor #$ff
.c915	95 24		sta $24,x			sta DStack+0,x
.c917	95 25		sta $25,x			sta DStack+1,x
.c919	60		rts				rts
>c91a	30 3c 3e			L1:	.text "0<>"	;  name of word as a string, ending at wh_NameLastChar
=51357					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c91d	c3					.byte (("0<>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c91e	10					.byte WordFlags	;wh_Flags
>c91f	03					.byte 3	;wh_CodeLength
>c920	16					  .byte LinkDisplacement
=$c921					XtPtr1 ::= *
=51357					WordListLink ::= Nt0 ; remember the nt of this word for later
.c921	b5 25		lda $25,x	Zero_Unequal:	lda DStack+1,x
.c923	15 24		ora $24,x	ZNe3:		ora DStack+0,x
.c925	f0 15		beq $c93c			beq False0
.c927	a9 ff		lda #$ff	True0:		lda #$ff	; return TRUE
.c929	95 24		sta $24,x	Return0:	sta DStack+0,x
.c92b	95 25		sta $25,x			sta DStack+1,x
.c92d	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.c92f	b0 35		bcs $c966		bcs Throw_Stack_05
.c931	60		rts				rts
=17					CL	.var *-XtPtr1
=$c932					en = *	; remember here
>c91f	11					.byte CL	;wh_CodeLength
>c932	30 3e				L1:	.text "0>"	;  name of word as a string, ending at wh_NameLastChar
=51380					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c934	c2					.byte (("0>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>c935	10					.byte WordFlags	;wh_Flags
>c936	03					.byte 3	;wh_CodeLength
>c937	17					  .byte LinkDisplacement
=$c938					XtPtr1 ::= *
=51380					WordListLink ::= Nt0 ; remember the nt of this word for later
.c938	b5 25		lda $25,x	Zero_Greater:	lda DStack+1,x	; MSB
.c93a	10 e7		bpl $c923			bpl ZNe3	; >= 0 ?
.c93c	a9 00		lda #$00	False0:		lda #0		; return FALSE
.c93e	f0 e9		beq $c929			beq Return0
=8					CL	.var *-XtPtr1
=$c940					en = *	; remember here
>c936	08					.byte CL	;wh_CodeLength
>c940	30 3c 3d			L1:	.text "0<="	;  name of word as a string, ending at wh_NameLastChar
=51395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c943	a3					.byte (("0<="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c944	10					.byte WordFlags	;wh_Flags
>c945	03					.byte 3	;wh_CodeLength
>c946	0f					  .byte LinkDisplacement
=$c947					XtPtr1 ::= *
=51395					WordListLink ::= Nt0 ; remember the nt of this word for later
.c947	b5 25		lda $25,x	ZLe:		lda DStack+1,x	; < 0 ?
.c949	30 dc		bmi $c927			bmi True0
.c94b	10 c0		bpl $c90d			bpl ZEq3
=6					CL	.var *-XtPtr1
=$c94d					en = *	; remember here
>c945	06					.byte CL	;wh_CodeLength
>c94d	30 3e 3d			L1:	.text "0>="	;  name of word as a string, ending at wh_NameLastChar
=51408					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c950	a3					.byte (("0>="[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>c951	10					.byte WordFlags	;wh_Flags
>c952	03					.byte 3	;wh_CodeLength
>c953	0d					  .byte LinkDisplacement
=$c954					XtPtr1 ::= *
=51408					WordListLink ::= Nt0 ; remember the nt of this word for later
.c954	b5 25		lda $25,x	ZGe:		lda DStack+1,x
.c956	10 cf		bpl $c927			bpl True0
.c958	30 e2		bmi $c93c			bmi False0
=6					CL	.var *-XtPtr1
=$c95a					en = *	; remember here
>c952	06					.byte CL	;wh_CodeLength
>c95a	30 3c				L1:	.text "0<"	;  name of word as a string, ending at wh_NameLastChar
=51420					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c95c	82					.byte (("0<"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c95d	10					.byte WordFlags	;wh_Flags
>c95e	03					.byte 3	;wh_CodeLength
>c95f	0c					  .byte LinkDisplacement
=$c960					XtPtr1 ::= *
=51420					WordListLink ::= Nt0 ; remember the nt of this word for later
.c960	b5 25		lda $25,x	Zero_Less:	lda DStack+1,x	; MSB
.c962	10 d8		bpl $c93c			bpl False0
.c964	30 c1		bmi $c927			bmi True0
=6					CL	.var *-XtPtr1
=$c966					en = *	; remember here
>c95e	06					.byte CL	;wh_CodeLength
.c966	4c 4c b4	jmp $b44c	Throw_Stack_05: jmp Throw_Stack
>c969	4d 69 6e			L1:	.text "Min"	;  name of word as a string, ending at wh_NameLastChar
=51436					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c96c	c3					.byte (("Min"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>c96d	50					.byte WordFlags	;wh_Flags
>c96e	03					.byte 3	;wh_CodeLength
>c96f	10					  .byte LinkDisplacement
=$c970					XtPtr1 ::= *
=51436					WordListLink ::= Nt0 ; remember the nt of this word for later
.c970					Min:
.c970	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c972	b0 f2		bcs $c966		bcs Throw_Stack_05
.c974	b5 24		lda $24,x			lda DStack+0,x	; compare n1 & n2; sets V & N but not Z
.c976	d5 26		cmp $26,x			cmp DStack+2,x
.c978	b5 25		lda $25,x			lda DStack+1,x
.c97a	f5 27		sbc $27,x			sbc DStack+3,x
.c97c	70 1a		bvs $c998			bvs Max_3	; if overflow, the sign is backwards
.c97e	30 27		bmi $c9a7	Min_3:		bmi Nip_NoUf	; if negative, NOS is larger and needs to be dumped
.c980	e8		inx				inx		; Drop n2
.c981	e8		inx				inx
=18					CL	.var *-XtPtr1
=$c982					en = *	; remember here
>c96e	12					.byte CL	;wh_CodeLength
.c982	60		rts				rts
>c983	4d 61 78			L1:	.text "Max"	;  name of word as a string, ending at wh_NameLastChar
=51462					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c986	03					.byte (("Max"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c987	10					.byte WordFlags	;wh_Flags
>c988	03					.byte 3	;wh_CodeLength
>c989	1a					  .byte LinkDisplacement
=$c98a					XtPtr1 ::= *
=51462					WordListLink ::= Nt0 ; remember the nt of this word for later
.c98a					Max:
.c98a	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.c98c	b0 d8		bcs $c966		bcs Throw_Stack_05
.c98e	b5 24		lda $24,x			lda DStack+0,x	; Compare n1 & n2; sets V & N but not Z
.c990	d5 26		cmp $26,x			cmp DStack+2,x
.c992	b5 25		lda $25,x			lda DStack+1,x
.c994	f5 27		sbc $27,x			sbc DStack+3,x
.c996	70 e6		bvs $c97e			bvs Min_3	; if overflow, the sign is backwards
.c998	10 0d		bpl $c9a7	Max_3:		bpl Nip_NoUf	; if negative, NOS is larger and needs to be kept
.c99a	e8		inx				inx		; Drop n2
.c99b	e8		inx				inx
=18					CL	.var *-XtPtr1
=$c99c					en = *	; remember here
>c988	12					.byte CL	;wh_CodeLength
.c99c	60		rts				rts
>c99d	4e 69 70			L1:	.text "Nip"	;  name of word as a string, ending at wh_NameLastChar
=51488					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9a0	03					.byte (("Nip"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=26					LinkDisplacement = Nt0-WordListLink
>c9a1	40					.byte WordFlags	;wh_Flags
>c9a2	03					.byte 3	;wh_CodeLength
>c9a3	1a					  .byte LinkDisplacement
=$c9a4					XtPtr1 ::= *
=51488					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9a4					Nip:
.c9a4	20 3d b4	jsr $b43d			jsr underflow_2
.c9a7	b5 24		lda $24,x	Nip_NoUf:	lda DStack+0,x	; PopYA
.c9a9	b4 25		ldy $25,x			ldy DStack+1,x
.c9ab	e8		inx				inx
.c9ac	e8		inx				inx
.c9ad	95 24		sta $24,x			sta DStack+0,x	; store over n1
.c9af	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$c9b1					en = *	; remember here
>c9a2	0d					.byte CL	;wh_CodeLength
.c9b1	60		rts				rts
>c9b2	50 69 63 6b			L1:	.text "Pick"	;  name of word as a string, ending at wh_NameLastChar
=51510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9b6	64					.byte (("Pick"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>c9b7	00					.byte WordFlags	;wh_Flags
>c9b8	03					.byte 3	;wh_CodeLength
>c9b9	16					  .byte LinkDisplacement
=$c9ba					XtPtr1 ::= *
=51510					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9ba					Pick:
.c9ba	16 24		asl $24,x			asl DStack+0,x	; we assume u < 128 (stack is small)
.c9bc	8a		txa				txa
.c9bd	75 24		adc $24,x			adc DStack+0,x
.c9bf	a8		tay				tay
.c9c0	b9 26 00	lda $0026,y			lda DStack+2,y
.c9c3	95 24		sta $24,x			sta DStack+0,x
.c9c5	b9 27 00	lda $0027,y			lda DStack+3,y
.c9c8	95 25		sta $25,x			sta DStack+1,x
=16					CL	.var *-XtPtr1
=$c9ca					en = *	; remember here
>c9b8	10					.byte CL	;wh_CodeLength
.c9ca	60		rts				rts
>c9cb	43 68 61 72			L1:	.text "Char"	;  name of word as a string, ending at wh_NameLastChar
=51535					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9cf	44					.byte (("Char"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>c9d0	10					.byte WordFlags	;wh_Flags
>c9d1	03					.byte 3	;wh_CodeLength
>c9d2	19					  .byte LinkDisplacement
=$c9d3					XtPtr1 ::= *
=51535					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9d3					Char:
.c9d3	20 ad ba	jsr $baad			jsr parse_name_check
.c9d6	e8		inx				inx		; Drop number of characters, leave addr
.c9d7	e8		inx				inx
.c9d8	4c 63 cd	jmp $cd63			jmp C_Fetch	; get character ( C@ )
=8					CL	.var *-XtPtr1
=$c9db					en = *	; remember here
>c9d1	08					.byte CL	;wh_CodeLength
>c9db	5b 43 68 61 72 5d		L1:	.text "[Char]"	;  name of word as a string, ending at wh_NameLastChar
=51553					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9e1	a6					.byte (("[Char]"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=28					WordFlags ::= CO+IM+NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>c9e2	1c					.byte WordFlags	;wh_Flags
>c9e3	03					.byte 3	;wh_CodeLength
>c9e4	12					  .byte LinkDisplacement
=$c9e5					XtPtr1 ::= *
=51553					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9e5	20 d3 c9	jsr $c9d3	Bracket_Char:	jsr Char
.c9e8	4c 72 b7	jmp $b772			jmp Literal
=6					CL	.var *-XtPtr1
=$c9eb					en = *	; remember here
>c9e3	06					.byte CL	;wh_CodeLength
>c9eb	43 68 61 72 2b			L1:	.text "Char+"	;  name of word as a string, ending at wh_NameLastChar
=51568					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9f0	65					.byte (("Char+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>c9f1	10					.byte WordFlags	;wh_Flags
>c9f2	03					.byte 3	;wh_CodeLength
>c9f3	0f					  .byte LinkDisplacement
=$c9f4					XtPtr1 ::= *
=51568					WordListLink ::= Nt0 ; remember the nt of this word for later
.c9f4	4c 6e ca	jmp $ca6e	Char_Plus:	jmp One_Plus
=3					CL	.var *-XtPtr1
=$c9f7					en = *	; remember here
>c9f2	03					.byte CL	;wh_CodeLength
>c9f7	43 68 61 72 73			L1:	.text "Chars"	;  name of word as a string, ending at wh_NameLastChar
=51580					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>c9fc	65					.byte (("Chars"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$20					WordFlags ::= AN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>c9fd	20					.byte WordFlags	;wh_Flags
>c9fe	03					.byte 3	;wh_CodeLength
>c9ff	0c					  .byte LinkDisplacement
=$ca00					XtPtr1 ::= *
=51580					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca00					Chars:
=0					CL	.var *-XtPtr1
=$ca00					en = *	; remember here
>c9fe	00					.byte CL	;wh_CodeLength
.ca00	60		rts				rts
>ca01	43 65 6c 6c 73			L1:	.text "Cells"	;  name of word as a string, ending at wh_NameLastChar
=51590					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca06	65					.byte (("Cells"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=10					LinkDisplacement = Nt0-WordListLink
>ca07	40					.byte WordFlags	;wh_Flags
>ca08	03					.byte 3	;wh_CodeLength
>ca09	0a					  .byte LinkDisplacement
=$ca0a					XtPtr1 ::= *
=51590					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca0a	20 29 b4	jsr $b429	Cells:		jsr underflow_1
.ca0d	16 24		asl $24,x			asl DStack+0,x		; 2*
.ca0f	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-XtPtr1
=$ca11					en = *	; remember here
>ca08	07					.byte CL	;wh_CodeLength
.ca11	60		rts				rts
>ca12	43 65 6c 6c 2b			L1:	.text "Cell+"	;  name of word as a string, ending at wh_NameLastChar
=51607					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca17	65					.byte (("Cell+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>ca18	40					.byte WordFlags	;wh_Flags
>ca19	03					.byte 3	;wh_CodeLength
>ca1a	11					  .byte LinkDisplacement
=$ca1b					XtPtr1 ::= *
=51607					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca1b	20 29 b4	jsr $b429	Cell_Plus:	jsr underflow_1
.ca1e	a9 02		lda #$02	Cell_Plus_NoUf:	lda #2		; our cells are 2 bytes
.ca20					Plus_A:
.ca20	18		clc				clc
.ca21	75 24		adc $24,x			adc DStack+0,x
.ca23	95 24		sta $24,x			sta DStack+0,x
.ca25	90 02		bcc $ca29			bcc +
.ca27	f6 25		inc $25,x			inc DStack+1,x
.ca29					+
=14					CL	.var *-XtPtr1
=$ca29					en = *	; remember here
>ca19	0e					.byte CL	;wh_CodeLength
.ca29	60		rts				rts
.ca2a					Nos_Plus_A:
.ca2a	18		clc				clc
.ca2b	75 26		adc $26,x			adc DStack+2,x
.ca2d	95 26		sta $26,x			sta DStack+2,x
.ca2f	90 02		bcc $ca33			bcc +
.ca31	f6 27		inc $27,x			inc DStack+3,x
.ca33	60		rts		+		rts
>ca34	48 65 72 65			L1:	.text "Here"	;  name of word as a string, ending at wh_NameLastChar
=51640					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca38	a4					.byte (("Here"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>ca39	10					.byte WordFlags	;wh_Flags
>ca3a	03					.byte 3	;wh_CodeLength
>ca3b	21					  .byte LinkDisplacement
=$ca3c					XtPtr1 ::= *
=51640					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca3c	a5 00		lda $00		Here:		lda cp+0
.ca3e	a4 01		ldy $01				ldy cp+1
.ca40	4c bd b7	jmp $b7bd			jmp PushYA
=7					CL	.var *-XtPtr1
=$ca43					en = *	; remember here
>ca3a	07					.byte CL	;wh_CodeLength
>ca43	31 2d				L1:	.text "1-"	;  name of word as a string, ending at wh_NameLastChar
=51653					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca45	a2					.byte (("1-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>ca46	40					.byte WordFlags	;wh_Flags
>ca47	03					.byte 3	;wh_CodeLength
>ca48	0d					  .byte LinkDisplacement
=$ca49					XtPtr1 ::= *
=51653					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca49	20 29 b4	jsr $b429	One_Minus:	jsr underflow_1
.ca4c					One_Minus_NoUf:
.ca4c	b5 24		lda $24,x			lda DStack+0,x
.ca4e	d0 02		bne $ca52			bne +
.ca50	d6 25		dec $25,x			dec DStack+1,x
.ca52	d6 24		dec $24,x	+		dec DStack+0,x
=11					CL	.var *-XtPtr1
=$ca54					en = *	; remember here
>ca47	0b					.byte CL	;wh_CodeLength
.ca54	60		rts				rts
.ca55					NOS_One_Minus:
.ca55	b5 26		lda $26,x			lda DStack+2,x
.ca57	d0 02		bne $ca5b			bne +
.ca59	d6 27		dec $27,x			dec DStack+3,x
.ca5b	d6 26		dec $26,x	+		dec DStack+2,x
.ca5d	60		rts				rts
.ca5e					Minus_A:
.ca5e	18		clc				clc
.ca5f	75 24		adc $24,x			adc DStack+0,x
.ca61	95 24		sta $24,x			sta DStack+0,x
.ca63	b0 02		bcs $ca67			bcs +
.ca65	d6 25		dec $25,x			dec DStack+1,x
.ca67	60		rts		+		rts
>ca68	31 2b				L1:	.text "1+"	;  name of word as a string, ending at wh_NameLastChar
=51690					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca6a	62					.byte (("1+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ca6b	40					.byte WordFlags	;wh_Flags
>ca6c	03					.byte 3	;wh_CodeLength
>ca6d	25					  .byte LinkDisplacement
=$ca6e					XtPtr1 ::= *
=51690					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca6e	20 29 b4	jsr $b429	One_Plus:	jsr underflow_1
.ca71	f6 24		inc $24,x			inc DStack+0,x
.ca73	d0 02		bne $ca77			bne +
.ca75	f6 25		inc $25,x			inc DStack+1,x
.ca77					+
=9					CL	.var *-XtPtr1
=$ca77					en = *	; remember here
>ca6c	09					.byte CL	;wh_CodeLength
.ca77	60		rts				rts
.ca78					NOS_One_Plus:
.ca78	f6 26		inc $26,x			inc DStack+2,x
.ca7a	d0 02		bne $ca7e			bne +
.ca7c	f6 27		inc $27,x			inc DStack+3,x
.ca7e	60		rts		+		rts
>ca7f	55 4d 2b			L1:	.text "UM+"	;  name of word as a string, ending at wh_NameLastChar
=51714					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca82	63					.byte (("UM+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>ca83	00					.byte WordFlags	;wh_Flags
>ca84	03					.byte 3	;wh_CodeLength
>ca85	18					  .byte LinkDisplacement
=$ca86					XtPtr1 ::= *
=51714					WordListLink ::= Nt0 ; remember the nt of this word for later
.ca86	20 00 b4	jsr $b400	UMPlus:		jsr PopYA
.ca89	18		clc				clc		; add n to d1.lo
.ca8a	75 26		adc $26,x			adc DStack+2,x
.ca8c	95 26		sta $26,x			sta DStack+2,x
.ca8e	98		tya				tya
.ca8f	75 27		adc $27,x			adc DStack+3,x
.ca91	95 27		sta $27,x			sta DStack+3,x
.ca93	90 06		bcc $ca9b			bcc +		; propagate carry thru d1.hi
.ca95	f6 24		inc $24,x			inc DStack+0,x
.ca97	d0 02		bne $ca9b			bne +
.ca99	f6 25		inc $25,x			inc DStack+1,x
.ca9b					+
=21					CL	.var *-XtPtr1
=$ca9b					en = *	; remember here
>ca84	15					.byte CL	;wh_CodeLength
.ca9b	60		rts				rts
>ca9c	4d 2b				L1:	.text "M+"	;  name of word as a string, ending at wh_NameLastChar
=51742					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ca9e	62					.byte (("M+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>ca9f	10					.byte WordFlags	;wh_Flags
>caa0	03					.byte 3	;wh_CodeLength
>caa1	1c					  .byte LinkDisplacement
=$caa2					XtPtr1 ::= *
=51742					WordListLink ::= Nt0 ; remember the nt of this word for later
.caa2	20 86 ca	jsr $ca86	MPlus:		jsr UMPlus
.caa5	98		tya				tya		; if n negative
.caa6	30 a4		bmi $ca4c			bmi One_Minus_NoUf ;   decrement d1.hi
=6					CL	.var *-XtPtr1
=$caa8					en = *	; remember here
>caa0	06					.byte CL	;wh_CodeLength
.caa8	60		rts				rts
>caa9	44 32 2a			L1:	.text "D2*"	;  name of word as a string, ending at wh_NameLastChar
=51756					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caac	43					.byte (("D2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>caad	40					.byte WordFlags	;wh_Flags
>caae	03					.byte 3	;wh_CodeLength
>caaf	0e					  .byte LinkDisplacement
=$cab0					XtPtr1 ::= *
=51756					WordListLink ::= Nt0 ; remember the nt of this word for later
.cab0	20 3d b4	jsr $b43d	D2Star:		jsr underflow_2
.cab3	16 26		asl $26,x			asl DStack+2,x
.cab5	36 27		rol $27,x			rol DStack+3,x
.cab7	36 24		rol $24,x			rol DStack+0,x
.cab9	36 25		rol $25,x			rol DStack+1,x
=11					CL	.var *-XtPtr1
=$cabb					en = *	; remember here
>caae	0b					.byte CL	;wh_CodeLength
.cabb	60		rts				rts
>cabc	44 32 2f			L1:	.text "D2/"	;  name of word as a string, ending at wh_NameLastChar
=51775					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cabf	e3					.byte (("D2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cac0	40					.byte WordFlags	;wh_Flags
>cac1	03					.byte 3	;wh_CodeLength
>cac2	13					  .byte LinkDisplacement
=$cac3					XtPtr1 ::= *
=51775					WordListLink ::= Nt0 ; remember the nt of this word for later
.cac3	20 3d b4	jsr $b43d	D2Slash:	jsr underflow_2
.cac6	b5 25		lda $25,x			lda DStack+1,x		; setup for sign-extended shift right
.cac8	0a		asl a				asl a
.cac9	76 25		ror $25,x	D2SlashU:	ror DStack+1,x
.cacb	76 24		ror $24,x			ror DStack+0,x
.cacd	76 27		ror $27,x			ror DStack+3,x
.cacf	76 26		ror $26,x			ror DStack+2,x
=14					CL	.var *-XtPtr1
=$cad1					en = *	; remember here
>cac1	0e					.byte CL	;wh_CodeLength
.cad1	60		rts				rts
>cad2	55 44 32 2f			L1:	.text "UD2/"	;  name of word as a string, ending at wh_NameLastChar
=51798					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cad6	e4					.byte (("UD2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cad7	50					.byte WordFlags	;wh_Flags
>cad8	03					.byte 3	;wh_CodeLength
>cad9	17					  .byte LinkDisplacement
=$cada					XtPtr1 ::= *
=51798					WordListLink ::= Nt0 ; remember the nt of this word for later
.cada	20 3d b4	jsr $b43d	DU2Slash:	jsr underflow_2
.cadd	18		clc				clc
.cade	90 e9		bcc $cac9			bcc D2SlashU
=6					CL	.var *-XtPtr1
=$cae0					en = *	; remember here
>cad8	06					.byte CL	;wh_CodeLength
>cae0	32 2a				L1:	.text "2*"	;  name of word as a string, ending at wh_NameLastChar
=51810					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cae2	42					.byte (("2*"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cae3	40					.byte WordFlags	;wh_Flags
>cae4	03					.byte 3	;wh_CodeLength
>cae5	0c					  .byte LinkDisplacement
=$cae6					XtPtr1 ::= *
=51810					WordListLink ::= Nt0 ; remember the nt of this word for later
.cae6					Two_Star:
.cae6	20 29 b4	jsr $b429			jsr underflow_1
.cae9	16 24		asl $24,x			asl DStack+0,x
.caeb	36 25		rol $25,x			rol DStack+1,x
=7					CL	.var *-XtPtr1
=$caed					en = *	; remember here
>cae4	07					.byte CL	;wh_CodeLength
.caed	60		rts				rts
>caee	32 2f				L1:	.text "2/"	;  name of word as a string, ending at wh_NameLastChar
=51824					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>caf0	e2					.byte (("2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>caf1	40					.byte WordFlags	;wh_Flags
>caf2	03					.byte 3	;wh_CodeLength
>caf3	0e					  .byte LinkDisplacement
=$caf4					XtPtr1 ::= *
=51824					WordListLink ::= Nt0 ; remember the nt of this word for later
.caf4					Two_Slash:
.caf4	20 29 b4	jsr $b429			jsr underflow_1
.caf7	b5 25		lda $25,x			lda DStack+1,x		; load sign into carry, for signed shift
.caf9	0a		asl a				asl
.cafa	76 25		ror $25,x			ror DStack+1,x
.cafc	76 24		ror $24,x			ror DStack+0,x
=10					CL	.var *-XtPtr1
=$cafe					en = *	; remember here
>caf2	0a					.byte CL	;wh_CodeLength
.cafe	60		rts				rts
>caff	55 32 2f			L1:	.text "U2/"	;  name of word as a string, ending at wh_NameLastChar
=51842					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb02	e3					.byte (("U2/"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cb03	40					.byte WordFlags	;wh_Flags
>cb04	03					.byte 3	;wh_CodeLength
>cb05	12					  .byte LinkDisplacement
=$cb06					XtPtr1 ::= *
=51842					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb06					UTwo_Slash:
.cb06	20 29 b4	jsr $b429			jsr underflow_1
.cb09	56 25		lsr $25,x			lsr DStack+1,x
.cb0b	76 24		ror $24,x			ror DStack+0,x
=7					CL	.var *-XtPtr1
=$cb0d					en = *	; remember here
>cb04	07					.byte CL	;wh_CodeLength
.cb0d	60		rts				rts
>cb0e	44 52 53 68 69 66 74		L1:	.text "DRShift"	;  name of word as a string, ending at wh_NameLastChar
=51861					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb15	87					.byte (("DRShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cb16	00					.byte WordFlags	;wh_Flags
>cb17	03					.byte 3	;wh_CodeLength
>cb18	13					  .byte LinkDisplacement
=$cb19					XtPtr1 ::= *
=51861					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb19	20 e5 b3	jsr $b3e5	DRShift:	jsr PopA	; pop u
.cb1c	a8		tay		DRShiftA:	tay
.cb1d	f0 0e		beq $cb2d			beq _9
.cb1f	b5 25		lda $25,x			lda DStack+1,x
.cb21	4a		lsr a		_2:		lsr a
.cb22	76 24		ror $24,x			ror DStack+0,x
.cb24	76 27		ror $27,x			ror DStack+3,x
.cb26	76 26		ror $26,x			ror DStack+2,x
.cb28	88		dey				dey
.cb29	d0 f6		bne $cb21			bne _2
.cb2b	95 25		sta $25,x			sta DStack+1,x
.cb2d					_9:
=20					CL	.var *-XtPtr1
=$cb2d					en = *	; remember here
>cb17	14					.byte CL	;wh_CodeLength
.cb2d	60		rts				rts
>cb2e	52 53 68 69 66 74		L1:	.text "RShift"	;  name of word as a string, ending at wh_NameLastChar
=51892					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb34	86					.byte (("RShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cb35	00					.byte WordFlags	;wh_Flags
>cb36	03					.byte 3	;wh_CodeLength
>cb37	1f					  .byte LinkDisplacement
=$cb38					XtPtr1 ::= *
=51892					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb38	20 ee b3	jsr $b3ee	RShift:		jsr PopA2	; pop u, check for 2 params
.cb3b	a8		tay		RShift_A:	tay		; get shift count
.cb3c	f0 0a		beq $cb48			beq _done
.cb3e	b5 25		lda $25,x			lda DStack+1,x
.cb40	4a		lsr a		_loop:		lsr a
.cb41	76 24		ror $24,x			ror DStack+0,x
.cb43	88		dey				dey
.cb44	d0 fa		bne $cb40			bne _loop
.cb46	95 25		sta $25,x			sta DStack+1,x
.cb48					_done:
=16					CL	.var *-XtPtr1
=$cb48					en = *	; remember here
>cb36	10					.byte CL	;wh_CodeLength
.cb48	60		rts				rts
>cb49	4c 53 68 69 66 74		L1:	.text "LShift"	;  name of word as a string, ending at wh_NameLastChar
=51919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb4f	86					.byte (("LShift"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cb50	00					.byte WordFlags	;wh_Flags
>cb51	03					.byte 3	;wh_CodeLength
>cb52	1b					  .byte LinkDisplacement
=$cb53					XtPtr1 ::= *
=51919					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb53	20 ee b3	jsr $b3ee	LShift:		jsr PopA2	; pop u, check for 2 params
.cb56	a8		tay		LShift_A:	tay		; get shift count
.cb57	f0 0a		beq $cb63			beq _done
.cb59	b5 25		lda $25,x			lda DStack+1,x
.cb5b	16 24		asl $24,x	_loop:		asl DStack+0,x
.cb5d	2a		rol a				rol a
.cb5e	88		dey				dey
.cb5f	d0 fa		bne $cb5b			bne _loop
.cb61	95 25		sta $25,x			sta DStack+1,x
.cb63					_done:
=16					CL	.var *-XtPtr1
=$cb63					en = *	; remember here
>cb51	10					.byte CL	;wh_CodeLength
.cb63	60		rts				rts
>cb64	41 6e 64			L1:	.text "And"	;  name of word as a string, ending at wh_NameLastChar
=51943					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb67	83					.byte (("And"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb68	40					.byte WordFlags	;wh_Flags
>cb69	03					.byte 3	;wh_CodeLength
>cb6a	18					  .byte LinkDisplacement
=$cb6b					XtPtr1 ::= *
=51943					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb6b					And2:
.cb6b	20 3d b4	jsr $b43d			jsr underflow_2
.cb6e	b5 24		lda $24,x			lda DStack+0,x
.cb70	35 26		and $26,x			and DStack+2,x
.cb72	95 26		sta $26,x			sta DStack+2,x
.cb74	b5 25		lda $25,x			lda DStack+1,x
.cb76	35 27		and $27,x			and DStack+3,x
.cb78	95 27		sta $27,x			sta DStack+3,x
.cb7a	e8		inx				inx		; Drop n2
.cb7b	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cb7c					en = *	; remember here
>cb69	11					.byte CL	;wh_CodeLength
.cb7c	60		rts				rts
>cb7d	4f 72				L1:	.text "Or"	;  name of word as a string, ending at wh_NameLastChar
=51967					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb7f	42					.byte (("Or"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cb80	40					.byte WordFlags	;wh_Flags
>cb81	03					.byte 3	;wh_CodeLength
>cb82	18					  .byte LinkDisplacement
=$cb83					XtPtr1 ::= *
=51967					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb83					Or:
.cb83	20 3d b4	jsr $b43d			jsr underflow_2
.cb86	b5 24		lda $24,x			lda DStack+0,x
.cb88	15 26		ora $26,x			ora DStack+2,x
.cb8a	95 26		sta $26,x			sta DStack+2,x
.cb8c	b5 25		lda $25,x			lda DStack+1,x
.cb8e	15 27		ora $27,x			ora DStack+3,x
.cb90	95 27		sta $27,x			sta DStack+3,x
.cb92	e8		inx				inx		; Drop n2
.cb93	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cb94					en = *	; remember here
>cb81	11					.byte CL	;wh_CodeLength
.cb94	60		rts				rts
>cb95	58 6f 72			L1:	.text "Xor"	;  name of word as a string, ending at wh_NameLastChar
=51992					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cb98	43					.byte (("Xor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cb99	40					.byte WordFlags	;wh_Flags
>cb9a	03					.byte 3	;wh_CodeLength
>cb9b	19					  .byte LinkDisplacement
=$cb9c					XtPtr1 ::= *
=51992					WordListLink ::= Nt0 ; remember the nt of this word for later
.cb9c					Xor:
.cb9c	20 3d b4	jsr $b43d			jsr underflow_2
.cb9f	b5 24		lda $24,x			lda DStack+0,x
.cba1	55 26		eor $26,x			eor DStack+2,x
.cba3	95 26		sta $26,x			sta DStack+2,x
.cba5	b5 25		lda $25,x			lda DStack+1,x
.cba7	55 27		eor $27,x			eor DStack+3,x
.cba9	95 27		sta $27,x			sta DStack+3,x
.cbab	e8		inx				inx		; Drop n2
.cbac	e8		inx				inx
=17					CL	.var *-XtPtr1
=$cbad					en = *	; remember here
>cb9a	11					.byte CL	;wh_CodeLength
.cbad	60		rts				rts
>cbae	2b				L1:	.text "+"	;  name of word as a string, ending at wh_NameLastChar
=52015					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbaf	61					.byte (("+"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cbb0	40					.byte WordFlags	;wh_Flags
>cbb1	03					.byte 3	;wh_CodeLength
>cbb2	17					  .byte LinkDisplacement
=$cbb3					XtPtr1 ::= *
=52015					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbb3					Plus:
.cbb3	20 3d b4	jsr $b43d			jsr underflow_2
.cbb6	18		clc				clc
.cbb7	b5 24		lda $24,x			lda DStack+0,x		; LSB
.cbb9	75 26		adc $26,x			adc DStack+2,x
.cbbb	95 26		sta $26,x			sta DStack+2,x
.cbbd	b5 25		lda $25,x			lda DStack+1,x		; MSB. No CLC, conserve carry bit
.cbbf	75 27		adc $27,x			adc DStack+3,x
.cbc1	95 27		sta $27,x			sta DStack+3,x
.cbc3	e8		inx				inx
.cbc4	e8		inx				inx
=18					CL	.var *-XtPtr1
=$cbc5					en = *	; remember here
>cbb1	12					.byte CL	;wh_CodeLength
.cbc5	60		rts				rts
>cbc6	2d				L1:	.text "-"	;  name of word as a string, ending at wh_NameLastChar
=52039					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbc7	a1					.byte (("-"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbc8	40					.byte WordFlags	;wh_Flags
>cbc9	03					.byte 3	;wh_CodeLength
>cbca	18					  .byte LinkDisplacement
=$cbcb					XtPtr1 ::= *
=52039					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbcb					Minus:
.cbcb	20 3d b4	jsr $b43d			jsr underflow_2
.cbce	38		sec				sec
.cbcf	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cbd1	f5 24		sbc $24,x			sbc DStack+0,x
.cbd3	95 26		sta $26,x			sta DStack+2,x
.cbd5	b5 27		lda $27,x			lda DStack+3,x	; MSB
.cbd7	f5 25		sbc $25,x			sbc DStack+1,x
.cbd9	95 27		sta $27,x			sta DStack+3,x
.cbdb	e8		inx				inx		; Drop n2
.cbdc	e8		inx				inx
=18					CL	.var *-XtPtr1
=$cbdd					en = *	; remember here
>cbc9	12					.byte CL	;wh_CodeLength
.cbdd	60		rts				rts
>cbde	2e				L1:	.text "."	;  name of word as a string, ending at wh_NameLastChar
=52063					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbdf	c1					.byte (("."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=24					LinkDisplacement = Nt0-WordListLink
>cbe0	10					.byte WordFlags	;wh_Flags
>cbe1	03					.byte 3	;wh_CodeLength
>cbe2	18					  .byte LinkDisplacement
=$cbe3					XtPtr1 ::= *
=52063					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbe3	b5 25		lda $25,x	Dot:		lda DStack+1,x		; ( n )	save sign
.cbe5	08		php				php
.cbe6	20 d6 c6	jsr $c6d6			jsr Abs			; ( u )
.cbe9	20 fa b7	jsr $b7fa			jsr Zero		; ( ud )	u>d  cvt u to ud
.cbec	4c fb cb	jmp $cbfb			jmp fmt_d3
=12					CL	.var *-XtPtr1
=$cbef					en = *	; remember here
>cbe1	0c					.byte CL	;wh_CodeLength
>cbef	44 2e				L1:	.text "D."	;  name of word as a string, ending at wh_NameLastChar
=52081					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cbf1	c2					.byte (("D."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cbf2	10					.byte WordFlags	;wh_Flags
>cbf3	03					.byte 3	;wh_CodeLength
>cbf4	12					  .byte LinkDisplacement
=$cbf5					XtPtr1 ::= *
=52081					WordListLink ::= Nt0 ; remember the nt of this word for later
.cbf5	b5 25		lda $25,x	D_Dot:		lda DStack+1,x		; save sign
.cbf7	08		php				php
.cbf8	20 09 c7	jsr $c709			jsr DAbs
.cbfb	20 ee ab	jsr $abee	fmt_d3:		jsr Less_Number_Sign	; ( ud )	start formatting
.cbfe	20 5d ac	jsr $ac5d			jsr Number_sign_s	; ( ud )	do all digits
.cc01	28		plp				plp			; ( ud )	do sign
.cc02	20 77 ac	jsr $ac77			jsr Sign_P		; ( ud )
.cc05	20 fa ab	jsr $abfa			jsr Number_sign_greater	; ( addr u )	end formatting
.cc08	20 ee cd	jsr $cdee			jsr Type
.cc0b	4c e2 cd	jmp $cde2			jmp Space
=25					CL	.var *-XtPtr1
=$cc0e					en = *	; remember here
>cbf3	19					.byte CL	;wh_CodeLength
>cc0e	55 2e				L1:	.text "U."	;  name of word as a string, ending at wh_NameLastChar
=52112					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc10	c2					.byte (("U."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc11	50					.byte WordFlags	;wh_Flags
>cc12	03					.byte 3	;wh_CodeLength
>cc13	1f					  .byte LinkDisplacement
=$cc14					XtPtr1 ::= *
=52112					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc14	20 29 b4	jsr $b429	U_Dot:		jsr underflow_1
.cc17	20 2d cc	jsr $cc2d			jsr print_u
.cc1a	4c e2 cd	jmp $cde2			jmp Space
=9					CL	.var *-XtPtr1
=$cc1d					en = *	; remember here
>cc12	09					.byte CL	;wh_CodeLength
>cc1d	55 44 2e			L1:	.text "UD."	;  name of word as a string, ending at wh_NameLastChar
=52128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc20	c3					.byte (("UD."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cc21	50					.byte WordFlags	;wh_Flags
>cc22	03					.byte 3	;wh_CodeLength
>cc23	10					  .byte LinkDisplacement
=$cc24					XtPtr1 ::= *
=52128					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc24	20 3d b4	jsr $b43d	UD_Dot:		jsr underflow_2 ; double number
.cc27	20 30 cc	jsr $cc30			jsr print_ud
.cc2a	4c e2 cd	jmp $cde2			jmp Space
=9					CL	.var *-XtPtr1
=$cc2d					en = *	; remember here
>cc22	09					.byte CL	;wh_CodeLength
.cc2d					print_u:
.cc2d	20 fa b7	jsr $b7fa			jsr Zero			; convert to ud
.cc30					print_ud:
.cc30	20 ee ab	jsr $abee			jsr Less_Number_Sign		; <#	start formatting
.cc33	20 5d ac	jsr $ac5d			jsr Number_sign_s		; #S	do all digits
.cc36	20 fa ab	jsr $abfa			jsr Number_sign_greater		; #>	end formatting
.cc39	4c ee cd	jmp $cdee			jmp Type
>cc3c	55 2e 52			L1:	.text "U.R"	;  name of word as a string, ending at wh_NameLastChar
=52159					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc3f	43					.byte (("U.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=31					LinkDisplacement = Nt0-WordListLink
>cc40	10					.byte WordFlags	;wh_Flags
>cc41	03					.byte 3	;wh_CodeLength
>cc42	1f					  .byte LinkDisplacement
=$cc43					XtPtr1 ::= *
=52159					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc43	20 e5 b3	jsr $b3e5	U_Dot_R:	jsr PopA		; save field width
.cc46	48		pha		U_Dot_R_A:	pha
.cc47	20 fa b7	jsr $b7fa			jsr Zero		; u>d  cvt u to ud
.cc4a	4c 59 cc	jmp $cc59			jmp fmt_udr3
=10					CL	.var *-XtPtr1
=$cc4d					en = *	; remember here
>cc41	0a					.byte CL	;wh_CodeLength
>cc4d	55 44 2e 52			L1:	.text "UD.R"	;  name of word as a string, ending at wh_NameLastChar
=52177					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc51	44					.byte (("UD.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cc52	10					.byte WordFlags	;wh_Flags
>cc53	03					.byte 3	;wh_CodeLength
>cc54	12					  .byte LinkDisplacement
=$cc55					XtPtr1 ::= *
=52177					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc55	20 e5 b3	jsr $b3e5	UD_Dot_R:	jsr PopA			; save field width
.cc58	48		pha		UD_Dot_R_A:	pha
.cc59	20 ee ab	jsr $abee	fmt_udr3:	jsr Less_Number_Sign		; start formatted
.cc5c	20 5d ac	jsr $ac5d			jsr Number_sign_s		; do all digits
.cc5f	20 fa ab	jsr $abfa	fmt_r:		jsr Number_sign_greater		; finish formatted
.cc62	68		pla				pla				; recover field width
.cc63	38		sec				sec				; do leading spaces
.cc64	f5 24		sbc $24,x			sbc DStack+0,x
.cc66	90 06		bcc $cc6e			bcc +
.cc68	20 ec b7	jsr $b7ec			jsr PushZA
.cc6b	20 a7 c4	jsr $c4a7			jsr Spaces
.cc6e	4c ee cd	jmp $cdee	+		jmp Type			; type formatted
=28					CL	.var *-XtPtr1
=$cc71					en = *	; remember here
>cc53	1c					.byte CL	;wh_CodeLength
>cc71	2e 52				L1:	.text ".R"	;  name of word as a string, ending at wh_NameLastChar
=52211					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc73	42					.byte ((".R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>cc74	10					.byte WordFlags	;wh_Flags
>cc75	03					.byte 3	;wh_CodeLength
>cc76	22					  .byte LinkDisplacement
=$cc77					XtPtr1 ::= *
=52211					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc77	20 e5 b3	jsr $b3e5	Dot_R:		jsr PopA		; save field width
.cc7a	48		pha		Dot_R_A:	pha
.cc7b	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc7d	08		php				php
.cc7e	20 d6 c6	jsr $c6d6			jsr Abs
.cc81	20 fa b7	jsr $b7fa			jsr Zero		; u>d  cvt u to ud
.cc84	4c 98 cc	jmp $cc98			jmp fmt_dr3
=16					CL	.var *-XtPtr1
=$cc87					en = *	; remember here
>cc75	10					.byte CL	;wh_CodeLength
>cc87	44 2e 52			L1:	.text "D.R"	;  name of word as a string, ending at wh_NameLastChar
=52234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cc8a	43					.byte (("D.R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=23					LinkDisplacement = Nt0-WordListLink
>cc8b	10					.byte WordFlags	;wh_Flags
>cc8c	03					.byte 3	;wh_CodeLength
>cc8d	17					  .byte LinkDisplacement
=$cc8e					XtPtr1 ::= *
=52234					WordListLink ::= Nt0 ; remember the nt of this word for later
.cc8e	20 e5 b3	jsr $b3e5	D_Dot_R:	jsr PopA		; save field width
.cc91	48		pha		D_Dot_R_A:	pha
.cc92	b5 25		lda $25,x			lda DStack+1,x		; save sign
.cc94	08		php				php
.cc95	20 09 c7	jsr $c709			jsr DAbs
.cc98	20 ee ab	jsr $abee	fmt_dr3:	jsr Less_Number_Sign	; start formatted output
.cc9b	20 5d ac	jsr $ac5d			jsr Number_sign_s	; do all digits
.cc9e	28		plp				plp			; do the sign
.cc9f	20 77 ac	jsr $ac77			jsr Sign_P
.cca2	4c 5f cc	jmp $cc5f			jmp fmt_r
=23					CL	.var *-XtPtr1
=$cca5					en = *	; remember here
>cc8c	17					.byte CL	;wh_CodeLength
>cca5	3f				L1:	.text "?"	;  name of word as a string, ending at wh_NameLastChar
=52262					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cca6	e1					.byte (("?"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cca7	10					.byte WordFlags	;wh_Flags
>cca8	03					.byte 3	;wh_CodeLength
>cca9	1c					  .byte LinkDisplacement
=$ccaa					XtPtr1 ::= *
=52262					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccaa					Question:
.ccaa	20 ae ce	jsr $ceae			jsr Fetch
.ccad	4c e3 cb	jmp $cbe3			jmp Dot
=6					CL	.var *-XtPtr1
=$ccb0					en = *	; remember here
>cca8	06					.byte CL	;wh_CodeLength
>ccb0	32 44 75 70			L1:	.text "2Dup"	;  name of word as a string, ending at wh_NameLastChar
=52276					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccb4	04					.byte (("2Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>ccb5	40					.byte WordFlags	;wh_Flags
>ccb6	03					.byte 3	;wh_CodeLength
>ccb7	0e					  .byte LinkDisplacement
=$ccb8					XtPtr1 ::= *
=52276					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccb8					Two_Dup:
.ccb8	20 3d b4	jsr $b43d			jsr underflow_2
.ccbb	ca		dex				dex
.ccbc	ca		dex				dex
.ccbd	ca		dex				dex
.ccbe	ca		dex				dex
.ccbf	b5 28		lda $28,x			lda DStack+4,x	; TOS
.ccc1	95 24		sta $24,x			sta DStack+0,x
.ccc3	b5 29		lda $29,x			lda DStack+5,x
.ccc5	95 25		sta $25,x			sta DStack+1,x
.ccc7	b5 2a		lda $2a,x			lda DStack+6,x	; NOS
.ccc9	95 26		sta $26,x			sta DStack+2,x
.cccb	b5 2b		lda $2b,x			lda DStack+7,x
.cccd	95 27		sta $27,x			sta DStack+3,x
=23					CL	.var *-XtPtr1
=$cccf					en = *	; remember here
>ccb6	17					.byte CL	;wh_CodeLength
.cccf	60		rts				rts
>ccd0	54 75 63 6b			L1:	.text "Tuck"	;  name of word as a string, ending at wh_NameLastChar
=52308					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccd4	64					.byte (("Tuck"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccd5	40					.byte WordFlags	;wh_Flags
>ccd6	03					.byte 3	;wh_CodeLength
>ccd7	20					  .byte LinkDisplacement
=$ccd8					XtPtr1 ::= *
=52308					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccd8					Tuck:
.ccd8	20 3d b4	jsr $b43d			jsr underflow_2
.ccdb	ca		dex				dex
.ccdc	ca		dex				dex
.ccdd	b4 28		ldy $28,x			ldy DStack+4,x	; LSB
.ccdf	b5 26		lda $26,x			lda DStack+2,x
.cce1	95 28		sta $28,x			sta DStack+4,x
.cce3	94 26		sty $26,x			sty DStack+2,x
.cce5	95 24		sta $24,x			sta DStack+0,x
.cce7	b4 29		ldy $29,x			ldy DStack+5,x	; MSB
.cce9	b5 27		lda $27,x			lda DStack+3,x
.cceb	95 29		sta $29,x			sta DStack+5,x
.cced	94 27		sty $27,x			sty DStack+3,x
.ccef	95 25		sta $25,x			sta DStack+1,x
=25					CL	.var *-XtPtr1
=$ccf1					en = *	; remember here
>ccd6	19					.byte CL	;wh_CodeLength
.ccf1	60		rts				rts
>ccf2	43 2c				L1:	.text "C,"	;  name of word as a string, ending at wh_NameLastChar
=52340					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ccf4	82					.byte (("C,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>ccf5	10					.byte WordFlags	;wh_Flags
>ccf6	03					.byte 3	;wh_CodeLength
>ccf7	20					  .byte LinkDisplacement
=$ccf8					XtPtr1 ::= *
=52340					WordListLink ::= Nt0 ; remember the nt of this word for later
.ccf8	20 e5 b3	jsr $b3e5	C_Comma:	jsr PopA	; pop c, with underflow check
.ccfb					C_Comma_A:
.ccfb	ca		dex				dex
.ccfc	94 24		sty $24,x			sty DStack+0,x	; save Y
.ccfe	a0 00		ldy #$00			ldy #0		; store A
.cd00	91 00		sta ($00),y			sta (cp),y
.cd02	e6 00		inc $00				inc cp+0	; increment cp
.cd04	d0 02		bne $cd08			bne +
.cd06	e6 01		inc $01				inc cp+1
.cd08					+
.cd08	b4 24		ldy $24,x			ldy DStack+0,x	; restore Y
.cd0a	e8		inx				inx
=19					CL	.var *-XtPtr1
=$cd0b					en = *	; remember here
>ccf6	13					.byte CL	;wh_CodeLength
.cd0b	60		rts				rts
>cd0c	2c				L1:	.text ","	;  name of word as a string, ending at wh_NameLastChar
=52365					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd0d	81					.byte ((","[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd0e	10					.byte WordFlags	;wh_Flags
>cd0f	03					.byte 3	;wh_CodeLength
>cd10	19					  .byte LinkDisplacement
=$cd11					XtPtr1 ::= *
=52365					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd11	20 00 b4	jsr $b400	Comma:		jsr PopYA	; pop n, with underflow check
.cd14					Comma_YA:
.cd14	20 fb cc	jsr $ccfb			jsr C_Comma_A	; compile LSB
.cd17	98		tya				tya		; compile MSB
.cd18	4c fb cc	jmp $ccfb			jmp C_Comma_A
=10					CL	.var *-XtPtr1
=$cd1b					en = *	; remember here
>cd0f	0a					.byte CL	;wh_CodeLength
>cd1b	32 2c				L1:	.text "2,"	;  name of word as a string, ending at wh_NameLastChar
=52381					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd1d	82					.byte (("2,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cd1e	10					.byte WordFlags	;wh_Flags
>cd1f	03					.byte 3	;wh_CodeLength
>cd20	10					  .byte LinkDisplacement
=$cd21					XtPtr1 ::= *
=52381					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd21	20 11 cd	jsr $cd11	Two_Comma:	jsr Comma
.cd24	4c 11 cd	jmp $cd11			jmp Comma
=6					CL	.var *-XtPtr1
=$cd27					en = *	; remember here
>cd1f	06					.byte CL	;wh_CodeLength
.cd27	a9 e8		lda #$e8	Drop_Comma:	lda #$e8	;inx
.cd29	a8		tay				tay
.cd2a	d0 e8		bne $cd14			bne Comma_YA
>cd2c	4a 73 72 2c			L1:	.text "Jsr,"	;  name of word as a string, ending at wh_NameLastChar
=52400					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd30	84					.byte (("Jsr,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd31	10					.byte WordFlags	;wh_Flags
>cd32	03					.byte 3	;wh_CodeLength
>cd33	13					  .byte LinkDisplacement
=$cd34					XtPtr1 ::= *
=52400					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd34	20 00 b4	jsr $b400	Jsr_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd37	20 bd b7	jsr $b7bd	Jsr_Comma_YA:	jsr PushYA	; push addr
.cd3a	a9 20		lda #$20			lda #$20	; JSR abs opcode
.cd3c	20 fb cc	jsr $ccfb	Jsr_Comma_3:	jsr C_Comma_A
.cd3f	4c 11 cd	jmp $cd11			jmp Comma	; compile addr
=14					CL	.var *-XtPtr1
=$cd42					en = *	; remember here
>cd32	0e					.byte CL	;wh_CodeLength
>cd42	4a 6d 70 2c			L1:	.text "Jmp,"	;  name of word as a string, ending at wh_NameLastChar
=52422					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd46	84					.byte (("Jmp,"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cd47	10					.byte WordFlags	;wh_Flags
>cd48	03					.byte 3	;wh_CodeLength
>cd49	16					  .byte LinkDisplacement
=$cd4a					XtPtr1 ::= *
=52422					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd4a	20 00 b4	jsr $b400	Jmp_Comma:	jsr PopYA	; pop addr (optimize can skip)
.cd4d	20 bd b7	jsr $b7bd	Jmp_Comma_YA:	jsr PushYA	; push addr
.cd50	a9 4c		lda #$4c			lda #$4c	; JMP abs opcode
.cd52	d0 e8		bne $cd3c			bne Jsr_Comma_3
.cd54					Jmp_Comma_NT_YA:
.cd54	20 bd b7	jsr $b7bd			jsr PushYA
.cd57	20 b1 bd	jsr $bdb1			jsr Name_To_Int	; convert nt to xt
.cd5a	4c 4a cd	jmp $cd4a			jmp Jmp_Comma
=19					CL	.var *-XtPtr1
=$cd5d					en = *	; remember here
>cd48	13					.byte CL	;wh_CodeLength
>cd5d	43 40				L1:	.text "C@"	;  name of word as a string, ending at wh_NameLastChar
=52447					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd5f	02					.byte (("C@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cd60	40					.byte WordFlags	;wh_Flags
>cd61	03					.byte 3	;wh_CodeLength
>cd62	19					  .byte LinkDisplacement
=$cd63					XtPtr1 ::= *
=52447					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd63	20 29 b4	jsr $b429	C_Fetch:	jsr underflow_1
.cd66	a1 24		lda ($24,x)			lda (DStack+0,x)
.cd68	95 24		sta $24,x			sta DStack+0,x
.cd6a	a9 00		lda #$00			lda #0
.cd6c	95 25		sta $25,x			sta DStack+1,x	; zero MSB
=11					CL	.var *-XtPtr1
=$cd6e					en = *	; remember here
>cd61	0b					.byte CL	;wh_CodeLength
.cd6e	60		rts				rts
>cd6f	43 21				L1:	.text "C!"	;  name of word as a string, ending at wh_NameLastChar
=52465					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd71	22					.byte (("C!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cd72	40					.byte WordFlags	;wh_Flags
>cd73	03					.byte 3	;wh_CodeLength
>cd74	12					  .byte LinkDisplacement
=$cd75					XtPtr1 ::= *
=52465					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd75	20 3d b4	jsr $b43d	C_Store:	jsr underflow_2
.cd78	b5 26		lda $26,x			lda DStack+2,x
.cd7a	81 24		sta ($24,x)			sta (DStack+0,x)
.cd7c	e8		inx				inx
.cd7d	e8		inx				inx
.cd7e	e8		inx				inx
.cd7f	e8		inx				inx
=11					CL	.var *-XtPtr1
=$cd80					en = *	; remember here
>cd73	0b					.byte CL	;wh_CodeLength
.cd80	60		rts				rts
>cd81	31 2b 21			L1:	.text "1+!"	;  name of word as a string, ending at wh_NameLastChar
=52484					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cd84	23					.byte (("1+!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>cd85	00					.byte WordFlags	;wh_Flags
>cd86	03					.byte 3	;wh_CodeLength
>cd87	13					  .byte LinkDisplacement
=$cd88					XtPtr1 ::= *
=52484					WordListLink ::= Nt0 ; remember the nt of this word for later
.cd88					OnePlusStore:
.cd88	a9 01		lda #$01			lda #1
.cd8a	18		clc				clc
.cd8b	61 24		adc ($24,x)			adc (DStack+0,x)	; increment lo byte
.cd8d	81 24		sta ($24,x)			sta (DStack+0,x)
.cd8f	90 0c		bcc $cd9d			bcc _7			; if carry
.cd91	f6 24		inc $24,x			inc DStack+0,x		;   point at hi byte
.cd93	d0 02		bne $cd97			bne +
.cd95	f6 25		inc $25,x			inc DStack+1,x
.cd97					+
.cd97	a1 24		lda ($24,x)			lda (DStack+0,x)	;   increment hi byte
.cd99	69 00		adc #$00			adc #0
.cd9b	81 24		sta ($24,x)			sta (Dstack+0,x)
.cd9d					_7:
.cd9d	e8		inx				inx			; Drop addr
.cd9e	e8		inx				inx
=23					CL	.var *-XtPtr1
=$cd9f					en = *	; remember here
>cd86	17					.byte CL	;wh_CodeLength
.cd9f	60		rts				rts
>cda0	2b 21				L1:	.text "+!"	;  name of word as a string, ending at wh_NameLastChar
=52514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cda2	22					.byte (("+!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cda3	50					.byte WordFlags	;wh_Flags
>cda4	03					.byte 3	;wh_CodeLength
>cda5	1e					  .byte LinkDisplacement
=$cda6					XtPtr1 ::= *
=52514					WordListLink ::= Nt0 ; remember the nt of this word for later
.cda6					Plus_store:
.cda6	20 3d b4	jsr $b43d			jsr underflow_2
.cda9	18		clc				clc
.cdaa	b5 26		lda $26,x			lda DStack+2,x
.cdac	61 24		adc ($24,x)			adc (DStack+0,x)
.cdae	81 24		sta ($24,x)			sta (DStack+0,x)
.cdb0	f6 24		inc $24,x			inc DStack+0,x
.cdb2	d0 02		bne $cdb6			bne +
.cdb4	f6 25		inc $25,x			inc DStack+1,x
.cdb6					+
.cdb6	b5 27		lda $27,x			lda DStack+3,x
.cdb8	61 24		adc ($24,x)			adc (DStack+0,x)
.cdba	81 24		sta ($24,x)			sta (DStack+0,x)
.cdbc	4c 4a c5	jmp $c54a			jmp Two_Drop
=25					CL	.var *-XtPtr1
=$cdbf					en = *	; remember here
>cda4	19					.byte CL	;wh_CodeLength
>cdbf	42 65 6c 6c			L1:	.text "Bell"	;  name of word as a string, ending at wh_NameLastChar
=52547					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdc3	84					.byte (("Bell"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>cdc4	10					.byte WordFlags	;wh_Flags
>cdc5	03					.byte 3	;wh_CodeLength
>cdc6	21					  .byte LinkDisplacement
=$cdc7					XtPtr1 ::= *
=52547					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdc7	a9 07		lda #$07	Bell:		lda #7		; ASCII value for BELL
.cdc9	d0 0b		bne $cdd6			bne Emit_A
=4					CL	.var *-XtPtr1
=$cdcb					en = *	; remember here
>cdc5	04					.byte CL	;wh_CodeLength
>cdcb	45 6d 69 74			L1:	.text "Emit"	;  name of word as a string, ending at wh_NameLastChar
=52559					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdcf	84					.byte (("Emit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdd0	10					.byte WordFlags	;wh_Flags
>cdd1	03					.byte 3	;wh_CodeLength
>cdd2	0c					  .byte LinkDisplacement
=$cdd3					XtPtr1 ::= *
=52559					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdd3	20 e5 b3	jsr $b3e5	Emit:		jsr PopA		; pop char, with underflow check
.cdd6					Emit_A:
.cdd6	6c 06 03	jmp ($0306)			jmp (output)		; JSR/RTS
=6					CL	.var *-XtPtr1
=$cdd9					en = *	; remember here
>cdd1	06					.byte CL	;wh_CodeLength
>cdd9	53 70 61 63 65			L1:	.text "Space"	;  name of word as a string, ending at wh_NameLastChar
=52574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdde	a5					.byte (("Space"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>cddf	10					.byte WordFlags	;wh_Flags
>cde0	03					.byte 3	;wh_CodeLength
>cde1	0f					  .byte LinkDisplacement
=$cde2					XtPtr1 ::= *
=52574					WordListLink ::= Nt0 ; remember the nt of this word for later
.cde2	a9 20		lda #$20	Space:		lda #AscSP
.cde4	d0 f0		bne $cdd6			bne Emit_A
=4					CL	.var *-XtPtr1
=$cde6					en = *	; remember here
>cde0	04					.byte CL	;wh_CodeLength
>cde6	54 79 70 65			L1:	.text "Type"	;  name of word as a string, ending at wh_NameLastChar
=52586					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cdea	a4					.byte (("Type"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cdeb	50					.byte WordFlags	;wh_Flags
>cdec	03					.byte 3	;wh_CodeLength
>cded	0c					  .byte LinkDisplacement
=$cdee					XtPtr1 ::= *
=52586					WordListLink ::= Nt0 ; remember the nt of this word for later
.cdee					Type:
.cdee	20 3d b4	jsr $b43d			jsr underflow_2
.cdf1	4c fe cd	jmp $cdfe			jmp _test
.cdf4					_loop:
.cdf4	d6 24		dec $24,x			dec DStack+0,x		; finish length decrement
.cdf6	a1 26		lda ($26,x)			lda (DStack+2,x)	; Send the current character
.cdf8	20 d6 cd	jsr $cdd6			jsr Emit_A
.cdfb	20 78 ca	jsr $ca78			jsr NOS_One_Plus	; increment address
.cdfe	b5 24		lda $24,x	_test:		lda DStack+0,x		; decrement length & test for <0
.ce00	d0 f2		bne $cdf4			bne _loop
.ce02	d6 25		dec $25,x			dec DStack+1,x
.ce04	10 ee		bpl $cdf4			bpl _loop
.ce06	4c 4a c5	jmp $c54a			jmp Two_drop
=27					CL	.var *-XtPtr1
=$ce09					en = *	; remember here
>cdec	1b					.byte CL	;wh_CodeLength
.ce09					Print_ASCIIZ_YA_no_lf:
.ce09	85 18		sta $18				sta tmp3+0		; save string address
.ce0b	84 19		sty $19				sty tmp3+1
.ce0d	a0 00		ldy #$00			ldy #0
.ce0f					Print_ASCIIZ_tmp3_no_lf:
.ce0f	b1 18		lda ($18),y			lda (tmp3),y
.ce11	f0 06		beq $ce19			beq _done		; end of string?
.ce13	20 d6 cd	jsr $cdd6			jsr emit_a
.ce16	c8		iny				iny
.ce17	d0 f6		bne $ce0f			bne Print_ASCIIZ_tmp3_no_lf
.ce19					_done:
.ce19	60		rts				rts
.ce1a					Print_ASCIIZ_YA:
.ce1a	20 09 ce	jsr $ce09			jsr Print_ASCIIZ_YA_no_lf
.ce1d	4c 75 ab	jmp $ab75	                jmp CR
>ce20	45 78 65 63 75 74 65		L1:	.text "Execute"	;  name of word as a string, ending at wh_NameLastChar
=52647					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce27	a7					.byte (("Execute"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=61					LinkDisplacement = Nt0-WordListLink
>ce28	10					.byte WordFlags	;wh_Flags
>ce29	03					.byte 3	;wh_CodeLength
>ce2a	3d					  .byte LinkDisplacement
=$ce2b					XtPtr1 ::= *
=52647					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce2b					Execute:
.ce2b	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ce2d	b0 2e		bcs $ce5d		bcs Throw_Stack_03
.ce2f	b5 25		lda $25,x			lda DStack+1,x	; addr for RTI
.ce31	48		pha				pha
.ce32	b5 24		lda $24,x			lda DStack+0,x
.ce34	48		pha				pha
.ce35	e8		inx				inx		; drop addr
.ce36	e8		inx				inx
.ce37	08		php				php		; flags for RTI
.ce38	40		rti				rti
=14					CL	.var *-XtPtr1
=$ce39					en = *	; remember here
>ce29	0e					.byte CL	;wh_CodeLength
>ce39	32 52 6f 74			L1:	.text "2Rot"	;  name of word as a string, ending at wh_NameLastChar
=52669					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce3d	84					.byte (("2Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>ce3e	10					.byte WordFlags	;wh_Flags
>ce3f	03					.byte 3	;wh_CodeLength
>ce40	16					  .byte LinkDisplacement
=$ce41					XtPtr1 ::= *
=52669					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce41					TwoRot:
.ce41	e0 1d		cpx #$1d		cpx #-2*6+DStack0+1
.ce43	b0 18		bcs $ce5d		bcs Throw_Stack_03
.ce45	86 14		stx $14				stx tmp1+0
.ce47	e8		inx				inx		; do 4 times
.ce48	e8		inx				inx
.ce49	e8		inx				inx
.ce4a	e8		inx				inx
.ce4b	ca		dex		-		dex
.ce4c	b4 2c		ldy $2c,x			ldy DStack+8,x	; do a byte
.ce4e	b5 28		lda $28,x			lda DStack+4,x
.ce50	95 2c		sta $2c,x			sta DStack+8,x
.ce52	b5 24		lda $24,x			lda DStack+0,x
.ce54	95 28		sta $28,x			sta DStack+4,x
.ce56	94 24		sty $24,x			sty DStack+0,x
.ce58	e4 14		cpx $14				cpx tmp1+0
.ce5a	d0 ef		bne $ce4b			bne -
=27					CL	.var *-XtPtr1
=$ce5c					en = *	; remember here
>ce3f	1b					.byte CL	;wh_CodeLength
.ce5c	60		rts				rts
.ce5d	4c 4c b4	jmp $b44c	Throw_Stack_03: jmp Throw_Stack
>ce60	52 6f 74			L1:	.text "Rot"	;  name of word as a string, ending at wh_NameLastChar
=52707					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce63	83					.byte (("Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=38					LinkDisplacement = Nt0-WordListLink
>ce64	10					.byte WordFlags	;wh_Flags
>ce65	03					.byte 3	;wh_CodeLength
>ce66	26					  .byte LinkDisplacement
=$ce67					XtPtr1 ::= *
=52707					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce67					Rot:
.ce67	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce69	b0 f2		bcs $ce5d		bcs Throw_Stack_03
.ce6b	b4 29		ldy $29,x			ldy DStack+5,x	; do MSB
.ce6d	b5 27		lda $27,x			lda DStack+3,x
.ce6f	95 29		sta $29,x			sta DStack+5,x
.ce71	b5 25		lda $25,x			lda DStack+1,x
.ce73	95 27		sta $27,x			sta DStack+3,x
.ce75	94 25		sty $25,x			sty DStack+1,x
.ce77	b4 28		ldy $28,x			ldy DStack+4,x	; do LSB
.ce79	b5 26		lda $26,x			lda DStack+2,x
.ce7b	95 28		sta $28,x			sta DStack+4,x
.ce7d	b5 24		lda $24,x			lda DStack+0,x
.ce7f	95 26		sta $26,x			sta DStack+2,x
.ce81	94 24		sty $24,x			sty DStack+0,x
=28					CL	.var *-XtPtr1
=$ce83					en = *	; remember here
>ce65	1c					.byte CL	;wh_CodeLength
.ce83	60		rts				rts
>ce84	2d 52 6f 74			L1:	.text "-Rot"	;  name of word as a string, ending at wh_NameLastChar
=52744					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ce88	84					.byte (("-Rot"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=37					LinkDisplacement = Nt0-WordListLink
>ce89	10					.byte WordFlags	;wh_Flags
>ce8a	03					.byte 3	;wh_CodeLength
>ce8b	25					  .byte LinkDisplacement
=$ce8c					XtPtr1 ::= *
=52744					WordListLink ::= Nt0 ; remember the nt of this word for later
.ce8c					Not_Rot:
.ce8c	e0 23		cpx #$23		cpx #-2*3+DStack0+1
.ce8e	b0 cd		bcs $ce5d		bcs Throw_Stack_03
.ce90	b4 25		ldy $25,x			ldy DStack+1,x	; do MSB
.ce92	b5 27		lda $27,x			lda DStack+3,x
.ce94	95 25		sta $25,x			sta DStack+1,x
.ce96	b5 29		lda $29,x			lda DStack+5,x
.ce98	95 27		sta $27,x			sta DStack+3,x
.ce9a	94 29		sty $29,x			sty DStack+5,x
.ce9c	b4 24		ldy $24,x			ldy DStack+0,x	; do LSB
.ce9e	b5 26		lda $26,x			lda DStack+2,x
.cea0	95 24		sta $24,x			sta DStack+0,x
.cea2	b5 28		lda $28,x			lda DStack+4,x
.cea4	95 26		sta $26,x			sta DStack+2,x
.cea6	94 28		sty $28,x			sty DStack+4,x
=28					CL	.var *-XtPtr1
=$cea8					en = *	; remember here
>ce8a	1c					.byte CL	;wh_CodeLength
.cea8	60		rts				rts
>cea9	40				L1:	.text "@"	;  name of word as a string, ending at wh_NameLastChar
=52778					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>ceaa	01					.byte (("@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=34					LinkDisplacement = Nt0-WordListLink
>ceab	10					.byte WordFlags	;wh_Flags
>ceac	03					.byte 3	;wh_CodeLength
>cead	22					  .byte LinkDisplacement
=$ceae					XtPtr1 ::= *
=52778					WordListLink ::= Nt0 ; remember the nt of this word for later
.ceae					Fetch:
.ceae	e0 27		cpx #$27		cpx #-2*1+DStack0+1
.ceb0	b0 ab		bcs $ce5d		bcs Throw_Stack_03
.ceb2	a1 24		lda ($24,x)			lda (DStack+0,x)		; LSB
.ceb4	a8		tay				tay
.ceb5	f6 24		inc $24,x			inc DStack+0,x
.ceb7	d0 02		bne $cebb			bne +
.ceb9	f6 25		inc $25,x			inc DStack+1,x
.cebb					+
.cebb	a1 24		lda ($24,x)			lda (DStack+0,x)		; MSB
.cebd	95 25		sta $25,x			sta DStack+1,x
.cebf	94 24		sty $24,x			sty DStack+0,x
=19					CL	.var *-XtPtr1
=$cec1					en = *	; remember here
>ceac	13					.byte CL	;wh_CodeLength
.cec1	60		rts				rts
>cec2	21				L1:	.text "!"	;  name of word as a string, ending at wh_NameLastChar
=52803					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cec3	21					.byte (("!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=25					LinkDisplacement = Nt0-WordListLink
>cec4	10					.byte WordFlags	;wh_Flags
>cec5	03					.byte 3	;wh_CodeLength
>cec6	19					  .byte LinkDisplacement
=$cec7					XtPtr1 ::= *
=52803					WordListLink ::= Nt0 ; remember the nt of this word for later
.cec7					Store:
.cec7	e0 25		cpx #$25		cpx #-2*2+DStack0+1
.cec9	b0 92		bcs $ce5d		bcs Throw_Stack_03
.cecb	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cecd	81 24		sta ($24,x)			sta (DStack+0,x)
.cecf	f6 24		inc $24,x			inc DStack+0,x
.ced1	d0 02		bne $ced5			bne +
.ced3	f6 25		inc $25,x			inc DStack+1,x
.ced5					+
.ced5	b5 27		lda $27,x			lda DStack+3,x	; MSB
.ced7	81 24		sta ($24,x)			sta (DStack+0,x)
.ced9	e8		inx				inx		; 2Drop
.ceda	e8		inx				inx
.cedb	e8		inx				inx
.cedc	e8		inx				inx
=22					CL	.var *-XtPtr1
=$cedd					en = *	; remember here
>cec5	16					.byte CL	;wh_CodeLength
.cedd	60		rts				rts
>cede	30 21				L1:	.text "0!"	;  name of word as a string, ending at wh_NameLastChar
=52832					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cee0	22					.byte (("0!"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=0					WordFlags ::= 0	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cee1	00					.byte WordFlags	;wh_Flags
>cee2	03					.byte 3	;wh_CodeLength
>cee3	1d					  .byte LinkDisplacement
=$cee4					XtPtr1 ::= *
=52832					WordListLink ::= Nt0 ; remember the nt of this word for later
.cee4	20 0b b4	jsr $b40b	ZStore:		jsr PopTmp1	; pop addr, check underflow
.cee7	a9 00		lda #$00			lda #0
.cee9	a8		tay				tay		; clear LSB
.ceea	91 14		sta ($14),y			sta (tmp1),y
.ceec	c8		iny				iny		; clear MSB
.ceed	91 14		sta ($14),y			sta (tmp1),y
=11					CL	.var *-XtPtr1
=$ceef					en = *	; remember here
>cee2	0b					.byte CL	;wh_CodeLength
.ceef	60		rts				rts
>cef0	3e 52				L1:	.text ">R"	;  name of word as a string, ending at wh_NameLastChar
=52850					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cef2	42					.byte ((">R"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=18					LinkDisplacement = Nt0-WordListLink
>cef3	34					.byte WordFlags	;wh_Flags
>cef4	03					.byte 3	;wh_CodeLength
>cef5	12					  .byte LinkDisplacement
=$cef6					XtPtr1 ::= *
=52850					WordListLink ::= Nt0 ; remember the nt of this word for later
.cef6					To_R:
.cef6	68		pla				pla		; move the RTS address out of the way
.cef7	85 1c		sta $1c				sta tmp5+0
.cef9	68		pla				pla
.cefa	85 1d		sta $1d				sta tmp5+1
.cefc	20 29 b4	jsr $b429			jsr underflow_1
.ceff	b5 25		lda $25,x			lda DStack+1,x	; MSB
.cf01	48		pha				pha
.cf02	b5 24		lda $24,x			lda DStack+0,x	; LSB
.cf04	48		pha				pha
.cf05	e8		inx				inx
.cf06	e8		inx				inx
.cf07	a5 1d		lda $1d				lda tmp5+1	; move the RTS address back in
.cf09	48		pha				pha
.cf0a	a5 1c		lda $1c				lda tmp5+0
.cf0c	48		pha				pha
=23					CL	.var *-XtPtr1
=$cf0d					en = *	; remember here
>cef4	17					.byte CL	;wh_CodeLength
.cf0d	60		rts				rts
>cf0e	52 3e				L1:	.text "R>"	;  name of word as a string, ending at wh_NameLastChar
=52880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf10	c2					.byte (("R>"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=52					WordFlags ::= CO+ST	; modifyable copy, remember for later
=30					LinkDisplacement = Nt0-WordListLink
>cf11	34					.byte WordFlags	;wh_Flags
>cf12	03					.byte 3	;wh_CodeLength
>cf13	1e					  .byte LinkDisplacement
=$cf14					XtPtr1 ::= *
=52880					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf14					R_From:
.cf14	68		pla				pla		; Move the RTS addr out of the way
.cf15	85 1c		sta $1c				sta tmp5+0
.cf17	68		pla				pla
.cf18	85 1d		sta $1d				sta tmp5+1
.cf1a	ca		dex				dex
.cf1b	ca		dex				dex
.cf1c	68		pla				pla		; LSB
.cf1d	95 24		sta $24,x			sta DStack+0,x
.cf1f	68		pla				pla		; MSB
.cf20	95 25		sta $25,x			sta DStack+1,x
.cf22	a5 1d		lda $1d				lda tmp5+1	; Restore the RTS addr
.cf24	48		pha				pha
.cf25	a5 1c		lda $1c				lda tmp5+0
.cf27	48		pha				pha
=20					CL	.var *-XtPtr1
=$cf28					en = *	; remember here
>cf12	14					.byte CL	;wh_CodeLength
.cf28	60		rts				rts
>cf29	52 40				L1:	.text "R@"	;  name of word as a string, ending at wh_NameLastChar
=52907					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf2b	02					.byte (("R@"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=20					WordFlags ::= NN+CO	; modifyable copy, remember for later
=27					LinkDisplacement = Nt0-WordListLink
>cf2c	14					.byte WordFlags	;wh_Flags
>cf2d	03					.byte 3	;wh_CodeLength
>cf2e	1b					  .byte LinkDisplacement
=$cf2f					XtPtr1 ::= *
=52907					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf2f					R_Fetch:
.cf2f	86 14		stx $14				stx tmp1	; save data stack index
.cf31	ba		tsx				tsx		; X= return stack index
.cf32	bd 03 01	lda $0103,x			lda RStack+3,x
.cf35	bc 04 01	ldy $0104,x			ldy RStack+4,x
.cf38	a6 14		ldx $14				ldx tmp1	; restore data stack index
.cf3a	4c bd b7	jmp $b7bd			jmp PushYA
=14					CL	.var *-XtPtr1
=$cf3d					en = *	; remember here
>cf2d	0e					.byte CL	;wh_CodeLength
>cf3d	4f 76 65 72			L1:	.text "Over"	;  name of word as a string, ending at wh_NameLastChar
=52929					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf41	44					.byte (("Over"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf42	40					.byte WordFlags	;wh_Flags
>cf43	03					.byte 3	;wh_CodeLength
>cf44	16					  .byte LinkDisplacement
=$cf45					XtPtr1 ::= *
=52929					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf45					Over:
.cf45	20 3d b4	jsr $b43d			jsr underflow_2
.cf48	b5 26		lda $26,x			lda DStack+2,x	; LSB
.cf4a	b4 27		ldy $27,x			ldy DStack+3,x	; MSB
.cf4c	ca		dex				dex		; PushYA
.cf4d	ca		dex				dex
.cf4e	95 24		sta $24,x			sta DStack+0,x
.cf50	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$cf52					en = *	; remember here
>cf43	0d					.byte CL	;wh_CodeLength
.cf52	60		rts				rts
>cf53	3f 44 75 70			L1:	.text "?Dup"	;  name of word as a string, ending at wh_NameLastChar
=52951					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf57	04					.byte (("?Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=80					WordFlags ::= UF+NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cf58	50					.byte WordFlags	;wh_Flags
>cf59	03					.byte 3	;wh_CodeLength
>cf5a	16					  .byte LinkDisplacement
=$cf5b					XtPtr1 ::= *
=52951					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf5b					Question_Dup:
.cf5b	20 29 b4	jsr $b429			jsr underflow_1
.cf5e	b5 24		lda $24,x			lda DStack+0,x	; Check if TOS is zero
.cf60	15 25		ora $25,x			ora DStack+1,x
.cf62	d0 0b		bne $cf6f			bne Dup_NoUf
=9					CL	.var *-XtPtr1
=$cf64					en = *	; remember here
>cf59	09					.byte CL	;wh_CodeLength
.cf64	60		rts				rts
>cf65	44 75 70			L1:	.text "Dup"	;  name of word as a string, ending at wh_NameLastChar
=52968					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf68	03					.byte (("Dup"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=17					LinkDisplacement = Nt0-WordListLink
>cf69	40					.byte WordFlags	;wh_Flags
>cf6a	03					.byte 3	;wh_CodeLength
>cf6b	11					  .byte LinkDisplacement
=$cf6c					XtPtr1 ::= *
=52968					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf6c					Dup:
.cf6c	20 29 b4	jsr $b429			jsr underflow_1
.cf6f	b5 24		lda $24,x	Dup_NoUf:	lda DStack+0,x	; LSB
.cf71	b4 25		ldy $25,x			ldy DStack+1,x	; MSB
.cf73	ca		dex				dex
.cf74	ca		dex				dex
.cf75	95 24		sta $24,x			sta DStack+0,x
.cf77	94 25		sty $25,x			sty DStack+1,x
=13					CL	.var *-XtPtr1
=$cf79					en = *	; remember here
>cf6a	0d					.byte CL	;wh_CodeLength
.cf79	60		rts				rts
.cf7a					PushAY:
.cf7a	ca		dex				dex
.cf7b	ca		dex				dex
.cf7c	94 24		sty $24,x			sty DStack+0,x
.cf7e	95 25		sta $25,x			sta DStack+1,x
.cf80	60		rts				rts
>cf81	53 77 61 70			L1:	.text "Swap"	;  name of word as a string, ending at wh_NameLastChar
=52997					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cf85	04					.byte (("Swap"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=29					LinkDisplacement = Nt0-WordListLink
>cf86	40					.byte WordFlags	;wh_Flags
>cf87	03					.byte 3	;wh_CodeLength
>cf88	1d					  .byte LinkDisplacement
=$cf89					XtPtr1 ::= *
=52997					WordListLink ::= Nt0 ; remember the nt of this word for later
.cf89					Swap:
.cf89	20 3d b4	jsr $b43d			jsr underflow_2
.cf8c	b5 24		lda $24,x			lda DStack+0,x	; do LSB
.cf8e	b4 26		ldy $26,x			ldy DStack+2,x
.cf90	95 26		sta $26,x			sta DStack+2,x
.cf92	94 24		sty $24,x			sty DStack+0,x
.cf94	b5 25		lda $25,x			lda DStack+1,x	; do MSB
.cf96	b4 27		ldy $27,x			ldy DStack+3,x
.cf98	95 27		sta $27,x			sta DStack+3,x
.cf9a	94 25		sty $25,x			sty DStack+1,x
=19					CL	.var *-XtPtr1
=$cf9c					en = *	; remember here
>cf87	13					.byte CL	;wh_CodeLength
.cf9c	60		rts				rts
>cf9d	44 72 6f 70			L1:	.text "Drop"	;  name of word as a string, ending at wh_NameLastChar
=53025					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfa1	04					.byte (("Drop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$40					WordFlags ::= UF	; modifyable copy, remember for later
=28					LinkDisplacement = Nt0-WordListLink
>cfa2	40					.byte WordFlags	;wh_Flags
>cfa3	03					.byte 3	;wh_CodeLength
>cfa4	1c					  .byte LinkDisplacement
=$cfa5					XtPtr1 ::= *
=53025					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfa5					Drop:
.cfa5	20 29 b4	jsr $b429			jsr underflow_1
.cfa8	e8		inx				inx
.cfa9	e8		inx				inx
=5					CL	.var *-XtPtr1
=$cfaa					en = *	; remember here
>cfa3	05					.byte CL	;wh_CodeLength
.cfaa	60		rts				rts
=53025					forth_dictionary_start = WordListLink ; END of FORTH-WORDLIST
=0					WordListLink .var 0
>cfab	57 6f 72 64 73			L1:	.text "Words"	;  name of word as a string, ending at wh_NameLastChar
=53040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfb0	65					.byte (("Words"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53040					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>cfb1	11					.byte WordFlags	;wh_Flags
>cfb2	03					.byte 3	;wh_CodeLength
>cfb3	00 00					  .word WordListLink
=$cfb5					XtPtr1 ::= *
=53040					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfb5	4c c8 aa	jmp $aac8			jmp Words
=3					CL	.var *-XtPtr1
=$cfb8					en = *	; remember here
>cfb2	03					.byte CL	;wh_CodeLength
>cfb8	46 6f 72 74 68 2d 57 6f		L1:	.text "Forth-Wordlist"	;  name of word as a string, ending at wh_NameLastChar
>cfc0	72 64 6c 69 73 74
=53062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfc6	8e					.byte (("Forth-Wordlist"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>cfc7	10					.byte WordFlags	;wh_Flags
>cfc8	03					.byte 3	;wh_CodeLength
>cfc9	16					  .byte LinkDisplacement
=$cfca					XtPtr1 ::= *
=53062					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfca	4c ff 9f	jmp $9fff			jmp Forth_WordList
=3					CL	.var *-XtPtr1
=$cfcd					en = *	; remember here
>cfc8	03					.byte CL	;wh_CodeLength
>cfcd	46 6f 72 74 68			L1:	.text "Forth"	;  name of word as a string, ending at wh_NameLastChar
=53074					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfd2	05					.byte (("Forth"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>cfd3	10					.byte WordFlags	;wh_Flags
>cfd4	03					.byte 3	;wh_CodeLength
>cfd5	0c					  .byte LinkDisplacement
=$cfd6					XtPtr1 ::= *
=53074					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfd6	4c fd a0	jmp $a0fd			jmp Forth
=3					CL	.var *-XtPtr1
=$cfd9					en = *	; remember here
>cfd4	03					.byte CL	;wh_CodeLength
>cfd9	53 65 74 2d 4f 72 64 65		L1:	.text "Set-Order"	;  name of word as a string, ending at wh_NameLastChar
>cfe1	72
=53090					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>cfe2	49					.byte (("Set-Order"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=16					LinkDisplacement = Nt0-WordListLink
>cfe3	10					.byte WordFlags	;wh_Flags
>cfe4	03					.byte 3	;wh_CodeLength
>cfe5	10					  .byte LinkDisplacement
=$cfe6					XtPtr1 ::= *
=53090					WordListLink ::= Nt0 ; remember the nt of this word for later
.cfe6	4c 6f a1	jmp $a16f			jmp Set_Order
=3					CL	.var *-XtPtr1
=$cfe9					en = *	; remember here
>cfe4	03					.byte CL	;wh_CodeLength
=53090					root_dictionary_start = WordListLink ; END of ROOT-WORDLIST
=0					WordListLink .var 0
.cfe9					asm_r:
.cfe9	68		pla			pla		; pop RTS addr
.cfea	a8		tay			tay
.cfeb	68		pla			pla
.cfec	20 2b d0	jsr $d02b		jsr asm_op	; compile opcode
.cfef	b5 25		lda $25,x		lda DStack+1,x	; check range
.cff1	f0 09		beq $cffc		beq _plus
.cff3	c9 ff		cmp #$ff		cmp #$ff
.cff5	f0 0b		beq $d002		beq _minus
.cff7	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.cff9	4c 85 b4	jmp $b485		jmp ThrowA
.cffc	b5 24		lda $24,x	_plus:	lda DStack+0,x
.cffe	30 f7		bmi $cff7		bmi _err
.d000	10 04		bpl $d006		bpl _store
.d002	b5 24		lda $24,x	_minus:	lda DStack+0,x
.d004	10 f1		bpl $cff7		bpl _err
.d006	4c f8 cc	jmp $ccf8	_store:	jmp C_Comma
.d009					asm_1:
.d009	68		pla			pla		; pop RTS addr
.d00a	a8		tay			tay
.d00b	68		pla			pla
.d00c	20 2b d0	jsr $d02b		jsr asm_op	; compile opcode
.d00f	b5 25		lda $25,x		lda DStack+1,x	; compile operand
.d011	f0 04		beq $d017		beq _store	;   unsigned byte?
.d013	c9 ff		cmp #$ff		cmp #$ff	;   signed byte?
.d015	d0 03		bne $d01a		bne _err
.d017	4c f8 cc	jmp $ccf8	_store:	jmp C_Comma
.d01a	a9 f5		lda #$f5	_err:	lda #$100+err_OutOfRange
.d01c	4c 85 b4	jmp $b485		jmp ThrowA
.d01f					asm_2:
.d01f	68		pla			pla		; pop RTS addr
.d020	a8		tay			tay
.d021	68		pla			pla
.d022	20 2b d0	jsr $d02b		jsr asm_op	; compile opcode
.d025	4c 11 cd	jmp $cd11		jmp Comma	; compile operand
.d028					asm_0:
.d028	68		pla			pla		; pop RTS addr
.d029	a8		tay			tay
.d02a	68		pla			pla
.d02b	84 14		sty $14		asm_op:	sty tmp1+0	; save RTS addr
.d02d	85 15		sta $15			sta tmp1+1
.d02f	a0 01		ldy #$01		ldy #1		; get opcode byte
.d031	b1 14		lda ($14),y		lda (tmp1),y
.d033	4c fb cc	jmp $ccfb		jmp C_Comma_A	; compile opcode
>d036	61 64 63 2e 23			L1:	.text "adc.#"	;  name of word as a string, ending at wh_NameLastChar
=53179					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d03b	65					.byte (("adc.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=53179					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d03c	11					.byte WordFlags	;wh_Flags
>d03d	03					.byte 3	;wh_CodeLength
>d03e	00 00					  .word WordListLink
=$d040					XtPtr1 ::= *
=53179					WordListLink ::= Nt0 ; remember the nt of this word for later
.d040	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d043					en = *	; remember here
>d03d	03					.byte CL	;wh_CodeLength
>d043	69					.byte $69
>d044	61 64 63 2e 78			L1:	.text "adc.x"	;  name of word as a string, ending at wh_NameLastChar
=53193					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d049	05					.byte (("adc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d04a	10					.byte WordFlags	;wh_Flags
>d04b	03					.byte 3	;wh_CodeLength
>d04c	0e					  .byte LinkDisplacement
=$d04d					XtPtr1 ::= *
=53193					WordListLink ::= Nt0 ; remember the nt of this word for later
.d04d	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d050					en = *	; remember here
>d04b	03					.byte CL	;wh_CodeLength
>d050	7d					.byte $7d
>d051	61 64 63 2e 79			L1:	.text "adc.y"	;  name of word as a string, ending at wh_NameLastChar
=53206					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d056	25					.byte (("adc.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d057	10					.byte WordFlags	;wh_Flags
>d058	03					.byte 3	;wh_CodeLength
>d059	0d					  .byte LinkDisplacement
=$d05a					XtPtr1 ::= *
=53206					WordListLink ::= Nt0 ; remember the nt of this word for later
.d05a	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d05d					en = *	; remember here
>d058	03					.byte CL	;wh_CodeLength
>d05d	79					.byte $79
>d05e	61 64 63 2e 7a			L1:	.text "adc.z"	;  name of word as a string, ending at wh_NameLastChar
=53219					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d063	45					.byte (("adc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d064	10					.byte WordFlags	;wh_Flags
>d065	03					.byte 3	;wh_CodeLength
>d066	0d					  .byte LinkDisplacement
=$d067					XtPtr1 ::= *
=53219					WordListLink ::= Nt0 ; remember the nt of this word for later
.d067	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d06a					en = *	; remember here
>d065	03					.byte CL	;wh_CodeLength
>d06a	65					.byte $65
>d06b	61 64 63 2e 7a 69 79		L1:	.text "adc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53234					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d072	27					.byte (("adc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d073	10					.byte WordFlags	;wh_Flags
>d074	03					.byte 3	;wh_CodeLength
>d075	0f					  .byte LinkDisplacement
=$d076					XtPtr1 ::= *
=53234					WordListLink ::= Nt0 ; remember the nt of this word for later
.d076	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d079					en = *	; remember here
>d074	03					.byte CL	;wh_CodeLength
>d079	71					.byte $71
>d07a	61 64 63 2e 7a 78		L1:	.text "adc.zx"	;  name of word as a string, ending at wh_NameLastChar
=53248					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d080	06					.byte (("adc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d081	10					.byte WordFlags	;wh_Flags
>d082	03					.byte 3	;wh_CodeLength
>d083	0e					  .byte LinkDisplacement
=$d084					XtPtr1 ::= *
=53248					WordListLink ::= Nt0 ; remember the nt of this word for later
.d084	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d087					en = *	; remember here
>d082	03					.byte CL	;wh_CodeLength
>d087	75					.byte $75
>d088	61 64 63 2e 7a 78 69		L1:	.text "adc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53263					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d08f	27					.byte (("adc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d090	10					.byte WordFlags	;wh_Flags
>d091	03					.byte 3	;wh_CodeLength
>d092	0f					  .byte LinkDisplacement
=$d093					XtPtr1 ::= *
=53263					WordListLink ::= Nt0 ; remember the nt of this word for later
.d093	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d096					en = *	; remember here
>d091	03					.byte CL	;wh_CodeLength
>d096	61					.byte $61
>d097	61 6e 64 2e			L1:	.text "and."	;  name of word as a string, ending at wh_NameLastChar
=53275					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d09b	c4					.byte (("and."[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=12					LinkDisplacement = Nt0-WordListLink
>d09c	10					.byte WordFlags	;wh_Flags
>d09d	03					.byte 3	;wh_CodeLength
>d09e	0c					  .byte LinkDisplacement
=$d09f					XtPtr1 ::= *
=53275					WordListLink ::= Nt0 ; remember the nt of this word for later
.d09f	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d0a2					en = *	; remember here
>d09d	03					.byte CL	;wh_CodeLength
>d0a2	2d					.byte $2d
>d0a3	61 6e 64 2e 23			L1:	.text "and.#"	;  name of word as a string, ending at wh_NameLastChar
=53288					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0a8	65					.byte (("and.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0a9	10					.byte WordFlags	;wh_Flags
>d0aa	03					.byte 3	;wh_CodeLength
>d0ab	0d					  .byte LinkDisplacement
=$d0ac					XtPtr1 ::= *
=53288					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0ac	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0af					en = *	; remember here
>d0aa	03					.byte CL	;wh_CodeLength
>d0af	29					.byte $29
>d0b0	61 6e 64 2e 78			L1:	.text "and.x"	;  name of word as a string, ending at wh_NameLastChar
=53301					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0b5	05					.byte (("and.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0b6	10					.byte WordFlags	;wh_Flags
>d0b7	03					.byte 3	;wh_CodeLength
>d0b8	0d					  .byte LinkDisplacement
=$d0b9					XtPtr1 ::= *
=53301					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0b9	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d0bc					en = *	; remember here
>d0b7	03					.byte CL	;wh_CodeLength
>d0bc	3d					.byte $3d
>d0bd	61 6e 64 2e 79			L1:	.text "and.y"	;  name of word as a string, ending at wh_NameLastChar
=53314					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0c2	25					.byte (("and.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0c3	10					.byte WordFlags	;wh_Flags
>d0c4	03					.byte 3	;wh_CodeLength
>d0c5	0d					  .byte LinkDisplacement
=$d0c6					XtPtr1 ::= *
=53314					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0c6	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d0c9					en = *	; remember here
>d0c4	03					.byte CL	;wh_CodeLength
>d0c9	39					.byte $39
>d0ca	61 6e 64 2e 7a			L1:	.text "and.z"	;  name of word as a string, ending at wh_NameLastChar
=53327					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0cf	45					.byte (("and.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d0d0	10					.byte WordFlags	;wh_Flags
>d0d1	03					.byte 3	;wh_CodeLength
>d0d2	0d					  .byte LinkDisplacement
=$d0d3					XtPtr1 ::= *
=53327					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0d3	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0d6					en = *	; remember here
>d0d1	03					.byte CL	;wh_CodeLength
>d0d6	25					.byte $25
>d0d7	61 6e 64 2e 7a 69 79		L1:	.text "and.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53342					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0de	27					.byte (("and.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0df	10					.byte WordFlags	;wh_Flags
>d0e0	03					.byte 3	;wh_CodeLength
>d0e1	0f					  .byte LinkDisplacement
=$d0e2					XtPtr1 ::= *
=53342					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0e2	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0e5					en = *	; remember here
>d0e0	03					.byte CL	;wh_CodeLength
>d0e5	31					.byte $31
>d0e6	61 6e 64 2e 7a 78		L1:	.text "and.zx"	;  name of word as a string, ending at wh_NameLastChar
=53356					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0ec	06					.byte (("and.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d0ed	10					.byte WordFlags	;wh_Flags
>d0ee	03					.byte 3	;wh_CodeLength
>d0ef	0e					  .byte LinkDisplacement
=$d0f0					XtPtr1 ::= *
=53356					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0f0	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d0f3					en = *	; remember here
>d0ee	03					.byte CL	;wh_CodeLength
>d0f3	35					.byte $35
>d0f4	61 6e 64 2e 7a 78 69		L1:	.text "and.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53371					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d0fb	27					.byte (("and.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d0fc	10					.byte WordFlags	;wh_Flags
>d0fd	03					.byte 3	;wh_CodeLength
>d0fe	0f					  .byte LinkDisplacement
=$d0ff					XtPtr1 ::= *
=53371					WordListLink ::= Nt0 ; remember the nt of this word for later
.d0ff	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d102					en = *	; remember here
>d0fd	03					.byte CL	;wh_CodeLength
>d102	21					.byte $21
>d103	61 73 6c			L1:	.text "asl"	;  name of word as a string, ending at wh_NameLastChar
=53382					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d106	83					.byte (("asl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d107	10					.byte WordFlags	;wh_Flags
>d108	03					.byte 3	;wh_CodeLength
>d109	0b					  .byte LinkDisplacement
=$d10a					XtPtr1 ::= *
=53382					WordListLink ::= Nt0 ; remember the nt of this word for later
.d10a	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d10d					en = *	; remember here
>d108	03					.byte CL	;wh_CodeLength
>d10d	0e					.byte $0e
>d10e	61 73 6c 2e 61			L1:	.text "asl.a"	;  name of word as a string, ending at wh_NameLastChar
=53395					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d113	25					.byte (("asl.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d114	10					.byte WordFlags	;wh_Flags
>d115	03					.byte 3	;wh_CodeLength
>d116	0d					  .byte LinkDisplacement
=$d117					XtPtr1 ::= *
=53395					WordListLink ::= Nt0 ; remember the nt of this word for later
.d117	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d11a					en = *	; remember here
>d115	03					.byte CL	;wh_CodeLength
>d11a	0a					.byte $0a
>d11b	61 73 6c 2e 78			L1:	.text "asl.x"	;  name of word as a string, ending at wh_NameLastChar
=53408					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d120	05					.byte (("asl.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d121	10					.byte WordFlags	;wh_Flags
>d122	03					.byte 3	;wh_CodeLength
>d123	0d					  .byte LinkDisplacement
=$d124					XtPtr1 ::= *
=53408					WordListLink ::= Nt0 ; remember the nt of this word for later
.d124	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d127					en = *	; remember here
>d122	03					.byte CL	;wh_CodeLength
>d127	1e					.byte $1e
>d128	61 73 6c 2e 7a			L1:	.text "asl.z"	;  name of word as a string, ending at wh_NameLastChar
=53421					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d12d	45					.byte (("asl.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d12e	10					.byte WordFlags	;wh_Flags
>d12f	03					.byte 3	;wh_CodeLength
>d130	0d					  .byte LinkDisplacement
=$d131					XtPtr1 ::= *
=53421					WordListLink ::= Nt0 ; remember the nt of this word for later
.d131	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d134					en = *	; remember here
>d12f	03					.byte CL	;wh_CodeLength
>d134	06					.byte $06
>d135	61 73 6c 2e 7a 78		L1:	.text "asl.zx"	;  name of word as a string, ending at wh_NameLastChar
=53435					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d13b	06					.byte (("asl.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d13c	10					.byte WordFlags	;wh_Flags
>d13d	03					.byte 3	;wh_CodeLength
>d13e	0e					  .byte LinkDisplacement
=$d13f					XtPtr1 ::= *
=53435					WordListLink ::= Nt0 ; remember the nt of this word for later
.d13f	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d142					en = *	; remember here
>d13d	03					.byte CL	;wh_CodeLength
>d142	16					.byte $16
>d143	62 63 63			L1:	.text "bcc"	;  name of word as a string, ending at wh_NameLastChar
=53446					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d146	63					.byte (("bcc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d147	10					.byte WordFlags	;wh_Flags
>d148	03					.byte 3	;wh_CodeLength
>d149	0b					  .byte LinkDisplacement
=$d14a					XtPtr1 ::= *
=53446					WordListLink ::= Nt0 ; remember the nt of this word for later
.d14a	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d14d					en = *	; remember here
>d148	03					.byte CL	;wh_CodeLength
>d14d	90					.byte $90
>d14e	62 63 73			L1:	.text "bcs"	;  name of word as a string, ending at wh_NameLastChar
=53457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d151	63					.byte (("bcs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d152	10					.byte WordFlags	;wh_Flags
>d153	03					.byte 3	;wh_CodeLength
>d154	0b					  .byte LinkDisplacement
=$d155					XtPtr1 ::= *
=53457					WordListLink ::= Nt0 ; remember the nt of this word for later
.d155	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d158					en = *	; remember here
>d153	03					.byte CL	;wh_CodeLength
>d158	b0					.byte $b0
>d159	62 65 71			L1:	.text "beq"	;  name of word as a string, ending at wh_NameLastChar
=53468					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d15c	23					.byte (("beq"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d15d	10					.byte WordFlags	;wh_Flags
>d15e	03					.byte 3	;wh_CodeLength
>d15f	0b					  .byte LinkDisplacement
=$d160					XtPtr1 ::= *
=53468					WordListLink ::= Nt0 ; remember the nt of this word for later
.d160	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d163					en = *	; remember here
>d15e	03					.byte CL	;wh_CodeLength
>d163	f0					.byte $f0
>d164	62 69 74			L1:	.text "bit"	;  name of word as a string, ending at wh_NameLastChar
=53479					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d167	83					.byte (("bit"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d168	10					.byte WordFlags	;wh_Flags
>d169	03					.byte 3	;wh_CodeLength
>d16a	0b					  .byte LinkDisplacement
=$d16b					XtPtr1 ::= *
=53479					WordListLink ::= Nt0 ; remember the nt of this word for later
.d16b	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d16e					en = *	; remember here
>d169	03					.byte CL	;wh_CodeLength
>d16e	2c					.byte $2c
>d16f	62 69 74 2e 7a			L1:	.text "bit.z"	;  name of word as a string, ending at wh_NameLastChar
=53492					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d174	45					.byte (("bit.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d175	10					.byte WordFlags	;wh_Flags
>d176	03					.byte 3	;wh_CodeLength
>d177	0d					  .byte LinkDisplacement
=$d178					XtPtr1 ::= *
=53492					WordListLink ::= Nt0 ; remember the nt of this word for later
.d178	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d17b					en = *	; remember here
>d176	03					.byte CL	;wh_CodeLength
>d17b	24					.byte $24
>d17c	62 6d 69			L1:	.text "bmi"	;  name of word as a string, ending at wh_NameLastChar
=53503					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d17f	23					.byte (("bmi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d180	10					.byte WordFlags	;wh_Flags
>d181	03					.byte 3	;wh_CodeLength
>d182	0b					  .byte LinkDisplacement
=$d183					XtPtr1 ::= *
=53503					WordListLink ::= Nt0 ; remember the nt of this word for later
.d183	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d186					en = *	; remember here
>d181	03					.byte CL	;wh_CodeLength
>d186	30					.byte $30
>d187	62 6e 65			L1:	.text "bne"	;  name of word as a string, ending at wh_NameLastChar
=53514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d18a	a3					.byte (("bne"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d18b	10					.byte WordFlags	;wh_Flags
>d18c	03					.byte 3	;wh_CodeLength
>d18d	0b					  .byte LinkDisplacement
=$d18e					XtPtr1 ::= *
=53514					WordListLink ::= Nt0 ; remember the nt of this word for later
.d18e	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d191					en = *	; remember here
>d18c	03					.byte CL	;wh_CodeLength
>d191	d0					.byte $d0
>d192	62 70 6c			L1:	.text "bpl"	;  name of word as a string, ending at wh_NameLastChar
=53525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d195	83					.byte (("bpl"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d196	10					.byte WordFlags	;wh_Flags
>d197	03					.byte 3	;wh_CodeLength
>d198	0b					  .byte LinkDisplacement
=$d199					XtPtr1 ::= *
=53525					WordListLink ::= Nt0 ; remember the nt of this word for later
.d199	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d19c					en = *	; remember here
>d197	03					.byte CL	;wh_CodeLength
>d19c	10					.byte $10
>d19d	62 72 6b			L1:	.text "brk"	;  name of word as a string, ending at wh_NameLastChar
=53536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1a0	63					.byte (("brk"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1a1	10					.byte WordFlags	;wh_Flags
>d1a2	03					.byte 3	;wh_CodeLength
>d1a3	0b					  .byte LinkDisplacement
=$d1a4					XtPtr1 ::= *
=53536					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1a4	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d1a7					en = *	; remember here
>d1a2	03					.byte CL	;wh_CodeLength
>d1a7	00					.byte $00
>d1a8	62 76 63			L1:	.text "bvc"	;  name of word as a string, ending at wh_NameLastChar
=53547					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ab	63					.byte (("bvc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1ac	10					.byte WordFlags	;wh_Flags
>d1ad	03					.byte 3	;wh_CodeLength
>d1ae	0b					  .byte LinkDisplacement
=$d1af					XtPtr1 ::= *
=53547					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1af	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d1b2					en = *	; remember here
>d1ad	03					.byte CL	;wh_CodeLength
>d1b2	50					.byte $50
>d1b3	62 76 73			L1:	.text "bvs"	;  name of word as a string, ending at wh_NameLastChar
=53558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1b6	63					.byte (("bvs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1b7	10					.byte WordFlags	;wh_Flags
>d1b8	03					.byte 3	;wh_CodeLength
>d1b9	0b					  .byte LinkDisplacement
=$d1ba					XtPtr1 ::= *
=53558					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1ba	20 e9 cf	jsr $cfe9		jsr asm_r
=3					CL	.var *-XtPtr1
=$d1bd					en = *	; remember here
>d1b8	03					.byte CL	;wh_CodeLength
>d1bd	70					.byte $70
>d1be	63 6c 63			L1:	.text "clc"	;  name of word as a string, ending at wh_NameLastChar
=53569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1c1	63					.byte (("clc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1c2	10					.byte WordFlags	;wh_Flags
>d1c3	03					.byte 3	;wh_CodeLength
>d1c4	0b					  .byte LinkDisplacement
=$d1c5					XtPtr1 ::= *
=53569					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1c5	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1c8					en = *	; remember here
>d1c3	03					.byte CL	;wh_CodeLength
>d1c8	18					.byte $18
>d1c9	63 6c 64			L1:	.text "cld"	;  name of word as a string, ending at wh_NameLastChar
=53580					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1cc	83					.byte (("cld"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1cd	10					.byte WordFlags	;wh_Flags
>d1ce	03					.byte 3	;wh_CodeLength
>d1cf	0b					  .byte LinkDisplacement
=$d1d0					XtPtr1 ::= *
=53580					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1d0	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1d3					en = *	; remember here
>d1ce	03					.byte CL	;wh_CodeLength
>d1d3	d8					.byte $d8
>d1d4	63 6c 69			L1:	.text "cli"	;  name of word as a string, ending at wh_NameLastChar
=53591					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1d7	23					.byte (("cli"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1d8	10					.byte WordFlags	;wh_Flags
>d1d9	03					.byte 3	;wh_CodeLength
>d1da	0b					  .byte LinkDisplacement
=$d1db					XtPtr1 ::= *
=53591					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1db	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1de					en = *	; remember here
>d1d9	03					.byte CL	;wh_CodeLength
>d1de	58					.byte $58
>d1df	63 6c 76			L1:	.text "clv"	;  name of word as a string, ending at wh_NameLastChar
=53602					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1e2	c3					.byte (("clv"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1e3	10					.byte WordFlags	;wh_Flags
>d1e4	03					.byte 3	;wh_CodeLength
>d1e5	0b					  .byte LinkDisplacement
=$d1e6					XtPtr1 ::= *
=53602					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1e6	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d1e9					en = *	; remember here
>d1e4	03					.byte CL	;wh_CodeLength
>d1e9	b8					.byte $b8
>d1ea	63 6d 70			L1:	.text "cmp"	;  name of word as a string, ending at wh_NameLastChar
=53613					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1ed	03					.byte (("cmp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d1ee	10					.byte WordFlags	;wh_Flags
>d1ef	03					.byte 3	;wh_CodeLength
>d1f0	0b					  .byte LinkDisplacement
=$d1f1					XtPtr1 ::= *
=53613					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1f1	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d1f4					en = *	; remember here
>d1ef	03					.byte CL	;wh_CodeLength
>d1f4	cd					.byte $cd
>d1f5	63 6d 70 2e 23			L1:	.text "cmp.#"	;  name of word as a string, ending at wh_NameLastChar
=53626					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d1fa	65					.byte (("cmp.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d1fb	10					.byte WordFlags	;wh_Flags
>d1fc	03					.byte 3	;wh_CodeLength
>d1fd	0d					  .byte LinkDisplacement
=$d1fe					XtPtr1 ::= *
=53626					WordListLink ::= Nt0 ; remember the nt of this word for later
.d1fe	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d201					en = *	; remember here
>d1fc	03					.byte CL	;wh_CodeLength
>d201	c9					.byte $c9
>d202	63 6d 70 2e 78			L1:	.text "cmp.x"	;  name of word as a string, ending at wh_NameLastChar
=53639					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d207	05					.byte (("cmp.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d208	10					.byte WordFlags	;wh_Flags
>d209	03					.byte 3	;wh_CodeLength
>d20a	0d					  .byte LinkDisplacement
=$d20b					XtPtr1 ::= *
=53639					WordListLink ::= Nt0 ; remember the nt of this word for later
.d20b	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d20e					en = *	; remember here
>d209	03					.byte CL	;wh_CodeLength
>d20e	dd					.byte $dd
>d20f	63 6d 70 2e 79			L1:	.text "cmp.y"	;  name of word as a string, ending at wh_NameLastChar
=53652					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d214	25					.byte (("cmp.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d215	10					.byte WordFlags	;wh_Flags
>d216	03					.byte 3	;wh_CodeLength
>d217	0d					  .byte LinkDisplacement
=$d218					XtPtr1 ::= *
=53652					WordListLink ::= Nt0 ; remember the nt of this word for later
.d218	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d21b					en = *	; remember here
>d216	03					.byte CL	;wh_CodeLength
>d21b	d9					.byte $d9
>d21c	63 6d 70 2e 7a			L1:	.text "cmp.z"	;  name of word as a string, ending at wh_NameLastChar
=53665					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d221	45					.byte (("cmp.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d222	10					.byte WordFlags	;wh_Flags
>d223	03					.byte 3	;wh_CodeLength
>d224	0d					  .byte LinkDisplacement
=$d225					XtPtr1 ::= *
=53665					WordListLink ::= Nt0 ; remember the nt of this word for later
.d225	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d228					en = *	; remember here
>d223	03					.byte CL	;wh_CodeLength
>d228	c5					.byte $c5
>d229	63 6d 70 2e 7a 69 79		L1:	.text "cmp.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53680					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d230	27					.byte (("cmp.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d231	10					.byte WordFlags	;wh_Flags
>d232	03					.byte 3	;wh_CodeLength
>d233	0f					  .byte LinkDisplacement
=$d234					XtPtr1 ::= *
=53680					WordListLink ::= Nt0 ; remember the nt of this word for later
.d234	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d237					en = *	; remember here
>d232	03					.byte CL	;wh_CodeLength
>d237	d1					.byte $d1
>d238	63 6d 70 2e 7a 78		L1:	.text "cmp.zx"	;  name of word as a string, ending at wh_NameLastChar
=53694					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d23e	06					.byte (("cmp.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d23f	10					.byte WordFlags	;wh_Flags
>d240	03					.byte 3	;wh_CodeLength
>d241	0e					  .byte LinkDisplacement
=$d242					XtPtr1 ::= *
=53694					WordListLink ::= Nt0 ; remember the nt of this word for later
.d242	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d245					en = *	; remember here
>d240	03					.byte CL	;wh_CodeLength
>d245	d5					.byte $d5
>d246	63 6d 70 2e 7a 78 69		L1:	.text "cmp.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53709					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d24d	27					.byte (("cmp.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d24e	10					.byte WordFlags	;wh_Flags
>d24f	03					.byte 3	;wh_CodeLength
>d250	0f					  .byte LinkDisplacement
=$d251					XtPtr1 ::= *
=53709					WordListLink ::= Nt0 ; remember the nt of this word for later
.d251	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d254					en = *	; remember here
>d24f	03					.byte CL	;wh_CodeLength
>d254	c1					.byte $c1
>d255	63 70 78			L1:	.text "cpx"	;  name of word as a string, ending at wh_NameLastChar
=53720					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d258	03					.byte (("cpx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d259	10					.byte WordFlags	;wh_Flags
>d25a	03					.byte 3	;wh_CodeLength
>d25b	0b					  .byte LinkDisplacement
=$d25c					XtPtr1 ::= *
=53720					WordListLink ::= Nt0 ; remember the nt of this word for later
.d25c	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d25f					en = *	; remember here
>d25a	03					.byte CL	;wh_CodeLength
>d25f	ec					.byte $ec
>d260	63 70 78 2e 23			L1:	.text "cpx.#"	;  name of word as a string, ending at wh_NameLastChar
=53733					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d265	65					.byte (("cpx.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d266	10					.byte WordFlags	;wh_Flags
>d267	03					.byte 3	;wh_CodeLength
>d268	0d					  .byte LinkDisplacement
=$d269					XtPtr1 ::= *
=53733					WordListLink ::= Nt0 ; remember the nt of this word for later
.d269	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d26c					en = *	; remember here
>d267	03					.byte CL	;wh_CodeLength
>d26c	e0					.byte $e0
>d26d	63 70 78 2e 7a			L1:	.text "cpx.z"	;  name of word as a string, ending at wh_NameLastChar
=53746					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d272	45					.byte (("cpx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d273	10					.byte WordFlags	;wh_Flags
>d274	03					.byte 3	;wh_CodeLength
>d275	0d					  .byte LinkDisplacement
=$d276					XtPtr1 ::= *
=53746					WordListLink ::= Nt0 ; remember the nt of this word for later
.d276	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d279					en = *	; remember here
>d274	03					.byte CL	;wh_CodeLength
>d279	e4					.byte $e4
>d27a	63 70 79			L1:	.text "cpy"	;  name of word as a string, ending at wh_NameLastChar
=53757					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d27d	23					.byte (("cpy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d27e	10					.byte WordFlags	;wh_Flags
>d27f	03					.byte 3	;wh_CodeLength
>d280	0b					  .byte LinkDisplacement
=$d281					XtPtr1 ::= *
=53757					WordListLink ::= Nt0 ; remember the nt of this word for later
.d281	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d284					en = *	; remember here
>d27f	03					.byte CL	;wh_CodeLength
>d284	cc					.byte $cc
>d285	63 70 79 2e 23			L1:	.text "cpy.#"	;  name of word as a string, ending at wh_NameLastChar
=53770					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d28a	65					.byte (("cpy.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d28b	10					.byte WordFlags	;wh_Flags
>d28c	03					.byte 3	;wh_CodeLength
>d28d	0d					  .byte LinkDisplacement
=$d28e					XtPtr1 ::= *
=53770					WordListLink ::= Nt0 ; remember the nt of this word for later
.d28e	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d291					en = *	; remember here
>d28c	03					.byte CL	;wh_CodeLength
>d291	c0					.byte $c0
>d292	63 70 79 2e 7a			L1:	.text "cpy.z"	;  name of word as a string, ending at wh_NameLastChar
=53783					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d297	45					.byte (("cpy.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d298	10					.byte WordFlags	;wh_Flags
>d299	03					.byte 3	;wh_CodeLength
>d29a	0d					  .byte LinkDisplacement
=$d29b					XtPtr1 ::= *
=53783					WordListLink ::= Nt0 ; remember the nt of this word for later
.d29b	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d29e					en = *	; remember here
>d299	03					.byte CL	;wh_CodeLength
>d29e	c4					.byte $c4
>d29f	64 65 63			L1:	.text "dec"	;  name of word as a string, ending at wh_NameLastChar
=53794					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2a2	63					.byte (("dec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2a3	10					.byte WordFlags	;wh_Flags
>d2a4	03					.byte 3	;wh_CodeLength
>d2a5	0b					  .byte LinkDisplacement
=$d2a6					XtPtr1 ::= *
=53794					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2a6	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2a9					en = *	; remember here
>d2a4	03					.byte CL	;wh_CodeLength
>d2a9	ce					.byte $ce
>d2aa	64 65 63 2e 61			L1:	.text "dec.a"	;  name of word as a string, ending at wh_NameLastChar
=53807					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2af	25					.byte (("dec.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2b0	10					.byte WordFlags	;wh_Flags
>d2b1	03					.byte 3	;wh_CodeLength
>d2b2	0d					  .byte LinkDisplacement
=$d2b3					XtPtr1 ::= *
=53807					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2b3	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2b6					en = *	; remember here
>d2b1	03					.byte CL	;wh_CodeLength
>d2b6	3a					.byte $3a
>d2b7	64 65 63 2e 78			L1:	.text "dec.x"	;  name of word as a string, ending at wh_NameLastChar
=53820					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2bc	05					.byte (("dec.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2bd	10					.byte WordFlags	;wh_Flags
>d2be	03					.byte 3	;wh_CodeLength
>d2bf	0d					  .byte LinkDisplacement
=$d2c0					XtPtr1 ::= *
=53820					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2c0	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2c3					en = *	; remember here
>d2be	03					.byte CL	;wh_CodeLength
>d2c3	de					.byte $de
>d2c4	64 65 63 2e 7a			L1:	.text "dec.z"	;  name of word as a string, ending at wh_NameLastChar
=53833					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2c9	45					.byte (("dec.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d2ca	10					.byte WordFlags	;wh_Flags
>d2cb	03					.byte 3	;wh_CodeLength
>d2cc	0d					  .byte LinkDisplacement
=$d2cd					XtPtr1 ::= *
=53833					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2cd	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d2d0					en = *	; remember here
>d2cb	03					.byte CL	;wh_CodeLength
>d2d0	c6					.byte $c6
>d2d1	64 65 63 2e 7a 78		L1:	.text "dec.zx"	;  name of word as a string, ending at wh_NameLastChar
=53847					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2d7	06					.byte (("dec.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d2d8	10					.byte WordFlags	;wh_Flags
>d2d9	03					.byte 3	;wh_CodeLength
>d2da	0e					  .byte LinkDisplacement
=$d2db					XtPtr1 ::= *
=53847					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2db	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d2de					en = *	; remember here
>d2d9	03					.byte CL	;wh_CodeLength
>d2de	d6					.byte $d6
>d2df	64 65 78			L1:	.text "dex"	;  name of word as a string, ending at wh_NameLastChar
=53858					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2e2	03					.byte (("dex"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2e3	10					.byte WordFlags	;wh_Flags
>d2e4	03					.byte 3	;wh_CodeLength
>d2e5	0b					  .byte LinkDisplacement
=$d2e6					XtPtr1 ::= *
=53858					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2e6	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2e9					en = *	; remember here
>d2e4	03					.byte CL	;wh_CodeLength
>d2e9	ca					.byte $ca
>d2ea	64 65 79			L1:	.text "dey"	;  name of word as a string, ending at wh_NameLastChar
=53869					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2ed	23					.byte (("dey"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2ee	10					.byte WordFlags	;wh_Flags
>d2ef	03					.byte 3	;wh_CodeLength
>d2f0	0b					  .byte LinkDisplacement
=$d2f1					XtPtr1 ::= *
=53869					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2f1	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d2f4					en = *	; remember here
>d2ef	03					.byte CL	;wh_CodeLength
>d2f4	88					.byte $88
>d2f5	65 6f 72			L1:	.text "eor"	;  name of word as a string, ending at wh_NameLastChar
=53880					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d2f8	43					.byte (("eor"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d2f9	10					.byte WordFlags	;wh_Flags
>d2fa	03					.byte 3	;wh_CodeLength
>d2fb	0b					  .byte LinkDisplacement
=$d2fc					XtPtr1 ::= *
=53880					WordListLink ::= Nt0 ; remember the nt of this word for later
.d2fc	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d2ff					en = *	; remember here
>d2fa	03					.byte CL	;wh_CodeLength
>d2ff	4d					.byte $4d
>d300	65 6f 72 2e 23			L1:	.text "eor.#"	;  name of word as a string, ending at wh_NameLastChar
=53893					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d305	65					.byte (("eor.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d306	10					.byte WordFlags	;wh_Flags
>d307	03					.byte 3	;wh_CodeLength
>d308	0d					  .byte LinkDisplacement
=$d309					XtPtr1 ::= *
=53893					WordListLink ::= Nt0 ; remember the nt of this word for later
.d309	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d30c					en = *	; remember here
>d307	03					.byte CL	;wh_CodeLength
>d30c	49					.byte $49
>d30d	65 6f 72 2e 78			L1:	.text "eor.x"	;  name of word as a string, ending at wh_NameLastChar
=53906					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d312	05					.byte (("eor.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d313	10					.byte WordFlags	;wh_Flags
>d314	03					.byte 3	;wh_CodeLength
>d315	0d					  .byte LinkDisplacement
=$d316					XtPtr1 ::= *
=53906					WordListLink ::= Nt0 ; remember the nt of this word for later
.d316	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d319					en = *	; remember here
>d314	03					.byte CL	;wh_CodeLength
>d319	5d					.byte $5d
>d31a	65 6f 72 2e 79			L1:	.text "eor.y"	;  name of word as a string, ending at wh_NameLastChar
=53919					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d31f	25					.byte (("eor.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d320	10					.byte WordFlags	;wh_Flags
>d321	03					.byte 3	;wh_CodeLength
>d322	0d					  .byte LinkDisplacement
=$d323					XtPtr1 ::= *
=53919					WordListLink ::= Nt0 ; remember the nt of this word for later
.d323	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d326					en = *	; remember here
>d321	03					.byte CL	;wh_CodeLength
>d326	59					.byte $59
>d327	65 6f 72 2e 7a			L1:	.text "eor.z"	;  name of word as a string, ending at wh_NameLastChar
=53932					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d32c	45					.byte (("eor.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d32d	10					.byte WordFlags	;wh_Flags
>d32e	03					.byte 3	;wh_CodeLength
>d32f	0d					  .byte LinkDisplacement
=$d330					XtPtr1 ::= *
=53932					WordListLink ::= Nt0 ; remember the nt of this word for later
.d330	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d333					en = *	; remember here
>d32e	03					.byte CL	;wh_CodeLength
>d333	45					.byte $45
>d334	65 6f 72 2e 7a 69 79		L1:	.text "eor.ziy"	;  name of word as a string, ending at wh_NameLastChar
=53947					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d33b	27					.byte (("eor.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d33c	10					.byte WordFlags	;wh_Flags
>d33d	03					.byte 3	;wh_CodeLength
>d33e	0f					  .byte LinkDisplacement
=$d33f					XtPtr1 ::= *
=53947					WordListLink ::= Nt0 ; remember the nt of this word for later
.d33f	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d342					en = *	; remember here
>d33d	03					.byte CL	;wh_CodeLength
>d342	51					.byte $51
>d343	65 6f 72 2e 7a 78		L1:	.text "eor.zx"	;  name of word as a string, ending at wh_NameLastChar
=53961					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d349	06					.byte (("eor.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d34a	10					.byte WordFlags	;wh_Flags
>d34b	03					.byte 3	;wh_CodeLength
>d34c	0e					  .byte LinkDisplacement
=$d34d					XtPtr1 ::= *
=53961					WordListLink ::= Nt0 ; remember the nt of this word for later
.d34d	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d350					en = *	; remember here
>d34b	03					.byte CL	;wh_CodeLength
>d350	55					.byte $55
>d351	65 6f 72 2e 7a 78 69		L1:	.text "eor.zxi"	;  name of word as a string, ending at wh_NameLastChar
=53976					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d358	27					.byte (("eor.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d359	10					.byte WordFlags	;wh_Flags
>d35a	03					.byte 3	;wh_CodeLength
>d35b	0f					  .byte LinkDisplacement
=$d35c					XtPtr1 ::= *
=53976					WordListLink ::= Nt0 ; remember the nt of this word for later
.d35c	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d35f					en = *	; remember here
>d35a	03					.byte CL	;wh_CodeLength
>d35f	41					.byte $41
>d360	69 6e 63			L1:	.text "inc"	;  name of word as a string, ending at wh_NameLastChar
=53987					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d363	63					.byte (("inc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d364	10					.byte WordFlags	;wh_Flags
>d365	03					.byte 3	;wh_CodeLength
>d366	0b					  .byte LinkDisplacement
=$d367					XtPtr1 ::= *
=53987					WordListLink ::= Nt0 ; remember the nt of this word for later
.d367	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d36a					en = *	; remember here
>d365	03					.byte CL	;wh_CodeLength
>d36a	ee					.byte $ee
>d36b	69 6e 63 2e 61			L1:	.text "inc.a"	;  name of word as a string, ending at wh_NameLastChar
=54000					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d370	25					.byte (("inc.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d371	10					.byte WordFlags	;wh_Flags
>d372	03					.byte 3	;wh_CodeLength
>d373	0d					  .byte LinkDisplacement
=$d374					XtPtr1 ::= *
=54000					WordListLink ::= Nt0 ; remember the nt of this word for later
.d374	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d377					en = *	; remember here
>d372	03					.byte CL	;wh_CodeLength
>d377	1a					.byte $1a
>d378	69 6e 63 2e 78			L1:	.text "inc.x"	;  name of word as a string, ending at wh_NameLastChar
=54013					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d37d	05					.byte (("inc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d37e	10					.byte WordFlags	;wh_Flags
>d37f	03					.byte 3	;wh_CodeLength
>d380	0d					  .byte LinkDisplacement
=$d381					XtPtr1 ::= *
=54013					WordListLink ::= Nt0 ; remember the nt of this word for later
.d381	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d384					en = *	; remember here
>d37f	03					.byte CL	;wh_CodeLength
>d384	fe					.byte $fe
>d385	69 6e 63 2e 7a			L1:	.text "inc.z"	;  name of word as a string, ending at wh_NameLastChar
=54026					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d38a	45					.byte (("inc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d38b	10					.byte WordFlags	;wh_Flags
>d38c	03					.byte 3	;wh_CodeLength
>d38d	0d					  .byte LinkDisplacement
=$d38e					XtPtr1 ::= *
=54026					WordListLink ::= Nt0 ; remember the nt of this word for later
.d38e	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d391					en = *	; remember here
>d38c	03					.byte CL	;wh_CodeLength
>d391	e6					.byte $e6
>d392	69 6e 63 2e 7a 78		L1:	.text "inc.zx"	;  name of word as a string, ending at wh_NameLastChar
=54040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d398	06					.byte (("inc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d399	10					.byte WordFlags	;wh_Flags
>d39a	03					.byte 3	;wh_CodeLength
>d39b	0e					  .byte LinkDisplacement
=$d39c					XtPtr1 ::= *
=54040					WordListLink ::= Nt0 ; remember the nt of this word for later
.d39c	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d39f					en = *	; remember here
>d39a	03					.byte CL	;wh_CodeLength
>d39f	f6					.byte $f6
>d3a0	69 6e 78			L1:	.text "inx"	;  name of word as a string, ending at wh_NameLastChar
=54051					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3a3	03					.byte (("inx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3a4	10					.byte WordFlags	;wh_Flags
>d3a5	03					.byte 3	;wh_CodeLength
>d3a6	0b					  .byte LinkDisplacement
=$d3a7					XtPtr1 ::= *
=54051					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3a7	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d3aa					en = *	; remember here
>d3a5	03					.byte CL	;wh_CodeLength
>d3aa	e8					.byte $e8
>d3ab	69 6e 79			L1:	.text "iny"	;  name of word as a string, ending at wh_NameLastChar
=54062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3ae	23					.byte (("iny"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3af	10					.byte WordFlags	;wh_Flags
>d3b0	03					.byte 3	;wh_CodeLength
>d3b1	0b					  .byte LinkDisplacement
=$d3b2					XtPtr1 ::= *
=54062					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3b2	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d3b5					en = *	; remember here
>d3b0	03					.byte CL	;wh_CodeLength
>d3b5	c8					.byte $c8
>d3b6	6a 6d 70			L1:	.text "jmp"	;  name of word as a string, ending at wh_NameLastChar
=54073					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3b9	03					.byte (("jmp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3ba	10					.byte WordFlags	;wh_Flags
>d3bb	03					.byte 3	;wh_CodeLength
>d3bc	0b					  .byte LinkDisplacement
=$d3bd					XtPtr1 ::= *
=54073					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3bd	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3c0					en = *	; remember here
>d3bb	03					.byte CL	;wh_CodeLength
>d3c0	4c					.byte $4c
>d3c1	6a 6d 70 2e 69			L1:	.text "jmp.i"	;  name of word as a string, ending at wh_NameLastChar
=54086					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3c6	25					.byte (("jmp.i"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3c7	10					.byte WordFlags	;wh_Flags
>d3c8	03					.byte 3	;wh_CodeLength
>d3c9	0d					  .byte LinkDisplacement
=$d3ca					XtPtr1 ::= *
=54086					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ca	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3cd					en = *	; remember here
>d3c8	03					.byte CL	;wh_CodeLength
>d3cd	6c					.byte $6c
>d3ce	6a 73 72			L1:	.text "jsr"	;  name of word as a string, ending at wh_NameLastChar
=54097					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3d1	43					.byte (("jsr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3d2	10					.byte WordFlags	;wh_Flags
>d3d3	03					.byte 3	;wh_CodeLength
>d3d4	0b					  .byte LinkDisplacement
=$d3d5					XtPtr1 ::= *
=54097					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3d5	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3d8					en = *	; remember here
>d3d3	03					.byte CL	;wh_CodeLength
>d3d8	20					.byte $20
>d3d9	6c 64 61			L1:	.text "lda"	;  name of word as a string, ending at wh_NameLastChar
=54108					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3dc	23					.byte (("lda"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d3dd	10					.byte WordFlags	;wh_Flags
>d3de	03					.byte 3	;wh_CodeLength
>d3df	0b					  .byte LinkDisplacement
=$d3e0					XtPtr1 ::= *
=54108					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3e0	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3e3					en = *	; remember here
>d3de	03					.byte CL	;wh_CodeLength
>d3e3	ad					.byte $ad
>d3e4	6c 64 61 2e 23			L1:	.text "lda.#"	;  name of word as a string, ending at wh_NameLastChar
=54121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3e9	65					.byte (("lda.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3ea	10					.byte WordFlags	;wh_Flags
>d3eb	03					.byte 3	;wh_CodeLength
>d3ec	0d					  .byte LinkDisplacement
=$d3ed					XtPtr1 ::= *
=54121					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3ed	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d3f0					en = *	; remember here
>d3eb	03					.byte CL	;wh_CodeLength
>d3f0	a9					.byte $a9
>d3f1	6c 64 61 2e 78			L1:	.text "lda.x"	;  name of word as a string, ending at wh_NameLastChar
=54134					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d3f6	05					.byte (("lda.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d3f7	10					.byte WordFlags	;wh_Flags
>d3f8	03					.byte 3	;wh_CodeLength
>d3f9	0d					  .byte LinkDisplacement
=$d3fa					XtPtr1 ::= *
=54134					WordListLink ::= Nt0 ; remember the nt of this word for later
.d3fa	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d3fd					en = *	; remember here
>d3f8	03					.byte CL	;wh_CodeLength
>d3fd	bd					.byte $bd
>d3fe	6c 64 61 2e 79			L1:	.text "lda.y"	;  name of word as a string, ending at wh_NameLastChar
=54147					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d403	25					.byte (("lda.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d404	10					.byte WordFlags	;wh_Flags
>d405	03					.byte 3	;wh_CodeLength
>d406	0d					  .byte LinkDisplacement
=$d407					XtPtr1 ::= *
=54147					WordListLink ::= Nt0 ; remember the nt of this word for later
.d407	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d40a					en = *	; remember here
>d405	03					.byte CL	;wh_CodeLength
>d40a	b9					.byte $b9
>d40b	6c 64 61 2e 7a			L1:	.text "lda.z"	;  name of word as a string, ending at wh_NameLastChar
=54160					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d410	45					.byte (("lda.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d411	10					.byte WordFlags	;wh_Flags
>d412	03					.byte 3	;wh_CodeLength
>d413	0d					  .byte LinkDisplacement
=$d414					XtPtr1 ::= *
=54160					WordListLink ::= Nt0 ; remember the nt of this word for later
.d414	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d417					en = *	; remember here
>d412	03					.byte CL	;wh_CodeLength
>d417	a5					.byte $a5
>d418	6c 64 61 2e 7a 69 79		L1:	.text "lda.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54175					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d41f	27					.byte (("lda.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d420	10					.byte WordFlags	;wh_Flags
>d421	03					.byte 3	;wh_CodeLength
>d422	0f					  .byte LinkDisplacement
=$d423					XtPtr1 ::= *
=54175					WordListLink ::= Nt0 ; remember the nt of this word for later
.d423	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d426					en = *	; remember here
>d421	03					.byte CL	;wh_CodeLength
>d426	b1					.byte $b1
>d427	6c 64 61 2e 7a 78		L1:	.text "lda.zx"	;  name of word as a string, ending at wh_NameLastChar
=54189					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d42d	06					.byte (("lda.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d42e	10					.byte WordFlags	;wh_Flags
>d42f	03					.byte 3	;wh_CodeLength
>d430	0e					  .byte LinkDisplacement
=$d431					XtPtr1 ::= *
=54189					WordListLink ::= Nt0 ; remember the nt of this word for later
.d431	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d434					en = *	; remember here
>d42f	03					.byte CL	;wh_CodeLength
>d434	b5					.byte $b5
>d435	6c 64 61 2e 7a 78 69		L1:	.text "lda.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54204					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d43c	27					.byte (("lda.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d43d	10					.byte WordFlags	;wh_Flags
>d43e	03					.byte 3	;wh_CodeLength
>d43f	0f					  .byte LinkDisplacement
=$d440					XtPtr1 ::= *
=54204					WordListLink ::= Nt0 ; remember the nt of this word for later
.d440	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d443					en = *	; remember here
>d43e	03					.byte CL	;wh_CodeLength
>d443	a1					.byte $a1
>d444	6c 64 78			L1:	.text "ldx"	;  name of word as a string, ending at wh_NameLastChar
=54215					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d447	03					.byte (("ldx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d448	10					.byte WordFlags	;wh_Flags
>d449	03					.byte 3	;wh_CodeLength
>d44a	0b					  .byte LinkDisplacement
=$d44b					XtPtr1 ::= *
=54215					WordListLink ::= Nt0 ; remember the nt of this word for later
.d44b	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d44e					en = *	; remember here
>d449	03					.byte CL	;wh_CodeLength
>d44e	ae					.byte $ae
>d44f	6c 64 78 2e 23			L1:	.text "ldx.#"	;  name of word as a string, ending at wh_NameLastChar
=54228					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d454	65					.byte (("ldx.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d455	10					.byte WordFlags	;wh_Flags
>d456	03					.byte 3	;wh_CodeLength
>d457	0d					  .byte LinkDisplacement
=$d458					XtPtr1 ::= *
=54228					WordListLink ::= Nt0 ; remember the nt of this word for later
.d458	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d45b					en = *	; remember here
>d456	03					.byte CL	;wh_CodeLength
>d45b	a2					.byte $a2
>d45c	6c 64 78 2e 79			L1:	.text "ldx.y"	;  name of word as a string, ending at wh_NameLastChar
=54241					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d461	25					.byte (("ldx.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d462	10					.byte WordFlags	;wh_Flags
>d463	03					.byte 3	;wh_CodeLength
>d464	0d					  .byte LinkDisplacement
=$d465					XtPtr1 ::= *
=54241					WordListLink ::= Nt0 ; remember the nt of this word for later
.d465	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d468					en = *	; remember here
>d463	03					.byte CL	;wh_CodeLength
>d468	be					.byte $be
>d469	6c 64 78 2e 7a			L1:	.text "ldx.z"	;  name of word as a string, ending at wh_NameLastChar
=54254					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d46e	45					.byte (("ldx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d46f	10					.byte WordFlags	;wh_Flags
>d470	03					.byte 3	;wh_CodeLength
>d471	0d					  .byte LinkDisplacement
=$d472					XtPtr1 ::= *
=54254					WordListLink ::= Nt0 ; remember the nt of this word for later
.d472	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d475					en = *	; remember here
>d470	03					.byte CL	;wh_CodeLength
>d475	a6					.byte $a6
>d476	6c 64 78 2e 7a 79		L1:	.text "ldx.zy"	;  name of word as a string, ending at wh_NameLastChar
=54268					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d47c	26					.byte (("ldx.zy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d47d	10					.byte WordFlags	;wh_Flags
>d47e	03					.byte 3	;wh_CodeLength
>d47f	0e					  .byte LinkDisplacement
=$d480					XtPtr1 ::= *
=54268					WordListLink ::= Nt0 ; remember the nt of this word for later
.d480	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d483					en = *	; remember here
>d47e	03					.byte CL	;wh_CodeLength
>d483	b6					.byte $b6
>d484	6c 64 79			L1:	.text "ldy"	;  name of word as a string, ending at wh_NameLastChar
=54279					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d487	23					.byte (("ldy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d488	10					.byte WordFlags	;wh_Flags
>d489	03					.byte 3	;wh_CodeLength
>d48a	0b					  .byte LinkDisplacement
=$d48b					XtPtr1 ::= *
=54279					WordListLink ::= Nt0 ; remember the nt of this word for later
.d48b	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d48e					en = *	; remember here
>d489	03					.byte CL	;wh_CodeLength
>d48e	ac					.byte $ac
>d48f	6c 64 79 2e 23			L1:	.text "ldy.#"	;  name of word as a string, ending at wh_NameLastChar
=54292					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d494	65					.byte (("ldy.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d495	10					.byte WordFlags	;wh_Flags
>d496	03					.byte 3	;wh_CodeLength
>d497	0d					  .byte LinkDisplacement
=$d498					XtPtr1 ::= *
=54292					WordListLink ::= Nt0 ; remember the nt of this word for later
.d498	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d49b					en = *	; remember here
>d496	03					.byte CL	;wh_CodeLength
>d49b	a0					.byte $a0
>d49c	6c 64 79 2e 78			L1:	.text "ldy.x"	;  name of word as a string, ending at wh_NameLastChar
=54305					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4a1	05					.byte (("ldy.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4a2	10					.byte WordFlags	;wh_Flags
>d4a3	03					.byte 3	;wh_CodeLength
>d4a4	0d					  .byte LinkDisplacement
=$d4a5					XtPtr1 ::= *
=54305					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4a5	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4a8					en = *	; remember here
>d4a3	03					.byte CL	;wh_CodeLength
>d4a8	bc					.byte $bc
>d4a9	6c 64 79 2e 7a			L1:	.text "ldy.z"	;  name of word as a string, ending at wh_NameLastChar
=54318					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ae	45					.byte (("ldy.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4af	10					.byte WordFlags	;wh_Flags
>d4b0	03					.byte 3	;wh_CodeLength
>d4b1	0d					  .byte LinkDisplacement
=$d4b2					XtPtr1 ::= *
=54318					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4b2	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4b5					en = *	; remember here
>d4b0	03					.byte CL	;wh_CodeLength
>d4b5	a4					.byte $a4
>d4b6	6c 64 79 2e 7a 78		L1:	.text "ldy.zx"	;  name of word as a string, ending at wh_NameLastChar
=54332					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4bc	06					.byte (("ldy.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4bd	10					.byte WordFlags	;wh_Flags
>d4be	03					.byte 3	;wh_CodeLength
>d4bf	0e					  .byte LinkDisplacement
=$d4c0					XtPtr1 ::= *
=54332					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4c0	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4c3					en = *	; remember here
>d4be	03					.byte CL	;wh_CodeLength
>d4c3	b4					.byte $b4
>d4c4	6c 73 72			L1:	.text "lsr"	;  name of word as a string, ending at wh_NameLastChar
=54343					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4c7	43					.byte (("lsr"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d4c8	10					.byte WordFlags	;wh_Flags
>d4c9	03					.byte 3	;wh_CodeLength
>d4ca	0b					  .byte LinkDisplacement
=$d4cb					XtPtr1 ::= *
=54343					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4cb	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4ce					en = *	; remember here
>d4c9	03					.byte CL	;wh_CodeLength
>d4ce	4e					.byte $4e
>d4cf	6c 73 72 2e 61			L1:	.text "lsr.a"	;  name of word as a string, ending at wh_NameLastChar
=54356					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4d4	25					.byte (("lsr.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4d5	10					.byte WordFlags	;wh_Flags
>d4d6	03					.byte 3	;wh_CodeLength
>d4d7	0d					  .byte LinkDisplacement
=$d4d8					XtPtr1 ::= *
=54356					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4d8	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d4db					en = *	; remember here
>d4d6	03					.byte CL	;wh_CodeLength
>d4db	4a					.byte $4a
>d4dc	6c 73 72 2e 78			L1:	.text "lsr.x"	;  name of word as a string, ending at wh_NameLastChar
=54369					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4e1	05					.byte (("lsr.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4e2	10					.byte WordFlags	;wh_Flags
>d4e3	03					.byte 3	;wh_CodeLength
>d4e4	0d					  .byte LinkDisplacement
=$d4e5					XtPtr1 ::= *
=54369					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4e5	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d4e8					en = *	; remember here
>d4e3	03					.byte CL	;wh_CodeLength
>d4e8	5e					.byte $5e
>d4e9	6c 73 72 2e 7a			L1:	.text "lsr.z"	;  name of word as a string, ending at wh_NameLastChar
=54382					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4ee	45					.byte (("lsr.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d4ef	10					.byte WordFlags	;wh_Flags
>d4f0	03					.byte 3	;wh_CodeLength
>d4f1	0d					  .byte LinkDisplacement
=$d4f2					XtPtr1 ::= *
=54382					WordListLink ::= Nt0 ; remember the nt of this word for later
.d4f2	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d4f5					en = *	; remember here
>d4f0	03					.byte CL	;wh_CodeLength
>d4f5	46					.byte $46
>d4f6	6c 73 72 2e 7a 78		L1:	.text "lsr.zx"	;  name of word as a string, ending at wh_NameLastChar
=54396					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d4fc	06					.byte (("lsr.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d4fd	10					.byte WordFlags	;wh_Flags
>d4fe	03					.byte 3	;wh_CodeLength
>d4ff	0e					  .byte LinkDisplacement
=$d500					XtPtr1 ::= *
=54396					WordListLink ::= Nt0 ; remember the nt of this word for later
.d500	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d503					en = *	; remember here
>d4fe	03					.byte CL	;wh_CodeLength
>d503	56					.byte $56
>d504	6e 6f 70			L1:	.text "nop"	;  name of word as a string, ending at wh_NameLastChar
=54407					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d507	03					.byte (("nop"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d508	10					.byte WordFlags	;wh_Flags
>d509	03					.byte 3	;wh_CodeLength
>d50a	0b					  .byte LinkDisplacement
=$d50b					XtPtr1 ::= *
=54407					WordListLink ::= Nt0 ; remember the nt of this word for later
.d50b	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d50e					en = *	; remember here
>d509	03					.byte CL	;wh_CodeLength
>d50e	ea					.byte $ea
>d50f	6f 72 61			L1:	.text "ora"	;  name of word as a string, ending at wh_NameLastChar
=54418					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d512	23					.byte (("ora"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d513	10					.byte WordFlags	;wh_Flags
>d514	03					.byte 3	;wh_CodeLength
>d515	0b					  .byte LinkDisplacement
=$d516					XtPtr1 ::= *
=54418					WordListLink ::= Nt0 ; remember the nt of this word for later
.d516	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d519					en = *	; remember here
>d514	03					.byte CL	;wh_CodeLength
>d519	0d					.byte $0d
>d51a	6f 72 61 2e 23			L1:	.text "ora.#"	;  name of word as a string, ending at wh_NameLastChar
=54431					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d51f	65					.byte (("ora.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d520	10					.byte WordFlags	;wh_Flags
>d521	03					.byte 3	;wh_CodeLength
>d522	0d					  .byte LinkDisplacement
=$d523					XtPtr1 ::= *
=54431					WordListLink ::= Nt0 ; remember the nt of this word for later
.d523	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d526					en = *	; remember here
>d521	03					.byte CL	;wh_CodeLength
>d526	09					.byte $09
>d527	6f 72 61 2e 78			L1:	.text "ora.x"	;  name of word as a string, ending at wh_NameLastChar
=54444					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d52c	05					.byte (("ora.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d52d	10					.byte WordFlags	;wh_Flags
>d52e	03					.byte 3	;wh_CodeLength
>d52f	0d					  .byte LinkDisplacement
=$d530					XtPtr1 ::= *
=54444					WordListLink ::= Nt0 ; remember the nt of this word for later
.d530	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d533					en = *	; remember here
>d52e	03					.byte CL	;wh_CodeLength
>d533	1d					.byte $1d
>d534	6f 72 61 2e 79			L1:	.text "ora.y"	;  name of word as a string, ending at wh_NameLastChar
=54457					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d539	25					.byte (("ora.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d53a	10					.byte WordFlags	;wh_Flags
>d53b	03					.byte 3	;wh_CodeLength
>d53c	0d					  .byte LinkDisplacement
=$d53d					XtPtr1 ::= *
=54457					WordListLink ::= Nt0 ; remember the nt of this word for later
.d53d	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d540					en = *	; remember here
>d53b	03					.byte CL	;wh_CodeLength
>d540	19					.byte $19
>d541	6f 72 61 2e 7a			L1:	.text "ora.z"	;  name of word as a string, ending at wh_NameLastChar
=54470					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d546	45					.byte (("ora.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d547	10					.byte WordFlags	;wh_Flags
>d548	03					.byte 3	;wh_CodeLength
>d549	0d					  .byte LinkDisplacement
=$d54a					XtPtr1 ::= *
=54470					WordListLink ::= Nt0 ; remember the nt of this word for later
.d54a	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d54d					en = *	; remember here
>d548	03					.byte CL	;wh_CodeLength
>d54d	05					.byte $05
>d54e	6f 72 61 2e 7a 69 79		L1:	.text "ora.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54485					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d555	27					.byte (("ora.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d556	10					.byte WordFlags	;wh_Flags
>d557	03					.byte 3	;wh_CodeLength
>d558	0f					  .byte LinkDisplacement
=$d559					XtPtr1 ::= *
=54485					WordListLink ::= Nt0 ; remember the nt of this word for later
.d559	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d55c					en = *	; remember here
>d557	03					.byte CL	;wh_CodeLength
>d55c	11					.byte $11
>d55d	6f 72 61 2e 7a 78		L1:	.text "ora.zx"	;  name of word as a string, ending at wh_NameLastChar
=54499					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d563	06					.byte (("ora.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d564	10					.byte WordFlags	;wh_Flags
>d565	03					.byte 3	;wh_CodeLength
>d566	0e					  .byte LinkDisplacement
=$d567					XtPtr1 ::= *
=54499					WordListLink ::= Nt0 ; remember the nt of this word for later
.d567	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d56a					en = *	; remember here
>d565	03					.byte CL	;wh_CodeLength
>d56a	15					.byte $15
>d56b	6f 72 61 2e 7a 78 69		L1:	.text "ora.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54514					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d572	27					.byte (("ora.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d573	10					.byte WordFlags	;wh_Flags
>d574	03					.byte 3	;wh_CodeLength
>d575	0f					  .byte LinkDisplacement
=$d576					XtPtr1 ::= *
=54514					WordListLink ::= Nt0 ; remember the nt of this word for later
.d576	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d579					en = *	; remember here
>d574	03					.byte CL	;wh_CodeLength
>d579	01					.byte $01
>d57a	70 68 61			L1:	.text "pha"	;  name of word as a string, ending at wh_NameLastChar
=54525					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d57d	23					.byte (("pha"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d57e	10					.byte WordFlags	;wh_Flags
>d57f	03					.byte 3	;wh_CodeLength
>d580	0b					  .byte LinkDisplacement
=$d581					XtPtr1 ::= *
=54525					WordListLink ::= Nt0 ; remember the nt of this word for later
.d581	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d584					en = *	; remember here
>d57f	03					.byte CL	;wh_CodeLength
>d584	48					.byte $48
>d585	70 68 70			L1:	.text "php"	;  name of word as a string, ending at wh_NameLastChar
=54536					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d588	03					.byte (("php"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d589	10					.byte WordFlags	;wh_Flags
>d58a	03					.byte 3	;wh_CodeLength
>d58b	0b					  .byte LinkDisplacement
=$d58c					XtPtr1 ::= *
=54536					WordListLink ::= Nt0 ; remember the nt of this word for later
.d58c	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d58f					en = *	; remember here
>d58a	03					.byte CL	;wh_CodeLength
>d58f	08					.byte $08
>d590	70 6c 61			L1:	.text "pla"	;  name of word as a string, ending at wh_NameLastChar
=54547					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d593	23					.byte (("pla"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d594	10					.byte WordFlags	;wh_Flags
>d595	03					.byte 3	;wh_CodeLength
>d596	0b					  .byte LinkDisplacement
=$d597					XtPtr1 ::= *
=54547					WordListLink ::= Nt0 ; remember the nt of this word for later
.d597	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d59a					en = *	; remember here
>d595	03					.byte CL	;wh_CodeLength
>d59a	68					.byte $68
>d59b	70 6c 70			L1:	.text "plp"	;  name of word as a string, ending at wh_NameLastChar
=54558					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d59e	03					.byte (("plp"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d59f	10					.byte WordFlags	;wh_Flags
>d5a0	03					.byte 3	;wh_CodeLength
>d5a1	0b					  .byte LinkDisplacement
=$d5a2					XtPtr1 ::= *
=54558					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5a2	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5a5					en = *	; remember here
>d5a0	03					.byte CL	;wh_CodeLength
>d5a5	28					.byte $28
>d5a6	72 6f 6c			L1:	.text "rol"	;  name of word as a string, ending at wh_NameLastChar
=54569					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5a9	83					.byte (("rol"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5aa	10					.byte WordFlags	;wh_Flags
>d5ab	03					.byte 3	;wh_CodeLength
>d5ac	0b					  .byte LinkDisplacement
=$d5ad					XtPtr1 ::= *
=54569					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ad	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5b0					en = *	; remember here
>d5ab	03					.byte CL	;wh_CodeLength
>d5b0	2e					.byte $2e
>d5b1	72 6f 6c 2e 61			L1:	.text "rol.a"	;  name of word as a string, ending at wh_NameLastChar
=54582					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5b6	25					.byte (("rol.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5b7	10					.byte WordFlags	;wh_Flags
>d5b8	03					.byte 3	;wh_CodeLength
>d5b9	0d					  .byte LinkDisplacement
=$d5ba					XtPtr1 ::= *
=54582					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ba	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5bd					en = *	; remember here
>d5b8	03					.byte CL	;wh_CodeLength
>d5bd	2a					.byte $2a
>d5be	72 6f 6c 2e 78			L1:	.text "rol.x"	;  name of word as a string, ending at wh_NameLastChar
=54595					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5c3	05					.byte (("rol.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5c4	10					.byte WordFlags	;wh_Flags
>d5c5	03					.byte 3	;wh_CodeLength
>d5c6	0d					  .byte LinkDisplacement
=$d5c7					XtPtr1 ::= *
=54595					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5c7	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5ca					en = *	; remember here
>d5c5	03					.byte CL	;wh_CodeLength
>d5ca	3e					.byte $3e
>d5cb	72 6f 6c 2e 7a			L1:	.text "rol.z"	;  name of word as a string, ending at wh_NameLastChar
=54608					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5d0	45					.byte (("rol.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5d1	10					.byte WordFlags	;wh_Flags
>d5d2	03					.byte 3	;wh_CodeLength
>d5d3	0d					  .byte LinkDisplacement
=$d5d4					XtPtr1 ::= *
=54608					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5d4	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d5d7					en = *	; remember here
>d5d2	03					.byte CL	;wh_CodeLength
>d5d7	26					.byte $26
>d5d8	72 6f 6c 2e 7a 78		L1:	.text "rol.zx"	;  name of word as a string, ending at wh_NameLastChar
=54622					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5de	06					.byte (("rol.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d5df	10					.byte WordFlags	;wh_Flags
>d5e0	03					.byte 3	;wh_CodeLength
>d5e1	0e					  .byte LinkDisplacement
=$d5e2					XtPtr1 ::= *
=54622					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5e2	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d5e5					en = *	; remember here
>d5e0	03					.byte CL	;wh_CodeLength
>d5e5	36					.byte $36
>d5e6	72 6f 72			L1:	.text "ror"	;  name of word as a string, ending at wh_NameLastChar
=54633					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5e9	43					.byte (("ror"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d5ea	10					.byte WordFlags	;wh_Flags
>d5eb	03					.byte 3	;wh_CodeLength
>d5ec	0b					  .byte LinkDisplacement
=$d5ed					XtPtr1 ::= *
=54633					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5ed	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d5f0					en = *	; remember here
>d5eb	03					.byte CL	;wh_CodeLength
>d5f0	6e					.byte $6e
>d5f1	72 6f 72 2e 61			L1:	.text "ror.a"	;  name of word as a string, ending at wh_NameLastChar
=54646					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d5f6	25					.byte (("ror.a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d5f7	10					.byte WordFlags	;wh_Flags
>d5f8	03					.byte 3	;wh_CodeLength
>d5f9	0d					  .byte LinkDisplacement
=$d5fa					XtPtr1 ::= *
=54646					WordListLink ::= Nt0 ; remember the nt of this word for later
.d5fa	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d5fd					en = *	; remember here
>d5f8	03					.byte CL	;wh_CodeLength
>d5fd	6a					.byte $6a
>d5fe	72 6f 72 2e 78			L1:	.text "ror.x"	;  name of word as a string, ending at wh_NameLastChar
=54659					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d603	05					.byte (("ror.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d604	10					.byte WordFlags	;wh_Flags
>d605	03					.byte 3	;wh_CodeLength
>d606	0d					  .byte LinkDisplacement
=$d607					XtPtr1 ::= *
=54659					WordListLink ::= Nt0 ; remember the nt of this word for later
.d607	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d60a					en = *	; remember here
>d605	03					.byte CL	;wh_CodeLength
>d60a	7e					.byte $7e
>d60b	72 6f 72 2e 7a			L1:	.text "ror.z"	;  name of word as a string, ending at wh_NameLastChar
=54672					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d610	45					.byte (("ror.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d611	10					.byte WordFlags	;wh_Flags
>d612	03					.byte 3	;wh_CodeLength
>d613	0d					  .byte LinkDisplacement
=$d614					XtPtr1 ::= *
=54672					WordListLink ::= Nt0 ; remember the nt of this word for later
.d614	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d617					en = *	; remember here
>d612	03					.byte CL	;wh_CodeLength
>d617	66					.byte $66
>d618	72 6f 72 2e 7a 78		L1:	.text "ror.zx"	;  name of word as a string, ending at wh_NameLastChar
=54686					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d61e	06					.byte (("ror.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d61f	10					.byte WordFlags	;wh_Flags
>d620	03					.byte 3	;wh_CodeLength
>d621	0e					  .byte LinkDisplacement
=$d622					XtPtr1 ::= *
=54686					WordListLink ::= Nt0 ; remember the nt of this word for later
.d622	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d625					en = *	; remember here
>d620	03					.byte CL	;wh_CodeLength
>d625	76					.byte $76
>d626	72 74 69			L1:	.text "rti"	;  name of word as a string, ending at wh_NameLastChar
=54697					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d629	23					.byte (("rti"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d62a	10					.byte WordFlags	;wh_Flags
>d62b	03					.byte 3	;wh_CodeLength
>d62c	0b					  .byte LinkDisplacement
=$d62d					XtPtr1 ::= *
=54697					WordListLink ::= Nt0 ; remember the nt of this word for later
.d62d	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d630					en = *	; remember here
>d62b	03					.byte CL	;wh_CodeLength
>d630	40					.byte $40
>d631	72 74 73			L1:	.text "rts"	;  name of word as a string, ending at wh_NameLastChar
=54708					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d634	63					.byte (("rts"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d635	10					.byte WordFlags	;wh_Flags
>d636	03					.byte 3	;wh_CodeLength
>d637	0b					  .byte LinkDisplacement
=$d638					XtPtr1 ::= *
=54708					WordListLink ::= Nt0 ; remember the nt of this word for later
.d638	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d63b					en = *	; remember here
>d636	03					.byte CL	;wh_CodeLength
>d63b	60					.byte $60
>d63c	73 62 63			L1:	.text "sbc"	;  name of word as a string, ending at wh_NameLastChar
=54719					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d63f	63					.byte (("sbc"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d640	10					.byte WordFlags	;wh_Flags
>d641	03					.byte 3	;wh_CodeLength
>d642	0b					  .byte LinkDisplacement
=$d643					XtPtr1 ::= *
=54719					WordListLink ::= Nt0 ; remember the nt of this word for later
.d643	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d646					en = *	; remember here
>d641	03					.byte CL	;wh_CodeLength
>d646	ed					.byte $ed
>d647	73 62 63 2e 23			L1:	.text "sbc.#"	;  name of word as a string, ending at wh_NameLastChar
=54732					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d64c	65					.byte (("sbc.#"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d64d	10					.byte WordFlags	;wh_Flags
>d64e	03					.byte 3	;wh_CodeLength
>d64f	0d					  .byte LinkDisplacement
=$d650					XtPtr1 ::= *
=54732					WordListLink ::= Nt0 ; remember the nt of this word for later
.d650	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d653					en = *	; remember here
>d64e	03					.byte CL	;wh_CodeLength
>d653	e9					.byte $e9
>d654	73 62 63 2e 78			L1:	.text "sbc.x"	;  name of word as a string, ending at wh_NameLastChar
=54745					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d659	05					.byte (("sbc.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d65a	10					.byte WordFlags	;wh_Flags
>d65b	03					.byte 3	;wh_CodeLength
>d65c	0d					  .byte LinkDisplacement
=$d65d					XtPtr1 ::= *
=54745					WordListLink ::= Nt0 ; remember the nt of this word for later
.d65d	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d660					en = *	; remember here
>d65b	03					.byte CL	;wh_CodeLength
>d660	fd					.byte $fd
>d661	73 62 63 2e 79			L1:	.text "sbc.y"	;  name of word as a string, ending at wh_NameLastChar
=54758					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d666	25					.byte (("sbc.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d667	10					.byte WordFlags	;wh_Flags
>d668	03					.byte 3	;wh_CodeLength
>d669	0d					  .byte LinkDisplacement
=$d66a					XtPtr1 ::= *
=54758					WordListLink ::= Nt0 ; remember the nt of this word for later
.d66a	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d66d					en = *	; remember here
>d668	03					.byte CL	;wh_CodeLength
>d66d	f9					.byte $f9
>d66e	73 62 63 2e 7a			L1:	.text "sbc.z"	;  name of word as a string, ending at wh_NameLastChar
=54771					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d673	45					.byte (("sbc.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d674	10					.byte WordFlags	;wh_Flags
>d675	03					.byte 3	;wh_CodeLength
>d676	0d					  .byte LinkDisplacement
=$d677					XtPtr1 ::= *
=54771					WordListLink ::= Nt0 ; remember the nt of this word for later
.d677	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d67a					en = *	; remember here
>d675	03					.byte CL	;wh_CodeLength
>d67a	e5					.byte $e5
>d67b	73 62 63 2e 7a 69 79		L1:	.text "sbc.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54786					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d682	27					.byte (("sbc.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d683	10					.byte WordFlags	;wh_Flags
>d684	03					.byte 3	;wh_CodeLength
>d685	0f					  .byte LinkDisplacement
=$d686					XtPtr1 ::= *
=54786					WordListLink ::= Nt0 ; remember the nt of this word for later
.d686	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d689					en = *	; remember here
>d684	03					.byte CL	;wh_CodeLength
>d689	f1					.byte $f1
>d68a	73 62 63 2e 7a 78		L1:	.text "sbc.zx"	;  name of word as a string, ending at wh_NameLastChar
=54800					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d690	06					.byte (("sbc.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d691	10					.byte WordFlags	;wh_Flags
>d692	03					.byte 3	;wh_CodeLength
>d693	0e					  .byte LinkDisplacement
=$d694					XtPtr1 ::= *
=54800					WordListLink ::= Nt0 ; remember the nt of this word for later
.d694	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d697					en = *	; remember here
>d692	03					.byte CL	;wh_CodeLength
>d697	f5					.byte $f5
>d698	73 62 63 2e 7a 78 69		L1:	.text "sbc.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54815					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d69f	27					.byte (("sbc.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d6a0	10					.byte WordFlags	;wh_Flags
>d6a1	03					.byte 3	;wh_CodeLength
>d6a2	0f					  .byte LinkDisplacement
=$d6a3					XtPtr1 ::= *
=54815					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6a3	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d6a6					en = *	; remember here
>d6a1	03					.byte CL	;wh_CodeLength
>d6a6	e1					.byte $e1
>d6a7	73 65 63			L1:	.text "sec"	;  name of word as a string, ending at wh_NameLastChar
=54826					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6aa	63					.byte (("sec"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6ab	10					.byte WordFlags	;wh_Flags
>d6ac	03					.byte 3	;wh_CodeLength
>d6ad	0b					  .byte LinkDisplacement
=$d6ae					XtPtr1 ::= *
=54826					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6ae	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6b1					en = *	; remember here
>d6ac	03					.byte CL	;wh_CodeLength
>d6b1	38					.byte $38
>d6b2	73 65 64			L1:	.text "sed"	;  name of word as a string, ending at wh_NameLastChar
=54837					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6b5	83					.byte (("sed"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6b6	10					.byte WordFlags	;wh_Flags
>d6b7	03					.byte 3	;wh_CodeLength
>d6b8	0b					  .byte LinkDisplacement
=$d6b9					XtPtr1 ::= *
=54837					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6b9	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6bc					en = *	; remember here
>d6b7	03					.byte CL	;wh_CodeLength
>d6bc	f8					.byte $f8
>d6bd	73 65 69			L1:	.text "sei"	;  name of word as a string, ending at wh_NameLastChar
=54848					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6c0	23					.byte (("sei"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6c1	10					.byte WordFlags	;wh_Flags
>d6c2	03					.byte 3	;wh_CodeLength
>d6c3	0b					  .byte LinkDisplacement
=$d6c4					XtPtr1 ::= *
=54848					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6c4	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d6c7					en = *	; remember here
>d6c2	03					.byte CL	;wh_CodeLength
>d6c7	78					.byte $78
>d6c8	73 74 61			L1:	.text "sta"	;  name of word as a string, ending at wh_NameLastChar
=54859					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6cb	23					.byte (("sta"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d6cc	10					.byte WordFlags	;wh_Flags
>d6cd	03					.byte 3	;wh_CodeLength
>d6ce	0b					  .byte LinkDisplacement
=$d6cf					XtPtr1 ::= *
=54859					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6cf	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6d2					en = *	; remember here
>d6cd	03					.byte CL	;wh_CodeLength
>d6d2	8d					.byte $8d
>d6d3	73 74 61 2e 78			L1:	.text "sta.x"	;  name of word as a string, ending at wh_NameLastChar
=54872					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6d8	05					.byte (("sta.x"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6d9	10					.byte WordFlags	;wh_Flags
>d6da	03					.byte 3	;wh_CodeLength
>d6db	0d					  .byte LinkDisplacement
=$d6dc					XtPtr1 ::= *
=54872					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6dc	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6df					en = *	; remember here
>d6da	03					.byte CL	;wh_CodeLength
>d6df	9d					.byte $9d
>d6e0	73 74 61 2e 79			L1:	.text "sta.y"	;  name of word as a string, ending at wh_NameLastChar
=54885					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6e5	25					.byte (("sta.y"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6e6	10					.byte WordFlags	;wh_Flags
>d6e7	03					.byte 3	;wh_CodeLength
>d6e8	0d					  .byte LinkDisplacement
=$d6e9					XtPtr1 ::= *
=54885					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6e9	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d6ec					en = *	; remember here
>d6e7	03					.byte CL	;wh_CodeLength
>d6ec	99					.byte $99
>d6ed	73 74 61 2e 7a			L1:	.text "sta.z"	;  name of word as a string, ending at wh_NameLastChar
=54898					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d6f2	45					.byte (("sta.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d6f3	10					.byte WordFlags	;wh_Flags
>d6f4	03					.byte 3	;wh_CodeLength
>d6f5	0d					  .byte LinkDisplacement
=$d6f6					XtPtr1 ::= *
=54898					WordListLink ::= Nt0 ; remember the nt of this word for later
.d6f6	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d6f9					en = *	; remember here
>d6f4	03					.byte CL	;wh_CodeLength
>d6f9	85					.byte $85
>d6fa	73 74 61 2e 7a 69 79		L1:	.text "sta.ziy"	;  name of word as a string, ending at wh_NameLastChar
=54913					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d701	27					.byte (("sta.ziy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d702	10					.byte WordFlags	;wh_Flags
>d703	03					.byte 3	;wh_CodeLength
>d704	0f					  .byte LinkDisplacement
=$d705					XtPtr1 ::= *
=54913					WordListLink ::= Nt0 ; remember the nt of this word for later
.d705	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d708					en = *	; remember here
>d703	03					.byte CL	;wh_CodeLength
>d708	91					.byte $91
>d709	73 74 61 2e 7a 78		L1:	.text "sta.zx"	;  name of word as a string, ending at wh_NameLastChar
=54927					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d70f	06					.byte (("sta.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d710	10					.byte WordFlags	;wh_Flags
>d711	03					.byte 3	;wh_CodeLength
>d712	0e					  .byte LinkDisplacement
=$d713					XtPtr1 ::= *
=54927					WordListLink ::= Nt0 ; remember the nt of this word for later
.d713	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d716					en = *	; remember here
>d711	03					.byte CL	;wh_CodeLength
>d716	95					.byte $95
>d717	73 74 61 2e 7a 78 69		L1:	.text "sta.zxi"	;  name of word as a string, ending at wh_NameLastChar
=54942					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d71e	27					.byte (("sta.zxi"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=15					LinkDisplacement = Nt0-WordListLink
>d71f	10					.byte WordFlags	;wh_Flags
>d720	03					.byte 3	;wh_CodeLength
>d721	0f					  .byte LinkDisplacement
=$d722					XtPtr1 ::= *
=54942					WordListLink ::= Nt0 ; remember the nt of this word for later
.d722	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d725					en = *	; remember here
>d720	03					.byte CL	;wh_CodeLength
>d725	81					.byte $81
>d726	73 74 78			L1:	.text "stx"	;  name of word as a string, ending at wh_NameLastChar
=54953					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d729	03					.byte (("stx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d72a	10					.byte WordFlags	;wh_Flags
>d72b	03					.byte 3	;wh_CodeLength
>d72c	0b					  .byte LinkDisplacement
=$d72d					XtPtr1 ::= *
=54953					WordListLink ::= Nt0 ; remember the nt of this word for later
.d72d	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d730					en = *	; remember here
>d72b	03					.byte CL	;wh_CodeLength
>d730	8e					.byte $8e
>d731	73 74 78 2e 7a			L1:	.text "stx.z"	;  name of word as a string, ending at wh_NameLastChar
=54966					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d736	45					.byte (("stx.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d737	10					.byte WordFlags	;wh_Flags
>d738	03					.byte 3	;wh_CodeLength
>d739	0d					  .byte LinkDisplacement
=$d73a					XtPtr1 ::= *
=54966					WordListLink ::= Nt0 ; remember the nt of this word for later
.d73a	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d73d					en = *	; remember here
>d738	03					.byte CL	;wh_CodeLength
>d73d	86					.byte $86
>d73e	73 74 78 2e 7a 79		L1:	.text "stx.zy"	;  name of word as a string, ending at wh_NameLastChar
=54980					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d744	26					.byte (("stx.zy"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d745	10					.byte WordFlags	;wh_Flags
>d746	03					.byte 3	;wh_CodeLength
>d747	0e					  .byte LinkDisplacement
=$d748					XtPtr1 ::= *
=54980					WordListLink ::= Nt0 ; remember the nt of this word for later
.d748	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d74b					en = *	; remember here
>d746	03					.byte CL	;wh_CodeLength
>d74b	96					.byte $96
>d74c	73 74 79			L1:	.text "sty"	;  name of word as a string, ending at wh_NameLastChar
=54991					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d74f	23					.byte (("sty"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d750	10					.byte WordFlags	;wh_Flags
>d751	03					.byte 3	;wh_CodeLength
>d752	0b					  .byte LinkDisplacement
=$d753					XtPtr1 ::= *
=54991					WordListLink ::= Nt0 ; remember the nt of this word for later
.d753	20 1f d0	jsr $d01f		jsr asm_2
=3					CL	.var *-XtPtr1
=$d756					en = *	; remember here
>d751	03					.byte CL	;wh_CodeLength
>d756	8c					.byte $8c
>d757	73 74 79 2e 7a			L1:	.text "sty.z"	;  name of word as a string, ending at wh_NameLastChar
=55004					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d75c	45					.byte (("sty.z"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=13					LinkDisplacement = Nt0-WordListLink
>d75d	10					.byte WordFlags	;wh_Flags
>d75e	03					.byte 3	;wh_CodeLength
>d75f	0d					  .byte LinkDisplacement
=$d760					XtPtr1 ::= *
=55004					WordListLink ::= Nt0 ; remember the nt of this word for later
.d760	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d763					en = *	; remember here
>d75e	03					.byte CL	;wh_CodeLength
>d763	84					.byte $84
>d764	73 74 79 2e 7a 78		L1:	.text "sty.zx"	;  name of word as a string, ending at wh_NameLastChar
=55018					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d76a	06					.byte (("sty.zx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d76b	10					.byte WordFlags	;wh_Flags
>d76c	03					.byte 3	;wh_CodeLength
>d76d	0e					  .byte LinkDisplacement
=$d76e					XtPtr1 ::= *
=55018					WordListLink ::= Nt0 ; remember the nt of this word for later
.d76e	20 09 d0	jsr $d009		jsr asm_1
=3					CL	.var *-XtPtr1
=$d771					en = *	; remember here
>d76c	03					.byte CL	;wh_CodeLength
>d771	94					.byte $94
>d772	74 61 78			L1:	.text "tax"	;  name of word as a string, ending at wh_NameLastChar
=55029					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d775	03					.byte (("tax"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d776	10					.byte WordFlags	;wh_Flags
>d777	03					.byte 3	;wh_CodeLength
>d778	0b					  .byte LinkDisplacement
=$d779					XtPtr1 ::= *
=55029					WordListLink ::= Nt0 ; remember the nt of this word for later
.d779	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d77c					en = *	; remember here
>d777	03					.byte CL	;wh_CodeLength
>d77c	aa					.byte $aa
>d77d	74 61 79			L1:	.text "tay"	;  name of word as a string, ending at wh_NameLastChar
=55040					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d780	23					.byte (("tay"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d781	10					.byte WordFlags	;wh_Flags
>d782	03					.byte 3	;wh_CodeLength
>d783	0b					  .byte LinkDisplacement
=$d784					XtPtr1 ::= *
=55040					WordListLink ::= Nt0 ; remember the nt of this word for later
.d784	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d787					en = *	; remember here
>d782	03					.byte CL	;wh_CodeLength
>d787	a8					.byte $a8
>d788	74 73 78			L1:	.text "tsx"	;  name of word as a string, ending at wh_NameLastChar
=55051					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d78b	03					.byte (("tsx"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d78c	10					.byte WordFlags	;wh_Flags
>d78d	03					.byte 3	;wh_CodeLength
>d78e	0b					  .byte LinkDisplacement
=$d78f					XtPtr1 ::= *
=55051					WordListLink ::= Nt0 ; remember the nt of this word for later
.d78f	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d792					en = *	; remember here
>d78d	03					.byte CL	;wh_CodeLength
>d792	ba					.byte $BA
>d793	74 78 61			L1:	.text "txa"	;  name of word as a string, ending at wh_NameLastChar
=55062					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d796	23					.byte (("txa"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d797	10					.byte WordFlags	;wh_Flags
>d798	03					.byte 3	;wh_CodeLength
>d799	0b					  .byte LinkDisplacement
=$d79a					XtPtr1 ::= *
=55062					WordListLink ::= Nt0 ; remember the nt of this word for later
.d79a	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d79d					en = *	; remember here
>d798	03					.byte CL	;wh_CodeLength
>d79d	8a					.byte $8a
>d79e	74 78 73			L1:	.text "txs"	;  name of word as a string, ending at wh_NameLastChar
=55073					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7a1	63					.byte (("txs"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7a2	10					.byte WordFlags	;wh_Flags
>d7a3	03					.byte 3	;wh_CodeLength
>d7a4	0b					  .byte LinkDisplacement
=$d7a5					XtPtr1 ::= *
=55073					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7a5	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d7a8					en = *	; remember here
>d7a3	03					.byte CL	;wh_CodeLength
>d7a8	9a					.byte $9a
>d7a9	74 79 61			L1:	.text "tya"	;  name of word as a string, ending at wh_NameLastChar
=55084					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7ac	23					.byte (("tya"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=11					LinkDisplacement = Nt0-WordListLink
>d7ad	10					.byte WordFlags	;wh_Flags
>d7ae	03					.byte 3	;wh_CodeLength
>d7af	0b					  .byte LinkDisplacement
=$d7b0					XtPtr1 ::= *
=55084					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7b0	20 28 d0	jsr $d028		jsr asm_0
=3					CL	.var *-XtPtr1
=$d7b3					en = *	; remember here
>d7ae	03					.byte CL	;wh_CodeLength
>d7b3	98					.byte $98
=55084					asm_table = WordListLink ; head of instruction word list for disassembler
>d7b4	70 75 73 68 2d 61		L1:	.text "push-a"	;  name of word as a string, ending at wh_NameLastChar
=55098					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7ba	26					.byte (("push-a"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7bb	18					.byte WordFlags	;wh_Flags
>d7bc	03					.byte 3	;wh_CodeLength
>d7bd	0e					  .byte LinkDisplacement
=$d7be					XtPtr1 ::= *
=55098					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7be	a9 ec		lda #$ec			lda #<PushZA
.d7c0	a0 b7		ldy #$b7			ldy #>PushZA
.d7c2	4c 37 cd	jmp $cd37			jmp Jsr_Comma_YA
=7					CL	.var *-XtPtr1
=$d7c5					en = *	; remember here
>d7bc	07					.byte CL	;wh_CodeLength
>d7c5	2d 2d 3e			L1:	.text "-->"	;  name of word as a string, ending at wh_NameLastChar
=55112					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7c8	c3					.byte (("-->"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=14					LinkDisplacement = Nt0-WordListLink
>d7c9	18					.byte WordFlags	;wh_Flags
>d7ca	03					.byte 3	;wh_CodeLength
>d7cb	0e					  .byte LinkDisplacement
=$d7cc					XtPtr1 ::= *
=55112					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7cc	4c 3c ca	jmp $ca3c			jmp Here
=3					CL	.var *-XtPtr1
=$d7cf					en = *	; remember here
>d7ca	03					.byte CL	;wh_CodeLength
>d7cf	3c 6a				L1:	.text "<j"	;  name of word as a string, ending at wh_NameLastChar
=55121					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d1	42					.byte (("<j"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$08					WordFlags ::= IM	; modifyable copy, remember for later
=9					LinkDisplacement = Nt0-WordListLink
>d7d2	08					.byte WordFlags	;wh_Flags
>d7d3	03					.byte 3	;wh_CodeLength
>d7d4	09					  .byte LinkDisplacement
=$d7d5					XtPtr1 ::= *
=55121					WordListLink ::= Nt0 ; remember the nt of this word for later
=0					CL	.var *-XtPtr1
=$d7d5					en = *	; remember here
>d7d3	00					.byte CL	;wh_CodeLength
.d7d5	60		rts				rts
>d7d6	3c 62				L1:	.text "<b"	;  name of word as a string, ending at wh_NameLastChar
=55128					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7d8	42					.byte (("<b"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=24					WordFlags ::= IM+NN	; modifyable copy, remember for later
=7					LinkDisplacement = Nt0-WordListLink
>d7d9	18					.byte WordFlags	;wh_Flags
>d7da	03					.byte 3	;wh_CodeLength
>d7db	07					  .byte LinkDisplacement
=$d7dc					XtPtr1 ::= *
=55128					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7dc					asm_back_branch:
.d7dc	20 3c ca	jsr $ca3c			jsr Here		; ( addr-l addr-h )
.d7df	20 cb cb	jsr $cbcb			jsr Minus		; ( offset )
.d7e2	a9 fe		lda #$fe			lda #$fe
.d7e4	4c 5e ca	jmp $ca5e			jmp Minus_A
=11					CL	.var *-XtPtr1
=$d7e7					en = *	; remember here
>d7da	0b					.byte CL	;wh_CodeLength
>d7e7	44 69 73 41 73 6d		L1:	.text "DisAsm"	;  name of word as a string, ending at wh_NameLastChar
=55149					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d7ed	a6					.byte (("DisAsm"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=21					LinkDisplacement = Nt0-WordListLink
>d7ee	10					.byte WordFlags	;wh_Flags
>d7ef	03					.byte 3	;wh_CodeLength
>d7f0	15					  .byte LinkDisplacement
=$d7f1					XtPtr1 ::= *
=55149					WordListLink ::= Nt0 ; remember the nt of this word for later
.d7f1					DisAsm:
.d7f1	20 86 c4	jsr $c486			jsr Bounds		; ( addr_end addr )
.d7f4					_instr:
.d7f4	20 3d b4	jsr $b43d			jsr underflow_2
.d7f7	b5 24		lda $24,x			lda DStack+0,x		; addr >= addr_end?
.d7f9	d5 26		cmp $26,x			cmp DStack+2,x
.d7fb	b5 25		lda $25,x			lda DStack+1,x
.d7fd	f5 27		sbc $27,x			sbc DStack+3,x
.d7ff	90 03		bcc $d804			bcc +
.d801	4c 4a c5	jmp $c54a			jmp Two_drop		; discard parms & return
.d804					+
.d804	20 75 ab	jsr $ab75			jsr CR			; new line
.d807	20 6c cf	jsr $cf6c			jsr Dup			; print address
.d80a	20 15 a9	jsr $a915			jsr Dot_Hex
.d80d	20 e2 cd	jsr $cde2			jsr Space
.d810	a1 24		lda ($24,x)			lda (DStack+0,x)	; print opcode byte
.d812	20 4c d9	jsr $d94c			jsr _print_a
.d815	a1 24		lda ($24,x)			lda (DStack+0,x)	; save opcode
.d817	85 18		sta $18				sta tmp3
.d819	20 6e ca	jsr $ca6e			jsr One_plus
.d81c	a9 2c		lda #$2c			lda #<asm_table		; for each asm opcode word
.d81e	a0 d7		ldy #$d7			ldy #>asm_table
.d820	85 14		sta $14				sta tmp1+0
.d822	84 15		sty $15				sty tmp1+1
.d824	d0 05		bne $d82b			bne _WTest
.d826	20 9b 82	jsr $829b	_WNext:		jsr LinkNext		;   next entry
.d829	f0 28		beq $d853			beq _unknown
.d82b	20 be bd	jsr $bdbe	_WTest:		jsr NameToIntTmp	; tmp2= xt
.d82e	a0 03		ldy #$03			ldy #3			;   opcode match?
.d830	b1 16		lda ($16),y			lda (tmp2),y
.d832	c5 18		cmp $18				cmp tmp3
.d834	d0 f0		bne $d826			bne _WNext
.d836	a5 18		lda $18				lda tmp3		; save opcode
.d838	48		pha				pha
.d839	a5 15		lda $15				lda tmp1+1		; save its nt
.d83b	48		pha				pha
.d83c	a5 14		lda $14				lda tmp1+0
.d83e	48		pha				pha
.d83f	a0 01		ldy #$01			ldy #1			; get processor routine addr lo byte from JSR
.d841	b1 16		lda ($16),y			lda (tmp2),y
.d843	c9 28		cmp #$28			cmp #<asm_0		; goto disasm processor
.d845	f0 17		beq $d85e			beq _c0
.d847	c9 09		cmp #$09			cmp #<asm_1
.d849	f0 49		beq $d894			beq _c1
.d84b	c9 1f		cmp #$1f			cmp #<asm_2
.d84d	f0 61		beq $d8b0			beq _c2
.d84f	c9 e9		cmp #$e9			cmp #<asm_r
.d851	f0 18		beq $d86b			beq _cr
.d853					_unknown:
.d853	20 2d d9	jsr $d92d			jsr _tab		; to source area
.d856	a9 3f		lda #$3f			lda #'?'
.d858	20 d6 cd	jsr $cdd6			jsr Emit_A
.d85b	4c f4 d7	jmp $d7f4			jmp _instr
.d85e					_c0:
.d85e	20 2d d9	jsr $d92d			jsr _tab		; to source area
.d861	68		pla				pla			; get opcode word nt
.d862	a8		tay				tay
.d863	68		pla				pla
.d864	20 32 d9	jsr $d932			jsr _print_opcode
.d867	68		pla				pla			; discard opcode
.d868	4c f4 d7	jmp $d7f4			jmp _instr
.d86b					_cr:
.d86b	20 43 d9	jsr $d943			jsr _get_byte		; get displacement byte
.d86e	a0 00		ldy #$00			ldy #0			; sign extend displacement
.d870	09 00		ora #$00			ora #0
.d872	10 01		bpl $d875			bpl +
.d874	88		dey				dey
.d875	20 bd b7	jsr $b7bd	+		jsr PushYA
.d878	20 6c cf	jsr $cf6c			jsr Dup			; save for TypeSymbol
.d87b	20 2d d9	jsr $d92d			jsr _tab		; to source area
.d87e	20 e3 cb	jsr $cbe3			jsr Dot			; print dest address
.d881	68		pla				pla			; get opcode word nt
.d882	a8		tay				tay
.d883	68		pla				pla
.d884	20 32 d9	jsr $d932			jsr _print_opcode
.d887	68		pla				pla			; discard opcode
.d888	20 45 cf	jsr $cf45			jsr Over		; calc dest addr
.d88b	20 b3 cb	jsr $cbb3			jsr Plus
.d88e	20 99 81	jsr $8199			jsr TypeSymbol		; print dest addr symbolic
.d891	4c f4 d7	jmp $d7f4			jmp _instr
.d894					_c1:
.d894	20 43 d9	jsr $d943			jsr _get_byte		; get operand
.d897	20 ec b7	jsr $b7ec			jsr PushZA
.d89a	20 2d d9	jsr $d92d			jsr _tab		; to source area
.d89d	20 6c cf	jsr $cf6c			jsr Dup
.d8a0	20 14 cc	jsr $cc14			jsr U_Dot		; print operand
.d8a3	68		pla				pla			; get opcode word nt
.d8a4	a8		tay				tay
.d8a5	68		pla				pla
.d8a6	20 32 d9	jsr $d932			jsr _print_opcode
.d8a9	68		pla				pla			; discard opcode
.d8aa	20 99 81	jsr $8199			jsr TypeSymbol
.d8ad	4c f4 d7	jmp $d7f4			jmp _instr
.d8b0					_c2:
.d8b0	20 43 d9	jsr $d943			jsr _get_byte		; get operand lo byte
.d8b3	48		pha				pha
.d8b4	20 43 d9	jsr $d943			jsr _get_byte		; get operand hi byte
.d8b7	ca		dex				dex			; push operand bytes
.d8b8	ca		dex				dex
.d8b9	95 25		sta $25,x			sta DStack+1,x
.d8bb	68		pla				pla
.d8bc	95 24		sta $24,x			sta DStack+0,x
.d8be	20 2d d9	jsr $d92d			jsr _tab		; to source area
.d8c1	20 6c cf	jsr $cf6c			jsr Dup
.d8c4	20 14 cc	jsr $cc14			jsr U_Dot		; print operand
.d8c7	68		pla				pla			; AY= opcode word nt
.d8c8	a8		tay				tay
.d8c9	68		pla				pla
.d8ca	20 32 d9	jsr $d932			jsr _print_opcode
.d8cd	20 6c cf	jsr $cf6c			jsr Dup
.d8d0	20 99 81	jsr $8199			jsr TypeSymbol		; print operand as symbol
.d8d3	68		pla				pla			; get opcode
.d8d4	c9 20		cmp #$20			cmp #$20		;  JSR
.d8d6	f0 09		beq $d8e1			beq _jsr
.d8d8	e8		inx		_jdrop:		inx			; Drop operand
.d8d9	e8		inx				inx
.d8da	4c f4 d7	jmp $d7f4			jmp _instr		; ( addr_end addr )
.d8dd	e8		inx		_2drop:		inx			; Drop jsr_nt
.d8de	e8		inx				inx
.d8df	d0 f7		bne $d8d8			bne _jdrop
.d8e1					_jsr:
.d8e1	20 00 b4	jsr $b400			jsr PopYA
.d8e4	c9 b1		cmp #$b1			cmp #<sliteral_runtime	; string literal?
.d8e6	d0 42		bne $d92a			bne _not_sliteral
.d8e8	c0 b8		cpy #$b8			cpy #>sliteral_runtime
.d8ea	d0 3e		bne $d92a			bne _not_sliteral
.d8ec	20 75 ab	jsr $ab75			jsr CR
.d8ef	20 6c cf	jsr $cf6c			jsr Dup			; ( addr_end addr addr )
.d8f2	20 15 a9	jsr $a915			jsr Dot_Hex
.d8f5	20 e2 cd	jsr $cde2			jsr Space
.d8f8	20 6c cf	jsr $cf6c			jsr Dup			; ( addr_end ? addr )
.d8fb	20 43 d9	jsr $d943			jsr _get_byte		; get JMP opcode
.d8fe	20 43 d9	jsr $d943			jsr _get_byte		; get JMP addr lo byte
.d901	95 26		sta $26,x			sta DStack+2,x
.d903	20 43 d9	jsr $d943			jsr _get_byte		; get JMP addr hi byte
.d906	95 27		sta $27,x			sta DStack+3,x		; ( addr_end string_end addr )
.d908	20 75 ab	jsr $ab75			jsr CR
.d90b	20 6c cf	jsr $cf6c			jsr Dup
.d90e	20 15 a9	jsr $a915			jsr Dot_Hex
.d911	20 e2 cd	jsr $cde2			jsr Space
.d914	b5 24		lda $24,x	_slit_11:	lda DStack+0,x		; done with string data?
.d916	d5 26		cmp $26,x			cmp DStack+2,x
.d918	b5 25		lda $25,x			lda DStack+1,x
.d91a	f5 27		sbc $27,x			sbc DStack+3,x
.d91c	b0 06		bcs $d924			bcs _slit_19
.d91e	20 43 d9	jsr $d943			jsr _get_byte
.d921	4c 14 d9	jmp $d914			jmp _slit_11
.d924					_slit_19:
.d924	20 a4 c9	jsr $c9a4			jsr Nip			; ( addr_end addr )
.d927	4c f4 d7	jmp $d7f4			jmp _instr
.d92a					_not_sliteral:
.d92a	4c f4 d7	jmp $d7f4			jmp _instr
.d92d					_tab:
.d92d	a9 09		lda #$09			lda #9
.d92f	4c d6 cd	jmp $cdd6			jmp Emit_A
.d932					_print_opcode:
.d932	20 7a cf	jsr $cf7a			jsr PushAY		; save opcode word nt
.d935	20 e2 cd	jsr $cde2			jsr Space
.d938	20 fa bd	jsr $bdfa			jsr Name_To_String	; get name string
.d93b	4c ee cd	jmp $cdee			jmp Type		; type word name
.d93e					_get_byte_silent:
.d93e	a1 24		lda ($24,x)			lda (DStack+0,x)
.d940	4c 6e ca	jmp $ca6e			jmp One_plus
.d943					_get_byte:
.d943	20 3e d9	jsr $d93e			jsr _get_byte_silent
.d946	48		pha				pha
.d947	20 4c d9	jsr $d94c			jsr _print_a
.d94a	68		pla				pla
.d94b	60		rts				rts
.d94c					_print_a:
.d94c	20 ec b7	jsr $b7ec			jsr PushZA
.d94f	20 f4 a8	jsr $a8f4			jsr C_Dot_Hex
.d952	4c e2 cd	jmp $cde2			jmp Space
=55149					assembler_dictionary_start = WordListLink ; END of ASSEMBLER-WORDLIST
=0					WordListLink .var 0	; start wordlist
>d955	6c				L1:	.text "l"	;  name of word as a string, ending at wh_NameLastChar
=55510					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d956	81					.byte (("l"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=55510					LinkDisplacement = Nt0-WordListLink
=$11						  WordFlags ::= WordFlags | FP
>d957	11					.byte WordFlags	;wh_Flags
>d958	03					.byte 3	;wh_CodeLength
>d959	00 00					  .word WordListLink
=$d95b					XtPtr1 ::= *
=55510					WordListLink ::= Nt0 ; remember the nt of this word for later
.d95b	4c cd a4	jmp $a4cd	Editor_l:	jmp ListScr
=3					CL	.var *-XtPtr1
=$d95e					en = *	; remember here
>d958	03					.byte CL	;wh_CodeLength
.d95e					Editor_Screen_Helper:
.d95e	20 6c cf	jsr $cf6c			jsr Dup
.d961	20 df a2	jsr $a2df			jsr Scr
.d964	20 c7 ce	jsr $cec7			jsr Store
.d967	4c ea a3	jmp $a3ea			jmp Buffer
>d96a	65 6e 74 65 72 2d 73 63		L1:	.text "enter-screen"	;  name of word as a string, ending at wh_NameLastChar
>d972	72 65 65 6e
=55542					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d976	cc					.byte (("enter-screen"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d977	10					.byte WordFlags	;wh_Flags
>d978	03					.byte 3	;wh_CodeLength
>d979	20					  .byte LinkDisplacement
=$d97a					XtPtr1 ::= *
=55542					WordListLink ::= Nt0 ; remember the nt of this word for later
.d97a					Editor_Enter_Screen:
.d97a	20 5e d9	jsr $d95e			jsr Editor_Screen_Helper
.d97d	a9 00		lda #$00			lda #0			; Overwrite the lines one at a time.
.d97f	95 24		sta $24,x	_loop:		sta DStack+0,x
.d981	20 ec b7	jsr $b7ec			jsr PushZA		; Put the current line number on the stack.
.d984	20 e4 d9	jsr $d9e4			jsr Editor_o		; prompt for overwrite.
.d987	f6 24		inc $24,x			inc DStack+0,x		; Move on to the next line.
.d989	b5 24		lda $24,x			lda DStack+0,x
.d98b	c9 10		cmp #$10			cmp #16
.d98d	90 f0		bcc $d97f			bcc _loop
.d98f	e8		inx				inx			; Drop work area
.d990	e8		inx				inx
=23					CL	.var *-XtPtr1
=$d991					en = *	; remember here
>d978	17					.byte CL	;wh_CodeLength
.d991	60		rts				rts
>d992	6c 69 6e 65			L1:	.text "line"	;  name of word as a string, ending at wh_NameLastChar
=55574					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d996	a4					.byte (("line"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=32					LinkDisplacement = Nt0-WordListLink
>d997	10					.byte WordFlags	;wh_Flags
>d998	03					.byte 3	;wh_CodeLength
>d999	20					  .byte LinkDisplacement
=$d99a					XtPtr1 ::= *
=55574					WordListLink ::= Nt0 ; remember the nt of this word for later
.d99a					Editor_line:
.d99a	a9 06		lda #$06			lda #6		; Multiply the TOS by 64 (chars/line) to compute offset.
.d99c	20 56 cb	jsr $cb56			jsr LShift_A	; *64 is same as left shift 6 times.
.d99f	20 df a2	jsr $a2df			jsr Scr
.d9a2	20 ae ce	jsr $ceae			jsr Fetch
.d9a5	20 82 a3	jsr $a382			jsr Block
.d9a8	4c b3 cb	jmp $cbb3			jmp Plus
=17					CL	.var *-XtPtr1
=$d9ab					en = *	; remember here
>d998	11					.byte CL	;wh_CodeLength
>d9ab	65 72 61 73 65 2d 73 63		L1:	.text "erase-screen"	;  name of word as a string, ending at wh_NameLastChar
>d9b3	72 65 65 6e
=55607					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9b7	cc					.byte (("erase-screen"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=33					LinkDisplacement = Nt0-WordListLink
>d9b8	10					.byte WordFlags	;wh_Flags
>d9b9	03					.byte 3	;wh_CodeLength
>d9ba	21					  .byte LinkDisplacement
=$d9bb					XtPtr1 ::= *
=55607					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9bb					Editor_Erase_Screen:
.d9bb	20 5e d9	jsr $d95e			jsr Editor_Screen_Helper
.d9be	a9 00		lda #$00			lda #<1024
.d9c0	a0 04		ldy #$04			ldy #>1024
.d9c2	20 bd b7	jsr $b7bd			jsr PushYA
.d9c5	20 41 be	jsr $be41			jsr Blank		; Erase the entire block (fill with spaces).
.d9c8	4c d7 a3	jmp $a3d7			jmp Update		; Mark buffer as updated.
=16					CL	.var *-XtPtr1
=$d9cb					en = *	; remember here
>d9b9	10					.byte CL	;wh_CodeLength
>d9cb	65 6c				L1:	.text "el"	;  name of word as a string, ending at wh_NameLastChar
=55629					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9cd	82					.byte (("el"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=22					LinkDisplacement = Nt0-WordListLink
>d9ce	10					.byte WordFlags	;wh_Flags
>d9cf	03					.byte 3	;wh_CodeLength
>d9d0	16					  .byte LinkDisplacement
=$d9d1					XtPtr1 ::= *
=55629					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9d1					Editor_el:
.d9d1	20 9a d9	jsr $d99a			jsr Editor_line
.d9d4	a9 40		lda #$40			lda #64			;(# of chars/line)
.d9d6	20 ec b7	jsr $b7ec			jsr PushZA
.d9d9	20 41 be	jsr $be41			jsr Blank		; Fill with spaces.
.d9dc	4c d7 a3	jmp $a3d7			jmp Update		; Mark buffer as updated.
=14					CL	.var *-XtPtr1
=$d9df					en = *	; remember here
>d9cf	0e					.byte CL	;wh_CodeLength
>d9df	6f				L1:	.text "o"	;  name of word as a string, ending at wh_NameLastChar
=55648					Nt0 = *-(wh_NameLastChar+1)	; remember our nt
>d9e0	e1					.byte (("o"[-1]&7)<<5)+(*-L1)	;wh_HashNameLen
=$10					WordFlags ::= NN	; modifyable copy, remember for later
=19					LinkDisplacement = Nt0-WordListLink
>d9e1	10					.byte WordFlags	;wh_Flags
>d9e2	03					.byte 3	;wh_CodeLength
>d9e3	13					  .byte LinkDisplacement
=$d9e4					XtPtr1 ::= *
=55648					WordListLink ::= Nt0 ; remember the nt of this word for later
.d9e4					Editor_o:
.d9e4	20 75 ab	jsr $ab75			jsr CR
.d9e7	20 6c cf	jsr $cf6c			jsr Dup
.d9ea	a9 02		lda #$02			lda #2
.d9ec	20 46 cc	jsr $cc46			jsr U_Dot_R_A
.d9ef	20 e2 cd	jsr $cde2			jsr Space
.d9f2	a9 2a		lda #$2a			lda #'*'
.d9f4	20 d6 cd	jsr $cdd6			jsr Emit_A
.d9f7	20 e2 cd	jsr $cde2			jsr Space
.d9fa	20 9a d9	jsr $d99a			jsr Editor_line
.d9fd	20 6c cf	jsr $cf6c			jsr Dup		; Save a copy of the line address for later.
.da00	a9 40		lda #$40			lda #64		; chars/line
.da02	20 ec b7	jsr $b7ec			jsr PushZA
.da05	20 be c2	jsr $c2be			jsr Accept
.da08	20 6c cf	jsr $cf6c			jsr Dup
.da0b	20 8c ce	jsr $ce8c			jsr Not_Rot
.da0e	20 b3 cb	jsr $cbb3			jsr Plus
.da11	a9 40		lda #$40			lda #64		; chars/line
.da13	20 ec b7	jsr $b7ec			jsr PushZA
.da16	20 67 ce	jsr $ce67			jsr Rot
.da19	20 cb cb	jsr $cbcb			jsr Minus
.da1c	20 41 be	jsr $be41			jsr Blank
.da1f	4c d7 a3	jmp $a3d7			jmp Update
=62					CL	.var *-XtPtr1
=$da22					en = *	; remember here
>d9e2	3e					.byte CL	;wh_CodeLength
=55648					editor_dictionary_start = WordListLink ; END of EDITOR-WORDLIST

;******  Processing file: platform/../strings.asm

>da22	20 6f 6b 00			str_ok:         .text " ok", 0         ; note space at beginning
>da26	20 63 6f 6d 70 69 6c 65		str_compiled:   .text " compiled", 0   ; note space at beginning
>da2e	64 00
>da30	72 65 64 65 66 69 6e 65		str_redefined:  .text "redefined ", 0  ; note space at end
>da38	64 20 00
>da3b	66 6c 61 67 73 3a 00		str_see_flags:  .text "flags:", 0
>da42	6e 74 3a 20 24 00		str_see_nt:     .text "nt: $", 0
>da48	78 74 3a 20 24 00		str_see_xt:     .text "xt: $", 0
>da4e	73 69 7a 65 3a 20 23 00		str_see_size:   .text "size: #", 0
.da56					Exception_Text_List:
>da56	ff 00					.text $100+err_Abort,0
>da58	fe 00					.text $100+err_AbortQuote,0
>da5a	fd 53 74 61 63 6b 20 4f			.text $100+err_Stack_Overflow,"Stack Overflow",0
>da62	76 65 72 66 6c 6f 77 00
>da6a	fc 53 74 61 63 6b 20 55			.text $100+err_Stack_Underflow,"Stack Underflow",0
>da72	6e 64 65 72 66 6c 6f 77 00
>da7b	f9 64 6f 2d 6c 6f 6f 70			.text $100+err_DoLoop_TooDeep,"do-loops nested too deeply during execution",0
>da83	73 20 6e 65 73 74 65 64 20 74 6f 6f 20 64 65 65
>da93	70 6c 79 20 64 75 72 69 6e 67 20 65 78 65 63 75
>daa3	74 69 6f 6e 00
>daa8	f6 44 69 76 69 64 65 20			.text $100+err_DivideBy0,"Divide by 0",0
>dab0	62 79 20 30 00
>dab5	f5 6f 75 74 20 6f 66 20			.text $100+err_OutOfRange,"out of range",0
>dabd	72 61 6e 67 65 00
>dac3	f4 61 72 67 75 6d 65 6e			.text $100+err_ArgTypeMismatch,"argument type mismatch",0
>dacb	74 20 74 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>dadb	f3 55 6e 64 65 66 69 6e			.text $100+err_UndefinedWord,"Undefined word",0
>dae3	65 64 20 77 6f 72 64 00
>daeb	f2 49 6e 74 65 72 70 72			.text $100+err_CompileOnly,"Interpreting a Compile-only word",0
>daf3	65 74 69 6e 67 20 61 20 43 6f 6d 70 69 6c 65 2d
>db03	6f 6e 6c 79 20 77 6f 72 64 00
>db0d	eb 75 6e 73 75 70 70 6f			.text $100+err_Unsupported,"unsupported operation",0 ;  (e.g., AT-XY on a too-dumb terminal)
>db15	72 74 65 64 20 6f 70 65 72 61 74 69 6f 6e 00
>db24	ea 63 6f 6e 74 72 6f 6c			.text $100+err_ControlMismatch,"control structure mismatch",0
>db2c	20 73 74 72 75 63 74 75 72 65 20 6d 69 73 6d 61
>db3c	74 63 68 00
>db40	e0 69 6e 76 61 6c 69 64			.text $100+err_InvalidName,"invalid name",0 ; argument (e.g., TO name)
>db48	20 6e 61 6d 65 00
>db4e	df 62 6c 6f 63 6b 20 72			.text $100+err_BlockRead,"block read",0
>db56	65 61 64 00
>db5a	de 62 6c 6f 63 6b 20 77			.text $100+err_BlockWrite,"block write",0
>db62	72 69 74 65 00
>db67	d6 46 50 20 64 69 76 69			.text $100+err_FPDivideBy0,"FP divide by zero",0
>db6f	64 65 20 62 79 20 7a 65 72 6f 00
>db7a	d5 46 50 20 72 65 73 75			.text $100+err_FPOutOfRange,"FP result out of range",0
>db82	6c 74 20 6f 75 74 20 6f 66 20 72 61 6e 67 65 00
>db92	d4 46 50 20 73 74 61 63			.text $100+err_FPStackOverflow,"FP stack overflow",0
>db9a	6b 20 6f 76 65 72 66 6c 6f 77 00
>dba5	d3 46 50 20 73 74 61 63			.text $100+err_FPStackUnderflow,"FP stack underflow",0
>dbad	6b 20 75 6e 64 65 72 66 6c 6f 77 00
>dbb9	d2 46 50 20 69 6e 76 61			.text $100+err_FPInvalidArg,"FP invalid argument",0
>dbc1	6c 69 64 20 61 72 67 75 6d 65 6e 74 00
>dbce	ca 46 50 20 75 6e 64 65			.text $100+err_FPUnderflow,"FP underflow",0
>dbd6	72 66 6c 6f 77 00
>dbdc	c5 41 4c 4c 4f 43 41 54			.text $100+err_Allocate,"ALLOCATE",0
>dbe4	45 00
>dbe6	c4 46 52 45 45 00			.text $100+err_Free,"FREE",0
>dbec	6b 52 65 66 69 6c 6c 00			.text $100+err_Refill,"Refill",0
>dbf4	6a 44 65 66 65 72 20 6e			.text $100+err_Defer,"Defer not set",0
>dbfc	6f 74 20 73 65 74 00
>dc03	69 41 6c 72 65 61 64 79			.text $100+err_AlreadyInterpreting,"Already interpreting",0
>dc0b	20 69 6e 74 65 72 70 72 65 74 69 6e 67 00
>dc19	68 41 6c 72 65 61 64 79			.text $100+err_AlreadyCompiling,"Already compiling",0
>dc21	20 63 6f 6d 70 69 6c 69 6e 67 00
>dc2c	66 4e 6f 20 77 6f 72 64			.text $100+err_TooManyWordlists,"No wordlists available",0
>dc34	6c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>dc44	00					.text 0 ; end of list

;******  Return to file: platform/../taliforth.asm


;******  Return to file: platform/platform-65816S.asm

>0766					hist_buff: .fill 8*128	; Input History for ACCEPT
.0b66					cp0:
.f100					v_nmi:
.f100					v_reset:
.f100					v_irq:
.f100					kernel_init:
.f100	78		sei		                sei             ; Disable interrupts
.f101	a2 00		ldx #$00	                ldx #0
.f103	bd 35 f1	lda $f135,x	-               lda s_kernel_id,x
.f106	f0 06		beq $f10e	                beq _done
.f108	20 20 f1	jsr $f120	                jsr kernel_putc
.f10b	e8		inx		                inx
.f10c	d0 f5		bne $f103	                bne -
.f10e					_done:
.f10e	4c 4c 80	jmp $804c	                jmp Cold
.f111					kernel_getc:
.f111	ee 35 03	inc $0335	-		inc RndState+0	; randomize
>f114	22						.byte $22	; jsl GET_BYTE_FROM_PC
>f115	33 e0						.word $e033
>f117	00						.byte 0
.f118	b0 f7		bcs $f111			bcs -
.f11a	60		rts				rts
.f11b					kernel_havekey:
.f11b	a9 eb		lda #$eb			lda #$100+err_unsupported
.f11d	4c 85 b4	jmp $b485			jmp ThrowA
.f120					kernel_putc:
>f120	22				-		.byte $22	; jsl SEND_BYTE_TO_PC
>f121	63 e0						.word $e063
>f123	00						.byte 0
.f124	b0 fa		bcs $f120			bcs -
.f126	60		rts				rts
.f127					platform_bye:
.f127	00		brk #		                brk
.f128					platform_CCAt:
.f128	ca		dex				dex
.f129	ca		dex				dex
.f12a	ca		dex				dex
.f12b	ca		dex				dex
>f12c	02 f4 24					.byte $02,$F4,DStack ; cop $f4	get 65816s simulator cycle count in DStack,x
.f12f	60		rts				rts
.f130					Platform_Block_Read:
.f130					Platform_Block_Write:
.f130	a9 eb		lda #$eb			lda #$100+err_Unsupported
.f132	20 85 b4	jsr $b485			jsr ThrowA
.f135					s_kernel_id:
>f135	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 kernel for 65816s (31. May 2024)", AscCR,AscLF, 0
>f13d	74 68 20 32 20 6b 65 72 6e 65 6c 20 66 6f 72 20
>f14d	36 35 38 31 36 73 20 28 33 31 2e 20 4d 61 79 20
>f15d	32 30 32 34 29 0d 0a 00
>fffa	00 f1				.word v_nmi
>fffc	00 f1				.word v_reset
>fffe	00 f1				.word v_irq

;******  End of listing
